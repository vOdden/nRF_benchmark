
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20029100 	.word	0x20029100
   4:	000045dd 	.word	0x000045dd
   8:	00012565 	.word	0x00012565
   c:	00004595 	.word	0x00004595
  10:	00004595 	.word	0x00004595
  14:	00004595 	.word	0x00004595
  18:	00004595 	.word	0x00004595
	...
  2c:	00004215 	.word	0x00004215
  30:	00004595 	.word	0x00004595
  34:	00000000 	.word	0x00000000
  38:	000041bd 	.word	0x000041bd
  3c:	00012e37 	.word	0x00012e37

00000040 <_irq_vector_table>:
  40:	00004301 00004301 00004301 00004301     .C...C...C...C..
  50:	00004301 00004301 00004301 00004301     .C...C...C...C..
  60:	00004301 00004301 00004301 00004301     .C...C...C...C..
  70:	00004301 00004301 00004301 00004301     .C...C...C...C..
  80:	00004301 00004301 00004301 00004301     .C...C...C...C..
  90:	00004301 00004301 00004301 00004301     .C...C...C...C..
  a0:	00004301 00004301 00004301 00004301     .C...C...C...C..
  b0:	00004301 00004301 00004301 00004301     .C...C...C...C..
  c0:	00004301 00004301 00004301 00004301     .C...C...C...C..
  d0:	00004301 00004301 00004301 00004301     .C...C...C...C..
  e0:	00004301 00004301 00004301 00004301     .C...C...C...C..
  f0:	00004301 00004301 00004301 00004301     .C...C...C...C..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__data_size+0xd1>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__data_size+0xbd>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__data_size+0x7>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__data_size+0x123>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__data_size+0x51>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__data_size+0x4d>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__data_size+0x67>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__data_size+0xb5>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__data_size+0x9d>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__data_size+0x131>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__data_size+0xf5>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__data_size+0x113>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__data_size+0x1b>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__data_size+0x1b>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__data_size+0x1b>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2iz>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d215      	bcs.n	a82 <__aeabi_d2iz+0x36>
     a56:	d511      	bpl.n	a7c <__aeabi_d2iz+0x30>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d912      	bls.n	a88 <__aeabi_d2iz+0x3c>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a72:	fa23 f002 	lsr.w	r0, r3, r2
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	4770      	bx	lr
     a7c:	f04f 0000 	mov.w	r0, #0
     a80:	4770      	bx	lr
     a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a86:	d105      	bne.n	a94 <__aeabi_d2iz+0x48>
     a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a8c:	bf08      	it	eq
     a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a92:	4770      	bx	lr
     a94:	f04f 0000 	mov.w	r0, #0
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_d2f>:
     a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     aa4:	bf24      	itt	cs
     aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     aae:	d90d      	bls.n	acc <__aeabi_d2f+0x30>
     ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     ac4:	bf08      	it	eq
     ac6:	f020 0001 	biceq.w	r0, r0, #1
     aca:	4770      	bx	lr
     acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     ad0:	d121      	bne.n	b16 <__aeabi_d2f+0x7a>
     ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     ad6:	bfbc      	itt	lt
     ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     adc:	4770      	bxlt	lr
     ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     ae6:	f1c2 0218 	rsb	r2, r2, #24
     aea:	f1c2 0c20 	rsb	ip, r2, #32
     aee:	fa10 f30c 	lsls.w	r3, r0, ip
     af2:	fa20 f002 	lsr.w	r0, r0, r2
     af6:	bf18      	it	ne
     af8:	f040 0001 	orrne.w	r0, r0, #1
     afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b04:	fa03 fc0c 	lsl.w	ip, r3, ip
     b08:	ea40 000c 	orr.w	r0, r0, ip
     b0c:	fa23 f302 	lsr.w	r3, r3, r2
     b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b14:	e7cc      	b.n	ab0 <__aeabi_d2f+0x14>
     b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b1a:	d107      	bne.n	b2c <__aeabi_d2f+0x90>
     b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b20:	bf1e      	ittt	ne
     b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     b2a:	4770      	bxne	lr
     b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <__aeabi_frsub>:
     b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     b40:	e002      	b.n	b48 <__addsf3>
     b42:	bf00      	nop

00000b44 <__aeabi_fsub>:
     b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b48 <__addsf3>:
     b48:	0042      	lsls	r2, r0, #1
     b4a:	bf1f      	itttt	ne
     b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b50:	ea92 0f03 	teqne	r2, r3
     b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b5c:	d06a      	beq.n	c34 <__addsf3+0xec>
     b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b66:	bfc1      	itttt	gt
     b68:	18d2      	addgt	r2, r2, r3
     b6a:	4041      	eorgt	r1, r0
     b6c:	4048      	eorgt	r0, r1
     b6e:	4041      	eorgt	r1, r0
     b70:	bfb8      	it	lt
     b72:	425b      	neglt	r3, r3
     b74:	2b19      	cmp	r3, #25
     b76:	bf88      	it	hi
     b78:	4770      	bxhi	lr
     b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b86:	bf18      	it	ne
     b88:	4240      	negne	r0, r0
     b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b96:	bf18      	it	ne
     b98:	4249      	negne	r1, r1
     b9a:	ea92 0f03 	teq	r2, r3
     b9e:	d03f      	beq.n	c20 <__addsf3+0xd8>
     ba0:	f1a2 0201 	sub.w	r2, r2, #1
     ba4:	fa41 fc03 	asr.w	ip, r1, r3
     ba8:	eb10 000c 	adds.w	r0, r0, ip
     bac:	f1c3 0320 	rsb	r3, r3, #32
     bb0:	fa01 f103 	lsl.w	r1, r1, r3
     bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     bb8:	d502      	bpl.n	bc0 <__addsf3+0x78>
     bba:	4249      	negs	r1, r1
     bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     bc4:	d313      	bcc.n	bee <__addsf3+0xa6>
     bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     bca:	d306      	bcc.n	bda <__addsf3+0x92>
     bcc:	0840      	lsrs	r0, r0, #1
     bce:	ea4f 0131 	mov.w	r1, r1, rrx
     bd2:	f102 0201 	add.w	r2, r2, #1
     bd6:	2afe      	cmp	r2, #254	; 0xfe
     bd8:	d251      	bcs.n	c7e <__addsf3+0x136>
     bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     be2:	bf08      	it	eq
     be4:	f020 0001 	biceq.w	r0, r0, #1
     be8:	ea40 0003 	orr.w	r0, r0, r3
     bec:	4770      	bx	lr
     bee:	0049      	lsls	r1, r1, #1
     bf0:	eb40 0000 	adc.w	r0, r0, r0
     bf4:	3a01      	subs	r2, #1
     bf6:	bf28      	it	cs
     bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bfc:	d2ed      	bcs.n	bda <__addsf3+0x92>
     bfe:	fab0 fc80 	clz	ip, r0
     c02:	f1ac 0c08 	sub.w	ip, ip, #8
     c06:	ebb2 020c 	subs.w	r2, r2, ip
     c0a:	fa00 f00c 	lsl.w	r0, r0, ip
     c0e:	bfaa      	itet	ge
     c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     c14:	4252      	neglt	r2, r2
     c16:	4318      	orrge	r0, r3
     c18:	bfbc      	itt	lt
     c1a:	40d0      	lsrlt	r0, r2
     c1c:	4318      	orrlt	r0, r3
     c1e:	4770      	bx	lr
     c20:	f092 0f00 	teq	r2, #0
     c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     c28:	bf06      	itte	eq
     c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     c2e:	3201      	addeq	r2, #1
     c30:	3b01      	subne	r3, #1
     c32:	e7b5      	b.n	ba0 <__addsf3+0x58>
     c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     c3c:	bf18      	it	ne
     c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     c42:	d021      	beq.n	c88 <__addsf3+0x140>
     c44:	ea92 0f03 	teq	r2, r3
     c48:	d004      	beq.n	c54 <__addsf3+0x10c>
     c4a:	f092 0f00 	teq	r2, #0
     c4e:	bf08      	it	eq
     c50:	4608      	moveq	r0, r1
     c52:	4770      	bx	lr
     c54:	ea90 0f01 	teq	r0, r1
     c58:	bf1c      	itt	ne
     c5a:	2000      	movne	r0, #0
     c5c:	4770      	bxne	lr
     c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c62:	d104      	bne.n	c6e <__addsf3+0x126>
     c64:	0040      	lsls	r0, r0, #1
     c66:	bf28      	it	cs
     c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c6c:	4770      	bx	lr
     c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c72:	bf3c      	itt	cc
     c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c78:	4770      	bxcc	lr
     c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c86:	4770      	bx	lr
     c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c8c:	bf16      	itet	ne
     c8e:	4608      	movne	r0, r1
     c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c94:	4601      	movne	r1, r0
     c96:	0242      	lsls	r2, r0, #9
     c98:	bf06      	itte	eq
     c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c9e:	ea90 0f01 	teqeq	r0, r1
     ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     ca6:	4770      	bx	lr

00000ca8 <__aeabi_ui2f>:
     ca8:	f04f 0300 	mov.w	r3, #0
     cac:	e004      	b.n	cb8 <__aeabi_i2f+0x8>
     cae:	bf00      	nop

00000cb0 <__aeabi_i2f>:
     cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     cb4:	bf48      	it	mi
     cb6:	4240      	negmi	r0, r0
     cb8:	ea5f 0c00 	movs.w	ip, r0
     cbc:	bf08      	it	eq
     cbe:	4770      	bxeq	lr
     cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     cc4:	4601      	mov	r1, r0
     cc6:	f04f 0000 	mov.w	r0, #0
     cca:	e01c      	b.n	d06 <__aeabi_l2f+0x2a>

00000ccc <__aeabi_ul2f>:
     ccc:	ea50 0201 	orrs.w	r2, r0, r1
     cd0:	bf08      	it	eq
     cd2:	4770      	bxeq	lr
     cd4:	f04f 0300 	mov.w	r3, #0
     cd8:	e00a      	b.n	cf0 <__aeabi_l2f+0x14>
     cda:	bf00      	nop

00000cdc <__aeabi_l2f>:
     cdc:	ea50 0201 	orrs.w	r2, r0, r1
     ce0:	bf08      	it	eq
     ce2:	4770      	bxeq	lr
     ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ce8:	d502      	bpl.n	cf0 <__aeabi_l2f+0x14>
     cea:	4240      	negs	r0, r0
     cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     cf0:	ea5f 0c01 	movs.w	ip, r1
     cf4:	bf02      	ittt	eq
     cf6:	4684      	moveq	ip, r0
     cf8:	4601      	moveq	r1, r0
     cfa:	2000      	moveq	r0, #0
     cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     d00:	bf08      	it	eq
     d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     d0a:	fabc f28c 	clz	r2, ip
     d0e:	3a08      	subs	r2, #8
     d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     d14:	db10      	blt.n	d38 <__aeabi_l2f+0x5c>
     d16:	fa01 fc02 	lsl.w	ip, r1, r2
     d1a:	4463      	add	r3, ip
     d1c:	fa00 fc02 	lsl.w	ip, r0, r2
     d20:	f1c2 0220 	rsb	r2, r2, #32
     d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     d28:	fa20 f202 	lsr.w	r2, r0, r2
     d2c:	eb43 0002 	adc.w	r0, r3, r2
     d30:	bf08      	it	eq
     d32:	f020 0001 	biceq.w	r0, r0, #1
     d36:	4770      	bx	lr
     d38:	f102 0220 	add.w	r2, r2, #32
     d3c:	fa01 fc02 	lsl.w	ip, r1, r2
     d40:	f1c2 0220 	rsb	r2, r2, #32
     d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d48:	fa21 f202 	lsr.w	r2, r1, r2
     d4c:	eb43 0002 	adc.w	r0, r3, r2
     d50:	bf08      	it	eq
     d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d56:	4770      	bx	lr

00000d58 <__aeabi_fmul>:
     d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d60:	bf1e      	ittt	ne
     d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d66:	ea92 0f0c 	teqne	r2, ip
     d6a:	ea93 0f0c 	teqne	r3, ip
     d6e:	d06f      	beq.n	e50 <__aeabi_fmul+0xf8>
     d70:	441a      	add	r2, r3
     d72:	ea80 0c01 	eor.w	ip, r0, r1
     d76:	0240      	lsls	r0, r0, #9
     d78:	bf18      	it	ne
     d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d7e:	d01e      	beq.n	dbe <__aeabi_fmul+0x66>
     d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d8c:	fba0 3101 	umull	r3, r1, r0, r1
     d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d98:	bf3e      	ittt	cc
     d9a:	0049      	lslcc	r1, r1, #1
     d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     da0:	005b      	lslcc	r3, r3, #1
     da2:	ea40 0001 	orr.w	r0, r0, r1
     da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     daa:	2afd      	cmp	r2, #253	; 0xfd
     dac:	d81d      	bhi.n	dea <__aeabi_fmul+0x92>
     dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     db6:	bf08      	it	eq
     db8:	f020 0001 	biceq.w	r0, r0, #1
     dbc:	4770      	bx	lr
     dbe:	f090 0f00 	teq	r0, #0
     dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dc6:	bf08      	it	eq
     dc8:	0249      	lsleq	r1, r1, #9
     dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     dd2:	3a7f      	subs	r2, #127	; 0x7f
     dd4:	bfc2      	ittt	gt
     dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dde:	4770      	bxgt	lr
     de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     de4:	f04f 0300 	mov.w	r3, #0
     de8:	3a01      	subs	r2, #1
     dea:	dc5d      	bgt.n	ea8 <__aeabi_fmul+0x150>
     dec:	f112 0f19 	cmn.w	r2, #25
     df0:	bfdc      	itt	le
     df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     df6:	4770      	bxle	lr
     df8:	f1c2 0200 	rsb	r2, r2, #0
     dfc:	0041      	lsls	r1, r0, #1
     dfe:	fa21 f102 	lsr.w	r1, r1, r2
     e02:	f1c2 0220 	rsb	r2, r2, #32
     e06:	fa00 fc02 	lsl.w	ip, r0, r2
     e0a:	ea5f 0031 	movs.w	r0, r1, rrx
     e0e:	f140 0000 	adc.w	r0, r0, #0
     e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     e16:	bf08      	it	eq
     e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     e1c:	4770      	bx	lr
     e1e:	f092 0f00 	teq	r2, #0
     e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e26:	bf02      	ittt	eq
     e28:	0040      	lsleq	r0, r0, #1
     e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e2e:	3a01      	subeq	r2, #1
     e30:	d0f9      	beq.n	e26 <__aeabi_fmul+0xce>
     e32:	ea40 000c 	orr.w	r0, r0, ip
     e36:	f093 0f00 	teq	r3, #0
     e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e3e:	bf02      	ittt	eq
     e40:	0049      	lsleq	r1, r1, #1
     e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e46:	3b01      	subeq	r3, #1
     e48:	d0f9      	beq.n	e3e <__aeabi_fmul+0xe6>
     e4a:	ea41 010c 	orr.w	r1, r1, ip
     e4e:	e78f      	b.n	d70 <__aeabi_fmul+0x18>
     e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e54:	ea92 0f0c 	teq	r2, ip
     e58:	bf18      	it	ne
     e5a:	ea93 0f0c 	teqne	r3, ip
     e5e:	d00a      	beq.n	e76 <__aeabi_fmul+0x11e>
     e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e64:	bf18      	it	ne
     e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e6a:	d1d8      	bne.n	e1e <__aeabi_fmul+0xc6>
     e6c:	ea80 0001 	eor.w	r0, r0, r1
     e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e74:	4770      	bx	lr
     e76:	f090 0f00 	teq	r0, #0
     e7a:	bf17      	itett	ne
     e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e80:	4608      	moveq	r0, r1
     e82:	f091 0f00 	teqne	r1, #0
     e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e8a:	d014      	beq.n	eb6 <__aeabi_fmul+0x15e>
     e8c:	ea92 0f0c 	teq	r2, ip
     e90:	d101      	bne.n	e96 <__aeabi_fmul+0x13e>
     e92:	0242      	lsls	r2, r0, #9
     e94:	d10f      	bne.n	eb6 <__aeabi_fmul+0x15e>
     e96:	ea93 0f0c 	teq	r3, ip
     e9a:	d103      	bne.n	ea4 <__aeabi_fmul+0x14c>
     e9c:	024b      	lsls	r3, r1, #9
     e9e:	bf18      	it	ne
     ea0:	4608      	movne	r0, r1
     ea2:	d108      	bne.n	eb6 <__aeabi_fmul+0x15e>
     ea4:	ea80 0001 	eor.w	r0, r0, r1
     ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     eb4:	4770      	bx	lr
     eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     ebe:	4770      	bx	lr

00000ec0 <__aeabi_fdiv>:
     ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     ec8:	bf1e      	ittt	ne
     eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     ece:	ea92 0f0c 	teqne	r2, ip
     ed2:	ea93 0f0c 	teqne	r3, ip
     ed6:	d069      	beq.n	fac <__aeabi_fdiv+0xec>
     ed8:	eba2 0203 	sub.w	r2, r2, r3
     edc:	ea80 0c01 	eor.w	ip, r0, r1
     ee0:	0249      	lsls	r1, r1, #9
     ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ee6:	d037      	beq.n	f58 <__aeabi_fdiv+0x98>
     ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     ef8:	428b      	cmp	r3, r1
     efa:	bf38      	it	cc
     efc:	005b      	lslcc	r3, r3, #1
     efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     f06:	428b      	cmp	r3, r1
     f08:	bf24      	itt	cs
     f0a:	1a5b      	subcs	r3, r3, r1
     f0c:	ea40 000c 	orrcs.w	r0, r0, ip
     f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     f14:	bf24      	itt	cs
     f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     f22:	bf24      	itt	cs
     f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     f30:	bf24      	itt	cs
     f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     f3a:	011b      	lsls	r3, r3, #4
     f3c:	bf18      	it	ne
     f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     f42:	d1e0      	bne.n	f06 <__aeabi_fdiv+0x46>
     f44:	2afd      	cmp	r2, #253	; 0xfd
     f46:	f63f af50 	bhi.w	dea <__aeabi_fmul+0x92>
     f4a:	428b      	cmp	r3, r1
     f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f50:	bf08      	it	eq
     f52:	f020 0001 	biceq.w	r0, r0, #1
     f56:	4770      	bx	lr
     f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f60:	327f      	adds	r2, #127	; 0x7f
     f62:	bfc2      	ittt	gt
     f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f6c:	4770      	bxgt	lr
     f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f72:	f04f 0300 	mov.w	r3, #0
     f76:	3a01      	subs	r2, #1
     f78:	e737      	b.n	dea <__aeabi_fmul+0x92>
     f7a:	f092 0f00 	teq	r2, #0
     f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f82:	bf02      	ittt	eq
     f84:	0040      	lsleq	r0, r0, #1
     f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f8a:	3a01      	subeq	r2, #1
     f8c:	d0f9      	beq.n	f82 <__aeabi_fdiv+0xc2>
     f8e:	ea40 000c 	orr.w	r0, r0, ip
     f92:	f093 0f00 	teq	r3, #0
     f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f9a:	bf02      	ittt	eq
     f9c:	0049      	lsleq	r1, r1, #1
     f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     fa2:	3b01      	subeq	r3, #1
     fa4:	d0f9      	beq.n	f9a <__aeabi_fdiv+0xda>
     fa6:	ea41 010c 	orr.w	r1, r1, ip
     faa:	e795      	b.n	ed8 <__aeabi_fdiv+0x18>
     fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     fb0:	ea92 0f0c 	teq	r2, ip
     fb4:	d108      	bne.n	fc8 <__aeabi_fdiv+0x108>
     fb6:	0242      	lsls	r2, r0, #9
     fb8:	f47f af7d 	bne.w	eb6 <__aeabi_fmul+0x15e>
     fbc:	ea93 0f0c 	teq	r3, ip
     fc0:	f47f af70 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fc4:	4608      	mov	r0, r1
     fc6:	e776      	b.n	eb6 <__aeabi_fmul+0x15e>
     fc8:	ea93 0f0c 	teq	r3, ip
     fcc:	d104      	bne.n	fd8 <__aeabi_fdiv+0x118>
     fce:	024b      	lsls	r3, r1, #9
     fd0:	f43f af4c 	beq.w	e6c <__aeabi_fmul+0x114>
     fd4:	4608      	mov	r0, r1
     fd6:	e76e      	b.n	eb6 <__aeabi_fmul+0x15e>
     fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     fdc:	bf18      	it	ne
     fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     fe2:	d1ca      	bne.n	f7a <__aeabi_fdiv+0xba>
     fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fe8:	f47f af5c 	bne.w	ea4 <__aeabi_fmul+0x14c>
     fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     ff0:	f47f af3c 	bne.w	e6c <__aeabi_fmul+0x114>
     ff4:	e75f      	b.n	eb6 <__aeabi_fmul+0x15e>
     ff6:	bf00      	nop

00000ff8 <__gesf2>:
     ff8:	f04f 3cff 	mov.w	ip, #4294967295
     ffc:	e006      	b.n	100c <__cmpsf2+0x4>
     ffe:	bf00      	nop

00001000 <__lesf2>:
    1000:	f04f 0c01 	mov.w	ip, #1
    1004:	e002      	b.n	100c <__cmpsf2+0x4>
    1006:	bf00      	nop

00001008 <__cmpsf2>:
    1008:	f04f 0c01 	mov.w	ip, #1
    100c:	f84d cd04 	str.w	ip, [sp, #-4]!
    1010:	ea4f 0240 	mov.w	r2, r0, lsl #1
    1014:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    101c:	bf18      	it	ne
    101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1022:	d011      	beq.n	1048 <__cmpsf2+0x40>
    1024:	b001      	add	sp, #4
    1026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    102a:	bf18      	it	ne
    102c:	ea90 0f01 	teqne	r0, r1
    1030:	bf58      	it	pl
    1032:	ebb2 0003 	subspl.w	r0, r2, r3
    1036:	bf88      	it	hi
    1038:	17c8      	asrhi	r0, r1, #31
    103a:	bf38      	it	cc
    103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    1040:	bf18      	it	ne
    1042:	f040 0001 	orrne.w	r0, r0, #1
    1046:	4770      	bx	lr
    1048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    104c:	d102      	bne.n	1054 <__cmpsf2+0x4c>
    104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    1052:	d105      	bne.n	1060 <__cmpsf2+0x58>
    1054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1058:	d1e4      	bne.n	1024 <__cmpsf2+0x1c>
    105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    105e:	d0e1      	beq.n	1024 <__cmpsf2+0x1c>
    1060:	f85d 0b04 	ldr.w	r0, [sp], #4
    1064:	4770      	bx	lr
    1066:	bf00      	nop

00001068 <__aeabi_cfrcmple>:
    1068:	4684      	mov	ip, r0
    106a:	4608      	mov	r0, r1
    106c:	4661      	mov	r1, ip
    106e:	e7ff      	b.n	1070 <__aeabi_cfcmpeq>

00001070 <__aeabi_cfcmpeq>:
    1070:	b50f      	push	{r0, r1, r2, r3, lr}
    1072:	f7ff ffc9 	bl	1008 <__cmpsf2>
    1076:	2800      	cmp	r0, #0
    1078:	bf48      	it	mi
    107a:	f110 0f00 	cmnmi.w	r0, #0
    107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001080 <__aeabi_fcmpeq>:
    1080:	f84d ed08 	str.w	lr, [sp, #-8]!
    1084:	f7ff fff4 	bl	1070 <__aeabi_cfcmpeq>
    1088:	bf0c      	ite	eq
    108a:	2001      	moveq	r0, #1
    108c:	2000      	movne	r0, #0
    108e:	f85d fb08 	ldr.w	pc, [sp], #8
    1092:	bf00      	nop

00001094 <__aeabi_fcmplt>:
    1094:	f84d ed08 	str.w	lr, [sp, #-8]!
    1098:	f7ff ffea 	bl	1070 <__aeabi_cfcmpeq>
    109c:	bf34      	ite	cc
    109e:	2001      	movcc	r0, #1
    10a0:	2000      	movcs	r0, #0
    10a2:	f85d fb08 	ldr.w	pc, [sp], #8
    10a6:	bf00      	nop

000010a8 <__aeabi_fcmple>:
    10a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    10ac:	f7ff ffe0 	bl	1070 <__aeabi_cfcmpeq>
    10b0:	bf94      	ite	ls
    10b2:	2001      	movls	r0, #1
    10b4:	2000      	movhi	r0, #0
    10b6:	f85d fb08 	ldr.w	pc, [sp], #8
    10ba:	bf00      	nop

000010bc <__aeabi_fcmpge>:
    10bc:	f84d ed08 	str.w	lr, [sp, #-8]!
    10c0:	f7ff ffd2 	bl	1068 <__aeabi_cfrcmple>
    10c4:	bf94      	ite	ls
    10c6:	2001      	movls	r0, #1
    10c8:	2000      	movhi	r0, #0
    10ca:	f85d fb08 	ldr.w	pc, [sp], #8
    10ce:	bf00      	nop

000010d0 <__aeabi_fcmpgt>:
    10d0:	f84d ed08 	str.w	lr, [sp, #-8]!
    10d4:	f7ff ffc8 	bl	1068 <__aeabi_cfrcmple>
    10d8:	bf34      	ite	cc
    10da:	2001      	movcc	r0, #1
    10dc:	2000      	movcs	r0, #0
    10de:	f85d fb08 	ldr.w	pc, [sp], #8
    10e2:	bf00      	nop

000010e4 <__aeabi_f2iz>:
    10e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10ec:	d30f      	bcc.n	110e <__aeabi_f2iz+0x2a>
    10ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10f6:	d90d      	bls.n	1114 <__aeabi_f2iz+0x30>
    10f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1104:	fa23 f002 	lsr.w	r0, r3, r2
    1108:	bf18      	it	ne
    110a:	4240      	negne	r0, r0
    110c:	4770      	bx	lr
    110e:	f04f 0000 	mov.w	r0, #0
    1112:	4770      	bx	lr
    1114:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1118:	d101      	bne.n	111e <__aeabi_f2iz+0x3a>
    111a:	0242      	lsls	r2, r0, #9
    111c:	d105      	bne.n	112a <__aeabi_f2iz+0x46>
    111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    1122:	bf08      	it	eq
    1124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1128:	4770      	bx	lr
    112a:	f04f 0000 	mov.w	r0, #0
    112e:	4770      	bx	lr

00001130 <__aeabi_uldivmod>:
    1130:	b953      	cbnz	r3, 1148 <__aeabi_uldivmod+0x18>
    1132:	b94a      	cbnz	r2, 1148 <__aeabi_uldivmod+0x18>
    1134:	2900      	cmp	r1, #0
    1136:	bf08      	it	eq
    1138:	2800      	cmpeq	r0, #0
    113a:	bf1c      	itt	ne
    113c:	f04f 31ff 	movne.w	r1, #4294967295
    1140:	f04f 30ff 	movne.w	r0, #4294967295
    1144:	f000 b9a4 	b.w	1490 <__aeabi_idiv0>
    1148:	f1ad 0c08 	sub.w	ip, sp, #8
    114c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1150:	f000 f83e 	bl	11d0 <__udivmoddi4>
    1154:	f8dd e004 	ldr.w	lr, [sp, #4]
    1158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    115c:	b004      	add	sp, #16
    115e:	4770      	bx	lr

00001160 <__aeabi_d2lz>:
    1160:	b538      	push	{r3, r4, r5, lr}
    1162:	4605      	mov	r5, r0
    1164:	460c      	mov	r4, r1
    1166:	4628      	mov	r0, r5
    1168:	4621      	mov	r1, r4
    116a:	2200      	movs	r2, #0
    116c:	2300      	movs	r3, #0
    116e:	f7ff fc45 	bl	9fc <__aeabi_dcmplt>
    1172:	b928      	cbnz	r0, 1180 <__aeabi_d2lz+0x20>
    1174:	4628      	mov	r0, r5
    1176:	4621      	mov	r1, r4
    1178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    117c:	f000 b80a 	b.w	1194 <__aeabi_d2ulz>
    1180:	4628      	mov	r0, r5
    1182:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    1186:	f000 f805 	bl	1194 <__aeabi_d2ulz>
    118a:	4240      	negs	r0, r0
    118c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1190:	bd38      	pop	{r3, r4, r5, pc}
    1192:	bf00      	nop

00001194 <__aeabi_d2ulz>:
    1194:	b5d0      	push	{r4, r6, r7, lr}
    1196:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <__aeabi_d2ulz+0x34>)
    1198:	2200      	movs	r2, #0
    119a:	4606      	mov	r6, r0
    119c:	460f      	mov	r7, r1
    119e:	f7ff f9bb 	bl	518 <__aeabi_dmul>
    11a2:	f000 f977 	bl	1494 <__aeabi_d2uiz>
    11a6:	4604      	mov	r4, r0
    11a8:	f7ff f93c 	bl	424 <__aeabi_ui2d>
    11ac:	4b07      	ldr	r3, [pc, #28]	; (11cc <__aeabi_d2ulz+0x38>)
    11ae:	2200      	movs	r2, #0
    11b0:	f7ff f9b2 	bl	518 <__aeabi_dmul>
    11b4:	4602      	mov	r2, r0
    11b6:	460b      	mov	r3, r1
    11b8:	4630      	mov	r0, r6
    11ba:	4639      	mov	r1, r7
    11bc:	f7fe fff4 	bl	1a8 <__aeabi_dsub>
    11c0:	f000 f968 	bl	1494 <__aeabi_d2uiz>
    11c4:	4621      	mov	r1, r4
    11c6:	bdd0      	pop	{r4, r6, r7, pc}
    11c8:	3df00000 	.word	0x3df00000
    11cc:	41f00000 	.word	0x41f00000

000011d0 <__udivmoddi4>:
    11d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11d4:	9e08      	ldr	r6, [sp, #32]
    11d6:	460d      	mov	r5, r1
    11d8:	4604      	mov	r4, r0
    11da:	468e      	mov	lr, r1
    11dc:	2b00      	cmp	r3, #0
    11de:	f040 8082 	bne.w	12e6 <__udivmoddi4+0x116>
    11e2:	428a      	cmp	r2, r1
    11e4:	4617      	mov	r7, r2
    11e6:	d946      	bls.n	1276 <__udivmoddi4+0xa6>
    11e8:	fab2 f282 	clz	r2, r2
    11ec:	b14a      	cbz	r2, 1202 <__udivmoddi4+0x32>
    11ee:	f1c2 0120 	rsb	r1, r2, #32
    11f2:	fa05 f302 	lsl.w	r3, r5, r2
    11f6:	fa20 f101 	lsr.w	r1, r0, r1
    11fa:	4097      	lsls	r7, r2
    11fc:	ea41 0e03 	orr.w	lr, r1, r3
    1200:	4094      	lsls	r4, r2
    1202:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1206:	0c23      	lsrs	r3, r4, #16
    1208:	fbbe fcf8 	udiv	ip, lr, r8
    120c:	b2b9      	uxth	r1, r7
    120e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1212:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1216:	fb0c f001 	mul.w	r0, ip, r1
    121a:	4298      	cmp	r0, r3
    121c:	d90a      	bls.n	1234 <__udivmoddi4+0x64>
    121e:	18fb      	adds	r3, r7, r3
    1220:	f10c 35ff 	add.w	r5, ip, #4294967295
    1224:	f080 8116 	bcs.w	1454 <__udivmoddi4+0x284>
    1228:	4298      	cmp	r0, r3
    122a:	f240 8113 	bls.w	1454 <__udivmoddi4+0x284>
    122e:	f1ac 0c02 	sub.w	ip, ip, #2
    1232:	443b      	add	r3, r7
    1234:	1a1b      	subs	r3, r3, r0
    1236:	b2a4      	uxth	r4, r4
    1238:	fbb3 f0f8 	udiv	r0, r3, r8
    123c:	fb08 3310 	mls	r3, r8, r0, r3
    1240:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1244:	fb00 f101 	mul.w	r1, r0, r1
    1248:	42a1      	cmp	r1, r4
    124a:	d909      	bls.n	1260 <__udivmoddi4+0x90>
    124c:	193c      	adds	r4, r7, r4
    124e:	f100 33ff 	add.w	r3, r0, #4294967295
    1252:	f080 8101 	bcs.w	1458 <__udivmoddi4+0x288>
    1256:	42a1      	cmp	r1, r4
    1258:	f240 80fe 	bls.w	1458 <__udivmoddi4+0x288>
    125c:	3802      	subs	r0, #2
    125e:	443c      	add	r4, r7
    1260:	1a64      	subs	r4, r4, r1
    1262:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1266:	2100      	movs	r1, #0
    1268:	b11e      	cbz	r6, 1272 <__udivmoddi4+0xa2>
    126a:	40d4      	lsrs	r4, r2
    126c:	2300      	movs	r3, #0
    126e:	e9c6 4300 	strd	r4, r3, [r6]
    1272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1276:	b902      	cbnz	r2, 127a <__udivmoddi4+0xaa>
    1278:	deff      	udf	#255	; 0xff
    127a:	fab2 f282 	clz	r2, r2
    127e:	2a00      	cmp	r2, #0
    1280:	d14f      	bne.n	1322 <__udivmoddi4+0x152>
    1282:	1bcb      	subs	r3, r1, r7
    1284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1288:	fa1f f887 	uxth.w	r8, r7
    128c:	2101      	movs	r1, #1
    128e:	fbb3 fcfe 	udiv	ip, r3, lr
    1292:	0c25      	lsrs	r5, r4, #16
    1294:	fb0e 331c 	mls	r3, lr, ip, r3
    1298:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    129c:	fb08 f30c 	mul.w	r3, r8, ip
    12a0:	42ab      	cmp	r3, r5
    12a2:	d907      	bls.n	12b4 <__udivmoddi4+0xe4>
    12a4:	197d      	adds	r5, r7, r5
    12a6:	f10c 30ff 	add.w	r0, ip, #4294967295
    12aa:	d202      	bcs.n	12b2 <__udivmoddi4+0xe2>
    12ac:	42ab      	cmp	r3, r5
    12ae:	f200 80e7 	bhi.w	1480 <__udivmoddi4+0x2b0>
    12b2:	4684      	mov	ip, r0
    12b4:	1aed      	subs	r5, r5, r3
    12b6:	b2a3      	uxth	r3, r4
    12b8:	fbb5 f0fe 	udiv	r0, r5, lr
    12bc:	fb0e 5510 	mls	r5, lr, r0, r5
    12c0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    12c4:	fb08 f800 	mul.w	r8, r8, r0
    12c8:	45a0      	cmp	r8, r4
    12ca:	d907      	bls.n	12dc <__udivmoddi4+0x10c>
    12cc:	193c      	adds	r4, r7, r4
    12ce:	f100 33ff 	add.w	r3, r0, #4294967295
    12d2:	d202      	bcs.n	12da <__udivmoddi4+0x10a>
    12d4:	45a0      	cmp	r8, r4
    12d6:	f200 80d7 	bhi.w	1488 <__udivmoddi4+0x2b8>
    12da:	4618      	mov	r0, r3
    12dc:	eba4 0408 	sub.w	r4, r4, r8
    12e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    12e4:	e7c0      	b.n	1268 <__udivmoddi4+0x98>
    12e6:	428b      	cmp	r3, r1
    12e8:	d908      	bls.n	12fc <__udivmoddi4+0x12c>
    12ea:	2e00      	cmp	r6, #0
    12ec:	f000 80af 	beq.w	144e <__udivmoddi4+0x27e>
    12f0:	2100      	movs	r1, #0
    12f2:	e9c6 0500 	strd	r0, r5, [r6]
    12f6:	4608      	mov	r0, r1
    12f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12fc:	fab3 f183 	clz	r1, r3
    1300:	2900      	cmp	r1, #0
    1302:	d14b      	bne.n	139c <__udivmoddi4+0x1cc>
    1304:	42ab      	cmp	r3, r5
    1306:	d302      	bcc.n	130e <__udivmoddi4+0x13e>
    1308:	4282      	cmp	r2, r0
    130a:	f200 80b7 	bhi.w	147c <__udivmoddi4+0x2ac>
    130e:	1a84      	subs	r4, r0, r2
    1310:	eb65 0303 	sbc.w	r3, r5, r3
    1314:	2001      	movs	r0, #1
    1316:	469e      	mov	lr, r3
    1318:	2e00      	cmp	r6, #0
    131a:	d0aa      	beq.n	1272 <__udivmoddi4+0xa2>
    131c:	e9c6 4e00 	strd	r4, lr, [r6]
    1320:	e7a7      	b.n	1272 <__udivmoddi4+0xa2>
    1322:	f1c2 0c20 	rsb	ip, r2, #32
    1326:	fa01 f302 	lsl.w	r3, r1, r2
    132a:	4097      	lsls	r7, r2
    132c:	fa20 f00c 	lsr.w	r0, r0, ip
    1330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1334:	fa21 fc0c 	lsr.w	ip, r1, ip
    1338:	4318      	orrs	r0, r3
    133a:	fbbc f1fe 	udiv	r1, ip, lr
    133e:	0c05      	lsrs	r5, r0, #16
    1340:	fb0e cc11 	mls	ip, lr, r1, ip
    1344:	fa1f f887 	uxth.w	r8, r7
    1348:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    134c:	fb01 f308 	mul.w	r3, r1, r8
    1350:	42ab      	cmp	r3, r5
    1352:	fa04 f402 	lsl.w	r4, r4, r2
    1356:	d909      	bls.n	136c <__udivmoddi4+0x19c>
    1358:	197d      	adds	r5, r7, r5
    135a:	f101 3cff 	add.w	ip, r1, #4294967295
    135e:	f080 808b 	bcs.w	1478 <__udivmoddi4+0x2a8>
    1362:	42ab      	cmp	r3, r5
    1364:	f240 8088 	bls.w	1478 <__udivmoddi4+0x2a8>
    1368:	3902      	subs	r1, #2
    136a:	443d      	add	r5, r7
    136c:	1aeb      	subs	r3, r5, r3
    136e:	b285      	uxth	r5, r0
    1370:	fbb3 f0fe 	udiv	r0, r3, lr
    1374:	fb0e 3310 	mls	r3, lr, r0, r3
    1378:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    137c:	fb00 f308 	mul.w	r3, r0, r8
    1380:	42ab      	cmp	r3, r5
    1382:	d907      	bls.n	1394 <__udivmoddi4+0x1c4>
    1384:	197d      	adds	r5, r7, r5
    1386:	f100 3cff 	add.w	ip, r0, #4294967295
    138a:	d271      	bcs.n	1470 <__udivmoddi4+0x2a0>
    138c:	42ab      	cmp	r3, r5
    138e:	d96f      	bls.n	1470 <__udivmoddi4+0x2a0>
    1390:	3802      	subs	r0, #2
    1392:	443d      	add	r5, r7
    1394:	1aeb      	subs	r3, r5, r3
    1396:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    139a:	e778      	b.n	128e <__udivmoddi4+0xbe>
    139c:	f1c1 0c20 	rsb	ip, r1, #32
    13a0:	408b      	lsls	r3, r1
    13a2:	fa22 f70c 	lsr.w	r7, r2, ip
    13a6:	431f      	orrs	r7, r3
    13a8:	fa20 f40c 	lsr.w	r4, r0, ip
    13ac:	fa05 f301 	lsl.w	r3, r5, r1
    13b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    13b4:	fa25 f50c 	lsr.w	r5, r5, ip
    13b8:	431c      	orrs	r4, r3
    13ba:	0c23      	lsrs	r3, r4, #16
    13bc:	fbb5 f9fe 	udiv	r9, r5, lr
    13c0:	fa1f f887 	uxth.w	r8, r7
    13c4:	fb0e 5519 	mls	r5, lr, r9, r5
    13c8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    13cc:	fb09 fa08 	mul.w	sl, r9, r8
    13d0:	45aa      	cmp	sl, r5
    13d2:	fa02 f201 	lsl.w	r2, r2, r1
    13d6:	fa00 f301 	lsl.w	r3, r0, r1
    13da:	d908      	bls.n	13ee <__udivmoddi4+0x21e>
    13dc:	197d      	adds	r5, r7, r5
    13de:	f109 30ff 	add.w	r0, r9, #4294967295
    13e2:	d247      	bcs.n	1474 <__udivmoddi4+0x2a4>
    13e4:	45aa      	cmp	sl, r5
    13e6:	d945      	bls.n	1474 <__udivmoddi4+0x2a4>
    13e8:	f1a9 0902 	sub.w	r9, r9, #2
    13ec:	443d      	add	r5, r7
    13ee:	eba5 050a 	sub.w	r5, r5, sl
    13f2:	b2a4      	uxth	r4, r4
    13f4:	fbb5 f0fe 	udiv	r0, r5, lr
    13f8:	fb0e 5510 	mls	r5, lr, r0, r5
    13fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1400:	fb00 f808 	mul.w	r8, r0, r8
    1404:	45a0      	cmp	r8, r4
    1406:	d907      	bls.n	1418 <__udivmoddi4+0x248>
    1408:	193c      	adds	r4, r7, r4
    140a:	f100 35ff 	add.w	r5, r0, #4294967295
    140e:	d22d      	bcs.n	146c <__udivmoddi4+0x29c>
    1410:	45a0      	cmp	r8, r4
    1412:	d92b      	bls.n	146c <__udivmoddi4+0x29c>
    1414:	3802      	subs	r0, #2
    1416:	443c      	add	r4, r7
    1418:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    141c:	eba4 0408 	sub.w	r4, r4, r8
    1420:	fba0 8902 	umull	r8, r9, r0, r2
    1424:	454c      	cmp	r4, r9
    1426:	46c6      	mov	lr, r8
    1428:	464d      	mov	r5, r9
    142a:	d319      	bcc.n	1460 <__udivmoddi4+0x290>
    142c:	d016      	beq.n	145c <__udivmoddi4+0x28c>
    142e:	b15e      	cbz	r6, 1448 <__udivmoddi4+0x278>
    1430:	ebb3 020e 	subs.w	r2, r3, lr
    1434:	eb64 0405 	sbc.w	r4, r4, r5
    1438:	fa04 fc0c 	lsl.w	ip, r4, ip
    143c:	40ca      	lsrs	r2, r1
    143e:	ea4c 0202 	orr.w	r2, ip, r2
    1442:	40cc      	lsrs	r4, r1
    1444:	e9c6 2400 	strd	r2, r4, [r6]
    1448:	2100      	movs	r1, #0
    144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    144e:	4631      	mov	r1, r6
    1450:	4630      	mov	r0, r6
    1452:	e70e      	b.n	1272 <__udivmoddi4+0xa2>
    1454:	46ac      	mov	ip, r5
    1456:	e6ed      	b.n	1234 <__udivmoddi4+0x64>
    1458:	4618      	mov	r0, r3
    145a:	e701      	b.n	1260 <__udivmoddi4+0x90>
    145c:	4543      	cmp	r3, r8
    145e:	d2e6      	bcs.n	142e <__udivmoddi4+0x25e>
    1460:	ebb8 0e02 	subs.w	lr, r8, r2
    1464:	eb69 0507 	sbc.w	r5, r9, r7
    1468:	3801      	subs	r0, #1
    146a:	e7e0      	b.n	142e <__udivmoddi4+0x25e>
    146c:	4628      	mov	r0, r5
    146e:	e7d3      	b.n	1418 <__udivmoddi4+0x248>
    1470:	4660      	mov	r0, ip
    1472:	e78f      	b.n	1394 <__udivmoddi4+0x1c4>
    1474:	4681      	mov	r9, r0
    1476:	e7ba      	b.n	13ee <__udivmoddi4+0x21e>
    1478:	4661      	mov	r1, ip
    147a:	e777      	b.n	136c <__udivmoddi4+0x19c>
    147c:	4608      	mov	r0, r1
    147e:	e74b      	b.n	1318 <__udivmoddi4+0x148>
    1480:	f1ac 0c02 	sub.w	ip, ip, #2
    1484:	443d      	add	r5, r7
    1486:	e715      	b.n	12b4 <__udivmoddi4+0xe4>
    1488:	3802      	subs	r0, #2
    148a:	443c      	add	r4, r7
    148c:	e726      	b.n	12dc <__udivmoddi4+0x10c>
    148e:	bf00      	nop

00001490 <__aeabi_idiv0>:
    1490:	4770      	bx	lr
    1492:	bf00      	nop

00001494 <__aeabi_d2uiz>:
    1494:	004a      	lsls	r2, r1, #1
    1496:	d211      	bcs.n	14bc <__aeabi_d2uiz+0x28>
    1498:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    149c:	d211      	bcs.n	14c2 <__aeabi_d2uiz+0x2e>
    149e:	d50d      	bpl.n	14bc <__aeabi_d2uiz+0x28>
    14a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    14a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    14a8:	d40e      	bmi.n	14c8 <__aeabi_d2uiz+0x34>
    14aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    14ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    14b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    14b6:	fa23 f002 	lsr.w	r0, r3, r2
    14ba:	4770      	bx	lr
    14bc:	f04f 0000 	mov.w	r0, #0
    14c0:	4770      	bx	lr
    14c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    14c6:	d102      	bne.n	14ce <__aeabi_d2uiz+0x3a>
    14c8:	f04f 30ff 	mov.w	r0, #4294967295
    14cc:	4770      	bx	lr
    14ce:	f04f 0000 	mov.w	r0, #0
    14d2:	4770      	bx	lr

000014d4 <__aeabi_dcmpun>:
    14d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    14d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14dc:	d102      	bne.n	14e4 <__aeabi_dcmpun+0x10>
    14de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14e2:	d10a      	bne.n	14fa <__aeabi_dcmpun+0x26>
    14e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ec:	d102      	bne.n	14f4 <__aeabi_dcmpun+0x20>
    14ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14f2:	d102      	bne.n	14fa <__aeabi_dcmpun+0x26>
    14f4:	f04f 0000 	mov.w	r0, #0
    14f8:	4770      	bx	lr
    14fa:	f04f 0001 	mov.w	r0, #1
    14fe:	4770      	bx	lr

00001500 <strcmp>:
    1500:	f810 2b01 	ldrb.w	r2, [r0], #1
    1504:	f811 3b01 	ldrb.w	r3, [r1], #1
    1508:	2a01      	cmp	r2, #1
    150a:	bf28      	it	cs
    150c:	429a      	cmpcs	r2, r3
    150e:	d0f7      	beq.n	1500 <strcmp>
    1510:	1ad0      	subs	r0, r2, r3
    1512:	4770      	bx	lr

00001514 <strlen>:
    1514:	4603      	mov	r3, r0
    1516:	f813 2b01 	ldrb.w	r2, [r3], #1
    151a:	2a00      	cmp	r2, #0
    151c:	d1fb      	bne.n	1516 <strlen+0x2>
    151e:	1a18      	subs	r0, r3, r0
    1520:	3801      	subs	r0, #1
    1522:	4770      	bx	lr
    1524:	0000      	movs	r0, r0
	...

00001528 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    1528:	b530      	push	{r4, r5, lr}
    152a:	b085      	sub	sp, #20
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    152c:	f7fe fff4 	bl	518 <__aeabi_dmul>
    1530:	4604      	mov	r4, r0
    1532:	460d      	mov	r5, r1
    1534:	9b08      	ldr	r3, [sp, #32]
    1536:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    153a:	40d8      	lsrs	r0, r3
    153c:	f7fe ff82 	bl	444 <__aeabi_i2d>
    1540:	4622      	mov	r2, r4
    1542:	462b      	mov	r3, r5
    1544:	f7fe ffe8 	bl	518 <__aeabi_dmul>
    1548:	4602      	mov	r2, r0
    154a:	460b      	mov	r3, r1
    154c:	e9cd 2300 	strd	r2, r3, [sp]
    1550:	a309      	add	r3, pc, #36	; (adr r3, 1578 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x50>)
    1552:	e9d3 2300 	ldrd	r2, r3, [r3]
    1556:	e9cd 2302 	strd	r2, r3, [sp, #8]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    155a:	f7ff fa6d 	bl	a38 <__aeabi_dcmpgt>
    155e:	b940      	cbnz	r0, 1572 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4a>
	return __b;
      return __a;
    1560:	4669      	mov	r1, sp
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1564:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1566:	e9d1 0100 	ldrd	r0, r1, [r1]
    156a:	f007 fde3 	bl	9134 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
                                   quantized_multiplier, left_shift);
}
    156e:	b005      	add	sp, #20
    1570:	bd30      	pop	{r4, r5, pc}
	return __b;
    1572:	a902      	add	r1, sp, #8
    1574:	e7f5      	b.n	1562 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x3a>
    1576:	bf00      	nop
    1578:	ffc00000 	.word	0xffc00000
    157c:	41dfffff 	.word	0x41dfffff

00001580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1584:	b082      	sub	sp, #8
    1586:	4607      	mov	r7, r0
    1588:	460d      	mov	r5, r1
    158a:	4616      	mov	r6, r2
    158c:	461c      	mov	r4, r3
    158e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1592:	68c8      	ldr	r0, [r1, #12]
    1594:	f7fe ff68 	bl	468 <__aeabi_f2d>
    1598:	4680      	mov	r8, r0
    159a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    159c:	68f0      	ldr	r0, [r6, #12]
    159e:	f7fe ff63 	bl	468 <__aeabi_f2d>
    15a2:	4602      	mov	r2, r0
    15a4:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    15a6:	4640      	mov	r0, r8
    15a8:	4649      	mov	r1, r9
    15aa:	f7fe ffb5 	bl	518 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    15ae:	b1ec      	cbz	r4, 15ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    15b0:	4680      	mov	r8, r0
    15b2:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    15b4:	68e0      	ldr	r0, [r4, #12]
    15b6:	f7fe ff57 	bl	468 <__aeabi_f2d>
    15ba:	4602      	mov	r2, r0
    15bc:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    15be:	4640      	mov	r0, r8
    15c0:	4649      	mov	r1, r9
    15c2:	f7fe fdf1 	bl	1a8 <__aeabi_dsub>
    15c6:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    15c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    15cc:	f8da 000c 	ldr.w	r0, [sl, #12]
    15d0:	f7fe ff4a 	bl	468 <__aeabi_f2d>
    15d4:	4602      	mov	r2, r0
    15d6:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15d8:	4640      	mov	r0, r8
    15da:	4621      	mov	r1, r4
    15dc:	f7ff f8c6 	bl	76c <__aeabi_ddiv>
    15e0:	a30d      	add	r3, pc, #52	; (adr r3, 1618 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    15e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15e6:	f7ff fa13 	bl	a10 <__aeabi_dcmple>
    15ea:	b150      	cbz	r0, 1602 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15ee:	9300      	str	r3, [sp, #0]
    15f0:	4653      	mov	r3, sl
    15f2:	4632      	mov	r2, r6
    15f4:	4629      	mov	r1, r5
    15f6:	4638      	mov	r0, r7
    15f8:	f007 fee0 	bl	93bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    15fc:	b002      	add	sp, #8
    15fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1602:	697c      	ldr	r4, [r7, #20]
    1604:	4b06      	ldr	r3, [pc, #24]	; (1620 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1606:	9300      	str	r3, [sp, #0]
    1608:	f44f 739f 	mov.w	r3, #318	; 0x13e
    160c:	4a05      	ldr	r2, [pc, #20]	; (1624 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    160e:	4906      	ldr	r1, [pc, #24]	; (1628 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    1610:	4638      	mov	r0, r7
    1612:	47a0      	blx	r4
    1614:	2001      	movs	r0, #1
    1616:	e7f1      	b.n	15fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    1618:	47ae147b 	.word	0x47ae147b
    161c:	3f947ae1 	.word	0x3f947ae1
    1620:	0006ab3c 	.word	0x0006ab3c
    1624:	0006aaac 	.word	0x0006aaac
    1628:	0006a8a8 	.word	0x0006a8a8
    162c:	00000000 	.word	0x00000000

00001630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
    1630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1634:	b088      	sub	sp, #32
    1636:	4605      	mov	r5, r0
    1638:	460e      	mov	r6, r1
    163a:	461f      	mov	r7, r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    163c:	780c      	ldrb	r4, [r1, #0]
    163e:	2c09      	cmp	r4, #9
    1640:	d013      	beq.n	166a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
    1642:	2c07      	cmp	r4, #7
    1644:	d011      	beq.n	166a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1646:	2c01      	cmp	r4, #1
    1648:	f040 8133 	bne.w	18b2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    164c:	7810      	ldrb	r0, [r2, #0]
    164e:	2801      	cmp	r0, #1
    1650:	f040 8144 	bne.w	18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>
    op_data->beta = static_cast<double>(params->beta);
    1654:	6818      	ldr	r0, [r3, #0]
    1656:	f7fe ff07 	bl	468 <__aeabi_f2d>
    165a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    165c:	e9c3 0100 	strd	r0, r1, [r3]
  }
  return kTfLiteOk;
    1660:	2400      	movs	r4, #0
}
    1662:	4620      	mov	r0, r4
    1664:	b008      	add	sp, #32
    1666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (input->type == kTfLiteInt16) {
    166a:	2c07      	cmp	r4, #7
    166c:	d01e      	beq.n	16ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7c>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    166e:	2c09      	cmp	r4, #9
    1670:	f040 8086 	bne.w	1780 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x150>
      if (output->type == kTfLiteInt16) {
    1674:	7810      	ldrb	r0, [r2, #0]
    1676:	2807      	cmp	r0, #7
    1678:	f000 8097 	beq.w	17aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    167c:	2809      	cmp	r0, #9
    167e:	f040 80d5 	bne.w	182c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1682:	6913      	ldr	r3, [r2, #16]
    1684:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1688:	f000 80e4 	beq.w	1854 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x224>
    168c:	696c      	ldr	r4, [r5, #20]
    168e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    1692:	9203      	str	r2, [sp, #12]
    1694:	9302      	str	r3, [sp, #8]
    1696:	4b9e      	ldr	r3, [pc, #632]	; (1910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
    1698:	9301      	str	r3, [sp, #4]
    169a:	4b9e      	ldr	r3, [pc, #632]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    169c:	9300      	str	r3, [sp, #0]
    169e:	2330      	movs	r3, #48	; 0x30
    16a0:	4a9d      	ldr	r2, [pc, #628]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    16a2:	499e      	ldr	r1, [pc, #632]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    16a4:	4628      	mov	r0, r5
    16a6:	47a0      	blx	r4
    16a8:	2401      	movs	r4, #1
    16aa:	e7da      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    16ac:	6913      	ldr	r3, [r2, #16]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d13b      	bne.n	172a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfa>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    16b2:	f8d2 800c 	ldr.w	r8, [r2, #12]
    16b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    16ba:	4640      	mov	r0, r8
    16bc:	f7ff fd08 	bl	10d0 <__aeabi_fcmpgt>
    16c0:	2800      	cmp	r0, #0
    16c2:	d041      	beq.n	1748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x118>
    16c4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    16c8:	4640      	mov	r0, r8
    16ca:	f7ff fa3b 	bl	b44 <__aeabi_fsub>
    16ce:	4994      	ldr	r1, [pc, #592]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
    16d0:	f7ff fcfe 	bl	10d0 <__aeabi_fcmpgt>
    16d4:	2800      	cmp	r0, #0
    16d6:	d13d      	bne.n	1754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x124>
    if (input->type == kTfLiteInt16) {
    16d8:	2c07      	cmp	r4, #7
    16da:	f000 80cd 	beq.w	1878 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
          static_cast<double>(params->beta),
    16de:	683f      	ldr	r7, [r7, #0]
      tflite::PreprocessSoftmaxScaling(
    16e0:	68f0      	ldr	r0, [r6, #12]
    16e2:	f7fe fec1 	bl	468 <__aeabi_f2d>
    16e6:	4604      	mov	r4, r0
    16e8:	460d      	mov	r5, r1
    16ea:	4638      	mov	r0, r7
    16ec:	f7fe febc 	bl	468 <__aeabi_f2d>
    16f0:	ab07      	add	r3, sp, #28
    16f2:	9302      	str	r3, [sp, #8]
    16f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16f6:	3308      	adds	r3, #8
    16f8:	9301      	str	r3, [sp, #4]
    16fa:	2605      	movs	r6, #5
    16fc:	9600      	str	r6, [sp, #0]
    16fe:	4622      	mov	r2, r4
    1700:	462b      	mov	r3, r5
    1702:	f7ff ff11 	bl	1528 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    1706:	9907      	ldr	r1, [sp, #28]
    1708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    170a:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    170c:	221f      	movs	r2, #31
    170e:	4630      	mov	r0, r6
    1710:	f012 f997 	bl	13a42 <_ZN6tflite20CalculateInputRadiusEiii>
    1714:	f7fe fe96 	bl	444 <__aeabi_i2d>
      op_data->diff_min =
    1718:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    171c:	4619      	mov	r1, r3
    171e:	f7ff f995 	bl	a4c <__aeabi_d2iz>
    1722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1724:	6198      	str	r0, [r3, #24]
  return kTfLiteOk;
    1726:	2400      	movs	r4, #0
    1728:	e79b      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    172a:	696c      	ldr	r4, [r5, #20]
    172c:	2200      	movs	r2, #0
    172e:	9203      	str	r2, [sp, #12]
    1730:	9302      	str	r3, [sp, #8]
    1732:	4b7c      	ldr	r3, [pc, #496]	; (1924 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
    1734:	9301      	str	r3, [sp, #4]
    1736:	4b77      	ldr	r3, [pc, #476]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    1738:	9300      	str	r3, [sp, #0]
    173a:	2325      	movs	r3, #37	; 0x25
    173c:	4a76      	ldr	r2, [pc, #472]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    173e:	4977      	ldr	r1, [pc, #476]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1740:	4628      	mov	r0, r5
    1742:	47a0      	blx	r4
    1744:	2401      	movs	r4, #1
    1746:	e78c      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1748:	4641      	mov	r1, r8
    174a:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
    174e:	f7ff f9f9 	bl	b44 <__aeabi_fsub>
    1752:	e7bc      	b.n	16ce <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9e>
    1754:	696c      	ldr	r4, [r5, #20]
    1756:	2200      	movs	r2, #0
    1758:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    175c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1760:	4640      	mov	r0, r8
    1762:	f7fe fe81 	bl	468 <__aeabi_f2d>
    1766:	e9cd 0102 	strd	r0, r1, [sp, #8]
    176a:	4b6f      	ldr	r3, [pc, #444]	; (1928 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
    176c:	9301      	str	r3, [sp, #4]
    176e:	4b6f      	ldr	r3, [pc, #444]	; (192c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1770:	9300      	str	r3, [sp, #0]
    1772:	2326      	movs	r3, #38	; 0x26
    1774:	4a68      	ldr	r2, [pc, #416]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1776:	496e      	ldr	r1, [pc, #440]	; (1930 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1778:	4628      	mov	r0, r5
    177a:	47a0      	blx	r4
    177c:	2401      	movs	r4, #1
    177e:	e770      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    1780:	696e      	ldr	r6, [r5, #20]
    1782:	4620      	mov	r0, r4
    1784:	f007 fc32 	bl	8fec <TfLiteTypeGetName>
    1788:	4604      	mov	r4, r0
    178a:	2009      	movs	r0, #9
    178c:	f007 fc2e 	bl	8fec <TfLiteTypeGetName>
    1790:	9003      	str	r0, [sp, #12]
    1792:	9402      	str	r4, [sp, #8]
    1794:	4b67      	ldr	r3, [pc, #412]	; (1934 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1796:	9301      	str	r3, [sp, #4]
    1798:	4b67      	ldr	r3, [pc, #412]	; (1938 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    179a:	9300      	str	r3, [sp, #0]
    179c:	2329      	movs	r3, #41	; 0x29
    179e:	4a5e      	ldr	r2, [pc, #376]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17a0:	4966      	ldr	r1, [pc, #408]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    17a2:	4628      	mov	r0, r5
    17a4:	47b0      	blx	r6
    17a6:	2401      	movs	r4, #1
    17a8:	e75b      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    17aa:	6913      	ldr	r3, [r2, #16]
    17ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    17b0:	d00e      	beq.n	17d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>
    17b2:	696c      	ldr	r4, [r5, #20]
    17b4:	4a62      	ldr	r2, [pc, #392]	; (1940 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
    17b6:	9203      	str	r2, [sp, #12]
    17b8:	9302      	str	r3, [sp, #8]
    17ba:	4b62      	ldr	r3, [pc, #392]	; (1944 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
    17bc:	9301      	str	r3, [sp, #4]
    17be:	4b55      	ldr	r3, [pc, #340]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    17c0:	9300      	str	r3, [sp, #0]
    17c2:	232b      	movs	r3, #43	; 0x2b
    17c4:	4a54      	ldr	r2, [pc, #336]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17c6:	4955      	ldr	r1, [pc, #340]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    17c8:	4628      	mov	r0, r5
    17ca:	47a0      	blx	r4
    17cc:	2401      	movs	r4, #1
    17ce:	e748      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    17d0:	f8d2 800c 	ldr.w	r8, [r2, #12]
    17d4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17d8:	4640      	mov	r0, r8
    17da:	f7ff fc79 	bl	10d0 <__aeabi_fcmpgt>
    17de:	b1f8      	cbz	r0, 1820 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f0>
    17e0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17e4:	4640      	mov	r0, r8
    17e6:	f7ff f9ad 	bl	b44 <__aeabi_fsub>
    17ea:	4957      	ldr	r1, [pc, #348]	; (1948 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
    17ec:	f7ff fc70 	bl	10d0 <__aeabi_fcmpgt>
    17f0:	2800      	cmp	r0, #0
    17f2:	f43f af71 	beq.w	16d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    17f6:	696c      	ldr	r4, [r5, #20]
    17f8:	2200      	movs	r2, #0
    17fa:	4b54      	ldr	r3, [pc, #336]	; (194c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
    17fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1800:	4640      	mov	r0, r8
    1802:	f7fe fe31 	bl	468 <__aeabi_f2d>
    1806:	e9cd 0102 	strd	r0, r1, [sp, #8]
    180a:	4b51      	ldr	r3, [pc, #324]	; (1950 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
    180c:	9301      	str	r3, [sp, #4]
    180e:	4b47      	ldr	r3, [pc, #284]	; (192c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1810:	9300      	str	r3, [sp, #0]
    1812:	232c      	movs	r3, #44	; 0x2c
    1814:	4a40      	ldr	r2, [pc, #256]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1816:	4946      	ldr	r1, [pc, #280]	; (1930 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1818:	4628      	mov	r0, r5
    181a:	47a0      	blx	r4
    181c:	2401      	movs	r4, #1
    181e:	e720      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    1820:	4641      	mov	r1, r8
    1822:	f04f 505e 	mov.w	r0, #931135488	; 0x37800000
    1826:	f7ff f98d 	bl	b44 <__aeabi_fsub>
    182a:	e7de      	b.n	17ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ba>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    182c:	696e      	ldr	r6, [r5, #20]
    182e:	f007 fbdd 	bl	8fec <TfLiteTypeGetName>
    1832:	4604      	mov	r4, r0
    1834:	2009      	movs	r0, #9
    1836:	f007 fbd9 	bl	8fec <TfLiteTypeGetName>
    183a:	9003      	str	r0, [sp, #12]
    183c:	9402      	str	r4, [sp, #8]
    183e:	4b3d      	ldr	r3, [pc, #244]	; (1934 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1840:	9301      	str	r3, [sp, #4]
    1842:	4b44      	ldr	r3, [pc, #272]	; (1954 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    1844:	9300      	str	r3, [sp, #0]
    1846:	232f      	movs	r3, #47	; 0x2f
    1848:	4a33      	ldr	r2, [pc, #204]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    184a:	493c      	ldr	r1, [pc, #240]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    184c:	4628      	mov	r0, r5
    184e:	47b0      	blx	r6
    1850:	2401      	movs	r4, #1
    1852:	e706      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1854:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    1858:	68d0      	ldr	r0, [r2, #12]
    185a:	f7ff fc11 	bl	1080 <__aeabi_fcmpeq>
    185e:	2800      	cmp	r0, #0
    1860:	f47f af3a 	bne.w	16d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    1864:	696c      	ldr	r4, [r5, #20]
    1866:	4b3c      	ldr	r3, [pc, #240]	; (1958 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
    1868:	9300      	str	r3, [sp, #0]
    186a:	2331      	movs	r3, #49	; 0x31
    186c:	4a2a      	ldr	r2, [pc, #168]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    186e:	493b      	ldr	r1, [pc, #236]	; (195c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
    1870:	4628      	mov	r0, r5
    1872:	47a0      	blx	r4
    1874:	2401      	movs	r4, #1
    1876:	e6f4      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
          static_cast<double>(input->params.scale) *
    1878:	68f0      	ldr	r0, [r6, #12]
    187a:	f7fe fdf5 	bl	468 <__aeabi_f2d>
    187e:	4604      	mov	r4, r0
    1880:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    1882:	6838      	ldr	r0, [r7, #0]
    1884:	f7fe fdf0 	bl	468 <__aeabi_f2d>
    1888:	4602      	mov	r2, r0
    188a:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    188c:	4620      	mov	r0, r4
    188e:	4629      	mov	r1, r5
    1890:	f7fe fe42 	bl	518 <__aeabi_dmul>
      double input_scale_beta_rescale =
    1894:	a31c      	add	r3, pc, #112	; (adr r3, 1908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
    1896:	e9d3 2300 	ldrd	r2, r3, [r3]
    189a:	f7fe ff67 	bl	76c <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    189e:	ab07      	add	r3, sp, #28
    18a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18a2:	3208      	adds	r2, #8
    18a4:	f007 fbf8 	bl	9098 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    18a8:	9b07      	ldr	r3, [sp, #28]
    18aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18ac:	60d3      	str	r3, [r2, #12]
  return kTfLiteOk;
    18ae:	2400      	movs	r4, #0
    18b0:	e6d7      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    18b2:	6946      	ldr	r6, [r0, #20]
    18b4:	4620      	mov	r0, r4
    18b6:	f007 fb99 	bl	8fec <TfLiteTypeGetName>
    18ba:	4604      	mov	r4, r0
    18bc:	2001      	movs	r0, #1
    18be:	f007 fb95 	bl	8fec <TfLiteTypeGetName>
    18c2:	9003      	str	r0, [sp, #12]
    18c4:	9402      	str	r4, [sp, #8]
    18c6:	4b26      	ldr	r3, [pc, #152]	; (1960 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18c8:	9301      	str	r3, [sp, #4]
    18ca:	4b1b      	ldr	r3, [pc, #108]	; (1938 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    18cc:	9300      	str	r3, [sp, #0]
    18ce:	234e      	movs	r3, #78	; 0x4e
    18d0:	4a11      	ldr	r2, [pc, #68]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18d2:	491a      	ldr	r1, [pc, #104]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18d4:	4628      	mov	r0, r5
    18d6:	47b0      	blx	r6
    18d8:	2401      	movs	r4, #1
    18da:	e6c2      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    18dc:	696f      	ldr	r7, [r5, #20]
    18de:	f007 fb85 	bl	8fec <TfLiteTypeGetName>
    18e2:	4606      	mov	r6, r0
    18e4:	2001      	movs	r0, #1
    18e6:	f007 fb81 	bl	8fec <TfLiteTypeGetName>
    18ea:	9003      	str	r0, [sp, #12]
    18ec:	9602      	str	r6, [sp, #8]
    18ee:	4b1c      	ldr	r3, [pc, #112]	; (1960 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18f0:	9301      	str	r3, [sp, #4]
    18f2:	4b18      	ldr	r3, [pc, #96]	; (1954 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    18f4:	9300      	str	r3, [sp, #0]
    18f6:	234f      	movs	r3, #79	; 0x4f
    18f8:	4a07      	ldr	r2, [pc, #28]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18fa:	4910      	ldr	r1, [pc, #64]	; (193c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18fc:	4628      	mov	r0, r5
    18fe:	47b8      	blx	r7
    1900:	e6af      	b.n	1662 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    1902:	bf00      	nop
    1904:	f3af 8000 	nop.w
    1908:	00140014 	.word	0x00140014
    190c:	3f240014 	.word	0x3f240014
    1910:	0006b88c 	.word	0x0006b88c
    1914:	0006b818 	.word	0x0006b818
    1918:	0006b7c0 	.word	0x0006b7c0
    191c:	0006ab68 	.word	0x0006ab68
    1920:	3303126f 	.word	0x3303126f
    1924:	0006af54 	.word	0x0006af54
    1928:	0006b854 	.word	0x0006b854
    192c:	0006b860 	.word	0x0006b860
    1930:	0006b834 	.word	0x0006b834
    1934:	0006ac44 	.word	0x0006ac44
    1938:	0006b18c 	.word	0x0006b18c
    193c:	0006b4f4 	.word	0x0006b4f4
    1940:	ffff8000 	.word	0xffff8000
    1944:	0006b878 	.word	0x0006b878
    1948:	3283126f 	.word	0x3283126f
    194c:	3ef00000 	.word	0x3ef00000
    1950:	0006b880 	.word	0x0006b880
    1954:	0006b17c 	.word	0x0006b17c
    1958:	0006b894 	.word	0x0006b894
    195c:	0006a8a8 	.word	0x0006a8a8
    1960:	0006b8b8 	.word	0x0006b8b8
    1964:	00000000 	.word	0x00000000

00001968 <floor>:
    1968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    196e:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    1972:	2d13      	cmp	r5, #19
    1974:	460b      	mov	r3, r1
    1976:	460c      	mov	r4, r1
    1978:	4602      	mov	r2, r0
    197a:	4606      	mov	r6, r0
    197c:	dc20      	bgt.n	19c0 <floor+0x58>
    197e:	2d00      	cmp	r5, #0
    1980:	db40      	blt.n	1a04 <floor+0x9c>
    1982:	4f35      	ldr	r7, [pc, #212]	; (1a58 <floor+0xf0>)
    1984:	412f      	asrs	r7, r5
    1986:	ea01 0c07 	and.w	ip, r1, r7
    198a:	ea5c 0c00 	orrs.w	ip, ip, r0
    198e:	d014      	beq.n	19ba <floor+0x52>
    1990:	a32f      	add	r3, pc, #188	; (adr r3, 1a50 <floor+0xe8>)
    1992:	e9d3 2300 	ldrd	r2, r3, [r3]
    1996:	f7fe fc09 	bl	1ac <__adddf3>
    199a:	2200      	movs	r2, #0
    199c:	2300      	movs	r3, #0
    199e:	f7ff f84b 	bl	a38 <__aeabi_dcmpgt>
    19a2:	b140      	cbz	r0, 19b6 <floor+0x4e>
    19a4:	2c00      	cmp	r4, #0
    19a6:	da03      	bge.n	19b0 <floor+0x48>
    19a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    19ac:	412b      	asrs	r3, r5
    19ae:	441c      	add	r4, r3
    19b0:	ea24 0407 	bic.w	r4, r4, r7
    19b4:	2600      	movs	r6, #0
    19b6:	4632      	mov	r2, r6
    19b8:	4623      	mov	r3, r4
    19ba:	4610      	mov	r0, r2
    19bc:	4619      	mov	r1, r3
    19be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19c0:	2d33      	cmp	r5, #51	; 0x33
    19c2:	dd07      	ble.n	19d4 <floor+0x6c>
    19c4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    19c8:	d1f7      	bne.n	19ba <floor+0x52>
    19ca:	f7fe fbef 	bl	1ac <__adddf3>
    19ce:	4602      	mov	r2, r0
    19d0:	460b      	mov	r3, r1
    19d2:	e7f2      	b.n	19ba <floor+0x52>
    19d4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    19d8:	f04f 3cff 	mov.w	ip, #4294967295
    19dc:	fa2c f707 	lsr.w	r7, ip, r7
    19e0:	4207      	tst	r7, r0
    19e2:	d0ea      	beq.n	19ba <floor+0x52>
    19e4:	a31a      	add	r3, pc, #104	; (adr r3, 1a50 <floor+0xe8>)
    19e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ea:	f7fe fbdf 	bl	1ac <__adddf3>
    19ee:	2200      	movs	r2, #0
    19f0:	2300      	movs	r3, #0
    19f2:	f7ff f821 	bl	a38 <__aeabi_dcmpgt>
    19f6:	2800      	cmp	r0, #0
    19f8:	d0dd      	beq.n	19b6 <floor+0x4e>
    19fa:	2c00      	cmp	r4, #0
    19fc:	db1b      	blt.n	1a36 <floor+0xce>
    19fe:	ea26 0607 	bic.w	r6, r6, r7
    1a02:	e7d8      	b.n	19b6 <floor+0x4e>
    1a04:	a312      	add	r3, pc, #72	; (adr r3, 1a50 <floor+0xe8>)
    1a06:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a0a:	f7fe fbcf 	bl	1ac <__adddf3>
    1a0e:	2200      	movs	r2, #0
    1a10:	2300      	movs	r3, #0
    1a12:	f7ff f811 	bl	a38 <__aeabi_dcmpgt>
    1a16:	2800      	cmp	r0, #0
    1a18:	d0cd      	beq.n	19b6 <floor+0x4e>
    1a1a:	2c00      	cmp	r4, #0
    1a1c:	db02      	blt.n	1a24 <floor+0xbc>
    1a1e:	2600      	movs	r6, #0
    1a20:	4634      	mov	r4, r6
    1a22:	e7c8      	b.n	19b6 <floor+0x4e>
    1a24:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    1a28:	4a0c      	ldr	r2, [pc, #48]	; (1a5c <floor+0xf4>)
    1a2a:	431e      	orrs	r6, r3
    1a2c:	2e00      	cmp	r6, #0
    1a2e:	bf18      	it	ne
    1a30:	4614      	movne	r4, r2
    1a32:	2600      	movs	r6, #0
    1a34:	e7bf      	b.n	19b6 <floor+0x4e>
    1a36:	2d14      	cmp	r5, #20
    1a38:	d008      	beq.n	1a4c <floor+0xe4>
    1a3a:	2201      	movs	r2, #1
    1a3c:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    1a40:	fa02 f303 	lsl.w	r3, r2, r3
    1a44:	199e      	adds	r6, r3, r6
    1a46:	bf28      	it	cs
    1a48:	18a4      	addcs	r4, r4, r2
    1a4a:	e7d8      	b.n	19fe <floor+0x96>
    1a4c:	3401      	adds	r4, #1
    1a4e:	e7d6      	b.n	19fe <floor+0x96>
    1a50:	8800759c 	.word	0x8800759c
    1a54:	7e37e43c 	.word	0x7e37e43c
    1a58:	000fffff 	.word	0x000fffff
    1a5c:	bff00000 	.word	0xbff00000

00001a60 <_dtoa_r>:
    1a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a64:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1a66:	b099      	sub	sp, #100	; 0x64
    1a68:	4616      	mov	r6, r2
    1a6a:	461f      	mov	r7, r3
    1a6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1a70:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1a74:	4605      	mov	r5, r0
    1a76:	b93c      	cbnz	r4, 1a88 <_dtoa_r+0x28>
    1a78:	2010      	movs	r0, #16
    1a7a:	f00e fed1 	bl	10820 <malloc>
    1a7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1a82:	6268      	str	r0, [r5, #36]	; 0x24
    1a84:	6004      	str	r4, [r0, #0]
    1a86:	60c4      	str	r4, [r0, #12]
    1a88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a8a:	6819      	ldr	r1, [r3, #0]
    1a8c:	b151      	cbz	r1, 1aa4 <_dtoa_r+0x44>
    1a8e:	685a      	ldr	r2, [r3, #4]
    1a90:	604a      	str	r2, [r1, #4]
    1a92:	2301      	movs	r3, #1
    1a94:	4093      	lsls	r3, r2
    1a96:	608b      	str	r3, [r1, #8]
    1a98:	4628      	mov	r0, r5
    1a9a:	f014 fd82 	bl	165a2 <_Bfree>
    1a9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1aa0:	2200      	movs	r2, #0
    1aa2:	601a      	str	r2, [r3, #0]
    1aa4:	1e3b      	subs	r3, r7, #0
    1aa6:	bfb9      	ittee	lt
    1aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1aac:	9305      	strlt	r3, [sp, #20]
    1aae:	2300      	movge	r3, #0
    1ab0:	f8c8 3000 	strge.w	r3, [r8]
    1ab4:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1ab8:	4ba7      	ldr	r3, [pc, #668]	; (1d58 <_dtoa_r+0x2f8>)
    1aba:	bfbc      	itt	lt
    1abc:	2201      	movlt	r2, #1
    1abe:	f8c8 2000 	strlt.w	r2, [r8]
    1ac2:	ea33 0309 	bics.w	r3, r3, r9
    1ac6:	d119      	bne.n	1afc <_dtoa_r+0x9c>
    1ac8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1aca:	f242 730f 	movw	r3, #9999	; 0x270f
    1ace:	6013      	str	r3, [r2, #0]
    1ad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
    1ad4:	4333      	orrs	r3, r6
    1ad6:	f000 856d 	beq.w	25b4 <_dtoa_r+0xb54>
    1ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1adc:	b953      	cbnz	r3, 1af4 <_dtoa_r+0x94>
    1ade:	4b9f      	ldr	r3, [pc, #636]	; (1d5c <_dtoa_r+0x2fc>)
    1ae0:	e023      	b.n	1b2a <_dtoa_r+0xca>
    1ae2:	4b9f      	ldr	r3, [pc, #636]	; (1d60 <_dtoa_r+0x300>)
    1ae4:	9303      	str	r3, [sp, #12]
    1ae6:	3308      	adds	r3, #8
    1ae8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1aea:	6013      	str	r3, [r2, #0]
    1aec:	9803      	ldr	r0, [sp, #12]
    1aee:	b019      	add	sp, #100	; 0x64
    1af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1af4:	4b99      	ldr	r3, [pc, #612]	; (1d5c <_dtoa_r+0x2fc>)
    1af6:	9303      	str	r3, [sp, #12]
    1af8:	3303      	adds	r3, #3
    1afa:	e7f5      	b.n	1ae8 <_dtoa_r+0x88>
    1afc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1b00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b08:	2200      	movs	r2, #0
    1b0a:	2300      	movs	r3, #0
    1b0c:	f7fe ff6c 	bl	9e8 <__aeabi_dcmpeq>
    1b10:	4680      	mov	r8, r0
    1b12:	b160      	cbz	r0, 1b2e <_dtoa_r+0xce>
    1b14:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1b16:	2301      	movs	r3, #1
    1b18:	6013      	str	r3, [r2, #0]
    1b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	f000 8546 	beq.w	25ae <_dtoa_r+0xb4e>
    1b22:	4b90      	ldr	r3, [pc, #576]	; (1d64 <_dtoa_r+0x304>)
    1b24:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b26:	6013      	str	r3, [r2, #0]
    1b28:	3b01      	subs	r3, #1
    1b2a:	9303      	str	r3, [sp, #12]
    1b2c:	e7de      	b.n	1aec <_dtoa_r+0x8c>
    1b2e:	ab16      	add	r3, sp, #88	; 0x58
    1b30:	9301      	str	r3, [sp, #4]
    1b32:	ab17      	add	r3, sp, #92	; 0x5c
    1b34:	9300      	str	r3, [sp, #0]
    1b36:	4628      	mov	r0, r5
    1b38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1b3c:	f014 ff69 	bl	16a12 <__d2b>
    1b40:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1b44:	4683      	mov	fp, r0
    1b46:	2c00      	cmp	r4, #0
    1b48:	d07e      	beq.n	1c48 <_dtoa_r+0x1e8>
    1b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b4c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b58:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1b5c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1b60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1b64:	4b80      	ldr	r3, [pc, #512]	; (1d68 <_dtoa_r+0x308>)
    1b66:	2200      	movs	r2, #0
    1b68:	f7fe fb1e 	bl	1a8 <__aeabi_dsub>
    1b6c:	a374      	add	r3, pc, #464	; (adr r3, 1d40 <_dtoa_r+0x2e0>)
    1b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b72:	f7fe fcd1 	bl	518 <__aeabi_dmul>
    1b76:	a374      	add	r3, pc, #464	; (adr r3, 1d48 <_dtoa_r+0x2e8>)
    1b78:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b7c:	f7fe fb16 	bl	1ac <__adddf3>
    1b80:	4606      	mov	r6, r0
    1b82:	4620      	mov	r0, r4
    1b84:	460f      	mov	r7, r1
    1b86:	f7fe fc5d 	bl	444 <__aeabi_i2d>
    1b8a:	a371      	add	r3, pc, #452	; (adr r3, 1d50 <_dtoa_r+0x2f0>)
    1b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b90:	f7fe fcc2 	bl	518 <__aeabi_dmul>
    1b94:	4602      	mov	r2, r0
    1b96:	460b      	mov	r3, r1
    1b98:	4630      	mov	r0, r6
    1b9a:	4639      	mov	r1, r7
    1b9c:	f7fe fb06 	bl	1ac <__adddf3>
    1ba0:	4606      	mov	r6, r0
    1ba2:	460f      	mov	r7, r1
    1ba4:	f7fe ff52 	bl	a4c <__aeabi_d2iz>
    1ba8:	2200      	movs	r2, #0
    1baa:	4682      	mov	sl, r0
    1bac:	2300      	movs	r3, #0
    1bae:	4630      	mov	r0, r6
    1bb0:	4639      	mov	r1, r7
    1bb2:	f7fe ff23 	bl	9fc <__aeabi_dcmplt>
    1bb6:	b148      	cbz	r0, 1bcc <_dtoa_r+0x16c>
    1bb8:	4650      	mov	r0, sl
    1bba:	f7fe fc43 	bl	444 <__aeabi_i2d>
    1bbe:	4632      	mov	r2, r6
    1bc0:	463b      	mov	r3, r7
    1bc2:	f7fe ff11 	bl	9e8 <__aeabi_dcmpeq>
    1bc6:	b908      	cbnz	r0, 1bcc <_dtoa_r+0x16c>
    1bc8:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bcc:	f1ba 0f16 	cmp.w	sl, #22
    1bd0:	d857      	bhi.n	1c82 <_dtoa_r+0x222>
    1bd2:	4b66      	ldr	r3, [pc, #408]	; (1d6c <_dtoa_r+0x30c>)
    1bd4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1be0:	f7fe ff0c 	bl	9fc <__aeabi_dcmplt>
    1be4:	2800      	cmp	r0, #0
    1be6:	d04e      	beq.n	1c86 <_dtoa_r+0x226>
    1be8:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bec:	2300      	movs	r3, #0
    1bee:	930f      	str	r3, [sp, #60]	; 0x3c
    1bf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bf2:	1b1c      	subs	r4, r3, r4
    1bf4:	1e63      	subs	r3, r4, #1
    1bf6:	9309      	str	r3, [sp, #36]	; 0x24
    1bf8:	bf45      	ittet	mi
    1bfa:	f1c4 0301 	rsbmi	r3, r4, #1
    1bfe:	9306      	strmi	r3, [sp, #24]
    1c00:	2300      	movpl	r3, #0
    1c02:	2300      	movmi	r3, #0
    1c04:	bf4c      	ite	mi
    1c06:	9309      	strmi	r3, [sp, #36]	; 0x24
    1c08:	9306      	strpl	r3, [sp, #24]
    1c0a:	f1ba 0f00 	cmp.w	sl, #0
    1c0e:	db3c      	blt.n	1c8a <_dtoa_r+0x22a>
    1c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1c16:	4453      	add	r3, sl
    1c18:	9309      	str	r3, [sp, #36]	; 0x24
    1c1a:	2300      	movs	r3, #0
    1c1c:	930a      	str	r3, [sp, #40]	; 0x28
    1c1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1c20:	2b09      	cmp	r3, #9
    1c22:	f200 80b5 	bhi.w	1d90 <_dtoa_r+0x330>
    1c26:	2b05      	cmp	r3, #5
    1c28:	bfc4      	itt	gt
    1c2a:	3b04      	subgt	r3, #4
    1c2c:	9322      	strgt	r3, [sp, #136]	; 0x88
    1c2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1c30:	f1a3 0302 	sub.w	r3, r3, #2
    1c34:	bfcc      	ite	gt
    1c36:	2400      	movgt	r4, #0
    1c38:	2401      	movle	r4, #1
    1c3a:	2b03      	cmp	r3, #3
    1c3c:	f200 80b4 	bhi.w	1da8 <_dtoa_r+0x348>
    1c40:	e8df f003 	tbb	[pc, r3]
    1c44:	a47a982d 	.word	0xa47a982d
    1c48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1c4c:	441c      	add	r4, r3
    1c4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1c52:	2b20      	cmp	r3, #32
    1c54:	bfc3      	ittte	gt
    1c56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1c5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1c5e:	fa09 f303 	lslgt.w	r3, r9, r3
    1c62:	f1c3 0320 	rsble	r3, r3, #32
    1c66:	bfc6      	itte	gt
    1c68:	fa26 f000 	lsrgt.w	r0, r6, r0
    1c6c:	4318      	orrgt	r0, r3
    1c6e:	fa06 f003 	lslle.w	r0, r6, r3
    1c72:	f7fe fbd7 	bl	424 <__aeabi_ui2d>
    1c76:	2301      	movs	r3, #1
    1c78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1c7c:	3c01      	subs	r4, #1
    1c7e:	9313      	str	r3, [sp, #76]	; 0x4c
    1c80:	e770      	b.n	1b64 <_dtoa_r+0x104>
    1c82:	2301      	movs	r3, #1
    1c84:	e7b3      	b.n	1bee <_dtoa_r+0x18e>
    1c86:	900f      	str	r0, [sp, #60]	; 0x3c
    1c88:	e7b2      	b.n	1bf0 <_dtoa_r+0x190>
    1c8a:	9b06      	ldr	r3, [sp, #24]
    1c8c:	eba3 030a 	sub.w	r3, r3, sl
    1c90:	9306      	str	r3, [sp, #24]
    1c92:	f1ca 0300 	rsb	r3, sl, #0
    1c96:	930a      	str	r3, [sp, #40]	; 0x28
    1c98:	2300      	movs	r3, #0
    1c9a:	930e      	str	r3, [sp, #56]	; 0x38
    1c9c:	e7bf      	b.n	1c1e <_dtoa_r+0x1be>
    1c9e:	2300      	movs	r3, #0
    1ca0:	930b      	str	r3, [sp, #44]	; 0x2c
    1ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	f300 8082 	bgt.w	1dae <_dtoa_r+0x34e>
    1caa:	f04f 0901 	mov.w	r9, #1
    1cae:	f8cd 9020 	str.w	r9, [sp, #32]
    1cb2:	464b      	mov	r3, r9
    1cb4:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1cb8:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1cba:	2200      	movs	r2, #0
    1cbc:	6072      	str	r2, [r6, #4]
    1cbe:	2204      	movs	r2, #4
    1cc0:	f102 0014 	add.w	r0, r2, #20
    1cc4:	4298      	cmp	r0, r3
    1cc6:	6871      	ldr	r1, [r6, #4]
    1cc8:	d977      	bls.n	1dba <_dtoa_r+0x35a>
    1cca:	4628      	mov	r0, r5
    1ccc:	f014 fc35 	bl	1653a <_Balloc>
    1cd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1cd2:	6030      	str	r0, [r6, #0]
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	9303      	str	r3, [sp, #12]
    1cd8:	9b08      	ldr	r3, [sp, #32]
    1cda:	2b0e      	cmp	r3, #14
    1cdc:	f200 80ee 	bhi.w	1ebc <_dtoa_r+0x45c>
    1ce0:	2c00      	cmp	r4, #0
    1ce2:	f000 80eb 	beq.w	1ebc <_dtoa_r+0x45c>
    1ce6:	f1ba 0f00 	cmp.w	sl, #0
    1cea:	dd7a      	ble.n	1de2 <_dtoa_r+0x382>
    1cec:	4a1f      	ldr	r2, [pc, #124]	; (1d6c <_dtoa_r+0x30c>)
    1cee:	f00a 030f 	and.w	r3, sl, #15
    1cf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
    1cfa:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1cfe:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1d02:	ea4f 142a 	mov.w	r4, sl, asr #4
    1d06:	d05c      	beq.n	1dc2 <_dtoa_r+0x362>
    1d08:	4b19      	ldr	r3, [pc, #100]	; (1d70 <_dtoa_r+0x310>)
    1d0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1d0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1d12:	f7fe fd2b 	bl	76c <__aeabi_ddiv>
    1d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1d1a:	f004 040f 	and.w	r4, r4, #15
    1d1e:	2703      	movs	r7, #3
    1d20:	4e13      	ldr	r6, [pc, #76]	; (1d70 <_dtoa_r+0x310>)
    1d22:	2c00      	cmp	r4, #0
    1d24:	d14f      	bne.n	1dc6 <_dtoa_r+0x366>
    1d26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1d2e:	f7fe fd1d 	bl	76c <__aeabi_ddiv>
    1d32:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1d36:	e06e      	b.n	1e16 <_dtoa_r+0x3b6>
    1d38:	2301      	movs	r3, #1
    1d3a:	e7b1      	b.n	1ca0 <_dtoa_r+0x240>
    1d3c:	f3af 8000 	nop.w
    1d40:	636f4361 	.word	0x636f4361
    1d44:	3fd287a7 	.word	0x3fd287a7
    1d48:	8b60c8b3 	.word	0x8b60c8b3
    1d4c:	3fc68a28 	.word	0x3fc68a28
    1d50:	509f79fb 	.word	0x509f79fb
    1d54:	3fd34413 	.word	0x3fd34413
    1d58:	7ff00000 	.word	0x7ff00000
    1d5c:	0006bc4f 	.word	0x0006bc4f
    1d60:	0006bc46 	.word	0x0006bc46
    1d64:	0006bc23 	.word	0x0006bc23
    1d68:	3ff80000 	.word	0x3ff80000
    1d6c:	00068590 	.word	0x00068590
    1d70:	00068568 	.word	0x00068568
    1d74:	2300      	movs	r3, #0
    1d76:	930b      	str	r3, [sp, #44]	; 0x2c
    1d78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1d7a:	eb0a 0903 	add.w	r9, sl, r3
    1d7e:	f109 0301 	add.w	r3, r9, #1
    1d82:	2b01      	cmp	r3, #1
    1d84:	9308      	str	r3, [sp, #32]
    1d86:	bfb8      	it	lt
    1d88:	2301      	movlt	r3, #1
    1d8a:	e795      	b.n	1cb8 <_dtoa_r+0x258>
    1d8c:	2301      	movs	r3, #1
    1d8e:	e7f2      	b.n	1d76 <_dtoa_r+0x316>
    1d90:	2401      	movs	r4, #1
    1d92:	2300      	movs	r3, #0
    1d94:	9322      	str	r3, [sp, #136]	; 0x88
    1d96:	940b      	str	r4, [sp, #44]	; 0x2c
    1d98:	f04f 39ff 	mov.w	r9, #4294967295
    1d9c:	2200      	movs	r2, #0
    1d9e:	f8cd 9020 	str.w	r9, [sp, #32]
    1da2:	2312      	movs	r3, #18
    1da4:	9223      	str	r2, [sp, #140]	; 0x8c
    1da6:	e787      	b.n	1cb8 <_dtoa_r+0x258>
    1da8:	2301      	movs	r3, #1
    1daa:	930b      	str	r3, [sp, #44]	; 0x2c
    1dac:	e7f4      	b.n	1d98 <_dtoa_r+0x338>
    1dae:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1db2:	f8cd 9020 	str.w	r9, [sp, #32]
    1db6:	464b      	mov	r3, r9
    1db8:	e77e      	b.n	1cb8 <_dtoa_r+0x258>
    1dba:	3101      	adds	r1, #1
    1dbc:	6071      	str	r1, [r6, #4]
    1dbe:	0052      	lsls	r2, r2, #1
    1dc0:	e77e      	b.n	1cc0 <_dtoa_r+0x260>
    1dc2:	2702      	movs	r7, #2
    1dc4:	e7ac      	b.n	1d20 <_dtoa_r+0x2c0>
    1dc6:	07e1      	lsls	r1, r4, #31
    1dc8:	d508      	bpl.n	1ddc <_dtoa_r+0x37c>
    1dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1dce:	e9d6 2300 	ldrd	r2, r3, [r6]
    1dd2:	f7fe fba1 	bl	518 <__aeabi_dmul>
    1dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1dda:	3701      	adds	r7, #1
    1ddc:	1064      	asrs	r4, r4, #1
    1dde:	3608      	adds	r6, #8
    1de0:	e79f      	b.n	1d22 <_dtoa_r+0x2c2>
    1de2:	f000 80a5 	beq.w	1f30 <_dtoa_r+0x4d0>
    1de6:	f1ca 0400 	rsb	r4, sl, #0
    1dea:	4ba4      	ldr	r3, [pc, #656]	; (207c <_dtoa_r+0x61c>)
    1dec:	4ea4      	ldr	r6, [pc, #656]	; (2080 <_dtoa_r+0x620>)
    1dee:	f004 020f 	and.w	r2, r4, #15
    1df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1df6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1dfe:	f7fe fb8b 	bl	518 <__aeabi_dmul>
    1e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e06:	1124      	asrs	r4, r4, #4
    1e08:	2300      	movs	r3, #0
    1e0a:	2702      	movs	r7, #2
    1e0c:	2c00      	cmp	r4, #0
    1e0e:	f040 8084 	bne.w	1f1a <_dtoa_r+0x4ba>
    1e12:	2b00      	cmp	r3, #0
    1e14:	d18d      	bne.n	1d32 <_dtoa_r+0x2d2>
    1e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e18:	2b00      	cmp	r3, #0
    1e1a:	f000 808b 	beq.w	1f34 <_dtoa_r+0x4d4>
    1e1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1e22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1e26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e2a:	4b96      	ldr	r3, [pc, #600]	; (2084 <_dtoa_r+0x624>)
    1e2c:	2200      	movs	r2, #0
    1e2e:	f7fe fde5 	bl	9fc <__aeabi_dcmplt>
    1e32:	2800      	cmp	r0, #0
    1e34:	d07e      	beq.n	1f34 <_dtoa_r+0x4d4>
    1e36:	9b08      	ldr	r3, [sp, #32]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d07b      	beq.n	1f34 <_dtoa_r+0x4d4>
    1e3c:	f1b9 0f00 	cmp.w	r9, #0
    1e40:	dd38      	ble.n	1eb4 <_dtoa_r+0x454>
    1e42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e46:	4b90      	ldr	r3, [pc, #576]	; (2088 <_dtoa_r+0x628>)
    1e48:	2200      	movs	r2, #0
    1e4a:	f7fe fb65 	bl	518 <__aeabi_dmul>
    1e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e52:	f10a 38ff 	add.w	r8, sl, #4294967295
    1e56:	3701      	adds	r7, #1
    1e58:	464c      	mov	r4, r9
    1e5a:	4638      	mov	r0, r7
    1e5c:	f7fe faf2 	bl	444 <__aeabi_i2d>
    1e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1e64:	f7fe fb58 	bl	518 <__aeabi_dmul>
    1e68:	4b88      	ldr	r3, [pc, #544]	; (208c <_dtoa_r+0x62c>)
    1e6a:	2200      	movs	r2, #0
    1e6c:	f7fe f99e 	bl	1ac <__adddf3>
    1e70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    1e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1e78:	9611      	str	r6, [sp, #68]	; 0x44
    1e7a:	2c00      	cmp	r4, #0
    1e7c:	d15d      	bne.n	1f3a <_dtoa_r+0x4da>
    1e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e82:	4b83      	ldr	r3, [pc, #524]	; (2090 <_dtoa_r+0x630>)
    1e84:	2200      	movs	r2, #0
    1e86:	f7fe f98f 	bl	1a8 <__aeabi_dsub>
    1e8a:	4602      	mov	r2, r0
    1e8c:	460b      	mov	r3, r1
    1e8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1e92:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e94:	4633      	mov	r3, r6
    1e96:	f7fe fdcf 	bl	a38 <__aeabi_dcmpgt>
    1e9a:	2800      	cmp	r0, #0
    1e9c:	f040 8297 	bne.w	23ce <_dtoa_r+0x96e>
    1ea0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1ea6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1eaa:	f7fe fda7 	bl	9fc <__aeabi_dcmplt>
    1eae:	2800      	cmp	r0, #0
    1eb0:	f040 828b 	bne.w	23ca <_dtoa_r+0x96a>
    1eb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1eb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1ebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	f2c0 8151 	blt.w	2166 <_dtoa_r+0x706>
    1ec4:	f1ba 0f0e 	cmp.w	sl, #14
    1ec8:	f300 814d 	bgt.w	2166 <_dtoa_r+0x706>
    1ecc:	4b6b      	ldr	r3, [pc, #428]	; (207c <_dtoa_r+0x61c>)
    1ece:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1ed2:	e9d3 3400 	ldrd	r3, r4, [r3]
    1ed6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1edc:	2b00      	cmp	r3, #0
    1ede:	f280 80db 	bge.w	2098 <_dtoa_r+0x638>
    1ee2:	9b08      	ldr	r3, [sp, #32]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	f300 80d7 	bgt.w	2098 <_dtoa_r+0x638>
    1eea:	f040 826d 	bne.w	23c8 <_dtoa_r+0x968>
    1eee:	4b68      	ldr	r3, [pc, #416]	; (2090 <_dtoa_r+0x630>)
    1ef0:	2200      	movs	r2, #0
    1ef2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1ef6:	f7fe fb0f 	bl	518 <__aeabi_dmul>
    1efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1efe:	f7fe fd91 	bl	a24 <__aeabi_dcmpge>
    1f02:	9c08      	ldr	r4, [sp, #32]
    1f04:	4626      	mov	r6, r4
    1f06:	2800      	cmp	r0, #0
    1f08:	f040 8243 	bne.w	2392 <_dtoa_r+0x932>
    1f0c:	9f03      	ldr	r7, [sp, #12]
    1f0e:	2331      	movs	r3, #49	; 0x31
    1f10:	f807 3b01 	strb.w	r3, [r7], #1
    1f14:	f10a 0a01 	add.w	sl, sl, #1
    1f18:	e23f      	b.n	239a <_dtoa_r+0x93a>
    1f1a:	07e2      	lsls	r2, r4, #31
    1f1c:	d505      	bpl.n	1f2a <_dtoa_r+0x4ca>
    1f1e:	e9d6 2300 	ldrd	r2, r3, [r6]
    1f22:	f7fe faf9 	bl	518 <__aeabi_dmul>
    1f26:	3701      	adds	r7, #1
    1f28:	2301      	movs	r3, #1
    1f2a:	1064      	asrs	r4, r4, #1
    1f2c:	3608      	adds	r6, #8
    1f2e:	e76d      	b.n	1e0c <_dtoa_r+0x3ac>
    1f30:	2702      	movs	r7, #2
    1f32:	e770      	b.n	1e16 <_dtoa_r+0x3b6>
    1f34:	9c08      	ldr	r4, [sp, #32]
    1f36:	46d0      	mov	r8, sl
    1f38:	e78f      	b.n	1e5a <_dtoa_r+0x3fa>
    1f3a:	9903      	ldr	r1, [sp, #12]
    1f3c:	4b4f      	ldr	r3, [pc, #316]	; (207c <_dtoa_r+0x61c>)
    1f3e:	4421      	add	r1, r4
    1f40:	9112      	str	r1, [sp, #72]	; 0x48
    1f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1f48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1f4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1f50:	2900      	cmp	r1, #0
    1f52:	d046      	beq.n	1fe2 <_dtoa_r+0x582>
    1f54:	494f      	ldr	r1, [pc, #316]	; (2094 <_dtoa_r+0x634>)
    1f56:	2000      	movs	r0, #0
    1f58:	f7fe fc08 	bl	76c <__aeabi_ddiv>
    1f5c:	463b      	mov	r3, r7
    1f5e:	4632      	mov	r2, r6
    1f60:	f7fe f922 	bl	1a8 <__aeabi_dsub>
    1f64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f68:	9f03      	ldr	r7, [sp, #12]
    1f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f6e:	f7fe fd6d 	bl	a4c <__aeabi_d2iz>
    1f72:	4604      	mov	r4, r0
    1f74:	f7fe fa66 	bl	444 <__aeabi_i2d>
    1f78:	4602      	mov	r2, r0
    1f7a:	460b      	mov	r3, r1
    1f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f80:	f7fe f912 	bl	1a8 <__aeabi_dsub>
    1f84:	3430      	adds	r4, #48	; 0x30
    1f86:	4602      	mov	r2, r0
    1f88:	460b      	mov	r3, r1
    1f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f8e:	f807 4b01 	strb.w	r4, [r7], #1
    1f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f96:	f7fe fd31 	bl	9fc <__aeabi_dcmplt>
    1f9a:	2800      	cmp	r0, #0
    1f9c:	d165      	bne.n	206a <_dtoa_r+0x60a>
    1f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1fa2:	4938      	ldr	r1, [pc, #224]	; (2084 <_dtoa_r+0x624>)
    1fa4:	2000      	movs	r0, #0
    1fa6:	f7fe f8ff 	bl	1a8 <__aeabi_dsub>
    1faa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1fae:	f7fe fd25 	bl	9fc <__aeabi_dcmplt>
    1fb2:	2800      	cmp	r0, #0
    1fb4:	f040 80b6 	bne.w	2124 <_dtoa_r+0x6c4>
    1fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fba:	429f      	cmp	r7, r3
    1fbc:	f43f af7a 	beq.w	1eb4 <_dtoa_r+0x454>
    1fc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1fc4:	4b30      	ldr	r3, [pc, #192]	; (2088 <_dtoa_r+0x628>)
    1fc6:	2200      	movs	r2, #0
    1fc8:	f7fe faa6 	bl	518 <__aeabi_dmul>
    1fcc:	4b2e      	ldr	r3, [pc, #184]	; (2088 <_dtoa_r+0x628>)
    1fce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fd2:	2200      	movs	r2, #0
    1fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fd8:	f7fe fa9e 	bl	518 <__aeabi_dmul>
    1fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1fe0:	e7c3      	b.n	1f6a <_dtoa_r+0x50a>
    1fe2:	4630      	mov	r0, r6
    1fe4:	4639      	mov	r1, r7
    1fe6:	f7fe fa97 	bl	518 <__aeabi_dmul>
    1fea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ff0:	9c03      	ldr	r4, [sp, #12]
    1ff2:	9314      	str	r3, [sp, #80]	; 0x50
    1ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1ff8:	f7fe fd28 	bl	a4c <__aeabi_d2iz>
    1ffc:	9015      	str	r0, [sp, #84]	; 0x54
    1ffe:	f7fe fa21 	bl	444 <__aeabi_i2d>
    2002:	4602      	mov	r2, r0
    2004:	460b      	mov	r3, r1
    2006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    200a:	f7fe f8cd 	bl	1a8 <__aeabi_dsub>
    200e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2010:	3330      	adds	r3, #48	; 0x30
    2012:	f804 3b01 	strb.w	r3, [r4], #1
    2016:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2018:	429c      	cmp	r4, r3
    201a:	4606      	mov	r6, r0
    201c:	460f      	mov	r7, r1
    201e:	f04f 0200 	mov.w	r2, #0
    2022:	d124      	bne.n	206e <_dtoa_r+0x60e>
    2024:	4b1b      	ldr	r3, [pc, #108]	; (2094 <_dtoa_r+0x634>)
    2026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    202a:	f7fe f8bf 	bl	1ac <__adddf3>
    202e:	4602      	mov	r2, r0
    2030:	460b      	mov	r3, r1
    2032:	4630      	mov	r0, r6
    2034:	4639      	mov	r1, r7
    2036:	f7fe fcff 	bl	a38 <__aeabi_dcmpgt>
    203a:	2800      	cmp	r0, #0
    203c:	d171      	bne.n	2122 <_dtoa_r+0x6c2>
    203e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2042:	4914      	ldr	r1, [pc, #80]	; (2094 <_dtoa_r+0x634>)
    2044:	2000      	movs	r0, #0
    2046:	f7fe f8af 	bl	1a8 <__aeabi_dsub>
    204a:	4602      	mov	r2, r0
    204c:	460b      	mov	r3, r1
    204e:	4630      	mov	r0, r6
    2050:	4639      	mov	r1, r7
    2052:	f7fe fcd3 	bl	9fc <__aeabi_dcmplt>
    2056:	2800      	cmp	r0, #0
    2058:	f43f af2c 	beq.w	1eb4 <_dtoa_r+0x454>
    205c:	9f14      	ldr	r7, [sp, #80]	; 0x50
    205e:	1e7b      	subs	r3, r7, #1
    2060:	9314      	str	r3, [sp, #80]	; 0x50
    2062:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2066:	2b30      	cmp	r3, #48	; 0x30
    2068:	d0f8      	beq.n	205c <_dtoa_r+0x5fc>
    206a:	46c2      	mov	sl, r8
    206c:	e049      	b.n	2102 <_dtoa_r+0x6a2>
    206e:	4b06      	ldr	r3, [pc, #24]	; (2088 <_dtoa_r+0x628>)
    2070:	f7fe fa52 	bl	518 <__aeabi_dmul>
    2074:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2078:	e7bc      	b.n	1ff4 <_dtoa_r+0x594>
    207a:	bf00      	nop
    207c:	00068590 	.word	0x00068590
    2080:	00068568 	.word	0x00068568
    2084:	3ff00000 	.word	0x3ff00000
    2088:	40240000 	.word	0x40240000
    208c:	401c0000 	.word	0x401c0000
    2090:	40140000 	.word	0x40140000
    2094:	3fe00000 	.word	0x3fe00000
    2098:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    209c:	9f03      	ldr	r7, [sp, #12]
    209e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20a2:	4640      	mov	r0, r8
    20a4:	4649      	mov	r1, r9
    20a6:	f7fe fb61 	bl	76c <__aeabi_ddiv>
    20aa:	f7fe fccf 	bl	a4c <__aeabi_d2iz>
    20ae:	4604      	mov	r4, r0
    20b0:	f7fe f9c8 	bl	444 <__aeabi_i2d>
    20b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20b8:	f7fe fa2e 	bl	518 <__aeabi_dmul>
    20bc:	f104 0630 	add.w	r6, r4, #48	; 0x30
    20c0:	460b      	mov	r3, r1
    20c2:	4602      	mov	r2, r0
    20c4:	4649      	mov	r1, r9
    20c6:	4640      	mov	r0, r8
    20c8:	f7fe f86e 	bl	1a8 <__aeabi_dsub>
    20cc:	f807 6b01 	strb.w	r6, [r7], #1
    20d0:	9e03      	ldr	r6, [sp, #12]
    20d2:	9b08      	ldr	r3, [sp, #32]
    20d4:	1bbe      	subs	r6, r7, r6
    20d6:	42b3      	cmp	r3, r6
    20d8:	d138      	bne.n	214c <_dtoa_r+0x6ec>
    20da:	4602      	mov	r2, r0
    20dc:	460b      	mov	r3, r1
    20de:	f7fe f865 	bl	1ac <__adddf3>
    20e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20e6:	4680      	mov	r8, r0
    20e8:	4689      	mov	r9, r1
    20ea:	f7fe fca5 	bl	a38 <__aeabi_dcmpgt>
    20ee:	bb58      	cbnz	r0, 2148 <_dtoa_r+0x6e8>
    20f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20f4:	4640      	mov	r0, r8
    20f6:	4649      	mov	r1, r9
    20f8:	f7fe fc76 	bl	9e8 <__aeabi_dcmpeq>
    20fc:	b108      	cbz	r0, 2102 <_dtoa_r+0x6a2>
    20fe:	07e1      	lsls	r1, r4, #31
    2100:	d422      	bmi.n	2148 <_dtoa_r+0x6e8>
    2102:	4628      	mov	r0, r5
    2104:	4659      	mov	r1, fp
    2106:	f014 fa4c 	bl	165a2 <_Bfree>
    210a:	2300      	movs	r3, #0
    210c:	703b      	strb	r3, [r7, #0]
    210e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2110:	f10a 0001 	add.w	r0, sl, #1
    2114:	6018      	str	r0, [r3, #0]
    2116:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2118:	2b00      	cmp	r3, #0
    211a:	f43f ace7 	beq.w	1aec <_dtoa_r+0x8c>
    211e:	601f      	str	r7, [r3, #0]
    2120:	e4e4      	b.n	1aec <_dtoa_r+0x8c>
    2122:	4627      	mov	r7, r4
    2124:	463b      	mov	r3, r7
    2126:	461f      	mov	r7, r3
    2128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    212c:	2a39      	cmp	r2, #57	; 0x39
    212e:	d107      	bne.n	2140 <_dtoa_r+0x6e0>
    2130:	9a03      	ldr	r2, [sp, #12]
    2132:	429a      	cmp	r2, r3
    2134:	d1f7      	bne.n	2126 <_dtoa_r+0x6c6>
    2136:	9903      	ldr	r1, [sp, #12]
    2138:	2230      	movs	r2, #48	; 0x30
    213a:	f108 0801 	add.w	r8, r8, #1
    213e:	700a      	strb	r2, [r1, #0]
    2140:	781a      	ldrb	r2, [r3, #0]
    2142:	3201      	adds	r2, #1
    2144:	701a      	strb	r2, [r3, #0]
    2146:	e790      	b.n	206a <_dtoa_r+0x60a>
    2148:	46d0      	mov	r8, sl
    214a:	e7eb      	b.n	2124 <_dtoa_r+0x6c4>
    214c:	4ba1      	ldr	r3, [pc, #644]	; (23d4 <_dtoa_r+0x974>)
    214e:	2200      	movs	r2, #0
    2150:	f7fe f9e2 	bl	518 <__aeabi_dmul>
    2154:	2200      	movs	r2, #0
    2156:	2300      	movs	r3, #0
    2158:	4680      	mov	r8, r0
    215a:	4689      	mov	r9, r1
    215c:	f7fe fc44 	bl	9e8 <__aeabi_dcmpeq>
    2160:	2800      	cmp	r0, #0
    2162:	d09c      	beq.n	209e <_dtoa_r+0x63e>
    2164:	e7cd      	b.n	2102 <_dtoa_r+0x6a2>
    2166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2168:	2a00      	cmp	r2, #0
    216a:	f000 80cd 	beq.w	2308 <_dtoa_r+0x8a8>
    216e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2170:	2a01      	cmp	r2, #1
    2172:	f300 80af 	bgt.w	22d4 <_dtoa_r+0x874>
    2176:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2178:	2a00      	cmp	r2, #0
    217a:	f000 80a7 	beq.w	22cc <_dtoa_r+0x86c>
    217e:	f203 4333 	addw	r3, r3, #1075	; 0x433
    2182:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2184:	9f06      	ldr	r7, [sp, #24]
    2186:	9a06      	ldr	r2, [sp, #24]
    2188:	441a      	add	r2, r3
    218a:	9206      	str	r2, [sp, #24]
    218c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    218e:	2101      	movs	r1, #1
    2190:	441a      	add	r2, r3
    2192:	4628      	mov	r0, r5
    2194:	9209      	str	r2, [sp, #36]	; 0x24
    2196:	f014 faa7 	bl	166e8 <__i2b>
    219a:	4606      	mov	r6, r0
    219c:	2f00      	cmp	r7, #0
    219e:	dd0c      	ble.n	21ba <_dtoa_r+0x75a>
    21a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21a2:	2b00      	cmp	r3, #0
    21a4:	dd09      	ble.n	21ba <_dtoa_r+0x75a>
    21a6:	42bb      	cmp	r3, r7
    21a8:	9a06      	ldr	r2, [sp, #24]
    21aa:	bfa8      	it	ge
    21ac:	463b      	movge	r3, r7
    21ae:	1ad2      	subs	r2, r2, r3
    21b0:	9206      	str	r2, [sp, #24]
    21b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    21b4:	1aff      	subs	r7, r7, r3
    21b6:	1ad3      	subs	r3, r2, r3
    21b8:	9309      	str	r3, [sp, #36]	; 0x24
    21ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21bc:	b1f3      	cbz	r3, 21fc <_dtoa_r+0x79c>
    21be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    21c0:	2b00      	cmp	r3, #0
    21c2:	f000 80a5 	beq.w	2310 <_dtoa_r+0x8b0>
    21c6:	2c00      	cmp	r4, #0
    21c8:	dd10      	ble.n	21ec <_dtoa_r+0x78c>
    21ca:	4631      	mov	r1, r6
    21cc:	4622      	mov	r2, r4
    21ce:	4628      	mov	r0, r5
    21d0:	f00f fbde 	bl	11990 <__pow5mult>
    21d4:	465a      	mov	r2, fp
    21d6:	4601      	mov	r1, r0
    21d8:	4606      	mov	r6, r0
    21da:	4628      	mov	r0, r5
    21dc:	f014 fa8d 	bl	166fa <__multiply>
    21e0:	4659      	mov	r1, fp
    21e2:	4680      	mov	r8, r0
    21e4:	4628      	mov	r0, r5
    21e6:	f014 f9dc 	bl	165a2 <_Bfree>
    21ea:	46c3      	mov	fp, r8
    21ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21ee:	1b1a      	subs	r2, r3, r4
    21f0:	d004      	beq.n	21fc <_dtoa_r+0x79c>
    21f2:	4659      	mov	r1, fp
    21f4:	4628      	mov	r0, r5
    21f6:	f00f fbcb 	bl	11990 <__pow5mult>
    21fa:	4683      	mov	fp, r0
    21fc:	2101      	movs	r1, #1
    21fe:	4628      	mov	r0, r5
    2200:	f014 fa72 	bl	166e8 <__i2b>
    2204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2206:	2b00      	cmp	r3, #0
    2208:	4604      	mov	r4, r0
    220a:	f340 8083 	ble.w	2314 <_dtoa_r+0x8b4>
    220e:	461a      	mov	r2, r3
    2210:	4601      	mov	r1, r0
    2212:	4628      	mov	r0, r5
    2214:	f00f fbbc 	bl	11990 <__pow5mult>
    2218:	9b22      	ldr	r3, [sp, #136]	; 0x88
    221a:	2b01      	cmp	r3, #1
    221c:	4604      	mov	r4, r0
    221e:	dd7c      	ble.n	231a <_dtoa_r+0x8ba>
    2220:	f04f 0800 	mov.w	r8, #0
    2224:	6923      	ldr	r3, [r4, #16]
    2226:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    222a:	6918      	ldr	r0, [r3, #16]
    222c:	f014 fa0e 	bl	1664c <__hi0bits>
    2230:	f1c0 0020 	rsb	r0, r0, #32
    2234:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2236:	4418      	add	r0, r3
    2238:	f010 001f 	ands.w	r0, r0, #31
    223c:	f000 808e 	beq.w	235c <_dtoa_r+0x8fc>
    2240:	f1c0 0320 	rsb	r3, r0, #32
    2244:	2b04      	cmp	r3, #4
    2246:	f340 8087 	ble.w	2358 <_dtoa_r+0x8f8>
    224a:	f1c0 001c 	rsb	r0, r0, #28
    224e:	9b06      	ldr	r3, [sp, #24]
    2250:	4403      	add	r3, r0
    2252:	9306      	str	r3, [sp, #24]
    2254:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2256:	4403      	add	r3, r0
    2258:	4407      	add	r7, r0
    225a:	9309      	str	r3, [sp, #36]	; 0x24
    225c:	9b06      	ldr	r3, [sp, #24]
    225e:	2b00      	cmp	r3, #0
    2260:	dd05      	ble.n	226e <_dtoa_r+0x80e>
    2262:	4659      	mov	r1, fp
    2264:	461a      	mov	r2, r3
    2266:	4628      	mov	r0, r5
    2268:	f014 fae3 	bl	16832 <__lshift>
    226c:	4683      	mov	fp, r0
    226e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2270:	2b00      	cmp	r3, #0
    2272:	dd05      	ble.n	2280 <_dtoa_r+0x820>
    2274:	4621      	mov	r1, r4
    2276:	461a      	mov	r2, r3
    2278:	4628      	mov	r0, r5
    227a:	f014 fada 	bl	16832 <__lshift>
    227e:	4604      	mov	r4, r0
    2280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2282:	2b00      	cmp	r3, #0
    2284:	d06c      	beq.n	2360 <_dtoa_r+0x900>
    2286:	4621      	mov	r1, r4
    2288:	4658      	mov	r0, fp
    228a:	f014 fb31 	bl	168f0 <__mcmp>
    228e:	2800      	cmp	r0, #0
    2290:	da66      	bge.n	2360 <_dtoa_r+0x900>
    2292:	2300      	movs	r3, #0
    2294:	4659      	mov	r1, fp
    2296:	220a      	movs	r2, #10
    2298:	4628      	mov	r0, r5
    229a:	f014 f999 	bl	165d0 <__multadd>
    229e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    22a0:	f10a 3aff 	add.w	sl, sl, #4294967295
    22a4:	4683      	mov	fp, r0
    22a6:	2b00      	cmp	r3, #0
    22a8:	f000 818b 	beq.w	25c2 <_dtoa_r+0xb62>
    22ac:	4631      	mov	r1, r6
    22ae:	2300      	movs	r3, #0
    22b0:	220a      	movs	r2, #10
    22b2:	4628      	mov	r0, r5
    22b4:	f014 f98c 	bl	165d0 <__multadd>
    22b8:	f1b9 0f00 	cmp.w	r9, #0
    22bc:	4606      	mov	r6, r0
    22be:	f300 8091 	bgt.w	23e4 <_dtoa_r+0x984>
    22c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    22c4:	2b02      	cmp	r3, #2
    22c6:	f340 808d 	ble.w	23e4 <_dtoa_r+0x984>
    22ca:	e051      	b.n	2370 <_dtoa_r+0x910>
    22cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    22ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    22d2:	e756      	b.n	2182 <_dtoa_r+0x722>
    22d4:	9b08      	ldr	r3, [sp, #32]
    22d6:	1e5c      	subs	r4, r3, #1
    22d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22da:	42a3      	cmp	r3, r4
    22dc:	bfbf      	itttt	lt
    22de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    22e0:	940a      	strlt	r4, [sp, #40]	; 0x28
    22e2:	1ae2      	sublt	r2, r4, r3
    22e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    22e6:	bfb6      	itet	lt
    22e8:	189b      	addlt	r3, r3, r2
    22ea:	1b1c      	subge	r4, r3, r4
    22ec:	930e      	strlt	r3, [sp, #56]	; 0x38
    22ee:	9b08      	ldr	r3, [sp, #32]
    22f0:	bfb8      	it	lt
    22f2:	2400      	movlt	r4, #0
    22f4:	2b00      	cmp	r3, #0
    22f6:	bfb9      	ittee	lt
    22f8:	9b06      	ldrlt	r3, [sp, #24]
    22fa:	9a08      	ldrlt	r2, [sp, #32]
    22fc:	9f06      	ldrge	r7, [sp, #24]
    22fe:	9b08      	ldrge	r3, [sp, #32]
    2300:	bfbc      	itt	lt
    2302:	1a9f      	sublt	r7, r3, r2
    2304:	2300      	movlt	r3, #0
    2306:	e73e      	b.n	2186 <_dtoa_r+0x726>
    2308:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    230a:	9f06      	ldr	r7, [sp, #24]
    230c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    230e:	e745      	b.n	219c <_dtoa_r+0x73c>
    2310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2312:	e76e      	b.n	21f2 <_dtoa_r+0x792>
    2314:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2316:	2b01      	cmp	r3, #1
    2318:	dc19      	bgt.n	234e <_dtoa_r+0x8ee>
    231a:	9b04      	ldr	r3, [sp, #16]
    231c:	b9bb      	cbnz	r3, 234e <_dtoa_r+0x8ee>
    231e:	9b05      	ldr	r3, [sp, #20]
    2320:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2324:	b99b      	cbnz	r3, 234e <_dtoa_r+0x8ee>
    2326:	9b05      	ldr	r3, [sp, #20]
    2328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    232c:	0d1b      	lsrs	r3, r3, #20
    232e:	051b      	lsls	r3, r3, #20
    2330:	b183      	cbz	r3, 2354 <_dtoa_r+0x8f4>
    2332:	9b06      	ldr	r3, [sp, #24]
    2334:	3301      	adds	r3, #1
    2336:	9306      	str	r3, [sp, #24]
    2338:	9b09      	ldr	r3, [sp, #36]	; 0x24
    233a:	3301      	adds	r3, #1
    233c:	9309      	str	r3, [sp, #36]	; 0x24
    233e:	f04f 0801 	mov.w	r8, #1
    2342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2344:	2b00      	cmp	r3, #0
    2346:	f47f af6d 	bne.w	2224 <_dtoa_r+0x7c4>
    234a:	2001      	movs	r0, #1
    234c:	e772      	b.n	2234 <_dtoa_r+0x7d4>
    234e:	f04f 0800 	mov.w	r8, #0
    2352:	e7f6      	b.n	2342 <_dtoa_r+0x8e2>
    2354:	4698      	mov	r8, r3
    2356:	e7f4      	b.n	2342 <_dtoa_r+0x8e2>
    2358:	d080      	beq.n	225c <_dtoa_r+0x7fc>
    235a:	4618      	mov	r0, r3
    235c:	301c      	adds	r0, #28
    235e:	e776      	b.n	224e <_dtoa_r+0x7ee>
    2360:	9b08      	ldr	r3, [sp, #32]
    2362:	2b00      	cmp	r3, #0
    2364:	dc38      	bgt.n	23d8 <_dtoa_r+0x978>
    2366:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2368:	2b02      	cmp	r3, #2
    236a:	dd35      	ble.n	23d8 <_dtoa_r+0x978>
    236c:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2370:	f1b9 0f00 	cmp.w	r9, #0
    2374:	d10d      	bne.n	2392 <_dtoa_r+0x932>
    2376:	4621      	mov	r1, r4
    2378:	464b      	mov	r3, r9
    237a:	2205      	movs	r2, #5
    237c:	4628      	mov	r0, r5
    237e:	f014 f927 	bl	165d0 <__multadd>
    2382:	4601      	mov	r1, r0
    2384:	4604      	mov	r4, r0
    2386:	4658      	mov	r0, fp
    2388:	f014 fab2 	bl	168f0 <__mcmp>
    238c:	2800      	cmp	r0, #0
    238e:	f73f adbd 	bgt.w	1f0c <_dtoa_r+0x4ac>
    2392:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2394:	9f03      	ldr	r7, [sp, #12]
    2396:	ea6f 0a03 	mvn.w	sl, r3
    239a:	f04f 0800 	mov.w	r8, #0
    239e:	4621      	mov	r1, r4
    23a0:	4628      	mov	r0, r5
    23a2:	f014 f8fe 	bl	165a2 <_Bfree>
    23a6:	2e00      	cmp	r6, #0
    23a8:	f43f aeab 	beq.w	2102 <_dtoa_r+0x6a2>
    23ac:	f1b8 0f00 	cmp.w	r8, #0
    23b0:	d005      	beq.n	23be <_dtoa_r+0x95e>
    23b2:	45b0      	cmp	r8, r6
    23b4:	d003      	beq.n	23be <_dtoa_r+0x95e>
    23b6:	4641      	mov	r1, r8
    23b8:	4628      	mov	r0, r5
    23ba:	f014 f8f2 	bl	165a2 <_Bfree>
    23be:	4631      	mov	r1, r6
    23c0:	4628      	mov	r0, r5
    23c2:	f014 f8ee 	bl	165a2 <_Bfree>
    23c6:	e69c      	b.n	2102 <_dtoa_r+0x6a2>
    23c8:	2400      	movs	r4, #0
    23ca:	4626      	mov	r6, r4
    23cc:	e7e1      	b.n	2392 <_dtoa_r+0x932>
    23ce:	46c2      	mov	sl, r8
    23d0:	4626      	mov	r6, r4
    23d2:	e59b      	b.n	1f0c <_dtoa_r+0x4ac>
    23d4:	40240000 	.word	0x40240000
    23d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23da:	f8dd 9020 	ldr.w	r9, [sp, #32]
    23de:	2b00      	cmp	r3, #0
    23e0:	f000 80f6 	beq.w	25d0 <_dtoa_r+0xb70>
    23e4:	2f00      	cmp	r7, #0
    23e6:	dd05      	ble.n	23f4 <_dtoa_r+0x994>
    23e8:	4631      	mov	r1, r6
    23ea:	463a      	mov	r2, r7
    23ec:	4628      	mov	r0, r5
    23ee:	f014 fa20 	bl	16832 <__lshift>
    23f2:	4606      	mov	r6, r0
    23f4:	f1b8 0f00 	cmp.w	r8, #0
    23f8:	d055      	beq.n	24a6 <_dtoa_r+0xa46>
    23fa:	6871      	ldr	r1, [r6, #4]
    23fc:	4628      	mov	r0, r5
    23fe:	f014 f89c 	bl	1653a <_Balloc>
    2402:	6932      	ldr	r2, [r6, #16]
    2404:	3202      	adds	r2, #2
    2406:	4607      	mov	r7, r0
    2408:	0092      	lsls	r2, r2, #2
    240a:	f106 010c 	add.w	r1, r6, #12
    240e:	300c      	adds	r0, #12
    2410:	f013 fde3 	bl	15fda <memcpy>
    2414:	2201      	movs	r2, #1
    2416:	4639      	mov	r1, r7
    2418:	4628      	mov	r0, r5
    241a:	f014 fa0a 	bl	16832 <__lshift>
    241e:	9b03      	ldr	r3, [sp, #12]
    2420:	3301      	adds	r3, #1
    2422:	9308      	str	r3, [sp, #32]
    2424:	9b03      	ldr	r3, [sp, #12]
    2426:	444b      	add	r3, r9
    2428:	930a      	str	r3, [sp, #40]	; 0x28
    242a:	9b04      	ldr	r3, [sp, #16]
    242c:	f003 0301 	and.w	r3, r3, #1
    2430:	46b0      	mov	r8, r6
    2432:	9309      	str	r3, [sp, #36]	; 0x24
    2434:	4606      	mov	r6, r0
    2436:	9b08      	ldr	r3, [sp, #32]
    2438:	4621      	mov	r1, r4
    243a:	3b01      	subs	r3, #1
    243c:	4658      	mov	r0, fp
    243e:	9304      	str	r3, [sp, #16]
    2440:	f013 ff97 	bl	16372 <quorem>
    2444:	4603      	mov	r3, r0
    2446:	3330      	adds	r3, #48	; 0x30
    2448:	9006      	str	r0, [sp, #24]
    244a:	4641      	mov	r1, r8
    244c:	4658      	mov	r0, fp
    244e:	930b      	str	r3, [sp, #44]	; 0x2c
    2450:	f014 fa4e 	bl	168f0 <__mcmp>
    2454:	4632      	mov	r2, r6
    2456:	4681      	mov	r9, r0
    2458:	4621      	mov	r1, r4
    245a:	4628      	mov	r0, r5
    245c:	f014 fa63 	bl	16926 <__mdiff>
    2460:	68c2      	ldr	r2, [r0, #12]
    2462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2464:	4607      	mov	r7, r0
    2466:	bb02      	cbnz	r2, 24aa <_dtoa_r+0xa4a>
    2468:	4601      	mov	r1, r0
    246a:	4658      	mov	r0, fp
    246c:	f014 fa40 	bl	168f0 <__mcmp>
    2470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2472:	4602      	mov	r2, r0
    2474:	4639      	mov	r1, r7
    2476:	4628      	mov	r0, r5
    2478:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    247c:	f014 f891 	bl	165a2 <_Bfree>
    2480:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2484:	9f08      	ldr	r7, [sp, #32]
    2486:	ea43 0102 	orr.w	r1, r3, r2
    248a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    248c:	430b      	orrs	r3, r1
    248e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2490:	d10d      	bne.n	24ae <_dtoa_r+0xa4e>
    2492:	2b39      	cmp	r3, #57	; 0x39
    2494:	d029      	beq.n	24ea <_dtoa_r+0xa8a>
    2496:	f1b9 0f00 	cmp.w	r9, #0
    249a:	dd01      	ble.n	24a0 <_dtoa_r+0xa40>
    249c:	9b06      	ldr	r3, [sp, #24]
    249e:	3331      	adds	r3, #49	; 0x31
    24a0:	9a04      	ldr	r2, [sp, #16]
    24a2:	7013      	strb	r3, [r2, #0]
    24a4:	e77b      	b.n	239e <_dtoa_r+0x93e>
    24a6:	4630      	mov	r0, r6
    24a8:	e7b9      	b.n	241e <_dtoa_r+0x9be>
    24aa:	2201      	movs	r2, #1
    24ac:	e7e2      	b.n	2474 <_dtoa_r+0xa14>
    24ae:	f1b9 0f00 	cmp.w	r9, #0
    24b2:	db06      	blt.n	24c2 <_dtoa_r+0xa62>
    24b4:	9922      	ldr	r1, [sp, #136]	; 0x88
    24b6:	ea41 0909 	orr.w	r9, r1, r9
    24ba:	9909      	ldr	r1, [sp, #36]	; 0x24
    24bc:	ea59 0101 	orrs.w	r1, r9, r1
    24c0:	d120      	bne.n	2504 <_dtoa_r+0xaa4>
    24c2:	2a00      	cmp	r2, #0
    24c4:	ddec      	ble.n	24a0 <_dtoa_r+0xa40>
    24c6:	4659      	mov	r1, fp
    24c8:	2201      	movs	r2, #1
    24ca:	4628      	mov	r0, r5
    24cc:	9308      	str	r3, [sp, #32]
    24ce:	f014 f9b0 	bl	16832 <__lshift>
    24d2:	4621      	mov	r1, r4
    24d4:	4683      	mov	fp, r0
    24d6:	f014 fa0b 	bl	168f0 <__mcmp>
    24da:	2800      	cmp	r0, #0
    24dc:	9b08      	ldr	r3, [sp, #32]
    24de:	dc02      	bgt.n	24e6 <_dtoa_r+0xa86>
    24e0:	d1de      	bne.n	24a0 <_dtoa_r+0xa40>
    24e2:	07da      	lsls	r2, r3, #31
    24e4:	d5dc      	bpl.n	24a0 <_dtoa_r+0xa40>
    24e6:	2b39      	cmp	r3, #57	; 0x39
    24e8:	d1d8      	bne.n	249c <_dtoa_r+0xa3c>
    24ea:	9a04      	ldr	r2, [sp, #16]
    24ec:	2339      	movs	r3, #57	; 0x39
    24ee:	7013      	strb	r3, [r2, #0]
    24f0:	463b      	mov	r3, r7
    24f2:	461f      	mov	r7, r3
    24f4:	3b01      	subs	r3, #1
    24f6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    24fa:	2a39      	cmp	r2, #57	; 0x39
    24fc:	d050      	beq.n	25a0 <_dtoa_r+0xb40>
    24fe:	3201      	adds	r2, #1
    2500:	701a      	strb	r2, [r3, #0]
    2502:	e74c      	b.n	239e <_dtoa_r+0x93e>
    2504:	2a00      	cmp	r2, #0
    2506:	dd03      	ble.n	2510 <_dtoa_r+0xab0>
    2508:	2b39      	cmp	r3, #57	; 0x39
    250a:	d0ee      	beq.n	24ea <_dtoa_r+0xa8a>
    250c:	3301      	adds	r3, #1
    250e:	e7c7      	b.n	24a0 <_dtoa_r+0xa40>
    2510:	9a08      	ldr	r2, [sp, #32]
    2512:	990a      	ldr	r1, [sp, #40]	; 0x28
    2514:	f802 3c01 	strb.w	r3, [r2, #-1]
    2518:	428a      	cmp	r2, r1
    251a:	d02a      	beq.n	2572 <_dtoa_r+0xb12>
    251c:	4659      	mov	r1, fp
    251e:	2300      	movs	r3, #0
    2520:	220a      	movs	r2, #10
    2522:	4628      	mov	r0, r5
    2524:	f014 f854 	bl	165d0 <__multadd>
    2528:	45b0      	cmp	r8, r6
    252a:	4683      	mov	fp, r0
    252c:	f04f 0300 	mov.w	r3, #0
    2530:	f04f 020a 	mov.w	r2, #10
    2534:	4641      	mov	r1, r8
    2536:	4628      	mov	r0, r5
    2538:	d107      	bne.n	254a <_dtoa_r+0xaea>
    253a:	f014 f849 	bl	165d0 <__multadd>
    253e:	4680      	mov	r8, r0
    2540:	4606      	mov	r6, r0
    2542:	9b08      	ldr	r3, [sp, #32]
    2544:	3301      	adds	r3, #1
    2546:	9308      	str	r3, [sp, #32]
    2548:	e775      	b.n	2436 <_dtoa_r+0x9d6>
    254a:	f014 f841 	bl	165d0 <__multadd>
    254e:	4631      	mov	r1, r6
    2550:	4680      	mov	r8, r0
    2552:	2300      	movs	r3, #0
    2554:	220a      	movs	r2, #10
    2556:	4628      	mov	r0, r5
    2558:	f014 f83a 	bl	165d0 <__multadd>
    255c:	4606      	mov	r6, r0
    255e:	e7f0      	b.n	2542 <_dtoa_r+0xae2>
    2560:	f1b9 0f00 	cmp.w	r9, #0
    2564:	9a03      	ldr	r2, [sp, #12]
    2566:	bfcc      	ite	gt
    2568:	464f      	movgt	r7, r9
    256a:	2701      	movle	r7, #1
    256c:	4417      	add	r7, r2
    256e:	f04f 0800 	mov.w	r8, #0
    2572:	4659      	mov	r1, fp
    2574:	2201      	movs	r2, #1
    2576:	4628      	mov	r0, r5
    2578:	9308      	str	r3, [sp, #32]
    257a:	f014 f95a 	bl	16832 <__lshift>
    257e:	4621      	mov	r1, r4
    2580:	4683      	mov	fp, r0
    2582:	f014 f9b5 	bl	168f0 <__mcmp>
    2586:	2800      	cmp	r0, #0
    2588:	dcb2      	bgt.n	24f0 <_dtoa_r+0xa90>
    258a:	d102      	bne.n	2592 <_dtoa_r+0xb32>
    258c:	9b08      	ldr	r3, [sp, #32]
    258e:	07db      	lsls	r3, r3, #31
    2590:	d4ae      	bmi.n	24f0 <_dtoa_r+0xa90>
    2592:	463b      	mov	r3, r7
    2594:	461f      	mov	r7, r3
    2596:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    259a:	2a30      	cmp	r2, #48	; 0x30
    259c:	d0fa      	beq.n	2594 <_dtoa_r+0xb34>
    259e:	e6fe      	b.n	239e <_dtoa_r+0x93e>
    25a0:	9a03      	ldr	r2, [sp, #12]
    25a2:	429a      	cmp	r2, r3
    25a4:	d1a5      	bne.n	24f2 <_dtoa_r+0xa92>
    25a6:	f10a 0a01 	add.w	sl, sl, #1
    25aa:	2331      	movs	r3, #49	; 0x31
    25ac:	e779      	b.n	24a2 <_dtoa_r+0xa42>
    25ae:	4b13      	ldr	r3, [pc, #76]	; (25fc <_dtoa_r+0xb9c>)
    25b0:	f7ff babb 	b.w	1b2a <_dtoa_r+0xca>
    25b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    25b6:	2b00      	cmp	r3, #0
    25b8:	f47f aa93 	bne.w	1ae2 <_dtoa_r+0x82>
    25bc:	4b10      	ldr	r3, [pc, #64]	; (2600 <_dtoa_r+0xba0>)
    25be:	f7ff bab4 	b.w	1b2a <_dtoa_r+0xca>
    25c2:	f1b9 0f00 	cmp.w	r9, #0
    25c6:	dc03      	bgt.n	25d0 <_dtoa_r+0xb70>
    25c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    25ca:	2b02      	cmp	r3, #2
    25cc:	f73f aed0 	bgt.w	2370 <_dtoa_r+0x910>
    25d0:	9f03      	ldr	r7, [sp, #12]
    25d2:	4621      	mov	r1, r4
    25d4:	4658      	mov	r0, fp
    25d6:	f013 fecc 	bl	16372 <quorem>
    25da:	f100 0330 	add.w	r3, r0, #48	; 0x30
    25de:	f807 3b01 	strb.w	r3, [r7], #1
    25e2:	9a03      	ldr	r2, [sp, #12]
    25e4:	1aba      	subs	r2, r7, r2
    25e6:	4591      	cmp	r9, r2
    25e8:	ddba      	ble.n	2560 <_dtoa_r+0xb00>
    25ea:	4659      	mov	r1, fp
    25ec:	2300      	movs	r3, #0
    25ee:	220a      	movs	r2, #10
    25f0:	4628      	mov	r0, r5
    25f2:	f013 ffed 	bl	165d0 <__multadd>
    25f6:	4683      	mov	fp, r0
    25f8:	e7eb      	b.n	25d2 <_dtoa_r+0xb72>
    25fa:	bf00      	nop
    25fc:	0006bc22 	.word	0x0006bc22
    2600:	0006bc46 	.word	0x0006bc46

00002604 <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    2604:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    2606:	2825      	cmp	r0, #37	; 0x25
    2608:	d00c      	beq.n	2624 <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    260a:	4b0c      	ldr	r3, [pc, #48]	; (263c <_Z18ee_serial_callbackc+0x38>)
    260c:	681a      	ldr	r2, [r3, #0]
    260e:	490c      	ldr	r1, [pc, #48]	; (2640 <_Z18ee_serial_callbackc+0x3c>)
    2610:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    2612:	681b      	ldr	r3, [r3, #0]
    2614:	2b4f      	cmp	r3, #79	; 0x4f
    2616:	d80e      	bhi.n	2636 <_Z18ee_serial_callbackc+0x32>
    2618:	4b08      	ldr	r3, [pc, #32]	; (263c <_Z18ee_serial_callbackc+0x38>)
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	3301      	adds	r3, #1
    261e:	4a07      	ldr	r2, [pc, #28]	; (263c <_Z18ee_serial_callbackc+0x38>)
    2620:	6013      	str	r3, [r2, #0]
  }
}
    2622:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    2624:	4c05      	ldr	r4, [pc, #20]	; (263c <_Z18ee_serial_callbackc+0x38>)
    2626:	6823      	ldr	r3, [r4, #0]
    2628:	4805      	ldr	r0, [pc, #20]	; (2640 <_Z18ee_serial_callbackc+0x3c>)
    262a:	2500      	movs	r5, #0
    262c:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    262e:	f00f faf0 	bl	11c12 <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    2632:	6025      	str	r5, [r4, #0]
    2634:	e7f5      	b.n	2622 <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    2636:	2350      	movs	r3, #80	; 0x50
    2638:	e7f1      	b.n	261e <_Z18ee_serial_callbackc+0x1a>
    263a:	bf00      	nop
    263c:	20000554 	.word	0x20000554
    2640:	20000500 	.word	0x20000500

00002644 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2644:	b508      	push	{r3, lr}
  th_serialport_initialize();
    2646:	f00f fafe 	bl	11c46 <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    264a:	f000 fac5 	bl	2bd8 <_Z23th_timestamp_initializev>
  th_final_initialize();
    264e:	f000 facd 	bl	2bec <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    2652:	4805      	ldr	r0, [pc, #20]	; (2668 <_Z23ee_benchmark_initializev+0x24>)
    2654:	f00f fae9 	bl	11c2a <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    2658:	4b04      	ldr	r3, [pc, #16]	; (266c <_Z23ee_benchmark_initializev+0x28>)
    265a:	2201      	movs	r2, #1
    265c:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    265e:	4804      	ldr	r0, [pc, #16]	; (2670 <_Z23ee_benchmark_initializev+0x2c>)
    2660:	f00f fae3 	bl	11c2a <_Z9th_printfPKcz>
}
    2664:	bd08      	pop	{r3, pc}
    2666:	bf00      	nop
    2668:	00068658 	.word	0x00068658
    266c:	20020f2c 	.word	0x20020f2c
    2670:	00068668 	.word	0x00068668

00002674 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    2674:	b570      	push	{r4, r5, r6, lr}
    2676:	4604      	mov	r4, r0
    2678:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    267a:	f000 fa01 	bl	2a80 <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    267e:	4629      	mov	r1, r5
    2680:	4811      	ldr	r0, [pc, #68]	; (26c8 <_Z8ee_inferjj+0x54>)
    2682:	f00f fad2 	bl	11c2a <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    2686:	1e6e      	subs	r6, r5, #1
    2688:	b11d      	cbz	r5, 2692 <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    268a:	f000 f9e7 	bl	2a5c <_Z8th_inferv>
  while (n_warmup-- > 0) {
    268e:	4635      	mov	r5, r6
    2690:	e7f9      	b.n	2686 <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    2692:	480e      	ldr	r0, [pc, #56]	; (26cc <_Z8ee_inferjj+0x58>)
    2694:	f00f fac9 	bl	11c2a <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2698:	4621      	mov	r1, r4
    269a:	480d      	ldr	r0, [pc, #52]	; (26d0 <_Z8ee_inferjj+0x5c>)
    269c:	f00f fac5 	bl	11c2a <_Z9th_printfPKcz>
  th_timestamp();
    26a0:	f000 fa66 	bl	2b70 <_Z12th_timestampv>
  th_pre();
    26a4:	f00f fab3 	bl	11c0e <_Z6th_prev>
  while (n-- > 0) {
    26a8:	1e65      	subs	r5, r4, #1
    26aa:	b11c      	cbz	r4, 26b4 <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    26ac:	f000 f9d6 	bl	2a5c <_Z8th_inferv>
  while (n-- > 0) {
    26b0:	462c      	mov	r4, r5
    26b2:	e7f9      	b.n	26a8 <_Z8ee_inferjj+0x34>
  }
  th_post();
    26b4:	f00f faac 	bl	11c10 <_Z7th_postv>
  th_timestamp();
    26b8:	f000 fa5a 	bl	2b70 <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    26bc:	4805      	ldr	r0, [pc, #20]	; (26d4 <_Z8ee_inferjj+0x60>)
    26be:	f00f fab4 	bl	11c2a <_Z9th_printfPKcz>
  th_results();
    26c2:	f000 fa15 	bl	2af0 <_Z10th_resultsv>
}
    26c6:	bd70      	pop	{r4, r5, r6, pc}
    26c8:	00068674 	.word	0x00068674
    26cc:	00068688 	.word	0x00068688
    26d0:	00068698 	.word	0x00068698
    26d4:	000686ac 	.word	0x000686ac

000026d8 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    26d8:	b570      	push	{r4, r5, r6, lr}
    26da:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    26dc:	2250      	movs	r2, #80	; 0x50
    26de:	4951      	ldr	r1, [pc, #324]	; (2824 <_Z15ee_buffer_parsePc+0x14c>)
    26e0:	f013 fded 	bl	162be <strncmp>
    26e4:	b110      	cbz	r0, 26ec <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    26e6:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    26e8:	b002      	add	sp, #8
    26ea:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    26ec:	494e      	ldr	r1, [pc, #312]	; (2828 <_Z15ee_buffer_parsePc+0x150>)
    26ee:	f00e fdf9 	bl	112e4 <strtok>
  if (p_next == NULL) {
    26f2:	4605      	mov	r5, r0
    26f4:	b1d8      	cbz	r0, 272e <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    26f6:	2250      	movs	r2, #80	; 0x50
    26f8:	494c      	ldr	r1, [pc, #304]	; (282c <_Z15ee_buffer_parsePc+0x154>)
    26fa:	f013 fde0 	bl	162be <strncmp>
    26fe:	bb50      	cbnz	r0, 2756 <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    2700:	4949      	ldr	r1, [pc, #292]	; (2828 <_Z15ee_buffer_parsePc+0x150>)
    2702:	f00e fdef 	bl	112e4 <strtok>
    if (p_next == NULL) {
    2706:	b1b8      	cbz	r0, 2738 <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    2708:	f013 fc63 	bl	15fd2 <atoi>
    270c:	4601      	mov	r1, r0
    270e:	4b48      	ldr	r3, [pc, #288]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    2710:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    2712:	b1b0      	cbz	r0, 2742 <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    2714:	4b47      	ldr	r3, [pc, #284]	; (2834 <_Z15ee_buffer_parsePc+0x15c>)
    2716:	2200      	movs	r2, #0
    2718:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    271a:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
    271e:	d915      	bls.n	274c <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    2720:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    2724:	4844      	ldr	r0, [pc, #272]	; (2838 <_Z15ee_buffer_parsePc+0x160>)
    2726:	f00f fa80 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    272a:	2000      	movs	r0, #0
    272c:	e7dc      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    272e:	4843      	ldr	r0, [pc, #268]	; (283c <_Z15ee_buffer_parsePc+0x164>)
    2730:	f00f fa7b 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2734:	2000      	movs	r0, #0
    2736:	e7d7      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    2738:	4841      	ldr	r0, [pc, #260]	; (2840 <_Z15ee_buffer_parsePc+0x168>)
    273a:	f00f fa76 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    273e:	2000      	movs	r0, #0
    2740:	e7d2      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    2742:	4840      	ldr	r0, [pc, #256]	; (2844 <_Z15ee_buffer_parsePc+0x16c>)
    2744:	f00f fa71 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2748:	2000      	movs	r0, #0
    274a:	e7cd      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    274c:	483e      	ldr	r0, [pc, #248]	; (2848 <_Z15ee_buffer_parsePc+0x170>)
    274e:	f00f fa6c 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2752:	2000      	movs	r0, #0
    2754:	e7c8      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    2756:	2250      	movs	r2, #80	; 0x50
    2758:	493c      	ldr	r1, [pc, #240]	; (284c <_Z15ee_buffer_parsePc+0x174>)
    275a:	4628      	mov	r0, r5
    275c:	f013 fdaf 	bl	162be <strncmp>
    2760:	bb60      	cbnz	r0, 27bc <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    2762:	2400      	movs	r4, #0
    2764:	e012      	b.n	278c <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    2766:	483a      	ldr	r0, [pc, #232]	; (2850 <_Z15ee_buffer_parsePc+0x178>)
    2768:	f00f fa5f 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    276c:	4b39      	ldr	r3, [pc, #228]	; (2854 <_Z15ee_buffer_parsePc+0x17c>)
    276e:	5d19      	ldrb	r1, [r3, r4]
    2770:	4839      	ldr	r0, [pc, #228]	; (2858 <_Z15ee_buffer_parsePc+0x180>)
    2772:	f00f fa5a 	bl	11c2a <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    2776:	3401      	adds	r4, #1
    2778:	f014 0f07 	tst.w	r4, #7
    277c:	d003      	beq.n	2786 <_Z15ee_buffer_parsePc+0xae>
    277e:	4b2c      	ldr	r3, [pc, #176]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	429c      	cmp	r4, r3
    2784:	d10c      	bne.n	27a0 <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    2786:	4835      	ldr	r0, [pc, #212]	; (285c <_Z15ee_buffer_parsePc+0x184>)
    2788:	f00f fa4f 	bl	11c2a <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    278c:	4b28      	ldr	r3, [pc, #160]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	42a3      	cmp	r3, r4
    2792:	d909      	bls.n	27a8 <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    2794:	f014 0f07 	tst.w	r4, #7
    2798:	d0e5      	beq.n	2766 <_Z15ee_buffer_parsePc+0x8e>
    279a:	2c00      	cmp	r4, #0
    279c:	d1e6      	bne.n	276c <_Z15ee_buffer_parsePc+0x94>
    279e:	e7e2      	b.n	2766 <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    27a0:	482f      	ldr	r0, [pc, #188]	; (2860 <_Z15ee_buffer_parsePc+0x188>)
    27a2:	f00f fa42 	bl	11c2a <_Z9th_printfPKcz>
    27a6:	e7f1      	b.n	278c <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    27a8:	f014 0f07 	tst.w	r4, #7
    27ac:	d101      	bne.n	27b2 <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    27ae:	2000      	movs	r0, #0
    27b0:	e79a      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    27b2:	482a      	ldr	r0, [pc, #168]	; (285c <_Z15ee_buffer_parsePc+0x184>)
    27b4:	f00f fa39 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    27b8:	2000      	movs	r0, #0
    27ba:	e795      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    27bc:	2150      	movs	r1, #80	; 0x50
    27be:	4628      	mov	r0, r5
    27c0:	f00f fa2b 	bl	11c1a <_Z10th_strnlenPKcj>
    27c4:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    27c6:	f010 0401 	ands.w	r4, r0, #1
    27ca:	d11f      	bne.n	280c <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    27cc:	2300      	movs	r3, #0
    27ce:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    27d2:	42b4      	cmp	r4, r6
    27d4:	d224      	bcs.n	2820 <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    27d6:	1c63      	adds	r3, r4, #1
    27d8:	5d2a      	ldrb	r2, [r5, r4]
    27da:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    27de:	5ceb      	ldrb	r3, [r5, r3]
    27e0:	3402      	adds	r4, #2
    27e2:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    27e6:	a801      	add	r0, sp, #4
    27e8:	f00f f988 	bl	11afc <_Z9ee_hexdecPc>
      if (res < 0) {
    27ec:	2800      	cmp	r0, #0
    27ee:	db11      	blt.n	2814 <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    27f0:	4a10      	ldr	r2, [pc, #64]	; (2834 <_Z15ee_buffer_parsePc+0x15c>)
    27f2:	6813      	ldr	r3, [r2, #0]
    27f4:	4917      	ldr	r1, [pc, #92]	; (2854 <_Z15ee_buffer_parsePc+0x17c>)
    27f6:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    27f8:	3301      	adds	r3, #1
    27fa:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    27fc:	4a0c      	ldr	r2, [pc, #48]	; (2830 <_Z15ee_buffer_parsePc+0x158>)
    27fe:	6812      	ldr	r2, [r2, #0]
    2800:	4293      	cmp	r3, r2
    2802:	d1e6      	bne.n	27d2 <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    2804:	4817      	ldr	r0, [pc, #92]	; (2864 <_Z15ee_buffer_parsePc+0x18c>)
    2806:	f00f fa10 	bl	11c2a <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    280a:	e007      	b.n	281c <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    280c:	4816      	ldr	r0, [pc, #88]	; (2868 <_Z15ee_buffer_parsePc+0x190>)
    280e:	f00f fa0c 	bl	11c2a <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    2812:	e003      	b.n	281c <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    2814:	a901      	add	r1, sp, #4
    2816:	4815      	ldr	r0, [pc, #84]	; (286c <_Z15ee_buffer_parsePc+0x194>)
    2818:	f00f fa07 	bl	11c2a <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    281c:	2000      	movs	r0, #0
    281e:	e763      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    2820:	2000      	movs	r0, #0
    2822:	e761      	b.n	26e8 <_Z15ee_buffer_parsePc+0x10>
    2824:	000686bc 	.word	0x000686bc
    2828:	000686c0 	.word	0x000686c0
    282c:	000686f0 	.word	0x000686f0
    2830:	200004fc 	.word	0x200004fc
    2834:	200004f8 	.word	0x200004f8
    2838:	00068754 	.word	0x00068754
    283c:	000686c4 	.word	0x000686c4
    2840:	000686f8 	.word	0x000686f8
    2844:	00068728 	.word	0x00068728
    2848:	00068784 	.word	0x00068784
    284c:	000687a0 	.word	0x000687a0
    2850:	000687a8 	.word	0x000687a8
    2854:	20000558 	.word	0x20000558
    2858:	000687b4 	.word	0x000687b4
    285c:	0006ba10 	.word	0x0006ba10
    2860:	000687b0 	.word	0x000687b0
    2864:	00068804 	.word	0x00068804
    2868:	000687bc 	.word	0x000687bc
    286c:	000687e4 	.word	0x000687e4

00002870 <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    2870:	b510      	push	{r4, lr}
    2872:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    2874:	2250      	movs	r2, #80	; 0x50
    2876:	493b      	ldr	r1, [pc, #236]	; (2964 <_Z16ee_profile_parsePc+0xf4>)
    2878:	f013 fd21 	bl	162be <strncmp>
    287c:	b948      	cbnz	r0, 2892 <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    287e:	493a      	ldr	r1, [pc, #232]	; (2968 <_Z16ee_profile_parsePc+0xf8>)
    2880:	483a      	ldr	r0, [pc, #232]	; (296c <_Z16ee_profile_parsePc+0xfc>)
    2882:	f00f f9d2 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    2886:	493a      	ldr	r1, [pc, #232]	; (2970 <_Z16ee_profile_parsePc+0x100>)
    2888:	483a      	ldr	r0, [pc, #232]	; (2974 <_Z16ee_profile_parsePc+0x104>)
    288a:	f00f f9ce 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    288e:	2000      	movs	r0, #0
}
    2890:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    2892:	2250      	movs	r2, #80	; 0x50
    2894:	4938      	ldr	r1, [pc, #224]	; (2978 <_Z16ee_profile_parsePc+0x108>)
    2896:	4620      	mov	r0, r4
    2898:	f013 fd11 	bl	162be <strncmp>
    289c:	bb30      	cbnz	r0, 28ec <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    289e:	4932      	ldr	r1, [pc, #200]	; (2968 <_Z16ee_profile_parsePc+0xf8>)
    28a0:	4836      	ldr	r0, [pc, #216]	; (297c <_Z16ee_profile_parsePc+0x10c>)
    28a2:	f00f f9c2 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("\r\n");
    28a6:	4836      	ldr	r0, [pc, #216]	; (2980 <_Z16ee_profile_parsePc+0x110>)
    28a8:	f00f f9bf 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    28ac:	4835      	ldr	r0, [pc, #212]	; (2984 <_Z16ee_profile_parsePc+0x114>)
    28ae:	f00f f9bc 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    28b2:	4835      	ldr	r0, [pc, #212]	; (2988 <_Z16ee_profile_parsePc+0x118>)
    28b4:	f00f f9b9 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    28b8:	4834      	ldr	r0, [pc, #208]	; (298c <_Z16ee_profile_parsePc+0x11c>)
    28ba:	f00f f9b6 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    28be:	4834      	ldr	r0, [pc, #208]	; (2990 <_Z16ee_profile_parsePc+0x120>)
    28c0:	f00f f9b3 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    28c4:	4833      	ldr	r0, [pc, #204]	; (2994 <_Z16ee_profile_parsePc+0x124>)
    28c6:	f00f f9b0 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    28ca:	4833      	ldr	r0, [pc, #204]	; (2998 <_Z16ee_profile_parsePc+0x128>)
    28cc:	f00f f9ad 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    28d0:	4832      	ldr	r0, [pc, #200]	; (299c <_Z16ee_profile_parsePc+0x12c>)
    28d2:	f00f f9aa 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    28d6:	4832      	ldr	r0, [pc, #200]	; (29a0 <_Z16ee_profile_parsePc+0x130>)
    28d8:	f00f f9a7 	bl	11c2a <_Z9th_printfPKcz>
    th_printf(
    28dc:	4831      	ldr	r0, [pc, #196]	; (29a4 <_Z16ee_profile_parsePc+0x134>)
    28de:	f00f f9a4 	bl	11c2a <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    28e2:	4831      	ldr	r0, [pc, #196]	; (29a8 <_Z16ee_profile_parsePc+0x138>)
    28e4:	f00f f9a1 	bl	11c2a <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    28e8:	2000      	movs	r0, #0
    28ea:	e7d1      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    28ec:	4620      	mov	r0, r4
    28ee:	f7ff fef3 	bl	26d8 <_Z15ee_buffer_parsePc>
    28f2:	2800      	cmp	r0, #0
    28f4:	d0cc      	beq.n	2890 <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    28f6:	2250      	movs	r2, #80	; 0x50
    28f8:	492c      	ldr	r1, [pc, #176]	; (29ac <_Z16ee_profile_parsePc+0x13c>)
    28fa:	4620      	mov	r0, r4
    28fc:	f013 fcdf 	bl	162be <strncmp>
    2900:	bb18      	cbnz	r0, 294a <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    2902:	492b      	ldr	r1, [pc, #172]	; (29b0 <_Z16ee_profile_parsePc+0x140>)
    2904:	f00e fcee 	bl	112e4 <strtok>
    if (p_next) {
    2908:	b1b0      	cbz	r0, 2938 <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    290a:	f013 fb62 	bl	15fd2 <atoi>
      if (i <= 0) {
    290e:	1e04      	subs	r4, r0, #0
    2910:	dd0d      	ble.n	292e <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    2912:	4927      	ldr	r1, [pc, #156]	; (29b0 <_Z16ee_profile_parsePc+0x140>)
    2914:	2000      	movs	r0, #0
    2916:	f00e fce5 	bl	112e4 <strtok>
      if (p_next) {
    291a:	b1a0      	cbz	r0, 2946 <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    291c:	f013 fb59 	bl	15fd2 <atoi>
        if (i < 0) {
    2920:	1e01      	subs	r1, r0, #0
    2922:	da0b      	bge.n	293c <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    2924:	4823      	ldr	r0, [pc, #140]	; (29b4 <_Z16ee_profile_parsePc+0x144>)
    2926:	f00f f980 	bl	11c2a <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    292a:	2000      	movs	r0, #0
    292c:	e7b0      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    292e:	4822      	ldr	r0, [pc, #136]	; (29b8 <_Z16ee_profile_parsePc+0x148>)
    2930:	f00f f97b 	bl	11c2a <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    2934:	2000      	movs	r0, #0
    2936:	e7ab      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2938:	210a      	movs	r1, #10
    size_t n = 1;
    293a:	2401      	movs	r4, #1
    ee_infer(n, w);
    293c:	4620      	mov	r0, r4
    293e:	f7ff fe99 	bl	2674 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    2942:	2000      	movs	r0, #0
    2944:	e7a4      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2946:	210a      	movs	r1, #10
    2948:	e7f8      	b.n	293c <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    294a:	2250      	movs	r2, #80	; 0x50
    294c:	491b      	ldr	r1, [pc, #108]	; (29bc <_Z16ee_profile_parsePc+0x14c>)
    294e:	4620      	mov	r0, r4
    2950:	f013 fcb5 	bl	162be <strncmp>
    2954:	b108      	cbz	r0, 295a <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    2956:	2001      	movs	r0, #1
    2958:	e79a      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    th_results();
    295a:	f000 f8c9 	bl	2af0 <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    295e:	2000      	movs	r0, #0
    2960:	e796      	b.n	2890 <_Z16ee_profile_parsePc+0x20>
    2962:	bf00      	nop
    2964:	00068814 	.word	0x00068814
    2968:	0006881c 	.word	0x0006881c
    296c:	00068840 	.word	0x00068840
    2970:	00068854 	.word	0x00068854
    2974:	0006885c 	.word	0x0006885c
    2978:	0006886c 	.word	0x0006886c
    297c:	00068874 	.word	0x00068874
    2980:	0006ba10 	.word	0x0006ba10
    2984:	0006887c 	.word	0x0006887c
    2988:	000688a4 	.word	0x000688a4
    298c:	000688d4 	.word	0x000688d4
    2990:	000688fc 	.word	0x000688fc
    2994:	00068930 	.word	0x00068930
    2998:	00068968 	.word	0x00068968
    299c:	000689a0 	.word	0x000689a0
    29a0:	000689bc 	.word	0x000689bc
    29a4:	000689ec 	.word	0x000689ec
    29a8:	00068a34 	.word	0x00068a34
    29ac:	00068a64 	.word	0x00068a64
    29b0:	000686c0 	.word	0x000686c0
    29b4:	00068a94 	.word	0x00068a94
    29b8:	00068a6c 	.word	0x00068a6c
    29bc:	00068ab8 	.word	0x00068ab8

000029c0 <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    29c0:	4b14      	ldr	r3, [pc, #80]	; (2a14 <_Z33ee_serial_command_parser_callbackPc+0x54>)
    29c2:	781b      	ldrb	r3, [r3, #0]
    29c4:	b903      	cbnz	r3, 29c8 <_Z33ee_serial_command_parser_callbackPc+0x8>
    29c6:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    29c8:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    29ca:	4913      	ldr	r1, [pc, #76]	; (2a18 <_Z33ee_serial_command_parser_callbackPc+0x58>)
    29cc:	f00e fc8a 	bl	112e4 <strtok>
    29d0:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    29d2:	2250      	movs	r2, #80	; 0x50
    29d4:	4911      	ldr	r1, [pc, #68]	; (2a1c <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    29d6:	f013 fc72 	bl	162be <strncmp>
    29da:	b940      	cbnz	r0, 29ee <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    29dc:	4a10      	ldr	r2, [pc, #64]	; (2a20 <_Z33ee_serial_command_parser_callbackPc+0x60>)
    29de:	4911      	ldr	r1, [pc, #68]	; (2a24 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    29e0:	4811      	ldr	r0, [pc, #68]	; (2a28 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    29e2:	f00f f922 	bl	11c2a <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    29e6:	4811      	ldr	r0, [pc, #68]	; (2a2c <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    29e8:	f00f f91f 	bl	11c2a <_Z9th_printfPKcz>
}
    29ec:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    29ee:	2250      	movs	r2, #80	; 0x50
    29f0:	490f      	ldr	r1, [pc, #60]	; (2a30 <_Z33ee_serial_command_parser_callbackPc+0x70>)
    29f2:	4620      	mov	r0, r4
    29f4:	f013 fc63 	bl	162be <strncmp>
    29f8:	b910      	cbnz	r0, 2a00 <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    29fa:	f000 f8b9 	bl	2b70 <_Z12th_timestampv>
    29fe:	e7f2      	b.n	29e6 <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    2a00:	4620      	mov	r0, r4
    2a02:	f7ff ff35 	bl	2870 <_Z16ee_profile_parsePc>
    2a06:	2800      	cmp	r0, #0
    2a08:	d0ed      	beq.n	29e6 <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    2a0a:	4621      	mov	r1, r4
    2a0c:	4809      	ldr	r0, [pc, #36]	; (2a34 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    2a0e:	f00f f90c 	bl	11c2a <_Z9th_printfPKcz>
    2a12:	e7e8      	b.n	29e6 <_Z33ee_serial_command_parser_callbackPc+0x26>
    2a14:	20020f2c 	.word	0x20020f2c
    2a18:	000686c0 	.word	0x000686c0
    2a1c:	00068ac0 	.word	0x00068ac0
    2a20:	00068ac8 	.word	0x00068ac8
    2a24:	00068ad4 	.word	0x00068ad4
    2a28:	00068ad8 	.word	0x00068ad8
    2a2c:	00068668 	.word	0x00068668
    2a30:	00068aec 	.word	0x00068aec
    2a34:	00068af8 	.word	0x00068af8

00002a38 <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    2a38:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    2a3a:	4b06      	ldr	r3, [pc, #24]	; (2a54 <_Z13ee_get_bufferPhj+0x1c>)
    2a3c:	681c      	ldr	r4, [r3, #0]
    2a3e:	428c      	cmp	r4, r1
    2a40:	d900      	bls.n	2a44 <_Z13ee_get_bufferPhj+0xc>
    2a42:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    2a44:	b118      	cbz	r0, 2a4e <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    2a46:	4622      	mov	r2, r4
    2a48:	4903      	ldr	r1, [pc, #12]	; (2a58 <_Z13ee_get_bufferPhj+0x20>)
    2a4a:	f013 fac6 	bl	15fda <memcpy>
  }
  return len;
}
    2a4e:	4620      	mov	r0, r4
    2a50:	bd10      	pop	{r4, pc}
    2a52:	bf00      	nop
    2a54:	200004f8 	.word	0x200004f8
    2a58:	20000558 	.word	0x20000558

00002a5c <_Z8th_inferv>:
  }
  th_printf("]\r\n");
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() { runner->Invoke(); }
    2a5c:	b510      	push	{r4, lr}
    2a5e:	4b06      	ldr	r3, [pc, #24]	; (2a78 <_Z8th_inferv+0x1c>)
    2a60:	681c      	ldr	r4, [r3, #0]
    interpreter_.AllocateTensors();
  }

  void Invoke() {
    // Run the model on this input and make sure it succeeds.
    TfLiteStatus invoke_status = interpreter_.Invoke();
    2a62:	f104 000c 	add.w	r0, r4, #12
    2a66:	f004 ff91 	bl	798c <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
    2a6a:	b900      	cbnz	r0, 2a6e <_Z8th_inferv+0x12>
    2a6c:	bd10      	pop	{r4, pc}
      TF_LITE_REPORT_ERROR(reporter_, "Invoke failed.");
    2a6e:	4903      	ldr	r1, [pc, #12]	; (2a7c <_Z8th_inferv+0x20>)
    2a70:	68a0      	ldr	r0, [r4, #8]
    2a72:	f011 f887 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2a76:	e7f9      	b.n	2a6c <_Z8th_inferv+0x10>
    2a78:	200072f4 	.word	0x200072f4
    2a7c:	00068b14 	.word	0x00068b14

00002a80 <_Z14th_load_tensorv>:
void th_load_tensor() {
    2a80:	b500      	push	{lr}
    2a82:	f5ad 4dd8 	sub.w	sp, sp, #27648	; 0x6c00
    2a86:	b081      	sub	sp, #4
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input),
    2a88:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    2a8c:	4668      	mov	r0, sp
    2a8e:	f7ff ffd3 	bl	2a38 <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(int8_t) != kVwwInputSize) {
    2a92:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
    2a96:	d109      	bne.n	2aac <_Z14th_load_tensorv+0x2c>
  for (int i = 0; i < bytes; i++) {
    2a98:	2300      	movs	r3, #0
    2a9a:	4283      	cmp	r3, r0
    2a9c:	d211      	bcs.n	2ac2 <_Z14th_load_tensorv+0x42>
    input[i] -= 128;
    2a9e:	f81d 2003 	ldrb.w	r2, [sp, r3]
    2aa2:	3a80      	subs	r2, #128	; 0x80
    2aa4:	f80d 2003 	strb.w	r2, [sp, r3]
  for (int i = 0; i < bytes; i++) {
    2aa8:	3301      	adds	r3, #1
    2aaa:	e7f6      	b.n	2a9a <_Z14th_load_tensorv+0x1a>
    th_printf("Input db has %d elemented, expected %d\n",
    2aac:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    2ab0:	4601      	mov	r1, r0
    2ab2:	480d      	ldr	r0, [pc, #52]	; (2ae8 <_Z14th_load_tensorv+0x68>)
    2ab4:	f00f f8b9 	bl	11c2a <_Z9th_printfPKcz>
}
    2ab8:	f50d 4dd8 	add.w	sp, sp, #27648	; 0x6c00
    2abc:	b001      	add	sp, #4
    2abe:	f85d fb04 	ldr.w	pc, [sp], #4
  runner->SetInput(input);
    2ac2:	4b0a      	ldr	r3, [pc, #40]	; (2aec <_Z14th_load_tensorv+0x6c>)
    2ac4:	6818      	ldr	r0, [r3, #0]
    }
  }

  void SetInput(const inputT* custom_input) {
    // Populate input tensor with an image with no person.
    TfLiteTensor* input = interpreter_.input(0);
    2ac6:	2100      	movs	r1, #0
    2ac8:	300c      	adds	r0, #12
    2aca:	f004 f9dd 	bl	6e88 <_ZN6tflite16MicroInterpreter5inputEj>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2ace:	4603      	mov	r3, r0
    2ad0:	b100      	cbz	r0, 2ad4 <_Z14th_load_tensorv+0x54>
    2ad2:	6840      	ldr	r0, [r0, #4]
    inputT* input_buffer = tflite::GetTensorData<inputT>(input);
    int input_length = input->bytes / sizeof(inputT);
    2ad4:	6999      	ldr	r1, [r3, #24]
    for (int i = 0; i < input_length; i++) {
    2ad6:	2300      	movs	r3, #0
    2ad8:	4299      	cmp	r1, r3
    2ada:	dded      	ble.n	2ab8 <_Z14th_load_tensorv+0x38>
      input_buffer[i] = custom_input[i];
    2adc:	f91d 2003 	ldrsb.w	r2, [sp, r3]
    2ae0:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < input_length; i++) {
    2ae2:	3301      	adds	r3, #1
    2ae4:	e7f8      	b.n	2ad8 <_Z14th_load_tensorv+0x58>
    2ae6:	bf00      	nop
    2ae8:	00068b24 	.word	0x00068b24
    2aec:	200072f4 	.word	0x200072f4

00002af0 <_Z10th_resultsv>:
void th_results() {
    2af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  th_printf("m-results-[");
    2af2:	481a      	ldr	r0, [pc, #104]	; (2b5c <_Z10th_resultsv+0x6c>)
    2af4:	f00f f899 	bl	11c2a <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2af8:	2400      	movs	r4, #0
    2afa:	e01e      	b.n	2b3a <_Z10th_resultsv+0x4a>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2afc:	571f      	ldrsb	r7, [r3, r4]
    2afe:	4d18      	ldr	r5, [pc, #96]	; (2b60 <_Z10th_resultsv+0x70>)
    2b00:	6828      	ldr	r0, [r5, #0]

  int input_size() { return interpreter_.input(0)->bytes / sizeof(inputT); }

  int output_size() { return interpreter_.output(0)->bytes / sizeof(outputT); }

  float output_scale() { return interpreter_.output(0)->params.scale; }
    2b02:	2100      	movs	r1, #0
    2b04:	300c      	adds	r0, #12
    2b06:	f004 f963 	bl	6dd0 <_ZN6tflite16MicroInterpreter6outputEj>
    2b0a:	68c6      	ldr	r6, [r0, #12]
    2b0c:	6828      	ldr	r0, [r5, #0]

  int output_zero_point() { return interpreter_.output(0)->params.zero_point; }
    2b0e:	2100      	movs	r1, #0
    2b10:	300c      	adds	r0, #12
    2b12:	f004 f95d 	bl	6dd0 <_ZN6tflite16MicroInterpreter6outputEj>
    2b16:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2b18:	1a38      	subs	r0, r7, r0
    2b1a:	f7fe f8c9 	bl	cb0 <__aeabi_i2f>
    2b1e:	4631      	mov	r1, r6
    2b20:	f7fe f91a 	bl	d58 <__aeabi_fmul>
    th_printf("%0.3f", converted);
    2b24:	f7fd fca0 	bl	468 <__aeabi_f2d>
    2b28:	4602      	mov	r2, r0
    2b2a:	460b      	mov	r3, r1
    2b2c:	480d      	ldr	r0, [pc, #52]	; (2b64 <_Z10th_resultsv+0x74>)
    2b2e:	f00f f87c 	bl	11c2a <_Z9th_printfPKcz>
      th_printf(",");
    2b32:	480d      	ldr	r0, [pc, #52]	; (2b68 <_Z10th_resultsv+0x78>)
    2b34:	f00f f879 	bl	11c2a <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2b38:	3401      	adds	r4, #1
    2b3a:	2c01      	cmp	r4, #1
    2b3c:	d80a      	bhi.n	2b54 <_Z10th_resultsv+0x64>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2b3e:	4b08      	ldr	r3, [pc, #32]	; (2b60 <_Z10th_resultsv+0x70>)
    2b40:	6818      	ldr	r0, [r3, #0]
    return tflite::GetTensorData<outputT>(interpreter_.output(0));
    2b42:	2100      	movs	r1, #0
    2b44:	300c      	adds	r0, #12
    2b46:	f004 f943 	bl	6dd0 <_ZN6tflite16MicroInterpreter6outputEj>
    2b4a:	4603      	mov	r3, r0
    2b4c:	2800      	cmp	r0, #0
    2b4e:	d0d5      	beq.n	2afc <_Z10th_resultsv+0xc>
    2b50:	6843      	ldr	r3, [r0, #4]
    2b52:	e7d3      	b.n	2afc <_Z10th_resultsv+0xc>
  th_printf("]\r\n");
    2b54:	4805      	ldr	r0, [pc, #20]	; (2b6c <_Z10th_resultsv+0x7c>)
    2b56:	f00f f868 	bl	11c2a <_Z9th_printfPKcz>
}
    2b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b5c:	00068b4c 	.word	0x00068b4c
    2b60:	200072f4 	.word	0x200072f4
    2b64:	00068b58 	.word	0x00068b58
    2b68:	00068b60 	.word	0x00068b60
    2b6c:	000689b8 	.word	0x000689b8

00002b70 <_Z12th_timestampv>:

void th_serialport_initialize(void) {

}

void th_timestamp(void) {
    2b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b72:	f013 f9fd 	bl	15f70 <z_impl_k_uptime_ticks>
/* Step 3. Release driver */
       g_timestampPin = 1;

/* USER CODE 1 END */
#else
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b76:	014e      	lsls	r6, r1, #5
    2b78:	0143      	lsls	r3, r0, #5
    2b7a:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    2b7e:	1a1b      	subs	r3, r3, r0
    2b80:	eb62 0201 	sbc.w	r2, r2, r1
    2b84:	0256      	lsls	r6, r2, #9
    2b86:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    2b8a:	025f      	lsls	r7, r3, #9
    2b8c:	4632      	mov	r2, r6
    2b8e:	183b      	adds	r3, r7, r0
    2b90:	eb41 0202 	adc.w	r2, r1, r2
    2b94:	0197      	lsls	r7, r2, #6
    2b96:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
    2b9a:	019e      	lsls	r6, r3, #6
    2b9c:	1af3      	subs	r3, r6, r3
    2b9e:	eb67 0202 	sbc.w	r2, r7, r2
    2ba2:	181c      	adds	r4, r3, r0
    2ba4:	eb42 0501 	adc.w	r5, r2, r1
    2ba8:	4623      	mov	r3, r4
    2baa:	4629      	mov	r1, r5
    2bac:	2c00      	cmp	r4, #0
    2bae:	f175 0200 	sbcs.w	r2, r5, #0
    2bb2:	db06      	blt.n	2bc2 <_Z12th_timestampv+0x52>
    2bb4:	0bdb      	lsrs	r3, r3, #15
       unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    2bb6:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
    2bba:	4806      	ldr	r0, [pc, #24]	; (2bd4 <_Z12th_timestampv+0x64>)
    2bbc:	f00f f835 	bl	11c2a <_Z9th_printfPKcz>
#endif
}
    2bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2bc2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    2bc6:	18e3      	adds	r3, r4, r3
    2bc8:	f04f 0100 	mov.w	r1, #0
    2bcc:	eb45 0101 	adc.w	r1, r5, r1
    2bd0:	e7f0      	b.n	2bb4 <_Z12th_timestampv+0x44>
    2bd2:	bf00      	nop
    2bd4:	00068b64 	.word	0x00068b64

00002bd8 <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2bd8:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2bda:	4803      	ldr	r0, [pc, #12]	; (2be8 <_Z23th_timestamp_initializev+0x10>)
    2bdc:	f00f f825 	bl	11c2a <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    2be0:	f7ff ffc6 	bl	2b70 <_Z12th_timestampv>
}
    2be4:	bd08      	pop	{r3, pc}
    2be6:	bf00      	nop
    2be8:	00068b74 	.word	0x00068b74

00002bec <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroMutableOpResolver<6> resolver;
    2bf0:	4bb0      	ldr	r3, [pc, #704]	; (2eb4 <_Z19th_final_initializev+0x2c8>)
    2bf2:	681b      	ldr	r3, [r3, #0]
    2bf4:	f013 0f01 	tst.w	r3, #1
    2bf8:	d012      	beq.n	2c20 <_Z19th_final_initializev+0x34>
  resolver.AddFullyConnected();
    2bfa:	a804      	add	r0, sp, #16
    2bfc:	f009 fbfa 	bl	c3f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    2c00:	48ad      	ldr	r0, [pc, #692]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2c02:	6803      	ldr	r3, [r0, #0]
    2c04:	699b      	ldr	r3, [r3, #24]
    2c06:	2109      	movs	r1, #9
    2c08:	4798      	blx	r3
    2c0a:	b1d8      	cbz	r0, 2c44 <_Z19th_final_initializev+0x58>
      if (error_reporter_ != nullptr) {
    2c0c:	4baa      	ldr	r3, [pc, #680]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2c0e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2c12:	2800      	cmp	r0, #0
    2c14:	d03a      	beq.n	2c8c <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c16:	2209      	movs	r2, #9
    2c18:	49a8      	ldr	r1, [pc, #672]	; (2ebc <_Z19th_final_initializev+0x2d0>)
    2c1a:	f010 ffb3 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    2c1e:	e035      	b.n	2c8c <_Z19th_final_initializev+0xa0>
      : error_reporter_(error_reporter) {}
    2c20:	48a5      	ldr	r0, [pc, #660]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2c22:	4ba7      	ldr	r3, [pc, #668]	; (2ec0 <_Z19th_final_initializev+0x2d4>)
    2c24:	6003      	str	r3, [r0, #0]
    2c26:	2300      	movs	r3, #0
    2c28:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
    2c2c:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    2c30:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  static tflite::MicroMutableOpResolver<6> resolver;
    2c34:	4b9f      	ldr	r3, [pc, #636]	; (2eb4 <_Z19th_final_initializev+0x2c8>)
    2c36:	2201      	movs	r2, #1
    2c38:	601a      	str	r2, [r3, #0]
    2c3a:	4aa2      	ldr	r2, [pc, #648]	; (2ec4 <_Z19th_final_initializev+0x2d8>)
    2c3c:	49a2      	ldr	r1, [pc, #648]	; (2ec8 <_Z19th_final_initializev+0x2dc>)
    2c3e:	f00f fc97 	bl	12570 <__aeabi_atexit>
    2c42:	e7da      	b.n	2bfa <_Z19th_final_initializev+0xe>
    }

    if (registrations_len_ >= tOpCount) {
    2c44:	4b9c      	ldr	r3, [pc, #624]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2c46:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2c4a:	2e05      	cmp	r6, #5
    2c4c:	d830      	bhi.n	2cb0 <_Z19th_final_initializev+0xc4>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    2c4e:	4f9a      	ldr	r7, [pc, #616]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2c50:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2c54:	f10c 0404 	add.w	r4, ip, #4
    2c58:	ad04      	add	r5, sp, #16
    2c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    2c66:	2209      	movs	r2, #9
    2c68:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2c6c:	3601      	adds	r6, #1
    2c6e:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4

    builtin_codes_[num_buitin_ops_] = op;
    2c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2c76:	18f9      	adds	r1, r7, r3
    2c78:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2c7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2c80:	4992      	ldr	r1, [pc, #584]	; (2ecc <_Z19th_final_initializev+0x2e0>)
    2c82:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2c86:	3301      	adds	r3, #1
    2c88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  resolver.AddConv2D();
    2c8c:	a804      	add	r0, sp, #16
    2c8e:	f007 fe1d 	bl	a8cc <_ZN6tflite16Register_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2c92:	4889      	ldr	r0, [pc, #548]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2c94:	6803      	ldr	r3, [r0, #0]
    2c96:	699b      	ldr	r3, [r3, #24]
    2c98:	2103      	movs	r1, #3
    2c9a:	4798      	blx	r3
    2c9c:	b190      	cbz	r0, 2cc4 <_Z19th_final_initializev+0xd8>
      if (error_reporter_ != nullptr) {
    2c9e:	4b86      	ldr	r3, [pc, #536]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2ca0:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2ca4:	b390      	cbz	r0, 2d0c <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ca6:	2203      	movs	r2, #3
    2ca8:	4984      	ldr	r1, [pc, #528]	; (2ebc <_Z19th_final_initializev+0x2d0>)
    2caa:	f010 ff6b 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cae:	e02d      	b.n	2d0c <_Z19th_final_initializev+0x120>
      if (error_reporter_) {
    2cb0:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2cb4:	2800      	cmp	r0, #0
    2cb6:	d0e9      	beq.n	2c8c <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cb8:	2306      	movs	r3, #6
    2cba:	2209      	movs	r2, #9
    2cbc:	4984      	ldr	r1, [pc, #528]	; (2ed0 <_Z19th_final_initializev+0x2e4>)
    2cbe:	f010 ff61 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cc2:	e7e3      	b.n	2c8c <_Z19th_final_initializev+0xa0>
    if (registrations_len_ >= tOpCount) {
    2cc4:	4b7c      	ldr	r3, [pc, #496]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2cc6:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2cca:	2e05      	cmp	r6, #5
    2ccc:	d830      	bhi.n	2d30 <_Z19th_final_initializev+0x144>
    registrations_[registrations_len_] = registration;
    2cce:	4f7a      	ldr	r7, [pc, #488]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2cd0:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2cd4:	f10c 0404 	add.w	r4, ip, #4
    2cd8:	ad04      	add	r5, sp, #16
    2cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2ce6:	2203      	movs	r2, #3
    2ce8:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2cec:	3601      	adds	r6, #1
    2cee:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2cf6:	18f9      	adds	r1, r7, r3
    2cf8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2cfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2d00:	4974      	ldr	r1, [pc, #464]	; (2ed4 <_Z19th_final_initializev+0x2e8>)
    2d02:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d06:	3301      	adds	r3, #1
    2d08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    2d0c:	a804      	add	r0, sp, #16
    2d0e:	f008 fcab 	bl	b668 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2d12:	4869      	ldr	r0, [pc, #420]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2d14:	6803      	ldr	r3, [r0, #0]
    2d16:	699b      	ldr	r3, [r3, #24]
    2d18:	2104      	movs	r1, #4
    2d1a:	4798      	blx	r3
    2d1c:	b190      	cbz	r0, 2d44 <_Z19th_final_initializev+0x158>
      if (error_reporter_ != nullptr) {
    2d1e:	4b66      	ldr	r3, [pc, #408]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2d20:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2d24:	b390      	cbz	r0, 2d8c <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d26:	2204      	movs	r2, #4
    2d28:	4964      	ldr	r1, [pc, #400]	; (2ebc <_Z19th_final_initializev+0x2d0>)
    2d2a:	f010 ff2b 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d2e:	e02d      	b.n	2d8c <_Z19th_final_initializev+0x1a0>
      if (error_reporter_) {
    2d30:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2d34:	2800      	cmp	r0, #0
    2d36:	d0e9      	beq.n	2d0c <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d38:	2306      	movs	r3, #6
    2d3a:	2203      	movs	r2, #3
    2d3c:	4964      	ldr	r1, [pc, #400]	; (2ed0 <_Z19th_final_initializev+0x2e4>)
    2d3e:	f010 ff21 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d42:	e7e3      	b.n	2d0c <_Z19th_final_initializev+0x120>
    if (registrations_len_ >= tOpCount) {
    2d44:	4b5c      	ldr	r3, [pc, #368]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2d46:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2d4a:	2e05      	cmp	r6, #5
    2d4c:	d830      	bhi.n	2db0 <_Z19th_final_initializev+0x1c4>
    registrations_[registrations_len_] = registration;
    2d4e:	4f5a      	ldr	r7, [pc, #360]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2d50:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2d54:	f10c 0404 	add.w	r4, ip, #4
    2d58:	ad04      	add	r5, sp, #16
    2d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2d66:	2204      	movs	r2, #4
    2d68:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d6c:	3601      	adds	r6, #1
    2d6e:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2d72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2d76:	18f9      	adds	r1, r7, r3
    2d78:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2d80:	4955      	ldr	r1, [pc, #340]	; (2ed8 <_Z19th_final_initializev+0x2ec>)
    2d82:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d86:	3301      	adds	r3, #1
    2d88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    2d8c:	a804      	add	r0, sp, #16
    2d8e:	f00a fd47 	bl	d820 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    if (FindOp(op) != nullptr) {
    2d92:	4849      	ldr	r0, [pc, #292]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2d94:	6803      	ldr	r3, [r0, #0]
    2d96:	699b      	ldr	r3, [r3, #24]
    2d98:	2116      	movs	r1, #22
    2d9a:	4798      	blx	r3
    2d9c:	b190      	cbz	r0, 2dc4 <_Z19th_final_initializev+0x1d8>
      if (error_reporter_ != nullptr) {
    2d9e:	4b46      	ldr	r3, [pc, #280]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2da0:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2da4:	b390      	cbz	r0, 2e0c <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2da6:	2216      	movs	r2, #22
    2da8:	4944      	ldr	r1, [pc, #272]	; (2ebc <_Z19th_final_initializev+0x2d0>)
    2daa:	f010 feeb 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dae:	e02d      	b.n	2e0c <_Z19th_final_initializev+0x220>
      if (error_reporter_) {
    2db0:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2db4:	2800      	cmp	r0, #0
    2db6:	d0e9      	beq.n	2d8c <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2db8:	2306      	movs	r3, #6
    2dba:	2204      	movs	r2, #4
    2dbc:	4944      	ldr	r1, [pc, #272]	; (2ed0 <_Z19th_final_initializev+0x2e4>)
    2dbe:	f010 fee1 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dc2:	e7e3      	b.n	2d8c <_Z19th_final_initializev+0x1a0>
    if (registrations_len_ >= tOpCount) {
    2dc4:	4b3c      	ldr	r3, [pc, #240]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2dc6:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2dca:	2e05      	cmp	r6, #5
    2dcc:	d830      	bhi.n	2e30 <_Z19th_final_initializev+0x244>
    registrations_[registrations_len_] = registration;
    2dce:	4f3a      	ldr	r7, [pc, #232]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2dd0:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2dd4:	f10c 0404 	add.w	r4, ip, #4
    2dd8:	ad04      	add	r5, sp, #16
    2dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2dde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2de6:	2216      	movs	r2, #22
    2de8:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2dec:	3601      	adds	r6, #1
    2dee:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2df6:	18f9      	adds	r1, r7, r3
    2df8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2dfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2e00:	4936      	ldr	r1, [pc, #216]	; (2edc <_Z19th_final_initializev+0x2f0>)
    2e02:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e06:	3301      	adds	r3, #1
    2e08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  resolver.AddSoftmax();
    2e0c:	a804      	add	r0, sp, #16
    2e0e:	f00a fd17 	bl	d840 <_ZN6tflite16Register_SOFTMAXEv>
    if (FindOp(op) != nullptr) {
    2e12:	4829      	ldr	r0, [pc, #164]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2e14:	6803      	ldr	r3, [r0, #0]
    2e16:	699b      	ldr	r3, [r3, #24]
    2e18:	2119      	movs	r1, #25
    2e1a:	4798      	blx	r3
    2e1c:	b190      	cbz	r0, 2e44 <_Z19th_final_initializev+0x258>
      if (error_reporter_ != nullptr) {
    2e1e:	4b26      	ldr	r3, [pc, #152]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2e20:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2e24:	b390      	cbz	r0, 2e8c <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e26:	2219      	movs	r2, #25
    2e28:	4924      	ldr	r1, [pc, #144]	; (2ebc <_Z19th_final_initializev+0x2d0>)
    2e2a:	f010 feab 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e2e:	e02d      	b.n	2e8c <_Z19th_final_initializev+0x2a0>
      if (error_reporter_) {
    2e30:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2e34:	2800      	cmp	r0, #0
    2e36:	d0e9      	beq.n	2e0c <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e38:	2306      	movs	r3, #6
    2e3a:	2216      	movs	r2, #22
    2e3c:	4924      	ldr	r1, [pc, #144]	; (2ed0 <_Z19th_final_initializev+0x2e4>)
    2e3e:	f010 fea1 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e42:	e7e3      	b.n	2e0c <_Z19th_final_initializev+0x220>
    if (registrations_len_ >= tOpCount) {
    2e44:	4b1c      	ldr	r3, [pc, #112]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2e46:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2e4a:	2e05      	cmp	r6, #5
    2e4c:	d84a      	bhi.n	2ee4 <_Z19th_final_initializev+0x2f8>
    registrations_[registrations_len_] = registration;
    2e4e:	4f1a      	ldr	r7, [pc, #104]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2e50:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2e54:	f10c 0404 	add.w	r4, ip, #4
    2e58:	ad04      	add	r5, sp, #16
    2e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2e66:	2219      	movs	r2, #25
    2e68:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2e6c:	3601      	adds	r6, #1
    2e6e:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2e76:	18f9      	adds	r1, r7, r3
    2e78:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2e7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2e80:	4917      	ldr	r1, [pc, #92]	; (2ee0 <_Z19th_final_initializev+0x2f4>)
    2e82:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e86:	3301      	adds	r3, #1
    2e88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    2e8c:	a804      	add	r0, sp, #16
    2e8e:	f00a fb4b 	bl	d528 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    if (FindOp(op) != nullptr) {
    2e92:	4809      	ldr	r0, [pc, #36]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2e94:	6803      	ldr	r3, [r0, #0]
    2e96:	699b      	ldr	r3, [r3, #24]
    2e98:	2101      	movs	r1, #1
    2e9a:	4798      	blx	r3
    2e9c:	b360      	cbz	r0, 2ef8 <_Z19th_final_initializev+0x30c>
      if (error_reporter_ != nullptr) {
    2e9e:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <_Z19th_final_initializev+0x2cc>)
    2ea0:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2ea4:	2800      	cmp	r0, #0
    2ea6:	d04b      	beq.n	2f40 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ea8:	2201      	movs	r2, #1
    2eaa:	4904      	ldr	r1, [pc, #16]	; (2ebc <_Z19th_final_initializev+0x2d0>)
    2eac:	f010 fe6a 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2eb0:	e046      	b.n	2f40 <_Z19th_final_initializev+0x354>
    2eb2:	bf00      	nop
    2eb4:	2000715c 	.word	0x2000715c
    2eb8:	20007204 	.word	0x20007204
    2ebc:	00068b94 	.word	0x00068b94
    2ec0:	00068c30 	.word	0x00068c30
    2ec4:	2002035c 	.word	0x2002035c
    2ec8:	00011b8d 	.word	0x00011b8d
    2ecc:	00009d21 	.word	0x00009d21
    2ed0:	00068be4 	.word	0x00068be4
    2ed4:	00009b25 	.word	0x00009b25
    2ed8:	00009ed1 	.word	0x00009ed1
    2edc:	00009805 	.word	0x00009805
    2ee0:	0000a105 	.word	0x0000a105
      if (error_reporter_) {
    2ee4:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2ee8:	2800      	cmp	r0, #0
    2eea:	d0cf      	beq.n	2e8c <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2eec:	2306      	movs	r3, #6
    2eee:	2219      	movs	r2, #25
    2ef0:	492f      	ldr	r1, [pc, #188]	; (2fb0 <_Z19th_final_initializev+0x3c4>)
    2ef2:	f010 fe47 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2ef6:	e7c9      	b.n	2e8c <_Z19th_final_initializev+0x2a0>
    if (registrations_len_ >= tOpCount) {
    2ef8:	4b2e      	ldr	r3, [pc, #184]	; (2fb4 <_Z19th_final_initializev+0x3c8>)
    2efa:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2efe:	2e05      	cmp	r6, #5
    2f00:	d828      	bhi.n	2f54 <_Z19th_final_initializev+0x368>
    registrations_[registrations_len_] = registration;
    2f02:	4f2c      	ldr	r7, [pc, #176]	; (2fb4 <_Z19th_final_initializev+0x3c8>)
    2f04:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2f08:	f10c 0404 	add.w	r4, ip, #4
    2f0c:	ad04      	add	r5, sp, #16
    2f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2f1a:	2201      	movs	r2, #1
    2f1c:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2f20:	4416      	add	r6, r2
    2f22:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2f26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2f2a:	18f9      	adds	r1, r7, r3
    2f2c:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2f30:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2f34:	4920      	ldr	r1, [pc, #128]	; (2fb8 <_Z19th_final_initializev+0x3cc>)
    2f36:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2f3a:	3301      	adds	r3, #1
    2f3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      g_person_detect_model_data, resolver, tensor_arena, kTensorArenaSize);
    2f40:	4b1e      	ldr	r3, [pc, #120]	; (2fbc <_Z19th_final_initializev+0x3d0>)
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	f013 0f01 	tst.w	r3, #1
    2f48:	d00e      	beq.n	2f68 <_Z19th_final_initializev+0x37c>
  runner = &model_runner;
    2f4a:	4b1d      	ldr	r3, [pc, #116]	; (2fc0 <_Z19th_final_initializev+0x3d4>)
    2f4c:	4a1d      	ldr	r2, [pc, #116]	; (2fc4 <_Z19th_final_initializev+0x3d8>)
    2f4e:	601a      	str	r2, [r3, #0]
}
    2f50:	b00d      	add	sp, #52	; 0x34
    2f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (error_reporter_) {
    2f54:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2f58:	2800      	cmp	r0, #0
    2f5a:	d0f1      	beq.n	2f40 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f5c:	2306      	movs	r3, #6
    2f5e:	2201      	movs	r2, #1
    2f60:	4913      	ldr	r1, [pc, #76]	; (2fb0 <_Z19th_final_initializev+0x3c4>)
    2f62:	f010 fe0f 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f66:	e7eb      	b.n	2f40 <_Z19th_final_initializev+0x354>
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    2f68:	4817      	ldr	r0, [pc, #92]	; (2fc8 <_Z19th_final_initializev+0x3dc>)
    2f6a:	f00e fe84 	bl	11c76 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    2f6e:	4601      	mov	r1, r0
                     reporter_) {
    2f70:	4c14      	ldr	r4, [pc, #80]	; (2fc4 <_Z19th_final_initializev+0x3d8>)
    2f72:	6020      	str	r0, [r4, #0]
namespace tflite {

// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
    2f74:	4623      	mov	r3, r4
    2f76:	4a15      	ldr	r2, [pc, #84]	; (2fcc <_Z19th_final_initializev+0x3e0>)
    2f78:	f843 2f04 	str.w	r2, [r3, #4]!
    2f7c:	60a3      	str	r3, [r4, #8]
    2f7e:	f104 050c 	add.w	r5, r4, #12
    2f82:	2200      	movs	r2, #0
    2f84:	9202      	str	r2, [sp, #8]
    2f86:	9301      	str	r3, [sp, #4]
    2f88:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
    2f8c:	9300      	str	r3, [sp, #0]
    2f8e:	4b10      	ldr	r3, [pc, #64]	; (2fd0 <_Z19th_final_initializev+0x3e4>)
    2f90:	4a08      	ldr	r2, [pc, #32]	; (2fb4 <_Z19th_final_initializev+0x3c8>)
    2f92:	4628      	mov	r0, r5
    2f94:	f010 fa5b 	bl	1344e <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    interpreter_.AllocateTensors();
    2f98:	4628      	mov	r0, r5
    2f9a:	f004 f9df 	bl	735c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
      g_person_detect_model_data, resolver, tensor_arena, kTensorArenaSize);
    2f9e:	4b07      	ldr	r3, [pc, #28]	; (2fbc <_Z19th_final_initializev+0x3d0>)
    2fa0:	2201      	movs	r2, #1
    2fa2:	601a      	str	r2, [r3, #0]
    2fa4:	4a0b      	ldr	r2, [pc, #44]	; (2fd4 <_Z19th_final_initializev+0x3e8>)
    2fa6:	490c      	ldr	r1, [pc, #48]	; (2fd8 <_Z19th_final_initializev+0x3ec>)
    2fa8:	4620      	mov	r0, r4
    2faa:	f00f fae1 	bl	12570 <__aeabi_atexit>
    2fae:	e7cc      	b.n	2f4a <_Z19th_final_initializev+0x35e>
    2fb0:	00068be4 	.word	0x00068be4
    2fb4:	20007204 	.word	0x20007204
    2fb8:	0000992d 	.word	0x0000992d
    2fbc:	20007158 	.word	0x20007158
    2fc0:	200072f4 	.word	0x200072f4
    2fc4:	20007160 	.word	0x20007160
    2fc8:	00016e90 	.word	0x00016e90
    2fcc:	00068fec 	.word	0x00068fec
    2fd0:	200072f8 	.word	0x200072f8
    2fd4:	2002035c 	.word	0x2002035c
    2fd8:	00011b8f 	.word	0x00011b8f

00002fdc <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2fdc:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2fde:	680b      	ldr	r3, [r1, #0]
    2fe0:	3301      	adds	r3, #1
    2fe2:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2fe4:	4b01      	ldr	r3, [pc, #4]	; (2fec <char_out+0x10>)
    2fe6:	681b      	ldr	r3, [r3, #0]
    2fe8:	4798      	blx	r3
}
    2fea:	bd08      	pop	{r3, pc}
    2fec:	20000000 	.word	0x20000000

00002ff0 <__printk_hook_install>:
	_char_out = fn;
    2ff0:	4b01      	ldr	r3, [pc, #4]	; (2ff8 <__printk_hook_install+0x8>)
    2ff2:	6018      	str	r0, [r3, #0]
}
    2ff4:	4770      	bx	lr
    2ff6:	bf00      	nop
    2ff8:	20000000 	.word	0x20000000

00002ffc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2ffc:	b500      	push	{lr}
    2ffe:	b083      	sub	sp, #12
    3000:	4602      	mov	r2, r0
    3002:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3004:	2100      	movs	r1, #0
    3006:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    3008:	a901      	add	r1, sp, #4
    300a:	4803      	ldr	r0, [pc, #12]	; (3018 <vprintk+0x1c>)
    300c:	f000 f94e 	bl	32ac <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    3010:	b003      	add	sp, #12
    3012:	f85d fb04 	ldr.w	pc, [sp], #4
    3016:	bf00      	nop
    3018:	00002fdd 	.word	0x00002fdd

0000301c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    301c:	b510      	push	{r4, lr}
    301e:	b084      	sub	sp, #16
    3020:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3022:	9001      	str	r0, [sp, #4]
    3024:	9102      	str	r1, [sp, #8]
    3026:	2100      	movs	r1, #0
    3028:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    302a:	a901      	add	r1, sp, #4
    302c:	4805      	ldr	r0, [pc, #20]	; (3044 <vsnprintk+0x28>)
    302e:	f000 f93d 	bl	32ac <cbvprintf>

	if (ctx.count < ctx.max) {
    3032:	9b03      	ldr	r3, [sp, #12]
    3034:	9a02      	ldr	r2, [sp, #8]
    3036:	4293      	cmp	r3, r2
    3038:	da01      	bge.n	303e <vsnprintk+0x22>
		str[ctx.count] = '\0';
    303a:	2200      	movs	r2, #0
    303c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    303e:	9803      	ldr	r0, [sp, #12]
    3040:	b004      	add	sp, #16
    3042:	bd10      	pop	{r4, pc}
    3044:	00011ccb 	.word	0x00011ccb

00003048 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    304c:	b083      	sub	sp, #12
    304e:	4604      	mov	r4, r0
    3050:	4608      	mov	r0, r1
    3052:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3054:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3056:	f013 0f08 	tst.w	r3, #8
    305a:	d105      	bne.n	3068 <process_event+0x20>
    305c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3060:	2300      	movs	r3, #0
    3062:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3064:	9301      	str	r3, [sp, #4]
}
    3066:	e069      	b.n	313c <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    3068:	2901      	cmp	r1, #1
    306a:	d009      	beq.n	3080 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    306c:	f043 0320 	orr.w	r3, r3, #32
    3070:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3072:	f385 8811 	msr	BASEPRI, r5
    3076:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    307a:	b003      	add	sp, #12
    307c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3080:	f043 0310 	orr.w	r3, r3, #16
    3084:	83a3      	strh	r3, [r4, #28]
    3086:	e7f4      	b.n	3072 <process_event+0x2a>
			evt = process_recheck(mgr);
    3088:	4620      	mov	r0, r4
    308a:	f00e fe79 	bl	11d80 <process_recheck>
    308e:	e057      	b.n	3140 <process_event+0xf8>
			res = mgr->last_res;
    3090:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    3094:	464a      	mov	r2, r9
    3096:	4669      	mov	r1, sp
    3098:	4620      	mov	r0, r4
    309a:	f00e fe8a 	bl	11db2 <process_complete>
		onoff_transition_fn transit = NULL;
    309e:	2700      	movs	r7, #0
    30a0:	e05a      	b.n	3158 <process_event+0x110>
			transit = mgr->transitions->start;
    30a2:	6923      	ldr	r3, [r4, #16]
    30a4:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    30a6:	2106      	movs	r1, #6
    30a8:	4620      	mov	r0, r4
    30aa:	f00e fe42 	bl	11d32 <set_state>
		res = 0;
    30ae:	f04f 0900 	mov.w	r9, #0
    30b2:	e051      	b.n	3158 <process_event+0x110>
			transit = mgr->transitions->stop;
    30b4:	6923      	ldr	r3, [r4, #16]
    30b6:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    30b8:	2104      	movs	r1, #4
    30ba:	4620      	mov	r0, r4
    30bc:	f00e fe39 	bl	11d32 <set_state>
		res = 0;
    30c0:	f04f 0900 	mov.w	r9, #0
    30c4:	e048      	b.n	3158 <process_event+0x110>
			transit = mgr->transitions->reset;
    30c6:	6923      	ldr	r3, [r4, #16]
    30c8:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    30ca:	2105      	movs	r1, #5
    30cc:	4620      	mov	r0, r4
    30ce:	f00e fe30 	bl	11d32 <set_state>
		res = 0;
    30d2:	f04f 0900 	mov.w	r9, #0
    30d6:	e03f      	b.n	3158 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    30d8:	2200      	movs	r2, #0
    30da:	e046      	b.n	316a <process_event+0x122>
    30dc:	2200      	movs	r2, #0
    30de:	e044      	b.n	316a <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    30e0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    30e4:	83a3      	strh	r3, [r4, #28]
    30e6:	f385 8811 	msr	BASEPRI, r5
    30ea:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    30ee:	2900      	cmp	r1, #0
    30f0:	d144      	bne.n	317c <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    30f2:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    30f4:	b12b      	cbz	r3, 3102 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    30f6:	464b      	mov	r3, r9
    30f8:	4642      	mov	r2, r8
    30fa:	4669      	mov	r1, sp
    30fc:	4620      	mov	r0, r4
    30fe:	f00e fece 	bl	11e9e <notify_all>
			if (transit != NULL) {
    3102:	b117      	cbz	r7, 310a <process_event+0xc2>
				transit(mgr, transition_complete);
    3104:	4925      	ldr	r1, [pc, #148]	; (319c <process_event+0x154>)
    3106:	4620      	mov	r0, r4
    3108:	47b8      	blx	r7
	__asm__ volatile(
    310a:	f04f 0320 	mov.w	r3, #32
    310e:	f3ef 8511 	mrs	r5, BASEPRI
    3112:	f383 8812 	msr	BASEPRI_MAX, r3
    3116:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    311a:	8ba3      	ldrh	r3, [r4, #28]
    311c:	f023 0308 	bic.w	r3, r3, #8
    3120:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3122:	8ba3      	ldrh	r3, [r4, #28]
    3124:	f013 0f10 	tst.w	r3, #16
    3128:	d02e      	beq.n	3188 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    312a:	f023 0310 	bic.w	r3, r3, #16
    312e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3130:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3132:	8ba6      	ldrh	r6, [r4, #28]
    3134:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    3138:	2800      	cmp	r0, #0
    313a:	d09a      	beq.n	3072 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    313c:	2802      	cmp	r0, #2
    313e:	d0a3      	beq.n	3088 <process_event+0x40>
		if (evt == EVT_NOP) {
    3140:	2800      	cmp	r0, #0
    3142:	d096      	beq.n	3072 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    3144:	2801      	cmp	r0, #1
    3146:	d0a3      	beq.n	3090 <process_event+0x48>
		} else if (evt == EVT_START) {
    3148:	2803      	cmp	r0, #3
    314a:	d0aa      	beq.n	30a2 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    314c:	2804      	cmp	r0, #4
    314e:	d0b1      	beq.n	30b4 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    3150:	2805      	cmp	r0, #5
    3152:	d0b8      	beq.n	30c6 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    3154:	2700      	movs	r7, #0
		res = 0;
    3156:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3158:	8ba3      	ldrh	r3, [r4, #28]
    315a:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    315e:	45b0      	cmp	r8, r6
    3160:	d0ba      	beq.n	30d8 <process_event+0x90>
    3162:	68a2      	ldr	r2, [r4, #8]
    3164:	2a00      	cmp	r2, #0
    3166:	d0b9      	beq.n	30dc <process_event+0x94>
    3168:	2201      	movs	r2, #1
		if (do_monitors
    316a:	4611      	mov	r1, r2
    316c:	2a00      	cmp	r2, #0
    316e:	d1b7      	bne.n	30e0 <process_event+0x98>
    3170:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    3172:	2a00      	cmp	r2, #0
    3174:	d1b4      	bne.n	30e0 <process_event+0x98>
		    || (transit != NULL)) {
    3176:	2f00      	cmp	r7, #0
    3178:	d1b2      	bne.n	30e0 <process_event+0x98>
    317a:	e7d2      	b.n	3122 <process_event+0xda>
				notify_monitors(mgr, state, res);
    317c:	464a      	mov	r2, r9
    317e:	4641      	mov	r1, r8
    3180:	4620      	mov	r0, r4
    3182:	f00e fdde 	bl	11d42 <notify_monitors>
    3186:	e7b4      	b.n	30f2 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3188:	f013 0f20 	tst.w	r3, #32
    318c:	d004      	beq.n	3198 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    318e:	f023 0320 	bic.w	r3, r3, #32
    3192:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    3194:	2002      	movs	r0, #2
    3196:	e7cc      	b.n	3132 <process_event+0xea>
		evt = EVT_NOP;
    3198:	2000      	movs	r0, #0
    319a:	e7ca      	b.n	3132 <process_event+0xea>
    319c:	00011ecd 	.word	0x00011ecd

000031a0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    31a0:	b410      	push	{r4}
    31a2:	4604      	mov	r4, r0
	const char *sp = *str;
    31a4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    31a6:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    31a8:	7813      	ldrb	r3, [r2, #0]
    31aa:	4907      	ldr	r1, [pc, #28]	; (31c8 <extract_decimal+0x28>)
    31ac:	5c59      	ldrb	r1, [r3, r1]
    31ae:	f011 0f04 	tst.w	r1, #4
    31b2:	d006      	beq.n	31c2 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    31b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    31b8:	3201      	adds	r2, #1
    31ba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    31be:	3830      	subs	r0, #48	; 0x30
    31c0:	e7f2      	b.n	31a8 <extract_decimal+0x8>
	}
	*str = sp;
    31c2:	6022      	str	r2, [r4, #0]
	return val;
}
    31c4:	bc10      	pop	{r4}
    31c6:	4770      	bx	lr
    31c8:	0006bb01 	.word	0x0006bb01

000031cc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    31cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31d0:	b083      	sub	sp, #12
    31d2:	4604      	mov	r4, r0
    31d4:	460d      	mov	r5, r1
    31d6:	9201      	str	r2, [sp, #4]
    31d8:	469a      	mov	sl, r3
    31da:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    31de:	78d3      	ldrb	r3, [r2, #3]
    31e0:	4a31      	ldr	r2, [pc, #196]	; (32a8 <encode_uint+0xdc>)
    31e2:	f813 b002 	ldrb.w	fp, [r3, r2]
    31e6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    31ea:	2b6f      	cmp	r3, #111	; 0x6f
    31ec:	d00f      	beq.n	320e <encode_uint+0x42>
    31ee:	d906      	bls.n	31fe <encode_uint+0x32>
    31f0:	2b70      	cmp	r3, #112	; 0x70
    31f2:	d00f      	beq.n	3214 <encode_uint+0x48>
    31f4:	2b78      	cmp	r3, #120	; 0x78
    31f6:	d110      	bne.n	321a <encode_uint+0x4e>
		return 16;
    31f8:	f04f 0910 	mov.w	r9, #16
    31fc:	e023      	b.n	3246 <encode_uint+0x7a>
	switch (specifier) {
    31fe:	2b58      	cmp	r3, #88	; 0x58
    3200:	d002      	beq.n	3208 <encode_uint+0x3c>
    3202:	f04f 090a 	mov.w	r9, #10
    3206:	e01e      	b.n	3246 <encode_uint+0x7a>
		return 16;
    3208:	f04f 0910 	mov.w	r9, #16
    320c:	e01b      	b.n	3246 <encode_uint+0x7a>
		return 8;
    320e:	f04f 0908 	mov.w	r9, #8
    3212:	e018      	b.n	3246 <encode_uint+0x7a>
		return 16;
    3214:	f04f 0910 	mov.w	r9, #16
    3218:	e015      	b.n	3246 <encode_uint+0x7a>
	switch (specifier) {
    321a:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    321e:	e012      	b.n	3246 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    3220:	b2d2      	uxtb	r2, r2
    3222:	3230      	adds	r2, #48	; 0x30
    3224:	b2d2      	uxtb	r2, r2
    3226:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    322a:	4632      	mov	r2, r6
    322c:	463b      	mov	r3, r7
    322e:	4620      	mov	r0, r4
    3230:	4629      	mov	r1, r5
    3232:	f7fd ff7d 	bl	1130 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    3236:	42bd      	cmp	r5, r7
    3238:	bf08      	it	eq
    323a:	42b4      	cmpeq	r4, r6
    323c:	d318      	bcc.n	3270 <encode_uint+0xa4>
    323e:	45d0      	cmp	r8, sl
    3240:	d916      	bls.n	3270 <encode_uint+0xa4>
		value /= radix;
    3242:	4604      	mov	r4, r0
    3244:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    3246:	464e      	mov	r6, r9
    3248:	2700      	movs	r7, #0
    324a:	464a      	mov	r2, r9
    324c:	463b      	mov	r3, r7
    324e:	4620      	mov	r0, r4
    3250:	4629      	mov	r1, r5
    3252:	f7fd ff6d 	bl	1130 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3256:	2a09      	cmp	r2, #9
    3258:	d9e2      	bls.n	3220 <encode_uint+0x54>
    325a:	f1bb 0f01 	cmp.w	fp, #1
    325e:	d003      	beq.n	3268 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3260:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3262:	3257      	adds	r2, #87	; 0x57
    3264:	b2d2      	uxtb	r2, r2
    3266:	e7de      	b.n	3226 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3268:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    326a:	3237      	adds	r2, #55	; 0x37
    326c:	b2d2      	uxtb	r2, r2
    326e:	e7da      	b.n	3226 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3270:	9b01      	ldr	r3, [sp, #4]
    3272:	781b      	ldrb	r3, [r3, #0]
    3274:	f013 0f20 	tst.w	r3, #32
    3278:	d005      	beq.n	3286 <encode_uint+0xba>
		if (radix == 8) {
    327a:	f1b9 0f08 	cmp.w	r9, #8
    327e:	d006      	beq.n	328e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    3280:	f1b9 0f10 	cmp.w	r9, #16
    3284:	d009      	beq.n	329a <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    3286:	4640      	mov	r0, r8
    3288:	b003      	add	sp, #12
    328a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    328e:	9a01      	ldr	r2, [sp, #4]
    3290:	7893      	ldrb	r3, [r2, #2]
    3292:	f043 0308 	orr.w	r3, r3, #8
    3296:	7093      	strb	r3, [r2, #2]
    3298:	e7f5      	b.n	3286 <encode_uint+0xba>
			conv->altform_0c = true;
    329a:	9a01      	ldr	r2, [sp, #4]
    329c:	7893      	ldrb	r3, [r2, #2]
    329e:	f043 0310 	orr.w	r3, r3, #16
    32a2:	7093      	strb	r3, [r2, #2]
    32a4:	e7ef      	b.n	3286 <encode_uint+0xba>
    32a6:	bf00      	nop
    32a8:	0006bb01 	.word	0x0006bb01

000032ac <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    32ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32b0:	b093      	sub	sp, #76	; 0x4c
    32b2:	4606      	mov	r6, r0
    32b4:	460d      	mov	r5, r1
    32b6:	4692      	mov	sl, r2
    32b8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    32ba:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    32bc:	f89a 0000 	ldrb.w	r0, [sl]
    32c0:	2800      	cmp	r0, #0
    32c2:	f000 84d6 	beq.w	3c72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1da>
		if (*fp != '%') {
    32c6:	2825      	cmp	r0, #37	; 0x25
    32c8:	d008      	beq.n	32dc <cbvprintf+0x30>
			OUTC(*fp++);
    32ca:	f10a 0a01 	add.w	sl, sl, #1
    32ce:	4629      	mov	r1, r5
    32d0:	47b0      	blx	r6
    32d2:	2800      	cmp	r0, #0
    32d4:	f2c0 84ce 	blt.w	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    32d8:	3401      	adds	r4, #1
			continue;
    32da:	e7ef      	b.n	32bc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    32dc:	2300      	movs	r3, #0
    32de:	9306      	str	r3, [sp, #24]
    32e0:	9307      	str	r3, [sp, #28]
    32e2:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    32e4:	9308      	str	r3, [sp, #32]
    32e6:	9309      	str	r3, [sp, #36]	; 0x24
    32e8:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    32ea:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    32ee:	f89a 3001 	ldrb.w	r3, [sl, #1]
    32f2:	2b25      	cmp	r3, #37	; 0x25
    32f4:	d001      	beq.n	32fa <cbvprintf+0x4e>
	bool loop = true;
    32f6:	2701      	movs	r7, #1
    32f8:	e02c      	b.n	3354 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    32fa:	f10a 0802 	add.w	r8, sl, #2
    32fe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    3302:	e1a8      	b.n	3656 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    3304:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3308:	f043 0304 	orr.w	r3, r3, #4
    330c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    3310:	b1ff      	cbz	r7, 3352 <cbvprintf+0xa6>
			++sp;
    3312:	f108 0801 	add.w	r8, r8, #1
    3316:	e01c      	b.n	3352 <cbvprintf+0xa6>
			conv->flag_plus = true;
    3318:	f89d 3020 	ldrb.w	r3, [sp, #32]
    331c:	f043 0308 	orr.w	r3, r3, #8
    3320:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    3324:	e7f4      	b.n	3310 <cbvprintf+0x64>
			conv->flag_space = true;
    3326:	f89d 3020 	ldrb.w	r3, [sp, #32]
    332a:	f043 0310 	orr.w	r3, r3, #16
    332e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    3332:	e7ed      	b.n	3310 <cbvprintf+0x64>
			conv->flag_hash = true;
    3334:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3338:	f043 0320 	orr.w	r3, r3, #32
    333c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    3340:	e7e6      	b.n	3310 <cbvprintf+0x64>
			conv->flag_zero = true;
    3342:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    334a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    334e:	e7df      	b.n	3310 <cbvprintf+0x64>
		switch (*sp) {
    3350:	2700      	movs	r7, #0
	} while (loop);
    3352:	b34f      	cbz	r7, 33a8 <cbvprintf+0xfc>
		switch (*sp) {
    3354:	f898 3000 	ldrb.w	r3, [r8]
    3358:	3b20      	subs	r3, #32
    335a:	2b10      	cmp	r3, #16
    335c:	d8f8      	bhi.n	3350 <cbvprintf+0xa4>
    335e:	a201      	add	r2, pc, #4	; (adr r2, 3364 <cbvprintf+0xb8>)
    3360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3364:	00003327 	.word	0x00003327
    3368:	00003351 	.word	0x00003351
    336c:	00003351 	.word	0x00003351
    3370:	00003335 	.word	0x00003335
    3374:	00003351 	.word	0x00003351
    3378:	00003351 	.word	0x00003351
    337c:	00003351 	.word	0x00003351
    3380:	00003351 	.word	0x00003351
    3384:	00003351 	.word	0x00003351
    3388:	00003351 	.word	0x00003351
    338c:	00003351 	.word	0x00003351
    3390:	00003319 	.word	0x00003319
    3394:	00003351 	.word	0x00003351
    3398:	00003305 	.word	0x00003305
    339c:	00003351 	.word	0x00003351
    33a0:	00003351 	.word	0x00003351
    33a4:	00003343 	.word	0x00003343
	if (conv->flag_zero && conv->flag_dash) {
    33a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
    33b0:	2b44      	cmp	r3, #68	; 0x44
    33b2:	d06d      	beq.n	3490 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    33b4:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    33b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    33c0:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    33c4:	f898 3000 	ldrb.w	r3, [r8]
    33c8:	2b2a      	cmp	r3, #42	; 0x2a
    33ca:	d068      	beq.n	349e <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    33cc:	a805      	add	r0, sp, #20
    33ce:	f7ff fee7 	bl	31a0 <extract_decimal>
	if (sp != wp) {
    33d2:	9b05      	ldr	r3, [sp, #20]
    33d4:	4598      	cmp	r8, r3
    33d6:	d012      	beq.n	33fe <cbvprintf+0x152>
		conv->width_present = true;
    33d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    33e0:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    33e4:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    33e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    33ea:	2800      	cmp	r0, #0
    33ec:	db60      	blt.n	34b0 <cbvprintf+0x204>
    33ee:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    33f0:	4313      	orrs	r3, r2
    33f2:	f89d 2020 	ldrb.w	r2, [sp, #32]
    33f6:	f363 0241 	bfi	r2, r3, #1, #1
    33fa:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    33fe:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    3400:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    3402:	781b      	ldrb	r3, [r3, #0]
    3404:	2b2e      	cmp	r3, #46	; 0x2e
    3406:	bf14      	ite	ne
    3408:	2300      	movne	r3, #0
    340a:	2301      	moveq	r3, #1
    340c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    3410:	f363 0241 	bfi	r2, r3, #1, #1
    3414:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    3418:	2b00      	cmp	r3, #0
    341a:	d04b      	beq.n	34b4 <cbvprintf+0x208>
	++sp;
    341c:	9b05      	ldr	r3, [sp, #20]
    341e:	1c5a      	adds	r2, r3, #1
    3420:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    3422:	785b      	ldrb	r3, [r3, #1]
    3424:	2b2a      	cmp	r3, #42	; 0x2a
    3426:	d048      	beq.n	34ba <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    3428:	a805      	add	r0, sp, #20
    342a:	f7ff feb9 	bl	31a0 <extract_decimal>
	conv->prec_value = prec;
    342e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    3430:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3434:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    3438:	2800      	cmp	r0, #0
    343a:	db47      	blt.n	34cc <cbvprintf+0x220>
    343c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    343e:	4313      	orrs	r3, r2
    3440:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3444:	f363 0241 	bfi	r2, r3, #1, #1
    3448:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    344c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    3450:	f898 3000 	ldrb.w	r3, [r8]
    3454:	3b4c      	subs	r3, #76	; 0x4c
    3456:	2b2e      	cmp	r3, #46	; 0x2e
    3458:	f200 80dc 	bhi.w	3614 <cbvprintf+0x368>
    345c:	e8df f003 	tbb	[pc, r3]
    3460:	dadadaca 	.word	0xdadadaca
    3464:	dadadada 	.word	0xdadadada
    3468:	dadadada 	.word	0xdadadada
    346c:	dadadada 	.word	0xdadadada
    3470:	dadadada 	.word	0xdadadada
    3474:	dadadada 	.word	0xdadadada
    3478:	dadadada 	.word	0xdadadada
    347c:	da6ada38 	.word	0xda6ada38
    3480:	dadada51 	.word	0xdadada51
    3484:	dadadada 	.word	0xdadadada
    3488:	dadadac0 	.word	0xdadadac0
    348c:	dada      	.short	0xdada
    348e:	b6          	.byte	0xb6
    348f:	00          	.byte	0x00
		conv->flag_zero = false;
    3490:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3494:	f36f 1386 	bfc	r3, #6, #1
    3498:	f88d 3020 	strb.w	r3, [sp, #32]
    349c:	e78a      	b.n	33b4 <cbvprintf+0x108>
		conv->width_star = true;
    349e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34a2:	f043 0301 	orr.w	r3, r3, #1
    34a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    34aa:	4643      	mov	r3, r8
    34ac:	3301      	adds	r3, #1
    34ae:	e7a7      	b.n	3400 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    34b0:	2201      	movs	r2, #1
    34b2:	e79d      	b.n	33f0 <cbvprintf+0x144>
		return sp;
    34b4:	f8dd 8014 	ldr.w	r8, [sp, #20]
    34b8:	e7ca      	b.n	3450 <cbvprintf+0x1a4>
		conv->prec_star = true;
    34ba:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34be:	f043 0304 	orr.w	r3, r3, #4
    34c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    34c6:	f102 0801 	add.w	r8, r2, #1
    34ca:	e7c1      	b.n	3450 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    34cc:	2201      	movs	r2, #1
    34ce:	e7b6      	b.n	343e <cbvprintf+0x192>
		if (*++sp == 'h') {
    34d0:	f108 0201 	add.w	r2, r8, #1
    34d4:	f898 3001 	ldrb.w	r3, [r8, #1]
    34d8:	2b68      	cmp	r3, #104	; 0x68
    34da:	d008      	beq.n	34ee <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    34dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34e0:	2102      	movs	r1, #2
    34e2:	f361 03c6 	bfi	r3, r1, #3, #4
    34e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    34ea:	4690      	mov	r8, r2
    34ec:	e02b      	b.n	3546 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    34ee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34f2:	2201      	movs	r2, #1
    34f4:	f362 03c6 	bfi	r3, r2, #3, #4
    34f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    34fc:	f108 0802 	add.w	r8, r8, #2
    3500:	e021      	b.n	3546 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    3502:	f108 0201 	add.w	r2, r8, #1
    3506:	f898 3001 	ldrb.w	r3, [r8, #1]
    350a:	2b6c      	cmp	r3, #108	; 0x6c
    350c:	d008      	beq.n	3520 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    350e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3512:	2103      	movs	r1, #3
    3514:	f361 03c6 	bfi	r3, r1, #3, #4
    3518:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    351c:	4690      	mov	r8, r2
    351e:	e012      	b.n	3546 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    3520:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3524:	2204      	movs	r2, #4
    3526:	f362 03c6 	bfi	r3, r2, #3, #4
    352a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    352e:	f108 0802 	add.w	r8, r8, #2
    3532:	e008      	b.n	3546 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    3534:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3538:	2205      	movs	r2, #5
    353a:	f362 03c6 	bfi	r3, r2, #3, #4
    353e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3542:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    3546:	f818 3b01 	ldrb.w	r3, [r8], #1
    354a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    354e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    3552:	2a37      	cmp	r2, #55	; 0x37
    3554:	f200 8150 	bhi.w	37f8 <cbvprintf+0x54c>
    3558:	e8df f012 	tbh	[pc, r2, lsl #1]
    355c:	014e0126 	.word	0x014e0126
    3560:	014e014e 	.word	0x014e014e
    3564:	01260126 	.word	0x01260126
    3568:	014e0126 	.word	0x014e0126
    356c:	014e014e 	.word	0x014e014e
    3570:	014e014e 	.word	0x014e014e
    3574:	014e014e 	.word	0x014e014e
    3578:	014e014e 	.word	0x014e014e
    357c:	014e014e 	.word	0x014e014e
    3580:	014e014e 	.word	0x014e014e
    3584:	014e014e 	.word	0x014e014e
    3588:	0113014e 	.word	0x0113014e
    358c:	014e014e 	.word	0x014e014e
    3590:	014e014e 	.word	0x014e014e
    3594:	014e014e 	.word	0x014e014e
    3598:	014e014e 	.word	0x014e014e
    359c:	014e0126 	.word	0x014e0126
    35a0:	00630113 	.word	0x00630113
    35a4:	01260126 	.word	0x01260126
    35a8:	014e0126 	.word	0x014e0126
    35ac:	014e0063 	.word	0x014e0063
    35b0:	014e014e 	.word	0x014e014e
    35b4:	012f014e 	.word	0x012f014e
    35b8:	013f0113 	.word	0x013f0113
    35bc:	014e014e 	.word	0x014e014e
    35c0:	014e013f 	.word	0x014e013f
    35c4:	014e0113 	.word	0x014e0113
    35c8:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    35cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35d0:	2206      	movs	r2, #6
    35d2:	f362 03c6 	bfi	r3, r2, #3, #4
    35d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    35da:	f108 0801 	add.w	r8, r8, #1
		break;
    35de:	e7b2      	b.n	3546 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    35e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35e4:	2207      	movs	r2, #7
    35e6:	f362 03c6 	bfi	r3, r2, #3, #4
    35ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    35ee:	f108 0801 	add.w	r8, r8, #1
		break;
    35f2:	e7a8      	b.n	3546 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    35f4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35f8:	2208      	movs	r2, #8
    35fa:	f362 03c6 	bfi	r3, r2, #3, #4
    35fe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3602:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    3606:	f89d 3020 	ldrb.w	r3, [sp, #32]
    360a:	f043 0302 	orr.w	r3, r3, #2
    360e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    3612:	e798      	b.n	3546 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    3614:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3618:	f36f 03c6 	bfc	r3, #3, #4
    361c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    3620:	e791      	b.n	3546 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    3622:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3626:	2101      	movs	r1, #1
    3628:	f361 0202 	bfi	r2, r1, #0, #3
    362c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3630:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    3634:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3638:	2a40      	cmp	r2, #64	; 0x40
    363a:	f000 80aa 	beq.w	3792 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    363e:	2b63      	cmp	r3, #99	; 0x63
    3640:	f000 80ae 	beq.w	37a0 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    3644:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3648:	f3c3 0240 	ubfx	r2, r3, #1, #1
    364c:	4317      	orrs	r7, r2
    364e:	f367 0341 	bfi	r3, r7, #1, #1
    3652:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    3656:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    365a:	f013 0f01 	tst.w	r3, #1
    365e:	f000 80da 	beq.w	3816 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    3662:	9b03      	ldr	r3, [sp, #12]
    3664:	1d1a      	adds	r2, r3, #4
    3666:	9203      	str	r2, [sp, #12]
    3668:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    366a:	2f00      	cmp	r7, #0
    366c:	f2c0 80cb 	blt.w	3806 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    3670:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3674:	f013 0f04 	tst.w	r3, #4
    3678:	f000 80df 	beq.w	383a <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    367c:	9b03      	ldr	r3, [sp, #12]
    367e:	1d1a      	adds	r2, r3, #4
    3680:	9203      	str	r2, [sp, #12]
    3682:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    3686:	f1bb 0f00 	cmp.w	fp, #0
    368a:	f2c0 80cd 	blt.w	3828 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    368e:	2300      	movs	r3, #0
    3690:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    3692:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    3694:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3698:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    369c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    36a0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    36a4:	2b01      	cmp	r3, #1
    36a6:	f000 80d1 	beq.w	384c <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    36aa:	2b02      	cmp	r3, #2
    36ac:	f000 8116 	beq.w	38dc <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    36b0:	2b04      	cmp	r3, #4
    36b2:	f000 8167 	beq.w	3984 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    36b6:	2b03      	cmp	r3, #3
    36b8:	f000 817e 	beq.w	39b8 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    36bc:	f89d 9020 	ldrb.w	r9, [sp, #32]
    36c0:	f019 0303 	ands.w	r3, r9, #3
    36c4:	9302      	str	r3, [sp, #8]
    36c6:	f040 817d 	bne.w	39c4 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    36ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    36ce:	3b25      	subs	r3, #37	; 0x25
    36d0:	2b53      	cmp	r3, #83	; 0x53
    36d2:	f200 8233 	bhi.w	3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
    36d6:	e8df f013 	tbh	[pc, r3, lsl #1]
    36da:	0181      	.short	0x0181
    36dc:	02310231 	.word	0x02310231
    36e0:	02310231 	.word	0x02310231
    36e4:	02310231 	.word	0x02310231
    36e8:	02310231 	.word	0x02310231
    36ec:	02310231 	.word	0x02310231
    36f0:	02310231 	.word	0x02310231
    36f4:	02310231 	.word	0x02310231
    36f8:	02310231 	.word	0x02310231
    36fc:	02310231 	.word	0x02310231
    3700:	02310231 	.word	0x02310231
    3704:	02310231 	.word	0x02310231
    3708:	02310231 	.word	0x02310231
    370c:	02310231 	.word	0x02310231
    3710:	02310231 	.word	0x02310231
    3714:	02310231 	.word	0x02310231
    3718:	02310231 	.word	0x02310231
    371c:	02310231 	.word	0x02310231
    3720:	02310231 	.word	0x02310231
    3724:	02310231 	.word	0x02310231
    3728:	02310231 	.word	0x02310231
    372c:	02310231 	.word	0x02310231
    3730:	02310231 	.word	0x02310231
    3734:	02310231 	.word	0x02310231
    3738:	02310231 	.word	0x02310231
    373c:	02310231 	.word	0x02310231
    3740:	023101c7 	.word	0x023101c7
    3744:	02310231 	.word	0x02310231
    3748:	02310231 	.word	0x02310231
    374c:	02310231 	.word	0x02310231
    3750:	02310231 	.word	0x02310231
    3754:	01a10231 	.word	0x01a10231
    3758:	023101ab 	.word	0x023101ab
    375c:	02310231 	.word	0x02310231
    3760:	01ab0231 	.word	0x01ab0231
    3764:	02310231 	.word	0x02310231
    3768:	02310231 	.word	0x02310231
    376c:	01c70208 	.word	0x01c70208
    3770:	023101ea 	.word	0x023101ea
    3774:	018f0231 	.word	0x018f0231
    3778:	01c70231 	.word	0x01c70231
    377c:	02310231 	.word	0x02310231
    3780:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    3782:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3786:	2102      	movs	r1, #2
    3788:	f361 0202 	bfi	r2, r1, #0, #3
    378c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    3790:	e74e      	b.n	3630 <cbvprintf+0x384>
			conv->invalid = true;
    3792:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3796:	f041 0101 	orr.w	r1, r1, #1
    379a:	f88d 1020 	strb.w	r1, [sp, #32]
    379e:	e74e      	b.n	363e <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    37a0:	1e17      	subs	r7, r2, #0
    37a2:	bf18      	it	ne
    37a4:	2701      	movne	r7, #1
    37a6:	e74d      	b.n	3644 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    37a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    37ac:	2204      	movs	r2, #4
    37ae:	f362 0302 	bfi	r3, r2, #0, #3
    37b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    37b6:	2701      	movs	r7, #1
			break;
    37b8:	e744      	b.n	3644 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    37ba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    37be:	2203      	movs	r2, #3
    37c0:	f362 0302 	bfi	r3, r2, #0, #3
    37c4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    37c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    37cc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    37d0:	2b40      	cmp	r3, #64	; 0x40
    37d2:	f47f af37 	bne.w	3644 <cbvprintf+0x398>
			unsupported = true;
    37d6:	2701      	movs	r7, #1
    37d8:	e734      	b.n	3644 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    37da:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    37de:	2203      	movs	r2, #3
    37e0:	f362 0302 	bfi	r3, r2, #0, #3
    37e4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    37e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    37ec:	f013 0f78 	tst.w	r3, #120	; 0x78
    37f0:	f43f af28 	beq.w	3644 <cbvprintf+0x398>
			unsupported = true;
    37f4:	2701      	movs	r7, #1
    37f6:	e725      	b.n	3644 <cbvprintf+0x398>
		conv->invalid = true;
    37f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    37fc:	f043 0301 	orr.w	r3, r3, #1
    3800:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    3804:	e71e      	b.n	3644 <cbvprintf+0x398>
				conv->flag_dash = true;
    3806:	f89d 3020 	ldrb.w	r3, [sp, #32]
    380a:	f043 0304 	orr.w	r3, r3, #4
    380e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    3812:	427f      	negs	r7, r7
    3814:	e72c      	b.n	3670 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    3816:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    381a:	2b00      	cmp	r3, #0
    381c:	db02      	blt.n	3824 <cbvprintf+0x578>
		int width = -1;
    381e:	f04f 37ff 	mov.w	r7, #4294967295
    3822:	e725      	b.n	3670 <cbvprintf+0x3c4>
			width = conv->width_value;
    3824:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3826:	e723      	b.n	3670 <cbvprintf+0x3c4>
				conv->prec_present = false;
    3828:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    382c:	f36f 0341 	bfc	r3, #1, #1
    3830:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    3834:	f04f 3bff 	mov.w	fp, #4294967295
    3838:	e729      	b.n	368e <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    383a:	f013 0f02 	tst.w	r3, #2
    383e:	d002      	beq.n	3846 <cbvprintf+0x59a>
			precision = conv->prec_value;
    3840:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    3844:	e723      	b.n	368e <cbvprintf+0x3e2>
		int precision = -1;
    3846:	f04f 3bff 	mov.w	fp, #4294967295
    384a:	e720      	b.n	368e <cbvprintf+0x3e2>
			switch (length_mod) {
    384c:	1ecb      	subs	r3, r1, #3
    384e:	2b04      	cmp	r3, #4
    3850:	d804      	bhi.n	385c <cbvprintf+0x5b0>
    3852:	e8df f003 	tbb	[pc, r3]
    3856:	1d0b      	.short	0x1d0b
    3858:	3529      	.short	0x3529
    385a:	35          	.byte	0x35
    385b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    385c:	9b03      	ldr	r3, [sp, #12]
    385e:	1d1a      	adds	r2, r3, #4
    3860:	9203      	str	r2, [sp, #12]
    3862:	681a      	ldr	r2, [r3, #0]
    3864:	17d3      	asrs	r3, r2, #31
    3866:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    386a:	e006      	b.n	387a <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    386c:	9b03      	ldr	r3, [sp, #12]
    386e:	1d1a      	adds	r2, r3, #4
    3870:	9203      	str	r2, [sp, #12]
    3872:	681a      	ldr	r2, [r3, #0]
    3874:	17d3      	asrs	r3, r2, #31
    3876:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    387a:	2901      	cmp	r1, #1
    387c:	d028      	beq.n	38d0 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    387e:	2902      	cmp	r1, #2
    3880:	f47f af1c 	bne.w	36bc <cbvprintf+0x410>
				value->sint = (short)value->sint;
    3884:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    3888:	17d3      	asrs	r3, r2, #31
    388a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    388e:	e715      	b.n	36bc <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    3890:	9b03      	ldr	r3, [sp, #12]
    3892:	3307      	adds	r3, #7
    3894:	f023 0307 	bic.w	r3, r3, #7
    3898:	f103 0208 	add.w	r2, r3, #8
    389c:	9203      	str	r2, [sp, #12]
    389e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    38a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    38a6:	e7e8      	b.n	387a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    38a8:	9b03      	ldr	r3, [sp, #12]
    38aa:	3307      	adds	r3, #7
    38ac:	f023 0307 	bic.w	r3, r3, #7
    38b0:	f103 0208 	add.w	r2, r3, #8
    38b4:	9203      	str	r2, [sp, #12]
    38b6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    38ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    38be:	e7dc      	b.n	387a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    38c0:	9b03      	ldr	r3, [sp, #12]
    38c2:	1d1a      	adds	r2, r3, #4
    38c4:	9203      	str	r2, [sp, #12]
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	17d3      	asrs	r3, r2, #31
				value->sint =
    38ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    38ce:	e7d4      	b.n	387a <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    38d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    38d4:	9306      	str	r3, [sp, #24]
    38d6:	2300      	movs	r3, #0
    38d8:	9307      	str	r3, [sp, #28]
    38da:	e6ef      	b.n	36bc <cbvprintf+0x410>
			switch (length_mod) {
    38dc:	1ecb      	subs	r3, r1, #3
    38de:	2b04      	cmp	r3, #4
    38e0:	d804      	bhi.n	38ec <cbvprintf+0x640>
    38e2:	e8df f003 	tbb	[pc, r3]
    38e6:	1f0b      	.short	0x1f0b
    38e8:	4135      	.short	0x4135
    38ea:	41          	.byte	0x41
    38eb:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    38ec:	9b03      	ldr	r3, [sp, #12]
    38ee:	1d1a      	adds	r2, r3, #4
    38f0:	9203      	str	r2, [sp, #12]
    38f2:	681b      	ldr	r3, [r3, #0]
    38f4:	9306      	str	r3, [sp, #24]
    38f6:	2300      	movs	r3, #0
    38f8:	9307      	str	r3, [sp, #28]
				break;
    38fa:	e01e      	b.n	393a <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    38fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    3900:	2b63      	cmp	r3, #99	; 0x63
    3902:	d007      	beq.n	3914 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    3904:	9b03      	ldr	r3, [sp, #12]
    3906:	1d1a      	adds	r2, r3, #4
    3908:	9203      	str	r2, [sp, #12]
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	9306      	str	r3, [sp, #24]
    390e:	2300      	movs	r3, #0
    3910:	9307      	str	r3, [sp, #28]
    3912:	e012      	b.n	393a <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    3914:	9b03      	ldr	r3, [sp, #12]
    3916:	1d1a      	adds	r2, r3, #4
    3918:	9203      	str	r2, [sp, #12]
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	9306      	str	r3, [sp, #24]
    391e:	2300      	movs	r3, #0
    3920:	9307      	str	r3, [sp, #28]
    3922:	e00a      	b.n	393a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    3924:	9b03      	ldr	r3, [sp, #12]
    3926:	3307      	adds	r3, #7
    3928:	f023 0307 	bic.w	r3, r3, #7
    392c:	f103 0208 	add.w	r2, r3, #8
    3930:	9203      	str	r2, [sp, #12]
    3932:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3936:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    393a:	2901      	cmp	r1, #1
    393c:	d01c      	beq.n	3978 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    393e:	2902      	cmp	r1, #2
    3940:	f47f aebc 	bne.w	36bc <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    3944:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    3948:	9306      	str	r3, [sp, #24]
    394a:	2300      	movs	r3, #0
    394c:	9307      	str	r3, [sp, #28]
    394e:	e6b5      	b.n	36bc <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    3950:	9b03      	ldr	r3, [sp, #12]
    3952:	3307      	adds	r3, #7
    3954:	f023 0307 	bic.w	r3, r3, #7
    3958:	f103 0208 	add.w	r2, r3, #8
    395c:	9203      	str	r2, [sp, #12]
    395e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3962:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3966:	e7e8      	b.n	393a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    3968:	9b03      	ldr	r3, [sp, #12]
    396a:	1d1a      	adds	r2, r3, #4
    396c:	9203      	str	r2, [sp, #12]
    396e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    3970:	9306      	str	r3, [sp, #24]
    3972:	2300      	movs	r3, #0
    3974:	9307      	str	r3, [sp, #28]
				break;
    3976:	e7e0      	b.n	393a <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    3978:	f89d 3018 	ldrb.w	r3, [sp, #24]
    397c:	9306      	str	r3, [sp, #24]
    397e:	2300      	movs	r3, #0
    3980:	9307      	str	r3, [sp, #28]
    3982:	e69b      	b.n	36bc <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    3984:	2908      	cmp	r1, #8
    3986:	d00b      	beq.n	39a0 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    3988:	9b03      	ldr	r3, [sp, #12]
    398a:	3307      	adds	r3, #7
    398c:	f023 0307 	bic.w	r3, r3, #7
    3990:	f103 0208 	add.w	r2, r3, #8
    3994:	9203      	str	r2, [sp, #12]
    3996:	e9d3 2300 	ldrd	r2, r3, [r3]
    399a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    399e:	e68d      	b.n	36bc <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    39a0:	9b03      	ldr	r3, [sp, #12]
    39a2:	3307      	adds	r3, #7
    39a4:	f023 0307 	bic.w	r3, r3, #7
    39a8:	f103 0208 	add.w	r2, r3, #8
    39ac:	9203      	str	r2, [sp, #12]
    39ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    39b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    39b6:	e681      	b.n	36bc <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    39b8:	9b03      	ldr	r3, [sp, #12]
    39ba:	1d1a      	adds	r2, r3, #4
    39bc:	9203      	str	r2, [sp, #12]
    39be:	681b      	ldr	r3, [r3, #0]
    39c0:	9306      	str	r3, [sp, #24]
    39c2:	e67b      	b.n	36bc <cbvprintf+0x410>
			OUTS(sp, fp);
    39c4:	4643      	mov	r3, r8
    39c6:	4652      	mov	r2, sl
    39c8:	4629      	mov	r1, r5
    39ca:	4630      	mov	r0, r6
    39cc:	f00e fc04 	bl	121d8 <outs>
    39d0:	2800      	cmp	r0, #0
    39d2:	f2c0 814f 	blt.w	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    39d6:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    39d8:	46c2      	mov	sl, r8
			continue;
    39da:	e46f      	b.n	32bc <cbvprintf+0x10>
		case '%':
			OUTC('%');
    39dc:	4629      	mov	r1, r5
    39de:	2025      	movs	r0, #37	; 0x25
    39e0:	47b0      	blx	r6
    39e2:	2800      	cmp	r0, #0
    39e4:	f2c0 8146 	blt.w	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    39e8:	3401      	adds	r4, #1
		char sign = 0;
    39ea:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    39ee:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    39f2:	f04f 0a00 	mov.w	sl, #0
			break;
    39f6:	e0a7      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
		case 's': {
			bps = (const char *)value->ptr;
    39f8:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    39fc:	f1bb 0f00 	cmp.w	fp, #0
    3a00:	db08      	blt.n	3a14 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    3a02:	4659      	mov	r1, fp
    3a04:	4650      	mov	r0, sl
    3a06:	f012 fc7f 	bl	16308 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    3a0a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    3a0e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    3a12:	e099      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
				len = strlen(bps);
    3a14:	4650      	mov	r0, sl
    3a16:	f7fd fd7d 	bl	1514 <strlen>
    3a1a:	e7f6      	b.n	3a0a <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3a1c:	9b06      	ldr	r3, [sp, #24]
    3a1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    3a22:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    3a26:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    3a2a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    3a2e:	e08b      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    3a30:	f019 0f08 	tst.w	r9, #8
    3a34:	d105      	bne.n	3a42 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    3a36:	f019 0910 	ands.w	r9, r9, #16
    3a3a:	d004      	beq.n	3a46 <cbvprintf+0x79a>
				sign = ' ';
    3a3c:	f04f 0920 	mov.w	r9, #32
    3a40:	e001      	b.n	3a46 <cbvprintf+0x79a>
				sign = '+';
    3a42:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    3a4a:	2a00      	cmp	r2, #0
    3a4c:	f173 0100 	sbcs.w	r1, r3, #0
    3a50:	db02      	blt.n	3a58 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    3a52:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3a56:	e009      	b.n	3a6c <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    3a58:	4252      	negs	r2, r2
    3a5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3a5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    3a62:	f04f 092d 	mov.w	r9, #45	; 0x2d
    3a66:	e001      	b.n	3a6c <cbvprintf+0x7c0>
		switch (conv->specifier) {
    3a68:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3a6c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a70:	9300      	str	r3, [sp, #0]
    3a72:	ab0c      	add	r3, sp, #48	; 0x30
    3a74:	aa08      	add	r2, sp, #32
    3a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3a7a:	f7ff fba7 	bl	31cc <encode_uint>
    3a7e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    3a80:	f1bb 0f00 	cmp.w	fp, #0
    3a84:	f2c0 8090 	blt.w	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
				size_t len = bpe - bps;
    3a88:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a8c:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3a90:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3a94:	f36f 1286 	bfc	r2, #6, #1
    3a98:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3a9c:	459b      	cmp	fp, r3
    3a9e:	f240 8086 	bls.w	3bae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x116>
					conv->pad0_value = precision - (int)len;
    3aa2:	ebab 0303 	sub.w	r3, fp, r3
    3aa6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    3aa8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3aac:	e04c      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3aae:	9806      	ldr	r0, [sp, #24]
    3ab0:	b930      	cbnz	r0, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
		char sign = 0;
    3ab2:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3ab6:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3c7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e4>
			bps = "(nil)";
    3aba:	f1ab 0a05 	sub.w	sl, fp, #5
    3abe:	e043      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3ac0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3ac4:	9300      	str	r3, [sp, #0]
    3ac6:	ab0c      	add	r3, sp, #48	; 0x30
    3ac8:	aa08      	add	r2, sp, #32
    3aca:	2100      	movs	r1, #0
    3acc:	f7ff fb7e 	bl	31cc <encode_uint>
    3ad0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3ad2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3ad6:	f043 0310 	orr.w	r3, r3, #16
    3ada:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    3ade:	2378      	movs	r3, #120	; 0x78
    3ae0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    3ae4:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3ae8:	e7ca      	b.n	3a80 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3aea:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    3aec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3af0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3af4:	2b07      	cmp	r3, #7
    3af6:	d806      	bhi.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
    3af8:	e8df f003 	tbb	[pc, r3]
    3afc:	100e0c04 	.word	0x100e0c04
    3b00:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3b04:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3b06:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3b0a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3b0e:	f04f 0a00 	mov.w	sl, #0
}
    3b12:	e019      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
		*(signed char *)dp = (signed char)count;
    3b14:	7014      	strb	r4, [r2, #0]
		break;
    3b16:	e7f6      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
		*(short *)dp = (short)count;
    3b18:	8014      	strh	r4, [r2, #0]
		break;
    3b1a:	e7f4      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
		*(long *)dp = (long)count;
    3b1c:	6014      	str	r4, [r2, #0]
		break;
    3b1e:	e7f2      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
		*(long long *)dp = (long long)count;
    3b20:	4620      	mov	r0, r4
    3b22:	17e1      	asrs	r1, r4, #31
    3b24:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3b28:	e7ed      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
		*(intmax_t *)dp = (intmax_t)count;
    3b2a:	4620      	mov	r0, r4
    3b2c:	17e1      	asrs	r1, r4, #31
    3b2e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3b32:	e7e8      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
		*(size_t *)dp = (size_t)count;
    3b34:	6014      	str	r4, [r2, #0]
		break;
    3b36:	e7e6      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3b38:	6014      	str	r4, [r2, #0]
		break;
    3b3a:	e7e4      	b.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
		switch (conv->specifier) {
    3b3c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3b40:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b44:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3b48:	f1ba 0f00 	cmp.w	sl, #0
    3b4c:	f000 808e 	beq.w	3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3b50:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3b54:	f1b9 0f00 	cmp.w	r9, #0
    3b58:	d000      	beq.n	3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>
			nj_len += 1U;
    3b5a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3b5c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    3b60:	f011 0f10 	tst.w	r1, #16
    3b64:	d026      	beq.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
			nj_len += 2U;
    3b66:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b6a:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3b6c:	f011 0f40 	tst.w	r1, #64	; 0x40
    3b70:	d001      	beq.n	3b76 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xde>
			nj_len += conv->pad0_pre_exp;
    3b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b74:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3b76:	2f00      	cmp	r7, #0
    3b78:	dd32      	ble.n	3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>
			width -= (int)nj_len;
    3b7a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3b7c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3b80:	f013 0f04 	tst.w	r3, #4
    3b84:	d12c      	bne.n	3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3b86:	f013 0f40 	tst.w	r3, #64	; 0x40
    3b8a:	d018      	beq.n	3bbe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x126>
					if (sign != 0) {
    3b8c:	f1b9 0f00 	cmp.w	r9, #0
    3b90:	d018      	beq.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
						OUTC(sign);
    3b92:	4629      	mov	r1, r5
    3b94:	4648      	mov	r0, r9
    3b96:	47b0      	blx	r6
    3b98:	2800      	cmp	r0, #0
    3b9a:	db6b      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3b9c:	3401      	adds	r4, #1
						sign = 0;
    3b9e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    3ba2:	2330      	movs	r3, #48	; 0x30
    3ba4:	9302      	str	r3, [sp, #8]
    3ba6:	e00f      	b.n	3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>
		const char *bpe = buf + sizeof(buf);
    3ba8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3bac:	e7cc      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
    3bae:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3bb2:	e7c9      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
		} else if (conv->altform_0) {
    3bb4:	f011 0f08 	tst.w	r1, #8
    3bb8:	d0d6      	beq.n	3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>
			nj_len += 1U;
    3bba:	3201      	adds	r2, #1
    3bbc:	e7d4      	b.n	3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>
				char pad = ' ';
    3bbe:	2320      	movs	r3, #32
    3bc0:	9302      	str	r3, [sp, #8]
    3bc2:	e001      	b.n	3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>
					pad = '0';
    3bc4:	2330      	movs	r3, #48	; 0x30
    3bc6:	9302      	str	r3, [sp, #8]
    3bc8:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3bca:	1e5f      	subs	r7, r3, #1
    3bcc:	2b00      	cmp	r3, #0
    3bce:	dd07      	ble.n	3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>
					OUTC(pad);
    3bd0:	4629      	mov	r1, r5
    3bd2:	9802      	ldr	r0, [sp, #8]
    3bd4:	47b0      	blx	r6
    3bd6:	2800      	cmp	r0, #0
    3bd8:	db4c      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3bda:	3401      	adds	r4, #1
				while (width-- > 0) {
    3bdc:	463b      	mov	r3, r7
    3bde:	e7f4      	b.n	3bca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x132>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3be0:	f1b9 0f00 	cmp.w	r9, #0
    3be4:	d005      	beq.n	3bf2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15a>
			OUTC(sign);
    3be6:	4629      	mov	r1, r5
    3be8:	4648      	mov	r0, r9
    3bea:	47b0      	blx	r6
    3bec:	2800      	cmp	r0, #0
    3bee:	db41      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3bf0:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3bf2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3bf6:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3bfa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3bfe:	4313      	orrs	r3, r2
    3c00:	d005      	beq.n	3c0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x176>
				OUTC('0');
    3c02:	4629      	mov	r1, r5
    3c04:	2030      	movs	r0, #48	; 0x30
    3c06:	47b0      	blx	r6
    3c08:	2800      	cmp	r0, #0
    3c0a:	db33      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3c0c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3c0e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3c12:	f013 0f10 	tst.w	r3, #16
    3c16:	d006      	beq.n	3c26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18e>
				OUTC(conv->specifier);
    3c18:	4629      	mov	r1, r5
    3c1a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3c1e:	47b0      	blx	r6
    3c20:	2800      	cmp	r0, #0
    3c22:	db27      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3c24:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3c28:	f103 39ff 	add.w	r9, r3, #4294967295
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	dd07      	ble.n	3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
				OUTC('0');
    3c30:	4629      	mov	r1, r5
    3c32:	2030      	movs	r0, #48	; 0x30
    3c34:	47b0      	blx	r6
    3c36:	2800      	cmp	r0, #0
    3c38:	db1c      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3c3a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3c3c:	464b      	mov	r3, r9
    3c3e:	e7f3      	b.n	3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>
			}

			OUTS(bps, bpe);
    3c40:	465b      	mov	r3, fp
    3c42:	4652      	mov	r2, sl
    3c44:	4629      	mov	r1, r5
    3c46:	4630      	mov	r0, r6
    3c48:	f00e fac6 	bl	121d8 <outs>
    3c4c:	2800      	cmp	r0, #0
    3c4e:	db11      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3c50:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3c52:	2f00      	cmp	r7, #0
    3c54:	dd07      	ble.n	3c66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ce>
			OUTC(' ');
    3c56:	4629      	mov	r1, r5
    3c58:	2020      	movs	r0, #32
    3c5a:	47b0      	blx	r6
    3c5c:	2800      	cmp	r0, #0
    3c5e:	db09      	blt.n	3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3c60:	3401      	adds	r4, #1
			--width;
    3c62:	3f01      	subs	r7, #1
    3c64:	e7f5      	b.n	3c52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ba>
		fp = extract_conversion(conv, sp);
    3c66:	46c2      	mov	sl, r8
    3c68:	f7ff bb28 	b.w	32bc <cbvprintf+0x10>
    3c6c:	46c2      	mov	sl, r8
    3c6e:	f7ff bb25 	b.w	32bc <cbvprintf+0x10>
		}
	}

	return count;
    3c72:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3c74:	b013      	add	sp, #76	; 0x4c
    3c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c7a:	bf00      	nop
    3c7c:	00068c59 	.word	0x00068c59

00003c80 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    3c80:	b508      	push	{r3, lr}
    3c82:	4604      	mov	r4, r0
    3c84:	f04f 0220 	mov.w	r2, #32
    3c88:	f3ef 8311 	mrs	r3, BASEPRI
    3c8c:	f382 8812 	msr	BASEPRI_MAX, r2
    3c90:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3c94:	f00f f8d1 	bl	12e3a <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3c98:	4620      	mov	r0, r4
    3c9a:	f000 fe0d 	bl	48b8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3c9e:	4803      	ldr	r0, [pc, #12]	; (3cac <sys_reboot+0x2c>)
    3ca0:	f00e f82b 	bl	11cfa <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3ca4:	f000 fa02 	bl	40ac <arch_cpu_idle>
    3ca8:	e7fc      	b.n	3ca4 <sys_reboot+0x24>
    3caa:	bf00      	nop
    3cac:	00068c5c 	.word	0x00068c5c

00003cb0 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    3cb0:	b1c1      	cbz	r1, 3ce4 <tty_init+0x34>
{
    3cb2:	b508      	push	{r3, lr}
    3cb4:	4602      	mov	r2, r0
    3cb6:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    3cb8:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    3cba:	2300      	movs	r3, #0
    3cbc:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    3cbe:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3cc0:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3cc2:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3cc4:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3cc6:	8793      	strh	r3, [r2, #60]	; 0x3c
    3cc8:	83d3      	strh	r3, [r2, #30]
    3cca:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    3ccc:	f04f 33ff 	mov.w	r3, #4294967295
    3cd0:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3cd2:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3cd4:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3cd6:	b143      	cbz	r3, 3cea <tty_init+0x3a>
    3cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3cda:	b143      	cbz	r3, 3cee <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    3cdc:	4905      	ldr	r1, [pc, #20]	; (3cf4 <tty_init+0x44>)
    3cde:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    3ce0:	2000      	movs	r0, #0
}
    3ce2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3ce4:	f06f 0012 	mvn.w	r0, #18
}
    3ce8:	4770      	bx	lr
	return 0;
    3cea:	2000      	movs	r0, #0
    3cec:	e7f9      	b.n	3ce2 <tty_init+0x32>
    3cee:	2000      	movs	r0, #0
    3cf0:	e7f7      	b.n	3ce2 <tty_init+0x32>
    3cf2:	bf00      	nop
    3cf4:	000123ed 	.word	0x000123ed

00003cf8 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    3cf8:	b500      	push	{lr}
    3cfa:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    3cfc:	2201      	movs	r2, #1
    3cfe:	f10d 0107 	add.w	r1, sp, #7
    3d02:	4805      	ldr	r0, [pc, #20]	; (3d18 <console_getchar+0x20>)
    3d04:	f00e fbb8 	bl	12478 <tty_read>
	if (res < 0) {
    3d08:	2800      	cmp	r0, #0
    3d0a:	db01      	blt.n	3d10 <console_getchar+0x18>
		return res;
	}

	return c;
    3d0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3d10:	b003      	add	sp, #12
    3d12:	f85d fb04 	ldr.w	pc, [sp], #4
    3d16:	bf00      	nop
    3d18:	20020308 	.word	0x20020308

00003d1c <console_init>:

int console_init(void)
{
    3d1c:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3d1e:	4810      	ldr	r0, [pc, #64]	; (3d60 <console_init+0x44>)
    3d20:	f011 fed6 	bl	15ad0 <z_device_ready>
    3d24:	b1b0      	cbz	r0, 3d54 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    3d26:	490e      	ldr	r1, [pc, #56]	; (3d60 <console_init+0x44>)
    3d28:	480e      	ldr	r0, [pc, #56]	; (3d64 <console_init+0x48>)
    3d2a:	f7ff ffc1 	bl	3cb0 <tty_init>

	if (ret) {
    3d2e:	4604      	mov	r4, r0
    3d30:	b970      	cbnz	r0, 3d50 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    3d32:	4b0b      	ldr	r3, [pc, #44]	; (3d60 <console_init+0x44>)
    3d34:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    3d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d38:	b17b      	cbz	r3, 3d5a <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    3d3a:	4d0a      	ldr	r5, [pc, #40]	; (3d64 <console_init+0x48>)
    3d3c:	2210      	movs	r2, #16
    3d3e:	490a      	ldr	r1, [pc, #40]	; (3d68 <console_init+0x4c>)
    3d40:	4628      	mov	r0, r5
    3d42:	f00e fbda 	bl	124fa <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3d46:	2210      	movs	r2, #16
    3d48:	4908      	ldr	r1, [pc, #32]	; (3d6c <console_init+0x50>)
    3d4a:	4628      	mov	r0, r5
    3d4c:	f00e fbba 	bl	124c4 <tty_set_rx_buf>

	return 0;
}
    3d50:	4620      	mov	r0, r4
    3d52:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3d54:	f06f 0412 	mvn.w	r4, #18
    3d58:	e7fa      	b.n	3d50 <console_init+0x34>
			return -ENOTSUP;
    3d5a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3d5e:	e7f7      	b.n	3d50 <console_init+0x34>
    3d60:	00016c3c 	.word	0x00016c3c
    3d64:	20020308 	.word	0x20020308
    3d68:	2002034c 	.word	0x2002034c
    3d6c:	200202f8 	.word	0x200202f8

00003d70 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3d70:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    3d72:	4c04      	ldr	r4, [pc, #16]	; (3d84 <__do_init_array_aux+0x14>)
    3d74:	4b04      	ldr	r3, [pc, #16]	; (3d88 <__do_init_array_aux+0x18>)
    3d76:	429c      	cmp	r4, r3
    3d78:	d203      	bcs.n	3d82 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    3d7a:	f854 3b04 	ldr.w	r3, [r4], #4
    3d7e:	4798      	blx	r3
		func++) {
    3d80:	e7f8      	b.n	3d74 <__do_init_array_aux+0x4>
	}
}
    3d82:	bd10      	pop	{r4, pc}
    3d84:	00016e24 	.word	0x00016e24
    3d88:	00016e24 	.word	0x00016e24

00003d8c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    3d8c:	4b06      	ldr	r3, [pc, #24]	; (3da8 <__do_global_ctors_aux+0x1c>)
    3d8e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    3d90:	b14b      	cbz	r3, 3da6 <__do_global_ctors_aux+0x1a>
{
    3d92:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    3d94:	1e5c      	subs	r4, r3, #1
    3d96:	4a04      	ldr	r2, [pc, #16]	; (3da8 <__do_global_ctors_aux+0x1c>)
    3d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d9c:	4798      	blx	r3
    3d9e:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    3da0:	2c00      	cmp	r4, #0
    3da2:	d1f7      	bne.n	3d94 <__do_global_ctors_aux+0x8>
	}
}
    3da4:	bd10      	pop	{r4, pc}
    3da6:	4770      	bx	lr
    3da8:	00016e1c 	.word	0x00016e1c

00003dac <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3dac:	4b1b      	ldr	r3, [pc, #108]	; (3e1c <pm_system_resume+0x70>)
    3dae:	681b      	ldr	r3, [r3, #0]
    3db0:	2b00      	cmp	r3, #0
    3db2:	d132      	bne.n	3e1a <pm_system_resume+0x6e>
{
    3db4:	b530      	push	{r4, r5, lr}
    3db6:	b085      	sub	sp, #20
		post_ops_done = 1;
    3db8:	4b18      	ldr	r3, [pc, #96]	; (3e1c <pm_system_resume+0x70>)
    3dba:	2201      	movs	r2, #1
    3dbc:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3dbe:	4b18      	ldr	r3, [pc, #96]	; (3e20 <pm_system_resume+0x74>)
    3dc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3dc4:	ab04      	add	r3, sp, #16
    3dc6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3dca:	4b16      	ldr	r3, [pc, #88]	; (3e24 <pm_system_resume+0x78>)
    3dcc:	b163      	cbz	r3, 3de8 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3dce:	f00e fcbb 	bl	12748 <pm_power_state_exit_post_ops>
    3dd2:	f04f 0320 	mov.w	r3, #32
    3dd6:	f3ef 8511 	mrs	r5, BASEPRI
    3dda:	f383 8812 	msr	BASEPRI_MAX, r3
    3dde:	f3bf 8f6f 	isb	sy
    3de2:	4b11      	ldr	r3, [pc, #68]	; (3e28 <pm_system_resume+0x7c>)
    3de4:	681c      	ldr	r4, [r3, #0]
    3de6:	e00a      	b.n	3dfe <pm_system_resume+0x52>
	__asm__ volatile(
    3de8:	2300      	movs	r3, #0
    3dea:	f383 8811 	msr	BASEPRI, r3
    3dee:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3df2:	e7ee      	b.n	3dd2 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3df4:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3df6:	b10c      	cbz	r4, 3dfc <pm_system_resume+0x50>
	return node->next;
    3df8:	6823      	ldr	r3, [r4, #0]
    3dfa:	b143      	cbz	r3, 3e0e <pm_system_resume+0x62>
{
    3dfc:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3dfe:	b134      	cbz	r4, 3e0e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3e00:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3e02:	2b00      	cmp	r3, #0
    3e04:	d0f6      	beq.n	3df4 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3e06:	4a06      	ldr	r2, [pc, #24]	; (3e20 <pm_system_resume+0x74>)
    3e08:	7810      	ldrb	r0, [r2, #0]
    3e0a:	4798      	blx	r3
    3e0c:	e7f2      	b.n	3df4 <pm_system_resume+0x48>
	__asm__ volatile(
    3e0e:	f385 8811 	msr	BASEPRI, r5
    3e12:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3e16:	b005      	add	sp, #20
    3e18:	bd30      	pop	{r4, r5, pc}
    3e1a:	4770      	bx	lr
    3e1c:	20000004 	.word	0x20000004
    3e20:	20020368 	.word	0x20020368
    3e24:	00012749 	.word	0x00012749
    3e28:	20020360 	.word	0x20020360

00003e2c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3e2c:	b570      	push	{r4, r5, r6, lr}
    3e2e:	b088      	sub	sp, #32
    3e30:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3e32:	4c2a      	ldr	r4, [pc, #168]	; (3edc <pm_system_suspend+0xb0>)
    3e34:	466d      	mov	r5, sp
    3e36:	4601      	mov	r1, r0
    3e38:	4628      	mov	r0, r5
    3e3a:	f00e fb7a 	bl	12532 <pm_policy_next_state>
    3e3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3e42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3e46:	7820      	ldrb	r0, [r4, #0]
    3e48:	2800      	cmp	r0, #0
    3e4a:	d045      	beq.n	3ed8 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3e4c:	4b24      	ldr	r3, [pc, #144]	; (3ee0 <pm_system_suspend+0xb4>)
    3e4e:	2200      	movs	r2, #0
    3e50:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3e52:	f1b6 3fff 	cmp.w	r6, #4294967295
    3e56:	d10c      	bne.n	3e72 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3e58:	f00b fb92 	bl	f580 <k_sched_lock>
	__asm__ volatile(
    3e5c:	f04f 0320 	mov.w	r3, #32
    3e60:	f3ef 8511 	mrs	r5, BASEPRI
    3e64:	f383 8812 	msr	BASEPRI_MAX, r3
    3e68:	f3bf 8f6f 	isb	sy
	return list->head;
    3e6c:	4b1d      	ldr	r3, [pc, #116]	; (3ee4 <pm_system_suspend+0xb8>)
    3e6e:	681c      	ldr	r4, [r3, #0]
    3e70:	e016      	b.n	3ea0 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3e72:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3e74:	0c59      	lsrs	r1, r3, #17
    3e76:	03d8      	lsls	r0, r3, #15
    3e78:	4c1b      	ldr	r4, [pc, #108]	; (3ee8 <pm_system_suspend+0xbc>)
    3e7a:	4a1c      	ldr	r2, [pc, #112]	; (3eec <pm_system_suspend+0xc0>)
    3e7c:	2300      	movs	r3, #0
    3e7e:	1900      	adds	r0, r0, r4
    3e80:	f04f 0400 	mov.w	r4, #0
    3e84:	eb44 0101 	adc.w	r1, r4, r1
    3e88:	f7fd f952 	bl	1130 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3e8c:	2101      	movs	r1, #1
    3e8e:	1a30      	subs	r0, r6, r0
    3e90:	f012 f83f 	bl	15f12 <z_set_timeout_expiry>
    3e94:	e7e0      	b.n	3e58 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e96:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3e98:	b10c      	cbz	r4, 3e9e <pm_system_suspend+0x72>
	return node->next;
    3e9a:	6823      	ldr	r3, [r4, #0]
    3e9c:	b143      	cbz	r3, 3eb0 <pm_system_suspend+0x84>
{
    3e9e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3ea0:	b134      	cbz	r4, 3eb0 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3ea2:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d0f6      	beq.n	3e96 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3ea8:	4a0c      	ldr	r2, [pc, #48]	; (3edc <pm_system_suspend+0xb0>)
    3eaa:	7810      	ldrb	r0, [r2, #0]
    3eac:	4798      	blx	r3
    3eae:	e7f2      	b.n	3e96 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3eb0:	f385 8811 	msr	BASEPRI, r5
    3eb4:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3eb8:	4b08      	ldr	r3, [pc, #32]	; (3edc <pm_system_suspend+0xb0>)
    3eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ebe:	ab08      	add	r3, sp, #32
    3ec0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3ec4:	4b0a      	ldr	r3, [pc, #40]	; (3ef0 <pm_system_suspend+0xc4>)
    3ec6:	b10b      	cbz	r3, 3ecc <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3ec8:	f00e fc2b 	bl	12722 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3ecc:	f7ff ff6e 	bl	3dac <pm_system_resume>
	k_sched_unlock();
    3ed0:	f00b fd54 	bl	f97c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3ed4:	4b01      	ldr	r3, [pc, #4]	; (3edc <pm_system_suspend+0xb0>)
    3ed6:	7818      	ldrb	r0, [r3, #0]
}
    3ed8:	b008      	add	sp, #32
    3eda:	bd70      	pop	{r4, r5, r6, pc}
    3edc:	20020368 	.word	0x20020368
    3ee0:	20000004 	.word	0x20000004
    3ee4:	20020360 	.word	0x20020360
    3ee8:	000f423f 	.word	0x000f423f
    3eec:	000f4240 	.word	0x000f4240
    3ef0:	00012723 	.word	0x00012723

00003ef4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3ef4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3ef6:	4802      	ldr	r0, [pc, #8]	; (3f00 <nrf_cc3xx_platform_abort_init+0xc>)
    3ef8:	f00c f8ac 	bl	10054 <nrf_cc3xx_platform_set_abort>
}
    3efc:	bd08      	pop	{r3, pc}
    3efe:	bf00      	nop
    3f00:	00068c88 	.word	0x00068c88

00003f04 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3f04:	b1d0      	cbz	r0, 3f3c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3f06:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3f08:	6842      	ldr	r2, [r0, #4]
    3f0a:	2a04      	cmp	r2, #4
    3f0c:	d005      	beq.n	3f1a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3f0e:	b1d2      	cbz	r2, 3f46 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3f10:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3f12:	f00b fa25 	bl	f360 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3f16:	2000      	movs	r0, #0
    }
}
    3f18:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3f1a:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3f1c:	2200      	movs	r2, #0
    3f1e:	f3bf 8f5b 	dmb	ish
    3f22:	e853 1f00 	ldrex	r1, [r3]
    3f26:	2901      	cmp	r1, #1
    3f28:	d103      	bne.n	3f32 <mutex_unlock_platform+0x2e>
    3f2a:	e843 2000 	strex	r0, r2, [r3]
    3f2e:	2800      	cmp	r0, #0
    3f30:	d1f7      	bne.n	3f22 <mutex_unlock_platform+0x1e>
    3f32:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3f36:	d104      	bne.n	3f42 <mutex_unlock_platform+0x3e>
    3f38:	4610      	mov	r0, r2
    3f3a:	e7ed      	b.n	3f18 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3f3c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3f40:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3f42:	4802      	ldr	r0, [pc, #8]	; (3f4c <mutex_unlock_platform+0x48>)
    3f44:	e7e8      	b.n	3f18 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3f46:	4802      	ldr	r0, [pc, #8]	; (3f50 <mutex_unlock_platform+0x4c>)
    3f48:	e7e6      	b.n	3f18 <mutex_unlock_platform+0x14>
    3f4a:	bf00      	nop
    3f4c:	ffff8fe9 	.word	0xffff8fe9
    3f50:	ffff8fea 	.word	0xffff8fea

00003f54 <mutex_lock_platform>:
    if(mutex == NULL) {
    3f54:	b320      	cbz	r0, 3fa0 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3f56:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3f58:	6842      	ldr	r2, [r0, #4]
    3f5a:	2a04      	cmp	r2, #4
    3f5c:	d002      	beq.n	3f64 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3f5e:	b992      	cbnz	r2, 3f86 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3f60:	4811      	ldr	r0, [pc, #68]	; (3fa8 <mutex_lock_platform+0x54>)
    3f62:	e00f      	b.n	3f84 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3f64:	6803      	ldr	r3, [r0, #0]
    3f66:	2201      	movs	r2, #1
    3f68:	f3bf 8f5b 	dmb	ish
    3f6c:	e853 1f00 	ldrex	r1, [r3]
    3f70:	2900      	cmp	r1, #0
    3f72:	d103      	bne.n	3f7c <mutex_lock_platform+0x28>
    3f74:	e843 2000 	strex	r0, r2, [r3]
    3f78:	2800      	cmp	r0, #0
    3f7a:	d1f7      	bne.n	3f6c <mutex_lock_platform+0x18>
    3f7c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3f80:	d10c      	bne.n	3f9c <mutex_lock_platform+0x48>
    3f82:	2000      	movs	r0, #0
}
    3f84:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    3f86:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3f88:	f04f 32ff 	mov.w	r2, #4294967295
    3f8c:	f04f 33ff 	mov.w	r3, #4294967295
    3f90:	f00b f95c 	bl	f24c <z_impl_k_mutex_lock>
        if (ret == 0) {
    3f94:	2800      	cmp	r0, #0
    3f96:	d0f5      	beq.n	3f84 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3f98:	4804      	ldr	r0, [pc, #16]	; (3fac <mutex_lock_platform+0x58>)
    3f9a:	e7f3      	b.n	3f84 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3f9c:	4803      	ldr	r0, [pc, #12]	; (3fac <mutex_lock_platform+0x58>)
    3f9e:	e7f1      	b.n	3f84 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3fa0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3fa4:	4770      	bx	lr
    3fa6:	bf00      	nop
    3fa8:	ffff8fea 	.word	0xffff8fea
    3fac:	ffff8fe9 	.word	0xffff8fe9

00003fb0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3fb0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3fb2:	4604      	mov	r4, r0
    3fb4:	b190      	cbz	r0, 3fdc <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3fb6:	6863      	ldr	r3, [r4, #4]
    3fb8:	2b04      	cmp	r3, #4
    3fba:	d00e      	beq.n	3fda <mutex_free_platform+0x2a>
    3fbc:	2b08      	cmp	r3, #8
    3fbe:	d00c      	beq.n	3fda <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3fc0:	b15b      	cbz	r3, 3fda <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3fc2:	f013 0f02 	tst.w	r3, #2
    3fc6:	d10e      	bne.n	3fe6 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3fc8:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3fca:	2200      	movs	r2, #0
    3fcc:	601a      	str	r2, [r3, #0]
    3fce:	605a      	str	r2, [r3, #4]
    3fd0:	609a      	str	r2, [r3, #8]
    3fd2:	60da      	str	r2, [r3, #12]
    3fd4:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3fd6:	2300      	movs	r3, #0
    3fd8:	6063      	str	r3, [r4, #4]
}
    3fda:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3fdc:	4b05      	ldr	r3, [pc, #20]	; (3ff4 <mutex_free_platform+0x44>)
    3fde:	685b      	ldr	r3, [r3, #4]
    3fe0:	4805      	ldr	r0, [pc, #20]	; (3ff8 <mutex_free_platform+0x48>)
    3fe2:	4798      	blx	r3
    3fe4:	e7e7      	b.n	3fb6 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3fe6:	4621      	mov	r1, r4
    3fe8:	4804      	ldr	r0, [pc, #16]	; (3ffc <mutex_free_platform+0x4c>)
    3fea:	f011 fdbe 	bl	15b6a <k_mem_slab_free>
        mutex->mutex = NULL;
    3fee:	2300      	movs	r3, #0
    3ff0:	6023      	str	r3, [r4, #0]
    3ff2:	e7f0      	b.n	3fd6 <mutex_free_platform+0x26>
    3ff4:	20000098 	.word	0x20000098
    3ff8:	00068c90 	.word	0x00068c90
    3ffc:	20020374 	.word	0x20020374

00004000 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4000:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4002:	4604      	mov	r4, r0
    4004:	b178      	cbz	r0, 4026 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4006:	6863      	ldr	r3, [r4, #4]
    4008:	2b04      	cmp	r3, #4
    400a:	d00b      	beq.n	4024 <mutex_init_platform+0x24>
    400c:	2b08      	cmp	r3, #8
    400e:	d009      	beq.n	4024 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4010:	b90b      	cbnz	r3, 4016 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    4012:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4014:	b163      	cbz	r3, 4030 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    4016:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4018:	f011 fe22 	bl	15c60 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    401c:	6863      	ldr	r3, [r4, #4]
    401e:	f043 0301 	orr.w	r3, r3, #1
    4022:	6063      	str	r3, [r4, #4]
}
    4024:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4026:	4b10      	ldr	r3, [pc, #64]	; (4068 <mutex_init_platform+0x68>)
    4028:	685b      	ldr	r3, [r3, #4]
    402a:	4810      	ldr	r0, [pc, #64]	; (406c <mutex_init_platform+0x6c>)
    402c:	4798      	blx	r3
    402e:	e7ea      	b.n	4006 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    4030:	f04f 32ff 	mov.w	r2, #4294967295
    4034:	f04f 33ff 	mov.w	r3, #4294967295
    4038:	4621      	mov	r1, r4
    403a:	480d      	ldr	r0, [pc, #52]	; (4070 <mutex_init_platform+0x70>)
    403c:	f00a ffde 	bl	effc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    4040:	b908      	cbnz	r0, 4046 <mutex_init_platform+0x46>
    4042:	6823      	ldr	r3, [r4, #0]
    4044:	b91b      	cbnz	r3, 404e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    4046:	4b08      	ldr	r3, [pc, #32]	; (4068 <mutex_init_platform+0x68>)
    4048:	685b      	ldr	r3, [r3, #4]
    404a:	480a      	ldr	r0, [pc, #40]	; (4074 <mutex_init_platform+0x74>)
    404c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    404e:	6823      	ldr	r3, [r4, #0]
    4050:	2200      	movs	r2, #0
    4052:	601a      	str	r2, [r3, #0]
    4054:	605a      	str	r2, [r3, #4]
    4056:	609a      	str	r2, [r3, #8]
    4058:	60da      	str	r2, [r3, #12]
    405a:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    405c:	6863      	ldr	r3, [r4, #4]
    405e:	f043 0302 	orr.w	r3, r3, #2
    4062:	6063      	str	r3, [r4, #4]
    4064:	e7d7      	b.n	4016 <mutex_init_platform+0x16>
    4066:	bf00      	nop
    4068:	20000098 	.word	0x20000098
    406c:	00068c90 	.word	0x00068c90
    4070:	20020374 	.word	0x20020374
    4074:	00068cb8 	.word	0x00068cb8

00004078 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4078:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    407a:	2340      	movs	r3, #64	; 0x40
    407c:	2214      	movs	r2, #20
    407e:	4904      	ldr	r1, [pc, #16]	; (4090 <nrf_cc3xx_platform_mutex_init+0x18>)
    4080:	4804      	ldr	r0, [pc, #16]	; (4094 <nrf_cc3xx_platform_mutex_init+0x1c>)
    4082:	f011 fd63 	bl	15b4c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    4086:	4904      	ldr	r1, [pc, #16]	; (4098 <nrf_cc3xx_platform_mutex_init+0x20>)
    4088:	4804      	ldr	r0, [pc, #16]	; (409c <nrf_cc3xx_platform_mutex_init+0x24>)
    408a:	f00c f845 	bl	10118 <nrf_cc3xx_platform_set_mutexes>
}
    408e:	bd08      	pop	{r3, pc}
    4090:	20020394 	.word	0x20020394
    4094:	20020374 	.word	0x20020374
    4098:	00068cf8 	.word	0x00068cf8
    409c:	00068ce8 	.word	0x00068ce8

000040a0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    40a0:	4901      	ldr	r1, [pc, #4]	; (40a8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    40a2:	2210      	movs	r2, #16
	str	r2, [r1]
    40a4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    40a6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    40a8:	e000ed10 	.word	0xe000ed10

000040ac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    40ac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    40ae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    40b0:	f380 8811 	msr	BASEPRI, r0
	isb
    40b4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    40b8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    40bc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    40be:	b662      	cpsie	i
	isb
    40c0:	f3bf 8f6f 	isb	sy

	bx	lr
    40c4:	4770      	bx	lr
    40c6:	bf00      	nop

000040c8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    40c8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    40ca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    40cc:	f381 8811 	msr	BASEPRI, r1

	wfe
    40d0:	bf20      	wfe

	msr	BASEPRI, r0
    40d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    40d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    40d8:	4770      	bx	lr
    40da:	bf00      	nop

000040dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    40dc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    40de:	2b00      	cmp	r3, #0
    40e0:	db08      	blt.n	40f4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40e2:	f000 001f 	and.w	r0, r0, #31
    40e6:	095b      	lsrs	r3, r3, #5
    40e8:	2201      	movs	r2, #1
    40ea:	fa02 f000 	lsl.w	r0, r2, r0
    40ee:	4a02      	ldr	r2, [pc, #8]	; (40f8 <arch_irq_enable+0x1c>)
    40f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop
    40f8:	e000e100 	.word	0xe000e100

000040fc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    40fc:	0942      	lsrs	r2, r0, #5
    40fe:	4b05      	ldr	r3, [pc, #20]	; (4114 <arch_irq_is_enabled+0x18>)
    4100:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4104:	f000 001f 	and.w	r0, r0, #31
    4108:	2301      	movs	r3, #1
    410a:	fa03 f000 	lsl.w	r0, r3, r0
}
    410e:	4010      	ands	r0, r2
    4110:	4770      	bx	lr
    4112:	bf00      	nop
    4114:	e000e100 	.word	0xe000e100

00004118 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4118:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    411a:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    411c:	2b00      	cmp	r3, #0
    411e:	db08      	blt.n	4132 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4120:	0149      	lsls	r1, r1, #5
    4122:	b2c9      	uxtb	r1, r1
    4124:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4128:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    412c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4130:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4132:	f000 000f 	and.w	r0, r0, #15
    4136:	0149      	lsls	r1, r1, #5
    4138:	b2c9      	uxtb	r1, r1
    413a:	4b01      	ldr	r3, [pc, #4]	; (4140 <z_arm_irq_priority_set+0x28>)
    413c:	5419      	strb	r1, [r3, r0]
}
    413e:	4770      	bx	lr
    4140:	e000ed14 	.word	0xe000ed14

00004144 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4144:	bf30      	wfi
    b z_SysNmiOnReset
    4146:	f7ff bffd 	b.w	4144 <z_SysNmiOnReset>
    414a:	bf00      	nop

0000414c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    414c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    414e:	4b0b      	ldr	r3, [pc, #44]	; (417c <z_arm_prep_c+0x30>)
    4150:	4a0b      	ldr	r2, [pc, #44]	; (4180 <z_arm_prep_c+0x34>)
    4152:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4156:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4158:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    415c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4160:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4164:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    416c:	f00a fee6 	bl	ef3c <z_bss_zero>
	z_data_copy();
    4170:	f00b fd74 	bl	fc5c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4174:	f000 fa18 	bl	45a8 <z_arm_interrupt_init>
	z_cstart();
    4178:	f00a feec 	bl	ef54 <z_cstart>
    417c:	e000ed00 	.word	0xe000ed00
    4180:	00000000 	.word	0x00000000

00004184 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4184:	4a0a      	ldr	r2, [pc, #40]	; (41b0 <arch_swap+0x2c>)
    4186:	6893      	ldr	r3, [r2, #8]
    4188:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    418c:	4909      	ldr	r1, [pc, #36]	; (41b4 <arch_swap+0x30>)
    418e:	6809      	ldr	r1, [r1, #0]
    4190:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4194:	4908      	ldr	r1, [pc, #32]	; (41b8 <arch_swap+0x34>)
    4196:	684b      	ldr	r3, [r1, #4]
    4198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    419c:	604b      	str	r3, [r1, #4]
    419e:	2300      	movs	r3, #0
    41a0:	f383 8811 	msr	BASEPRI, r3
    41a4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    41a8:	6893      	ldr	r3, [r2, #8]
}
    41aa:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    41ae:	4770      	bx	lr
    41b0:	20020ec0 	.word	0x20020ec0
    41b4:	0006b960 	.word	0x0006b960
    41b8:	e000ed00 	.word	0xe000ed00

000041bc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    41bc:	4913      	ldr	r1, [pc, #76]	; (420c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    41be:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    41c0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    41c4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    41c6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    41ca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    41ce:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    41d0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    41d4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    41d8:	4f0d      	ldr	r7, [pc, #52]	; (4210 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    41da:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    41de:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    41e0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    41e2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    41e4:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    41e8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    41ea:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    41ee:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    41f2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    41f4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    41f6:	f000 fa79 	bl	46ec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    41fa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    41fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4202:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4206:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    420a:	4770      	bx	lr
    ldr r1, =_kernel
    420c:	20020ec0 	.word	0x20020ec0
    ldr v4, =_SCS_ICSR
    4210:	e000ed04 	.word	0xe000ed04

00004214 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4214:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4218:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    421a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    421e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4222:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4224:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4228:	2902      	cmp	r1, #2
    beq _oops
    422a:	d0ff      	beq.n	422c <_oops>

0000422c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    422c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    422e:	f00e f98d 	bl	1254c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4232:	bd01      	pop	{r0, pc}

00004234 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4234:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4236:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    423a:	490d      	ldr	r1, [pc, #52]	; (4270 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    423c:	f021 0101 	bic.w	r1, r1, #1
    4240:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4244:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4248:	9b01      	ldr	r3, [sp, #4]
    424a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    424e:	9b02      	ldr	r3, [sp, #8]
    4250:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4254:	9b03      	ldr	r3, [sp, #12]
    4256:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    425a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    425e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    4262:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4264:	2300      	movs	r3, #0
    4266:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    426a:	bc10      	pop	{r4}
    426c:	4770      	bx	lr
    426e:	bf00      	nop
    4270:	00011fd9 	.word	0x00011fd9

00004274 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4274:	4b16      	ldr	r3, [pc, #88]	; (42d0 <z_check_thread_stack_fail+0x5c>)
    4276:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    4278:	b1da      	cbz	r2, 42b2 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    427a:	f110 0f16 	cmn.w	r0, #22
    427e:	d01a      	beq.n	42b6 <z_check_thread_stack_fail+0x42>
{
    4280:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4282:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4286:	f1a3 0420 	sub.w	r4, r3, #32
    428a:	4284      	cmp	r4, r0
    428c:	d805      	bhi.n	429a <z_check_thread_stack_fail+0x26>
    428e:	4283      	cmp	r3, r0
    4290:	d908      	bls.n	42a4 <z_check_thread_stack_fail+0x30>
    4292:	428b      	cmp	r3, r1
    4294:	d808      	bhi.n	42a8 <z_check_thread_stack_fail+0x34>
    4296:	2100      	movs	r1, #0
    4298:	e000      	b.n	429c <z_check_thread_stack_fail+0x28>
    429a:	2100      	movs	r1, #0
    429c:	b931      	cbnz	r1, 42ac <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    429e:	2000      	movs	r0, #0
}
    42a0:	bc10      	pop	{r4}
    42a2:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    42a4:	2100      	movs	r1, #0
    42a6:	e7f9      	b.n	429c <z_check_thread_stack_fail+0x28>
    42a8:	2101      	movs	r1, #1
    42aa:	e7f7      	b.n	429c <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    42ac:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    42b0:	e7f6      	b.n	42a0 <z_check_thread_stack_fail+0x2c>
		return 0;
    42b2:	2000      	movs	r0, #0
    42b4:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    42b6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    42ba:	428b      	cmp	r3, r1
    42bc:	bf94      	ite	ls
    42be:	2100      	movls	r1, #0
    42c0:	2101      	movhi	r1, #1
    42c2:	b909      	cbnz	r1, 42c8 <z_check_thread_stack_fail+0x54>
	return 0;
    42c4:	2000      	movs	r0, #0
}
    42c6:	4770      	bx	lr
		return thread->stack_info.start;
    42c8:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    42cc:	4770      	bx	lr
    42ce:	bf00      	nop
    42d0:	20020ec0 	.word	0x20020ec0

000042d4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    42d4:	b508      	push	{r3, lr}
    42d6:	460d      	mov	r5, r1
    42d8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    42da:	4b08      	ldr	r3, [pc, #32]	; (42fc <arch_switch_to_main_thread+0x28>)
    42dc:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    42de:	f000 fa05 	bl	46ec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    42e2:	4620      	mov	r0, r4
    42e4:	f385 8809 	msr	PSP, r5
    42e8:	2100      	movs	r1, #0
    42ea:	b663      	cpsie	if
    42ec:	f381 8811 	msr	BASEPRI, r1
    42f0:	f3bf 8f6f 	isb	sy
    42f4:	2200      	movs	r2, #0
    42f6:	2300      	movs	r3, #0
    42f8:	f00d fe6e 	bl	11fd8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    42fc:	20020ec0 	.word	0x20020ec0

00004300 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4300:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4302:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4304:	4a0b      	ldr	r2, [pc, #44]	; (4334 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4306:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4308:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    430a:	bf1e      	ittt	ne
	movne	r1, #0
    430c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    430e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4310:	f011 fc7e 	blne	15c10 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4314:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4316:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    431a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    431e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4322:	4905      	ldr	r1, [pc, #20]	; (4338 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4324:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4326:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4328:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    432a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    432e:	4903      	ldr	r1, [pc, #12]	; (433c <_isr_wrapper+0x3c>)
	bx r1
    4330:	4708      	bx	r1
    4332:	0000      	.short	0x0000
	ldr r2, =_kernel
    4334:	20020ec0 	.word	0x20020ec0
	ldr r1, =_sw_isr_table
    4338:	00016c9c 	.word	0x00016c9c
	ldr r1, =z_arm_int_exit
    433c:	00004341 	.word	0x00004341

00004340 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4340:	4b04      	ldr	r3, [pc, #16]	; (4354 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4342:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4344:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4346:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4348:	d003      	beq.n	4352 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    434a:	4903      	ldr	r1, [pc, #12]	; (4358 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    434c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4350:	600a      	str	r2, [r1, #0]

00004352 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4352:	4770      	bx	lr
	ldr r3, =_kernel
    4354:	20020ec0 	.word	0x20020ec0
	ldr r1, =_SCS_ICSR
    4358:	e000ed04 	.word	0xe000ed04

0000435c <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    435c:	b510      	push	{r4, lr}
    435e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4360:	4b12      	ldr	r3, [pc, #72]	; (43ac <bus_fault+0x50>)
    4362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4368:	f413 7f00 	tst.w	r3, #512	; 0x200
    436c:	d00b      	beq.n	4386 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    436e:	4b0f      	ldr	r3, [pc, #60]	; (43ac <bus_fault+0x50>)
    4370:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4374:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4378:	d005      	beq.n	4386 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    437a:	b121      	cbz	r1, 4386 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    437c:	4a0b      	ldr	r2, [pc, #44]	; (43ac <bus_fault+0x50>)
    437e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4384:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4386:	4b09      	ldr	r3, [pc, #36]	; (43ac <bus_fault+0x50>)
    4388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    438c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4390:	d101      	bne.n	4396 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4392:	4b06      	ldr	r3, [pc, #24]	; (43ac <bus_fault+0x50>)
    4394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4396:	4a05      	ldr	r2, [pc, #20]	; (43ac <bus_fault+0x50>)
    4398:	6a93      	ldr	r3, [r2, #40]	; 0x28
    439a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    439e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    43a0:	2101      	movs	r1, #1
    43a2:	f00e f8ec 	bl	1257e <memory_fault_recoverable>
    43a6:	7020      	strb	r0, [r4, #0]

	return reason;
}
    43a8:	2000      	movs	r0, #0
    43aa:	bd10      	pop	{r4, pc}
    43ac:	e000ed00 	.word	0xe000ed00

000043b0 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    43b0:	4b07      	ldr	r3, [pc, #28]	; (43d0 <usage_fault+0x20>)
    43b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    43b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    43b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    43b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    43ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    43bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    43be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43c0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    43c4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    43c8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    43ca:	2000      	movs	r0, #0
    43cc:	4770      	bx	lr
    43ce:	bf00      	nop
    43d0:	e000ed00 	.word	0xe000ed00

000043d4 <mem_manage_fault>:
{
    43d4:	b570      	push	{r4, r5, r6, lr}
    43d6:	4605      	mov	r5, r0
    43d8:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43da:	4b20      	ldr	r3, [pc, #128]	; (445c <mem_manage_fault+0x88>)
    43dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    43de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    43e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43e2:	f013 0f02 	tst.w	r3, #2
    43e6:	d00c      	beq.n	4402 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    43e8:	4b1c      	ldr	r3, [pc, #112]	; (445c <mem_manage_fault+0x88>)
    43ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    43ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43ee:	f013 0f80 	tst.w	r3, #128	; 0x80
    43f2:	d025      	beq.n	4440 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    43f4:	b139      	cbz	r1, 4406 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    43f6:	4a19      	ldr	r2, [pc, #100]	; (445c <mem_manage_fault+0x88>)
    43f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    43fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    43fe:	6293      	str	r3, [r2, #40]	; 0x28
    4400:	e001      	b.n	4406 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    4402:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4406:	4b15      	ldr	r3, [pc, #84]	; (445c <mem_manage_fault+0x88>)
    4408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    440a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    440e:	f013 0f10 	tst.w	r3, #16
    4412:	d104      	bne.n	441e <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4414:	4b11      	ldr	r3, [pc, #68]	; (445c <mem_manage_fault+0x88>)
    4416:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4418:	f014 0402 	ands.w	r4, r4, #2
    441c:	d004      	beq.n	4428 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    441e:	4b0f      	ldr	r3, [pc, #60]	; (445c <mem_manage_fault+0x88>)
    4420:	685c      	ldr	r4, [r3, #4]
    4422:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    4426:	d10e      	bne.n	4446 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4428:	4a0c      	ldr	r2, [pc, #48]	; (445c <mem_manage_fault+0x88>)
    442a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    442c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4430:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4432:	2101      	movs	r1, #1
    4434:	4628      	mov	r0, r5
    4436:	f00e f8a2 	bl	1257e <memory_fault_recoverable>
    443a:	7030      	strb	r0, [r6, #0]
}
    443c:	4620      	mov	r0, r4
    443e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    4440:	f06f 0015 	mvn.w	r0, #21
    4444:	e7df      	b.n	4406 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4446:	4629      	mov	r1, r5
    4448:	f7ff ff14 	bl	4274 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    444c:	4604      	mov	r4, r0
    444e:	2800      	cmp	r0, #0
    4450:	d0ea      	beq.n	4428 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4452:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4456:	2402      	movs	r4, #2
    4458:	e7e6      	b.n	4428 <mem_manage_fault+0x54>
    445a:	bf00      	nop
    445c:	e000ed00 	.word	0xe000ed00

00004460 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4460:	b510      	push	{r4, lr}
    4462:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4464:	2300      	movs	r3, #0
    4466:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4468:	4b1b      	ldr	r3, [pc, #108]	; (44d8 <hard_fault+0x78>)
    446a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    446c:	f010 0002 	ands.w	r0, r0, #2
    4470:	d12d      	bne.n	44ce <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4474:	2b00      	cmp	r3, #0
    4476:	db2b      	blt.n	44d0 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4478:	4b17      	ldr	r3, [pc, #92]	; (44d8 <hard_fault+0x78>)
    447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    447c:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    4480:	d027      	beq.n	44d2 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4482:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4484:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4488:	f64d 7302 	movw	r3, #57090	; 0xdf02
    448c:	429a      	cmp	r2, r3
    448e:	d010      	beq.n	44b2 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    4490:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4494:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	b963      	cbnz	r3, 44b6 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    449c:	4b0f      	ldr	r3, [pc, #60]	; (44dc <hard_fault+0x7c>)
    449e:	781b      	ldrb	r3, [r3, #0]
    44a0:	b97b      	cbnz	r3, 44c2 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    44a2:	4b0f      	ldr	r3, [pc, #60]	; (44e0 <hard_fault+0x80>)
    44a4:	881b      	ldrh	r3, [r3, #0]
    44a6:	b29b      	uxth	r3, r3
    44a8:	b193      	cbz	r3, 44d0 <hard_fault+0x70>
			reason = usage_fault(esf);
    44aa:	4620      	mov	r0, r4
    44ac:	f7ff ff80 	bl	43b0 <usage_fault>
    44b0:	e00e      	b.n	44d0 <hard_fault+0x70>
			reason = esf->basic.r0;
    44b2:	6820      	ldr	r0, [r4, #0]
    44b4:	e00c      	b.n	44d0 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    44b6:	460a      	mov	r2, r1
    44b8:	2101      	movs	r1, #1
    44ba:	4620      	mov	r0, r4
    44bc:	f7ff ff8a 	bl	43d4 <mem_manage_fault>
    44c0:	e006      	b.n	44d0 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    44c2:	460a      	mov	r2, r1
    44c4:	2101      	movs	r1, #1
    44c6:	4620      	mov	r0, r4
    44c8:	f7ff ff48 	bl	435c <bus_fault>
    44cc:	e000      	b.n	44d0 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44ce:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    44d0:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44d2:	4618      	mov	r0, r3
	return reason;
    44d4:	e7fc      	b.n	44d0 <hard_fault+0x70>
    44d6:	bf00      	nop
    44d8:	e000ed00 	.word	0xe000ed00
    44dc:	e000ed29 	.word	0xe000ed29
    44e0:	e000ed2a 	.word	0xe000ed2a

000044e4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    44e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44e6:	b08b      	sub	sp, #44	; 0x2c
    44e8:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    44ea:	4b25      	ldr	r3, [pc, #148]	; (4580 <z_arm_fault+0x9c>)
    44ec:	6859      	ldr	r1, [r3, #4]
    44ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
    44f2:	2300      	movs	r3, #0
    44f4:	f383 8811 	msr	BASEPRI, r3
    44f8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    44fc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4500:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4504:	d115      	bne.n	4532 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4506:	f002 030c 	and.w	r3, r2, #12
    450a:	2b08      	cmp	r3, #8
    450c:	d014      	beq.n	4538 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    450e:	f012 0f08 	tst.w	r2, #8
    4512:	d00b      	beq.n	452c <z_arm_fault+0x48>
	*nested_exc = false;
    4514:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4516:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    451a:	4620      	mov	r0, r4
    451c:	f00e f834 	bl	12588 <fault_handle>
    4520:	4606      	mov	r6, r0
	if (recoverable) {
    4522:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4526:	b153      	cbz	r3, 453e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4528:	b00b      	add	sp, #44	; 0x2c
    452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    452c:	4604      	mov	r4, r0
			*nested_exc = true;
    452e:	2701      	movs	r7, #1
    4530:	e7f1      	b.n	4516 <z_arm_fault+0x32>
	*nested_exc = false;
    4532:	2700      	movs	r7, #0
		return NULL;
    4534:	463c      	mov	r4, r7
    4536:	e7ee      	b.n	4516 <z_arm_fault+0x32>
	*nested_exc = false;
    4538:	2700      	movs	r7, #0
		return NULL;
    453a:	463c      	mov	r4, r7
    453c:	e7eb      	b.n	4516 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    453e:	ad01      	add	r5, sp, #4
    4540:	6820      	ldr	r0, [r4, #0]
    4542:	6861      	ldr	r1, [r4, #4]
    4544:	68a2      	ldr	r2, [r4, #8]
    4546:	68e3      	ldr	r3, [r4, #12]
    4548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    454a:	6920      	ldr	r0, [r4, #16]
    454c:	6961      	ldr	r1, [r4, #20]
    454e:	69a2      	ldr	r2, [r4, #24]
    4550:	69e3      	ldr	r3, [r4, #28]
    4552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    4554:	b14f      	cbz	r7, 456a <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4556:	9b08      	ldr	r3, [sp, #32]
    4558:	f3c3 0208 	ubfx	r2, r3, #0, #9
    455c:	b95a      	cbnz	r2, 4576 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    455e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4562:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4566:	9308      	str	r3, [sp, #32]
    4568:	e005      	b.n	4576 <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    456a:	9b08      	ldr	r3, [sp, #32]
    456c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4570:	f023 0301 	bic.w	r3, r3, #1
    4574:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4576:	a901      	add	r1, sp, #4
    4578:	4630      	mov	r0, r6
    457a:	f00d ffe3 	bl	12544 <z_arm_fatal_error>
    457e:	e7d3      	b.n	4528 <z_arm_fault+0x44>
    4580:	e000ed00 	.word	0xe000ed00

00004584 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4584:	4a02      	ldr	r2, [pc, #8]	; (4590 <z_arm_fault_init+0xc>)
    4586:	6953      	ldr	r3, [r2, #20]
    4588:	f043 0310 	orr.w	r3, r3, #16
    458c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    458e:	4770      	bx	lr
    4590:	e000ed00 	.word	0xe000ed00

00004594 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4594:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4598:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    459c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    459e:	4672      	mov	r2, lr
	bl z_arm_fault
    45a0:	f7ff ffa0 	bl	44e4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    45a4:	bd01      	pop	{r0, pc}
    45a6:	bf00      	nop

000045a8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    45a8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    45aa:	e006      	b.n	45ba <z_arm_interrupt_init+0x12>
    45ac:	f002 010f 	and.w	r1, r2, #15
    45b0:	4b09      	ldr	r3, [pc, #36]	; (45d8 <z_arm_interrupt_init+0x30>)
    45b2:	440b      	add	r3, r1
    45b4:	2120      	movs	r1, #32
    45b6:	7619      	strb	r1, [r3, #24]
    45b8:	3201      	adds	r2, #1
    45ba:	2a2f      	cmp	r2, #47	; 0x2f
    45bc:	dc0a      	bgt.n	45d4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    45be:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    45c0:	2b00      	cmp	r3, #0
    45c2:	dbf3      	blt.n	45ac <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    45c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    45c8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    45cc:	2120      	movs	r1, #32
    45ce:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    45d2:	e7f1      	b.n	45b8 <z_arm_interrupt_init+0x10>
	}
}
    45d4:	4770      	bx	lr
    45d6:	bf00      	nop
    45d8:	e000ecfc 	.word	0xe000ecfc

000045dc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    45dc:	2000      	movs	r0, #0
    msr CONTROL, r0
    45de:	f380 8814 	msr	CONTROL, r0
    isb
    45e2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    45e6:	f012 fad3 	bl	16b90 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    45ea:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    45ec:	490d      	ldr	r1, [pc, #52]	; (4624 <__start+0x48>)
    str r0, [r1]
    45ee:	6008      	str	r0, [r1, #0]
    dsb
    45f0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    45f4:	480c      	ldr	r0, [pc, #48]	; (4628 <__start+0x4c>)
    msr msp, r0
    45f6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    45fa:	f000 f829 	bl	4650 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    45fe:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4600:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4604:	4809      	ldr	r0, [pc, #36]	; (462c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4606:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    460a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    460c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4610:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4614:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4616:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4618:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    461c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4620:	f7ff fd94 	bl	414c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4624:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4628:	20029100 	.word	0x20029100
    ldr r0, =z_interrupt_stacks
    462c:	20029280 	.word	0x20029280

00004630 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4630:	4b06      	ldr	r3, [pc, #24]	; (464c <z_arm_clear_arm_mpu_config+0x1c>)
    4632:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4634:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4638:	2300      	movs	r3, #0
    463a:	4283      	cmp	r3, r0
    463c:	da05      	bge.n	464a <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    463e:	4a03      	ldr	r2, [pc, #12]	; (464c <z_arm_clear_arm_mpu_config+0x1c>)
    4640:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4642:	2100      	movs	r1, #0
    4644:	6111      	str	r1, [r2, #16]
    4646:	3301      	adds	r3, #1
    4648:	e7f7      	b.n	463a <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    464a:	4770      	bx	lr
    464c:	e000ed90 	.word	0xe000ed90

00004650 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4650:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4652:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4654:	2400      	movs	r4, #0
    4656:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    465a:	f7ff ffe9 	bl	4630 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    465e:	4623      	mov	r3, r4
    4660:	e008      	b.n	4674 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4662:	f103 0120 	add.w	r1, r3, #32
    4666:	4a0e      	ldr	r2, [pc, #56]	; (46a0 <z_arm_init_arch_hw_at_boot+0x50>)
    4668:	f04f 30ff 	mov.w	r0, #4294967295
    466c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4670:	3301      	adds	r3, #1
    4672:	b2db      	uxtb	r3, r3
    4674:	2b07      	cmp	r3, #7
    4676:	d9f4      	bls.n	4662 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4678:	2300      	movs	r3, #0
    467a:	e008      	b.n	468e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    467c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4680:	4a07      	ldr	r2, [pc, #28]	; (46a0 <z_arm_init_arch_hw_at_boot+0x50>)
    4682:	f04f 30ff 	mov.w	r0, #4294967295
    4686:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    468a:	3301      	adds	r3, #1
    468c:	b2db      	uxtb	r3, r3
    468e:	2b07      	cmp	r3, #7
    4690:	d9f4      	bls.n	467c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4692:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4698:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    469c:	bd10      	pop	{r4, pc}
    469e:	bf00      	nop
    46a0:	e000e100 	.word	0xe000e100

000046a4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    46a4:	b508      	push	{r3, lr}
	if (_current == thread) {
    46a6:	4b08      	ldr	r3, [pc, #32]	; (46c8 <z_impl_k_thread_abort+0x24>)
    46a8:	689b      	ldr	r3, [r3, #8]
    46aa:	4283      	cmp	r3, r0
    46ac:	d002      	beq.n	46b4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    46ae:	f00b faad 	bl	fc0c <z_thread_abort>
}
    46b2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    46b4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    46b8:	2b00      	cmp	r3, #0
    46ba:	d0f8      	beq.n	46ae <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    46bc:	4a03      	ldr	r2, [pc, #12]	; (46cc <z_impl_k_thread_abort+0x28>)
    46be:	6853      	ldr	r3, [r2, #4]
    46c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    46c4:	6053      	str	r3, [r2, #4]
    46c6:	e7f2      	b.n	46ae <z_impl_k_thread_abort+0xa>
    46c8:	20020ec0 	.word	0x20020ec0
    46cc:	e000ed00 	.word	0xe000ed00

000046d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    46d0:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    46d2:	4b03      	ldr	r3, [pc, #12]	; (46e0 <z_arm_configure_static_mpu_regions+0x10>)
    46d4:	4a03      	ldr	r2, [pc, #12]	; (46e4 <z_arm_configure_static_mpu_regions+0x14>)
    46d6:	2101      	movs	r1, #1
    46d8:	4803      	ldr	r0, [pc, #12]	; (46e8 <z_arm_configure_static_mpu_regions+0x18>)
    46da:	f00d ffdb 	bl	12694 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    46de:	bd08      	pop	{r3, pc}
    46e0:	20040000 	.word	0x20040000
    46e4:	20000000 	.word	0x20000000
    46e8:	00068d0c 	.word	0x00068d0c

000046ec <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    46ec:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    46ee:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    46f2:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    46f4:	4804      	ldr	r0, [pc, #16]	; (4708 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    46f6:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    46f8:	2320      	movs	r3, #32
    46fa:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    46fc:	4b03      	ldr	r3, [pc, #12]	; (470c <z_arm_configure_dynamic_mpu_regions+0x20>)
    46fe:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4700:	2101      	movs	r1, #1
    4702:	f00d ffcb 	bl	1269c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4706:	bd08      	pop	{r3, pc}
    4708:	20020894 	.word	0x20020894
    470c:	150b0000 	.word	0x150b0000

00004710 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4710:	4a06      	ldr	r2, [pc, #24]	; (472c <region_init+0x1c>)
    4712:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4714:	680b      	ldr	r3, [r1, #0]
    4716:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    471a:	4303      	orrs	r3, r0
    471c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4720:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4722:	688b      	ldr	r3, [r1, #8]
    4724:	f043 0301 	orr.w	r3, r3, #1
    4728:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    472a:	4770      	bx	lr
    472c:	e000ed90 	.word	0xe000ed90

00004730 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4730:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4732:	4c03      	ldr	r4, [pc, #12]	; (4740 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4734:	2301      	movs	r3, #1
    4736:	7822      	ldrb	r2, [r4, #0]
    4738:	f00d ff84 	bl	12644 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    473c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    473e:	bd10      	pop	{r4, pc}
    4740:	20020f2d 	.word	0x20020f2d

00004744 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4744:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4746:	2300      	movs	r3, #0
    4748:	4a08      	ldr	r2, [pc, #32]	; (476c <mpu_configure_dynamic_mpu_regions+0x28>)
    474a:	7812      	ldrb	r2, [r2, #0]
    474c:	f00d ff7a 	bl	12644 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4750:	f110 0f16 	cmn.w	r0, #22
    4754:	d008      	beq.n	4768 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4756:	4603      	mov	r3, r0
    4758:	2b07      	cmp	r3, #7
    475a:	dc05      	bgt.n	4768 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    475c:	4a04      	ldr	r2, [pc, #16]	; (4770 <mpu_configure_dynamic_mpu_regions+0x2c>)
    475e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4760:	2100      	movs	r1, #0
    4762:	6111      	str	r1, [r2, #16]
    4764:	3301      	adds	r3, #1
    4766:	e7f7      	b.n	4758 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4768:	bd08      	pop	{r3, pc}
    476a:	bf00      	nop
    476c:	20020f2d 	.word	0x20020f2d
    4770:	e000ed90 	.word	0xe000ed90

00004774 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4774:	4b03      	ldr	r3, [pc, #12]	; (4784 <arm_core_mpu_enable+0x10>)
    4776:	2205      	movs	r2, #5
    4778:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    477a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    477e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4782:	4770      	bx	lr
    4784:	e000ed90 	.word	0xe000ed90

00004788 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4788:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    478c:	4b01      	ldr	r3, [pc, #4]	; (4794 <arm_core_mpu_disable+0xc>)
    478e:	2200      	movs	r2, #0
    4790:	605a      	str	r2, [r3, #4]
}
    4792:	4770      	bx	lr
    4794:	e000ed90 	.word	0xe000ed90

00004798 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4798:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    479a:	4b0e      	ldr	r3, [pc, #56]	; (47d4 <z_arm_mpu_init+0x3c>)
    479c:	681d      	ldr	r5, [r3, #0]
    479e:	2d08      	cmp	r5, #8
    47a0:	d815      	bhi.n	47ce <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    47a2:	f7ff fff1 	bl	4788 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    47a6:	2400      	movs	r4, #0
    47a8:	42a5      	cmp	r5, r4
    47aa:	d90a      	bls.n	47c2 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    47ac:	4b09      	ldr	r3, [pc, #36]	; (47d4 <z_arm_mpu_init+0x3c>)
    47ae:	6859      	ldr	r1, [r3, #4]
    47b0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    47b4:	0093      	lsls	r3, r2, #2
    47b6:	4419      	add	r1, r3
    47b8:	4620      	mov	r0, r4
    47ba:	f7ff ffa9 	bl	4710 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    47be:	3401      	adds	r4, #1
    47c0:	e7f2      	b.n	47a8 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    47c2:	4b05      	ldr	r3, [pc, #20]	; (47d8 <z_arm_mpu_init+0x40>)
    47c4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    47c6:	f7ff ffd5 	bl	4774 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    47ca:	2000      	movs	r0, #0
}
    47cc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    47ce:	f04f 30ff 	mov.w	r0, #4294967295
    47d2:	e7fb      	b.n	47cc <z_arm_mpu_init+0x34>
    47d4:	00068d30 	.word	0x00068d30
    47d8:	20020f2d 	.word	0x20020f2d

000047dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    47dc:	4b01      	ldr	r3, [pc, #4]	; (47e4 <__stdout_hook_install+0x8>)
    47de:	6018      	str	r0, [r3, #0]
}
    47e0:	4770      	bx	lr
    47e2:	bf00      	nop
    47e4:	2000002c 	.word	0x2000002c

000047e8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    47e8:	b570      	push	{r4, r5, r6, lr}
    47ea:	4606      	mov	r6, r0
    47ec:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    47ee:	2400      	movs	r4, #0
    47f0:	e000      	b.n	47f4 <z_impl_zephyr_read_stdin+0xc>
    47f2:	3401      	adds	r4, #1
    47f4:	42ac      	cmp	r4, r5
    47f6:	da08      	bge.n	480a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    47f8:	4b05      	ldr	r3, [pc, #20]	; (4810 <z_impl_zephyr_read_stdin+0x28>)
    47fa:	681b      	ldr	r3, [r3, #0]
    47fc:	4798      	blx	r3
    47fe:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4800:	280a      	cmp	r0, #10
    4802:	d001      	beq.n	4808 <z_impl_zephyr_read_stdin+0x20>
    4804:	280d      	cmp	r0, #13
    4806:	d1f4      	bne.n	47f2 <z_impl_zephyr_read_stdin+0xa>
			i++;
    4808:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    480a:	4620      	mov	r0, r4
    480c:	bd70      	pop	{r4, r5, r6, pc}
    480e:	bf00      	nop
    4810:	20000028 	.word	0x20000028

00004814 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4816:	4605      	mov	r5, r0
    4818:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    481a:	2400      	movs	r4, #0
    481c:	e004      	b.n	4828 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    481e:	4b09      	ldr	r3, [pc, #36]	; (4844 <z_impl_zephyr_write_stdout+0x30>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	7830      	ldrb	r0, [r6, #0]
    4824:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4826:	3401      	adds	r4, #1
    4828:	42bc      	cmp	r4, r7
    482a:	da08      	bge.n	483e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    482c:	192e      	adds	r6, r5, r4
    482e:	5d2b      	ldrb	r3, [r5, r4]
    4830:	2b0a      	cmp	r3, #10
    4832:	d1f4      	bne.n	481e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    4834:	4b03      	ldr	r3, [pc, #12]	; (4844 <z_impl_zephyr_write_stdout+0x30>)
    4836:	681b      	ldr	r3, [r3, #0]
    4838:	200d      	movs	r0, #13
    483a:	4798      	blx	r3
    483c:	e7ef      	b.n	481e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    483e:	4638      	mov	r0, r7
    4840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4842:	bf00      	nop
    4844:	2000002c 	.word	0x2000002c

00004848 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4848:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    484a:	2205      	movs	r2, #5
    484c:	4902      	ldr	r1, [pc, #8]	; (4858 <_exit+0x10>)
    484e:	2001      	movs	r0, #1
    4850:	f00d ff35 	bl	126be <_write>
	while (1) {
    4854:	e7fe      	b.n	4854 <_exit+0xc>
    4856:	bf00      	nop
    4858:	00068d18 	.word	0x00068d18

0000485c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    485c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    485e:	4b08      	ldr	r3, [pc, #32]	; (4880 <_sbrk+0x24>)
    4860:	6819      	ldr	r1, [r3, #0]
    4862:	4b08      	ldr	r3, [pc, #32]	; (4884 <_sbrk+0x28>)
    4864:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4866:	440a      	add	r2, r1
    4868:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    486c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    4870:	429a      	cmp	r2, r3
    4872:	d202      	bcs.n	487a <_sbrk+0x1e>
		heap_sz += count;
    4874:	4b02      	ldr	r3, [pc, #8]	; (4880 <_sbrk+0x24>)
    4876:	601a      	str	r2, [r3, #0]
		ret = ptr;
    4878:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    487a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    487e:	4770      	bx	lr
    4880:	200208a0 	.word	0x200208a0
    4884:	20029aa0 	.word	0x20029aa0

00004888 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4888:	f04f 0320 	mov.w	r3, #32
    488c:	f3ef 8211 	mrs	r2, BASEPRI
    4890:	f383 8812 	msr	BASEPRI_MAX, r3
    4894:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4898:	2301      	movs	r3, #1
    489a:	4906      	ldr	r1, [pc, #24]	; (48b4 <nordicsemi_nrf52_init+0x2c>)
    489c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    48a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    48a4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    48a8:	f382 8811 	msr	BASEPRI, r2
    48ac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    48b0:	2000      	movs	r0, #0
    48b2:	4770      	bx	lr
    48b4:	4001e000 	.word	0x4001e000

000048b8 <sys_arch_reboot>:
    *p_gpregret = val;
    48b8:	b2c0      	uxtb	r0, r0
    48ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48be:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    48c2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    48c6:	4905      	ldr	r1, [pc, #20]	; (48dc <sys_arch_reboot+0x24>)
    48c8:	68ca      	ldr	r2, [r1, #12]
    48ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    48ce:	4b04      	ldr	r3, [pc, #16]	; (48e0 <sys_arch_reboot+0x28>)
    48d0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    48d2:	60cb      	str	r3, [r1, #12]
    48d4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    48d8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    48da:	e7fd      	b.n	48d8 <sys_arch_reboot+0x20>
    48dc:	e000ed00 	.word	0xe000ed00
    48e0:	05fa0004 	.word	0x05fa0004

000048e4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    48e4:	b130      	cbz	r0, 48f4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    48e6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    48e8:	0180      	lsls	r0, r0, #6
    48ea:	4b03      	ldr	r3, [pc, #12]	; (48f8 <arch_busy_wait+0x14>)
    48ec:	f043 0301 	orr.w	r3, r3, #1
    48f0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    48f2:	bd08      	pop	{r3, pc}
    48f4:	4770      	bx	lr
    48f6:	bf00      	nop
    48f8:	00068560 	.word	0x00068560

000048fc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    48fc:	4800      	ldr	r0, [pc, #0]	; (4900 <get_hf_flags+0x4>)
    48fe:	4770      	bx	lr
    4900:	200208fc 	.word	0x200208fc

00004904 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4904:	4b01      	ldr	r3, [pc, #4]	; (490c <get_subsys+0x8>)
    4906:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4908:	1140      	asrs	r0, r0, #5
    490a:	4770      	bx	lr
    490c:	200208b4 	.word	0x200208b4

00004910 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4910:	b538      	push	{r3, r4, r5, lr}
    4912:	4605      	mov	r5, r0
    4914:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4916:	f7ff fff5 	bl	4904 <get_subsys>
    491a:	4601      	mov	r1, r0
    491c:	2240      	movs	r2, #64	; 0x40
    491e:	4803      	ldr	r0, [pc, #12]	; (492c <onoff_stop+0x1c>)
    4920:	f00d ff92 	bl	12848 <stop>
    4924:	4601      	mov	r1, r0
	notify(mgr, res);
    4926:	4628      	mov	r0, r5
    4928:	47a0      	blx	r4
}
    492a:	bd38      	pop	{r3, r4, r5, pc}
    492c:	00016c0c 	.word	0x00016c0c

00004930 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4930:	b530      	push	{r4, r5, lr}
    4932:	b083      	sub	sp, #12
    4934:	4605      	mov	r5, r0
    4936:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4938:	f7ff ffe4 	bl	4904 <get_subsys>
    493c:	4601      	mov	r1, r0
    493e:	2340      	movs	r3, #64	; 0x40
    4940:	9300      	str	r3, [sp, #0]
    4942:	4623      	mov	r3, r4
    4944:	4a05      	ldr	r2, [pc, #20]	; (495c <onoff_start+0x2c>)
    4946:	4806      	ldr	r0, [pc, #24]	; (4960 <onoff_start+0x30>)
    4948:	f00d ff98 	bl	1287c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    494c:	1e01      	subs	r1, r0, #0
    494e:	db01      	blt.n	4954 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4950:	b003      	add	sp, #12
    4952:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4954:	4628      	mov	r0, r5
    4956:	47a0      	blx	r4
}
    4958:	e7fa      	b.n	4950 <onoff_start+0x20>
    495a:	bf00      	nop
    495c:	000128c5 	.word	0x000128c5
    4960:	00016c0c 	.word	0x00016c0c

00004964 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4964:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4966:	b110      	cbz	r0, 496e <clock_event_handler+0xa>
    4968:	2801      	cmp	r0, #1
    496a:	d00d      	beq.n	4988 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    496c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    496e:	2100      	movs	r1, #0
    4970:	4808      	ldr	r0, [pc, #32]	; (4994 <clock_event_handler+0x30>)
    4972:	f00d fef4 	bl	1275e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4976:	6883      	ldr	r3, [r0, #8]
    4978:	f013 0f07 	tst.w	r3, #7
    497c:	d1f6      	bne.n	496c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    497e:	2100      	movs	r1, #0
    4980:	4804      	ldr	r0, [pc, #16]	; (4994 <clock_event_handler+0x30>)
    4982:	f00d ff4f 	bl	12824 <clkstarted_handle>
    4986:	e7f1      	b.n	496c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4988:	2101      	movs	r1, #1
    498a:	4802      	ldr	r0, [pc, #8]	; (4994 <clock_event_handler+0x30>)
    498c:	f00d ff4a 	bl	12824 <clkstarted_handle>
}
    4990:	e7ec      	b.n	496c <clock_event_handler+0x8>
    4992:	bf00      	nop
    4994:	00016c0c 	.word	0x00016c0c

00004998 <generic_hfclk_start>:
{
    4998:	b510      	push	{r4, lr}
	__asm__ volatile(
    499a:	f04f 0320 	mov.w	r3, #32
    499e:	f3ef 8411 	mrs	r4, BASEPRI
    49a2:	f383 8812 	msr	BASEPRI_MAX, r3
    49a6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    49aa:	4a13      	ldr	r2, [pc, #76]	; (49f8 <generic_hfclk_start+0x60>)
    49ac:	6813      	ldr	r3, [r2, #0]
    49ae:	f043 0302 	orr.w	r3, r3, #2
    49b2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    49b4:	f013 0f01 	tst.w	r3, #1
    49b8:	d108      	bne.n	49cc <generic_hfclk_start+0x34>
	bool already_started = false;
    49ba:	2300      	movs	r3, #0
	__asm__ volatile(
    49bc:	f384 8811 	msr	BASEPRI, r4
    49c0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    49c4:	b99b      	cbnz	r3, 49ee <generic_hfclk_start+0x56>
	hfclk_start();
    49c6:	f00d ff85 	bl	128d4 <hfclk_start>
}
    49ca:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    49cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49d0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    49d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    49d8:	f012 0f01 	tst.w	r2, #1
    49dc:	d101      	bne.n	49e2 <generic_hfclk_start+0x4a>
	bool already_started = false;
    49de:	2300      	movs	r3, #0
    49e0:	e7ec      	b.n	49bc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    49e2:	f7ff ff8b 	bl	48fc <get_hf_flags>
    49e6:	f00d ff0a 	bl	127fe <set_on_state>
			already_started = true;
    49ea:	2301      	movs	r3, #1
    49ec:	e7e6      	b.n	49bc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    49ee:	2100      	movs	r1, #0
    49f0:	4802      	ldr	r0, [pc, #8]	; (49fc <generic_hfclk_start+0x64>)
    49f2:	f00d ff17 	bl	12824 <clkstarted_handle>
		return;
    49f6:	e7e8      	b.n	49ca <generic_hfclk_start+0x32>
    49f8:	2002090c 	.word	0x2002090c
    49fc:	00016c0c 	.word	0x00016c0c

00004a00 <generic_hfclk_stop>:
{
    4a00:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a02:	4b0a      	ldr	r3, [pc, #40]	; (4a2c <generic_hfclk_stop+0x2c>)
    4a04:	f3bf 8f5b 	dmb	ish
    4a08:	e853 2f00 	ldrex	r2, [r3]
    4a0c:	f022 0102 	bic.w	r1, r2, #2
    4a10:	e843 1000 	strex	r0, r1, [r3]
    4a14:	2800      	cmp	r0, #0
    4a16:	d1f7      	bne.n	4a08 <generic_hfclk_stop+0x8>
    4a18:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4a1c:	f012 0f01 	tst.w	r2, #1
    4a20:	d000      	beq.n	4a24 <generic_hfclk_stop+0x24>
}
    4a22:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4a24:	f00d ff60 	bl	128e8 <hfclk_stop>
    4a28:	e7fb      	b.n	4a22 <generic_hfclk_stop+0x22>
    4a2a:	bf00      	nop
    4a2c:	2002090c 	.word	0x2002090c

00004a30 <api_blocking_start>:
{
    4a30:	b500      	push	{lr}
    4a32:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4a34:	f8cd d000 	str.w	sp, [sp]
    4a38:	f8cd d004 	str.w	sp, [sp, #4]
    4a3c:	2300      	movs	r3, #0
    4a3e:	9302      	str	r3, [sp, #8]
    4a40:	2301      	movs	r3, #1
    4a42:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4a44:	466b      	mov	r3, sp
    4a46:	4a07      	ldr	r2, [pc, #28]	; (4a64 <api_blocking_start+0x34>)
    4a48:	f00d ff34 	bl	128b4 <api_start>
	if (err < 0) {
    4a4c:	2800      	cmp	r0, #0
    4a4e:	db05      	blt.n	4a5c <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4a54:	2300      	movs	r3, #0
    4a56:	4668      	mov	r0, sp
    4a58:	f00a fcea 	bl	f430 <z_impl_k_sem_take>
}
    4a5c:	b005      	add	sp, #20
    4a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    4a62:	bf00      	nop
    4a64:	000128fd 	.word	0x000128fd

00004a68 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4a68:	b570      	push	{r4, r5, r6, lr}
    4a6a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4a6c:	2200      	movs	r2, #0
    4a6e:	2101      	movs	r1, #1
    4a70:	4610      	mov	r0, r2
    4a72:	f7ff fb51 	bl	4118 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4a76:	2000      	movs	r0, #0
    4a78:	f7ff fb30 	bl	40dc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4a7c:	4811      	ldr	r0, [pc, #68]	; (4ac4 <clk_init+0x5c>)
    4a7e:	f001 f969 	bl	5d54 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4a82:	4b11      	ldr	r3, [pc, #68]	; (4ac8 <clk_init+0x60>)
    4a84:	4298      	cmp	r0, r3
    4a86:	d11a      	bne.n	4abe <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4a88:	f00e fa66 	bl	12f58 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4a8c:	2400      	movs	r4, #0
    4a8e:	e003      	b.n	4a98 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4a90:	2301      	movs	r3, #1
    4a92:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4a94:	441c      	add	r4, r3
    4a96:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    4a98:	2c01      	cmp	r4, #1
    4a9a:	d80e      	bhi.n	4aba <clk_init+0x52>
						get_sub_data(dev, i);
    4a9c:	4621      	mov	r1, r4
    4a9e:	4630      	mov	r0, r6
    4aa0:	f00d fe5d 	bl	1275e <get_sub_data>
    4aa4:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4aa6:	4621      	mov	r1, r4
    4aa8:	4630      	mov	r0, r6
    4aaa:	f00d fe63 	bl	12774 <get_onoff_manager>
    4aae:	4907      	ldr	r1, [pc, #28]	; (4acc <clk_init+0x64>)
    4ab0:	f00d fa1a 	bl	11ee8 <onoff_manager_init>
		if (err < 0) {
    4ab4:	2800      	cmp	r0, #0
    4ab6:	daeb      	bge.n	4a90 <clk_init+0x28>
    4ab8:	e000      	b.n	4abc <clk_init+0x54>
	}

	return 0;
    4aba:	2000      	movs	r0, #0
}
    4abc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4abe:	f06f 0004 	mvn.w	r0, #4
    4ac2:	e7fb      	b.n	4abc <clk_init+0x54>
    4ac4:	00004965 	.word	0x00004965
    4ac8:	0bad0000 	.word	0x0bad0000
    4acc:	00068d7c 	.word	0x00068d7c

00004ad0 <lfclk_spinwait>:
{
    4ad0:	b570      	push	{r4, r5, r6, lr}
    4ad2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4ad4:	2801      	cmp	r0, #1
    4ad6:	d107      	bne.n	4ae8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4adc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4ae0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4ae4:	2b01      	cmp	r3, #1
    4ae6:	d058      	beq.n	4b9a <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4ae8:	f011 f87d 	bl	15be6 <k_is_in_isr>
    4aec:	b928      	cbnz	r0, 4afa <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    4aee:	4b2e      	ldr	r3, [pc, #184]	; (4ba8 <lfclk_spinwait+0xd8>)
    4af0:	781b      	ldrb	r3, [r3, #0]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d041      	beq.n	4b7a <lfclk_spinwait+0xaa>
    4af6:	2300      	movs	r3, #0
    4af8:	e000      	b.n	4afc <lfclk_spinwait+0x2c>
    4afa:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4afc:	461c      	mov	r4, r3
    4afe:	2b00      	cmp	r3, #0
    4b00:	d03d      	beq.n	4b7e <lfclk_spinwait+0xae>
	__asm__ volatile(
    4b02:	f04f 0320 	mov.w	r3, #32
    4b06:	f3ef 8611 	mrs	r6, BASEPRI
    4b0a:	f383 8812 	msr	BASEPRI_MAX, r3
    4b0e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4b12:	b924      	cbnz	r4, 4b1e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    4b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b18:	2202      	movs	r2, #2
    4b1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4b22:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4b26:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b2a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4b2e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4b32:	d12b      	bne.n	4b8c <lfclk_spinwait+0xbc>
    return false;
    4b34:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4b36:	b11a      	cbz	r2, 4b40 <lfclk_spinwait+0x70>
    4b38:	2b01      	cmp	r3, #1
    4b3a:	d029      	beq.n	4b90 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4b3c:	2d01      	cmp	r5, #1
    4b3e:	d027      	beq.n	4b90 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4b40:	b1fc      	cbz	r4, 4b82 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4b42:	4630      	mov	r0, r6
    4b44:	f7ff fac0 	bl	40c8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b4c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4b50:	2b00      	cmp	r3, #0
    4b52:	d1e4      	bne.n	4b1e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4b54:	4b15      	ldr	r3, [pc, #84]	; (4bac <lfclk_spinwait+0xdc>)
    4b56:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d0e0      	beq.n	4b1e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b5c:	4b13      	ldr	r3, [pc, #76]	; (4bac <lfclk_spinwait+0xdc>)
    4b5e:	2200      	movs	r2, #0
    4b60:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4b62:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4b64:	2301      	movs	r3, #1
    4b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4b6a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b6e:	4a10      	ldr	r2, [pc, #64]	; (4bb0 <lfclk_spinwait+0xe0>)
    4b70:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b74:	4a0f      	ldr	r2, [pc, #60]	; (4bb4 <lfclk_spinwait+0xe4>)
    4b76:	6013      	str	r3, [r2, #0]
}
    4b78:	e7d1      	b.n	4b1e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4b7a:	2301      	movs	r3, #1
    4b7c:	e7be      	b.n	4afc <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    4b7e:	2600      	movs	r6, #0
    4b80:	e7c7      	b.n	4b12 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4b82:	2021      	movs	r0, #33	; 0x21
    4b84:	2100      	movs	r1, #0
    4b86:	f00b f80f 	bl	fba8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4b8a:	e7dd      	b.n	4b48 <lfclk_spinwait+0x78>
                return true;
    4b8c:	2201      	movs	r2, #1
    4b8e:	e7d2      	b.n	4b36 <lfclk_spinwait+0x66>
	if (isr_mode) {
    4b90:	b124      	cbz	r4, 4b9c <lfclk_spinwait+0xcc>
	__asm__ volatile(
    4b92:	f386 8811 	msr	BASEPRI, r6
    4b96:	f3bf 8f6f 	isb	sy
}
    4b9a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    4b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ba0:	2202      	movs	r2, #2
    4ba2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4ba6:	e7f8      	b.n	4b9a <lfclk_spinwait+0xca>
    4ba8:	20020f2f 	.word	0x20020f2f
    4bac:	40000104 	.word	0x40000104
    4bb0:	e000e100 	.word	0xe000e100
    4bb4:	40000008 	.word	0x40000008

00004bb8 <z_nrf_clock_control_lf_on>:
{
    4bb8:	b510      	push	{r4, lr}
    4bba:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4bbc:	4b10      	ldr	r3, [pc, #64]	; (4c00 <z_nrf_clock_control_lf_on+0x48>)
    4bbe:	2101      	movs	r1, #1
    4bc0:	f3bf 8f5b 	dmb	ish
    4bc4:	e853 2f00 	ldrex	r2, [r3]
    4bc8:	e843 1000 	strex	r0, r1, [r3]
    4bcc:	2800      	cmp	r0, #0
    4bce:	d1f9      	bne.n	4bc4 <z_nrf_clock_control_lf_on+0xc>
    4bd0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4bd4:	b11a      	cbz	r2, 4bde <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    4bd6:	1e63      	subs	r3, r4, #1
    4bd8:	2b01      	cmp	r3, #1
    4bda:	d90c      	bls.n	4bf6 <z_nrf_clock_control_lf_on+0x3e>
}
    4bdc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4bde:	4809      	ldr	r0, [pc, #36]	; (4c04 <z_nrf_clock_control_lf_on+0x4c>)
    4be0:	f00d fdc8 	bl	12774 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4be4:	4908      	ldr	r1, [pc, #32]	; (4c08 <z_nrf_clock_control_lf_on+0x50>)
    4be6:	2300      	movs	r3, #0
    4be8:	604b      	str	r3, [r1, #4]
    4bea:	60cb      	str	r3, [r1, #12]
    4bec:	2301      	movs	r3, #1
    4bee:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4bf0:	f00d f996 	bl	11f20 <onoff_request>
    4bf4:	e7ef      	b.n	4bd6 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    4bf6:	4620      	mov	r0, r4
    4bf8:	f7ff ff6a 	bl	4ad0 <lfclk_spinwait>
		break;
    4bfc:	e7ee      	b.n	4bdc <z_nrf_clock_control_lf_on+0x24>
    4bfe:	bf00      	nop
    4c00:	20020910 	.word	0x20020910
    4c04:	00016c0c 	.word	0x00016c0c
    4c08:	200208a4 	.word	0x200208a4

00004c0c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4c0c:	b538      	push	{r3, r4, r5, lr}
    4c0e:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4c10:	b2c5      	uxtb	r5, r0
    4c12:	4b0b      	ldr	r3, [pc, #44]	; (4c40 <console_out+0x34>)
    4c14:	681b      	ldr	r3, [r3, #0]
    4c16:	4628      	mov	r0, r5
    4c18:	4798      	blx	r3

	if (handled_by_debug_server) {
    4c1a:	2801      	cmp	r0, #1
    4c1c:	d007      	beq.n	4c2e <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4c1e:	2c0a      	cmp	r4, #10
    4c20:	d007      	beq.n	4c32 <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4c22:	4b08      	ldr	r3, [pc, #32]	; (4c44 <console_out+0x38>)
    4c24:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4c26:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4c28:	685b      	ldr	r3, [r3, #4]
    4c2a:	4629      	mov	r1, r5
    4c2c:	4798      	blx	r3

	return c;
}
    4c2e:	4620      	mov	r0, r4
    4c30:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    4c32:	4b04      	ldr	r3, [pc, #16]	; (4c44 <console_out+0x38>)
    4c34:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4c36:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4c38:	685b      	ldr	r3, [r3, #4]
    4c3a:	210d      	movs	r1, #13
    4c3c:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4c3e:	e7f0      	b.n	4c22 <console_out+0x16>
    4c40:	20000030 	.word	0x20000030
    4c44:	20020914 	.word	0x20020914

00004c48 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4c48:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4c4a:	4c04      	ldr	r4, [pc, #16]	; (4c5c <uart_console_hook_install+0x14>)
    4c4c:	4620      	mov	r0, r4
    4c4e:	f7ff fdc5 	bl	47dc <__stdout_hook_install>
	__printk_hook_install(console_out);
    4c52:	4620      	mov	r0, r4
    4c54:	f7fe f9cc 	bl	2ff0 <__printk_hook_install>
}
    4c58:	bd10      	pop	{r4, pc}
    4c5a:	bf00      	nop
    4c5c:	00004c0d 	.word	0x00004c0d

00004c60 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4c60:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4c62:	4806      	ldr	r0, [pc, #24]	; (4c7c <uart_console_init+0x1c>)
    4c64:	4b06      	ldr	r3, [pc, #24]	; (4c80 <uart_console_init+0x20>)
    4c66:	6018      	str	r0, [r3, #0]
    4c68:	f010 ff32 	bl	15ad0 <z_device_ready>
    4c6c:	b118      	cbz	r0, 4c76 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    4c6e:	f7ff ffeb 	bl	4c48 <uart_console_hook_install>

	return 0;
    4c72:	2000      	movs	r0, #0
}
    4c74:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4c76:	f06f 0012 	mvn.w	r0, #18
    4c7a:	e7fb      	b.n	4c74 <uart_console_init+0x14>
    4c7c:	00016c3c 	.word	0x00016c3c
    4c80:	20020914 	.word	0x20020914

00004c84 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    4c84:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    4c86:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4c88:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4c8a:	4b37      	ldr	r3, [pc, #220]	; (4d68 <gpio_nrfx_config+0xe4>)
    4c8c:	4013      	ands	r3, r2
    4c8e:	4c37      	ldr	r4, [pc, #220]	; (4d6c <gpio_nrfx_config+0xe8>)
    4c90:	42a3      	cmp	r3, r4
    4c92:	d027      	beq.n	4ce4 <gpio_nrfx_config+0x60>
    4c94:	d812      	bhi.n	4cbc <gpio_nrfx_config+0x38>
    4c96:	2b06      	cmp	r3, #6
    4c98:	d026      	beq.n	4ce8 <gpio_nrfx_config+0x64>
    4c9a:	d904      	bls.n	4ca6 <gpio_nrfx_config+0x22>
    4c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4ca0:	d109      	bne.n	4cb6 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    4ca2:	2401      	movs	r4, #1
    4ca4:	e016      	b.n	4cd4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ca6:	b30b      	cbz	r3, 4cec <gpio_nrfx_config+0x68>
    4ca8:	2b02      	cmp	r3, #2
    4caa:	d101      	bne.n	4cb0 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    4cac:	2404      	movs	r4, #4
    4cae:	e011      	b.n	4cd4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4cb0:	f06f 0015 	mvn.w	r0, #21
    4cb4:	e046      	b.n	4d44 <gpio_nrfx_config+0xc0>
    4cb6:	f06f 0015 	mvn.w	r0, #21
    4cba:	e043      	b.n	4d44 <gpio_nrfx_config+0xc0>
    4cbc:	4c2c      	ldr	r4, [pc, #176]	; (4d70 <gpio_nrfx_config+0xec>)
    4cbe:	42a3      	cmp	r3, r4
    4cc0:	d016      	beq.n	4cf0 <gpio_nrfx_config+0x6c>
    4cc2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4cc6:	d101      	bne.n	4ccc <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    4cc8:	2403      	movs	r4, #3
    4cca:	e003      	b.n	4cd4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4cd0:	d146      	bne.n	4d60 <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    4cd2:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    4cd4:	f012 0f10 	tst.w	r2, #16
    4cd8:	d10c      	bne.n	4cf4 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    4cda:	f012 0f20 	tst.w	r2, #32
    4cde:	d033      	beq.n	4d48 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    4ce0:	2501      	movs	r5, #1
    4ce2:	e008      	b.n	4cf6 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    4ce4:	2407      	movs	r4, #7
    4ce6:	e7f5      	b.n	4cd4 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    4ce8:	2406      	movs	r4, #6
    4cea:	e7f3      	b.n	4cd4 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4cec:	2400      	movs	r4, #0
    4cee:	e7f1      	b.n	4cd4 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    4cf0:	2405      	movs	r4, #5
    4cf2:	e7ef      	b.n	4cd4 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    4cf4:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4cf6:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4cfa:	f412 7f80 	tst.w	r2, #256	; 0x100
    4cfe:	bf0c      	ite	eq
    4d00:	2601      	moveq	r6, #1
    4d02:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4d04:	f412 7f00 	tst.w	r2, #512	; 0x200
    4d08:	d006      	beq.n	4d18 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4d0a:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4d0e:	d01d      	beq.n	4d4c <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4d10:	2201      	movs	r2, #1
    4d12:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    4d14:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    4d18:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    4d1a:	7a12      	ldrb	r2, [r2, #8]
    4d1c:	f001 011f 	and.w	r1, r1, #31
    4d20:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4d24:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d26:	2a01      	cmp	r2, #1
    4d28:	d018      	beq.n	4d5c <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    4d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4d2e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4d32:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d36:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4d3a:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    4d3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    4d42:	2000      	movs	r0, #0
}
    4d44:	bcf0      	pop	{r4, r5, r6, r7}
    4d46:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    4d48:	2500      	movs	r5, #0
    4d4a:	e7d4      	b.n	4cf6 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    4d4c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    4d50:	d0e2      	beq.n	4d18 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4d52:	2201      	movs	r2, #1
    4d54:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4d56:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    4d5a:	e7dd      	b.n	4d18 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    4d5c:	4a05      	ldr	r2, [pc, #20]	; (4d74 <gpio_nrfx_config+0xf0>)
    4d5e:	e7e6      	b.n	4d2e <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4d60:	f06f 0015 	mvn.w	r0, #21
    4d64:	e7ee      	b.n	4d44 <gpio_nrfx_config+0xc0>
    4d66:	bf00      	nop
    4d68:	00f00006 	.word	0x00f00006
    4d6c:	00100006 	.word	0x00100006
    4d70:	00400002 	.word	0x00400002
    4d74:	50000300 	.word	0x50000300

00004d78 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    4d78:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    4d7a:	6905      	ldr	r5, [r0, #16]
	return port->config;
    4d7c:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    4d7e:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4d80:	696a      	ldr	r2, [r5, #20]
    4d82:	69ab      	ldr	r3, [r5, #24]
    4d84:	4313      	orrs	r3, r2
    4d86:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    4d8a:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4d8c:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    4d8e:	e011      	b.n	4db4 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    4d90:	f04f 0c02 	mov.w	ip, #2
    4d94:	e01d      	b.n	4dd2 <cfg_level_pins+0x5a>
    4d96:	4f14      	ldr	r7, [pc, #80]	; (4de8 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4d98:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4d9c:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    4da0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4da4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    4da8:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    4dac:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    4db0:	3001      	adds	r0, #1
		bit <<= 1;
    4db2:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    4db4:	b1a9      	cbz	r1, 4de2 <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    4db6:	420b      	tst	r3, r1
    4db8:	d0fa      	beq.n	4db0 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4dba:	7a34      	ldrb	r4, [r6, #8]
    4dbc:	f000 021f 	and.w	r2, r0, #31
    4dc0:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4dc4:	692c      	ldr	r4, [r5, #16]
    4dc6:	40c4      	lsrs	r4, r0
    4dc8:	f014 0f01 	tst.w	r4, #1
    4dcc:	d1e0      	bne.n	4d90 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    4dce:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    4dd2:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    4dd6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dd8:	2a01      	cmp	r2, #1
    4dda:	d0dc      	beq.n	4d96 <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    4ddc:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    4de0:	e7da      	b.n	4d98 <cfg_level_pins+0x20>
	}
}
    4de2:	bcf0      	pop	{r4, r5, r6, r7}
    4de4:	4770      	bx	lr
    4de6:	bf00      	nop
    4de8:	50000300 	.word	0x50000300

00004dec <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    4dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dee:	468c      	mov	ip, r1
	return port->data;
    4df0:	6903      	ldr	r3, [r0, #16]
	return port->config;
    4df2:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    4df4:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4df6:	695a      	ldr	r2, [r3, #20]
    4df8:	6998      	ldr	r0, [r3, #24]
    4dfa:	4302      	orrs	r2, r0
    4dfc:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    4e00:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    4e02:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4e06:	6918      	ldr	r0, [r3, #16]
    4e08:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    4e0a:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    4e0e:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    4e10:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4e12:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    4e14:	e015      	b.n	4e42 <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    4e16:	f8df e074 	ldr.w	lr, [pc, #116]	; 4e8c <check_level_trigger_pins+0xa0>
    4e1a:	e025      	b.n	4e68 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    4e1c:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    4e20:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e22:	2a01      	cmp	r2, #1
    4e24:	d02e      	beq.n	4e84 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    4e26:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4e2a:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    4e2e:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    4e32:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4e36:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    4e3a:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    4e3e:	3501      	adds	r5, #1
		bit <<= 1;
    4e40:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    4e42:	b314      	cbz	r4, 4e8a <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    4e44:	4223      	tst	r3, r4
    4e46:	d0fa      	beq.n	4e3e <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4e48:	7a0e      	ldrb	r6, [r1, #8]
    4e4a:	f005 021f 	and.w	r2, r5, #31
    4e4e:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    4e52:	423b      	tst	r3, r7
    4e54:	d1e2      	bne.n	4e1c <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    4e56:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    4e5a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e5e:	f1be 0f01 	cmp.w	lr, #1
    4e62:	d0d8      	beq.n	4e16 <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    4e64:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4e68:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4e6c:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4e70:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    4e74:	2e02      	cmp	r6, #2
    4e76:	d1d1      	bne.n	4e1c <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    4e78:	f8dc 6000 	ldr.w	r6, [ip]
    4e7c:	431e      	orrs	r6, r3
    4e7e:	f8cc 6000 	str.w	r6, [ip]
    4e82:	e7cb      	b.n	4e1c <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    4e84:	f8df e004 	ldr.w	lr, [pc, #4]	; 4e8c <check_level_trigger_pins+0xa0>
    4e88:	e7cf      	b.n	4e2a <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    4e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e8c:	50000300 	.word	0x50000300

00004e90 <gpiote_pin_cleanup>:
{
    4e90:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    4e92:	4b14      	ldr	r3, [pc, #80]	; (4ee4 <gpiote_pin_cleanup+0x54>)
    4e94:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    4e98:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4e9a:	2300      	movs	r3, #0
    4e9c:	e000      	b.n	4ea0 <gpiote_pin_cleanup+0x10>
    4e9e:	3301      	adds	r3, #1
    4ea0:	2b07      	cmp	r3, #7
    4ea2:	d81d      	bhi.n	4ee0 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4ea4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    4ea8:	490e      	ldr	r1, [pc, #56]	; (4ee4 <gpiote_pin_cleanup+0x54>)
    4eaa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    4eae:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    4eb2:	4290      	cmp	r0, r2
    4eb4:	d1f3      	bne.n	4e9e <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    4eb6:	fa24 f203 	lsr.w	r2, r4, r3
    4eba:	f012 0f01 	tst.w	r2, #1
    4ebe:	d0ee      	beq.n	4e9e <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    4ec0:	460a      	mov	r2, r1
    4ec2:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    4ec6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    4eca:	f021 0101 	bic.w	r1, r1, #1
    4ece:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    4ed2:	2101      	movs	r1, #1
    4ed4:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    4ed6:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    4eda:	b2d8      	uxtb	r0, r3
    4edc:	f001 f872 	bl	5fc4 <nrfx_gpiote_channel_free>
}
    4ee0:	bd10      	pop	{r4, pc}
    4ee2:	bf00      	nop
    4ee4:	40006000 	.word	0x40006000

00004ee8 <gpiote_channel_alloc>:
{
    4ee8:	b570      	push	{r4, r5, r6, lr}
    4eea:	b082      	sub	sp, #8
    4eec:	4604      	mov	r4, r0
    4eee:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4ef0:	f10d 0007 	add.w	r0, sp, #7
    4ef4:	f001 f882 	bl	5ffc <nrfx_gpiote_channel_alloc>
    4ef8:	4b1c      	ldr	r3, [pc, #112]	; (4f6c <gpiote_channel_alloc+0x84>)
    4efa:	4298      	cmp	r0, r3
    4efc:	d132      	bne.n	4f64 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    4efe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4f02:	f103 0240 	add.w	r2, r3, #64	; 0x40
    4f06:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4f08:	4e19      	ldr	r6, [pc, #100]	; (4f70 <gpiote_channel_alloc+0x88>)
    4f0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4f0e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4f12:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    4f16:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4f1a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4f1e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    4f22:	0224      	lsls	r4, r4, #8
    4f24:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    4f28:	042d      	lsls	r5, r5, #16
    4f2a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4f2e:	432c      	orrs	r4, r5
    4f30:	430c      	orrs	r4, r1
    4f32:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    4f36:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    4f3a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f3e:	2000      	movs	r0, #0
    4f40:	6018      	str	r0, [r3, #0]
    4f42:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    4f44:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4f48:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    4f4c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    4f50:	f042 0201 	orr.w	r2, r2, #1
    4f54:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    4f58:	2301      	movs	r3, #1
    4f5a:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    4f5c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    4f60:	b002      	add	sp, #8
    4f62:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    4f64:	f06f 0012 	mvn.w	r0, #18
    4f68:	e7fa      	b.n	4f60 <gpiote_channel_alloc+0x78>
    4f6a:	bf00      	nop
    4f6c:	0bad0000 	.word	0x0bad0000
    4f70:	40006000 	.word	0x40006000

00004f74 <gpiote_pin_int_cfg>:
{
    4f74:	b570      	push	{r4, r5, r6, lr}
    4f76:	460d      	mov	r5, r1
	return port->data;
    4f78:	6906      	ldr	r6, [r0, #16]
	return port->config;
    4f7a:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4f7c:	7a1b      	ldrb	r3, [r3, #8]
    4f7e:	f001 041f 	and.w	r4, r1, #31
    4f82:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    4f86:	4620      	mov	r0, r4
    4f88:	f7ff ff82 	bl	4e90 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    4f8c:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    4f90:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f92:	2b01      	cmp	r3, #1
    4f94:	d020      	beq.n	4fd8 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    4f96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4f9a:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    4f9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    4fa2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4fa6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    4faa:	68f3      	ldr	r3, [r6, #12]
    4fac:	40eb      	lsrs	r3, r5
    4fae:	f013 0f01 	tst.w	r3, #1
    4fb2:	d02f      	beq.n	5014 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    4fb4:	6973      	ldr	r3, [r6, #20]
    4fb6:	40eb      	lsrs	r3, r5
    4fb8:	f013 0f01 	tst.w	r3, #1
    4fbc:	d015      	beq.n	4fea <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    4fbe:	69b3      	ldr	r3, [r6, #24]
    4fc0:	40eb      	lsrs	r3, r5
    4fc2:	f013 0f01 	tst.w	r3, #1
    4fc6:	d109      	bne.n	4fdc <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4fc8:	6931      	ldr	r1, [r6, #16]
    4fca:	fa21 f505 	lsr.w	r5, r1, r5
    4fce:	f015 0f01 	tst.w	r5, #1
    4fd2:	d008      	beq.n	4fe6 <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    4fd4:	2101      	movs	r1, #1
    4fd6:	e002      	b.n	4fde <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    4fd8:	4a0f      	ldr	r2, [pc, #60]	; (5018 <gpiote_pin_int_cfg+0xa4>)
    4fda:	e7de      	b.n	4f9a <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    4fdc:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    4fde:	4620      	mov	r0, r4
    4fe0:	f7ff ff82 	bl	4ee8 <gpiote_channel_alloc>
    4fe4:	e017      	b.n	5016 <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    4fe6:	2102      	movs	r1, #2
    4fe8:	e7f9      	b.n	4fde <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4fea:	6931      	ldr	r1, [r6, #16]
    4fec:	fa21 f505 	lsr.w	r5, r1, r5
    4ff0:	f015 0f01 	tst.w	r5, #1
    4ff4:	d10c      	bne.n	5010 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    4ff6:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4ff8:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    4ffc:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    5000:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5004:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5008:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    500c:	2000      	movs	r0, #0
}
    500e:	e002      	b.n	5016 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    5010:	2102      	movs	r1, #2
    5012:	e7f1      	b.n	4ff8 <gpiote_pin_int_cfg+0x84>
	int res = 0;
    5014:	2000      	movs	r0, #0
}
    5016:	bd70      	pop	{r4, r5, r6, pc}
    5018:	50000300 	.word	0x50000300

0000501c <gpio_nrfx_pin_interrupt_configure>:
{
    501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    501e:	6904      	ldr	r4, [r0, #16]
	return port->config;
    5020:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5022:	7a2e      	ldrb	r6, [r5, #8]
    5024:	f001 051f 	and.w	r5, r1, #31
    5028:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    502c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5030:	d025      	beq.n	507e <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    5032:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    5036:	d035      	beq.n	50a4 <gpio_nrfx_pin_interrupt_configure+0x88>
    5038:	68e5      	ldr	r5, [r4, #12]
    503a:	2601      	movs	r6, #1
    503c:	408e      	lsls	r6, r1
    503e:	4335      	orrs	r5, r6
    5040:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    5042:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5046:	d033      	beq.n	50b0 <gpio_nrfx_pin_interrupt_configure+0x94>
    5048:	6962      	ldr	r2, [r4, #20]
    504a:	2501      	movs	r5, #1
    504c:	408d      	lsls	r5, r1
    504e:	ea22 0205 	bic.w	r2, r2, r5
    5052:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    5054:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    5058:	d02f      	beq.n	50ba <gpio_nrfx_pin_interrupt_configure+0x9e>
    505a:	69a2      	ldr	r2, [r4, #24]
    505c:	2501      	movs	r5, #1
    505e:	408d      	lsls	r5, r1
    5060:	ea22 0205 	bic.w	r2, r2, r5
    5064:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    5066:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    506a:	d02b      	beq.n	50c4 <gpio_nrfx_pin_interrupt_configure+0xa8>
    506c:	6923      	ldr	r3, [r4, #16]
    506e:	2201      	movs	r2, #1
    5070:	408a      	lsls	r2, r1
    5072:	ea23 0302 	bic.w	r3, r3, r2
    5076:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    5078:	f7ff ff7c 	bl	4f74 <gpiote_pin_int_cfg>
}
    507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    507e:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    5082:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5084:	2d01      	cmp	r5, #1
    5086:	d00b      	beq.n	50a0 <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    5088:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    508c:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    5090:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5094:	f015 0f01 	tst.w	r5, #1
    5098:	d0cb      	beq.n	5032 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    509a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    509e:	e7ed      	b.n	507c <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    50a0:	4f0b      	ldr	r7, [pc, #44]	; (50d0 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    50a2:	e7f3      	b.n	508c <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    50a4:	68e5      	ldr	r5, [r4, #12]
    50a6:	2601      	movs	r6, #1
    50a8:	408e      	lsls	r6, r1
    50aa:	ea25 0506 	bic.w	r5, r5, r6
    50ae:	e7c7      	b.n	5040 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    50b0:	6962      	ldr	r2, [r4, #20]
    50b2:	2501      	movs	r5, #1
    50b4:	408d      	lsls	r5, r1
    50b6:	432a      	orrs	r2, r5
    50b8:	e7cb      	b.n	5052 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    50ba:	69a2      	ldr	r2, [r4, #24]
    50bc:	2501      	movs	r5, #1
    50be:	408d      	lsls	r5, r1
    50c0:	432a      	orrs	r2, r5
    50c2:	e7cf      	b.n	5064 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    50c4:	6923      	ldr	r3, [r4, #16]
    50c6:	2201      	movs	r2, #1
    50c8:	408a      	lsls	r2, r1
    50ca:	4313      	orrs	r3, r2
    50cc:	e7d3      	b.n	5076 <gpio_nrfx_pin_interrupt_configure+0x5a>
    50ce:	bf00      	nop
    50d0:	50000300 	.word	0x50000300

000050d4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    50d4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    50d6:	4b0b      	ldr	r3, [pc, #44]	; (5104 <gpio_nrfx_init+0x30>)
    50d8:	781b      	ldrb	r3, [r3, #0]
    50da:	b10b      	cbz	r3, 50e0 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    50dc:	2000      	movs	r0, #0
    50de:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    50e0:	4b08      	ldr	r3, [pc, #32]	; (5104 <gpio_nrfx_init+0x30>)
    50e2:	2201      	movs	r2, #1
    50e4:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    50e6:	2200      	movs	r2, #0
    50e8:	2105      	movs	r1, #5
    50ea:	2006      	movs	r0, #6
    50ec:	f7ff f814 	bl	4118 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    50f0:	2006      	movs	r0, #6
    50f2:	f7fe fff3 	bl	40dc <arch_irq_enable>
    50f6:	4b04      	ldr	r3, [pc, #16]	; (5108 <gpio_nrfx_init+0x34>)
    50f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    50fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5100:	e7ec      	b.n	50dc <gpio_nrfx_init+0x8>
    5102:	bf00      	nop
    5104:	20020f2e 	.word	0x20020f2e
    5108:	40006000 	.word	0x40006000

0000510c <gpiote_event_handler>:
{
    510c:	b570      	push	{r4, r5, r6, lr}
    510e:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    5110:	2300      	movs	r3, #0
    5112:	9302      	str	r3, [sp, #8]
    5114:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    5116:	9300      	str	r3, [sp, #0]
    5118:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    511a:	4b46      	ldr	r3, [pc, #280]	; (5234 <gpiote_event_handler+0x128>)
    511c:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    511e:	b90c      	cbnz	r4, 5124 <gpiote_event_handler+0x18>
{
    5120:	2100      	movs	r1, #0
    5122:	e011      	b.n	5148 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    5124:	4d44      	ldr	r5, [pc, #272]	; (5238 <gpiote_event_handler+0x12c>)
    5126:	4669      	mov	r1, sp
    5128:	4628      	mov	r0, r5
    512a:	f7ff fe5f 	bl	4dec <check_level_trigger_pins>
		fired_triggers[0] =
    512e:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    5130:	a901      	add	r1, sp, #4
    5132:	f105 0018 	add.w	r0, r5, #24
    5136:	f7ff fe59 	bl	4dec <check_level_trigger_pins>
		fired_triggers[1] =
    513a:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    513c:	4b3d      	ldr	r3, [pc, #244]	; (5234 <gpiote_event_handler+0x128>)
    513e:	2200      	movs	r2, #0
    5140:	601a      	str	r2, [r3, #0]
    5142:	681b      	ldr	r3, [r3, #0]
}
    5144:	e7ec      	b.n	5120 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    5146:	3101      	adds	r1, #1
    5148:	2907      	cmp	r1, #7
    514a:	d82d      	bhi.n	51a8 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    514c:	f101 0340 	add.w	r3, r1, #64	; 0x40
    5150:	009b      	lsls	r3, r3, #2
    5152:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    5154:	2301      	movs	r3, #1
    5156:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    5158:	4838      	ldr	r0, [pc, #224]	; (523c <gpiote_event_handler+0x130>)
    515a:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    515e:	4203      	tst	r3, r0
    5160:	d0f1      	beq.n	5146 <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5162:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    5166:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    516a:	681b      	ldr	r3, [r3, #0]
    516c:	2b00      	cmp	r3, #0
    516e:	d0ea      	beq.n	5146 <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5170:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    5174:	4831      	ldr	r0, [pc, #196]	; (523c <gpiote_event_handler+0x130>)
    5176:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    517a:	f3c0 3340 	ubfx	r3, r0, #13, #1
    517e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5182:	2501      	movs	r5, #1
    5184:	fa05 f000 	lsl.w	r0, r5, r0
    5188:	ad04      	add	r5, sp, #16
    518a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    518e:	f853 5c08 	ldr.w	r5, [r3, #-8]
    5192:	4305      	orrs	r5, r0
    5194:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    5198:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    519c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    51a0:	2200      	movs	r2, #0
    51a2:	601a      	str	r2, [r3, #0]
    51a4:	681b      	ldr	r3, [r3, #0]
}
    51a6:	e7ce      	b.n	5146 <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    51a8:	9e02      	ldr	r6, [sp, #8]
    51aa:	b92e      	cbnz	r6, 51b8 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    51ac:	9e03      	ldr	r6, [sp, #12]
    51ae:	b9ee      	cbnz	r6, 51ec <gpiote_event_handler+0xe0>
	if (port_event) {
    51b0:	2c00      	cmp	r4, #0
    51b2:	d135      	bne.n	5220 <gpiote_event_handler+0x114>
}
    51b4:	b004      	add	sp, #16
    51b6:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    51b8:	4b21      	ldr	r3, [pc, #132]	; (5240 <gpiote_event_handler+0x134>)
    51ba:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    51bc:	b119      	cbz	r1, 51c6 <gpiote_event_handler+0xba>
    51be:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    51c0:	b149      	cbz	r1, 51d6 <gpiote_event_handler+0xca>
	return node->next;
    51c2:	680d      	ldr	r5, [r1, #0]
    51c4:	e007      	b.n	51d6 <gpiote_event_handler+0xca>
    51c6:	460d      	mov	r5, r1
    51c8:	e005      	b.n	51d6 <gpiote_event_handler+0xca>
    51ca:	b16d      	cbz	r5, 51e8 <gpiote_event_handler+0xdc>
    51cc:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    51ce:	b105      	cbz	r5, 51d2 <gpiote_event_handler+0xc6>
	return node->next;
    51d0:	682b      	ldr	r3, [r5, #0]
    51d2:	4629      	mov	r1, r5
    51d4:	461d      	mov	r5, r3
    51d6:	2900      	cmp	r1, #0
    51d8:	d0e8      	beq.n	51ac <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    51da:	688a      	ldr	r2, [r1, #8]
    51dc:	4032      	ands	r2, r6
    51de:	d0f4      	beq.n	51ca <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    51e0:	684b      	ldr	r3, [r1, #4]
    51e2:	4815      	ldr	r0, [pc, #84]	; (5238 <gpiote_event_handler+0x12c>)
    51e4:	4798      	blx	r3
    51e6:	e7f0      	b.n	51ca <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    51e8:	462b      	mov	r3, r5
    51ea:	e7f2      	b.n	51d2 <gpiote_event_handler+0xc6>
	return list->head;
    51ec:	4b15      	ldr	r3, [pc, #84]	; (5244 <gpiote_event_handler+0x138>)
    51ee:	6859      	ldr	r1, [r3, #4]
    51f0:	b119      	cbz	r1, 51fa <gpiote_event_handler+0xee>
    51f2:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    51f4:	b149      	cbz	r1, 520a <gpiote_event_handler+0xfe>
	return node->next;
    51f6:	680d      	ldr	r5, [r1, #0]
    51f8:	e007      	b.n	520a <gpiote_event_handler+0xfe>
    51fa:	460d      	mov	r5, r1
    51fc:	e005      	b.n	520a <gpiote_event_handler+0xfe>
    51fe:	b16d      	cbz	r5, 521c <gpiote_event_handler+0x110>
    5200:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5202:	b105      	cbz	r5, 5206 <gpiote_event_handler+0xfa>
	return node->next;
    5204:	682b      	ldr	r3, [r5, #0]
    5206:	4629      	mov	r1, r5
    5208:	461d      	mov	r5, r3
    520a:	2900      	cmp	r1, #0
    520c:	d0d0      	beq.n	51b0 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    520e:	688a      	ldr	r2, [r1, #8]
    5210:	4032      	ands	r2, r6
    5212:	d0f4      	beq.n	51fe <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    5214:	684b      	ldr	r3, [r1, #4]
    5216:	480c      	ldr	r0, [pc, #48]	; (5248 <gpiote_event_handler+0x13c>)
    5218:	4798      	blx	r3
    521a:	e7f0      	b.n	51fe <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    521c:	462b      	mov	r3, r5
    521e:	e7f2      	b.n	5206 <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    5220:	4c05      	ldr	r4, [pc, #20]	; (5238 <gpiote_event_handler+0x12c>)
    5222:	4620      	mov	r0, r4
    5224:	f7ff fda8 	bl	4d78 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    5228:	f104 0018 	add.w	r0, r4, #24
    522c:	f7ff fda4 	bl	4d78 <cfg_level_pins>
}
    5230:	e7c0      	b.n	51b4 <gpiote_event_handler+0xa8>
    5232:	bf00      	nop
    5234:	4000617c 	.word	0x4000617c
    5238:	00016c6c 	.word	0x00016c6c
    523c:	40006000 	.word	0x40006000
    5240:	20020918 	.word	0x20020918
    5244:	20020934 	.word	0x20020934
    5248:	00016c84 	.word	0x00016c84

0000524c <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    524c:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    524e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5250:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    5254:	d06f      	beq.n	5336 <baudrate_set+0xea>
    5256:	d83a      	bhi.n	52ce <baudrate_set+0x82>
    5258:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    525c:	d06e      	beq.n	533c <baudrate_set+0xf0>
    525e:	d90a      	bls.n	5276 <baudrate_set+0x2a>
    5260:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    5264:	d075      	beq.n	5352 <baudrate_set+0x106>
    5266:	d924      	bls.n	52b2 <baudrate_set+0x66>
    5268:	f647 2312 	movw	r3, #31250	; 0x7a12
    526c:	4299      	cmp	r1, r3
    526e:	d12b      	bne.n	52c8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5270:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5274:	e013      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    5276:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    527a:	d061      	beq.n	5340 <baudrate_set+0xf4>
    527c:	d907      	bls.n	528e <baudrate_set+0x42>
    527e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    5282:	d063      	beq.n	534c <baudrate_set+0x100>
    5284:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5288:	d110      	bne.n	52ac <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    528a:	4b3c      	ldr	r3, [pc, #240]	; (537c <baudrate_set+0x130>)
    528c:	e007      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    528e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    5292:	d058      	beq.n	5346 <baudrate_set+0xfa>
    5294:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5298:	d105      	bne.n	52a6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    529a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    529e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    52a2:	2000      	movs	r0, #0
    52a4:	4770      	bx	lr
	switch (baudrate) {
    52a6:	f06f 0015 	mvn.w	r0, #21
    52aa:	4770      	bx	lr
    52ac:	f06f 0015 	mvn.w	r0, #21
    52b0:	4770      	bx	lr
    52b2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    52b6:	d04e      	beq.n	5356 <baudrate_set+0x10a>
    52b8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    52bc:	d101      	bne.n	52c2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    52be:	4b30      	ldr	r3, [pc, #192]	; (5380 <baudrate_set+0x134>)
    52c0:	e7ed      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    52c2:	f06f 0015 	mvn.w	r0, #21
    52c6:	4770      	bx	lr
    52c8:	f06f 0015 	mvn.w	r0, #21
    52cc:	4770      	bx	lr
    52ce:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    52d2:	d042      	beq.n	535a <baudrate_set+0x10e>
    52d4:	d909      	bls.n	52ea <baudrate_set+0x9e>
    52d6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    52da:	d046      	beq.n	536a <baudrate_set+0x11e>
    52dc:	d91f      	bls.n	531e <baudrate_set+0xd2>
    52de:	4b29      	ldr	r3, [pc, #164]	; (5384 <baudrate_set+0x138>)
    52e0:	4299      	cmp	r1, r3
    52e2:	d148      	bne.n	5376 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    52e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    52e8:	e7d9      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    52ea:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    52ee:	d037      	beq.n	5360 <baudrate_set+0x114>
    52f0:	d905      	bls.n	52fe <baudrate_set+0xb2>
    52f2:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    52f6:	d10f      	bne.n	5318 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    52f8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    52fc:	e7cf      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    52fe:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    5302:	4299      	cmp	r1, r3
    5304:	d02e      	beq.n	5364 <baudrate_set+0x118>
    5306:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    530a:	d102      	bne.n	5312 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    530c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5310:	e7c5      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    5312:	f06f 0015 	mvn.w	r0, #21
    5316:	4770      	bx	lr
    5318:	f06f 0015 	mvn.w	r0, #21
    531c:	4770      	bx	lr
    531e:	4b1a      	ldr	r3, [pc, #104]	; (5388 <baudrate_set+0x13c>)
    5320:	4299      	cmp	r1, r3
    5322:	d025      	beq.n	5370 <baudrate_set+0x124>
    5324:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    5328:	d102      	bne.n	5330 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    532a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    532e:	e7b6      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    5330:	f06f 0015 	mvn.w	r0, #21
    5334:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5336:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    533a:	e7b0      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    533c:	4b13      	ldr	r3, [pc, #76]	; (538c <baudrate_set+0x140>)
    533e:	e7ae      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5340:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5344:	e7ab      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    5346:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    534a:	e7a8      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    534c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5350:	e7a5      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5352:	4b0f      	ldr	r3, [pc, #60]	; (5390 <baudrate_set+0x144>)
    5354:	e7a3      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5356:	4b0f      	ldr	r3, [pc, #60]	; (5394 <baudrate_set+0x148>)
    5358:	e7a1      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    535a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    535e:	e79e      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5360:	4b0d      	ldr	r3, [pc, #52]	; (5398 <baudrate_set+0x14c>)
    5362:	e79c      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5364:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5368:	e799      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    536a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    536e:	e796      	b.n	529e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5370:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5374:	e793      	b.n	529e <baudrate_set+0x52>
	switch (baudrate) {
    5376:	f06f 0015 	mvn.w	r0, #21
}
    537a:	4770      	bx	lr
    537c:	0013b000 	.word	0x0013b000
    5380:	004ea000 	.word	0x004ea000
    5384:	000f4240 	.word	0x000f4240
    5388:	0003d090 	.word	0x0003d090
    538c:	00275000 	.word	0x00275000
    5390:	0075c000 	.word	0x0075c000
    5394:	003af000 	.word	0x003af000
    5398:	013a9000 	.word	0x013a9000

0000539c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53a0:	4605      	mov	r5, r0
    53a2:	460f      	mov	r7, r1
	return dev->data;
    53a4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    53a8:	f010 fc1d 	bl	15be6 <k_is_in_isr>
    53ac:	b920      	cbnz	r0, 53b8 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    53ae:	4b16      	ldr	r3, [pc, #88]	; (5408 <uarte_nrfx_poll_out+0x6c>)
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	b1ab      	cbz	r3, 53e0 <uarte_nrfx_poll_out+0x44>
    53b4:	2300      	movs	r3, #0
    53b6:	e000      	b.n	53ba <uarte_nrfx_poll_out+0x1e>
    53b8:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    53ba:	b19b      	cbz	r3, 53e4 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    53bc:	f04f 0320 	mov.w	r3, #32
    53c0:	f3ef 8411 	mrs	r4, BASEPRI
    53c4:	f383 8812 	msr	BASEPRI_MAX, r3
    53c8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    53cc:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    53ce:	4628      	mov	r0, r5
    53d0:	f00d fbcb 	bl	12b6a <is_tx_ready>
    53d4:	b950      	cbnz	r0, 53ec <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    53d6:	f384 8811 	msr	BASEPRI, r4
    53da:	f3bf 8f6f 	isb	sy
}
    53de:	e7ed      	b.n	53bc <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    53e0:	2301      	movs	r3, #1
    53e2:	e7ea      	b.n	53ba <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    53e4:	4628      	mov	r0, r5
    53e6:	f00d fce1 	bl	12dac <wait_tx_ready>
    53ea:	4606      	mov	r6, r0
	}

	data->char_out = c;
    53ec:	4641      	mov	r1, r8
    53ee:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    53f2:	2201      	movs	r2, #1
    53f4:	4628      	mov	r0, r5
    53f6:	f00d fbd2 	bl	12b9e <tx_start>
	__asm__ volatile(
    53fa:	f386 8811 	msr	BASEPRI, r6
    53fe:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    5402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5406:	bf00      	nop
    5408:	20020f2f 	.word	0x20020f2f

0000540c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    540c:	b538      	push	{r3, r4, r5, lr}
    540e:	4604      	mov	r4, r0
    5410:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5412:	f101 0016 	add.w	r0, r1, #22
    5416:	f000 fe3f 	bl	6098 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    541a:	4b0c      	ldr	r3, [pc, #48]	; (544c <endtx_stoptx_ppi_init+0x40>)
    541c:	4298      	cmp	r0, r3
    541e:	d111      	bne.n	5444 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5420:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5422:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    5426:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5428:	4a09      	ldr	r2, [pc, #36]	; (5450 <endtx_stoptx_ppi_init+0x44>)
    542a:	33a2      	adds	r3, #162	; 0xa2
    542c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5434:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5436:	7da9      	ldrb	r1, [r5, #22]
    5438:	2301      	movs	r3, #1
    543a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    543c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    5440:	2000      	movs	r0, #0
}
    5442:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    5444:	f06f 0004 	mvn.w	r0, #4
    5448:	e7fb      	b.n	5442 <endtx_stoptx_ppi_init+0x36>
    544a:	bf00      	nop
    544c:	0bad0000 	.word	0x0bad0000
    5450:	4001f000 	.word	0x4001f000

00005454 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    5456:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    5458:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    545a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    545c:	2300      	movs	r3, #0
    545e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5462:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    5464:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5466:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    546a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    546c:	2b01      	cmp	r3, #1
    546e:	f000 8097 	beq.w	55a0 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
    5472:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5476:	2301      	movs	r3, #1
    5478:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    547a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    547e:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5480:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5484:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5486:	2b01      	cmp	r3, #1
    5488:	f000 808c 	beq.w	55a4 <uarte_instance_init+0x150>
        case 0: return NRF_P0;
    548c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5490:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    5494:	2203      	movs	r2, #3
    5496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    549a:	68e3      	ldr	r3, [r4, #12]
    549c:	f1b3 3fff 	cmp.w	r3, #4294967295
    54a0:	d00c      	beq.n	54bc <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    54a2:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    54a4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    54a8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54aa:	2b01      	cmp	r3, #1
    54ac:	d07c      	beq.n	55a8 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
    54ae:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    54b2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    54b4:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    54b8:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    54bc:	68a2      	ldr	r2, [r4, #8]
    54be:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    54c0:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    54c4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    54c8:	6923      	ldr	r3, [r4, #16]
    54ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    54ce:	d00c      	beq.n	54ea <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    54d0:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    54d2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    54d6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54d8:	2b01      	cmp	r3, #1
    54da:	d067      	beq.n	55ac <uarte_instance_init+0x158>
        case 0: return NRF_P0;
    54dc:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    54e0:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    54e2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    54e6:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    54ea:	6963      	ldr	r3, [r4, #20]
    54ec:	f1b3 3fff 	cmp.w	r3, #4294967295
    54f0:	d017      	beq.n	5522 <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
    54f2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    54f6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54f8:	2b01      	cmp	r3, #1
    54fa:	d059      	beq.n	55b0 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
    54fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5500:	2301      	movs	r3, #1
    5502:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5504:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    5508:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    550a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    550e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5510:	2b01      	cmp	r3, #1
    5512:	d04f      	beq.n	55b4 <uarte_instance_init+0x160>
        case 0: return NRF_P0;
    5514:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5518:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    551c:	2203      	movs	r2, #3
    551e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    5522:	6962      	ldr	r2, [r4, #20]
    5524:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    5526:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    552a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    552e:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5530:	3104      	adds	r1, #4
    5532:	f00d faad 	bl	12a90 <uarte_nrfx_configure>
	if (err) {
    5536:	4607      	mov	r7, r0
    5538:	bb80      	cbnz	r0, 559c <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    553a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    553c:	f013 0f08 	tst.w	r3, #8
    5540:	d13a      	bne.n	55b8 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5542:	2308      	movs	r3, #8
    5544:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    5548:	68e3      	ldr	r3, [r4, #12]
    554a:	f1b3 3fff 	cmp.w	r3, #4294967295
    554e:	d00c      	beq.n	556a <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5550:	2300      	movs	r3, #0
    5552:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5556:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    555a:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    555e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5562:	2301      	movs	r3, #1
    5564:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5568:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    556a:	6863      	ldr	r3, [r4, #4]
    556c:	f013 0f08 	tst.w	r3, #8
    5570:	d103      	bne.n	557a <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
    5572:	f44f 7380 	mov.w	r3, #256	; 0x100
    5576:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    557a:	6863      	ldr	r3, [r4, #4]
    557c:	f013 0f10 	tst.w	r3, #16
    5580:	d003      	beq.n	558a <uarte_instance_init+0x136>
    5582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5586:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    558a:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    558c:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5590:	2300      	movs	r3, #0
    5592:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5596:	2301      	movs	r3, #1
    5598:	60ab      	str	r3, [r5, #8]
    559a:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    559c:	4638      	mov	r0, r7
    559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    55a0:	4a09      	ldr	r2, [pc, #36]	; (55c8 <uarte_instance_init+0x174>)
    55a2:	e768      	b.n	5476 <uarte_instance_init+0x22>
    55a4:	4908      	ldr	r1, [pc, #32]	; (55c8 <uarte_instance_init+0x174>)
    55a6:	e773      	b.n	5490 <uarte_instance_init+0x3c>
    55a8:	4f07      	ldr	r7, [pc, #28]	; (55c8 <uarte_instance_init+0x174>)
    55aa:	e782      	b.n	54b2 <uarte_instance_init+0x5e>
    55ac:	4f06      	ldr	r7, [pc, #24]	; (55c8 <uarte_instance_init+0x174>)
    55ae:	e797      	b.n	54e0 <uarte_instance_init+0x8c>
    55b0:	4905      	ldr	r1, [pc, #20]	; (55c8 <uarte_instance_init+0x174>)
    55b2:	e7a5      	b.n	5500 <uarte_instance_init+0xac>
    55b4:	4904      	ldr	r1, [pc, #16]	; (55c8 <uarte_instance_init+0x174>)
    55b6:	e7af      	b.n	5518 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
    55b8:	4631      	mov	r1, r6
    55ba:	4628      	mov	r0, r5
    55bc:	f7ff ff26 	bl	540c <endtx_stoptx_ppi_init>
		if (err < 0) {
    55c0:	2800      	cmp	r0, #0
    55c2:	dabe      	bge.n	5542 <uarte_instance_init+0xee>
			return err;
    55c4:	4607      	mov	r7, r0
    55c6:	e7e9      	b.n	559c <uarte_instance_init+0x148>
    55c8:	50000300 	.word	0x50000300

000055cc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    55cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    55d0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    55d4:	4b01      	ldr	r3, [pc, #4]	; (55dc <set_comparator+0x10>)
    55d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    55da:	4770      	bx	lr
    55dc:	40011000 	.word	0x40011000

000055e0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    55e0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    55e4:	4b01      	ldr	r3, [pc, #4]	; (55ec <get_comparator+0xc>)
    55e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    55ea:	4770      	bx	lr
    55ec:	40011000 	.word	0x40011000

000055f0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    55f4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    55f6:	4a02      	ldr	r2, [pc, #8]	; (5600 <event_enable+0x10>)
    55f8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    55fc:	4770      	bx	lr
    55fe:	bf00      	nop
    5600:	40011000 	.word	0x40011000

00005604 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5608:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    560a:	4a02      	ldr	r2, [pc, #8]	; (5614 <event_disable+0x10>)
    560c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5610:	4770      	bx	lr
    5612:	bf00      	nop
    5614:	40011000 	.word	0x40011000

00005618 <counter>:
     return p_reg->COUNTER;
    5618:	4b01      	ldr	r3, [pc, #4]	; (5620 <counter+0x8>)
    561a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    561e:	4770      	bx	lr
    5620:	40011000 	.word	0x40011000

00005624 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    5624:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5626:	2301      	movs	r3, #1
    5628:	4083      	lsls	r3, r0
    562a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    562c:	4a10      	ldr	r2, [pc, #64]	; (5670 <compare_int_lock+0x4c>)
    562e:	f3bf 8f5b 	dmb	ish
    5632:	e852 1f00 	ldrex	r1, [r2]
    5636:	ea01 0c04 	and.w	ip, r1, r4
    563a:	e842 ce00 	strex	lr, ip, [r2]
    563e:	f1be 0f00 	cmp.w	lr, #0
    5642:	d1f6      	bne.n	5632 <compare_int_lock+0xe>
    5644:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5648:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    564c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5650:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5654:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5658:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    565c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5660:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5664:	420b      	tst	r3, r1
}
    5666:	bf14      	ite	ne
    5668:	2001      	movne	r0, #1
    566a:	2000      	moveq	r0, #0
    566c:	bd10      	pop	{r4, pc}
    566e:	bf00      	nop
    5670:	20020994 	.word	0x20020994

00005674 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5674:	b570      	push	{r4, r5, r6, lr}
    5676:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5678:	f00d fbf3 	bl	12e62 <full_int_lock>
    567c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    567e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5682:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5684:	4a17      	ldr	r2, [pc, #92]	; (56e4 <channel_processing_check_and_clear+0x70>)
    5686:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    568a:	4213      	tst	r3, r2
    568c:	d105      	bne.n	569a <channel_processing_check_and_clear+0x26>
	bool result = false;
    568e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    5690:	4628      	mov	r0, r5
    5692:	f00d fbef 	bl	12e74 <full_int_unlock>

	return result;
}
    5696:	4630      	mov	r0, r6
    5698:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    569a:	2301      	movs	r3, #1
    569c:	40a3      	lsls	r3, r4
    569e:	43db      	mvns	r3, r3
    56a0:	4a11      	ldr	r2, [pc, #68]	; (56e8 <channel_processing_check_and_clear+0x74>)
    56a2:	f3bf 8f5b 	dmb	ish
    56a6:	e852 1f00 	ldrex	r1, [r2]
    56aa:	ea01 0003 	and.w	r0, r1, r3
    56ae:	e842 0600 	strex	r6, r0, [r2]
    56b2:	2e00      	cmp	r6, #0
    56b4:	d1f7      	bne.n	56a6 <channel_processing_check_and_clear+0x32>
    56b6:	f3bf 8f5b 	dmb	ish
    56ba:	b959      	cbnz	r1, 56d4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    56bc:	f104 0350 	add.w	r3, r4, #80	; 0x50
    56c0:	009b      	lsls	r3, r3, #2
    56c2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    56c8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    56cc:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    56ce:	b113      	cbz	r3, 56d6 <channel_processing_check_and_clear+0x62>
    56d0:	2301      	movs	r3, #1
    56d2:	e000      	b.n	56d6 <channel_processing_check_and_clear+0x62>
    56d4:	2301      	movs	r3, #1
		if (result) {
    56d6:	461e      	mov	r6, r3
    56d8:	2b00      	cmp	r3, #0
    56da:	d0d9      	beq.n	5690 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    56dc:	4620      	mov	r0, r4
    56de:	f00d fbb1 	bl	12e44 <event_clear>
    56e2:	e7d5      	b.n	5690 <channel_processing_check_and_clear+0x1c>
    56e4:	40011000 	.word	0x40011000
    56e8:	20020990 	.word	0x20020990

000056ec <compare_int_unlock>:
	if (key) {
    56ec:	b901      	cbnz	r1, 56f0 <compare_int_unlock+0x4>
}
    56ee:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    56f0:	2301      	movs	r3, #1
    56f2:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    56f4:	4a11      	ldr	r2, [pc, #68]	; (573c <compare_int_unlock+0x50>)
    56f6:	f3bf 8f5b 	dmb	ish
    56fa:	e852 1f00 	ldrex	r1, [r2]
    56fe:	4319      	orrs	r1, r3
    5700:	e842 1c00 	strex	ip, r1, [r2]
    5704:	f1bc 0f00 	cmp.w	ip, #0
    5708:	d1f7      	bne.n	56fa <compare_int_unlock+0xe>
    570a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    570e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5712:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5714:	4a0a      	ldr	r2, [pc, #40]	; (5740 <compare_int_unlock+0x54>)
    5716:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    571a:	f3bf 8f5b 	dmb	ish
    571e:	4b09      	ldr	r3, [pc, #36]	; (5744 <compare_int_unlock+0x58>)
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5726:	fa23 f000 	lsr.w	r0, r3, r0
    572a:	f010 0f01 	tst.w	r0, #1
    572e:	d0de      	beq.n	56ee <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5730:	4b05      	ldr	r3, [pc, #20]	; (5748 <compare_int_unlock+0x5c>)
    5732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5736:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    573a:	e7d8      	b.n	56ee <compare_int_unlock+0x2>
    573c:	20020994 	.word	0x20020994
    5740:	40011000 	.word	0x40011000
    5744:	20020990 	.word	0x20020990
    5748:	e000e100 	.word	0xe000e100

0000574c <sys_clock_timeout_handler>:
{
    574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    574e:	4607      	mov	r7, r0
    5750:	4614      	mov	r4, r2
    5752:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    5754:	4610      	mov	r0, r2
    5756:	4619      	mov	r1, r3
    5758:	f00d fb80 	bl	12e5c <absolute_time_to_cc>
    575c:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    575e:	4b15      	ldr	r3, [pc, #84]	; (57b4 <sys_clock_timeout_handler+0x68>)
    5760:	681a      	ldr	r2, [r3, #0]
    5762:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    5764:	601c      	str	r4, [r3, #0]
    5766:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5768:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    576c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5770:	d308      	bcc.n	5784 <sys_clock_timeout_handler+0x38>
	return false;
    5772:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5774:	f00a fb7e 	bl	fe74 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5778:	4638      	mov	r0, r7
    577a:	f7ff ff31 	bl	55e0 <get_comparator>
    577e:	42a8      	cmp	r0, r5
    5780:	d00c      	beq.n	579c <sys_clock_timeout_handler+0x50>
}
    5782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5784:	4b0c      	ldr	r3, [pc, #48]	; (57b8 <sys_clock_timeout_handler+0x6c>)
    5786:	6819      	ldr	r1, [r3, #0]
    5788:	0a0b      	lsrs	r3, r1, #8
    578a:	060a      	lsls	r2, r1, #24
    578c:	1952      	adds	r2, r2, r5
    578e:	f143 0300 	adc.w	r3, r3, #0
    5792:	490a      	ldr	r1, [pc, #40]	; (57bc <sys_clock_timeout_handler+0x70>)
    5794:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5798:	2401      	movs	r4, #1
    579a:	e7eb      	b.n	5774 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    579c:	b11c      	cbz	r4, 57a6 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    579e:	4638      	mov	r0, r7
    57a0:	f7ff ff26 	bl	55f0 <event_enable>
}
    57a4:	e7ed      	b.n	5782 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    57a6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    57aa:	4638      	mov	r0, r7
    57ac:	f7ff ff0e 	bl	55cc <set_comparator>
    57b0:	e7f5      	b.n	579e <sys_clock_timeout_handler+0x52>
    57b2:	bf00      	nop
    57b4:	20000388 	.word	0x20000388
    57b8:	20020998 	.word	0x20020998
    57bc:	20000370 	.word	0x20000370

000057c0 <z_nrf_rtc_timer_read>:
{
    57c0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    57c2:	4b0d      	ldr	r3, [pc, #52]	; (57f8 <z_nrf_rtc_timer_read+0x38>)
    57c4:	681b      	ldr	r3, [r3, #0]
    57c6:	0a1d      	lsrs	r5, r3, #8
    57c8:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    57ca:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    57ce:	f7ff ff23 	bl	5618 <counter>
    57d2:	4603      	mov	r3, r0
	val += cntr;
    57d4:	1820      	adds	r0, r4, r0
    57d6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    57da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    57de:	d20a      	bcs.n	57f6 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    57e0:	4b06      	ldr	r3, [pc, #24]	; (57fc <z_nrf_rtc_timer_read+0x3c>)
    57e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    57e6:	4299      	cmp	r1, r3
    57e8:	bf08      	it	eq
    57ea:	4290      	cmpeq	r0, r2
    57ec:	d203      	bcs.n	57f6 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    57ee:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    57f2:	f141 0100 	adc.w	r1, r1, #0
}
    57f6:	bd38      	pop	{r3, r4, r5, pc}
    57f8:	20020998 	.word	0x20020998
    57fc:	20000370 	.word	0x20000370

00005800 <compare_set_nolocks>:
{
    5800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5804:	4606      	mov	r6, r0
    5806:	4614      	mov	r4, r2
    5808:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    580a:	4610      	mov	r0, r2
    580c:	4619      	mov	r1, r3
    580e:	f00d fb25 	bl	12e5c <absolute_time_to_cc>
    5812:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5814:	f7ff ffd4 	bl	57c0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5818:	42a9      	cmp	r1, r5
    581a:	bf08      	it	eq
    581c:	42a0      	cmpeq	r0, r4
    581e:	d21e      	bcs.n	585e <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5820:	ebb4 0800 	subs.w	r8, r4, r0
    5824:	eb65 0901 	sbc.w	r9, r5, r1
    5828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    582c:	2300      	movs	r3, #0
    582e:	454b      	cmp	r3, r9
    5830:	bf08      	it	eq
    5832:	4542      	cmpeq	r2, r8
    5834:	d32e      	bcc.n	5894 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    5836:	4b19      	ldr	r3, [pc, #100]	; (589c <compare_set_nolocks+0x9c>)
    5838:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    583c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5840:	42ab      	cmp	r3, r5
    5842:	bf08      	it	eq
    5844:	42a2      	cmpeq	r2, r4
    5846:	d018      	beq.n	587a <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    5848:	4639      	mov	r1, r7
    584a:	4630      	mov	r0, r6
    584c:	f00d fb17 	bl	12e7e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    5850:	4639      	mov	r1, r7
    5852:	f00d faf3 	bl	12e3c <counter_sub>
    5856:	1824      	adds	r4, r4, r0
    5858:	f145 0500 	adc.w	r5, r5, #0
    585c:	e00d      	b.n	587a <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    585e:	2301      	movs	r3, #1
    5860:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5862:	4a0f      	ldr	r2, [pc, #60]	; (58a0 <compare_set_nolocks+0xa0>)
    5864:	f3bf 8f5b 	dmb	ish
    5868:	e852 1f00 	ldrex	r1, [r2]
    586c:	4319      	orrs	r1, r3
    586e:	e842 1000 	strex	r0, r1, [r2]
    5872:	2800      	cmp	r0, #0
    5874:	d1f8      	bne.n	5868 <compare_set_nolocks+0x68>
    5876:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    587a:	4b08      	ldr	r3, [pc, #32]	; (589c <compare_set_nolocks+0x9c>)
    587c:	0132      	lsls	r2, r6, #4
    587e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5882:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    5886:	9908      	ldr	r1, [sp, #32]
    5888:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    588c:	6073      	str	r3, [r6, #4]
	return ret;
    588e:	2000      	movs	r0, #0
}
    5890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    5894:	f06f 0015 	mvn.w	r0, #21
    5898:	e7fa      	b.n	5890 <compare_set_nolocks+0x90>
    589a:	bf00      	nop
    589c:	20000378 	.word	0x20000378
    58a0:	20020990 	.word	0x20020990

000058a4 <process_channel>:

static void process_channel(int32_t chan)
{
    58a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58a8:	b082      	sub	sp, #8
    58aa:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    58ac:	f7ff fee2 	bl	5674 <channel_processing_check_and_clear>
    58b0:	b910      	cbnz	r0, 58b8 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    58b2:	b002      	add	sp, #8
    58b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    58b8:	f7ff ff82 	bl	57c0 <z_nrf_rtc_timer_read>
    58bc:	4606      	mov	r6, r0
    58be:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    58c0:	f00d facf 	bl	12e62 <full_int_lock>
    58c4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    58c6:	4b13      	ldr	r3, [pc, #76]	; (5914 <process_channel+0x70>)
    58c8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    58cc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    58d0:	454f      	cmp	r7, r9
    58d2:	bf08      	it	eq
    58d4:	4546      	cmpeq	r6, r8
    58d6:	d20b      	bcs.n	58f0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    58d8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    58da:	4650      	mov	r0, sl
    58dc:	f00d faca 	bl	12e74 <full_int_unlock>
		if (handler) {
    58e0:	2e00      	cmp	r6, #0
    58e2:	d0e6      	beq.n	58b2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    58e4:	9500      	str	r5, [sp, #0]
    58e6:	4642      	mov	r2, r8
    58e8:	464b      	mov	r3, r9
    58ea:	4620      	mov	r0, r4
    58ec:	47b0      	blx	r6
}
    58ee:	e7e0      	b.n	58b2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    58f0:	4a08      	ldr	r2, [pc, #32]	; (5914 <process_channel+0x70>)
    58f2:	0123      	lsls	r3, r4, #4
    58f4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    58f8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    58fa:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    58fc:	2000      	movs	r0, #0
    58fe:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5900:	f04f 32ff 	mov.w	r2, #4294967295
    5904:	f04f 33ff 	mov.w	r3, #4294967295
    5908:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    590c:	4620      	mov	r0, r4
    590e:	f7ff fe79 	bl	5604 <event_disable>
    5912:	e7e2      	b.n	58da <process_channel+0x36>
    5914:	20000378 	.word	0x20000378

00005918 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5918:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    591a:	4b0d      	ldr	r3, [pc, #52]	; (5950 <rtc_nrf_isr+0x38>)
    591c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5920:	f013 0f02 	tst.w	r3, #2
    5924:	d00a      	beq.n	593c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5926:	4b0b      	ldr	r3, [pc, #44]	; (5954 <rtc_nrf_isr+0x3c>)
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	b13b      	cbz	r3, 593c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    592c:	4b09      	ldr	r3, [pc, #36]	; (5954 <rtc_nrf_isr+0x3c>)
    592e:	2200      	movs	r2, #0
    5930:	601a      	str	r2, [r3, #0]
    5932:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5934:	4a08      	ldr	r2, [pc, #32]	; (5958 <rtc_nrf_isr+0x40>)
    5936:	6813      	ldr	r3, [r2, #0]
    5938:	3301      	adds	r3, #1
    593a:	6013      	str	r3, [r2, #0]
{
    593c:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    593e:	2c00      	cmp	r4, #0
    5940:	dd00      	ble.n	5944 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    5942:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5944:	4620      	mov	r0, r4
    5946:	f7ff ffad 	bl	58a4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    594a:	3401      	adds	r4, #1
    594c:	e7f7      	b.n	593e <rtc_nrf_isr+0x26>
    594e:	bf00      	nop
    5950:	40011000 	.word	0x40011000
    5954:	40011104 	.word	0x40011104
    5958:	20020998 	.word	0x20020998

0000595c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    595c:	b530      	push	{r4, r5, lr}
    595e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5960:	2300      	movs	r3, #0
    5962:	4a1f      	ldr	r2, [pc, #124]	; (59e0 <sys_clock_driver_init+0x84>)
    5964:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5968:	2b00      	cmp	r3, #0
    596a:	dd27      	ble.n	59bc <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    596c:	4c1c      	ldr	r4, [pc, #112]	; (59e0 <sys_clock_driver_init+0x84>)
    596e:	2502      	movs	r5, #2
    5970:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5974:	4b1b      	ldr	r3, [pc, #108]	; (59e4 <sys_clock_driver_init+0x88>)
    5976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    597a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    597e:	2200      	movs	r2, #0
    5980:	2101      	movs	r1, #1
    5982:	2011      	movs	r0, #17
    5984:	f7fe fbc8 	bl	4118 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5988:	2011      	movs	r0, #17
    598a:	f7fe fba7 	bl	40dc <arch_irq_enable>
    598e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5992:	2301      	movs	r3, #1
    5994:	4a14      	ldr	r2, [pc, #80]	; (59e8 <sys_clock_driver_init+0x8c>)
    5996:	6013      	str	r3, [r2, #0]
    5998:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    599a:	4a14      	ldr	r2, [pc, #80]	; (59ec <sys_clock_driver_init+0x90>)
    599c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    599e:	2400      	movs	r4, #0
    59a0:	9401      	str	r4, [sp, #4]
    59a2:	4b13      	ldr	r3, [pc, #76]	; (59f0 <sys_clock_driver_init+0x94>)
    59a4:	9300      	str	r3, [sp, #0]
    59a6:	4a13      	ldr	r2, [pc, #76]	; (59f4 <sys_clock_driver_init+0x98>)
    59a8:	2300      	movs	r3, #0
    59aa:	4620      	mov	r0, r4
    59ac:	f00d faa2 	bl	12ef4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    59b0:	4628      	mov	r0, r5
    59b2:	f7ff f901 	bl	4bb8 <z_nrf_clock_control_lf_on>

	return 0;
}
    59b6:	4620      	mov	r0, r4
    59b8:	b003      	add	sp, #12
    59ba:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    59bc:	4a0e      	ldr	r2, [pc, #56]	; (59f8 <sys_clock_driver_init+0x9c>)
    59be:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    59c2:	f04f 30ff 	mov.w	r0, #4294967295
    59c6:	f04f 31ff 	mov.w	r1, #4294967295
    59ca:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    59ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    59d2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    59d4:	4902      	ldr	r1, [pc, #8]	; (59e0 <sys_clock_driver_init+0x84>)
    59d6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    59da:	3301      	adds	r3, #1
    59dc:	e7c4      	b.n	5968 <sys_clock_driver_init+0xc>
    59de:	bf00      	nop
    59e0:	40011000 	.word	0x40011000
    59e4:	e000e100 	.word	0xe000e100
    59e8:	40011008 	.word	0x40011008
    59ec:	20020994 	.word	0x20020994
    59f0:	0000574d 	.word	0x0000574d
    59f4:	007fffff 	.word	0x007fffff
    59f8:	20000378 	.word	0x20000378

000059fc <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    59fc:	b510      	push	{r4, lr}
    59fe:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5a00:	f1b0 3fff 	cmp.w	r0, #4294967295
    5a04:	d007      	beq.n	5a16 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5a06:	1e44      	subs	r4, r0, #1
    5a08:	2c00      	cmp	r4, #0
    5a0a:	dd07      	ble.n	5a1c <sys_clock_set_timeout+0x20>
    5a0c:	4b11      	ldr	r3, [pc, #68]	; (5a54 <sys_clock_set_timeout+0x58>)
    5a0e:	429c      	cmp	r4, r3
    5a10:	dd05      	ble.n	5a1e <sys_clock_set_timeout+0x22>
    5a12:	4c11      	ldr	r4, [pc, #68]	; (5a58 <sys_clock_set_timeout+0x5c>)
    5a14:	e003      	b.n	5a1e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5a16:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    5a1a:	e7f4      	b.n	5a06 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5a1c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5a1e:	f7ff fecf 	bl	57c0 <z_nrf_rtc_timer_read>
    5a22:	4b0e      	ldr	r3, [pc, #56]	; (5a5c <sys_clock_set_timeout+0x60>)
    5a24:	e9d3 2300 	ldrd	r2, r3, [r3]
    5a28:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    5a2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5a2e:	d300      	bcc.n	5a32 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5a30:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5a32:	4404      	add	r4, r0
    5a34:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5a36:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    5a3a:	d300      	bcc.n	5a3e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    5a3c:	4c06      	ldr	r4, [pc, #24]	; (5a58 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5a3e:	2000      	movs	r0, #0
    5a40:	9001      	str	r0, [sp, #4]
    5a42:	4907      	ldr	r1, [pc, #28]	; (5a60 <sys_clock_set_timeout+0x64>)
    5a44:	9100      	str	r1, [sp, #0]
    5a46:	1912      	adds	r2, r2, r4
    5a48:	f143 0300 	adc.w	r3, r3, #0
    5a4c:	f00d fa52 	bl	12ef4 <compare_set>
}
    5a50:	b002      	add	sp, #8
    5a52:	bd10      	pop	{r4, pc}
    5a54:	007ffffe 	.word	0x007ffffe
    5a58:	007fffff 	.word	0x007fffff
    5a5c:	20000388 	.word	0x20000388
    5a60:	0000574d 	.word	0x0000574d

00005a64 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    5a64:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5a66:	f7ff feab 	bl	57c0 <z_nrf_rtc_timer_read>
    5a6a:	4b02      	ldr	r3, [pc, #8]	; (5a74 <sys_clock_elapsed+0x10>)
    5a6c:	681b      	ldr	r3, [r3, #0]
}
    5a6e:	1ac0      	subs	r0, r0, r3
    5a70:	bd08      	pop	{r3, pc}
    5a72:	bf00      	nop
    5a74:	20000388 	.word	0x20000388

00005a78 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5a78:	4b03      	ldr	r3, [pc, #12]	; (5a88 <nrf52_errata_36+0x10>)
    5a7a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5a7c:	2b08      	cmp	r3, #8
    5a7e:	d001      	beq.n	5a84 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5a80:	2000      	movs	r0, #0
    5a82:	4770      	bx	lr
                        return true;
    5a84:	2001      	movs	r0, #1
    #endif
}
    5a86:	4770      	bx	lr
    5a88:	10000130 	.word	0x10000130

00005a8c <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5a8c:	4b03      	ldr	r3, [pc, #12]	; (5a9c <nrf52_errata_66+0x10>)
    5a8e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5a90:	2b08      	cmp	r3, #8
    5a92:	d001      	beq.n	5a98 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5a94:	2000      	movs	r0, #0
    5a96:	4770      	bx	lr
                        return true;
    5a98:	2001      	movs	r0, #1
    #endif
}
    5a9a:	4770      	bx	lr
    5a9c:	10000130 	.word	0x10000130

00005aa0 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5aa0:	4b08      	ldr	r3, [pc, #32]	; (5ac4 <nrf52_errata_98+0x24>)
    5aa2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5aa4:	3304      	adds	r3, #4
    5aa6:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5aa8:	2a08      	cmp	r2, #8
    5aaa:	d001      	beq.n	5ab0 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5aac:	2000      	movs	r0, #0
    5aae:	4770      	bx	lr
                switch(var2)
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d804      	bhi.n	5abe <nrf52_errata_98+0x1e>
    5ab4:	e8df f003 	tbb	[pc, r3]
    5ab8:	01          	.byte	0x01
    5ab9:	00          	.byte	0x00
            if (var1 == 0x08)
    5aba:	2001      	movs	r0, #1
    5abc:	4770      	bx	lr
                        return false;
    5abe:	2000      	movs	r0, #0
    #endif
}
    5ac0:	4770      	bx	lr
    5ac2:	bf00      	nop
    5ac4:	10000130 	.word	0x10000130

00005ac8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5ac8:	4b08      	ldr	r3, [pc, #32]	; (5aec <nrf52_errata_103+0x24>)
    5aca:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5acc:	3304      	adds	r3, #4
    5ace:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5ad0:	2a08      	cmp	r2, #8
    5ad2:	d001      	beq.n	5ad8 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5ad4:	2000      	movs	r0, #0
    5ad6:	4770      	bx	lr
                switch(var2)
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d804      	bhi.n	5ae6 <nrf52_errata_103+0x1e>
    5adc:	e8df f003 	tbb	[pc, r3]
    5ae0:	01          	.byte	0x01
    5ae1:	00          	.byte	0x00
            if (var1 == 0x08)
    5ae2:	2001      	movs	r0, #1
    5ae4:	4770      	bx	lr
                        return false;
    5ae6:	2000      	movs	r0, #0
    #endif
}
    5ae8:	4770      	bx	lr
    5aea:	bf00      	nop
    5aec:	10000130 	.word	0x10000130

00005af0 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5af0:	4b08      	ldr	r3, [pc, #32]	; (5b14 <nrf52_errata_115+0x24>)
    5af2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5af4:	3304      	adds	r3, #4
    5af6:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5af8:	2a08      	cmp	r2, #8
    5afa:	d001      	beq.n	5b00 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5afc:	2000      	movs	r0, #0
    5afe:	4770      	bx	lr
                switch(var2)
    5b00:	2b00      	cmp	r3, #0
    5b02:	d804      	bhi.n	5b0e <nrf52_errata_115+0x1e>
    5b04:	e8df f003 	tbb	[pc, r3]
    5b08:	01          	.byte	0x01
    5b09:	00          	.byte	0x00
            if (var1 == 0x08)
    5b0a:	2001      	movs	r0, #1
    5b0c:	4770      	bx	lr
                        return false;
    5b0e:	2000      	movs	r0, #0
    #endif
}
    5b10:	4770      	bx	lr
    5b12:	bf00      	nop
    5b14:	10000130 	.word	0x10000130

00005b18 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b18:	4b08      	ldr	r3, [pc, #32]	; (5b3c <nrf52_errata_120+0x24>)
    5b1a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5b1c:	3304      	adds	r3, #4
    5b1e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b20:	2a08      	cmp	r2, #8
    5b22:	d001      	beq.n	5b28 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    5b24:	2000      	movs	r0, #0
    5b26:	4770      	bx	lr
                switch(var2)
    5b28:	2b00      	cmp	r3, #0
    5b2a:	d804      	bhi.n	5b36 <nrf52_errata_120+0x1e>
    5b2c:	e8df f003 	tbb	[pc, r3]
    5b30:	01          	.byte	0x01
    5b31:	00          	.byte	0x00
            if (var1 == 0x08)
    5b32:	2001      	movs	r0, #1
    5b34:	4770      	bx	lr
                        return false;
    5b36:	2000      	movs	r0, #0
    #endif
}
    5b38:	4770      	bx	lr
    5b3a:	bf00      	nop
    5b3c:	10000130 	.word	0x10000130

00005b40 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b40:	4b03      	ldr	r3, [pc, #12]	; (5b50 <nrf52_errata_136+0x10>)
    5b42:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b44:	2b08      	cmp	r3, #8
    5b46:	d001      	beq.n	5b4c <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5b48:	2000      	movs	r0, #0
    5b4a:	4770      	bx	lr
                        return true;
    5b4c:	2001      	movs	r0, #1
    #endif
}
    5b4e:	4770      	bx	lr
    5b50:	10000130 	.word	0x10000130

00005b54 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b54:	4b06      	ldr	r3, [pc, #24]	; (5b70 <nrf52_errata_249+0x1c>)
    5b56:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5b58:	4a06      	ldr	r2, [pc, #24]	; (5b74 <nrf52_errata_249+0x20>)
    5b5a:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5b5c:	2b08      	cmp	r3, #8
    5b5e:	d001      	beq.n	5b64 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5b60:	2000      	movs	r0, #0
    5b62:	4770      	bx	lr
                switch(var2)
    5b64:	2a03      	cmp	r2, #3
    5b66:	d801      	bhi.n	5b6c <nrf52_errata_249+0x18>
    5b68:	2000      	movs	r0, #0
    5b6a:	4770      	bx	lr
                        return true;
    5b6c:	2001      	movs	r0, #1
    #endif
}
    5b6e:	4770      	bx	lr
    5b70:	10000130 	.word	0x10000130
    5b74:	10000134 	.word	0x10000134

00005b78 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5b78:	4b02      	ldr	r3, [pc, #8]	; (5b84 <nvmc_wait+0xc>)
    5b7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5b7e:	2b00      	cmp	r3, #0
    5b80:	d0fa      	beq.n	5b78 <nvmc_wait>
}
    5b82:	4770      	bx	lr
    5b84:	4001e000 	.word	0x4001e000

00005b88 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    5b88:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5b8a:	4b03      	ldr	r3, [pc, #12]	; (5b98 <nvmc_config+0x10>)
    5b8c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    5b90:	f7ff fff2 	bl	5b78 <nvmc_wait>
}
    5b94:	bd08      	pop	{r3, pc}
    5b96:	bf00      	nop
    5b98:	4001e000 	.word	0x4001e000

00005b9c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5b9c:	4b01      	ldr	r3, [pc, #4]	; (5ba4 <SystemCoreClockUpdate+0x8>)
    5b9e:	4a02      	ldr	r2, [pc, #8]	; (5ba8 <SystemCoreClockUpdate+0xc>)
    5ba0:	601a      	str	r2, [r3, #0]
}
    5ba2:	4770      	bx	lr
    5ba4:	2000008c 	.word	0x2000008c
    5ba8:	03d09000 	.word	0x03d09000

00005bac <SystemInit>:

void SystemInit(void)
{
    5bac:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5bae:	f7ff ff63 	bl	5a78 <nrf52_errata_36>
    5bb2:	b140      	cbz	r0, 5bc6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bb8:	2200      	movs	r2, #0
    5bba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5bbe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5bc2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    5bc6:	f7ff ff61 	bl	5a8c <nrf52_errata_66>
    5bca:	2800      	cmp	r0, #0
    5bcc:	d046      	beq.n	5c5c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5bd2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5bd6:	4b56      	ldr	r3, [pc, #344]	; (5d30 <SystemInit+0x184>)
    5bd8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5bdc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5be0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5be4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5be8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5bec:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5bf0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5bf4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5bf8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5bfc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5c00:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5c04:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5c08:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5c0c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5c10:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5c14:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5c18:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5c1c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5c20:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5c24:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5c28:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5c2c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5c30:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5c34:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5c38:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5c3c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5c40:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5c44:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5c48:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5c4c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5c50:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5c54:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5c58:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5c5c:	f7ff ff20 	bl	5aa0 <nrf52_errata_98>
    5c60:	b110      	cbz	r0, 5c68 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5c62:	4b34      	ldr	r3, [pc, #208]	; (5d34 <SystemInit+0x188>)
    5c64:	4a34      	ldr	r2, [pc, #208]	; (5d38 <SystemInit+0x18c>)
    5c66:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5c68:	f7ff ff2e 	bl	5ac8 <nrf52_errata_103>
    5c6c:	b118      	cbz	r0, 5c76 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5c6e:	4b33      	ldr	r3, [pc, #204]	; (5d3c <SystemInit+0x190>)
    5c70:	22fb      	movs	r2, #251	; 0xfb
    5c72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5c76:	f7ff ff3b 	bl	5af0 <nrf52_errata_115>
    5c7a:	b148      	cbz	r0, 5c90 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5c7c:	4930      	ldr	r1, [pc, #192]	; (5d40 <SystemInit+0x194>)
    5c7e:	680b      	ldr	r3, [r1, #0]
    5c80:	f023 030f 	bic.w	r3, r3, #15
    5c84:	4a2f      	ldr	r2, [pc, #188]	; (5d44 <SystemInit+0x198>)
    5c86:	6812      	ldr	r2, [r2, #0]
    5c88:	f002 020f 	and.w	r2, r2, #15
    5c8c:	4313      	orrs	r3, r2
    5c8e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5c90:	f7ff ff42 	bl	5b18 <nrf52_errata_120>
    5c94:	b118      	cbz	r0, 5c9e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5c96:	4b2c      	ldr	r3, [pc, #176]	; (5d48 <SystemInit+0x19c>)
    5c98:	f44f 7200 	mov.w	r2, #512	; 0x200
    5c9c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5c9e:	f7ff ff4f 	bl	5b40 <nrf52_errata_136>
    5ca2:	b160      	cbz	r0, 5cbe <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ca8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5cac:	f013 0f01 	tst.w	r3, #1
    5cb0:	d005      	beq.n	5cbe <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cb6:	f06f 0201 	mvn.w	r2, #1
    5cba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    5cbe:	f7ff ff49 	bl	5b54 <nrf52_errata_249>
    5cc2:	b138      	cbz	r0, 5cd4 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5cc4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5cc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cd0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5cd4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5cdc:	2b00      	cmp	r3, #0
    5cde:	db08      	blt.n	5cf2 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5ce0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5ce4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5ce8:	2b00      	cmp	r3, #0
    5cea:	db02      	blt.n	5cf2 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    5cec:	f7ff ff56 	bl	5b9c <SystemCoreClockUpdate>
}
    5cf0:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5cf2:	2001      	movs	r0, #1
    5cf4:	f7ff ff48 	bl	5b88 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5cf8:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    5cfc:	2512      	movs	r5, #18
    5cfe:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5d02:	f7ff ff39 	bl	5b78 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5d06:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    5d0a:	f7ff ff35 	bl	5b78 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    5d0e:	2000      	movs	r0, #0
    5d10:	f7ff ff3a 	bl	5b88 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    5d14:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5d18:	490c      	ldr	r1, [pc, #48]	; (5d4c <SystemInit+0x1a0>)
    5d1a:	68ca      	ldr	r2, [r1, #12]
    5d1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5d20:	4b0b      	ldr	r3, [pc, #44]	; (5d50 <SystemInit+0x1a4>)
    5d22:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5d24:	60cb      	str	r3, [r1, #12]
    5d26:	f3bf 8f4f 	dsb	sy
    __NOP();
    5d2a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5d2c:	e7fd      	b.n	5d2a <SystemInit+0x17e>
    5d2e:	bf00      	nop
    5d30:	4000c000 	.word	0x4000c000
    5d34:	4000568c 	.word	0x4000568c
    5d38:	00038148 	.word	0x00038148
    5d3c:	4000f000 	.word	0x4000f000
    5d40:	40000ee4 	.word	0x40000ee4
    5d44:	10000258 	.word	0x10000258
    5d48:	40029640 	.word	0x40029640
    5d4c:	e000ed00 	.word	0xe000ed00
    5d50:	05fa0004 	.word	0x05fa0004

00005d54 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5d54:	4b06      	ldr	r3, [pc, #24]	; (5d70 <nrfx_clock_init+0x1c>)
    5d56:	791b      	ldrb	r3, [r3, #4]
    5d58:	b93b      	cbnz	r3, 5d6a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5d5a:	4b05      	ldr	r3, [pc, #20]	; (5d70 <nrfx_clock_init+0x1c>)
    5d5c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5d5e:	2201      	movs	r2, #1
    5d60:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    5d62:	2200      	movs	r2, #0
    5d64:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5d66:	4803      	ldr	r0, [pc, #12]	; (5d74 <nrfx_clock_init+0x20>)
    5d68:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5d6a:	4803      	ldr	r0, [pc, #12]	; (5d78 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5d6c:	4770      	bx	lr
    5d6e:	bf00      	nop
    5d70:	2002099c 	.word	0x2002099c
    5d74:	0bad0000 	.word	0x0bad0000
    5d78:	0bad000c 	.word	0x0bad000c

00005d7c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5d7c:	b110      	cbz	r0, 5d84 <nrfx_clock_start+0x8>
    5d7e:	2801      	cmp	r0, #1
    5d80:	d025      	beq.n	5dce <nrfx_clock_start+0x52>
    5d82:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5d88:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5d8c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5d90:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5d94:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5d98:	d111      	bne.n	5dbe <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d9e:	2200      	movs	r2, #0
    5da0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5da4:	4b0f      	ldr	r3, [pc, #60]	; (5de4 <nrfx_clock_start+0x68>)
    5da6:	2200      	movs	r2, #0
    5da8:	601a      	str	r2, [r3, #0]
    5daa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5db0:	2202      	movs	r2, #2
    5db2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5db6:	3308      	adds	r3, #8
    5db8:	2201      	movs	r2, #1
    5dba:	601a      	str	r2, [r3, #0]
}
    5dbc:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5dbe:	2b01      	cmp	r3, #1
    5dc0:	d1eb      	bne.n	5d9a <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5dc6:	2201      	movs	r2, #1
    5dc8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5dcc:	e7ea      	b.n	5da4 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dce:	4b06      	ldr	r3, [pc, #24]	; (5de8 <nrfx_clock_start+0x6c>)
    5dd0:	2200      	movs	r2, #0
    5dd2:	601a      	str	r2, [r3, #0]
    5dd4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5dda:	2201      	movs	r2, #1
    5ddc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5de0:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    5de2:	4770      	bx	lr
    5de4:	40000104 	.word	0x40000104
    5de8:	40000100 	.word	0x40000100

00005dec <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5dec:	b530      	push	{r4, r5, lr}
    5dee:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5df0:	4604      	mov	r4, r0
    5df2:	b118      	cbz	r0, 5dfc <nrfx_clock_stop+0x10>
    5df4:	2801      	cmp	r0, #1
    5df6:	d013      	beq.n	5e20 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5df8:	b003      	add	sp, #12
    5dfa:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    5dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e00:	2202      	movs	r2, #2
    5e02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e06:	f503 7382 	add.w	r3, r3, #260	; 0x104
    5e0a:	2200      	movs	r2, #0
    5e0c:	601a      	str	r2, [r3, #0]
    5e0e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e10:	4b39      	ldr	r3, [pc, #228]	; (5ef8 <nrfx_clock_stop+0x10c>)
    5e12:	2201      	movs	r2, #1
    5e14:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5e16:	2c01      	cmp	r4, #1
    5e18:	d00f      	beq.n	5e3a <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5e1a:	f242 7510 	movw	r5, #10000	; 0x2710
    5e1e:	e052      	b.n	5ec6 <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    5e20:	2301      	movs	r3, #1
    5e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e26:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e2a:	f502 7280 	add.w	r2, r2, #256	; 0x100
    5e2e:	2100      	movs	r1, #0
    5e30:	6011      	str	r1, [r2, #0]
    5e32:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e34:	4a31      	ldr	r2, [pc, #196]	; (5efc <nrfx_clock_stop+0x110>)
    5e36:	6013      	str	r3, [r2, #0]
}
    5e38:	e7ed      	b.n	5e16 <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5e3a:	2301      	movs	r3, #1
    5e3c:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5e40:	f242 7510 	movw	r5, #10000	; 0x2710
    5e44:	e018      	b.n	5e78 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e4a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5e4e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5e52:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5e56:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5e5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5e5e:	d120      	bne.n	5ea2 <nrfx_clock_stop+0xb6>
    return false;
    5e60:	2300      	movs	r3, #0
    5e62:	2b00      	cmp	r3, #0
    5e64:	d042      	beq.n	5eec <nrfx_clock_stop+0x100>
    5e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5e6a:	2b01      	cmp	r3, #1
    5e6c:	d13e      	bne.n	5eec <nrfx_clock_stop+0x100>
    5e6e:	2001      	movs	r0, #1
    5e70:	f00d f86e 	bl	12f50 <nrfx_busy_wait>
    5e74:	3d01      	subs	r5, #1
    5e76:	d039      	beq.n	5eec <nrfx_clock_stop+0x100>
    switch (domain)
    5e78:	2c00      	cmp	r4, #0
    5e7a:	d0e4      	beq.n	5e46 <nrfx_clock_stop+0x5a>
    5e7c:	2c01      	cmp	r4, #1
    5e7e:	d001      	beq.n	5e84 <nrfx_clock_stop+0x98>
    5e80:	2300      	movs	r3, #0
    5e82:	e7ee      	b.n	5e62 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e88:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    5e8c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5e90:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5e94:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    5e98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5e9c:	d103      	bne.n	5ea6 <nrfx_clock_stop+0xba>
    return false;
    5e9e:	2300      	movs	r3, #0
    5ea0:	e7df      	b.n	5e62 <nrfx_clock_stop+0x76>
                return true;
    5ea2:	2301      	movs	r3, #1
    5ea4:	e7dd      	b.n	5e62 <nrfx_clock_stop+0x76>
                return true;
    5ea6:	2301      	movs	r3, #1
    5ea8:	e7db      	b.n	5e62 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5eae:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5eb2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5eb6:	d115      	bne.n	5ee4 <nrfx_clock_stop+0xf8>
    return false;
    5eb8:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5eba:	b1bb      	cbz	r3, 5eec <nrfx_clock_stop+0x100>
    5ebc:	2001      	movs	r0, #1
    5ebe:	f00d f847 	bl	12f50 <nrfx_busy_wait>
    5ec2:	3d01      	subs	r5, #1
    5ec4:	d012      	beq.n	5eec <nrfx_clock_stop+0x100>
    switch (domain)
    5ec6:	2c00      	cmp	r4, #0
    5ec8:	d0ef      	beq.n	5eaa <nrfx_clock_stop+0xbe>
    5eca:	2c01      	cmp	r4, #1
    5ecc:	d001      	beq.n	5ed2 <nrfx_clock_stop+0xe6>
    5ece:	2300      	movs	r3, #0
    5ed0:	e7f3      	b.n	5eba <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ed6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5eda:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5ede:	d103      	bne.n	5ee8 <nrfx_clock_stop+0xfc>
    return false;
    5ee0:	2300      	movs	r3, #0
    5ee2:	e7ea      	b.n	5eba <nrfx_clock_stop+0xce>
                return true;
    5ee4:	2301      	movs	r3, #1
    5ee6:	e7e8      	b.n	5eba <nrfx_clock_stop+0xce>
                return true;
    5ee8:	2301      	movs	r3, #1
    5eea:	e7e6      	b.n	5eba <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5eec:	2c01      	cmp	r4, #1
    5eee:	d183      	bne.n	5df8 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    5ef0:	4b03      	ldr	r3, [pc, #12]	; (5f00 <nrfx_clock_stop+0x114>)
    5ef2:	2200      	movs	r2, #0
    5ef4:	715a      	strb	r2, [r3, #5]
    5ef6:	e77f      	b.n	5df8 <nrfx_clock_stop+0xc>
    5ef8:	4000000c 	.word	0x4000000c
    5efc:	40000004 	.word	0x40000004
    5f00:	2002099c 	.word	0x2002099c

00005f04 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5f04:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f06:	4b1b      	ldr	r3, [pc, #108]	; (5f74 <nrfx_power_clock_irq_handler+0x70>)
    5f08:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5f0a:	b183      	cbz	r3, 5f2e <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f0c:	4b19      	ldr	r3, [pc, #100]	; (5f74 <nrfx_power_clock_irq_handler+0x70>)
    5f0e:	2200      	movs	r2, #0
    5f10:	601a      	str	r2, [r3, #0]
    5f12:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f18:	2201      	movs	r2, #1
    5f1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5f1e:	4b16      	ldr	r3, [pc, #88]	; (5f78 <nrfx_power_clock_irq_handler+0x74>)
    5f20:	795b      	ldrb	r3, [r3, #5]
    5f22:	b923      	cbnz	r3, 5f2e <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    5f24:	4b14      	ldr	r3, [pc, #80]	; (5f78 <nrfx_power_clock_irq_handler+0x74>)
    5f26:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5f28:	681b      	ldr	r3, [r3, #0]
    5f2a:	2000      	movs	r0, #0
    5f2c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f2e:	4b13      	ldr	r3, [pc, #76]	; (5f7c <nrfx_power_clock_irq_handler+0x78>)
    5f30:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5f32:	b19b      	cbz	r3, 5f5c <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f34:	4b11      	ldr	r3, [pc, #68]	; (5f7c <nrfx_power_clock_irq_handler+0x78>)
    5f36:	2200      	movs	r2, #0
    5f38:	601a      	str	r2, [r3, #0]
    5f3a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f40:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5f44:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5f48:	f012 0f03 	tst.w	r2, #3
    5f4c:	d107      	bne.n	5f5e <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f4e:	2301      	movs	r3, #1
    5f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5f54:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f58:	3208      	adds	r2, #8
    5f5a:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5f5c:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f62:	2202      	movs	r2, #2
    5f64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5f68:	4b03      	ldr	r3, [pc, #12]	; (5f78 <nrfx_power_clock_irq_handler+0x74>)
    5f6a:	681b      	ldr	r3, [r3, #0]
    5f6c:	2001      	movs	r0, #1
    5f6e:	4798      	blx	r3
}
    5f70:	e7f4      	b.n	5f5c <nrfx_power_clock_irq_handler+0x58>
    5f72:	bf00      	nop
    5f74:	40000100 	.word	0x40000100
    5f78:	2002099c 	.word	0x2002099c
    5f7c:	40000104 	.word	0x40000104

00005f80 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    5f80:	4b04      	ldr	r3, [pc, #16]	; (5f94 <is_allocated_channel+0x14>)
    5f82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5f84:	2301      	movs	r3, #1
    5f86:	4083      	lsls	r3, r0
    5f88:	421a      	tst	r2, r3
}
    5f8a:	bf14      	ite	ne
    5f8c:	2001      	movne	r0, #1
    5f8e:	2000      	moveq	r0, #0
    5f90:	4770      	bx	lr
    5f92:	bf00      	nop
    5f94:	200209a4 	.word	0x200209a4

00005f98 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    5f98:	2301      	movs	r3, #1
    5f9a:	fa03 f000 	lsl.w	r0, r3, r0
    5f9e:	4a02      	ldr	r2, [pc, #8]	; (5fa8 <channel_allocated_set+0x10>)
    5fa0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    5fa2:	4303      	orrs	r3, r0
    5fa4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    5fa6:	4770      	bx	lr
    5fa8:	200209a4 	.word	0x200209a4

00005fac <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    5fac:	2301      	movs	r3, #1
    5fae:	fa03 f000 	lsl.w	r0, r3, r0
    5fb2:	4a03      	ldr	r2, [pc, #12]	; (5fc0 <channel_allocated_clr+0x14>)
    5fb4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    5fb6:	ea23 0300 	bic.w	r3, r3, r0
    5fba:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    5fbc:	4770      	bx	lr
    5fbe:	bf00      	nop
    5fc0:	200209a4 	.word	0x200209a4

00005fc4 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    5fc4:	b538      	push	{r3, r4, r5, lr}
    5fc6:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    5fc8:	f00c ffcf 	bl	12f6a <is_app_channel>
    5fcc:	b908      	cbnz	r0, 5fd2 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    5fce:	4809      	ldr	r0, [pc, #36]	; (5ff4 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5fd0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5fd2:	f04f 0320 	mov.w	r3, #32
    5fd6:	f3ef 8511 	mrs	r5, BASEPRI
    5fda:	f383 8812 	msr	BASEPRI_MAX, r3
    5fde:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    5fe2:	4620      	mov	r0, r4
    5fe4:	f7ff ffe2 	bl	5fac <channel_allocated_clr>
	__asm__ volatile(
    5fe8:	f385 8811 	msr	BASEPRI, r5
    5fec:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    5ff0:	4801      	ldr	r0, [pc, #4]	; (5ff8 <nrfx_gpiote_channel_free+0x34>)
}
    5ff2:	e7ed      	b.n	5fd0 <nrfx_gpiote_channel_free+0xc>
    5ff4:	0bad0004 	.word	0x0bad0004
    5ff8:	0bad0000 	.word	0x0bad0000

00005ffc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    5ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6000:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    6002:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    6004:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    6006:	4f17      	ldr	r7, [pc, #92]	; (6064 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    6008:	e013      	b.n	6032 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    600a:	4620      	mov	r0, r4
    600c:	f7ff ffc4 	bl	5f98 <channel_allocated_set>
            *p_channel = ch_idx;
    6010:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    6014:	4f14      	ldr	r7, [pc, #80]	; (6068 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    6016:	f386 8811 	msr	BASEPRI, r6
    601a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    601e:	4b12      	ldr	r3, [pc, #72]	; (6068 <nrfx_gpiote_channel_alloc+0x6c>)
    6020:	429f      	cmp	r7, r3
    6022:	d01b      	beq.n	605c <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    6024:	2301      	movs	r3, #1
    6026:	fa03 f309 	lsl.w	r3, r3, r9
    602a:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    602e:	3401      	adds	r4, #1
    6030:	b2e4      	uxtb	r4, r4
    6032:	b19d      	cbz	r5, 605c <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    6034:	f04f 0320 	mov.w	r3, #32
    6038:	f3ef 8611 	mrs	r6, BASEPRI
    603c:	f383 8812 	msr	BASEPRI_MAX, r3
    6040:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    6044:	46a1      	mov	r9, r4
    6046:	fa25 f304 	lsr.w	r3, r5, r4
    604a:	f013 0f01 	tst.w	r3, #1
    604e:	d0e2      	beq.n	6016 <nrfx_gpiote_channel_alloc+0x1a>
    6050:	4620      	mov	r0, r4
    6052:	f7ff ff95 	bl	5f80 <is_allocated_channel>
    6056:	2800      	cmp	r0, #0
    6058:	d1dd      	bne.n	6016 <nrfx_gpiote_channel_alloc+0x1a>
    605a:	e7d6      	b.n	600a <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    605c:	4638      	mov	r0, r7
    605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6062:	bf00      	nop
    6064:	0bad0002 	.word	0x0bad0002
    6068:	0bad0000 	.word	0x0bad0000

0000606c <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    606c:	2301      	movs	r3, #1
    606e:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    6070:	4a03      	ldr	r2, [pc, #12]	; (6080 <is_allocated_channel+0x14>)
    6072:	6812      	ldr	r2, [r2, #0]
    6074:	4213      	tst	r3, r2
}
    6076:	bf14      	ite	ne
    6078:	2001      	movne	r0, #1
    607a:	2000      	moveq	r0, #0
    607c:	4770      	bx	lr
    607e:	bf00      	nop
    6080:	20020a04 	.word	0x20020a04

00006084 <channel_allocated_set>:
    6084:	2301      	movs	r3, #1
    6086:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    608a:	4a02      	ldr	r2, [pc, #8]	; (6094 <channel_allocated_set+0x10>)
    608c:	6813      	ldr	r3, [r2, #0]
    608e:	4303      	orrs	r3, r0
    6090:	6013      	str	r3, [r2, #0]
}
    6092:	4770      	bx	lr
    6094:	20020a04 	.word	0x20020a04

00006098 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    609c:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    609e:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    60a0:	4e15      	ldr	r6, [pc, #84]	; (60f8 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    60a2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6100 <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    60a6:	e011      	b.n	60cc <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    60a8:	4620      	mov	r0, r4
    60aa:	f7ff ffeb 	bl	6084 <channel_allocated_set>
            *p_channel = channel;
    60ae:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    60b2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 60fc <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    60b6:	f387 8811 	msr	BASEPRI, r7
    60ba:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    60be:	4b0f      	ldr	r3, [pc, #60]	; (60fc <nrfx_ppi_channel_alloc+0x64>)
    60c0:	4598      	cmp	r8, r3
    60c2:	d016      	beq.n	60f2 <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    60c4:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    60c8:	3401      	adds	r4, #1
    60ca:	b2e4      	uxtb	r4, r4
    60cc:	b18e      	cbz	r6, 60f2 <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    60ce:	f04f 0320 	mov.w	r3, #32
    60d2:	f3ef 8711 	mrs	r7, BASEPRI
    60d6:	f383 8812 	msr	BASEPRI_MAX, r3
    60da:	f3bf 8f6f 	isb	sy
    60de:	2501      	movs	r5, #1
    60e0:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    60e2:	4235      	tst	r5, r6
    60e4:	d0e7      	beq.n	60b6 <nrfx_ppi_channel_alloc+0x1e>
    60e6:	4620      	mov	r0, r4
    60e8:	f7ff ffc0 	bl	606c <is_allocated_channel>
    60ec:	2800      	cmp	r0, #0
    60ee:	d1e2      	bne.n	60b6 <nrfx_ppi_channel_alloc+0x1e>
    60f0:	e7da      	b.n	60a8 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    60f2:	4640      	mov	r0, r8
    60f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    60f8:	000fffff 	.word	0x000fffff
    60fc:	0bad0000 	.word	0x0bad0000
    6100:	0bad0002 	.word	0x0bad0002

00006104 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6104:	4b14      	ldr	r3, [pc, #80]	; (6158 <_DoInit+0x54>)
    6106:	2203      	movs	r2, #3
    6108:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    610a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    610c:	4913      	ldr	r1, [pc, #76]	; (615c <_DoInit+0x58>)
    610e:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6110:	4a13      	ldr	r2, [pc, #76]	; (6160 <_DoInit+0x5c>)
    6112:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6114:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6118:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    611a:	2200      	movs	r2, #0
    611c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    611e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6120:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6122:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6124:	490f      	ldr	r1, [pc, #60]	; (6164 <_DoInit+0x60>)
    6126:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6128:	2110      	movs	r1, #16
    612a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    612c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    612e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6130:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6132:	4a0d      	ldr	r2, [pc, #52]	; (6168 <_DoInit+0x64>)
    6134:	6810      	ldr	r0, [r2, #0]
    6136:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    613a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    613e:	4a0b      	ldr	r2, [pc, #44]	; (616c <_DoInit+0x68>)
    6140:	e892 0003 	ldmia.w	r2, {r0, r1}
    6144:	6018      	str	r0, [r3, #0]
    6146:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    6148:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    614c:	2220      	movs	r2, #32
    614e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    6150:	f3bf 8f5f 	dmb	sy
}
    6154:	4770      	bx	lr
    6156:	bf00      	nop
    6158:	20020a08 	.word	0x20020a08
    615c:	00068e74 	.word	0x00068e74
    6160:	20020ac0 	.word	0x20020ac0
    6164:	20020ab0 	.word	0x20020ab0
    6168:	00068e80 	.word	0x00068e80
    616c:	00068e84 	.word	0x00068e84

00006170 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    6170:	b570      	push	{r4, r5, r6, lr}
    6172:	b082      	sub	sp, #8
    6174:	4604      	mov	r4, r0
  if (head_ != temp_) {
    6176:	6905      	ldr	r5, [r0, #16]
    6178:	6983      	ldr	r3, [r0, #24]
    617a:	429d      	cmp	r5, r3
    617c:	d006      	beq.n	618c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    617e:	490f      	ldr	r1, [pc, #60]	; (61bc <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    6180:	6840      	ldr	r0, [r0, #4]
    6182:	f00d fcff 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    6186:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    6188:	b002      	add	sp, #8
    618a:	bd70      	pop	{r4, r5, r6, pc}
    618c:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    618e:	4611      	mov	r1, r2
    6190:	6880      	ldr	r0, [r0, #8]
    6192:	f00c ff37 	bl	13004 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6196:	6963      	ldr	r3, [r4, #20]
    6198:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    619a:	42b3      	cmp	r3, r6
    619c:	d304      	bcc.n	61a8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    619e:	4430      	add	r0, r6
    61a0:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    61a2:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    61a4:	2000      	movs	r0, #0
    61a6:	e7ef      	b.n	6188 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    61a8:	1af2      	subs	r2, r6, r3
    61aa:	9200      	str	r2, [sp, #0]
    61ac:	4632      	mov	r2, r6
    61ae:	4904      	ldr	r1, [pc, #16]	; (61c0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    61b0:	6860      	ldr	r0, [r4, #4]
    61b2:	f00d fce7 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    61b6:	2001      	movs	r0, #1
    61b8:	e7e6      	b.n	6188 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    61ba:	bf00      	nop
    61bc:	00068e8c 	.word	0x00068e8c
    61c0:	00068ee4 	.word	0x00068ee4

000061c4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    61c4:	b530      	push	{r4, r5, lr}
    61c6:	b083      	sub	sp, #12
    61c8:	4605      	mov	r5, r0
    61ca:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    61cc:	4611      	mov	r1, r2
    61ce:	6980      	ldr	r0, [r0, #24]
    61d0:	f00c ff18 	bl	13004 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    61d4:	696b      	ldr	r3, [r5, #20]
    61d6:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    61d8:	42a3      	cmp	r3, r4
    61da:	d303      	bcc.n	61e4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    61dc:	4404      	add	r4, r0
    61de:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    61e0:	b003      	add	sp, #12
    61e2:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    61e4:	1ae2      	subs	r2, r4, r3
    61e6:	9200      	str	r2, [sp, #0]
    61e8:	4622      	mov	r2, r4
    61ea:	4903      	ldr	r1, [pc, #12]	; (61f8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    61ec:	6868      	ldr	r0, [r5, #4]
    61ee:	f00d fcc9 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    61f2:	2000      	movs	r0, #0
    61f4:	e7f4      	b.n	61e0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    61f6:	bf00      	nop
    61f8:	00068f28 	.word	0x00068f28

000061fc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    61fc:	b530      	push	{r4, r5, lr}
    61fe:	b083      	sub	sp, #12
    6200:	4604      	mov	r4, r0
    6202:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    6204:	6940      	ldr	r0, [r0, #20]
    6206:	4611      	mov	r1, r2
    6208:	1b40      	subs	r0, r0, r5
    620a:	f00c ff02 	bl	13012 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    620e:	6923      	ldr	r3, [r4, #16]
    6210:	4283      	cmp	r3, r0
    6212:	d802      	bhi.n	621a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    6214:	6160      	str	r0, [r4, #20]
}
    6216:	b003      	add	sp, #12
    6218:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    621a:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    621c:	9300      	str	r3, [sp, #0]
    621e:	1aeb      	subs	r3, r5, r3
    6220:	462a      	mov	r2, r5
    6222:	4903      	ldr	r1, [pc, #12]	; (6230 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    6224:	6860      	ldr	r0, [r4, #4]
    6226:	f00d fcad 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    622a:	2000      	movs	r0, #0
    622c:	e7f3      	b.n	6216 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    622e:	bf00      	nop
    6230:	00068f74 	.word	0x00068f74

00006234 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    6234:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    6236:	4d05      	ldr	r5, [pc, #20]	; (624c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    6238:	6005      	str	r5, [r0, #0]
    623a:	6041      	str	r1, [r0, #4]
    623c:	6082      	str	r2, [r0, #8]
    623e:	60c3      	str	r3, [r0, #12]
    6240:	6102      	str	r2, [r0, #16]
    6242:	6143      	str	r3, [r0, #20]
    6244:	6182      	str	r2, [r0, #24]
    6246:	bc30      	pop	{r4, r5}
    6248:	4770      	bx	lr
    624a:	bf00      	nop
    624c:	00068fc8 	.word	0x00068fc8

00006250 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    6250:	b510      	push	{r4, lr}
    6252:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    6254:	b300      	cbz	r0, 6298 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    6256:	460c      	mov	r4, r1
    6258:	4613      	mov	r3, r2
    625a:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    625c:	b1f4      	cbz	r4, 629c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    625e:	4622      	mov	r2, r4
    6260:	a801      	add	r0, sp, #4
    6262:	f00c fe9d 	bl	12fa0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6266:	2204      	movs	r2, #4
    6268:	211c      	movs	r1, #28
    626a:	eb0d 0002 	add.w	r0, sp, r2
    626e:	f7ff ffc5 	bl	61fc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6272:	4603      	mov	r3, r0
    6274:	b168      	cbz	r0, 6292 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6276:	4a0a      	ldr	r2, [pc, #40]	; (62a0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    6278:	6002      	str	r2, [r0, #0]
    627a:	9a02      	ldr	r2, [sp, #8]
    627c:	6042      	str	r2, [r0, #4]
    627e:	9a03      	ldr	r2, [sp, #12]
    6280:	6082      	str	r2, [r0, #8]
    6282:	9a04      	ldr	r2, [sp, #16]
    6284:	60c2      	str	r2, [r0, #12]
    6286:	9a05      	ldr	r2, [sp, #20]
    6288:	6102      	str	r2, [r0, #16]
    628a:	9a06      	ldr	r2, [sp, #24]
    628c:	6142      	str	r2, [r0, #20]
    628e:	9a07      	ldr	r2, [sp, #28]
    6290:	6182      	str	r2, [r0, #24]
}
    6292:	4618      	mov	r0, r3
    6294:	b008      	add	sp, #32
    6296:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6298:	f00f fe94 	bl	15fc4 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    629c:	f00f fe92 	bl	15fc4 <abort>
    62a0:	00068fc8 	.word	0x00068fc8

000062a4 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    62a4:	b508      	push	{r3, lr}
    62a6:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    62a8:	4b03      	ldr	r3, [pc, #12]	; (62b8 <DebugLog+0x14>)
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	4903      	ldr	r1, [pc, #12]	; (62bc <DebugLog+0x18>)
    62ae:	68d8      	ldr	r0, [r3, #12]
    62b0:	f00a faa4 	bl	107fc <fiprintf>
#endif
}
    62b4:	bd08      	pop	{r3, pc}
    62b6:	bf00      	nop
    62b8:	200000f8 	.word	0x200000f8
    62bc:	00068fe0 	.word	0x00068fe0

000062c0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    62c0:	b500      	push	{lr}
    62c2:	b0c1      	sub	sp, #260	; 0x104
    62c4:	4602      	mov	r2, r0
    62c6:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    62c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    62cc:	4668      	mov	r0, sp
    62ce:	f000 f917 	bl	6500 <MicroVsnprintf>
  DebugLog(log_buffer);
    62d2:	4668      	mov	r0, sp
    62d4:	f7ff ffe6 	bl	62a4 <DebugLog>
  DebugLog("\r\n");
    62d8:	4802      	ldr	r0, [pc, #8]	; (62e4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    62da:	f7ff ffe3 	bl	62a4 <DebugLog>
#endif
}
    62de:	b041      	add	sp, #260	; 0x104
    62e0:	f85d fb04 	ldr.w	pc, [sp], #4
    62e4:	0006ba10 	.word	0x0006ba10

000062e8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    62e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62ec:	b083      	sub	sp, #12
    62ee:	4680      	mov	r8, r0
    62f0:	468b      	mov	fp, r1
    62f2:	4692      	mov	sl, r2
    62f4:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    62f6:	4606      	mov	r6, r0
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    62f8:	f00c ff01 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    62fc:	eba8 0400 	sub.w	r4, r8, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6300:	4620      	mov	r0, r4
    6302:	f00c ff02 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6306:	2804      	cmp	r0, #4
    6308:	d90d      	bls.n	6326 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    630a:	1d20      	adds	r0, r4, #4
    630c:	f00c fefd 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    6310:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6314:	b148      	cbz	r0, 632a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    6316:	4620      	mov	r0, r4
    6318:	f00c feeb 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    631c:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    631e:	b3ac      	cbz	r4, 638c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6320:	2500      	movs	r5, #0
  int element_count = 1;
    6322:	2701      	movs	r7, #1
    6324:	e01e      	b.n	6364 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6326:	2000      	movs	r0, #0
    6328:	e7f2      	b.n	6310 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    632a:	2400      	movs	r4, #0
    632c:	e7f7      	b.n	631e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    632e:	1d20      	adds	r0, r4, #4
    6330:	f00c feeb 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6334:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6336:	b300      	cbz	r0, 637a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    6338:	4620      	mov	r0, r4
    633a:	f00c feda 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    633e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6340:	6820      	ldr	r0, [r4, #0]
    6342:	f00b fc90 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6346:	4285      	cmp	r5, r0
    6348:	d221      	bcs.n	638e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    634a:	6820      	ldr	r0, [r4, #0]
    634c:	f00b fc8b 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6350:	4285      	cmp	r5, r0
    6352:	d214      	bcs.n	637e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6354:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6356:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    635a:	f00c fecf 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    635e:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6362:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6364:	4630      	mov	r0, r6
    6366:	f00c feca 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    636a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    636c:	4620      	mov	r0, r4
    636e:	f00c fecc 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6372:	2804      	cmp	r0, #4
    6374:	d8db      	bhi.n	632e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    6376:	2000      	movs	r0, #0
    6378:	e7dc      	b.n	6334 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    637a:	2400      	movs	r4, #0
    637c:	e7e0      	b.n	6340 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    637e:	4b1a      	ldr	r3, [pc, #104]	; (63e8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    6380:	4a1a      	ldr	r2, [pc, #104]	; (63ec <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    6382:	f44f 7183 	mov.w	r1, #262	; 0x106
    6386:	481a      	ldr	r0, [pc, #104]	; (63f0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    6388:	f00a fa1a 	bl	107c0 <__assert_func>
  int element_count = 1;
    638c:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    638e:	4640      	mov	r0, r8
    6390:	f00c feb5 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6394:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6398:	4620      	mov	r0, r4
    639a:	f00c feb6 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    639e:	2806      	cmp	r0, #6
    63a0:	d910      	bls.n	63c4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    63a2:	1da0      	adds	r0, r4, #6
    63a4:	f00c feb1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    63a8:	b170      	cbz	r0, 63c8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    63aa:	4440      	add	r0, r8
    63ac:	f00c feb3 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    63b0:	464a      	mov	r2, r9
    63b2:	f10d 0107 	add.w	r1, sp, #7
    63b6:	b2c0      	uxtb	r0, r0
    63b8:	f003 f98a 	bl	96d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    63bc:	b130      	cbz	r0, 63cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    63be:	b003      	add	sp, #12
    63c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    63c4:	2000      	movs	r0, #0
    63c6:	e7ef      	b.n	63a8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    63c8:	2000      	movs	r0, #0
    63ca:	e7f1      	b.n	63b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    63cc:	4651      	mov	r1, sl
    63ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
    63d2:	f00c fe2a 	bl	1302a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    63d6:	2800      	cmp	r0, #0
    63d8:	d1f1      	bne.n	63be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    63da:	f8da 3000 	ldr.w	r3, [sl]
    63de:	fb07 f703 	mul.w	r7, r7, r3
    63e2:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    63e6:	e7ea      	b.n	63be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    63e8:	00068ff8 	.word	0x00068ff8
    63ec:	00069004 	.word	0x00069004
    63f0:	000690c4 	.word	0x000690c4

000063f4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    63f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    63f6:	b089      	sub	sp, #36	; 0x24
    63f8:	9001      	str	r0, [sp, #4]
    63fa:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    63fc:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    6400:	2204      	movs	r2, #4
    6402:	eb0d 0102 	add.w	r1, sp, r2
    6406:	a807      	add	r0, sp, #28
    6408:	f00f fde7 	bl	15fda <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    640c:	9b07      	ldr	r3, [sp, #28]
    640e:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    6412:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    6414:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    6418:	2b00      	cmp	r3, #0
    641a:	db0e      	blt.n	643a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    641c:	2300      	movs	r3, #0
    641e:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    6420:	2c80      	cmp	r4, #128	; 0x80
    6422:	d00e      	beq.n	6442 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    6424:	4b32      	ldr	r3, [pc, #200]	; (64f0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    6426:	f10d 0c0c 	add.w	ip, sp, #12
    642a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    642c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    6430:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    6434:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    6436:	2300      	movs	r3, #0
    6438:	e01a      	b.n	6470 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    643a:	232d      	movs	r3, #45	; 0x2d
    643c:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    6440:	e7ec      	b.n	641c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    6442:	b937      	cbnz	r7, 6452 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    6444:	4a2b      	ldr	r2, [pc, #172]	; (64f4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    6446:	1ba9      	subs	r1, r5, r6
    6448:	4630      	mov	r0, r6
    644a:	f00c fe7b 	bl	13144 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    644e:	4607      	mov	r7, r0
      return current;
    6450:	e04a      	b.n	64e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    6452:	4a29      	ldr	r2, [pc, #164]	; (64f8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    6454:	1ba9      	subs	r1, r5, r6
    6456:	4630      	mov	r0, r6
    6458:	f00c fe74 	bl	13144 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    645c:	4607      	mov	r7, r0
      return current;
    645e:	e043      	b.n	64e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    6460:	a908      	add	r1, sp, #32
    6462:	18c8      	adds	r0, r1, r3
    6464:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    6468:	fa27 f000 	lsr.w	r0, r7, r0
    646c:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    646e:	3301      	adds	r3, #1
    6470:	2b0c      	cmp	r3, #12
    6472:	ddf5      	ble.n	6460 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    6474:	2331      	movs	r3, #49	; 0x31
    6476:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    6478:	232e      	movs	r3, #46	; 0x2e
    647a:	7073      	strb	r3, [r6, #1]
  current += 1;
    647c:	1cb7      	adds	r7, r6, #2
  *current = 0;
    647e:	2300      	movs	r3, #0
    6480:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    6482:	1be9      	subs	r1, r5, r7
    6484:	2907      	cmp	r1, #7
    6486:	dd2f      	ble.n	64e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6488:	2301      	movs	r3, #1
    648a:	2b06      	cmp	r3, #6
    648c:	dc03      	bgt.n	6496 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    648e:	2030      	movs	r0, #48	; 0x30
    6490:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6492:	3301      	adds	r3, #1
    6494:	e7f9      	b.n	648a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6496:	230a      	movs	r3, #10
    6498:	4638      	mov	r0, r7
    649a:	f00c fea0 	bl	131de <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    649e:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    64a0:	2330      	movs	r3, #48	; 0x30
    64a2:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    64a4:	f1d1 0607 	rsbs	r6, r1, #7
    64a8:	d00c      	beq.n	64c4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    64aa:	2300      	movs	r3, #0
    64ac:	428b      	cmp	r3, r1
    64ae:	da06      	bge.n	64be <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    64b0:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    64b4:	5582      	strb	r2, [r0, r6]
      *current = '0';
    64b6:	2230      	movs	r2, #48	; 0x30
    64b8:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    64ba:	3301      	adds	r3, #1
    64bc:	e7f6      	b.n	64ac <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    64be:	3007      	adds	r0, #7
    64c0:	e000      	b.n	64c4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    64c2:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    64c4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    64c8:	2b30      	cmp	r3, #48	; 0x30
    64ca:	d102      	bne.n	64d2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    64cc:	1e43      	subs	r3, r0, #1
    64ce:	42bb      	cmp	r3, r7
    64d0:	d8f7      	bhi.n	64c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    64d2:	2300      	movs	r3, #0
    64d4:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    64d6:	4a09      	ldr	r2, [pc, #36]	; (64fc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    64d8:	1a29      	subs	r1, r5, r0
    64da:	f00c fe33 	bl	13144 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    64de:	4622      	mov	r2, r4
    64e0:	1a29      	subs	r1, r5, r0
    64e2:	f00c fe6d 	bl	131c0 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    64e6:	4607      	mov	r7, r0
  return current;
}
    64e8:	4638      	mov	r0, r7
    64ea:	b009      	add	sp, #36	; 0x24
    64ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64ee:	bf00      	nop
    64f0:	00069138 	.word	0x00069138
    64f4:	0006912c 	.word	0x0006912c
    64f8:	00069130 	.word	0x00069130
    64fc:	00069134 	.word	0x00069134

00006500 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    6500:	b5f0      	push	{r4, r5, r6, r7, lr}
    6502:	b083      	sub	sp, #12
    6504:	4607      	mov	r7, r0
    6506:	4615      	mov	r5, r2
    6508:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    650a:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    650c:	2400      	movs	r4, #0
    650e:	e07c      	b.n	660a <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6510:	1b33      	subs	r3, r6, r4
    6512:	2b0a      	cmp	r3, #10
    6514:	dd09      	ble.n	652a <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    6516:	9b01      	ldr	r3, [sp, #4]
    6518:	1d1a      	adds	r2, r3, #4
    651a:	9201      	str	r2, [sp, #4]
    651c:	6819      	ldr	r1, [r3, #0]
    651e:	1938      	adds	r0, r7, r4
    6520:	f00c fe6d 	bl	131fe <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    6524:	4404      	add	r4, r0
          current++;
    6526:	1caa      	adds	r2, r5, #2
          break;
    6528:	e06e      	b.n	6608 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    652a:	1c60      	adds	r0, r4, #1
    652c:	2300      	movs	r3, #0
    652e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6530:	e0b1      	b.n	6696 <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6532:	1b33      	subs	r3, r6, r4
    6534:	2b0a      	cmp	r3, #10
    6536:	dd09      	ble.n	654c <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    6538:	9b01      	ldr	r3, [sp, #4]
    653a:	1d1a      	adds	r2, r3, #4
    653c:	9201      	str	r2, [sp, #4]
    653e:	6819      	ldr	r1, [r3, #0]
    6540:	1938      	adds	r0, r7, r4
    6542:	f00c fe64 	bl	1320e <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    6546:	4404      	add	r4, r0
          current++;
    6548:	1caa      	adds	r2, r5, #2
          break;
    654a:	e05d      	b.n	6608 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    654c:	1c60      	adds	r0, r4, #1
    654e:	2300      	movs	r3, #0
    6550:	553b      	strb	r3, [r7, r4]
            return output_index;
    6552:	e0a0      	b.n	6696 <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    6554:	1b33      	subs	r3, r6, r4
    6556:	2b09      	cmp	r3, #9
    6558:	dd0f      	ble.n	657a <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    655a:	1c63      	adds	r3, r4, #1
    655c:	2230      	movs	r2, #48	; 0x30
    655e:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6560:	3402      	adds	r4, #2
    6562:	2278      	movs	r2, #120	; 0x78
    6564:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	1d1a      	adds	r2, r3, #4
    656a:	9201      	str	r2, [sp, #4]
    656c:	6819      	ldr	r1, [r3, #0]
    656e:	1938      	adds	r0, r7, r4
    6570:	f00c fe56 	bl	13220 <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    6574:	4404      	add	r4, r0
          current++;
    6576:	1caa      	adds	r2, r5, #2
          break;
    6578:	e046      	b.n	6608 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    657a:	1c60      	adds	r0, r4, #1
    657c:	2300      	movs	r3, #0
    657e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6580:	e089      	b.n	6696 <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6582:	1b30      	subs	r0, r6, r4
    6584:	f7fa fb94 	bl	cb0 <__aeabi_i2f>
    6588:	4944      	ldr	r1, [pc, #272]	; (669c <MicroVsnprintf+0x19c>)
    658a:	f7fa fd83 	bl	1094 <__aeabi_fcmplt>
    658e:	b988      	cbnz	r0, 65b4 <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    6590:	9b01      	ldr	r3, [sp, #4]
    6592:	3307      	adds	r3, #7
    6594:	f023 0307 	bic.w	r3, r3, #7
    6598:	f103 0208 	add.w	r2, r3, #8
    659c:	9201      	str	r2, [sp, #4]
    659e:	e9d3 0100 	ldrd	r0, r1, [r3]
    65a2:	f7fa fa7b 	bl	a9c <__aeabi_d2f>
    65a6:	4601      	mov	r1, r0
    65a8:	1938      	adds	r0, r7, r4
    65aa:	f00c fe42 	bl	13232 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    65ae:	4404      	add	r4, r0
          current++;
    65b0:	1caa      	adds	r2, r5, #2
          break;
    65b2:	e029      	b.n	6608 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    65b4:	1c60      	adds	r0, r4, #1
    65b6:	2300      	movs	r3, #0
    65b8:	553b      	strb	r3, [r7, r4]
            return output_index;
    65ba:	e06c      	b.n	6696 <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    65bc:	1caa      	adds	r2, r5, #2
    65be:	553b      	strb	r3, [r7, r4]
    65c0:	3401      	adds	r4, #1
          break;
    65c2:	e021      	b.n	6608 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    65c4:	1b33      	subs	r3, r6, r4
    65c6:	2b00      	cmp	r3, #0
    65c8:	dd07      	ble.n	65da <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    65ca:	9b01      	ldr	r3, [sp, #4]
    65cc:	1d1a      	adds	r2, r3, #4
    65ce:	9201      	str	r2, [sp, #4]
    65d0:	681b      	ldr	r3, [r3, #0]
    65d2:	553b      	strb	r3, [r7, r4]
          current++;
    65d4:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    65d6:	3401      	adds	r4, #1
          break;
    65d8:	e016      	b.n	6608 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    65da:	1c60      	adds	r0, r4, #1
    65dc:	2300      	movs	r3, #0
    65de:	553b      	strb	r3, [r7, r4]
            return output_index;
    65e0:	e059      	b.n	6696 <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    65e2:	9b01      	ldr	r3, [sp, #4]
    65e4:	1d1a      	adds	r2, r3, #4
    65e6:	9201      	str	r2, [sp, #4]
    65e8:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    65ea:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    65ec:	18e2      	adds	r2, r4, r3
    65ee:	42b2      	cmp	r2, r6
    65f0:	da05      	bge.n	65fe <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    65f2:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    65f4:	b11a      	cbz	r2, 65fe <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    65f6:	3301      	adds	r3, #1
    65f8:	553a      	strb	r2, [r7, r4]
    65fa:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    65fc:	e7f6      	b.n	65ec <MicroVsnprintf+0xec>
          }
          current++;
    65fe:	1caa      	adds	r2, r5, #2
    6600:	e002      	b.n	6608 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    6602:	1c6a      	adds	r2, r5, #1
    6604:	553b      	strb	r3, [r7, r4]
    6606:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    6608:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    660a:	782b      	ldrb	r3, [r5, #0]
    660c:	2b00      	cmp	r3, #0
    660e:	d03f      	beq.n	6690 <MicroVsnprintf+0x190>
    6610:	42b4      	cmp	r4, r6
    6612:	da3d      	bge.n	6690 <MicroVsnprintf+0x190>
    if (*current == '%') {
    6614:	2b25      	cmp	r3, #37	; 0x25
    6616:	d1f4      	bne.n	6602 <MicroVsnprintf+0x102>
      current++;
    6618:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    661a:	786b      	ldrb	r3, [r5, #1]
    661c:	2b25      	cmp	r3, #37	; 0x25
    661e:	d0cd      	beq.n	65bc <MicroVsnprintf+0xbc>
    6620:	d3f2      	bcc.n	6608 <MicroVsnprintf+0x108>
    6622:	2b78      	cmp	r3, #120	; 0x78
    6624:	d8f0      	bhi.n	6608 <MicroVsnprintf+0x108>
    6626:	2b63      	cmp	r3, #99	; 0x63
    6628:	d3ee      	bcc.n	6608 <MicroVsnprintf+0x108>
    662a:	3b63      	subs	r3, #99	; 0x63
    662c:	2b15      	cmp	r3, #21
    662e:	d8eb      	bhi.n	6608 <MicroVsnprintf+0x108>
    6630:	a101      	add	r1, pc, #4	; (adr r1, 6638 <MicroVsnprintf+0x138>)
    6632:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    6636:	bf00      	nop
    6638:	000065c5 	.word	0x000065c5
    663c:	00006511 	.word	0x00006511
    6640:	00006609 	.word	0x00006609
    6644:	00006583 	.word	0x00006583
    6648:	00006609 	.word	0x00006609
    664c:	00006609 	.word	0x00006609
    6650:	00006609 	.word	0x00006609
    6654:	00006609 	.word	0x00006609
    6658:	00006609 	.word	0x00006609
    665c:	00006609 	.word	0x00006609
    6660:	00006609 	.word	0x00006609
    6664:	00006609 	.word	0x00006609
    6668:	00006609 	.word	0x00006609
    666c:	00006609 	.word	0x00006609
    6670:	00006609 	.word	0x00006609
    6674:	00006609 	.word	0x00006609
    6678:	000065e3 	.word	0x000065e3
    667c:	00006609 	.word	0x00006609
    6680:	00006533 	.word	0x00006533
    6684:	00006609 	.word	0x00006609
    6688:	00006609 	.word	0x00006609
    668c:	00006555 	.word	0x00006555
    }
  }
  output[output_index++] = '\0';
    6690:	1c60      	adds	r0, r4, #1
    6692:	2300      	movs	r3, #0
    6694:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    6696:	b003      	add	sp, #12
    6698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    669a:	bf00      	nop
    669c:	41600000 	.word	0x41600000

000066a0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    66a0:	b570      	push	{r4, r5, r6, lr}
    66a2:	4604      	mov	r4, r0
    66a4:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    66a6:	f00c fd2a 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    66aa:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    66ac:	4630      	mov	r0, r6
    66ae:	f00c fd2c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66b2:	2808      	cmp	r0, #8
    66b4:	d918      	bls.n	66e8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    66b6:	f106 0008 	add.w	r0, r6, #8
    66ba:	f00c fd26 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    66be:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66c0:	b1a0      	cbz	r0, 66ec <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    66c2:	4620      	mov	r0, r4
    66c4:	f00c fd15 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    66c8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    66ca:	6820      	ldr	r0, [r4, #0]
    66cc:	f00b facb 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    66d0:	4285      	cmp	r5, r0
    66d2:	d20d      	bcs.n	66f0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    66d4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    66d6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    66da:	4620      	mov	r0, r4
    66dc:	f00c fd09 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    66e0:	4420      	add	r0, r4
    66e2:	f00c fdbc 	bl	1325e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    66e6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66e8:	2000      	movs	r0, #0
    66ea:	e7e8      	b.n	66be <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66ec:	2400      	movs	r4, #0
    66ee:	e7ec      	b.n	66ca <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    66f0:	4b03      	ldr	r3, [pc, #12]	; (6700 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    66f2:	4a04      	ldr	r2, [pc, #16]	; (6704 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    66f4:	f44f 7183 	mov.w	r1, #262	; 0x106
    66f8:	4803      	ldr	r0, [pc, #12]	; (6708 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    66fa:	f00a f861 	bl	107c0 <__assert_func>
    66fe:	bf00      	nop
    6700:	00068ff8 	.word	0x00068ff8
    6704:	00069148 	.word	0x00069148
    6708:	000690c4 	.word	0x000690c4

0000670c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    670c:	6943      	ldr	r3, [r0, #20]
    670e:	2b20      	cmp	r3, #32
    6710:	d007      	beq.n	6722 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    6712:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    6714:	2a91      	cmp	r2, #145	; 0x91
    6716:	d806      	bhi.n	6726 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    6718:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    671a:	4a04      	ldr	r2, [pc, #16]	; (672c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    671c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6720:	4770      	bx	lr
    return registration->custom_name;
    6722:	6980      	ldr	r0, [r0, #24]
    6724:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6726:	4802      	ldr	r0, [pc, #8]	; (6730 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    6728:	4770      	bx	lr
    672a:	bf00      	nop
    672c:	00069b54 	.word	0x00069b54
    6730:	00068800 	.word	0x00068800

00006734 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    6734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6738:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    673a:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    673e:	2600      	movs	r6, #0
    6740:	e024      	b.n	678c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    6742:	4621      	mov	r1, r4
    6744:	68e8      	ldr	r0, [r5, #12]
    6746:	f00c ffc6 	bl	136d6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    674a:	3401      	adds	r4, #1
    674c:	42bc      	cmp	r4, r7
    674e:	d21c      	bcs.n	678a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6750:	692b      	ldr	r3, [r5, #16]
    6752:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    6756:	212c      	movs	r1, #44	; 0x2c
    6758:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    675c:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6760:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6764:	2b00      	cmp	r3, #0
    6766:	d0ec      	beq.n	6742 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6768:	6868      	ldr	r0, [r5, #4]
    676a:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    676c:	4682      	mov	sl, r0
    676e:	2800      	cmp	r0, #0
    6770:	d0e7      	beq.n	6742 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    6772:	4648      	mov	r0, r9
    6774:	f7ff ffca 	bl	670c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6778:	4601      	mov	r1, r0
    677a:	4653      	mov	r3, sl
    677c:	4622      	mov	r2, r4
    677e:	480c      	ldr	r0, [pc, #48]	; (67b0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6780:	f00c fc32 	bl	12fe8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6784:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    6786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    678a:	3601      	adds	r6, #1
    678c:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    678e:	6818      	ldr	r0, [r3, #0]
    6790:	f00b fa69 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6794:	4286      	cmp	r6, r0
    6796:	d207      	bcs.n	67a8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    6798:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    679a:	4631      	mov	r1, r6
    679c:	68a8      	ldr	r0, [r5, #8]
    679e:	f7ff ff7f 	bl	66a0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    67a2:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    67a4:	2400      	movs	r4, #0
    67a6:	e7d1      	b.n	674c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    67a8:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    67ac:	2000      	movs	r0, #0
    67ae:	e7ea      	b.n	6786 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    67b0:	00069240 	.word	0x00069240

000067b4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    67b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67b8:	b083      	sub	sp, #12
    67ba:	4606      	mov	r6, r0
    67bc:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    67be:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    67c2:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    67c4:	6983      	ldr	r3, [r0, #24]
    67c6:	6818      	ldr	r0, [r3, #0]
    67c8:	f00b fa4d 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    67cc:	4284      	cmp	r4, r0
    67ce:	d207      	bcs.n	67e0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    67d0:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    67d2:	4621      	mov	r1, r4
    67d4:	68b0      	ldr	r0, [r6, #8]
    67d6:	f7ff ff63 	bl	66a0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    67da:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    67dc:	2700      	movs	r7, #0
    67de:	e01d      	b.n	681c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    67e0:	4602      	mov	r2, r0
    67e2:	4621      	mov	r1, r4
    67e4:	4827      	ldr	r0, [pc, #156]	; (6884 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    67e6:	f00c fbff 	bl	12fe8 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    67ea:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    67ec:	4628      	mov	r0, r5
    67ee:	b003      	add	sp, #12
    67f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    67f4:	f00f fbe6 	bl	15fc4 <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    67f8:	4640      	mov	r0, r8
    67fa:	f7ff ff87 	bl	670c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    67fe:	4601      	mov	r1, r0
    6800:	462b      	mov	r3, r5
    6802:	463a      	mov	r2, r7
    6804:	4820      	ldr	r0, [pc, #128]	; (6888 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    6806:	f00c fbef 	bl	12fe8 <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    680a:	2c00      	cmp	r4, #0
    680c:	d0ee      	beq.n	67ec <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    680e:	6823      	ldr	r3, [r4, #0]
    6810:	68db      	ldr	r3, [r3, #12]
    6812:	9900      	ldr	r1, [sp, #0]
    6814:	4620      	mov	r0, r4
    6816:	4798      	blx	r3
    6818:	e7e8      	b.n	67ec <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    681a:	3701      	adds	r7, #1
    681c:	454f      	cmp	r7, r9
    681e:	d22d      	bcs.n	687c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6820:	6933      	ldr	r3, [r6, #16]
    6822:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    6826:	252c      	movs	r5, #44	; 0x2c
    6828:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    682c:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6830:	4640      	mov	r0, r8
    6832:	f7ff ff6b 	bl	670c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6836:	4601      	mov	r1, r0
    6838:	6873      	ldr	r3, [r6, #4]
    683a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    683c:	2300      	movs	r3, #0
    683e:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    6840:	b124      	cbz	r4, 684c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    6842:	6823      	ldr	r3, [r4, #0]
    6844:	689b      	ldr	r3, [r3, #8]
    6846:	4620      	mov	r0, r4
    6848:	4798      	blx	r3
    684a:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    684c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6850:	2b00      	cmp	r3, #0
    6852:	d0cf      	beq.n	67f4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    6854:	4629      	mov	r1, r5
    6856:	6870      	ldr	r0, [r6, #4]
    6858:	4798      	blx	r3
    685a:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    685c:	68f0      	ldr	r0, [r6, #12]
    685e:	6803      	ldr	r3, [r0, #0]
    6860:	689b      	ldr	r3, [r3, #8]
    6862:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    6864:	2d01      	cmp	r5, #1
    6866:	d0c7      	beq.n	67f8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6868:	2d00      	cmp	r5, #0
    686a:	d1ce      	bne.n	680a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    686c:	2c00      	cmp	r4, #0
    686e:	d0d4      	beq.n	681a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6870:	6823      	ldr	r3, [r4, #0]
    6872:	68db      	ldr	r3, [r3, #12]
    6874:	9900      	ldr	r1, [sp, #0]
    6876:	4620      	mov	r0, r4
    6878:	4798      	blx	r3
    687a:	e7ce      	b.n	681a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    687c:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6880:	2500      	movs	r5, #0
    6882:	e7b3      	b.n	67ec <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    6884:	00069278 	.word	0x00069278
    6888:	000692ac 	.word	0x000692ac

0000688c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    688c:	b570      	push	{r4, r5, r6, lr}
    688e:	4604      	mov	r4, r0
    6890:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    6892:	4a11      	ldr	r2, [pc, #68]	; (68d8 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    6894:	6002      	str	r2, [r0, #0]
    6896:	6041      	str	r1, [r0, #4]
    6898:	6085      	str	r5, [r0, #8]
    689a:	60c3      	str	r3, [r0, #12]
    689c:	2300      	movs	r3, #0
    689e:	6103      	str	r3, [r0, #16]
    68a0:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    68a2:	b19d      	cbz	r5, 68cc <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    68a4:	4628      	mov	r0, r5
    68a6:	f00c fc2a 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    68aa:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    68ac:	4630      	mov	r0, r6
    68ae:	f00c fc2c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    68b2:	2808      	cmp	r0, #8
    68b4:	d90c      	bls.n	68d0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    68b6:	f106 0008 	add.w	r0, r6, #8
    68ba:	f00c fc26 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    68be:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    68c0:	b140      	cbz	r0, 68d4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    68c2:	4628      	mov	r0, r5
    68c4:	f00c fc15 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    68c8:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    68ca:	61a5      	str	r5, [r4, #24]
}
    68cc:	4620      	mov	r0, r4
    68ce:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    68d0:	2000      	movs	r0, #0
    68d2:	e7f4      	b.n	68be <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    68d4:	2500      	movs	r5, #0
    68d6:	e7f8      	b.n	68ca <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    68d8:	00069da8 	.word	0x00069da8

000068dc <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    68dc:	b570      	push	{r4, r5, r6, lr}
    68de:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    68e0:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    68e2:	4620      	mov	r0, r4
    68e4:	f00c fc0b 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    68e8:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    68ea:	4630      	mov	r0, r6
    68ec:	f00c fc0d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    68f0:	2808      	cmp	r0, #8
    68f2:	d92c      	bls.n	694e <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    68f4:	f106 0008 	add.w	r0, r6, #8
    68f8:	f00c fc07 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    68fc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    68fe:	b340      	cbz	r0, 6952 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    6900:	4620      	mov	r0, r4
    6902:	f00c fbf6 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6906:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6908:	6820      	ldr	r0, [r4, #0]
    690a:	f00b f9ac 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    690e:	4285      	cmp	r5, r0
    6910:	d221      	bcs.n	6956 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6912:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6914:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6918:	4620      	mov	r0, r4
    691a:	f00c fbea 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    691e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6920:	4620      	mov	r0, r4
    6922:	f00c fbec 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6926:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6928:	4628      	mov	r0, r5
    692a:	f00c fbee 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    692e:	2808      	cmp	r0, #8
    6930:	d918      	bls.n	6964 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    6932:	f105 0008 	add.w	r0, r5, #8
    6936:	f00c fbe8 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    693a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    693c:	b1a0      	cbz	r0, 6968 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    693e:	4620      	mov	r0, r4
    6940:	f00c fbd7 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6944:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6946:	6820      	ldr	r0, [r4, #0]
    6948:	f00b f98d 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    694c:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    694e:	2000      	movs	r0, #0
    6950:	e7d4      	b.n	68fc <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6952:	2400      	movs	r4, #0
    6954:	e7d8      	b.n	6908 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6956:	4b05      	ldr	r3, [pc, #20]	; (696c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    6958:	4a05      	ldr	r2, [pc, #20]	; (6970 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    695a:	f44f 7183 	mov.w	r1, #262	; 0x106
    695e:	4805      	ldr	r0, [pc, #20]	; (6974 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6960:	f009 ff2e 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6964:	2000      	movs	r0, #0
    6966:	e7e8      	b.n	693a <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6968:	2400      	movs	r4, #0
    696a:	e7ec      	b.n	6946 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    696c:	00068ff8 	.word	0x00068ff8
    6970:	00069148 	.word	0x00069148
    6974:	000690c4 	.word	0x000690c4

00006978 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6978:	b570      	push	{r4, r5, r6, lr}
    697a:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    697c:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    697e:	4620      	mov	r0, r4
    6980:	f00c fbbd 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6984:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6986:	4630      	mov	r0, r6
    6988:	f00c fbbf 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    698c:	2808      	cmp	r0, #8
    698e:	d92b      	bls.n	69e8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    6990:	f106 0008 	add.w	r0, r6, #8
    6994:	f00c fbb9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6998:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    699a:	b338      	cbz	r0, 69ec <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    699c:	4620      	mov	r0, r4
    699e:	f00c fba8 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69a2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69a4:	6820      	ldr	r0, [r4, #0]
    69a6:	f00b f95e 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    69aa:	4285      	cmp	r5, r0
    69ac:	d220      	bcs.n	69f0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    69ae:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    69b0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    69b4:	4620      	mov	r0, r4
    69b6:	f00c fb9c 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69ba:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    69bc:	4620      	mov	r0, r4
    69be:	f00c fb9e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    69c2:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    69c4:	4628      	mov	r0, r5
    69c6:	f00c fba0 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69ca:	2806      	cmp	r0, #6
    69cc:	d917      	bls.n	69fe <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    69ce:	1da8      	adds	r0, r5, #6
    69d0:	f00c fb9b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    69d4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69d6:	b1a0      	cbz	r0, 6a02 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    69d8:	4620      	mov	r0, r4
    69da:	f00c fb8a 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69de:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69e0:	6820      	ldr	r0, [r4, #0]
    69e2:	f00b f940 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    69e6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69e8:	2000      	movs	r0, #0
    69ea:	e7d5      	b.n	6998 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69ec:	2400      	movs	r4, #0
    69ee:	e7d9      	b.n	69a4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    69f0:	4b05      	ldr	r3, [pc, #20]	; (6a08 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    69f2:	4a06      	ldr	r2, [pc, #24]	; (6a0c <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    69f4:	f44f 7183 	mov.w	r1, #262	; 0x106
    69f8:	4805      	ldr	r0, [pc, #20]	; (6a10 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    69fa:	f009 fee1 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69fe:	2000      	movs	r0, #0
    6a00:	e7e8      	b.n	69d4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a02:	2400      	movs	r4, #0
    6a04:	e7ec      	b.n	69e0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    6a06:	bf00      	nop
    6a08:	00068ff8 	.word	0x00068ff8
    6a0c:	00069148 	.word	0x00069148
    6a10:	000690c4 	.word	0x000690c4

00006a14 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    6a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a18:	4606      	mov	r6, r0
    6a1a:	460d      	mov	r5, r1
    6a1c:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    6a1e:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6a20:	4620      	mov	r0, r4
    6a22:	f00c fb6c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a26:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a2a:	4640      	mov	r0, r8
    6a2c:	f00c fb6d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a30:	2808      	cmp	r0, #8
    6a32:	d93d      	bls.n	6ab0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    6a34:	f108 0008 	add.w	r0, r8, #8
    6a38:	f00c fb67 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6a3c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a3e:	b3c8      	cbz	r0, 6ab4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6a40:	4620      	mov	r0, r4
    6a42:	f00c fb56 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a46:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6a48:	6820      	ldr	r0, [r4, #0]
    6a4a:	f00b f90c 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6a4e:	4285      	cmp	r5, r0
    6a50:	d232      	bcs.n	6ab8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6a52:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6a54:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6a58:	4620      	mov	r0, r4
    6a5a:	f00c fb4a 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a5e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6a60:	4620      	mov	r0, r4
    6a62:	f00c fb4c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a66:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a6a:	4640      	mov	r0, r8
    6a6c:	f00c fb4d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a70:	2808      	cmp	r0, #8
    6a72:	d928      	bls.n	6ac6 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    6a74:	f108 0008 	add.w	r0, r8, #8
    6a78:	f00c fb47 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6a7c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a7e:	b320      	cbz	r0, 6aca <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6a80:	4620      	mov	r0, r4
    6a82:	f00c fb36 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a86:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6a88:	6820      	ldr	r0, [r4, #0]
    6a8a:	f00b f8ec 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6a8e:	4287      	cmp	r7, r0
    6a90:	d21d      	bcs.n	6ace <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6a92:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6a94:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6a98:	f00c fb30 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6a9c:	6931      	ldr	r1, [r6, #16]
    6a9e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6aa2:	686b      	ldr	r3, [r5, #4]
    6aa4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6aa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ab0:	2000      	movs	r0, #0
    6ab2:	e7c3      	b.n	6a3c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ab4:	2400      	movs	r4, #0
    6ab6:	e7c7      	b.n	6a48 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6ab8:	4b08      	ldr	r3, [pc, #32]	; (6adc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6aba:	4a09      	ldr	r2, [pc, #36]	; (6ae0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    6abc:	f44f 7183 	mov.w	r1, #262	; 0x106
    6ac0:	4808      	ldr	r0, [pc, #32]	; (6ae4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6ac2:	f009 fe7d 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ac6:	2000      	movs	r0, #0
    6ac8:	e7d8      	b.n	6a7c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6aca:	2400      	movs	r4, #0
    6acc:	e7dc      	b.n	6a88 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6ace:	4b03      	ldr	r3, [pc, #12]	; (6adc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6ad0:	4a05      	ldr	r2, [pc, #20]	; (6ae8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    6ad2:	f44f 7183 	mov.w	r1, #262	; 0x106
    6ad6:	4803      	ldr	r0, [pc, #12]	; (6ae4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6ad8:	f009 fe72 	bl	107c0 <__assert_func>
    6adc:	00068ff8 	.word	0x00068ff8
    6ae0:	00069148 	.word	0x00069148
    6ae4:	000690c4 	.word	0x000690c4
    6ae8:	00069004 	.word	0x00069004

00006aec <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    6aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6af0:	4606      	mov	r6, r0
    6af2:	460d      	mov	r5, r1
    6af4:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    6af6:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6af8:	4620      	mov	r0, r4
    6afa:	f00c fb00 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6afe:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6b02:	4640      	mov	r0, r8
    6b04:	f00c fb01 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b08:	2808      	cmp	r0, #8
    6b0a:	d93d      	bls.n	6b88 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    6b0c:	f108 0008 	add.w	r0, r8, #8
    6b10:	f00c fafb 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6b14:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b16:	b3c8      	cbz	r0, 6b8c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    6b18:	4620      	mov	r0, r4
    6b1a:	f00c faea 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b1e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6b20:	6820      	ldr	r0, [r4, #0]
    6b22:	f00b f8a0 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6b26:	4285      	cmp	r5, r0
    6b28:	d232      	bcs.n	6b90 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6b2a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6b2c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6b30:	4620      	mov	r0, r4
    6b32:	f00c fade 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b36:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6b38:	4620      	mov	r0, r4
    6b3a:	f00c fae0 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6b3e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6b42:	4640      	mov	r0, r8
    6b44:	f00c fae1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b48:	2806      	cmp	r0, #6
    6b4a:	d928      	bls.n	6b9e <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    6b4c:	f108 0006 	add.w	r0, r8, #6
    6b50:	f00c fadb 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6b54:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b56:	b320      	cbz	r0, 6ba2 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6b58:	4620      	mov	r0, r4
    6b5a:	f00c faca 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b5e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6b60:	6820      	ldr	r0, [r4, #0]
    6b62:	f00b f880 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6b66:	4287      	cmp	r7, r0
    6b68:	d21d      	bcs.n	6ba6 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6b6a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6b6c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6b70:	f00c fac4 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6b74:	6931      	ldr	r1, [r6, #16]
    6b76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6b7a:	686b      	ldr	r3, [r5, #4]
    6b7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6b80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b88:	2000      	movs	r0, #0
    6b8a:	e7c3      	b.n	6b14 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b8c:	2400      	movs	r4, #0
    6b8e:	e7c7      	b.n	6b20 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6b90:	4b08      	ldr	r3, [pc, #32]	; (6bb4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6b92:	4a09      	ldr	r2, [pc, #36]	; (6bb8 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    6b94:	f44f 7183 	mov.w	r1, #262	; 0x106
    6b98:	4808      	ldr	r0, [pc, #32]	; (6bbc <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6b9a:	f009 fe11 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b9e:	2000      	movs	r0, #0
    6ba0:	e7d8      	b.n	6b54 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ba2:	2400      	movs	r4, #0
    6ba4:	e7dc      	b.n	6b60 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6ba6:	4b03      	ldr	r3, [pc, #12]	; (6bb4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6ba8:	4a05      	ldr	r2, [pc, #20]	; (6bc0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    6baa:	f44f 7183 	mov.w	r1, #262	; 0x106
    6bae:	4803      	ldr	r0, [pc, #12]	; (6bbc <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6bb0:	f009 fe06 	bl	107c0 <__assert_func>
    6bb4:	00068ff8 	.word	0x00068ff8
    6bb8:	00069148 	.word	0x00069148
    6bbc:	000690c4 	.word	0x000690c4
    6bc0:	00069004 	.word	0x00069004

00006bc4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    6bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bc8:	b083      	sub	sp, #12
    6bca:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6bcc:	2700      	movs	r7, #0
    6bce:	e0c8      	b.n	6d62 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    6bd0:	4b71      	ldr	r3, [pc, #452]	; (6d98 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6bd2:	4a72      	ldr	r2, [pc, #456]	; (6d9c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    6bd4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6bd8:	4871      	ldr	r0, [pc, #452]	; (6da0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6bda:	f009 fdf1 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bde:	2000      	movs	r0, #0
    6be0:	e01d      	b.n	6c1e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6be2:	2400      	movs	r4, #0
    6be4:	e022      	b.n	6c2c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    6be6:	4b6c      	ldr	r3, [pc, #432]	; (6d98 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6be8:	4a6e      	ldr	r2, [pc, #440]	; (6da4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    6bea:	f44f 7183 	mov.w	r1, #262	; 0x106
    6bee:	486c      	ldr	r0, [pc, #432]	; (6da0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6bf0:	f009 fde6 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bf4:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6bf6:	b118      	cbz	r0, 6c00 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    6bf8:	4420      	add	r0, r4
    6bfa:	f00c fb4f 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    6bfe:	e000      	b.n	6c02 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    6c00:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    6c02:	bba0      	cbnz	r0, 6c6e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6c04:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6c06:	4630      	mov	r0, r6
    6c08:	f00c fa79 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c0c:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c0e:	4620      	mov	r0, r4
    6c10:	f00c fa7b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c14:	2804      	cmp	r0, #4
    6c16:	d9e2      	bls.n	6bde <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    6c18:	1d20      	adds	r0, r4, #4
    6c1a:	f00c fa76 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c1e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c20:	2800      	cmp	r0, #0
    6c22:	d0de      	beq.n	6be2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    6c24:	4620      	mov	r0, r4
    6c26:	f00c fa64 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c2a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6c2c:	6820      	ldr	r0, [r4, #0]
    6c2e:	f00b f81a 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6c32:	4285      	cmp	r5, r0
    6c34:	f080 8094 	bcs.w	6d60 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6c38:	6820      	ldr	r0, [r4, #0]
    6c3a:	f00b f814 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6c3e:	4285      	cmp	r5, r0
    6c40:	d2d1      	bcs.n	6be6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6c42:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6c44:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6c48:	4620      	mov	r0, r4
    6c4a:	f00c fa52 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c4e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6c50:	4620      	mov	r0, r4
    6c52:	f00c fa54 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c56:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c5a:	4648      	mov	r0, r9
    6c5c:	f00c fa55 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c60:	280e      	cmp	r0, #14
    6c62:	d9c7      	bls.n	6bf4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    6c64:	f109 000e 	add.w	r0, r9, #14
    6c68:	f00c fa4f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6c6c:	e7c3      	b.n	6bf6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    6c6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6c72:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    6c76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    6c7a:	6858      	ldr	r0, [r3, #4]
    6c7c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6c80:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    6c84:	a901      	add	r1, sp, #4
    6c86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6c8a:	f00c fa11 	bl	130b0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6c8e:	4603      	mov	r3, r0
    6c90:	2800      	cmp	r0, #0
    6c92:	d17d      	bne.n	6d90 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    6c94:	4620      	mov	r0, r4
    6c96:	f00c fa32 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c9a:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c9e:	4648      	mov	r0, r9
    6ca0:	f00c fa33 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ca4:	2806      	cmp	r0, #6
    6ca6:	d914      	bls.n	6cd2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    6ca8:	f109 0006 	add.w	r0, r9, #6
    6cac:	f00c fa2d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6cb0:	b188      	cbz	r0, 6cd6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    6cb2:	4420      	add	r0, r4
    6cb4:	f00c fa2f 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    6cb8:	2809      	cmp	r0, #9
    6cba:	d00e      	beq.n	6cda <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    6cbc:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    6cbe:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6cc2:	4453      	add	r3, sl
    6cc4:	685b      	ldr	r3, [r3, #4]
    6cc6:	9a01      	ldr	r2, [sp, #4]
    6cc8:	f853 000b 	ldr.w	r0, [r3, fp]
    6ccc:	f00f f993 	bl	15ff6 <memset>
    6cd0:	e798      	b.n	6c04 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cd2:	2000      	movs	r0, #0
    6cd4:	e7ec      	b.n	6cb0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6cd6:	2000      	movs	r0, #0
    6cd8:	e7ee      	b.n	6cb8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    6cda:	4620      	mov	r0, r4
    6cdc:	f00c fa0f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ce0:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ce4:	4648      	mov	r0, r9
    6ce6:	f00c fa10 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cea:	280c      	cmp	r0, #12
    6cec:	d928      	bls.n	6d40 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    6cee:	f109 000c 	add.w	r0, r9, #12
    6cf2:	f00c fa0a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6cf6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cf8:	b320      	cbz	r0, 6d44 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    6cfa:	4620      	mov	r0, r4
    6cfc:	f00c f9f9 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d00:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    6d02:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    6d04:	4620      	mov	r0, r4
    6d06:	f00c f9fa 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d0a:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d0c:	4620      	mov	r0, r4
    6d0e:	f00c f9fc 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d12:	280a      	cmp	r0, #10
    6d14:	d918      	bls.n	6d48 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    6d16:	f104 000a 	add.w	r0, r4, #10
    6d1a:	f00c f9f6 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d1e:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d20:	b1a0      	cbz	r0, 6d4c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    6d22:	4648      	mov	r0, r9
    6d24:	f00c f9e5 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d28:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d2a:	f8d9 0000 	ldr.w	r0, [r9]
    6d2e:	f00a ff9a 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d32:	b170      	cbz	r0, 6d52 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6d34:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    6d38:	f00c fab5 	bl	132a6 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    6d3c:	4601      	mov	r1, r0
    6d3e:	e7be      	b.n	6cbe <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d40:	2000      	movs	r0, #0
    6d42:	e7d8      	b.n	6cf6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d44:	2400      	movs	r4, #0
    6d46:	e7dc      	b.n	6d02 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d48:	2000      	movs	r0, #0
    6d4a:	e7e8      	b.n	6d1e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d4c:	f04f 0900 	mov.w	r9, #0
    6d50:	e7eb      	b.n	6d2a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    6d52:	4b11      	ldr	r3, [pc, #68]	; (6d98 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6d54:	4a14      	ldr	r2, [pc, #80]	; (6da8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    6d56:	f44f 7183 	mov.w	r1, #262	; 0x106
    6d5a:	4811      	ldr	r0, [pc, #68]	; (6da0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6d5c:	f009 fd30 	bl	107c0 <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6d60:	3701      	adds	r7, #1
    6d62:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6d66:	6830      	ldr	r0, [r6, #0]
    6d68:	f00a ff7d 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6d6c:	4287      	cmp	r7, r0
    6d6e:	d20e      	bcs.n	6d8e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    6d70:	6830      	ldr	r0, [r6, #0]
    6d72:	f00a ff78 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d76:	4287      	cmp	r7, r0
    6d78:	f4bf af2a 	bcs.w	6bd0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d7c:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    6d7e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d82:	4630      	mov	r0, r6
    6d84:	f00c f9b5 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d88:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6d8a:	2500      	movs	r5, #0
    6d8c:	e73b      	b.n	6c06 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    6d8e:	2300      	movs	r3, #0
}
    6d90:	4618      	mov	r0, r3
    6d92:	b003      	add	sp, #12
    6d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d98:	00068ff8 	.word	0x00068ff8
    6d9c:	00069148 	.word	0x00069148
    6da0:	000690c4 	.word	0x000690c4
    6da4:	000692e0 	.word	0x000692e0
    6da8:	000693d4 	.word	0x000693d4

00006dac <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    6dac:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    6dae:	4b05      	ldr	r3, [pc, #20]	; (6dc4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    6db0:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    6db2:	4b05      	ldr	r3, [pc, #20]	; (6dc8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    6db4:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    6db6:	4b05      	ldr	r3, [pc, #20]	; (6dcc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    6db8:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    6dba:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    6dbc:	2300      	movs	r3, #0
    6dbe:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    6dc2:	4770      	bx	lr
    6dc4:	0001342d 	.word	0x0001342d
    6dc8:	000133db 	.word	0x000133db
    6dcc:	000133f9 	.word	0x000133f9

00006dd0 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    6dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dd2:	4605      	mov	r5, r0
    6dd4:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    6dd6:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6dd8:	4620      	mov	r0, r4
    6dda:	f00c f990 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6dde:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6de0:	4638      	mov	r0, r7
    6de2:	f00c f992 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6de6:	2808      	cmp	r0, #8
    6de8:	d92f      	bls.n	6e4a <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    6dea:	f107 0008 	add.w	r0, r7, #8
    6dee:	f00c f98c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6df2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6df4:	b358      	cbz	r0, 6e4e <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    6df6:	4620      	mov	r0, r4
    6df8:	f00c f97b 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6dfc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6dfe:	6820      	ldr	r0, [r4, #0]
    6e00:	f00a ff31 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6e04:	b328      	cbz	r0, 6e52 <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e06:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6e08:	4620      	mov	r0, r4
    6e0a:	f00c f972 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e0e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6e10:	4620      	mov	r0, r4
    6e12:	f00c f974 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e16:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e18:	4638      	mov	r0, r7
    6e1a:	f00c f976 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e1e:	2808      	cmp	r0, #8
    6e20:	d91e      	bls.n	6e60 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    6e22:	f107 0008 	add.w	r0, r7, #8
    6e26:	f00c f970 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6e2a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e2c:	b1d0      	cbz	r0, 6e64 <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    6e2e:	4620      	mov	r0, r4
    6e30:	f00c f95f 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e34:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e36:	6820      	ldr	r0, [r4, #0]
    6e38:	f00a ff15 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    6e3c:	4286      	cmp	r6, r0
    6e3e:	d213      	bcs.n	6e68 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    6e40:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6e44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e4a:	2000      	movs	r0, #0
    6e4c:	e7d1      	b.n	6df2 <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e4e:	2400      	movs	r4, #0
    6e50:	e7d5      	b.n	6dfe <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6e52:	4b09      	ldr	r3, [pc, #36]	; (6e78 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    6e54:	4a09      	ldr	r2, [pc, #36]	; (6e7c <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    6e56:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e5a:	4809      	ldr	r0, [pc, #36]	; (6e80 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    6e5c:	f009 fcb0 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e60:	2000      	movs	r0, #0
    6e62:	e7e2      	b.n	6e2a <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e64:	2400      	movs	r4, #0
    6e66:	e7e6      	b.n	6e36 <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6e68:	4603      	mov	r3, r0
    6e6a:	4632      	mov	r2, r6
    6e6c:	4905      	ldr	r1, [pc, #20]	; (6e84 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    6e6e:	68a8      	ldr	r0, [r5, #8]
    6e70:	f00c fe88 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6e74:	2000      	movs	r0, #0
    6e76:	e7e7      	b.n	6e48 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    6e78:	00068ff8 	.word	0x00068ff8
    6e7c:	00069148 	.word	0x00069148
    6e80:	000690c4 	.word	0x000690c4
    6e84:	00069dd8 	.word	0x00069dd8

00006e88 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    6e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e8a:	4605      	mov	r5, r0
    6e8c:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    6e8e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6e90:	4620      	mov	r0, r4
    6e92:	f00c f934 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e96:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e98:	4638      	mov	r0, r7
    6e9a:	f00c f936 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e9e:	2808      	cmp	r0, #8
    6ea0:	d92e      	bls.n	6f00 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    6ea2:	f107 0008 	add.w	r0, r7, #8
    6ea6:	f00c f930 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6eaa:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6eac:	b350      	cbz	r0, 6f04 <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    6eae:	4620      	mov	r0, r4
    6eb0:	f00c f91f 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6eb4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6eb6:	6820      	ldr	r0, [r4, #0]
    6eb8:	f00a fed5 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6ebc:	b320      	cbz	r0, 6f08 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6ebe:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ec0:	4620      	mov	r0, r4
    6ec2:	f00c f916 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ec6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6ec8:	4620      	mov	r0, r4
    6eca:	f00c f918 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ece:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ed0:	4638      	mov	r0, r7
    6ed2:	f00c f91a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ed6:	2806      	cmp	r0, #6
    6ed8:	d91d      	bls.n	6f16 <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    6eda:	1db8      	adds	r0, r7, #6
    6edc:	f00c f915 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6ee0:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ee2:	b1d0      	cbz	r0, 6f1a <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    6ee4:	4620      	mov	r0, r4
    6ee6:	f00c f904 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6eea:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6eec:	6820      	ldr	r0, [r4, #0]
    6eee:	f00a feba 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    6ef2:	4286      	cmp	r6, r0
    6ef4:	d213      	bcs.n	6f1e <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    6ef6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    6efa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    6efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f00:	2000      	movs	r0, #0
    6f02:	e7d2      	b.n	6eaa <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f04:	2400      	movs	r4, #0
    6f06:	e7d6      	b.n	6eb6 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    6f08:	4b09      	ldr	r3, [pc, #36]	; (6f30 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    6f0a:	4a0a      	ldr	r2, [pc, #40]	; (6f34 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    6f0c:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f10:	4809      	ldr	r0, [pc, #36]	; (6f38 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    6f12:	f009 fc55 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f16:	2000      	movs	r0, #0
    6f18:	e7e2      	b.n	6ee0 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f1a:	2400      	movs	r4, #0
    6f1c:	e7e6      	b.n	6eec <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6f1e:	4603      	mov	r3, r0
    6f20:	4632      	mov	r2, r6
    6f22:	4906      	ldr	r1, [pc, #24]	; (6f3c <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    6f24:	68a8      	ldr	r0, [r5, #8]
    6f26:	f00c fe2d 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6f2a:	2000      	movs	r0, #0
    6f2c:	e7e7      	b.n	6efe <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    6f2e:	bf00      	nop
    6f30:	00068ff8 	.word	0x00068ff8
    6f34:	00069148 	.word	0x00069148
    6f38:	000690c4 	.word	0x000690c4
    6f3c:	00069e04 	.word	0x00069e04

00006f40 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    6f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f44:	b08b      	sub	sp, #44	; 0x2c
    6f46:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    6f48:	2300      	movs	r3, #0
    6f4a:	9305      	str	r3, [sp, #20]
    6f4c:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    6f50:	f00c fa19 	bl	13386 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    6f54:	9b05      	ldr	r3, [sp, #20]
    6f56:	4298      	cmp	r0, r3
    6f58:	f340 81f6 	ble.w	7348 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    6f5c:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    6f60:	4628      	mov	r0, r5
    6f62:	f00c f8cc 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f66:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f68:	4620      	mov	r0, r4
    6f6a:	f00c f8ce 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f6e:	2808      	cmp	r0, #8
    6f70:	d927      	bls.n	6fc2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    6f72:	f104 0008 	add.w	r0, r4, #8
    6f76:	f00c f8c8 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f7a:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f7c:	b318      	cbz	r0, 6fc6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    6f7e:	4620      	mov	r0, r4
    6f80:	f00c f8b7 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f84:	4404      	add	r4, r0
    6f86:	9e05      	ldr	r6, [sp, #20]
    6f88:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    6f8a:	6820      	ldr	r0, [r4, #0]
    6f8c:	f00a fe6b 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f90:	4286      	cmp	r6, r0
    6f92:	d21a      	bcs.n	6fca <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f94:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6f96:	9b05      	ldr	r3, [sp, #20]
    6f98:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6f9c:	4620      	mov	r0, r4
    6f9e:	f00c f8a8 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    6fa2:	1823      	adds	r3, r4, r0
    6fa4:	9302      	str	r3, [sp, #8]
    6fa6:	d017      	beq.n	6fd8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    6fa8:	4628      	mov	r0, r5
    6faa:	f00c f8a8 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6fae:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6fb0:	4620      	mov	r0, r4
    6fb2:	f00c f8aa 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fb6:	2806      	cmp	r0, #6
    6fb8:	d910      	bls.n	6fdc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    6fba:	1da0      	adds	r0, r4, #6
    6fbc:	f00c f8a5 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6fc0:	e00d      	b.n	6fde <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    6fc2:	2000      	movs	r0, #0
    6fc4:	e7d9      	b.n	6f7a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fc6:	2400      	movs	r4, #0
    6fc8:	e7dd      	b.n	6f86 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    6fca:	4b4e      	ldr	r3, [pc, #312]	; (7104 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    6fcc:	4a4e      	ldr	r2, [pc, #312]	; (7108 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    6fce:	f44f 7183 	mov.w	r1, #262	; 0x106
    6fd2:	484e      	ldr	r0, [pc, #312]	; (710c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    6fd4:	f009 fbf4 	bl	107c0 <__assert_func>
    6fd8:	f00e fff4 	bl	15fc4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fdc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    6fde:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fe0:	b178      	cbz	r0, 7002 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    6fe2:	4628      	mov	r0, r5
    6fe4:	f00c f885 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fe8:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    6fec:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    6ff0:	f00c fb90 	bl	13714 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    6ff4:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    6ff6:	9802      	ldr	r0, [sp, #8]
    6ff8:	f00c f931 	bl	1325e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    6ffc:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    6ffe:	2700      	movs	r7, #0
    7000:	e0dd      	b.n	71be <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    7002:	f04f 0900 	mov.w	r9, #0
    7006:	e7f1      	b.n	6fec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7008:	2000      	movs	r0, #0
    700a:	e0eb      	b.n	71e4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    700c:	2400      	movs	r4, #0
    700e:	e0f2      	b.n	71f6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    7010:	4b3c      	ldr	r3, [pc, #240]	; (7104 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    7012:	4a3f      	ldr	r2, [pc, #252]	; (7110 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    7014:	f44f 7183 	mov.w	r1, #262	; 0x106
    7018:	483c      	ldr	r0, [pc, #240]	; (710c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    701a:	f009 fbd1 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    701e:	2000      	movs	r0, #0
    7020:	e103      	b.n	722a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7022:	2600      	movs	r6, #0
    7024:	e108      	b.n	7238 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    7026:	4631      	mov	r1, r6
    7028:	483a      	ldr	r0, [pc, #232]	; (7114 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    702a:	f00b ffdd 	bl	12fe8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    702e:	2301      	movs	r3, #1
    7030:	461c      	mov	r4, r3
}
    7032:	4620      	mov	r0, r4
    7034:	b00b      	add	sp, #44	; 0x2c
    7036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    703a:	4b32      	ldr	r3, [pc, #200]	; (7104 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    703c:	4a36      	ldr	r2, [pc, #216]	; (7118 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    703e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7042:	4832      	ldr	r0, [pc, #200]	; (710c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    7044:	f009 fbbc 	bl	107c0 <__assert_func>
    7048:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    704a:	4650      	mov	r0, sl
    704c:	f00c fdb8 	bl	13bc0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    7050:	2891      	cmp	r0, #145	; 0x91
    7052:	d806      	bhi.n	7062 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    7054:	4b31      	ldr	r3, [pc, #196]	; (711c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7056:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    705a:	4831      	ldr	r0, [pc, #196]	; (7120 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    705c:	f00b ffc4 	bl	12fe8 <_Z11MicroPrintfPKcz>
        return status;
    7060:	e7e7      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7062:	4930      	ldr	r1, [pc, #192]	; (7124 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    7064:	e7f9      	b.n	705a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    7066:	4631      	mov	r1, r6
    7068:	482f      	ldr	r0, [pc, #188]	; (7128 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    706a:	f00b ffbd 	bl	12fe8 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    706e:	2301      	movs	r3, #1
    7070:	461c      	mov	r4, r3
    7072:	e7de      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    7074:	4620      	mov	r0, r4
    7076:	f00c f842 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    707a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    707c:	4630      	mov	r0, r6
    707e:	f00c f844 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7082:	280e      	cmp	r0, #14
    7084:	d904      	bls.n	7090 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    7086:	f106 000e 	add.w	r0, r6, #14
    708a:	f00c f83e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    708e:	e000      	b.n	7092 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    7090:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7092:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7094:	b160      	cbz	r0, 70b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    7096:	4630      	mov	r0, r6
    7098:	f00c f82b 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    709c:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    709e:	b360      	cbz	r0, 70fa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    70a0:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    70a2:	f853 0b04 	ldr.w	r0, [r3], #4
    70a6:	9301      	str	r3, [sp, #4]
    70a8:	f00a fddd 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    70ac:	4682      	mov	sl, r0
    70ae:	e131      	b.n	7314 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70b0:	2000      	movs	r0, #0
    70b2:	e7f4      	b.n	709e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70b4:	2000      	movs	r0, #0
    70b6:	e10b      	b.n	72d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70b8:	2300      	movs	r3, #0
    70ba:	9301      	str	r3, [sp, #4]
    70bc:	e113      	b.n	72e6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    70be:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    70c2:	d809      	bhi.n	70d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    70c4:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    70c6:	4b15      	ldr	r3, [pc, #84]	; (711c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    70c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    70cc:	4817      	ldr	r0, [pc, #92]	; (712c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    70ce:	f00b ff8b 	bl	12fe8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    70d2:	2301      	movs	r3, #1
    70d4:	461c      	mov	r4, r3
    70d6:	e7ac      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    70d8:	4912      	ldr	r1, [pc, #72]	; (7124 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    70da:	e7f7      	b.n	70cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    70dc:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    70e0:	d804      	bhi.n	70ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    70e2:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    70e4:	4a0d      	ldr	r2, [pc, #52]	; (711c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    70e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    70ea:	e000      	b.n	70ee <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    70ec:	490d      	ldr	r1, [pc, #52]	; (7124 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    70ee:	4810      	ldr	r0, [pc, #64]	; (7130 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    70f0:	f00b ff7a 	bl	12fe8 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    70f4:	2301      	movs	r3, #1
    70f6:	461c      	mov	r4, r3
    70f8:	e79b      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    70fa:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    70fc:	f04f 0a00 	mov.w	sl, #0
    7100:	e108      	b.n	7314 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    7102:	bf00      	nop
    7104:	00068ff8 	.word	0x00068ff8
    7108:	00069148 	.word	0x00069148
    710c:	000690c4 	.word	0x000690c4
    7110:	00069e30 	.word	0x00069e30
    7114:	00069f28 	.word	0x00069f28
    7118:	00069f54 	.word	0x00069f54
    711c:	00069b54 	.word	0x00069b54
    7120:	0006a054 	.word	0x0006a054
    7124:	00068800 	.word	0x00068800
    7128:	0006a084 	.word	0x0006a084
    712c:	0006a0a8 	.word	0x0006a0a8
    7130:	0006a0f0 	.word	0x0006a0f0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7134:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7136:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7138:	2800      	cmp	r0, #0
    713a:	f000 80fb 	beq.w	7334 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    713e:	4630      	mov	r0, r6
    7140:	f00b ffd7 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7144:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7146:	aa08      	add	r2, sp, #32
    7148:	4640      	mov	r0, r8
    714a:	f00c faef 	bl	1372c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    714e:	2800      	cmp	r0, #0
    7150:	f040 80ff 	bne.w	7352 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7154:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    7158:	4620      	mov	r0, r4
    715a:	f00b ffd0 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    715e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7160:	4630      	mov	r0, r6
    7162:	f00b ffd2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7166:	2808      	cmp	r0, #8
    7168:	f240 80e6 	bls.w	7338 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    716c:	f106 0008 	add.w	r0, r6, #8
    7170:	f00b ffcb 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7174:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7176:	2800      	cmp	r0, #0
    7178:	f000 80e0 	beq.w	733c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    717c:	4620      	mov	r0, r4
    717e:	f00b ffb8 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7182:	1821      	adds	r1, r4, r0
    7184:	aa09      	add	r2, sp, #36	; 0x24
    7186:	4640      	mov	r0, r8
    7188:	f00c fad0 	bl	1372c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    718c:	2800      	cmp	r0, #0
    718e:	f040 80e2 	bne.w	7356 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    7192:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    7196:	9a00      	ldr	r2, [sp, #0]
    7198:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    719c:	1974      	adds	r4, r6, r5
      *node = {};
    719e:	2228      	movs	r2, #40	; 0x28
    71a0:	2100      	movs	r1, #0
    71a2:	4620      	mov	r0, r4
    71a4:	f00e ff27 	bl	15ff6 <memset>
      node->inputs = inputs_array;
    71a8:	9b08      	ldr	r3, [sp, #32]
    71aa:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    71ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    71ae:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    71b0:	9b07      	ldr	r3, [sp, #28]
    71b2:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    71b4:	9b01      	ldr	r3, [sp, #4]
    71b6:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    71b8:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    71bc:	3701      	adds	r7, #1
    71be:	9b03      	ldr	r3, [sp, #12]
    71c0:	429f      	cmp	r7, r3
    71c2:	f080 80bd 	bcs.w	7340 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    71c6:	9c02      	ldr	r4, [sp, #8]
    71c8:	4620      	mov	r0, r4
    71ca:	f00b ff98 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71ce:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71d0:	4620      	mov	r0, r4
    71d2:	f00b ff9a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71d6:	280a      	cmp	r0, #10
    71d8:	f67f af16 	bls.w	7008 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    71dc:	f104 000a 	add.w	r0, r4, #10
    71e0:	f00b ff93 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    71e4:	9b02      	ldr	r3, [sp, #8]
    71e6:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71e8:	2800      	cmp	r0, #0
    71ea:	f43f af0f 	beq.w	700c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    71ee:	4620      	mov	r0, r4
    71f0:	f00b ff7f 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71f4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71f6:	6820      	ldr	r0, [r4, #0]
    71f8:	f00a fd35 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    71fc:	4287      	cmp	r7, r0
    71fe:	f4bf af07 	bcs.w	7010 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7202:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7204:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7208:	4620      	mov	r0, r4
    720a:	f00b ff72 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    720e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7210:	4620      	mov	r0, r4
    7212:	f00b ff74 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7216:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7218:	4628      	mov	r0, r5
    721a:	f00b ff76 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    721e:	2804      	cmp	r0, #4
    7220:	f67f aefd 	bls.w	701e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    7224:	1d28      	adds	r0, r5, #4
    7226:	f00b ff70 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    722a:	2800      	cmp	r0, #0
    722c:	f43f aef9 	beq.w	7022 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    7230:	4420      	add	r0, r4
    7232:	f00b ff5e 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7236:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7238:	f8d9 0000 	ldr.w	r0, [r9]
    723c:	f00a fd13 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    7240:	42b0      	cmp	r0, r6
    7242:	f67f aef0 	bls.w	7026 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    7246:	f8d9 0000 	ldr.w	r0, [r9]
    724a:	f00a fd0c 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    724e:	4286      	cmp	r6, r0
    7250:	f4bf aef3 	bcs.w	703a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7254:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    7258:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    725c:	4650      	mov	r0, sl
    725e:	f00b ff48 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7262:	4482      	add	sl, r0
    7264:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    7268:	9a00      	ldr	r2, [sp, #0]
    726a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    726e:	252c      	movs	r5, #44	; 0x2c
    7270:	fb05 f507 	mul.w	r5, r5, r7
    7274:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    7276:	3328      	adds	r3, #40	; 0x28
    7278:	f8db 2008 	ldr.w	r2, [fp, #8]
    727c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7280:	4650      	mov	r0, sl
    7282:	f002 ffbd 	bl	a200 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    7286:	2800      	cmp	r0, #0
    7288:	f47f aede 	bne.w	7048 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    728c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    7290:	9a00      	ldr	r2, [sp, #0]
    7292:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7296:	442b      	add	r3, r5
                                     .registration;
    7298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    729a:	2b00      	cmp	r3, #0
    729c:	f43f aee3 	beq.w	7066 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    72a0:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    72a2:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    72a6:	2300      	movs	r3, #0
    72a8:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    72aa:	f1ba 0f20 	cmp.w	sl, #32
    72ae:	f43f aee1 	beq.w	7074 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    72b2:	4620      	mov	r0, r4
    72b4:	f00b ff23 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    72b8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    72bc:	4640      	mov	r0, r8
    72be:	f00b ff24 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72c2:	280e      	cmp	r0, #14
    72c4:	f67f aef6 	bls.w	70b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    72c8:	f108 000e 	add.w	r0, r8, #14
    72cc:	f00b ff1d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    72d0:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72d4:	2800      	cmp	r0, #0
    72d6:	f43f aeef 	beq.w	70b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    72da:	4640      	mov	r0, r8
    72dc:	f00b ff09 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    72e0:	eb08 0300 	add.w	r3, r8, r0
    72e4:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    72e6:	9b01      	ldr	r3, [sp, #4]
    72e8:	2b00      	cmp	r3, #0
    72ea:	f47f aee8 	bne.w	70be <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    72ee:	f8db 0004 	ldr.w	r0, [fp, #4]
    72f2:	6803      	ldr	r3, [r0, #0]
    72f4:	6a1b      	ldr	r3, [r3, #32]
    72f6:	4651      	mov	r1, sl
    72f8:	4798      	blx	r3
        if (parser == nullptr) {
    72fa:	4680      	mov	r8, r0
    72fc:	2800      	cmp	r0, #0
    72fe:	f43f aeed 	beq.w	70dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    7302:	ab07      	add	r3, sp, #28
    7304:	9a04      	ldr	r2, [sp, #16]
    7306:	f8db 1008 	ldr.w	r1, [fp, #8]
    730a:	4620      	mov	r0, r4
    730c:	47c0      	blx	r8
    730e:	b9f0      	cbnz	r0, 734e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    7310:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7314:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    7318:	4620      	mov	r0, r4
    731a:	f00b fef0 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    731e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7320:	4630      	mov	r0, r6
    7322:	f00b fef2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7326:	2806      	cmp	r0, #6
    7328:	f67f af04 	bls.w	7134 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    732c:	1db0      	adds	r0, r6, #6
    732e:	f00b feec 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7332:	e700      	b.n	7136 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7334:	2100      	movs	r1, #0
    7336:	e706      	b.n	7146 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7338:	2000      	movs	r0, #0
    733a:	e71b      	b.n	7174 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    733c:	2100      	movs	r1, #0
    733e:	e721      	b.n	7184 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    7340:	9b05      	ldr	r3, [sp, #20]
    7342:	3301      	adds	r3, #1
    7344:	9305      	str	r3, [sp, #20]
    7346:	e601      	b.n	6f4c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    7348:	2300      	movs	r3, #0
    734a:	461c      	mov	r4, r3
    734c:	e671      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    734e:	4604      	mov	r4, r0
    7350:	e66f      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7352:	4604      	mov	r4, r0
    7354:	e66d      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7356:	4604      	mov	r4, r0
    7358:	e66b      	b.n	7032 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    735a:	bf00      	nop

0000735c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7360:	b083      	sub	sp, #12
    7362:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    7364:	6801      	ldr	r1, [r0, #0]
    7366:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7368:	f000 fe60 	bl	802c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    736c:	b170      	cbz	r0, 738c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    736e:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    7370:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    7374:	4630      	mov	r0, r6
    7376:	f00b ffa4 	bl	132c2 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    737a:	4628      	mov	r0, r5
    737c:	f7ff fde0 	bl	6f40 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    7380:	4603      	mov	r3, r0
    7382:	b158      	cbz	r0, 739c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    7384:	4618      	mov	r0, r3
    7386:	b003      	add	sp, #12
    7388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    738c:	49bc      	ldr	r1, [pc, #752]	; (7680 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    738e:	68a8      	ldr	r0, [r5, #8]
    7390:	f00c fbf8 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    7394:	2301      	movs	r3, #1
    7396:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    739a:	e7f3      	b.n	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    739c:	4bb9      	ldr	r3, [pc, #740]	; (7684 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    739e:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    73a0:	2400      	movs	r4, #0
    73a2:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    73a4:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    73a6:	4bb8      	ldr	r3, [pc, #736]	; (7688 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    73a8:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    73aa:	4630      	mov	r0, r6
    73ac:	f00b ff8b 	bl	132c6 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    73b0:	4bb6      	ldr	r3, [pc, #728]	; (768c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    73b2:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    73b4:	4630      	mov	r0, r6
    73b6:	f7ff f9bd 	bl	6734 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    73ba:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    73bc:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    73be:	4bb4      	ldr	r3, [pc, #720]	; (7690 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    73c0:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    73c2:	462b      	mov	r3, r5
    73c4:	f853 1b8c 	ldr.w	r1, [r3], #140
    73c8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    73ca:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    73cc:	f000 fb90 	bl	7af0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    73d0:	4603      	mov	r3, r0
    73d2:	2800      	cmp	r0, #0
    73d4:	d1d6      	bne.n	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    73d6:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    73d8:	6833      	ldr	r3, [r6, #0]
    73da:	68df      	ldr	r7, [r3, #12]
    73dc:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    73de:	4620      	mov	r0, r4
    73e0:	f00b fe8d 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    73e4:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    73e8:	4640      	mov	r0, r8
    73ea:	f00b fe8e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73ee:	2808      	cmp	r0, #8
    73f0:	d921      	bls.n	7436 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    73f2:	f108 0008 	add.w	r0, r8, #8
    73f6:	f00b fe88 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    73fa:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73fc:	b1e8      	cbz	r0, 743a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    73fe:	4620      	mov	r0, r4
    7400:	f00b fe77 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7404:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7406:	6820      	ldr	r0, [r4, #0]
    7408:	f00a fc2d 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    740c:	b1b8      	cbz	r0, 743e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    740e:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7410:	4620      	mov	r0, r4
    7412:	f00b fe6e 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7416:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7418:	4620      	mov	r0, r4
    741a:	f00b fe70 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    741e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7422:	4640      	mov	r0, r8
    7424:	f00b fe71 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7428:	2806      	cmp	r0, #6
    742a:	d90f      	bls.n	744c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    742c:	f108 0006 	add.w	r0, r8, #6
    7430:	f00b fe6b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7434:	e00b      	b.n	744e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    7436:	2000      	movs	r0, #0
    7438:	e7df      	b.n	73fa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    743a:	2400      	movs	r4, #0
    743c:	e7e3      	b.n	7406 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    743e:	4b95      	ldr	r3, [pc, #596]	; (7694 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7440:	4a95      	ldr	r2, [pc, #596]	; (7698 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7442:	f44f 7183 	mov.w	r1, #262	; 0x106
    7446:	4895      	ldr	r0, [pc, #596]	; (769c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7448:	f009 f9ba 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    744c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    744e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7450:	b178      	cbz	r0, 7472 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    7452:	4620      	mov	r0, r4
    7454:	f00b fe4d 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7458:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    745a:	6820      	ldr	r0, [r4, #0]
    745c:	f00a fc03 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7460:	0081      	lsls	r1, r0, #2
    7462:	4630      	mov	r0, r6
    7464:	47b8      	blx	r7
    7466:	4604      	mov	r4, r0
  input_tensors_ =
    7468:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    746c:	b118      	cbz	r0, 7476 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    746e:	2600      	movs	r6, #0
    7470:	e09c      	b.n	75ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7472:	2400      	movs	r4, #0
    7474:	e7f1      	b.n	745a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    7476:	68ae      	ldr	r6, [r5, #8]
    7478:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    747a:	4628      	mov	r0, r5
    747c:	f00b fe3f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7480:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7482:	4638      	mov	r0, r7
    7484:	f00b fe41 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7488:	2808      	cmp	r0, #8
    748a:	d91f      	bls.n	74cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    748c:	f107 0008 	add.w	r0, r7, #8
    7490:	f00b fe3b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7494:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7496:	b1d8      	cbz	r0, 74d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    7498:	4628      	mov	r0, r5
    749a:	f00b fe2a 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    749e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    74a0:	6828      	ldr	r0, [r5, #0]
    74a2:	f00a fbe0 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    74a6:	b1a8      	cbz	r0, 74d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    74a8:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    74aa:	4628      	mov	r0, r5
    74ac:	f00b fe21 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74b0:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    74b2:	4628      	mov	r0, r5
    74b4:	f00b fe23 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    74b8:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    74ba:	4638      	mov	r0, r7
    74bc:	f00b fe25 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74c0:	2806      	cmp	r0, #6
    74c2:	d90e      	bls.n	74e2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    74c4:	1db8      	adds	r0, r7, #6
    74c6:	f00b fe20 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    74ca:	e00b      	b.n	74e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    74cc:	2000      	movs	r0, #0
    74ce:	e7e1      	b.n	7494 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74d0:	4625      	mov	r5, r4
    74d2:	e7e5      	b.n	74a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    74d4:	4b6f      	ldr	r3, [pc, #444]	; (7694 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    74d6:	4a70      	ldr	r2, [pc, #448]	; (7698 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    74d8:	f44f 7183 	mov.w	r1, #262	; 0x106
    74dc:	486f      	ldr	r0, [pc, #444]	; (769c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    74de:	f009 f96f 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74e2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    74e4:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74e6:	b118      	cbz	r0, 74f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    74e8:	4628      	mov	r0, r5
    74ea:	f00b fe02 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74ee:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    74f0:	6820      	ldr	r0, [r4, #0]
    74f2:	f00a fbb8 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    74f6:	0082      	lsls	r2, r0, #2
    74f8:	4969      	ldr	r1, [pc, #420]	; (76a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    74fa:	4630      	mov	r0, r6
    74fc:	f00c fb42 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7500:	2301      	movs	r3, #1
    7502:	e73f      	b.n	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7504:	2000      	movs	r0, #0
    7506:	e05f      	b.n	75c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7508:	2400      	movs	r4, #0
    750a:	e064      	b.n	75d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    750c:	4b61      	ldr	r3, [pc, #388]	; (7694 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    750e:	4a62      	ldr	r2, [pc, #392]	; (7698 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7510:	f44f 7183 	mov.w	r1, #262	; 0x106
    7514:	4861      	ldr	r0, [pc, #388]	; (769c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7516:	f009 f953 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    751a:	2000      	movs	r0, #0
    751c:	e071      	b.n	7602 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    751e:	2400      	movs	r4, #0
    7520:	e076      	b.n	7610 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7522:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7524:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7526:	2800      	cmp	r0, #0
    7528:	f000 808f 	beq.w	764a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    752c:	4620      	mov	r0, r4
    752e:	f00b fde0 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7532:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7534:	6820      	ldr	r0, [r4, #0]
    7536:	f00a fb96 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    753a:	2800      	cmp	r0, #0
    753c:	f000 8087 	beq.w	764e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7540:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7542:	4620      	mov	r0, r4
    7544:	f00b fdd5 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7548:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    754a:	4620      	mov	r0, r4
    754c:	f00b fdd7 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7550:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7554:	4658      	mov	r0, fp
    7556:	f00b fdd8 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    755a:	2806      	cmp	r0, #6
    755c:	d97e      	bls.n	765c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    755e:	f10b 0006 	add.w	r0, fp, #6
    7562:	f00b fdd2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7566:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7568:	2800      	cmp	r0, #0
    756a:	d079      	beq.n	7660 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    756c:	4620      	mov	r0, r4
    756e:	f00b fdc0 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7572:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7574:	6820      	ldr	r0, [r4, #0]
    7576:	f00a fb76 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    757a:	4286      	cmp	r6, r0
    757c:	d272      	bcs.n	7664 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    757e:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7580:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7584:	f00b fdba 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7588:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    758a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    758e:	2200      	movs	r2, #0
    7590:	9200      	str	r2, [sp, #0]
    7592:	4652      	mov	r2, sl
    7594:	4639      	mov	r1, r7
    7596:	4640      	mov	r0, r8
    7598:	47c8      	blx	r9
    759a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    759e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    75a2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    75a6:	2b00      	cmp	r3, #0
    75a8:	d063      	beq.n	7672 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    75aa:	3601      	adds	r6, #1
    75ac:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    75ae:	4620      	mov	r0, r4
    75b0:	f00b fda5 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75b4:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75b6:	4638      	mov	r0, r7
    75b8:	f00b fda7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75bc:	2808      	cmp	r0, #8
    75be:	d9a1      	bls.n	7504 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    75c0:	f107 0008 	add.w	r0, r7, #8
    75c4:	f00b fda1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    75c8:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75ca:	2800      	cmp	r0, #0
    75cc:	d09c      	beq.n	7508 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    75ce:	4620      	mov	r0, r4
    75d0:	f00b fd8f 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75d4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    75d6:	6820      	ldr	r0, [r4, #0]
    75d8:	f00a fb45 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    75dc:	2800      	cmp	r0, #0
    75de:	d095      	beq.n	750c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    75e0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    75e2:	4620      	mov	r0, r4
    75e4:	f00b fd85 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75e8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    75ea:	4620      	mov	r0, r4
    75ec:	f00b fd87 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75f0:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75f2:	4638      	mov	r0, r7
    75f4:	f00b fd89 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75f8:	2806      	cmp	r0, #6
    75fa:	d98e      	bls.n	751a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    75fc:	1db8      	adds	r0, r7, #6
    75fe:	f00b fd84 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7602:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7604:	2800      	cmp	r0, #0
    7606:	d08a      	beq.n	751e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    7608:	4620      	mov	r0, r4
    760a:	f00b fd72 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    760e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7610:	6820      	ldr	r0, [r4, #0]
    7612:	f00a fb28 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7616:	4286      	cmp	r6, r0
    7618:	d248      	bcs.n	76ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    761a:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    761e:	f8d8 3000 	ldr.w	r3, [r8]
    7622:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7626:	682f      	ldr	r7, [r5, #0]
    7628:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    762c:	4638      	mov	r0, r7
    762e:	f00b fd66 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7632:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7634:	4620      	mov	r0, r4
    7636:	f00b fd68 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    763a:	2808      	cmp	r0, #8
    763c:	f67f af71 	bls.w	7522 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    7640:	f104 0008 	add.w	r0, r4, #8
    7644:	f00b fd61 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7648:	e76c      	b.n	7524 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    764a:	2400      	movs	r4, #0
    764c:	e772      	b.n	7534 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    764e:	4b11      	ldr	r3, [pc, #68]	; (7694 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7650:	4a11      	ldr	r2, [pc, #68]	; (7698 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7652:	f44f 7183 	mov.w	r1, #262	; 0x106
    7656:	4811      	ldr	r0, [pc, #68]	; (769c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7658:	f009 f8b2 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    765c:	2000      	movs	r0, #0
    765e:	e782      	b.n	7566 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7660:	2400      	movs	r4, #0
    7662:	e787      	b.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    7664:	4b0b      	ldr	r3, [pc, #44]	; (7694 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7666:	4a0f      	ldr	r2, [pc, #60]	; (76a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7668:	f44f 7183 	mov.w	r1, #262	; 0x106
    766c:	480b      	ldr	r0, [pc, #44]	; (769c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    766e:	f009 f8a7 	bl	107c0 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7672:	4632      	mov	r2, r6
    7674:	490c      	ldr	r1, [pc, #48]	; (76a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    7676:	68a8      	ldr	r0, [r5, #8]
    7678:	f00c fa84 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    767c:	2301      	movs	r3, #1
    767e:	e681      	b.n	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7680:	0006a110 	.word	0x0006a110
    7684:	000133c1 	.word	0x000133c1
    7688:	00013411 	.word	0x00013411
    768c:	0001341b 	.word	0x0001341b
    7690:	000133cf 	.word	0x000133cf
    7694:	00068ff8 	.word	0x00068ff8
    7698:	00069148 	.word	0x00069148
    769c:	000690c4 	.word	0x000690c4
    76a0:	0006a134 	.word	0x0006a134
    76a4:	00069004 	.word	0x00069004
    76a8:	0006a180 	.word	0x0006a180
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    76ac:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    76ae:	6833      	ldr	r3, [r6, #0]
    76b0:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    76b2:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    76b4:	4620      	mov	r0, r4
    76b6:	f00b fd22 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76ba:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76be:	4640      	mov	r0, r8
    76c0:	f00b fd23 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76c4:	2808      	cmp	r0, #8
    76c6:	d904      	bls.n	76d2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    76c8:	f108 0008 	add.w	r0, r8, #8
    76cc:	f00b fd1d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    76d0:	e000      	b.n	76d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    76d2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    76d4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76d6:	b360      	cbz	r0, 7732 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    76d8:	4620      	mov	r0, r4
    76da:	f00b fd0a 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76de:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    76e0:	6820      	ldr	r0, [r4, #0]
    76e2:	f00a fac0 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    76e6:	b330      	cbz	r0, 7736 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    76e8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    76ea:	4620      	mov	r0, r4
    76ec:	f00b fd01 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76f0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    76f2:	4620      	mov	r0, r4
    76f4:	f00b fd03 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76f8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76fc:	4640      	mov	r0, r8
    76fe:	f00b fd04 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7702:	2808      	cmp	r0, #8
    7704:	d91e      	bls.n	7744 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    7706:	f108 0008 	add.w	r0, r8, #8
    770a:	f00b fcfe 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    770e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7710:	b1d0      	cbz	r0, 7748 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    7712:	4620      	mov	r0, r4
    7714:	f00b fced 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7718:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    771a:	6820      	ldr	r0, [r4, #0]
    771c:	f00a faa3 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7720:	0081      	lsls	r1, r0, #2
    7722:	4630      	mov	r0, r6
    7724:	47b8      	blx	r7
    7726:	4604      	mov	r4, r0
  output_tensors_ =
    7728:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    772c:	b170      	cbz	r0, 774c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    772e:	2600      	movs	r6, #0
    7730:	e0c6      	b.n	78c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7732:	2400      	movs	r4, #0
    7734:	e7d4      	b.n	76e0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    7736:	4b8f      	ldr	r3, [pc, #572]	; (7974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7738:	4a8f      	ldr	r2, [pc, #572]	; (7978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    773a:	f44f 7183 	mov.w	r1, #262	; 0x106
    773e:	488f      	ldr	r0, [pc, #572]	; (797c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7740:	f009 f83e 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7744:	2000      	movs	r0, #0
    7746:	e7e2      	b.n	770e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7748:	2400      	movs	r4, #0
    774a:	e7e6      	b.n	771a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    774c:	68ae      	ldr	r6, [r5, #8]
    774e:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7750:	4628      	mov	r0, r5
    7752:	f00b fcd4 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7756:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7758:	4638      	mov	r0, r7
    775a:	f00b fcd6 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    775e:	2808      	cmp	r0, #8
    7760:	d920      	bls.n	77a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    7762:	f107 0008 	add.w	r0, r7, #8
    7766:	f00b fcd0 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    776a:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    776c:	b1e0      	cbz	r0, 77a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    776e:	4628      	mov	r0, r5
    7770:	f00b fcbf 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7774:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7776:	6828      	ldr	r0, [r5, #0]
    7778:	f00a fa75 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    777c:	b1b0      	cbz	r0, 77ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    777e:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7780:	4628      	mov	r0, r5
    7782:	f00b fcb6 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7786:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7788:	4628      	mov	r0, r5
    778a:	f00b fcb8 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    778e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7790:	4638      	mov	r0, r7
    7792:	f00b fcba 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7796:	2808      	cmp	r0, #8
    7798:	d90f      	bls.n	77ba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    779a:	f107 0008 	add.w	r0, r7, #8
    779e:	f00b fcb4 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    77a2:	e00b      	b.n	77bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    77a4:	2000      	movs	r0, #0
    77a6:	e7e0      	b.n	776a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77a8:	4625      	mov	r5, r4
    77aa:	e7e4      	b.n	7776 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    77ac:	4b71      	ldr	r3, [pc, #452]	; (7974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    77ae:	4a72      	ldr	r2, [pc, #456]	; (7978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    77b0:	f44f 7183 	mov.w	r1, #262	; 0x106
    77b4:	4871      	ldr	r0, [pc, #452]	; (797c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    77b6:	f009 f803 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77ba:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    77bc:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77be:	b118      	cbz	r0, 77c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    77c0:	4628      	mov	r0, r5
    77c2:	f00b fc96 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77c6:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77c8:	6820      	ldr	r0, [r4, #0]
    77ca:	f00a fa4c 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    77ce:	0082      	lsls	r2, r0, #2
    77d0:	496b      	ldr	r1, [pc, #428]	; (7980 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    77d2:	4630      	mov	r0, r6
    77d4:	f00c f9d6 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    77d8:	2301      	movs	r3, #1
    77da:	e5d3      	b.n	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77dc:	2000      	movs	r0, #0
    77de:	e07d      	b.n	78dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77e0:	2400      	movs	r4, #0
    77e2:	e083      	b.n	78ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    77e4:	4b63      	ldr	r3, [pc, #396]	; (7974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    77e6:	4a64      	ldr	r2, [pc, #400]	; (7978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    77e8:	f44f 7183 	mov.w	r1, #262	; 0x106
    77ec:	4863      	ldr	r0, [pc, #396]	; (797c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    77ee:	f008 ffe7 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77f2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    77f4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77f6:	2800      	cmp	r0, #0
    77f8:	f000 8092 	beq.w	7920 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    77fc:	4620      	mov	r0, r4
    77fe:	f00b fc78 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7802:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7804:	6820      	ldr	r0, [r4, #0]
    7806:	f00a fa2e 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    780a:	4286      	cmp	r6, r0
    780c:	f080 80a7 	bcs.w	795e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7810:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    7814:	f8d8 3000 	ldr.w	r3, [r8]
    7818:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    781c:	682f      	ldr	r7, [r5, #0]
    781e:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    7822:	4638      	mov	r0, r7
    7824:	f00b fc6b 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7828:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    782a:	4620      	mov	r0, r4
    782c:	f00b fc6d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7830:	2808      	cmp	r0, #8
    7832:	d977      	bls.n	7924 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    7834:	f104 0008 	add.w	r0, r4, #8
    7838:	f00b fc67 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    783c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    783e:	2800      	cmp	r0, #0
    7840:	d072      	beq.n	7928 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    7842:	4620      	mov	r0, r4
    7844:	f00b fc55 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7848:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    784a:	6820      	ldr	r0, [r4, #0]
    784c:	f00a fa0b 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7850:	2800      	cmp	r0, #0
    7852:	d06b      	beq.n	792c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7854:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7856:	4620      	mov	r0, r4
    7858:	f00b fc4b 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    785c:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    785e:	4620      	mov	r0, r4
    7860:	f00b fc4d 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7864:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7868:	4658      	mov	r0, fp
    786a:	f00b fc4e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    786e:	2808      	cmp	r0, #8
    7870:	d963      	bls.n	793a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    7872:	f10b 0008 	add.w	r0, fp, #8
    7876:	f00b fc48 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    787a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    787c:	2800      	cmp	r0, #0
    787e:	d05e      	beq.n	793e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7880:	4620      	mov	r0, r4
    7882:	f00b fc36 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7886:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7888:	6820      	ldr	r0, [r4, #0]
    788a:	f00a f9ec 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    788e:	4286      	cmp	r6, r0
    7890:	d257      	bcs.n	7942 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7892:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7894:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7898:	f00b fc30 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    789c:	4603      	mov	r3, r0
    789e:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    78a2:	2200      	movs	r2, #0
    78a4:	9200      	str	r2, [sp, #0]
    78a6:	4652      	mov	r2, sl
    78a8:	4639      	mov	r1, r7
    78aa:	4640      	mov	r0, r8
    78ac:	47c8      	blx	r9
    78ae:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    78b2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    78b6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    78ba:	2b00      	cmp	r3, #0
    78bc:	d048      	beq.n	7950 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    78be:	3601      	adds	r6, #1
    78c0:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    78c2:	4620      	mov	r0, r4
    78c4:	f00b fc1b 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    78c8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    78ca:	4638      	mov	r0, r7
    78cc:	f00b fc1d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78d0:	2808      	cmp	r0, #8
    78d2:	d983      	bls.n	77dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    78d4:	f107 0008 	add.w	r0, r7, #8
    78d8:	f00b fc17 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    78dc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78de:	2800      	cmp	r0, #0
    78e0:	f43f af7e 	beq.w	77e0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    78e4:	4620      	mov	r0, r4
    78e6:	f00b fc04 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78ea:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78ec:	6820      	ldr	r0, [r4, #0]
    78ee:	f00a f9ba 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    78f2:	2800      	cmp	r0, #0
    78f4:	f43f af76 	beq.w	77e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    78f8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    78fa:	4620      	mov	r0, r4
    78fc:	f00b fbf9 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7900:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7902:	4620      	mov	r0, r4
    7904:	f00b fbfb 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7908:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    790a:	4638      	mov	r0, r7
    790c:	f00b fbfd 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7910:	2808      	cmp	r0, #8
    7912:	f67f af6e 	bls.w	77f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    7916:	f107 0008 	add.w	r0, r7, #8
    791a:	f00b fbf6 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    791e:	e769      	b.n	77f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7920:	2400      	movs	r4, #0
    7922:	e76f      	b.n	7804 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7924:	2000      	movs	r0, #0
    7926:	e789      	b.n	783c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7928:	2400      	movs	r4, #0
    792a:	e78e      	b.n	784a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    792c:	4b11      	ldr	r3, [pc, #68]	; (7974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    792e:	4a12      	ldr	r2, [pc, #72]	; (7978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7930:	f44f 7183 	mov.w	r1, #262	; 0x106
    7934:	4811      	ldr	r0, [pc, #68]	; (797c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7936:	f008 ff43 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    793a:	2000      	movs	r0, #0
    793c:	e79d      	b.n	787a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    793e:	2400      	movs	r4, #0
    7940:	e7a2      	b.n	7888 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    7942:	4b0c      	ldr	r3, [pc, #48]	; (7974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7944:	4a0f      	ldr	r2, [pc, #60]	; (7984 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    7946:	f44f 7183 	mov.w	r1, #262	; 0x106
    794a:	480c      	ldr	r0, [pc, #48]	; (797c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    794c:	f008 ff38 	bl	107c0 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7950:	4632      	mov	r2, r6
    7952:	490d      	ldr	r1, [pc, #52]	; (7988 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    7954:	68a8      	ldr	r0, [r5, #8]
    7956:	f00c f915 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    795a:	2301      	movs	r3, #1
    795c:	e512      	b.n	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    795e:	4628      	mov	r0, r5
    7960:	f00b fdb4 	bl	134cc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    7964:	4603      	mov	r3, r0
    7966:	2800      	cmp	r0, #0
    7968:	f47f ad0c 	bne.w	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    796c:	2201      	movs	r2, #1
    796e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    7972:	e507      	b.n	7384 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7974:	00068ff8 	.word	0x00068ff8
    7978:	00069148 	.word	0x00069148
    797c:	000690c4 	.word	0x000690c4
    7980:	0006a1a8 	.word	0x0006a1a8
    7984:	00069004 	.word	0x00069004
    7988:	0006a1f4 	.word	0x0006a1f4

0000798c <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    798c:	b510      	push	{r4, lr}
    798e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    7990:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    7994:	b95b      	cbnz	r3, 79ae <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    7996:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    799a:	b913      	cbnz	r3, 79a2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    799c:	f7ff fcde 	bl	735c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    79a0:	b920      	cbnz	r0, 79ac <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    79a2:	2100      	movs	r1, #0
    79a4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    79a8:	f7fe ff04 	bl	67b4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    79ac:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    79ae:	4903      	ldr	r1, [pc, #12]	; (79bc <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    79b0:	6880      	ldr	r0, [r0, #8]
    79b2:	f00c f8e7 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    79b6:	2001      	movs	r0, #1
    79b8:	e7f8      	b.n	79ac <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    79ba:	bf00      	nop
    79bc:	0006a21c 	.word	0x0006a21c

000079c0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    79c0:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    79c2:	4c05      	ldr	r4, [pc, #20]	; (79d8 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    79c4:	6004      	str	r4, [r0, #0]
    79c6:	6041      	str	r1, [r0, #4]
    79c8:	60c2      	str	r2, [r0, #12]
    79ca:	2200      	movs	r2, #0
    79cc:	7402      	strb	r2, [r0, #16]
    79ce:	6142      	str	r2, [r0, #20]
    79d0:	6182      	str	r2, [r0, #24]
    79d2:	bc10      	pop	{r4}
    79d4:	4770      	bx	lr
    79d6:	bf00      	nop
    79d8:	0006a968 	.word	0x0006a968

000079dc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    79dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79de:	4605      	mov	r5, r0
    79e0:	460f      	mov	r7, r1
    79e2:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    79e4:	f00b fe6f 	bl	136c6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    79e8:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    79ea:	4613      	mov	r3, r2
    79ec:	e000      	b.n	79f0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    79ee:	3201      	adds	r2, #1
    79f0:	696c      	ldr	r4, [r5, #20]
    79f2:	4294      	cmp	r4, r2
    79f4:	d907      	bls.n	7a06 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    79f6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    79fa:	6864      	ldr	r4, [r4, #4]
    79fc:	f1b4 3fff 	cmp.w	r4, #4294967295
    7a00:	d1f5      	bne.n	79ee <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    7a02:	3301      	adds	r3, #1
    7a04:	e7f3      	b.n	79ee <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    7a06:	2b0b      	cmp	r3, #11
    7a08:	d80d      	bhi.n	7a26 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    7a0a:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    7a0e:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    7a12:	f04f 32ff 	mov.w	r2, #4294967295
    7a16:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    7a18:	696b      	ldr	r3, [r5, #20]
    7a1a:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    7a1c:	696b      	ldr	r3, [r5, #20]
    7a1e:	3301      	adds	r3, #1
    7a20:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    7a22:	2000      	movs	r0, #0
}
    7a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    7a26:	220c      	movs	r2, #12
    7a28:	4902      	ldr	r1, [pc, #8]	; (7a34 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    7a2a:	68e8      	ldr	r0, [r5, #12]
    7a2c:	f00c f8aa 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7a30:	2001      	movs	r0, #1
    7a32:	e7f7      	b.n	7a24 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    7a34:	0006a24c 	.word	0x0006a24c

00007a38 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7a3c:	b122      	cbz	r2, 7a48 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    7a3e:	4607      	mov	r7, r0
    7a40:	460e      	mov	r6, r1
    7a42:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7a44:	2500      	movs	r5, #0
    7a46:	e029      	b.n	7a9c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7a48:	f00e fabc 	bl	15fc4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a4c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7a4e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a50:	b390      	cbz	r0, 7ab8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    7a52:	4620      	mov	r0, r4
    7a54:	f00b fb4d 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a58:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a5a:	6820      	ldr	r0, [r4, #0]
    7a5c:	f00a f903 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7a60:	4285      	cmp	r5, r0
    7a62:	d23a      	bcs.n	7ada <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    7a64:	6820      	ldr	r0, [r4, #0]
    7a66:	f00a f8fe 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a6a:	4285      	cmp	r5, r0
    7a6c:	d226      	bcs.n	7abc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a6e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7a70:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7a74:	4620      	mov	r0, r4
    7a76:	f00b fb3c 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    7a7a:	1820      	adds	r0, r4, r0
    7a7c:	d025      	beq.n	7aca <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7a7e:	f00b fbee 	bl	1325e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    7a82:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    7a84:	681a      	ldr	r2, [r3, #0]
    7a86:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7a88:	2204      	movs	r2, #4
    7a8a:	212c      	movs	r1, #44	; 0x2c
    7a8c:	fb01 f100 	mul.w	r1, r1, r0
    7a90:	4618      	mov	r0, r3
    7a92:	47a0      	blx	r4
    if (output == nullptr) {
    7a94:	b1d8      	cbz	r0, 7ace <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    7a96:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7a9a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7a9c:	4630      	mov	r0, r6
    7a9e:	f00b fb2e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7aa2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7aa4:	4620      	mov	r0, r4
    7aa6:	f00b fb30 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7aaa:	2808      	cmp	r0, #8
    7aac:	d9ce      	bls.n	7a4c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    7aae:	f104 0008 	add.w	r0, r4, #8
    7ab2:	f00b fb2a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7ab6:	e7ca      	b.n	7a4e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ab8:	2400      	movs	r4, #0
    7aba:	e7ce      	b.n	7a5a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    7abc:	4b08      	ldr	r3, [pc, #32]	; (7ae0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    7abe:	4a09      	ldr	r2, [pc, #36]	; (7ae4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    7ac0:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ac4:	4808      	ldr	r0, [pc, #32]	; (7ae8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    7ac6:	f008 fe7b 	bl	107c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7aca:	f00e fa7b 	bl	15fc4 <abort>
      TF_LITE_REPORT_ERROR(
    7ace:	4907      	ldr	r1, [pc, #28]	; (7aec <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    7ad0:	68f8      	ldr	r0, [r7, #12]
    7ad2:	f00c f857 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7ad6:	2001      	movs	r0, #1
    7ad8:	e000      	b.n	7adc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    7ada:	2000      	movs	r0, #0
}
    7adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ae0:	00068ff8 	.word	0x00068ff8
    7ae4:	00069148 	.word	0x00069148
    7ae8:	000690c4 	.word	0x000690c4
    7aec:	0006a284 	.word	0x0006a284

00007af0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    7af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7af4:	b083      	sub	sp, #12
    7af6:	4605      	mov	r5, r0
    7af8:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    7afa:	7c03      	ldrb	r3, [r0, #16]
    7afc:	b11b      	cbz	r3, 7b06 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    7afe:	460f      	mov	r7, r1
    7b00:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7b02:	2600      	movs	r6, #0
    7b04:	e043      	b.n	7b8e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7b06:	4930      	ldr	r1, [pc, #192]	; (7bc8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    7b08:	68c0      	ldr	r0, [r0, #12]
    7b0a:	f00c f83b 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7b0e:	2301      	movs	r3, #1
    7b10:	e055      	b.n	7bbe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b12:	f104 0008 	add.w	r0, r4, #8
    7b16:	f00b faf8 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7b1a:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b1c:	2800      	cmp	r0, #0
    7b1e:	d041      	beq.n	7ba4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    7b20:	4620      	mov	r0, r4
    7b22:	f00b fae6 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b26:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b28:	6820      	ldr	r0, [r4, #0]
    7b2a:	f00a f89c 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7b2e:	4286      	cmp	r6, r0
    7b30:	d243      	bcs.n	7bba <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    7b32:	6820      	ldr	r0, [r4, #0]
    7b34:	f00a f897 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7b38:	4286      	cmp	r6, r0
    7b3a:	d235      	bcs.n	7ba8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b3c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7b3e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b42:	4620      	mov	r0, r4
    7b44:	f00b fad5 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7b48:	1824      	adds	r4, r4, r0
    7b4a:	d034      	beq.n	7bb6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    7b4c:	682b      	ldr	r3, [r5, #0]
    7b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b50:	696a      	ldr	r2, [r5, #20]
    7b52:	4641      	mov	r1, r8
    7b54:	4628      	mov	r0, r5
    7b56:	4798      	blx	r3
    7b58:	4603      	mov	r3, r0
    7b5a:	bb80      	cbnz	r0, 7bbe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    7b5c:	682b      	ldr	r3, [r5, #0]
    7b5e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    7b62:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    7b66:	9600      	str	r6, [sp, #0]
    7b68:	f8d8 3000 	ldr.w	r3, [r8]
    7b6c:	f8da 2004 	ldr.w	r2, [sl, #4]
    7b70:	4639      	mov	r1, r7
    7b72:	4628      	mov	r0, r5
    7b74:	47d8      	blx	fp
    7b76:	4603      	mov	r3, r0
    7b78:	bb08      	cbnz	r0, 7bbe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    7b7a:	682b      	ldr	r3, [r5, #0]
    7b7c:	6a1b      	ldr	r3, [r3, #32]
    7b7e:	f8da 2004 	ldr.w	r2, [sl, #4]
    7b82:	4621      	mov	r1, r4
    7b84:	4628      	mov	r0, r5
    7b86:	4798      	blx	r3
    7b88:	4603      	mov	r3, r0
    7b8a:	b9c0      	cbnz	r0, 7bbe <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7b8c:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7b8e:	4638      	mov	r0, r7
    7b90:	f00b fab5 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b94:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b96:	4620      	mov	r0, r4
    7b98:	f00b fab7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b9c:	2808      	cmp	r0, #8
    7b9e:	d8b8      	bhi.n	7b12 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    7ba0:	2000      	movs	r0, #0
    7ba2:	e7ba      	b.n	7b1a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ba4:	2400      	movs	r4, #0
    7ba6:	e7bf      	b.n	7b28 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    7ba8:	4b08      	ldr	r3, [pc, #32]	; (7bcc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    7baa:	4a09      	ldr	r2, [pc, #36]	; (7bd0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    7bac:	f44f 7183 	mov.w	r1, #262	; 0x106
    7bb0:	4808      	ldr	r0, [pc, #32]	; (7bd4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    7bb2:	f008 fe05 	bl	107c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7bb6:	f00e fa05 	bl	15fc4 <abort>
  model_is_allocating_ = false;
    7bba:	2300      	movs	r3, #0
    7bbc:	742b      	strb	r3, [r5, #16]
}
    7bbe:	4618      	mov	r0, r3
    7bc0:	b003      	add	sp, #12
    7bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bc6:	bf00      	nop
    7bc8:	0006a2bc 	.word	0x0006a2bc
    7bcc:	00068ff8 	.word	0x00068ff8
    7bd0:	00069148 	.word	0x00069148
    7bd4:	000690c4 	.word	0x000690c4

00007bd8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    7bd8:	b570      	push	{r4, r5, r6, lr}
    7bda:	4606      	mov	r6, r0
    7bdc:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7bde:	f00b fa8e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7be2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7be4:	4620      	mov	r0, r4
    7be6:	f00b fa90 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7bea:	2808      	cmp	r0, #8
    7bec:	d923      	bls.n	7c36 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    7bee:	f104 0008 	add.w	r0, r4, #8
    7bf2:	f00b fa8a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7bf6:	b300      	cbz	r0, 7c3a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    7bf8:	4430      	add	r0, r6
    7bfa:	f00b fa7a 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bfe:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7c00:	6828      	ldr	r0, [r5, #0]
    7c02:	f00a f830 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7c06:	42b0      	cmp	r0, r6
    7c08:	d919      	bls.n	7c3e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c0a:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    7c0c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7c10:	4620      	mov	r0, r4
    7c12:	f00b fa6e 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7c16:	1824      	adds	r4, r4, r0
    7c18:	d025      	beq.n	7c66 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    7c1a:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    7c1c:	4620      	mov	r0, r4
    7c1e:	f00b fa6e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c22:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c24:	4620      	mov	r0, r4
    7c26:	f00b fa70 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c2a:	2804      	cmp	r0, #4
    7c2c:	d90e      	bls.n	7c4c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    7c2e:	1d20      	adds	r0, r4, #4
    7c30:	f00b fa6b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7c34:	e00b      	b.n	7c4e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    7c36:	2000      	movs	r0, #0
    7c38:	e7dd      	b.n	7bf6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7c3a:	2600      	movs	r6, #0
    7c3c:	e7e0      	b.n	7c00 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    7c3e:	4b0d      	ldr	r3, [pc, #52]	; (7c74 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x9c>)
    7c40:	4a0d      	ldr	r2, [pc, #52]	; (7c78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa0>)
    7c42:	f44f 7183 	mov.w	r1, #262	; 0x106
    7c46:	480d      	ldr	r0, [pc, #52]	; (7c7c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa4>)
    7c48:	f008 fdba 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c4c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7c4e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c50:	b158      	cbz	r0, 7c6a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x92>
    7c52:	4628      	mov	r0, r5
    7c54:	f00b fa4d 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c58:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    7c5a:	b124      	cbz	r4, 7c66 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
  uoffset_t size() const { return EndianScalar(length_); }
    7c5c:	6820      	ldr	r0, [r4, #0]
    7c5e:	f00a f802 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    7c62:	b120      	cbz	r0, 7c6e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c64:	3404      	adds	r4, #4
}
    7c66:	4620      	mov	r0, r4
    7c68:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c6a:	2400      	movs	r4, #0
    7c6c:	e7f5      	b.n	7c5a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x82>
  void* out_buffer = nullptr;
    7c6e:	2400      	movs	r4, #0
  return out_buffer;
    7c70:	e7f9      	b.n	7c66 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    7c72:	bf00      	nop
    7c74:	00068ff8 	.word	0x00068ff8
    7c78:	0006a308 	.word	0x0006a308
    7c7c:	000690c4 	.word	0x000690c4

00007c80 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c84:	b082      	sub	sp, #8
    7c86:	4606      	mov	r6, r0
    7c88:	460f      	mov	r7, r1
    7c8a:	4690      	mov	r8, r2
    7c8c:	461d      	mov	r5, r3
    7c8e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7c92:	4608      	mov	r0, r1
    7c94:	f00b fa33 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c98:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c9a:	4620      	mov	r0, r4
    7c9c:	f00b fa35 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ca0:	2808      	cmp	r0, #8
    7ca2:	d93e      	bls.n	7d22 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7ca4:	f104 0008 	add.w	r0, r4, #8
    7ca8:	f00b fa2f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7cac:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cae:	2800      	cmp	r0, #0
    7cb0:	d039      	beq.n	7d26 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7cb2:	4620      	mov	r0, r4
    7cb4:	f00b fa1d 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7cb8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7cba:	6820      	ldr	r0, [r4, #0]
    7cbc:	f009 ffd3 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7cc0:	4581      	cmp	r9, r0
    7cc2:	d232      	bcs.n	7d2a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7cc4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7cc6:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7cca:	4620      	mov	r0, r4
    7ccc:	f00b fa11 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7cd0:	42c4      	cmn	r4, r0
    7cd2:	d031      	beq.n	7d38 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    7cd4:	6833      	ldr	r3, [r6, #0]
    7cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7cd8:	4630      	mov	r0, r6
    7cda:	4798      	blx	r3
    7cdc:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    7cde:	6833      	ldr	r3, [r6, #0]
    7ce0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    7ce4:	2300      	movs	r3, #0
    7ce6:	9301      	str	r3, [sp, #4]
    7ce8:	f8cd 9000 	str.w	r9, [sp]
    7cec:	462b      	mov	r3, r5
    7cee:	4602      	mov	r2, r0
    7cf0:	4639      	mov	r1, r7
    7cf2:	4630      	mov	r0, r6
    7cf4:	47d0      	blx	sl
    7cf6:	bb08      	cbnz	r0, 7d3c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7cf8:	f1b8 0f00 	cmp.w	r8, #0
    7cfc:	d00d      	beq.n	7d1a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7cfe:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    7d02:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7d06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7d0a:	00ad      	lsls	r5, r5, #2
    7d0c:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7d0e:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7d10:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7d14:	441d      	add	r5, r3
    7d16:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7d18:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7d1a:	4620      	mov	r0, r4
    7d1c:	b002      	add	sp, #8
    7d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d22:	2000      	movs	r0, #0
    7d24:	e7c2      	b.n	7cac <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d26:	2400      	movs	r4, #0
    7d28:	e7c7      	b.n	7cba <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7d2a:	4b07      	ldr	r3, [pc, #28]	; (7d48 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
    7d2c:	4a07      	ldr	r2, [pc, #28]	; (7d4c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7d2e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7d32:	4807      	ldr	r0, [pc, #28]	; (7d50 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7d34:	f008 fd44 	bl	107c0 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7d38:	f00e f944 	bl	15fc4 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7d3c:	4905      	ldr	r1, [pc, #20]	; (7d54 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    7d3e:	68f0      	ldr	r0, [r6, #12]
    7d40:	f00b ff20 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7d44:	2400      	movs	r4, #0
    7d46:	e7e8      	b.n	7d1a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7d48:	00068ff8 	.word	0x00068ff8
    7d4c:	00069148 	.word	0x00069148
    7d50:	000690c4 	.word	0x000690c4
    7d54:	0006a3fc 	.word	0x0006a3fc

00007d58 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d5c:	b082      	sub	sp, #8
    7d5e:	4680      	mov	r8, r0
    7d60:	460e      	mov	r6, r1
    7d62:	4617      	mov	r7, r2
    7d64:	461d      	mov	r5, r3
    7d66:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7d6a:	4608      	mov	r0, r1
    7d6c:	f00b f9c7 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d70:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d72:	4620      	mov	r0, r4
    7d74:	f00b f9c9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d78:	2808      	cmp	r0, #8
    7d7a:	d93e      	bls.n	7dfa <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7d7c:	f104 0008 	add.w	r0, r4, #8
    7d80:	f00b f9c3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7d84:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d86:	2800      	cmp	r0, #0
    7d88:	d039      	beq.n	7dfe <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7d8a:	4620      	mov	r0, r4
    7d8c:	f00b f9b1 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d90:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7d92:	6820      	ldr	r0, [r4, #0]
    7d94:	f009 ff67 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7d98:	4581      	cmp	r9, r0
    7d9a:	d232      	bcs.n	7e02 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d9c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7d9e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7da2:	4620      	mov	r0, r4
    7da4:	f00b f9a5 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7da8:	42c4      	cmn	r4, r0
    7daa:	d031      	beq.n	7e10 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7dac:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    7db0:	6803      	ldr	r3, [r0, #0]
    7db2:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7db4:	2204      	movs	r2, #4
    7db6:	2140      	movs	r1, #64	; 0x40
    7db8:	4798      	blx	r3
    7dba:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    7dbc:	f8d8 3000 	ldr.w	r3, [r8]
    7dc0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    7dc4:	2301      	movs	r3, #1
    7dc6:	9301      	str	r3, [sp, #4]
    7dc8:	f8cd 9000 	str.w	r9, [sp]
    7dcc:	462b      	mov	r3, r5
    7dce:	4602      	mov	r2, r0
    7dd0:	4631      	mov	r1, r6
    7dd2:	4640      	mov	r0, r8
    7dd4:	47d0      	blx	sl
    7dd6:	b9e8      	cbnz	r0, 7e14 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7dd8:	b15f      	cbz	r7, 7df2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7dda:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    7dde:	687b      	ldr	r3, [r7, #4]
    7de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7de4:	00ad      	lsls	r5, r5, #2
    7de6:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7de8:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7dea:	687b      	ldr	r3, [r7, #4]
    7dec:	441d      	add	r5, r3
    7dee:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7df0:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7df2:	4620      	mov	r0, r4
    7df4:	b002      	add	sp, #8
    7df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7dfa:	2000      	movs	r0, #0
    7dfc:	e7c2      	b.n	7d84 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7dfe:	2400      	movs	r4, #0
    7e00:	e7c7      	b.n	7d92 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7e02:	4b08      	ldr	r3, [pc, #32]	; (7e24 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7e04:	4a08      	ldr	r2, [pc, #32]	; (7e28 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7e06:	f44f 7183 	mov.w	r1, #262	; 0x106
    7e0a:	4808      	ldr	r0, [pc, #32]	; (7e2c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    7e0c:	f008 fcd8 	bl	107c0 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7e10:	f00e f8d8 	bl	15fc4 <abort>
    TF_LITE_REPORT_ERROR(
    7e14:	4906      	ldr	r1, [pc, #24]	; (7e30 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
    7e16:	f8d8 000c 	ldr.w	r0, [r8, #12]
    7e1a:	f00b feb3 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7e1e:	2400      	movs	r4, #0
    7e20:	e7e7      	b.n	7df2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7e22:	bf00      	nop
    7e24:	00068ff8 	.word	0x00068ff8
    7e28:	00069148 	.word	0x00069148
    7e2c:	000690c4 	.word	0x000690c4
    7e30:	0006a448 	.word	0x0006a448

00007e34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    7e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e38:	4607      	mov	r7, r0
    7e3a:	460c      	mov	r4, r1
    7e3c:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    7e3e:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7e40:	4608      	mov	r0, r1
    7e42:	f00b f95c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e46:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e48:	4628      	mov	r0, r5
    7e4a:	f00b f95e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e4e:	2810      	cmp	r0, #16
    7e50:	d904      	bls.n	7e5c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    7e52:	f105 0010 	add.w	r0, r5, #16
    7e56:	f00b f958 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7e5a:	e000      	b.n	7e5e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    7e5c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7e5e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e60:	b140      	cbz	r0, 7e74 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    7e62:	4620      	mov	r0, r4
    7e64:	f00b f945 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e68:	4404      	add	r4, r0
  if (model->metadata()) {
    7e6a:	2c00      	cmp	r4, #0
    7e6c:	f000 80cc 	beq.w	8008 <CONFIG_MAIN_STACK_SIZE+0x8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    7e70:	2500      	movs	r5, #0
    7e72:	e023      	b.n	7ebc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    7e74:	2400      	movs	r4, #0
    7e76:	e7f8      	b.n	7e6a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e78:	2000      	movs	r0, #0
    7e7a:	e02c      	b.n	7ed6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e7c:	2400      	movs	r4, #0
    7e7e:	e031      	b.n	7ee4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    7e80:	4b64      	ldr	r3, [pc, #400]	; (8014 <CONFIG_MAIN_STACK_SIZE+0x14>)
    7e82:	4a65      	ldr	r2, [pc, #404]	; (8018 <CONFIG_MAIN_STACK_SIZE+0x18>)
    7e84:	f44f 7183 	mov.w	r1, #262	; 0x106
    7e88:	4864      	ldr	r0, [pc, #400]	; (801c <CONFIG_MAIN_STACK_SIZE+0x1c>)
    7e8a:	f008 fc99 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e8e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7e90:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e94:	2800      	cmp	r0, #0
    7e96:	d046      	beq.n	7f26 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    7e98:	4648      	mov	r0, r9
    7e9a:	f00b f92a 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e9e:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7ea0:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    7ea4:	f8df a180 	ldr.w	sl, [pc, #384]	; 8028 <CONFIG_MAIN_STACK_SIZE+0x28>
    7ea8:	4650      	mov	r0, sl
    7eaa:	f7f9 fb33 	bl	1514 <strlen>
    7eae:	4602      	mov	r2, r0
    7eb0:	4651      	mov	r1, sl
    7eb2:	4648      	mov	r0, r9
    7eb4:	f00e fa03 	bl	162be <strncmp>
    7eb8:	b3c0      	cbz	r0, 7f2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    7eba:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7ebc:	4630      	mov	r0, r6
    7ebe:	f00b f91e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7ec2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7ec4:	4620      	mov	r0, r4
    7ec6:	f00b f920 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7eca:	2810      	cmp	r0, #16
    7ecc:	d9d4      	bls.n	7e78 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    7ece:	f104 0010 	add.w	r0, r4, #16
    7ed2:	f00b f91a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7ed6:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ed8:	2800      	cmp	r0, #0
    7eda:	d0cf      	beq.n	7e7c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    7edc:	4620      	mov	r0, r4
    7ede:	f00b f908 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ee2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ee4:	6820      	ldr	r0, [r4, #0]
    7ee6:	f009 febe 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7eea:	4285      	cmp	r5, r0
    7eec:	f080 808e 	bcs.w	800c <CONFIG_MAIN_STACK_SIZE+0xc>
    7ef0:	6820      	ldr	r0, [r4, #0]
    7ef2:	f009 feb8 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ef6:	4285      	cmp	r5, r0
    7ef8:	d2c2      	bcs.n	7e80 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7efa:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7efc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7f00:	4620      	mov	r0, r4
    7f02:	f00b f8f6 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f06:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7f08:	4620      	mov	r0, r4
    7f0a:	f00b f8f8 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f0e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f12:	4648      	mov	r0, r9
    7f14:	f00b f8f9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f18:	2804      	cmp	r0, #4
    7f1a:	d9b8      	bls.n	7e8e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    7f1c:	f109 0004 	add.w	r0, r9, #4
    7f20:	f00b f8f3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7f24:	e7b4      	b.n	7e90 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f26:	f04f 0900 	mov.w	r9, #0
    7f2a:	e7b9      	b.n	7ea0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    7f2c:	4630      	mov	r0, r6
    7f2e:	f00b f8e6 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f32:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f36:	4648      	mov	r0, r9
    7f38:	f00b f8e7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f3c:	280c      	cmp	r0, #12
    7f3e:	d94e      	bls.n	7fde <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1aa>
    7f40:	f109 000c 	add.w	r0, r9, #12
    7f44:	f00b f8e1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7f48:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f4c:	2800      	cmp	r0, #0
    7f4e:	d048      	beq.n	7fe2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ae>
    7f50:	4648      	mov	r0, r9
    7f52:	f00b f8ce 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f56:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7f58:	4620      	mov	r0, r4
    7f5a:	f00b f8d0 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f5e:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f62:	4650      	mov	r0, sl
    7f64:	f00b f8d1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f68:	2806      	cmp	r0, #6
    7f6a:	d93d      	bls.n	7fe8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b4>
    7f6c:	f10a 0006 	add.w	r0, sl, #6
    7f70:	f00b f8cb 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7f74:	b3d0      	cbz	r0, 7fec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b8>
    7f76:	4420      	add	r0, r4
    7f78:	f00b f8bb 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f7c:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7f7e:	f8d9 0000 	ldr.w	r0, [r9]
    7f82:	f009 fe70 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7f86:	4550      	cmp	r0, sl
    7f88:	d933      	bls.n	7ff2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7f8a:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    7f8e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7f92:	4620      	mov	r0, r4
    7f94:	f00b f8ad 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f98:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7f9a:	4620      	mov	r0, r4
    7f9c:	f00b f8af 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7fa0:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7fa4:	4648      	mov	r0, r9
    7fa6:	f00b f8b0 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7faa:	2804      	cmp	r0, #4
    7fac:	d928      	bls.n	8000 <CONFIG_MAIN_STACK_SIZE>
    7fae:	f109 0004 	add.w	r0, r9, #4
    7fb2:	f00b f8aa 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7fb6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fb8:	b320      	cbz	r0, 8004 <CONFIG_MAIN_STACK_SIZE+0x4>
    7fba:	4620      	mov	r0, r4
    7fbc:	f00b f899 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7fc0:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    7fc2:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    7fc4:	3010      	adds	r0, #16
        *offline_planner_offsets =
    7fc6:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    7fca:	687b      	ldr	r3, [r7, #4]
    7fcc:	4293      	cmp	r3, r2
    7fce:	f43f af74 	beq.w	7eba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    7fd2:	4913      	ldr	r1, [pc, #76]	; (8020 <CONFIG_MAIN_STACK_SIZE+0x20>)
    7fd4:	68f8      	ldr	r0, [r7, #12]
    7fd6:	f00b fdd5 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    7fda:	2001      	movs	r0, #1
    7fdc:	e017      	b.n	800e <CONFIG_MAIN_STACK_SIZE+0xe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fde:	2000      	movs	r0, #0
    7fe0:	e7b2      	b.n	7f48 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fe2:	f04f 0900 	mov.w	r9, #0
    7fe6:	e7b7      	b.n	7f58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fe8:	2000      	movs	r0, #0
    7fea:	e7c3      	b.n	7f74 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x140>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7fec:	f04f 0a00 	mov.w	sl, #0
    7ff0:	e7c5      	b.n	7f7e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x14a>
    FLATBUFFERS_ASSERT(i < size());
    7ff2:	4b08      	ldr	r3, [pc, #32]	; (8014 <CONFIG_MAIN_STACK_SIZE+0x14>)
    7ff4:	4a0b      	ldr	r2, [pc, #44]	; (8024 <CONFIG_MAIN_STACK_SIZE+0x24>)
    7ff6:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ffa:	4808      	ldr	r0, [pc, #32]	; (801c <CONFIG_MAIN_STACK_SIZE+0x1c>)
    7ffc:	f008 fbe0 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8000:	2000      	movs	r0, #0
    8002:	e7d8      	b.n	7fb6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x182>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8004:	2000      	movs	r0, #0
    8006:	e7dc      	b.n	7fc2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x18e>
  return kTfLiteOk;
    8008:	2000      	movs	r0, #0
    800a:	e000      	b.n	800e <CONFIG_MAIN_STACK_SIZE+0xe>
    800c:	2000      	movs	r0, #0
}
    800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8012:	bf00      	nop
    8014:	00068ff8 	.word	0x00068ff8
    8018:	0006a48c 	.word	0x0006a48c
    801c:	000690c4 	.word	0x000690c4
    8020:	0006a584 	.word	0x0006a584
    8024:	0006a308 	.word	0x0006a308
    8028:	0006a930 	.word	0x0006a930

0000802c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    8030:	b349      	cbz	r1, 8086 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    8032:	4604      	mov	r4, r0
    8034:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    8036:	7c03      	ldrb	r3, [r0, #16]
    8038:	bb3b      	cbnz	r3, 808a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    803a:	2301      	movs	r3, #1
    803c:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    803e:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    8040:	6803      	ldr	r3, [r0, #0]
    8042:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    8044:	2204      	movs	r2, #4
    8046:	2108      	movs	r1, #8
    8048:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    804a:	4603      	mov	r3, r0
    804c:	b118      	cbz	r0, 8056 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    804e:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    8050:	4926      	ldr	r1, [pc, #152]	; (80ec <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    8052:	6001      	str	r1, [r0, #0]
    8054:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    8056:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    8058:	4620      	mov	r0, r4
    805a:	f00b fb2a 	bl	136b2 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    805e:	2800      	cmp	r0, #0
    8060:	d142      	bne.n	80e8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    8062:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    8064:	683b      	ldr	r3, [r7, #0]
    8066:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    806a:	4628      	mov	r0, r5
    806c:	f00b f847 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8070:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8072:	4630      	mov	r0, r6
    8074:	f00b f849 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8078:	2808      	cmp	r0, #8
    807a:	d90c      	bls.n	8096 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    807c:	f106 0008 	add.w	r0, r6, #8
    8080:	f00b f843 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8084:	e008      	b.n	8098 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    8086:	f00d ff9d 	bl	15fc4 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    808a:	4919      	ldr	r1, [pc, #100]	; (80f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    808c:	68c0      	ldr	r0, [r0, #12]
    808e:	f00b fd79 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    8092:	2600      	movs	r6, #0
    8094:	e01d      	b.n	80d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    8096:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8098:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    809a:	b1e8      	cbz	r0, 80d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    809c:	4630      	mov	r0, r6
    809e:	f00b f828 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    80a2:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    80a4:	6830      	ldr	r0, [r6, #0]
    80a6:	f009 fdde 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    80aa:	2204      	movs	r2, #4
    80ac:	00c1      	lsls	r1, r0, #3
    80ae:	4638      	mov	r0, r7
    80b0:	47c0      	blx	r8
  if (output == nullptr) {
    80b2:	4606      	mov	r6, r0
    80b4:	b190      	cbz	r0, 80dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    80b6:	6823      	ldr	r3, [r4, #0]
    80b8:	69db      	ldr	r3, [r3, #28]
    80ba:	4602      	mov	r2, r0
    80bc:	4629      	mov	r1, r5
    80be:	4620      	mov	r0, r4
    80c0:	4798      	blx	r3
    80c2:	b978      	cbnz	r0, 80e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    80c4:	6823      	ldr	r3, [r4, #0]
    80c6:	699b      	ldr	r3, [r3, #24]
    80c8:	4632      	mov	r2, r6
    80ca:	4629      	mov	r1, r5
    80cc:	4620      	mov	r0, r4
    80ce:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    80d0:	b940      	cbnz	r0, 80e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    80d2:	4630      	mov	r0, r6
    80d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80d8:	2600      	movs	r6, #0
    80da:	e7e3      	b.n	80a4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    80dc:	4805      	ldr	r0, [pc, #20]	; (80f4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    80de:	f00a ff83 	bl	12fe8 <_Z11MicroPrintfPKcz>
    return nullptr;
    80e2:	e7f6      	b.n	80d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    80e4:	2600      	movs	r6, #0
    80e6:	e7f4      	b.n	80d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    80e8:	2600      	movs	r6, #0
    80ea:	e7f2      	b.n	80d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    80ec:	0006a950 	.word	0x0006a950
    80f0:	0006a5d0 	.word	0x0006a5d0
    80f4:	0006a628 	.word	0x0006a628

000080f8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    80f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    80fc:	b083      	sub	sp, #12
    80fe:	4680      	mov	r8, r0
    8100:	460e      	mov	r6, r1
    8102:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    8104:	2500      	movs	r5, #0
    8106:	e013      	b.n	8130 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8108:	2000      	movs	r0, #0
    810a:	e01d      	b.n	8148 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    810c:	2400      	movs	r4, #0
    810e:	e022      	b.n	8156 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    8110:	4b31      	ldr	r3, [pc, #196]	; (81d8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    8112:	4a32      	ldr	r2, [pc, #200]	; (81dc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    8114:	f44f 7183 	mov.w	r1, #262	; 0x106
    8118:	4831      	ldr	r0, [pc, #196]	; (81e0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    811a:	f008 fb51 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    811e:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8120:	b118      	cbz	r0, 812a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    8122:	4420      	add	r0, r4
    8124:	f00b f8ba 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8128:	e000      	b.n	812c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    812a:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    812c:	bb98      	cbnz	r0, 8196 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    812e:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8130:	4630      	mov	r0, r6
    8132:	f00a ffe4 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8136:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8138:	4620      	mov	r0, r4
    813a:	f00a ffe6 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    813e:	2804      	cmp	r0, #4
    8140:	d9e2      	bls.n	8108 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    8142:	1d20      	adds	r0, r4, #4
    8144:	f00a ffe1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8148:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    814a:	2800      	cmp	r0, #0
    814c:	d0de      	beq.n	810c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    814e:	4620      	mov	r0, r4
    8150:	f00a ffcf 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8154:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8156:	6820      	ldr	r0, [r4, #0]
    8158:	f009 fd85 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    815c:	4285      	cmp	r5, r0
    815e:	d236      	bcs.n	81ce <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    8160:	6820      	ldr	r0, [r4, #0]
    8162:	f009 fd80 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8166:	4285      	cmp	r5, r0
    8168:	d2d2      	bcs.n	8110 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    816a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    816c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8170:	4620      	mov	r0, r4
    8172:	f00a ffbe 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8176:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8178:	4620      	mov	r0, r4
    817a:	f00a ffc0 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    817e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8182:	4648      	mov	r0, r9
    8184:	f00a ffc1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8188:	280e      	cmp	r0, #14
    818a:	d9c8      	bls.n	811e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    818c:	f109 000e 	add.w	r0, r9, #14
    8190:	f00a ffbb 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8194:	e7c4      	b.n	8120 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    8196:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    819a:	0084      	lsls	r4, r0, #2
    819c:	a901      	add	r1, sp, #4
    819e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    81a2:	f00a ff85 	bl	130b0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    81a6:	4603      	mov	r3, r0
    81a8:	b990      	cbnz	r0, 81d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    81aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
    81ae:	6803      	ldr	r3, [r0, #0]
    81b0:	68db      	ldr	r3, [r3, #12]
    81b2:	2210      	movs	r2, #16
    81b4:	9901      	ldr	r1, [sp, #4]
    81b6:	4798      	blx	r3
      eval_tensors[i].data.data =
    81b8:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    81ba:	2800      	cmp	r0, #0
    81bc:	d1b7      	bne.n	812e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    81be:	9a01      	ldr	r2, [sp, #4]
    81c0:	4908      	ldr	r1, [pc, #32]	; (81e4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    81c2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    81c6:	f00b fcdd 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    81ca:	2301      	movs	r3, #1
    81cc:	e000      	b.n	81d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    81ce:	2300      	movs	r3, #0
}
    81d0:	4618      	mov	r0, r3
    81d2:	b003      	add	sp, #12
    81d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    81d8:	00068ff8 	.word	0x00068ff8
    81dc:	000692e0 	.word	0x000692e0
    81e0:	000690c4 	.word	0x000690c4
    81e4:	0006a658 	.word	0x0006a658

000081e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    81e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81ec:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    81ee:	b12b      	cbz	r3, 81fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    81f0:	4604      	mov	r4, r0
    81f2:	4688      	mov	r8, r1
    81f4:	4692      	mov	sl, r2
    81f6:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    81f8:	2600      	movs	r6, #0
    81fa:	e04b      	b.n	8294 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xac>
  TFLITE_DCHECK(eval_tensors != nullptr);
    81fc:	f00d fee2 	bl	15fc4 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    8200:	4640      	mov	r0, r8
    8202:	f00a ff7c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8206:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    820a:	4658      	mov	r0, fp
    820c:	f00a ff7d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8210:	2804      	cmp	r0, #4
    8212:	d92e      	bls.n	8272 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8a>
    8214:	f10b 0004 	add.w	r0, fp, #4
    8218:	f00a ff77 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    821c:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8220:	b120      	cbz	r0, 822c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    8222:	4658      	mov	r0, fp
    8224:	f00a ff65 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8228:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    822c:	6838      	ldr	r0, [r7, #0]
    822e:	f009 fd1a 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8232:	4286      	cmp	r6, r0
    8234:	d21f      	bcs.n	8276 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8236:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    8238:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    823c:	4638      	mov	r0, r7
    823e:	f00a ff58 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8242:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8244:	4638      	mov	r0, r7
    8246:	f00a ff5a 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    824a:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    824e:	4658      	mov	r0, fp
    8250:	f00a ff5b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8254:	280e      	cmp	r0, #14
    8256:	d915      	bls.n	8284 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x9c>
    8258:	f10b 000e 	add.w	r0, fp, #14
    825c:	f00a ff55 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8260:	b118      	cbz	r0, 826a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x82>
    8262:	4438      	add	r0, r7
    8264:	f00b f81a 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8268:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    826a:	9b01      	ldr	r3, [sp, #4]
    826c:	b963      	cbnz	r3, 8288 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa0>
    826e:	2301      	movs	r3, #1
    8270:	e02c      	b.n	82cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8272:	2000      	movs	r0, #0
    8274:	e7d2      	b.n	821c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    8276:	4bb6      	ldr	r3, [pc, #728]	; (8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8278:	4ab6      	ldr	r2, [pc, #728]	; (8554 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x36c>)
    827a:	f44f 7183 	mov.w	r1, #262	; 0x106
    827e:	48b6      	ldr	r0, [pc, #728]	; (8558 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8280:	f008 fa9e 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8284:	2000      	movs	r0, #0
    8286:	e7eb      	b.n	8260 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x78>
    8288:	2300      	movs	r3, #0
    828a:	e01f      	b.n	82cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
      current->offline_offset = kOnlinePlannedBuffer;
    828c:	f04f 33ff 	mov.w	r3, #4294967295
    8290:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8292:	3601      	adds	r6, #1
    8294:	6863      	ldr	r3, [r4, #4]
    8296:	42b3      	cmp	r3, r6
    8298:	d920      	bls.n	82dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xf4>
    AllocationInfo* current = &info_[i];
    829a:	6825      	ldr	r5, [r4, #0]
    829c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    82a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    82a4:	009f      	lsls	r7, r3, #2
    82a6:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    82aa:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    82ac:	4629      	mov	r1, r5
    82ae:	f00a feff 	bl	130b0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    82b2:	9001      	str	r0, [sp, #4]
    82b4:	2800      	cmp	r0, #0
    82b6:	f040 8146 	bne.w	8546 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35e>
    current->first_created = -1;
    82ba:	f04f 33ff 	mov.w	r3, #4294967295
    82be:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    82c0:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    82c2:	f859 7007 	ldr.w	r7, [r9, r7]
    82c6:	2f00      	cmp	r7, #0
    82c8:	d09a      	beq.n	8200 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    82ca:	2300      	movs	r3, #0
    82cc:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    82ce:	f1ba 0f00 	cmp.w	sl, #0
    82d2:	d0db      	beq.n	828c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa4>
      current->offline_offset = offline_offsets[i];
    82d4:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    82d8:	612b      	str	r3, [r5, #16]
    82da:	e7da      	b.n	8292 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xaa>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    82dc:	4640      	mov	r0, r8
    82de:	f00a ffbe 	bl	1325e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    82e2:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    82e4:	f04f 0900 	mov.w	r9, #0
    82e8:	e01f      	b.n	832a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x142>
    82ea:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    82ec:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82f0:	b350      	cbz	r0, 8348 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x160>
    82f2:	4628      	mov	r0, r5
    82f4:	f00a fefd 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82f8:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    82fa:	6828      	ldr	r0, [r5, #0]
    82fc:	f009 fcb3 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8300:	4581      	cmp	r9, r0
    8302:	d22a      	bcs.n	835a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x172>
    8304:	6828      	ldr	r0, [r5, #0]
    8306:	f009 fcae 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    830a:	4581      	cmp	r9, r0
    830c:	d21e      	bcs.n	834c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x164>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    830e:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8310:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    8314:	f00a fef2 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    8318:	6823      	ldr	r3, [r4, #0]
    831a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    831e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    8322:	2300      	movs	r3, #0
    8324:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8326:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    832a:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    832c:	4640      	mov	r0, r8
    832e:	f00a fee6 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8332:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8336:	4628      	mov	r0, r5
    8338:	f00a fee7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    833c:	2806      	cmp	r0, #6
    833e:	d9d4      	bls.n	82ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x102>
    8340:	1da8      	adds	r0, r5, #6
    8342:	f00a fee2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8346:	e7d1      	b.n	82ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x104>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8348:	2500      	movs	r5, #0
    834a:	e7d6      	b.n	82fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x112>
    FLATBUFFERS_ASSERT(i < size());
    834c:	4b80      	ldr	r3, [pc, #512]	; (8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    834e:	4a83      	ldr	r2, [pc, #524]	; (855c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8350:	f44f 7183 	mov.w	r1, #262	; 0x106
    8354:	4880      	ldr	r0, [pc, #512]	; (8558 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8356:	f008 fa33 	bl	107c0 <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    835a:	f04f 0800 	mov.w	r8, #0
    835e:	e01e      	b.n	839e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8360:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8362:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8364:	b348      	cbz	r0, 83ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d2>
    8366:	4628      	mov	r0, r5
    8368:	f00a fec3 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    836c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    836e:	6828      	ldr	r0, [r5, #0]
    8370:	f009 fc79 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8374:	4580      	cmp	r8, r0
    8376:	d229      	bcs.n	83cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e4>
    8378:	6828      	ldr	r0, [r5, #0]
    837a:	f009 fc74 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    837e:	4580      	cmp	r8, r0
    8380:	d21d      	bcs.n	83be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8382:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8384:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    8388:	f00a feb8 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    838c:	6823      	ldr	r3, [r4, #0]
    838e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8392:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    8396:	1e7b      	subs	r3, r7, #1
    8398:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    839a:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    839e:	4630      	mov	r0, r6
    83a0:	f00a fead 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    83a4:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    83a6:	4628      	mov	r0, r5
    83a8:	f00a feaf 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83ac:	2808      	cmp	r0, #8
    83ae:	d9d7      	bls.n	8360 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x178>
    83b0:	f105 0008 	add.w	r0, r5, #8
    83b4:	f00a fea9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    83b8:	e7d3      	b.n	8362 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83ba:	2500      	movs	r5, #0
    83bc:	e7d7      	b.n	836e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x186>
    FLATBUFFERS_ASSERT(i < size());
    83be:	4b64      	ldr	r3, [pc, #400]	; (8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    83c0:	4a66      	ldr	r2, [pc, #408]	; (855c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    83c2:	f44f 7183 	mov.w	r1, #262	; 0x106
    83c6:	4864      	ldr	r0, [pc, #400]	; (8558 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    83c8:	f008 f9fa 	bl	107c0 <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    83cc:	3f01      	subs	r7, #1
    83ce:	e08d      	b.n	84ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x304>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83d0:	2000      	movs	r0, #0
    83d2:	e09b      	b.n	850c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x324>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83d4:	f04f 0900 	mov.w	r9, #0
    83d8:	e0a1      	b.n	851e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x336>
    FLATBUFFERS_ASSERT(i < size());
    83da:	4b5d      	ldr	r3, [pc, #372]	; (8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    83dc:	4a60      	ldr	r2, [pc, #384]	; (8560 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x378>)
    83de:	f44f 7183 	mov.w	r1, #262	; 0x106
    83e2:	485d      	ldr	r0, [pc, #372]	; (8558 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    83e4:	f008 f9ec 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83e8:	2000      	movs	r0, #0
    83ea:	e019      	b.n	8420 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x238>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83ec:	2500      	movs	r5, #0
    83ee:	e01f      	b.n	8430 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x248>
    FLATBUFFERS_ASSERT(i < size());
    83f0:	4b57      	ldr	r3, [pc, #348]	; (8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    83f2:	4a5a      	ldr	r2, [pc, #360]	; (855c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    83f4:	f44f 7183 	mov.w	r1, #262	; 0x106
    83f8:	4857      	ldr	r0, [pc, #348]	; (8558 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    83fa:	f008 f9e1 	bl	107c0 <__assert_func>
        current->last_used = i;
    83fe:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    8400:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    8404:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    8406:	4648      	mov	r0, r9
    8408:	f00a fe79 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    840c:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8410:	4628      	mov	r0, r5
    8412:	f00a fe7a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8416:	2806      	cmp	r0, #6
    8418:	d9e6      	bls.n	83e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x200>
    841a:	1da8      	adds	r0, r5, #6
    841c:	f00a fe75 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8420:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8424:	2800      	cmp	r0, #0
    8426:	d0e1      	beq.n	83ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x204>
    8428:	4628      	mov	r0, r5
    842a:	f00a fe62 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    842e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8430:	6828      	ldr	r0, [r5, #0]
    8432:	f009 fc18 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8436:	4582      	cmp	sl, r0
    8438:	d215      	bcs.n	8466 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x27e>
    843a:	6828      	ldr	r0, [r5, #0]
    843c:	f009 fc13 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8440:	4582      	cmp	sl, r0
    8442:	d2d5      	bcs.n	83f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x208>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8444:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8446:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    844a:	f00a fe57 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    844e:	6823      	ldr	r3, [r4, #0]
    8450:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8454:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    8458:	68c3      	ldr	r3, [r0, #12]
    845a:	f1b3 3fff 	cmp.w	r3, #4294967295
    845e:	d0ce      	beq.n	83fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    8460:	42bb      	cmp	r3, r7
    8462:	dacd      	bge.n	8400 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x218>
    8464:	e7cb      	b.n	83fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8466:	f04f 0900 	mov.w	r9, #0
    846a:	e00d      	b.n	8488 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2a0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    846c:	2000      	movs	r0, #0
    846e:	e019      	b.n	84a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2bc>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8470:	2500      	movs	r5, #0
    8472:	e01f      	b.n	84b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2cc>
    FLATBUFFERS_ASSERT(i < size());
    8474:	4b36      	ldr	r3, [pc, #216]	; (8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8476:	4a39      	ldr	r2, [pc, #228]	; (855c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8478:	f44f 7183 	mov.w	r1, #262	; 0x106
    847c:	4836      	ldr	r0, [pc, #216]	; (8558 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    847e:	f008 f99f 	bl	107c0 <__assert_func>
        current->first_created = i;
    8482:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8484:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8488:	4640      	mov	r0, r8
    848a:	f00a fe38 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    848e:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8492:	4628      	mov	r0, r5
    8494:	f00a fe39 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8498:	2808      	cmp	r0, #8
    849a:	d9e7      	bls.n	846c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x284>
    849c:	f105 0008 	add.w	r0, r5, #8
    84a0:	f00a fe33 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    84a4:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84a8:	2800      	cmp	r0, #0
    84aa:	d0e1      	beq.n	8470 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x288>
    84ac:	4628      	mov	r0, r5
    84ae:	f00a fe20 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84b2:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    84b4:	6828      	ldr	r0, [r5, #0]
    84b6:	f009 fbd6 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    84ba:	4581      	cmp	r9, r0
    84bc:	d215      	bcs.n	84ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x302>
    84be:	6828      	ldr	r0, [r5, #0]
    84c0:	f009 fbd1 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    84c4:	4581      	cmp	r9, r0
    84c6:	d2d5      	bcs.n	8474 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    84c8:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    84ca:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    84ce:	f00a fe15 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    84d2:	6823      	ldr	r3, [r4, #0]
    84d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    84d8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    84dc:	6883      	ldr	r3, [r0, #8]
    84de:	f1b3 3fff 	cmp.w	r3, #4294967295
    84e2:	d0ce      	beq.n	8482 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
    84e4:	42bb      	cmp	r3, r7
    84e6:	ddcd      	ble.n	8484 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29c>
    84e8:	e7cb      	b.n	8482 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    84ea:	3f01      	subs	r7, #1
    84ec:	2f00      	cmp	r7, #0
    84ee:	db28      	blt.n	8542 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35a>
    return data_ - ReadScalar<soffset_t>(data_);
    84f0:	4630      	mov	r0, r6
    84f2:	f00a fe04 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    84f6:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    84f8:	4628      	mov	r0, r5
    84fa:	f00a fe06 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84fe:	280a      	cmp	r0, #10
    8500:	f67f af66 	bls.w	83d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e8>
    8504:	f105 000a 	add.w	r0, r5, #10
    8508:	f00a fdff 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    850c:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8510:	2800      	cmp	r0, #0
    8512:	f43f af5f 	beq.w	83d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1ec>
    8516:	4648      	mov	r0, r9
    8518:	f00a fdeb 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    851c:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    851e:	f8d9 0000 	ldr.w	r0, [r9]
    8522:	f009 fba0 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8526:	4287      	cmp	r7, r0
    8528:	f4bf af57 	bcs.w	83da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    852c:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    8530:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8534:	4648      	mov	r0, r9
    8536:	f00a fddc 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    853a:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    853c:	f04f 0a00 	mov.w	sl, #0
    8540:	e760      	b.n	8404 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x21c>
  return kTfLiteOk;
    8542:	2300      	movs	r3, #0
    8544:	9301      	str	r3, [sp, #4]
}
    8546:	9801      	ldr	r0, [sp, #4]
    8548:	b003      	add	sp, #12
    854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    854e:	bf00      	nop
    8550:	00068ff8 	.word	0x00068ff8
    8554:	000692e0 	.word	0x000692e0
    8558:	000690c4 	.word	0x000690c4
    855c:	00069004 	.word	0x00069004
    8560:	00069e30 	.word	0x00069e30

00008564 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8568:	b083      	sub	sp, #12
    856a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    856e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8570:	b31d      	cbz	r5, 85ba <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    8572:	4607      	mov	r7, r0
    8574:	4688      	mov	r8, r1
    8576:	4614      	mov	r4, r2
    8578:	469a      	mov	sl, r3
  *result = {};
    857a:	2240      	movs	r2, #64	; 0x40
    857c:	2100      	movs	r1, #0
    857e:	4628      	mov	r0, r5
    8580:	f00d fd39 	bl	15ff6 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    8584:	4620      	mov	r0, r4
    8586:	f00a fdba 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    858a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    858c:	4630      	mov	r0, r6
    858e:	f00a fdbc 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8592:	2806      	cmp	r0, #6
    8594:	d913      	bls.n	85be <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8596:	1db0      	adds	r0, r6, #6
    8598:	f00a fdb7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    859c:	b188      	cbz	r0, 85c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    859e:	4420      	add	r0, r4
    85a0:	f00a fdb9 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    85a4:	464a      	mov	r2, r9
    85a6:	4629      	mov	r1, r5
    85a8:	b2c0      	uxtb	r0, r0
    85aa:	f001 f891 	bl	96d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    85ae:	4606      	mov	r6, r0
    85b0:	b148      	cbz	r0, 85c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    85b2:	4630      	mov	r0, r6
    85b4:	b003      	add	sp, #12
    85b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    85ba:	f00d fd03 	bl	15fc4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85be:	2000      	movs	r0, #0
    85c0:	e7ec      	b.n	859c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    85c2:	2000      	movs	r0, #0
    85c4:	e7ee      	b.n	85a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    85c6:	4620      	mov	r0, r4
    85c8:	f00a fd99 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85cc:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85d0:	4658      	mov	r0, fp
    85d2:	f00a fd9a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85d6:	280e      	cmp	r0, #14
    85d8:	d93f      	bls.n	865a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    85da:	f10b 000e 	add.w	r0, fp, #14
    85de:	f00a fd94 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    85e2:	b118      	cbz	r0, 85ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    85e4:	4420      	add	r0, r4
    85e6:	f00a fe59 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    85ea:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    85ec:	3e00      	subs	r6, #0
    85ee:	bf18      	it	ne
    85f0:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    85f2:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    85f6:	4651      	mov	r1, sl
    85f8:	4620      	mov	r0, r4
    85fa:	f7ff faed 	bl	7bd8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    85fe:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    8600:	b368      	cbz	r0, 865e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    8602:	2301      	movs	r3, #1
    8604:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    8606:	464b      	mov	r3, r9
    8608:	aa01      	add	r2, sp, #4
    860a:	f105 0118 	add.w	r1, r5, #24
    860e:	4620      	mov	r0, r4
    8610:	f7fd fe6a 	bl	62e8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    8614:	4606      	mov	r6, r0
    8616:	2800      	cmp	r0, #0
    8618:	d1cb      	bne.n	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    861a:	4620      	mov	r0, r4
    861c:	f00a fd6f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8620:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8624:	4650      	mov	r0, sl
    8626:	f00a fd70 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    862a:	2804      	cmp	r0, #4
    862c:	d91a      	bls.n	8664 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    862e:	f10a 0004 	add.w	r0, sl, #4
    8632:	f00a fd6a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8636:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    863a:	b1a8      	cbz	r0, 8668 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    863c:	4650      	mov	r0, sl
    863e:	f00a fd58 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8642:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8646:	b18a      	cbz	r2, 866c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8648:	f105 0308 	add.w	r3, r5, #8
    864c:	4649      	mov	r1, r9
    864e:	4638      	mov	r0, r7
    8650:	f00b f862 	bl	13718 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8654:	b160      	cbz	r0, 8670 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    8656:	4606      	mov	r6, r0
    8658:	e7ab      	b.n	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    865a:	2000      	movs	r0, #0
    865c:	e7c1      	b.n	85e2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    865e:	2302      	movs	r3, #2
    8660:	752b      	strb	r3, [r5, #20]
    8662:	e7d0      	b.n	8606 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    8664:	2000      	movs	r0, #0
    8666:	e7e6      	b.n	8636 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8668:	2200      	movs	r2, #0
    866a:	e7ec      	b.n	8646 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    866c:	4bb6      	ldr	r3, [pc, #728]	; (8948 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    866e:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8670:	4620      	mov	r0, r4
    8672:	f00a fd44 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8676:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    867a:	4650      	mov	r0, sl
    867c:	f00a fd45 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8680:	280c      	cmp	r0, #12
    8682:	d91a      	bls.n	86ba <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    8684:	f10a 000c 	add.w	r0, sl, #12
    8688:	f00a fd3f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    868c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    868e:	b1b0      	cbz	r0, 86be <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    8690:	4620      	mov	r0, r4
    8692:	f00a fd2e 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8696:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    8698:	2c00      	cmp	r4, #0
    869a:	d08a      	beq.n	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    869c:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    869e:	4620      	mov	r0, r4
    86a0:	f00a fd2d 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86a4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86a6:	4620      	mov	r0, r4
    86a8:	f00a fd2f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86ac:	2808      	cmp	r0, #8
    86ae:	d908      	bls.n	86c2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    86b0:	f104 0008 	add.w	r0, r4, #8
    86b4:	f00a fd29 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    86b8:	e004      	b.n	86c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    86ba:	2000      	movs	r0, #0
    86bc:	e7e6      	b.n	868c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86be:	2400      	movs	r4, #0
    86c0:	e7ea      	b.n	8698 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86c2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    86c4:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86c8:	2800      	cmp	r0, #0
    86ca:	d060      	beq.n	878e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    86cc:	4620      	mov	r0, r4
    86ce:	f00a fd10 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    86d2:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    86d4:	2c00      	cmp	r4, #0
    86d6:	f43f af6c 	beq.w	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    86da:	6820      	ldr	r0, [r4, #0]
    86dc:	f009 fac3 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    86e0:	2800      	cmp	r0, #0
    86e2:	f43f af66 	beq.w	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    86e6:	4650      	mov	r0, sl
    86e8:	f00a fd09 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86ec:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86f0:	4658      	mov	r0, fp
    86f2:	f00a fd0a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86f6:	280a      	cmp	r0, #10
    86f8:	d94b      	bls.n	8792 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    86fa:	f10b 000a 	add.w	r0, fp, #10
    86fe:	f00a fd04 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8702:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8706:	2800      	cmp	r0, #0
    8708:	d045      	beq.n	8796 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    870a:	4658      	mov	r0, fp
    870c:	f00a fcf1 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8710:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    8712:	2800      	cmp	r0, #0
    8714:	f43f af4d 	beq.w	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8718:	6800      	ldr	r0, [r0, #0]
    871a:	f009 faa4 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    871e:	2800      	cmp	r0, #0
    8720:	f43f af47 	beq.w	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    8724:	6820      	ldr	r0, [r4, #0]
    8726:	f009 fa9e 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    872a:	b3b0      	cbz	r0, 879a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    872c:	6860      	ldr	r0, [r4, #4]
    872e:	f00a fdbb 	bl	132a8 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    8732:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8734:	4650      	mov	r0, sl
    8736:	f00a fce2 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    873a:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    873e:	4620      	mov	r0, r4
    8740:	f00a fce3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8744:	280a      	cmp	r0, #10
    8746:	d92f      	bls.n	87a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    8748:	f104 000a 	add.w	r0, r4, #10
    874c:	f00a fcdd 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8750:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8754:	b350      	cbz	r0, 87ac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    8756:	4620      	mov	r0, r4
    8758:	f00a fccb 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    875c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    875e:	6820      	ldr	r0, [r4, #0]
    8760:	f009 fa81 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8764:	b320      	cbz	r0, 87b0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8766:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    876a:	f00a fd9c 	bl	132a6 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    876e:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8770:	4650      	mov	r0, sl
    8772:	f00a fcc4 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8776:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    877a:	4620      	mov	r0, r4
    877c:	f00a fcc5 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8780:	2808      	cmp	r0, #8
    8782:	d91c      	bls.n	87be <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    8784:	f104 0008 	add.w	r0, r4, #8
    8788:	f00a fcbf 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    878c:	e018      	b.n	87c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    878e:	2400      	movs	r4, #0
    8790:	e7a0      	b.n	86d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8792:	2000      	movs	r0, #0
    8794:	e7b5      	b.n	8702 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8796:	2000      	movs	r0, #0
    8798:	e7bb      	b.n	8712 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    879a:	4b6c      	ldr	r3, [pc, #432]	; (894c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    879c:	4a6c      	ldr	r2, [pc, #432]	; (8950 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    879e:	f44f 7183 	mov.w	r1, #262	; 0x106
    87a2:	486c      	ldr	r0, [pc, #432]	; (8954 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    87a4:	f008 f80c 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87a8:	2000      	movs	r0, #0
    87aa:	e7d1      	b.n	8750 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87ac:	2400      	movs	r4, #0
    87ae:	e7d6      	b.n	875e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    87b0:	4b66      	ldr	r3, [pc, #408]	; (894c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    87b2:	4a69      	ldr	r2, [pc, #420]	; (8958 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    87b4:	f44f 7183 	mov.w	r1, #262	; 0x106
    87b8:	4866      	ldr	r0, [pc, #408]	; (8954 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    87ba:	f008 f801 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87be:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    87c0:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87c4:	b390      	cbz	r0, 882c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    87c6:	4620      	mov	r0, r4
    87c8:	f00a fc93 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87cc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    87ce:	6820      	ldr	r0, [r4, #0]
    87d0:	f009 fa49 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    87d4:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    87d6:	f1b8 0f00 	cmp.w	r8, #0
    87da:	d029      	beq.n	8830 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    87dc:	683b      	ldr	r3, [r7, #0]
    87de:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    87e0:	2204      	movs	r2, #4
    87e2:	210c      	movs	r1, #12
    87e4:	4638      	mov	r0, r7
    87e6:	4798      	blx	r3
    87e8:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    87ea:	f1bb 0f00 	cmp.w	fp, #0
    87ee:	d027      	beq.n	8840 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    87f0:	f1b8 0f00 	cmp.w	r8, #0
    87f4:	d02a      	beq.n	884c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    87f6:	683b      	ldr	r3, [r7, #0]
    87f8:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    87fa:	4620      	mov	r0, r4
    87fc:	f00b f91e 	bl	13a3c <TfLiteIntArrayGetSizeInBytes>
    8800:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8802:	2204      	movs	r2, #4
    8804:	4638      	mov	r0, r7
    8806:	47b0      	blx	r6
    quantization->zero_point =
    8808:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    880c:	b340      	cbz	r0, 8860 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    880e:	4650      	mov	r0, sl
    8810:	f00a fc75 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8814:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8818:	4630      	mov	r0, r6
    881a:	f00a fc76 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    881e:	2808      	cmp	r0, #8
    8820:	d924      	bls.n	886c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    8822:	f106 0008 	add.w	r0, r6, #8
    8826:	f00a fc70 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    882a:	e020      	b.n	886e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    882c:	2400      	movs	r4, #0
    882e:	e7ce      	b.n	87ce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    8830:	683b      	ldr	r3, [r7, #0]
    8832:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    8834:	2204      	movs	r2, #4
    8836:	210c      	movs	r1, #12
    8838:	4638      	mov	r0, r7
    883a:	4798      	blx	r3
    883c:	4683      	mov	fp, r0
    883e:	e7d4      	b.n	87ea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    8840:	4946      	ldr	r1, [pc, #280]	; (895c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    8842:	4648      	mov	r0, r9
    8844:	f00b f99e 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8848:	2601      	movs	r6, #1
    884a:	e6b2      	b.n	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    884c:	683b      	ldr	r3, [r7, #0]
    884e:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8850:	4620      	mov	r0, r4
    8852:	f00b f8f3 	bl	13a3c <TfLiteIntArrayGetSizeInBytes>
    8856:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8858:	2204      	movs	r2, #4
    885a:	4638      	mov	r0, r7
    885c:	47b0      	blx	r6
    885e:	e7d3      	b.n	8808 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8860:	493f      	ldr	r1, [pc, #252]	; (8960 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    8862:	4648      	mov	r0, r9
    8864:	f00b f98e 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8868:	2601      	movs	r6, #1
    886a:	e6a2      	b.n	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    886c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    886e:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8872:	b1b0      	cbz	r0, 88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    8874:	4630      	mov	r0, r6
    8876:	f00a fc3c 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    887a:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    887c:	465b      	mov	r3, fp
    887e:	4649      	mov	r1, r9
    8880:	4638      	mov	r0, r7
    8882:	f00a ff5b 	bl	1373c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8886:	4606      	mov	r6, r0
    8888:	2800      	cmp	r0, #0
    888a:	f47f ae92 	bne.w	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    888e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8892:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    8894:	f8db 3004 	ldr.w	r3, [fp, #4]
    8898:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    889c:	f04f 0800 	mov.w	r8, #0
    88a0:	e019      	b.n	88d6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    88a2:	2200      	movs	r2, #0
    88a4:	e7ea      	b.n	887c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88a6:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    88a8:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88ac:	b320      	cbz	r0, 88f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    88ae:	4638      	mov	r0, r7
    88b0:	f00a fc1f 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88b4:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    88b6:	6838      	ldr	r0, [r7, #0]
    88b8:	f009 f9d5 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    88bc:	4580      	cmp	r8, r0
    88be:	d21d      	bcs.n	88fc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    88c0:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    88c2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    88c6:	e9d7 0100 	ldrd	r0, r1, [r7]
    88ca:	f00a fcec 	bl	132a6 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    88ce:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    88d2:	f108 0801 	add.w	r8, r8, #1
    88d6:	45a0      	cmp	r8, r4
    88d8:	da17      	bge.n	890a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    88da:	4650      	mov	r0, sl
    88dc:	f00a fc0f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    88e0:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    88e4:	4638      	mov	r0, r7
    88e6:	f00a fc10 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88ea:	280a      	cmp	r0, #10
    88ec:	d9db      	bls.n	88a6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    88ee:	f107 000a 	add.w	r0, r7, #10
    88f2:	f00a fc0a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    88f6:	e7d7      	b.n	88a8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88f8:	2700      	movs	r7, #0
    88fa:	e7dc      	b.n	88b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    88fc:	4b13      	ldr	r3, [pc, #76]	; (894c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    88fe:	4a16      	ldr	r2, [pc, #88]	; (8958 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8900:	f44f 7183 	mov.w	r1, #262	; 0x106
    8904:	4813      	ldr	r0, [pc, #76]	; (8954 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8906:	f007 ff5b 	bl	107c0 <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    890a:	4650      	mov	r0, sl
    890c:	f00a fbf7 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8910:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8914:	4620      	mov	r0, r4
    8916:	f00a fbf8 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    891a:	2810      	cmp	r0, #16
    891c:	d90f      	bls.n	893e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    891e:	f104 0010 	add.w	r0, r4, #16
    8922:	f00a fbf2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8926:	b160      	cbz	r0, 8942 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    8928:	4450      	add	r0, sl
    892a:	f00a fbe8 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    892e:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    8932:	2301      	movs	r3, #1
    8934:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    8938:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    893c:	e639      	b.n	85b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    893e:	2000      	movs	r0, #0
    8940:	e7f1      	b.n	8926 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8942:	2000      	movs	r0, #0
    8944:	e7f3      	b.n	892e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    8946:	bf00      	nop
    8948:	0006a92c 	.word	0x0006a92c
    894c:	00068ff8 	.word	0x00068ff8
    8950:	0006a688 	.word	0x0006a688
    8954:	000690c4 	.word	0x000690c4
    8958:	000693d4 	.word	0x000693d4
    895c:	0006a74c 	.word	0x0006a74c
    8960:	0006a77c 	.word	0x0006a77c

00008964 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    8964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8968:	b082      	sub	sp, #8
    896a:	4607      	mov	r7, r0
    896c:	460e      	mov	r6, r1
    896e:	4690      	mov	r8, r2
    8970:	469a      	mov	sl, r3
    8972:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8974:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8978:	4608      	mov	r0, r1
    897a:	f00a fbc0 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    897e:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8980:	4628      	mov	r0, r5
    8982:	f00a fbc2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8986:	2808      	cmp	r0, #8
    8988:	d941      	bls.n	8a0e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    898a:	f105 0008 	add.w	r0, r5, #8
    898e:	f00a fbbc 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8992:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8994:	b3e8      	cbz	r0, 8a12 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    8996:	4628      	mov	r0, r5
    8998:	f00a fbab 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    899c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    899e:	6828      	ldr	r0, [r5, #0]
    89a0:	f009 f961 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    89a4:	4284      	cmp	r4, r0
    89a6:	d236      	bcs.n	8a16 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    89a8:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    89aa:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    89ae:	4620      	mov	r0, r4
    89b0:	f00a fb9f 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89b4:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    89b6:	4620      	mov	r0, r4
    89b8:	f00a fba1 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    89bc:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    89be:	4628      	mov	r0, r5
    89c0:	f00a fba3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89c4:	2804      	cmp	r0, #4
    89c6:	d92d      	bls.n	8a24 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    89c8:	1d28      	adds	r0, r5, #4
    89ca:	f00a fb9e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    89ce:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89d0:	b350      	cbz	r0, 8a28 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    89d2:	4620      	mov	r0, r4
    89d4:	f00a fb8d 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89d8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    89da:	6820      	ldr	r0, [r4, #0]
    89dc:	f009 f943 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    89e0:	4582      	cmp	sl, r0
    89e2:	d223      	bcs.n	8a2c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    89e4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    89e6:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    89ea:	4620      	mov	r0, r4
    89ec:	f00a fb81 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89f0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    89f2:	4630      	mov	r0, r6
    89f4:	f00a fb83 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    89f8:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    89fa:	4628      	mov	r0, r5
    89fc:	f00a fb85 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a00:	280c      	cmp	r0, #12
    8a02:	d91a      	bls.n	8a3a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    8a04:	f105 000c 	add.w	r0, r5, #12
    8a08:	f00a fb7f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8a0c:	e016      	b.n	8a3c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    8a0e:	2000      	movs	r0, #0
    8a10:	e7bf      	b.n	8992 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a12:	2500      	movs	r5, #0
    8a14:	e7c3      	b.n	899e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8a16:	4b14      	ldr	r3, [pc, #80]	; (8a68 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8a18:	4a14      	ldr	r2, [pc, #80]	; (8a6c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    8a1a:	f44f 7183 	mov.w	r1, #262	; 0x106
    8a1e:	4814      	ldr	r0, [pc, #80]	; (8a70 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8a20:	f007 fece 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a24:	2000      	movs	r0, #0
    8a26:	e7d2      	b.n	89ce <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a28:	2400      	movs	r4, #0
    8a2a:	e7d6      	b.n	89da <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    8a2c:	4b0e      	ldr	r3, [pc, #56]	; (8a68 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8a2e:	4a11      	ldr	r2, [pc, #68]	; (8a74 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    8a30:	f44f 7183 	mov.w	r1, #262	; 0x106
    8a34:	480e      	ldr	r0, [pc, #56]	; (8a70 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8a36:	f007 fec3 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a3a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8a3c:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a3e:	b180      	cbz	r0, 8a62 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8a40:	4630      	mov	r0, r6
    8a42:	f00a fb56 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a46:	1833      	adds	r3, r6, r0
    8a48:	f8cd 8004 	str.w	r8, [sp, #4]
    8a4c:	68fa      	ldr	r2, [r7, #12]
    8a4e:	9200      	str	r2, [sp, #0]
    8a50:	4622      	mov	r2, r4
    8a52:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    8a56:	4648      	mov	r0, r9
    8a58:	f7ff fd84 	bl	8564 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    8a5c:	b002      	add	sp, #8
    8a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a62:	2300      	movs	r3, #0
    8a64:	e7f0      	b.n	8a48 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    8a66:	bf00      	nop
    8a68:	00068ff8 	.word	0x00068ff8
    8a6c:	00069148 	.word	0x00069148
    8a70:	000690c4 	.word	0x000690c4
    8a74:	000692e0 	.word	0x000692e0

00008a78 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a7c:	4680      	mov	r8, r0
    8a7e:	460c      	mov	r4, r1
    8a80:	4691      	mov	r9, r2
    8a82:	461f      	mov	r7, r3
    8a84:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    8a86:	2300      	movs	r3, #0
    8a88:	602b      	str	r3, [r5, #0]
    8a8a:	606b      	str	r3, [r5, #4]
    8a8c:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8a8e:	4608      	mov	r0, r1
    8a90:	f00a fb35 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a94:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a96:	4630      	mov	r0, r6
    8a98:	f00a fb37 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a9c:	2806      	cmp	r0, #6
    8a9e:	d911      	bls.n	8ac4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    8aa0:	1db0      	adds	r0, r6, #6
    8aa2:	f00a fb32 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8aa6:	b178      	cbz	r0, 8ac8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    8aa8:	4420      	add	r0, r4
    8aaa:	f00a fb34 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8aae:	463a      	mov	r2, r7
    8ab0:	f105 0108 	add.w	r1, r5, #8
    8ab4:	b2c0      	uxtb	r0, r0
    8ab6:	f000 fe0b 	bl	96d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8aba:	4606      	mov	r6, r0
    8abc:	b130      	cbz	r0, 8acc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    8abe:	4630      	mov	r0, r6
    8ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ac4:	2000      	movs	r0, #0
    8ac6:	e7ee      	b.n	8aa6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8ac8:	2000      	movs	r0, #0
    8aca:	e7f0      	b.n	8aae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8acc:	4649      	mov	r1, r9
    8ace:	4620      	mov	r0, r4
    8ad0:	f7ff f882 	bl	7bd8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    8ad4:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    8ad6:	4620      	mov	r0, r4
    8ad8:	f00a fb11 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8adc:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8ae0:	4648      	mov	r0, r9
    8ae2:	f00a fb12 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ae6:	2804      	cmp	r0, #4
    8ae8:	d911      	bls.n	8b0e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    8aea:	f109 0004 	add.w	r0, r9, #4
    8aee:	f00a fb0c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8af2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8af4:	b168      	cbz	r0, 8b12 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    8af6:	4620      	mov	r0, r4
    8af8:	f00a fafb 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8afc:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8afe:	b152      	cbz	r2, 8b16 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8b00:	1d2b      	adds	r3, r5, #4
    8b02:	4639      	mov	r1, r7
    8b04:	4640      	mov	r0, r8
    8b06:	f00a fe07 	bl	13718 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8b0a:	4606      	mov	r6, r0
    8b0c:	e7d7      	b.n	8abe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b0e:	2000      	movs	r0, #0
    8b10:	e7ef      	b.n	8af2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b12:	2200      	movs	r2, #0
    8b14:	e7f3      	b.n	8afe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8b16:	4b01      	ldr	r3, [pc, #4]	; (8b1c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    8b18:	606b      	str	r3, [r5, #4]
    8b1a:	e7d0      	b.n	8abe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    8b1c:	0006a92c 	.word	0x0006a92c

00008b20 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    8b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b24:	b087      	sub	sp, #28
    8b26:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8b28:	9205      	str	r2, [sp, #20]
    8b2a:	b192      	cbz	r2, 8b52 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    8b2c:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8b2e:	2300      	movs	r3, #0
    8b30:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    8b32:	9c04      	ldr	r4, [sp, #16]
    8b34:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8b36:	4620      	mov	r0, r4
    8b38:	f00a fae1 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b3c:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b3e:	4620      	mov	r0, r4
    8b40:	f00a fae3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b44:	2808      	cmp	r0, #8
    8b46:	d906      	bls.n	8b56 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8b48:	f104 0008 	add.w	r0, r4, #8
    8b4c:	f00a fadd 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8b50:	e002      	b.n	8b58 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8b52:	f00d fa37 	bl	15fc4 <abort>
    8b56:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8b58:	9b04      	ldr	r3, [sp, #16]
    8b5a:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b5c:	2800      	cmp	r0, #0
    8b5e:	d03d      	beq.n	8bdc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8b60:	4620      	mov	r0, r4
    8b62:	f00a fac6 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b66:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8b68:	6820      	ldr	r0, [r4, #0]
    8b6a:	f009 f87c 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8b6e:	9d03      	ldr	r5, [sp, #12]
    8b70:	4285      	cmp	r5, r0
    8b72:	f080 80b3 	bcs.w	8cdc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    8b76:	6820      	ldr	r0, [r4, #0]
    8b78:	f009 f875 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8b7c:	4285      	cmp	r5, r0
    8b7e:	d22f      	bcs.n	8be0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8b80:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8b82:	9b03      	ldr	r3, [sp, #12]
    8b84:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8b88:	4620      	mov	r0, r4
    8b8a:	f00a fab2 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    8b8e:	1824      	adds	r4, r4, r0
    8b90:	d02d      	beq.n	8bee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    8b92:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8b94:	4620      	mov	r0, r4
    8b96:	f00a fab2 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b9a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b9c:	4628      	mov	r0, r5
    8b9e:	f00a fab4 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ba2:	2804      	cmp	r0, #4
    8ba4:	d925      	bls.n	8bf2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    8ba6:	1d28      	adds	r0, r5, #4
    8ba8:	f00a faaf 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8bac:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bae:	b310      	cbz	r0, 8bf6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    8bb0:	4620      	mov	r0, r4
    8bb2:	f00a fa9e 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8bb6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8bb8:	6820      	ldr	r0, [r4, #0]
    8bba:	f009 f854 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8bbe:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8bc0:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    8bc4:	6803      	ldr	r3, [r0, #0]
    8bc6:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8bc8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8bcc:	0089      	lsls	r1, r1, #2
    8bce:	460c      	mov	r4, r1
    8bd0:	2204      	movs	r2, #4
    8bd2:	4798      	blx	r3
    if (tensors == nullptr) {
    8bd4:	9002      	str	r0, [sp, #8]
    8bd6:	b180      	cbz	r0, 8bfa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    8bd8:	2500      	movs	r5, #0
    8bda:	e038      	b.n	8c4e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bdc:	2400      	movs	r4, #0
    8bde:	e7c3      	b.n	8b68 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    8be0:	4b3f      	ldr	r3, [pc, #252]	; (8ce0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8be2:	4a40      	ldr	r2, [pc, #256]	; (8ce4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    8be4:	f44f 7183 	mov.w	r1, #262	; 0x106
    8be8:	483f      	ldr	r0, [pc, #252]	; (8ce8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8bea:	f007 fde9 	bl	107c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    8bee:	f00d f9e9 	bl	15fc4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bf2:	2000      	movs	r0, #0
    8bf4:	e7da      	b.n	8bac <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bf6:	2400      	movs	r4, #0
    8bf8:	e7de      	b.n	8bb8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    8bfa:	4622      	mov	r2, r4
    8bfc:	493b      	ldr	r1, [pc, #236]	; (8cec <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    8bfe:	f8db 000c 	ldr.w	r0, [fp, #12]
    8c02:	f00a ffbf 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8c06:	2001      	movs	r0, #1
    8c08:	e05c      	b.n	8cc4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c0a:	2000      	movs	r0, #0
    8c0c:	e02f      	b.n	8c6e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c0e:	2400      	movs	r4, #0
    8c10:	e034      	b.n	8c7c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    8c12:	4b33      	ldr	r3, [pc, #204]	; (8ce0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8c14:	4a36      	ldr	r2, [pc, #216]	; (8cf0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    8c16:	f44f 7183 	mov.w	r1, #262	; 0x106
    8c1a:	4833      	ldr	r0, [pc, #204]	; (8ce8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8c1c:	f007 fdd0 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c20:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8c22:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c26:	2800      	cmp	r0, #0
    8c28:	d043      	beq.n	8cb2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    8c2a:	4630      	mov	r0, r6
    8c2c:	f00a fa61 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c30:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    8c32:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8c36:	9902      	ldr	r1, [sp, #8]
    8c38:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8c3c:	9300      	str	r3, [sp, #0]
    8c3e:	f8db 300c 	ldr.w	r3, [fp, #12]
    8c42:	4621      	mov	r1, r4
    8c44:	4648      	mov	r0, r9
    8c46:	f7ff ff17 	bl	8a78 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    8c4a:	bba0      	cbnz	r0, 8cb6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    8c4c:	3501      	adds	r5, #1
    8c4e:	4555      	cmp	r5, sl
    8c50:	d23b      	bcs.n	8cca <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8c52:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8c56:	4638      	mov	r0, r7
    8c58:	f00a fa51 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c5c:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c5e:	4620      	mov	r0, r4
    8c60:	f00a fa53 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c64:	2804      	cmp	r0, #4
    8c66:	d9d0      	bls.n	8c0a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    8c68:	1d20      	adds	r0, r4, #4
    8c6a:	f00a fa4e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8c6e:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c70:	2800      	cmp	r0, #0
    8c72:	d0cc      	beq.n	8c0e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    8c74:	4620      	mov	r0, r4
    8c76:	f00a fa3c 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c7a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8c7c:	6820      	ldr	r0, [r4, #0]
    8c7e:	f008 fff2 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8c82:	4285      	cmp	r5, r0
    8c84:	d2c5      	bcs.n	8c12 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c86:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8c88:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8c8c:	4620      	mov	r0, r4
    8c8e:	f00a fa30 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c92:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8c94:	4640      	mov	r0, r8
    8c96:	f00a fa32 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c9a:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c9e:	4630      	mov	r0, r6
    8ca0:	f00a fa33 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ca4:	280c      	cmp	r0, #12
    8ca6:	d9bb      	bls.n	8c20 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    8ca8:	f106 000c 	add.w	r0, r6, #12
    8cac:	f00a fa2d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8cb0:	e7b7      	b.n	8c22 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8cb2:	2200      	movs	r2, #0
    8cb4:	e7bd      	b.n	8c32 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    8cb6:	462a      	mov	r2, r5
    8cb8:	490e      	ldr	r1, [pc, #56]	; (8cf4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    8cba:	f8db 000c 	ldr.w	r0, [fp, #12]
    8cbe:	f00a ff61 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    8cc2:	2001      	movs	r0, #1
}
    8cc4:	b007      	add	sp, #28
    8cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    8cca:	9b05      	ldr	r3, [sp, #20]
    8ccc:	9a03      	ldr	r2, [sp, #12]
    8cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8cd2:	9902      	ldr	r1, [sp, #8]
    8cd4:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8cd6:	1c53      	adds	r3, r2, #1
    8cd8:	9303      	str	r3, [sp, #12]
    8cda:	e72a      	b.n	8b32 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    8cdc:	2000      	movs	r0, #0
    8cde:	e7f1      	b.n	8cc4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    8ce0:	00068ff8 	.word	0x00068ff8
    8ce4:	00069148 	.word	0x00069148
    8ce8:	000690c4 	.word	0x000690c4
    8cec:	0006a7ac 	.word	0x0006a7ac
    8cf0:	000692e0 	.word	0x000692e0
    8cf4:	0006a7f4 	.word	0x0006a7f4

00008cf8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    8cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cfc:	b093      	sub	sp, #76	; 0x4c
    8cfe:	4606      	mov	r6, r0
    8d00:	460f      	mov	r7, r1
    8d02:	4690      	mov	r8, r2
    8d04:	4699      	mov	r9, r3
    8d06:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8d0a:	4608      	mov	r0, r1
    8d0c:	f00a f9f7 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d10:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d12:	4620      	mov	r0, r4
    8d14:	f00a f9f9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d18:	2808      	cmp	r0, #8
    8d1a:	d948      	bls.n	8dae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    8d1c:	f104 0008 	add.w	r0, r4, #8
    8d20:	f00a f9f3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d24:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d26:	2800      	cmp	r0, #0
    8d28:	d043      	beq.n	8db2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    8d2a:	4620      	mov	r0, r4
    8d2c:	f00a f9e1 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d30:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d32:	6820      	ldr	r0, [r4, #0]
    8d34:	f008 ff97 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8d38:	4582      	cmp	sl, r0
    8d3a:	d23c      	bcs.n	8db6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8d3c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8d3e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8d42:	4620      	mov	r0, r4
    8d44:	f00a f9d5 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d48:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8d4a:	4620      	mov	r0, r4
    8d4c:	f00a f9d7 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d50:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d52:	4628      	mov	r0, r5
    8d54:	f00a f9d9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d58:	2804      	cmp	r0, #4
    8d5a:	d933      	bls.n	8dc4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    8d5c:	1d28      	adds	r0, r5, #4
    8d5e:	f00a f9d4 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d62:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d64:	b380      	cbz	r0, 8dc8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    8d66:	4628      	mov	r0, r5
    8d68:	f00a f9c3 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d6c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d6e:	6828      	ldr	r0, [r5, #0]
    8d70:	f008 ff79 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    8d74:	6973      	ldr	r3, [r6, #20]
    8d76:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    8d78:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    8d7c:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    8d80:	6870      	ldr	r0, [r6, #4]
    8d82:	6803      	ldr	r3, [r0, #0]
    8d84:	691b      	ldr	r3, [r3, #16]
    8d86:	2204      	movs	r2, #4
    8d88:	4651      	mov	r1, sl
    8d8a:	4798      	blx	r3
  if (allocation_info == nullptr) {
    8d8c:	4683      	mov	fp, r0
    8d8e:	b1e8      	cbz	r0, 8dcc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    8d90:	4620      	mov	r0, r4
    8d92:	f00a f9b4 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d96:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d9a:	4650      	mov	r0, sl
    8d9c:	f00a f9b5 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8da0:	2804      	cmp	r0, #4
    8da2:	d91a      	bls.n	8dda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    8da4:	f10a 0004 	add.w	r0, sl, #4
    8da8:	f00a f9af 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8dac:	e016      	b.n	8ddc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    8dae:	2000      	movs	r0, #0
    8db0:	e7b8      	b.n	8d24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8db2:	2400      	movs	r4, #0
    8db4:	e7bd      	b.n	8d32 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8db6:	4b55      	ldr	r3, [pc, #340]	; (8f0c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    8db8:	4a55      	ldr	r2, [pc, #340]	; (8f10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    8dba:	f44f 7183 	mov.w	r1, #262	; 0x106
    8dbe:	4855      	ldr	r0, [pc, #340]	; (8f14 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    8dc0:	f007 fcfe 	bl	107c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dc4:	2000      	movs	r0, #0
    8dc6:	e7cc      	b.n	8d62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dc8:	2500      	movs	r5, #0
    8dca:	e7d0      	b.n	8d6e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    8dcc:	4652      	mov	r2, sl
    8dce:	4952      	ldr	r1, [pc, #328]	; (8f18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    8dd0:	68f0      	ldr	r0, [r6, #12]
    8dd2:	f00a fed7 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    8dd6:	2701      	movs	r7, #1
    8dd8:	e01b      	b.n	8e12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dda:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8ddc:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8de0:	b1d8      	cbz	r0, 8e1a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    8de2:	4650      	mov	r0, sl
    8de4:	f00a f985 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8de8:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8dea:	f8da 0000 	ldr.w	r0, [sl]
    8dee:	f008 ff3a 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    8df2:	6972      	ldr	r2, [r6, #20]
    8df4:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    8df6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    8dfa:	900f      	str	r0, [sp, #60]	; 0x3c
    8dfc:	9210      	str	r2, [sp, #64]	; 0x40
    8dfe:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    8e00:	2300      	movs	r3, #0
    8e02:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    8e04:	aa0d      	add	r2, sp, #52	; 0x34
    8e06:	4639      	mov	r1, r7
    8e08:	a80e      	add	r0, sp, #56	; 0x38
    8e0a:	f7ff f813 	bl	7e34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    8e0e:	4607      	mov	r7, r0
    8e10:	b130      	cbz	r0, 8e20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    8e12:	4638      	mov	r0, r7
    8e14:	b013      	add	sp, #76	; 0x4c
    8e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e1a:	f04f 0a00 	mov.w	sl, #0
    8e1e:	e7e4      	b.n	8dea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    8e20:	4643      	mov	r3, r8
    8e22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8e24:	4621      	mov	r1, r4
    8e26:	a80e      	add	r0, sp, #56	; 0x38
    8e28:	f7ff f9de 	bl	81e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    8e2c:	4607      	mov	r7, r0
    8e2e:	2800      	cmp	r0, #0
    8e30:	d1ef      	bne.n	8e12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    8e32:	4630      	mov	r0, r6
    8e34:	f00a fc47 	bl	136c6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    8e38:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    8e3a:	464a      	mov	r2, r9
    8e3c:	a80e      	add	r0, sp, #56	; 0x38
    8e3e:	f00a fb51 	bl	134e4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    8e42:	4607      	mov	r7, r0
    8e44:	2800      	cmp	r0, #0
    8e46:	d1e4      	bne.n	8e12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8e48:	2110      	movs	r1, #16
    8e4a:	6870      	ldr	r0, [r6, #4]
    8e4c:	f00a f8b1 	bl	12fb2 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    8e50:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    8e52:	6870      	ldr	r0, [r6, #4]
    8e54:	6803      	ldr	r3, [r0, #0]
    8e56:	691b      	ldr	r3, [r3, #16]
    8e58:	2210      	movs	r2, #16
    8e5a:	4621      	mov	r1, r4
    8e5c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8e5e:	4601      	mov	r1, r0
    8e60:	2800      	cmp	r0, #0
    8e62:	d036      	beq.n	8ed2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8e64:	4622      	mov	r2, r4
    8e66:	a802      	add	r0, sp, #8
    8e68:	f000 f882 	bl	8f70 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    8e6c:	462b      	mov	r3, r5
    8e6e:	465a      	mov	r2, fp
    8e70:	a902      	add	r1, sp, #8
    8e72:	68f0      	ldr	r0, [r6, #12]
    8e74:	f00a fbbd 	bl	135f2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    8e78:	4607      	mov	r7, r0
    8e7a:	2800      	cmp	r0, #0
    8e7c:	d141      	bne.n	8f02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    8e7e:	6870      	ldr	r0, [r6, #4]
    8e80:	6803      	ldr	r3, [r0, #0]
    8e82:	695b      	ldr	r3, [r3, #20]
    8e84:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    8e86:	2110      	movs	r1, #16
    8e88:	6870      	ldr	r0, [r6, #4]
    8e8a:	f00a f892 	bl	12fb2 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    8e8e:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    8e90:	a802      	add	r0, sp, #8
    8e92:	f00a fdb0 	bl	139f6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    8e96:	42a0      	cmp	r0, r4
    8e98:	d828      	bhi.n	8eec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    8e9a:	68f4      	ldr	r4, [r6, #12]
    8e9c:	6870      	ldr	r0, [r6, #4]
    8e9e:	f00a f886 	bl	12fae <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    8ea2:	4602      	mov	r2, r0
    8ea4:	9500      	str	r5, [sp, #0]
    8ea6:	465b      	mov	r3, fp
    8ea8:	a902      	add	r1, sp, #8
    8eaa:	4620      	mov	r0, r4
    8eac:	f00a fb3e 	bl	1352c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    8eb0:	4607      	mov	r7, r0
    8eb2:	bb30      	cbnz	r0, 8f02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    8eb4:	a802      	add	r0, sp, #8
    8eb6:	f00a fd9e 	bl	139f6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    8eba:	69b3      	ldr	r3, [r6, #24]
    8ebc:	4283      	cmp	r3, r0
    8ebe:	d200      	bcs.n	8ec2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    8ec0:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    8ec2:	6870      	ldr	r0, [r6, #4]
    8ec4:	6803      	ldr	r3, [r0, #0]
    8ec6:	689b      	ldr	r3, [r3, #8]
    8ec8:	2210      	movs	r2, #16
    8eca:	69b1      	ldr	r1, [r6, #24]
    8ecc:	4798      	blx	r3
    8ece:	4607      	mov	r7, r0
    8ed0:	e017      	b.n	8f02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    8ed2:	68f0      	ldr	r0, [r6, #12]
    8ed4:	4b11      	ldr	r3, [pc, #68]	; (8f1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    8ed6:	9301      	str	r3, [sp, #4]
    8ed8:	f240 33d2 	movw	r3, #978	; 0x3d2
    8edc:	9300      	str	r3, [sp, #0]
    8ede:	4b10      	ldr	r3, [pc, #64]	; (8f20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    8ee0:	4a10      	ldr	r2, [pc, #64]	; (8f24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    8ee2:	4601      	mov	r1, r0
    8ee4:	f00a fe5d 	bl	13ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    8ee8:	2701      	movs	r7, #1
    8eea:	e792      	b.n	8e12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    8eec:	68f5      	ldr	r5, [r6, #12]
    8eee:	a802      	add	r0, sp, #8
    8ef0:	f00a fd81 	bl	139f6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    8ef4:	4602      	mov	r2, r0
    8ef6:	4623      	mov	r3, r4
    8ef8:	490b      	ldr	r1, [pc, #44]	; (8f28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    8efa:	4628      	mov	r0, r5
    8efc:	f00a fe42 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8f00:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    8f02:	a802      	add	r0, sp, #8
    8f04:	f00a fc24 	bl	13750 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    8f08:	e783      	b.n	8e12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    8f0a:	bf00      	nop
    8f0c:	00068ff8 	.word	0x00068ff8
    8f10:	00069148 	.word	0x00069148
    8f14:	000690c4 	.word	0x000690c4
    8f18:	0006a814 	.word	0x0006a814
    8f1c:	0006a8c0 	.word	0x0006a8c0
    8f20:	0006a858 	.word	0x0006a858
    8f24:	0006a8a8 	.word	0x0006a8a8
    8f28:	0006a8dc 	.word	0x0006a8dc

00008f2c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    8f2c:	b538      	push	{r3, r4, r5, lr}
    8f2e:	4604      	mov	r4, r0
    8f30:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    8f32:	68a5      	ldr	r5, [r4, #8]
    8f34:	6861      	ldr	r1, [r4, #4]
    8f36:	428d      	cmp	r5, r1
    8f38:	da12      	bge.n	8f60 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    8f3a:	68e1      	ldr	r1, [r4, #12]
    8f3c:	0128      	lsls	r0, r5, #4
    8f3e:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    8f42:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    8f44:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    8f46:	9b04      	ldr	r3, [sp, #16]
    8f48:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    8f4a:	f04f 33ff 	mov.w	r3, #4294967295
    8f4e:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    8f50:	68a3      	ldr	r3, [r4, #8]
    8f52:	3301      	adds	r3, #1
    8f54:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    8f56:	2301      	movs	r3, #1
    8f58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    8f5c:	2000      	movs	r0, #0
}
    8f5e:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    8f60:	460a      	mov	r2, r1
    8f62:	4902      	ldr	r1, [pc, #8]	; (8f6c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    8f64:	f00a fe0e 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8f68:	2001      	movs	r0, #1
    8f6a:	e7f8      	b.n	8f5e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    8f6c:	0006a99c 	.word	0x0006a99c

00008f70 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    8f70:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    8f72:	4c0f      	ldr	r4, [pc, #60]	; (8fb0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    8f74:	6004      	str	r4, [r0, #0]
    8f76:	2400      	movs	r4, #0
    8f78:	6084      	str	r4, [r0, #8]
    8f7a:	2401      	movs	r4, #1
    8f7c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    8f80:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    8f84:	fba4 4202 	umull	r4, r2, r4, r2
    8f88:	0952      	lsrs	r2, r2, #5
    8f8a:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    8f8c:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    8f8e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    8f92:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    8f94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    8f98:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    8f9a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    8f9e:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    8fa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8fa4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    8fa8:	6241      	str	r1, [r0, #36]	; 0x24
}
    8faa:	bc10      	pop	{r4}
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop
    8fb0:	0006a9f0 	.word	0x0006a9f0

00008fb4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    8fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fb6:	4605      	mov	r5, r0
    8fb8:	460f      	mov	r7, r1
    8fba:	4614      	mov	r4, r2
    8fbc:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    8fbe:	f00a fc3f 	bl	13840 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    8fc2:	2c00      	cmp	r4, #0
    8fc4:	db08      	blt.n	8fd8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    8fc6:	68ab      	ldr	r3, [r5, #8]
    8fc8:	42a3      	cmp	r3, r4
    8fca:	dd05      	ble.n	8fd8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    8fcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8fce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8fd2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    8fd4:	2000      	movs	r0, #0
}
    8fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    8fd8:	68ab      	ldr	r3, [r5, #8]
    8fda:	4622      	mov	r2, r4
    8fdc:	4902      	ldr	r1, [pc, #8]	; (8fe8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    8fde:	4638      	mov	r0, r7
    8fe0:	f00a fdd0 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    8fe4:	2001      	movs	r0, #1
    8fe6:	e7f6      	b.n	8fd6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    8fe8:	0006a9bc 	.word	0x0006a9bc

00008fec <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    8fec:	2810      	cmp	r0, #16
    8fee:	d82a      	bhi.n	9046 <TfLiteTypeGetName+0x5a>
    8ff0:	e8df f000 	tbb	[pc, r0]
    8ff4:	110d2b09 	.word	0x110d2b09
    8ff8:	0b191f15 	.word	0x0b191f15
    8ffc:	2321131b 	.word	0x2321131b
    9000:	2725171d 	.word	0x2725171d
    9004:	0f          	.byte	0x0f
    9005:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    9006:	4812      	ldr	r0, [pc, #72]	; (9050 <TfLiteTypeGetName+0x64>)
    9008:	4770      	bx	lr
      return "INT16";
    900a:	4812      	ldr	r0, [pc, #72]	; (9054 <TfLiteTypeGetName+0x68>)
    900c:	4770      	bx	lr
      return "INT32";
    900e:	4812      	ldr	r0, [pc, #72]	; (9058 <TfLiteTypeGetName+0x6c>)
    9010:	4770      	bx	lr
      return "UINT32";
    9012:	4812      	ldr	r0, [pc, #72]	; (905c <TfLiteTypeGetName+0x70>)
    9014:	4770      	bx	lr
      return "UINT8";
    9016:	4812      	ldr	r0, [pc, #72]	; (9060 <TfLiteTypeGetName+0x74>)
    9018:	4770      	bx	lr
      return "INT8";
    901a:	4812      	ldr	r0, [pc, #72]	; (9064 <TfLiteTypeGetName+0x78>)
    901c:	4770      	bx	lr
      return "INT64";
    901e:	4812      	ldr	r0, [pc, #72]	; (9068 <TfLiteTypeGetName+0x7c>)
    9020:	4770      	bx	lr
      return "UINT64";
    9022:	4812      	ldr	r0, [pc, #72]	; (906c <TfLiteTypeGetName+0x80>)
    9024:	4770      	bx	lr
      return "BOOL";
    9026:	4812      	ldr	r0, [pc, #72]	; (9070 <TfLiteTypeGetName+0x84>)
    9028:	4770      	bx	lr
      return "COMPLEX64";
    902a:	4812      	ldr	r0, [pc, #72]	; (9074 <TfLiteTypeGetName+0x88>)
    902c:	4770      	bx	lr
      return "COMPLEX128";
    902e:	4812      	ldr	r0, [pc, #72]	; (9078 <TfLiteTypeGetName+0x8c>)
    9030:	4770      	bx	lr
      return "STRING";
    9032:	4812      	ldr	r0, [pc, #72]	; (907c <TfLiteTypeGetName+0x90>)
    9034:	4770      	bx	lr
      return "FLOAT16";
    9036:	4812      	ldr	r0, [pc, #72]	; (9080 <TfLiteTypeGetName+0x94>)
    9038:	4770      	bx	lr
      return "FLOAT64";
    903a:	4812      	ldr	r0, [pc, #72]	; (9084 <TfLiteTypeGetName+0x98>)
    903c:	4770      	bx	lr
      return "RESOURCE";
    903e:	4812      	ldr	r0, [pc, #72]	; (9088 <TfLiteTypeGetName+0x9c>)
    9040:	4770      	bx	lr
      return "VARIANT";
    9042:	4812      	ldr	r0, [pc, #72]	; (908c <TfLiteTypeGetName+0xa0>)
    9044:	4770      	bx	lr
  }
  return "Unknown type";
    9046:	4812      	ldr	r0, [pc, #72]	; (9090 <TfLiteTypeGetName+0xa4>)
    9048:	4770      	bx	lr
      return "FLOAT32";
    904a:	4812      	ldr	r0, [pc, #72]	; (9094 <TfLiteTypeGetName+0xa8>)
}
    904c:	4770      	bx	lr
    904e:	bf00      	nop
    9050:	0006aaa4 	.word	0x0006aaa4
    9054:	0006aa20 	.word	0x0006aa20
    9058:	0006aa28 	.word	0x0006aa28
    905c:	0006aa30 	.word	0x0006aa30
    9060:	0006aa38 	.word	0x0006aa38
    9064:	0006aa40 	.word	0x0006aa40
    9068:	0006aa48 	.word	0x0006aa48
    906c:	0006aa50 	.word	0x0006aa50
    9070:	0006aa58 	.word	0x0006aa58
    9074:	0006aa60 	.word	0x0006aa60
    9078:	0006aa6c 	.word	0x0006aa6c
    907c:	0006aa78 	.word	0x0006aa78
    9080:	0006aa80 	.word	0x0006aa80
    9084:	0006aa88 	.word	0x0006aa88
    9088:	0006aa90 	.word	0x0006aa90
    908c:	0006aa9c 	.word	0x0006aa9c
    9090:	0006aa08 	.word	0x0006aa08
    9094:	0006aa18 	.word	0x0006aa18

00009098 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    9098:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    909c:	4606      	mov	r6, r0
    909e:	460f      	mov	r7, r1
    90a0:	4615      	mov	r5, r2
    90a2:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    90a4:	2200      	movs	r2, #0
    90a6:	2300      	movs	r3, #0
    90a8:	f7f7 fc9e 	bl	9e8 <__aeabi_dcmpeq>
    90ac:	b120      	cbz	r0, 90b8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    90ae:	2300      	movs	r3, #0
    90b0:	602b      	str	r3, [r5, #0]
    *shift = 0;
    90b2:	6023      	str	r3, [r4, #0]
}
    90b4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    90b8:	4622      	mov	r2, r4
    90ba:	4630      	mov	r0, r6
    90bc:	4639      	mov	r1, r7
    90be:	f007 f963 	bl	10388 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    90c2:	2200      	movs	r2, #0
    90c4:	4b1a      	ldr	r3, [pc, #104]	; (9130 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    90c6:	f7f7 fa27 	bl	518 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    90ca:	f007 f995 	bl	103f8 <round>
    90ce:	f7f8 f847 	bl	1160 <__aeabi_d2lz>
    90d2:	4606      	mov	r6, r0
    90d4:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    90d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    90da:	2300      	movs	r3, #0
    90dc:	4282      	cmp	r2, r0
    90de:	418b      	sbcs	r3, r1
    90e0:	db12      	blt.n	9108 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    90e2:	2900      	cmp	r1, #0
    90e4:	bf08      	it	eq
    90e6:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    90ea:	d00f      	beq.n	910c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    90ec:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    90f0:	f177 0300 	sbcs.w	r3, r7, #0
    90f4:	da19      	bge.n	912a <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    90f6:	6823      	ldr	r3, [r4, #0]
    90f8:	f113 0f1f 	cmn.w	r3, #31
    90fc:	da02      	bge.n	9104 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    90fe:	2300      	movs	r3, #0
    9100:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    9102:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    9104:	602e      	str	r6, [r5, #0]
    9106:	e7d5      	b.n	90b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    9108:	f00c ff5c 	bl	15fc4 <abort>
    q_fixed /= 2;
    910c:	0fc9      	lsrs	r1, r1, #31
    910e:	eb16 0b01 	adds.w	fp, r6, r1
    9112:	f147 0c00 	adc.w	ip, r7, #0
    9116:	ea4f 025b 	mov.w	r2, fp, lsr #1
    911a:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    911e:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    9122:	6823      	ldr	r3, [r4, #0]
    9124:	3301      	adds	r3, #1
    9126:	6023      	str	r3, [r4, #0]
    9128:	e7e0      	b.n	90ec <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    912a:	f00c ff4b 	bl	15fc4 <abort>
    912e:	bf00      	nop
    9130:	41e00000 	.word	0x41e00000

00009134 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    9134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9136:	4606      	mov	r6, r0
    9138:	460f      	mov	r7, r1
    913a:	4615      	mov	r5, r2
    913c:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    913e:	2200      	movs	r2, #0
    9140:	4b08      	ldr	r3, [pc, #32]	; (9164 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x30>)
    9142:	f7f7 fc79 	bl	a38 <__aeabi_dcmpgt>
    9146:	b148      	cbz	r0, 915c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x28>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    9148:	4623      	mov	r3, r4
    914a:	462a      	mov	r2, r5
    914c:	4630      	mov	r0, r6
    914e:	4639      	mov	r1, r7
    9150:	f7ff ffa2 	bl	9098 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    9154:	6823      	ldr	r3, [r4, #0]
    9156:	2b00      	cmp	r3, #0
    9158:	db02      	blt.n	9160 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>
}
    915a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    915c:	f00c ff32 	bl	15fc4 <abort>
  TFLITE_CHECK_GE(*left_shift, 0);
    9160:	f00c ff30 	bl	15fc4 <abort>
    9164:	3ff00000 	.word	0x3ff00000

00009168 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    9168:	b5f0      	push	{r4, r5, r6, r7, lr}
    916a:	b087      	sub	sp, #28
    916c:	4605      	mov	r5, r0
    916e:	460c      	mov	r4, r1
    9170:	9203      	str	r2, [sp, #12]
    9172:	9302      	str	r3, [sp, #8]
    9174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    9176:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    9178:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    917a:	2901      	cmp	r1, #1
    917c:	d00e      	beq.n	919c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    917e:	2903      	cmp	r1, #3
    9180:	d042      	beq.n	9208 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    9182:	2902      	cmp	r1, #2
    9184:	f000 80a7 	beq.w	92d6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    9188:	9b03      	ldr	r3, [sp, #12]
    918a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    918c:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    918e:	9b02      	ldr	r3, [sp, #8]
    9190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9192:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    9194:	2400      	movs	r4, #0
}
    9196:	4620      	mov	r0, r4
    9198:	b007      	add	sp, #28
    919a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    919c:	4631      	mov	r1, r6
    919e:	2000      	movs	r0, #0
    91a0:	f7f7 fe8e 	bl	ec0 <__aeabi_fdiv>
    91a4:	f7f7 f960 	bl	468 <__aeabi_f2d>
    91a8:	f007 f926 	bl	103f8 <round>
    91ac:	f7f7 fc76 	bl	a9c <__aeabi_d2f>
    91b0:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    91b2:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    91b6:	f7f7 ff81 	bl	10bc <__aeabi_fcmpge>
    91ba:	b160      	cbz	r0, 91d6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    91bc:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    91c0:	4630      	mov	r0, r6
    91c2:	f7f7 ff71 	bl	10a8 <__aeabi_fcmple>
    91c6:	b130      	cbz	r0, 91d6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    91c8:	4630      	mov	r0, r6
    91ca:	f7f7 ff8b 	bl	10e4 <__aeabi_f2iz>
    91ce:	4407      	add	r7, r0
    91d0:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    91d2:	2400      	movs	r4, #0
    91d4:	e008      	b.n	91e8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    91d6:	696e      	ldr	r6, [r5, #20]
    91d8:	4b73      	ldr	r3, [pc, #460]	; (93a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    91da:	9300      	str	r3, [sp, #0]
    91dc:	f240 1359 	movw	r3, #345	; 0x159
    91e0:	4a72      	ldr	r2, [pc, #456]	; (93ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    91e2:	4973      	ldr	r1, [pc, #460]	; (93b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    91e4:	4628      	mov	r0, r5
    91e6:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    91e8:	2c00      	cmp	r4, #0
    91ea:	d1d4      	bne.n	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    91ec:	9a05      	ldr	r2, [sp, #20]
    91ee:	9b03      	ldr	r3, [sp, #12]
    91f0:	429a      	cmp	r2, r3
    91f2:	dc07      	bgt.n	9204 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    91f4:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    91f6:	681b      	ldr	r3, [r3, #0]
    91f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    91fa:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    91fc:	9b02      	ldr	r3, [sp, #8]
    91fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9200:	6013      	str	r3, [r2, #0]
    9202:	e7c8      	b.n	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9204:	ab05      	add	r3, sp, #20
    9206:	e7f6      	b.n	91f6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    9208:	4631      	mov	r1, r6
    920a:	2000      	movs	r0, #0
    920c:	f7f7 fe58 	bl	ec0 <__aeabi_fdiv>
    9210:	f7f7 f92a 	bl	468 <__aeabi_f2d>
    9214:	f007 f8f0 	bl	103f8 <round>
    9218:	f7f7 fc40 	bl	a9c <__aeabi_d2f>
    921c:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    921e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9222:	f7f7 ff4b 	bl	10bc <__aeabi_fcmpge>
    9226:	b160      	cbz	r0, 9242 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    9228:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    922c:	4620      	mov	r0, r4
    922e:	f7f7 ff3b 	bl	10a8 <__aeabi_fcmple>
    9232:	b130      	cbz	r0, 9242 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    9234:	4620      	mov	r0, r4
    9236:	f7f7 ff55 	bl	10e4 <__aeabi_f2iz>
    923a:	4438      	add	r0, r7
    923c:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    923e:	2400      	movs	r4, #0
    9240:	e009      	b.n	9256 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9242:	696c      	ldr	r4, [r5, #20]
    9244:	4b58      	ldr	r3, [pc, #352]	; (93a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9246:	9300      	str	r3, [sp, #0]
    9248:	f240 1359 	movw	r3, #345	; 0x159
    924c:	4a57      	ldr	r2, [pc, #348]	; (93ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    924e:	4958      	ldr	r1, [pc, #352]	; (93b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9250:	4628      	mov	r0, r5
    9252:	47a0      	blx	r4
    9254:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9256:	2c00      	cmp	r4, #0
    9258:	d19d      	bne.n	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    925a:	9a03      	ldr	r2, [sp, #12]
    925c:	9b05      	ldr	r3, [sp, #20]
    925e:	429a      	cmp	r2, r3
    9260:	db1f      	blt.n	92a2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    9262:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9264:	681b      	ldr	r3, [r3, #0]
    9266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9268:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    926a:	4631      	mov	r1, r6
    926c:	4851      	ldr	r0, [pc, #324]	; (93b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    926e:	f7f7 fe27 	bl	ec0 <__aeabi_fdiv>
    9272:	f7f7 f8f9 	bl	468 <__aeabi_f2d>
    9276:	f007 f8bf 	bl	103f8 <round>
    927a:	f7f7 fc0f 	bl	a9c <__aeabi_d2f>
    927e:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9280:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9284:	f7f7 ff1a 	bl	10bc <__aeabi_fcmpge>
    9288:	b168      	cbz	r0, 92a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    928a:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    928e:	4630      	mov	r0, r6
    9290:	f7f7 ff0a 	bl	10a8 <__aeabi_fcmple>
    9294:	b138      	cbz	r0, 92a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    9296:	4630      	mov	r0, r6
    9298:	f7f7 ff24 	bl	10e4 <__aeabi_f2iz>
    929c:	4407      	add	r7, r0
    929e:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    92a0:	e00b      	b.n	92ba <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    92a2:	ab05      	add	r3, sp, #20
    92a4:	e7de      	b.n	9264 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    92a6:	696c      	ldr	r4, [r5, #20]
    92a8:	4b3f      	ldr	r3, [pc, #252]	; (93a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    92aa:	9300      	str	r3, [sp, #0]
    92ac:	f240 1359 	movw	r3, #345	; 0x159
    92b0:	4a3e      	ldr	r2, [pc, #248]	; (93ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    92b2:	493f      	ldr	r1, [pc, #252]	; (93b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    92b4:	4628      	mov	r0, r5
    92b6:	47a0      	blx	r4
    92b8:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    92ba:	2c00      	cmp	r4, #0
    92bc:	f47f af6b 	bne.w	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    92c0:	9a05      	ldr	r2, [sp, #20]
    92c2:	9b02      	ldr	r3, [sp, #8]
    92c4:	429a      	cmp	r2, r3
    92c6:	db04      	blt.n	92d2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    92c8:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    92ca:	681b      	ldr	r3, [r3, #0]
    92cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    92ce:	6013      	str	r3, [r2, #0]
    92d0:	e761      	b.n	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    92d2:	ab05      	add	r3, sp, #20
    92d4:	e7f9      	b.n	92ca <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    92d6:	4631      	mov	r1, r6
    92d8:	4837      	ldr	r0, [pc, #220]	; (93b8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    92da:	f7f7 fdf1 	bl	ec0 <__aeabi_fdiv>
    92de:	f7f7 f8c3 	bl	468 <__aeabi_f2d>
    92e2:	f007 f889 	bl	103f8 <round>
    92e6:	f7f7 fbd9 	bl	a9c <__aeabi_d2f>
    92ea:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    92ec:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    92f0:	f7f7 fee4 	bl	10bc <__aeabi_fcmpge>
    92f4:	b160      	cbz	r0, 9310 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    92f6:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    92fa:	4620      	mov	r0, r4
    92fc:	f7f7 fed4 	bl	10a8 <__aeabi_fcmple>
    9300:	b130      	cbz	r0, 9310 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    9302:	4620      	mov	r0, r4
    9304:	f7f7 feee 	bl	10e4 <__aeabi_f2iz>
    9308:	4438      	add	r0, r7
    930a:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    930c:	2400      	movs	r4, #0
    930e:	e009      	b.n	9324 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9310:	696c      	ldr	r4, [r5, #20]
    9312:	4b25      	ldr	r3, [pc, #148]	; (93a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9314:	9300      	str	r3, [sp, #0]
    9316:	f240 1359 	movw	r3, #345	; 0x159
    931a:	4a24      	ldr	r2, [pc, #144]	; (93ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    931c:	4924      	ldr	r1, [pc, #144]	; (93b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    931e:	4628      	mov	r0, r5
    9320:	47a0      	blx	r4
    9322:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9324:	2c00      	cmp	r4, #0
    9326:	f47f af36 	bne.w	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    932a:	9a03      	ldr	r2, [sp, #12]
    932c:	9b05      	ldr	r3, [sp, #20]
    932e:	429a      	cmp	r2, r3
    9330:	db20      	blt.n	9374 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    9332:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9334:	681b      	ldr	r3, [r3, #0]
    9336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9338:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    933a:	4631      	mov	r1, r6
    933c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    9340:	f7f7 fdbe 	bl	ec0 <__aeabi_fdiv>
    9344:	f7f7 f890 	bl	468 <__aeabi_f2d>
    9348:	f007 f856 	bl	103f8 <round>
    934c:	f7f7 fba6 	bl	a9c <__aeabi_d2f>
    9350:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9352:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9356:	f7f7 feb1 	bl	10bc <__aeabi_fcmpge>
    935a:	b168      	cbz	r0, 9378 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    935c:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    9360:	4630      	mov	r0, r6
    9362:	f7f7 fea1 	bl	10a8 <__aeabi_fcmple>
    9366:	b138      	cbz	r0, 9378 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    9368:	4630      	mov	r0, r6
    936a:	f7f7 febb 	bl	10e4 <__aeabi_f2iz>
    936e:	4407      	add	r7, r0
    9370:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    9372:	e00b      	b.n	938c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    9374:	ab05      	add	r3, sp, #20
    9376:	e7dd      	b.n	9334 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9378:	696c      	ldr	r4, [r5, #20]
    937a:	4b0b      	ldr	r3, [pc, #44]	; (93a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    937c:	9300      	str	r3, [sp, #0]
    937e:	f240 1359 	movw	r3, #345	; 0x159
    9382:	4a0a      	ldr	r2, [pc, #40]	; (93ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9384:	490a      	ldr	r1, [pc, #40]	; (93b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9386:	4628      	mov	r0, r5
    9388:	47a0      	blx	r4
    938a:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    938c:	2c00      	cmp	r4, #0
    938e:	f47f af02 	bne.w	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    9392:	9a05      	ldr	r2, [sp, #20]
    9394:	9b02      	ldr	r3, [sp, #8]
    9396:	429a      	cmp	r2, r3
    9398:	db04      	blt.n	93a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    939a:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    939c:	681b      	ldr	r3, [r3, #0]
    939e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    93a0:	6013      	str	r3, [r2, #0]
    93a2:	e6f8      	b.n	9196 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    93a4:	ab05      	add	r3, sp, #20
    93a6:	e7f9      	b.n	939c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    93a8:	0006aaf8 	.word	0x0006aaf8
    93ac:	0006aaac 	.word	0x0006aaac
    93b0:	0006a8a8 	.word	0x0006a8a8
    93b4:	40c00000 	.word	0x40c00000
    93b8:	bf800000 	.word	0xbf800000

000093bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    93bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93c0:	b082      	sub	sp, #8
    93c2:	4680      	mov	r8, r0
    93c4:	4608      	mov	r0, r1
    93c6:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    93c8:	68d1      	ldr	r1, [r2, #12]
    93ca:	68c0      	ldr	r0, [r0, #12]
    93cc:	f7f7 fcc4 	bl	d58 <__aeabi_fmul>
    93d0:	4604      	mov	r4, r0
  const double input_product_scale =
    93d2:	f7f7 f849 	bl	468 <__aeabi_f2d>
    93d6:	4606      	mov	r6, r0
    93d8:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    93da:	2100      	movs	r1, #0
    93dc:	4620      	mov	r0, r4
    93de:	f7f7 fe6d 	bl	10bc <__aeabi_fcmpge>
    93e2:	b178      	cbz	r0, 9404 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    93e4:	68e8      	ldr	r0, [r5, #12]
    93e6:	f7f7 f83f 	bl	468 <__aeabi_f2d>
    93ea:	4602      	mov	r2, r0
    93ec:	460b      	mov	r3, r1
    93ee:	4630      	mov	r0, r6
    93f0:	4639      	mov	r1, r7
    93f2:	f7f7 f9bb 	bl	76c <__aeabi_ddiv>
    93f6:	9b08      	ldr	r3, [sp, #32]
    93f8:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    93fc:	2000      	movs	r0, #0
}
    93fe:	b002      	add	sp, #8
    9400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    9404:	f8d8 4014 	ldr.w	r4, [r8, #20]
    9408:	4b04      	ldr	r3, [pc, #16]	; (941c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    940a:	9300      	str	r3, [sp, #0]
    940c:	f240 134b 	movw	r3, #331	; 0x14b
    9410:	4a03      	ldr	r2, [pc, #12]	; (9420 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    9412:	4904      	ldr	r1, [pc, #16]	; (9424 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    9414:	4640      	mov	r0, r8
    9416:	47a0      	blx	r4
    9418:	2001      	movs	r0, #1
    941a:	e7f0      	b.n	93fe <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    941c:	0006ab20 	.word	0x0006ab20
    9420:	0006aaac 	.word	0x0006aaac
    9424:	0006a8a8 	.word	0x0006a8a8

00009428 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    9428:	b570      	push	{r4, r5, r6, lr}
    942a:	b084      	sub	sp, #16
    942c:	4614      	mov	r4, r2
    942e:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    9430:	7813      	ldrb	r3, [r2, #0]
    9432:	2b03      	cmp	r3, #3
    9434:	d00d      	beq.n	9452 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    9436:	2b09      	cmp	r3, #9
    9438:	d00e      	beq.n	9458 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    943a:	2b07      	cmp	r3, #7
    943c:	d017      	beq.n	946e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    943e:	6944      	ldr	r4, [r0, #20]
    9440:	4b0d      	ldr	r3, [pc, #52]	; (9478 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    9442:	9300      	str	r3, [sp, #0]
    9444:	f240 1391 	movw	r3, #401	; 0x191
    9448:	4a0c      	ldr	r2, [pc, #48]	; (947c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    944a:	490d      	ldr	r1, [pc, #52]	; (9480 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    944c:	47a0      	blx	r4
    944e:	2001      	movs	r0, #1
    9450:	e00b      	b.n	946a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    9452:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    9454:	2200      	movs	r2, #0
    9456:	e002      	b.n	945e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    9458:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    945a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    945e:	9e08      	ldr	r6, [sp, #32]
    9460:	9602      	str	r6, [sp, #8]
    9462:	9501      	str	r5, [sp, #4]
    9464:	9400      	str	r4, [sp, #0]
    9466:	f7ff fe7f 	bl	9168 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    946a:	b004      	add	sp, #16
    946c:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    946e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    9472:	4a04      	ldr	r2, [pc, #16]	; (9484 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    9474:	e7f3      	b.n	945e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    9476:	bf00      	nop
    9478:	0006ab60 	.word	0x0006ab60
    947c:	0006aaac 	.word	0x0006aaac
    9480:	0006a8a8 	.word	0x0006a8a8
    9484:	ffff8000 	.word	0xffff8000

00009488 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    9488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    948c:	b08d      	sub	sp, #52	; 0x34
    948e:	4604      	mov	r4, r0
    9490:	9304      	str	r3, [sp, #16]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    9492:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
    9496:	2e01      	cmp	r6, #1
    9498:	d010      	beq.n	94bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    949a:	6947      	ldr	r7, [r0, #20]
    949c:	2501      	movs	r5, #1
    949e:	9503      	str	r5, [sp, #12]
    94a0:	9602      	str	r6, [sp, #8]
    94a2:	4b7d      	ldr	r3, [pc, #500]	; (9698 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    94a4:	9301      	str	r3, [sp, #4]
    94a6:	4b7d      	ldr	r3, [pc, #500]	; (969c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
    94a8:	9300      	str	r3, [sp, #0]
    94aa:	23da      	movs	r3, #218	; 0xda
    94ac:	4a7c      	ldr	r2, [pc, #496]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    94ae:	497d      	ldr	r1, [pc, #500]	; (96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    94b0:	47b8      	blx	r7
    94b2:	462e      	mov	r6, r5
}
    94b4:	4630      	mov	r0, r6
    94b6:	b00d      	add	sp, #52	; 0x34
    94b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94bc:	460d      	mov	r5, r1
    94be:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    94c0:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
    94c4:	f1b8 0f01 	cmp.w	r8, #1
    94c8:	d00d      	beq.n	94e6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5e>
    94ca:	6945      	ldr	r5, [r0, #20]
    94cc:	2301      	movs	r3, #1
    94ce:	9303      	str	r3, [sp, #12]
    94d0:	f8cd 8008 	str.w	r8, [sp, #8]
    94d4:	4b70      	ldr	r3, [pc, #448]	; (9698 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    94d6:	9301      	str	r3, [sp, #4]
    94d8:	4b73      	ldr	r3, [pc, #460]	; (96a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    94da:	9300      	str	r3, [sp, #0]
    94dc:	23dc      	movs	r3, #220	; 0xdc
    94de:	4a70      	ldr	r2, [pc, #448]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    94e0:	4970      	ldr	r1, [pc, #448]	; (96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    94e2:	47a8      	blx	r5
    94e4:	e7e6      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const auto* affine_quantization =
    94e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    94e8:	b1b3      	cbz	r3, 9518 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x90>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    94ea:	f8d3 b000 	ldr.w	fp, [r3]
    94ee:	f1bb 0f00 	cmp.w	fp, #0
    94f2:	d01a      	beq.n	952a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa2>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    94f4:	f8db 7000 	ldr.w	r7, [fp]
  if (is_per_channel) {
    94f8:	2f01      	cmp	r7, #1
    94fa:	dd5a      	ble.n	95b2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    TF_LITE_ENSURE(context,
    94fc:	780a      	ldrb	r2, [r1, #0]
    94fe:	2a09      	cmp	r2, #9
    9500:	d01c      	beq.n	953c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    9502:	2a07      	cmp	r2, #7
    9504:	d01a      	beq.n	953c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    9506:	6945      	ldr	r5, [r0, #20]
    9508:	4b68      	ldr	r3, [pc, #416]	; (96ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    950a:	9300      	str	r3, [sp, #0]
    950c:	23ec      	movs	r3, #236	; 0xec
    950e:	4a64      	ldr	r2, [pc, #400]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9510:	4967      	ldr	r1, [pc, #412]	; (96b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9512:	47a8      	blx	r5
    9514:	4646      	mov	r6, r8
    9516:	e7cd      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization);
    9518:	6945      	ldr	r5, [r0, #20]
    951a:	4b66      	ldr	r3, [pc, #408]	; (96b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    951c:	9300      	str	r3, [sp, #0]
    951e:	23e7      	movs	r3, #231	; 0xe7
    9520:	4a5f      	ldr	r2, [pc, #380]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9522:	4963      	ldr	r1, [pc, #396]	; (96b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9524:	47a8      	blx	r5
    9526:	4646      	mov	r6, r8
    9528:	e7c4      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    952a:	6945      	ldr	r5, [r0, #20]
    952c:	4b62      	ldr	r3, [pc, #392]	; (96b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    952e:	9300      	str	r3, [sp, #0]
    9530:	23e8      	movs	r3, #232	; 0xe8
    9532:	4a5b      	ldr	r2, [pc, #364]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9534:	495e      	ldr	r1, [pc, #376]	; (96b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9536:	47a8      	blx	r5
    9538:	4646      	mov	r6, r8
    953a:	e7bb      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    953c:	f89a 2000 	ldrb.w	r2, [sl]
    9540:	2a09      	cmp	r2, #9
    9542:	d00e      	beq.n	9562 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xda>
    9544:	6965      	ldr	r5, [r4, #20]
    9546:	2309      	movs	r3, #9
    9548:	9303      	str	r3, [sp, #12]
    954a:	9202      	str	r2, [sp, #8]
    954c:	4b5b      	ldr	r3, [pc, #364]	; (96bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
    954e:	9301      	str	r3, [sp, #4]
    9550:	4b5b      	ldr	r3, [pc, #364]	; (96c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
    9552:	9300      	str	r3, [sp, #0]
    9554:	23ee      	movs	r3, #238	; 0xee
    9556:	4a52      	ldr	r2, [pc, #328]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9558:	4952      	ldr	r1, [pc, #328]	; (96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    955a:	4620      	mov	r0, r4
    955c:	47a8      	blx	r5
    955e:	4646      	mov	r6, r8
    9560:	e7a8      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    9562:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9564:	4297      	cmp	r7, r2
    9566:	d00d      	beq.n	9584 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    9568:	6965      	ldr	r5, [r4, #20]
    956a:	9203      	str	r2, [sp, #12]
    956c:	9702      	str	r7, [sp, #8]
    956e:	4b55      	ldr	r3, [pc, #340]	; (96c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    9570:	9301      	str	r3, [sp, #4]
    9572:	4b55      	ldr	r3, [pc, #340]	; (96c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
    9574:	9300      	str	r3, [sp, #0]
    9576:	23ef      	movs	r3, #239	; 0xef
    9578:	4a49      	ldr	r2, [pc, #292]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    957a:	494a      	ldr	r1, [pc, #296]	; (96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    957c:	4620      	mov	r0, r4
    957e:	47a8      	blx	r5
    9580:	4646      	mov	r6, r8
    9582:	e797      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(
    9584:	f8da 2008 	ldr.w	r2, [sl, #8]
    9588:	689b      	ldr	r3, [r3, #8]
    958a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    958e:	6853      	ldr	r3, [r2, #4]
    9590:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9592:	4293      	cmp	r3, r2
    9594:	d00d      	beq.n	95b2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    9596:	6965      	ldr	r5, [r4, #20]
    9598:	9303      	str	r3, [sp, #12]
    959a:	9202      	str	r2, [sp, #8]
    959c:	4b4b      	ldr	r3, [pc, #300]	; (96cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
    959e:	9301      	str	r3, [sp, #4]
    95a0:	4b48      	ldr	r3, [pc, #288]	; (96c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    95a2:	9300      	str	r3, [sp, #0]
    95a4:	23f0      	movs	r3, #240	; 0xf0
    95a6:	4a3e      	ldr	r2, [pc, #248]	; (96a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    95a8:	493e      	ldr	r1, [pc, #248]	; (96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    95aa:	4620      	mov	r0, r4
    95ac:	47a8      	blx	r5
    95ae:	4646      	mov	r6, r8
    95b0:	e780      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const float input_scale = input->params.scale;
    95b2:	f8d5 900c 	ldr.w	r9, [r5, #12]
  const float output_scale = output->params.scale;
    95b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    95b8:	f8d3 800c 	ldr.w	r8, [r3, #12]
  const float* filter_scales = affine_quantization->scale->data;
    95bc:	f10b 0304 	add.w	r3, fp, #4
  for (int i = 0; i < num_channels; ++i) {
    95c0:	2600      	movs	r6, #0
    95c2:	9405      	str	r4, [sp, #20]
    95c4:	9506      	str	r5, [sp, #24]
    95c6:	f8cd a01c 	str.w	sl, [sp, #28]
    95ca:	469a      	mov	sl, r3
    95cc:	e024      	b.n	9618 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x190>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    95ce:	f8db 0004 	ldr.w	r0, [fp, #4]
    const double filter_scale = static_cast<double>(scale);
    95d2:	f7f6 ff49 	bl	468 <__aeabi_f2d>
    95d6:	4604      	mov	r4, r0
    95d8:	460d      	mov	r5, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    95da:	4648      	mov	r0, r9
    95dc:	f7f6 ff44 	bl	468 <__aeabi_f2d>
    95e0:	4622      	mov	r2, r4
    95e2:	462b      	mov	r3, r5
    95e4:	f7f6 ff98 	bl	518 <__aeabi_dmul>
    95e8:	4604      	mov	r4, r0
    95ea:	460d      	mov	r5, r1
                                          static_cast<double>(output_scale);
    95ec:	4640      	mov	r0, r8
    95ee:	f7f6 ff3b 	bl	468 <__aeabi_f2d>
    95f2:	4602      	mov	r2, r0
    95f4:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    95f6:	4620      	mov	r0, r4
    95f8:	4629      	mov	r1, r5
    95fa:	f7f7 f8b7 	bl	76c <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    95fe:	ab0a      	add	r3, sp, #40	; 0x28
    9600:	aa09      	add	r2, sp, #36	; 0x24
    9602:	f7ff fd49 	bl	9098 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    9606:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9608:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    960a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    960e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9610:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9612:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    9616:	3601      	adds	r6, #1
    9618:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    961a:	429e      	cmp	r6, r3
    961c:	da04      	bge.n	9628 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1a0>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    961e:	2f01      	cmp	r7, #1
    9620:	ddd5      	ble.n	95ce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x146>
    9622:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
    9626:	e7d4      	b.n	95d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x14a>
    9628:	9c05      	ldr	r4, [sp, #20]
    962a:	9d06      	ldr	r5, [sp, #24]
    962c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  if (input->type == kTfLiteUInt8) {
    9630:	782b      	ldrb	r3, [r5, #0]
    9632:	2b03      	cmp	r3, #3
    9634:	d008      	beq.n	9648 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1c0>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    9636:	782b      	ldrb	r3, [r5, #0]
    9638:	2b09      	cmp	r3, #9
    963a:	d022      	beq.n	9682 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    963c:	2b03      	cmp	r3, #3
    963e:	d020      	beq.n	9682 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9640:	2b07      	cmp	r3, #7
    9642:	d01e      	beq.n	9682 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
  return kTfLiteOk;
    9644:	2600      	movs	r6, #0
    9646:	e735      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    double real_multiplier = 0.0;
    9648:	2200      	movs	r2, #0
    964a:	2300      	movs	r3, #0
    964c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    9650:	ab0a      	add	r3, sp, #40	; 0x28
    9652:	9301      	str	r3, [sp, #4]
    9654:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9656:	9300      	str	r3, [sp, #0]
    9658:	9b04      	ldr	r3, [sp, #16]
    965a:	4652      	mov	r2, sl
    965c:	4629      	mov	r1, r5
    965e:	4620      	mov	r0, r4
    9660:	f7f7 ff8e 	bl	1580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    9664:	4606      	mov	r6, r0
    9666:	2800      	cmp	r0, #0
    9668:	f47f af24 	bne.w	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    966c:	ab09      	add	r3, sp, #36	; 0x24
    966e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9674:	f7ff fd10 	bl	9098 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    9678:	9b09      	ldr	r3, [sp, #36]	; 0x24
    967a:	425b      	negs	r3, r3
    967c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    967e:	6013      	str	r3, [r2, #0]
    9680:	e7d9      	b.n	9636 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ae>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    9682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9684:	9300      	str	r3, [sp, #0]
    9686:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9688:	9a16      	ldr	r2, [sp, #88]	; 0x58
    968a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    968c:	7809      	ldrb	r1, [r1, #0]
    968e:	4620      	mov	r0, r4
    9690:	f7ff feca 	bl	9428 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    9694:	4606      	mov	r6, r0
    9696:	e70d      	b.n	94b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    9698:	0006ab84 	.word	0x0006ab84
    969c:	0006aba0 	.word	0x0006aba0
    96a0:	0006aaac 	.word	0x0006aaac
    96a4:	0006ab68 	.word	0x0006ab68
    96a8:	0006abbc 	.word	0x0006abbc
    96ac:	0006ac08 	.word	0x0006ac08
    96b0:	0006a8a8 	.word	0x0006a8a8
    96b4:	0006abd8 	.word	0x0006abd8
    96b8:	0006abec 	.word	0x0006abec
    96bc:	0006ac44 	.word	0x0006ac44
    96c0:	0006ac50 	.word	0x0006ac50
    96c4:	0006ac60 	.word	0x0006ac60
    96c8:	0006ac70 	.word	0x0006ac70
    96cc:	0006ac94 	.word	0x0006ac94

000096d0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    96d0:	b508      	push	{r3, lr}
    96d2:	4613      	mov	r3, r2
  switch (tensor_type) {
    96d4:	280f      	cmp	r0, #15
    96d6:	d848      	bhi.n	976a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    96d8:	e8df f000 	tbb	[pc, r0]
    96dc:	1f17080c 	.word	0x1f17080c
    96e0:	13332f27 	.word	0x13332f27
    96e4:	3b0f2337 	.word	0x3b0f2337
    96e8:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    96ec:	230a      	movs	r3, #10
    96ee:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    96f0:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    96f2:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    96f4:	2301      	movs	r3, #1
    96f6:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    96f8:	e7fb      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    96fa:	230b      	movs	r3, #11
    96fc:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    96fe:	2000      	movs	r0, #0
    9700:	e7f7      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    9702:	2307      	movs	r3, #7
    9704:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9706:	2000      	movs	r0, #0
    9708:	e7f3      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    970a:	2302      	movs	r3, #2
    970c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    970e:	2000      	movs	r0, #0
    9710:	e7ef      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    9712:	2310      	movs	r3, #16
    9714:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9716:	2000      	movs	r0, #0
    9718:	e7eb      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    971a:	2303      	movs	r3, #3
    971c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    971e:	2000      	movs	r0, #0
    9720:	e7e7      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    9722:	2309      	movs	r3, #9
    9724:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9726:	2000      	movs	r0, #0
    9728:	e7e3      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    972a:	2304      	movs	r3, #4
    972c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    972e:	2000      	movs	r0, #0
    9730:	e7df      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    9732:	230d      	movs	r3, #13
    9734:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9736:	2000      	movs	r0, #0
    9738:	e7db      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    973a:	2305      	movs	r3, #5
    973c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    973e:	2000      	movs	r0, #0
    9740:	e7d7      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    9742:	2306      	movs	r3, #6
    9744:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9746:	2000      	movs	r0, #0
    9748:	e7d3      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    974a:	2308      	movs	r3, #8
    974c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    974e:	2000      	movs	r0, #0
    9750:	e7cf      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    9752:	230c      	movs	r3, #12
    9754:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9756:	2000      	movs	r0, #0
    9758:	e7cb      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    975a:	230e      	movs	r3, #14
    975c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    975e:	2000      	movs	r0, #0
    9760:	e7c7      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    9762:	230f      	movs	r3, #15
    9764:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9766:	2000      	movs	r0, #0
    9768:	e7c3      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    976a:	2200      	movs	r2, #0
    976c:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    976e:	4602      	mov	r2, r0
    9770:	4902      	ldr	r1, [pc, #8]	; (977c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    9772:	4618      	mov	r0, r3
    9774:	f00a fa06 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9778:	2001      	movs	r0, #1
    977a:	e7ba      	b.n	96f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    977c:	0006acd4 	.word	0x0006acd4

00009780 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>:
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
    9780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9784:	461c      	mov	r4, r3
  if (!flat_vector) {
    9786:	b1d1      	cbz	r1, 97be <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x3e>
    9788:	4680      	mov	r8, r0
    978a:	4617      	mov	r7, r2
    978c:	460d      	mov	r5, r1
  uoffset_t size() const { return EndianScalar(length_); }
    978e:	6808      	ldr	r0, [r1, #0]
    9790:	f008 fa69 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    9794:	4606      	mov	r6, r0
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    9796:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
    979a:	d817      	bhi.n	97cc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x4c>
      for (size_t i = 0; i < num_dimensions; ++i) {
    979c:	2400      	movs	r4, #0
    979e:	42b4      	cmp	r4, r6
    97a0:	d222      	bcs.n	97e8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x68>
    97a2:	6828      	ldr	r0, [r5, #0]
    97a4:	f008 fa5f 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    97a8:	4284      	cmp	r4, r0
    97aa:	d216      	bcs.n	97da <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x5a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    97ac:	1d2b      	adds	r3, r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    97ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    97b2:	f009 fca3 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
        buffer[i] = flat_vector->Get(i);
    97b6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
    97ba:	3401      	adds	r4, #1
    97bc:	e7ef      	b.n	979e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x1e>
    TF_LITE_REPORT_ERROR(error_reporter,
    97be:	9a06      	ldr	r2, [sp, #24]
    97c0:	490b      	ldr	r1, [pc, #44]	; (97f0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x70>)
    97c2:	4618      	mov	r0, r3
    97c4:	f00a f9de 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    97c8:	2001      	movs	r0, #1
    97ca:	e00e      	b.n	97ea <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
      TF_LITE_REPORT_ERROR(
    97cc:	9a06      	ldr	r2, [sp, #24]
    97ce:	4909      	ldr	r1, [pc, #36]	; (97f4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x74>)
    97d0:	4620      	mov	r0, r4
    97d2:	f00a f9d7 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    97d6:	2001      	movs	r0, #1
    97d8:	e007      	b.n	97ea <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
    FLATBUFFERS_ASSERT(i < size());
    97da:	4b07      	ldr	r3, [pc, #28]	; (97f8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x78>)
    97dc:	4a07      	ldr	r2, [pc, #28]	; (97fc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x7c>)
    97de:	f44f 7183 	mov.w	r1, #262	; 0x106
    97e2:	4807      	ldr	r0, [pc, #28]	; (9800 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x80>)
    97e4:	f006 ffec 	bl	107c0 <__assert_func>
  return kTfLiteOk;
    97e8:	2000      	movs	r0, #0
}
    97ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97ee:	bf00      	nop
    97f0:	0006acf8 	.word	0x0006acf8
    97f4:	0006ad28 	.word	0x0006ad28
    97f8:	00068ff8 	.word	0x00068ff8
    97fc:	00069004 	.word	0x00069004
    9800:	000690c4 	.word	0x000690c4

00009804 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    9804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9808:	b084      	sub	sp, #16
    980a:	4604      	mov	r4, r0
    980c:	4688      	mov	r8, r1
    980e:	4615      	mov	r5, r2
    9810:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9812:	f00a f9a9 	bl	13b68 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9816:	682b      	ldr	r3, [r5, #0]
    9818:	681b      	ldr	r3, [r3, #0]
    981a:	2204      	movs	r2, #4
    981c:	2124      	movs	r1, #36	; 0x24
    981e:	4628      	mov	r0, r5
    9820:	4798      	blx	r3
    return new (allocated_memory) T();
    9822:	4606      	mov	r6, r0
    9824:	b118      	cbz	r0, 982e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9826:	2224      	movs	r2, #36	; 0x24
    9828:	2100      	movs	r1, #0
    982a:	f00c fbe4 	bl	15ff6 <memset>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    982e:	9502      	str	r5, [sp, #8]
    9830:	9603      	str	r6, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9832:	b336      	cbz	r6, 9882 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9834:	4620      	mov	r0, r4
    9836:	f009 fc62 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    983a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    983c:	4628      	mov	r0, r5
    983e:	f009 fc64 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9842:	280a      	cmp	r0, #10
    9844:	d92a      	bls.n	989c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9846:	f105 000a 	add.w	r0, r5, #10
    984a:	f009 fc5e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    984e:	b338      	cbz	r0, 98a0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9850:	4420      	add	r0, r4
    9852:	f009 fd23 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    9856:	2811      	cmp	r0, #17
    9858:	d128      	bne.n	98ac <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    985a:	4620      	mov	r0, r4
    985c:	f009 fc4f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9860:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9862:	4628      	mov	r0, r5
    9864:	f009 fc51 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9868:	280c      	cmp	r0, #12
    986a:	d91b      	bls.n	98a4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    986c:	f105 000c 	add.w	r0, r5, #12
    9870:	f009 fc4b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9874:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9876:	b1b8      	cbz	r0, 98a8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9878:	4620      	mov	r0, r4
    987a:	f009 fc3a 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    987e:	4404      	add	r4, r0
    9880:	e015      	b.n	98ae <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9882:	4b26      	ldr	r3, [pc, #152]	; (991c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    9884:	9301      	str	r3, [sp, #4]
    9886:	f240 63c3 	movw	r3, #1731	; 0x6c3
    988a:	9300      	str	r3, [sp, #0]
    988c:	4b24      	ldr	r3, [pc, #144]	; (9920 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    988e:	4a25      	ldr	r2, [pc, #148]	; (9924 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    9890:	4641      	mov	r1, r8
    9892:	4640      	mov	r0, r8
    9894:	f00a f985 	bl	13ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9898:	2501      	movs	r5, #1
    989a:	e030      	b.n	98fe <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    989c:	2000      	movs	r0, #0
    989e:	e7d6      	b.n	984e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    98a0:	2000      	movs	r0, #0
    98a2:	e7d8      	b.n	9856 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    98a4:	2000      	movs	r0, #0
    98a6:	e7e5      	b.n	9874 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    98a8:	2400      	movs	r4, #0
    98aa:	e000      	b.n	98ae <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    98ac:	2400      	movs	r4, #0

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    98ae:	b314      	cbz	r4, 98f6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
    98b0:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    98b2:	4620      	mov	r0, r4
    98b4:	f009 fc23 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    98b8:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    98ba:	4620      	mov	r0, r4
    98bc:	f009 fc25 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    98c0:	2804      	cmp	r0, #4
    98c2:	d926      	bls.n	9912 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    98c4:	1d20      	adds	r0, r4, #4
    98c6:	f009 fc20 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    98ca:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    98cc:	b318      	cbz	r0, 9916 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    98ce:	4628      	mov	r0, r5
    98d0:	f009 fc0f 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    98d4:	182c      	adds	r4, r5, r0
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
    98d6:	b174      	cbz	r4, 98f6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
      TF_LITE_ENSURE_STATUS(
    98d8:	4b13      	ldr	r3, [pc, #76]	; (9928 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    98da:	9300      	str	r3, [sp, #0]
    98dc:	4643      	mov	r3, r8
    98de:	4632      	mov	r2, r6
    98e0:	4621      	mov	r1, r4
    98e2:	2020      	movs	r0, #32
    98e4:	f7ff ff4c 	bl	9780 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>
    98e8:	4605      	mov	r5, r0
    98ea:	b940      	cbnz	r0, 98fe <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
  uoffset_t size() const { return EndianScalar(length_); }
    98ec:	6820      	ldr	r0, [r4, #0]
    98ee:	f008 f9ba 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    98f2:	9b03      	ldr	r3, [sp, #12]
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    98f4:	6218      	str	r0, [r3, #32]
    98f6:	9b03      	ldr	r3, [sp, #12]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    98f8:	2500      	movs	r5, #0
    98fa:	9503      	str	r5, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    98fc:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    98fe:	9903      	ldr	r1, [sp, #12]
    9900:	b119      	cbz	r1, 990a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9902:	9802      	ldr	r0, [sp, #8]
    9904:	6803      	ldr	r3, [r0, #0]
    9906:	685b      	ldr	r3, [r3, #4]
    9908:	4798      	blx	r3
  return kTfLiteOk;
}
    990a:	4628      	mov	r0, r5
    990c:	b004      	add	sp, #16
    990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9912:	2000      	movs	r0, #0
    9914:	e7d9      	b.n	98ca <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9916:	2400      	movs	r4, #0
    9918:	e7dd      	b.n	98d6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    991a:	bf00      	nop
    991c:	0006adc4 	.word	0x0006adc4
    9920:	0006ad6c 	.word	0x0006ad6c
    9924:	0006a8a8 	.word	0x0006a8a8
    9928:	0006add8 	.word	0x0006add8

0000992c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9930:	b084      	sub	sp, #16
    9932:	4604      	mov	r4, r0
    9934:	4688      	mov	r8, r1
    9936:	4615      	mov	r5, r2
    9938:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    993a:	f00a f915 	bl	13b68 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    993e:	682b      	ldr	r3, [r5, #0]
    9940:	681b      	ldr	r3, [r3, #0]
    9942:	2204      	movs	r2, #4
    9944:	2128      	movs	r1, #40	; 0x28
    9946:	4628      	mov	r0, r5
    9948:	4798      	blx	r3
    return new (allocated_memory) T();
    994a:	4607      	mov	r7, r0
    994c:	b118      	cbz	r0, 9956 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    994e:	2228      	movs	r2, #40	; 0x28
    9950:	2100      	movs	r1, #0
    9952:	f00c fb50 	bl	15ff6 <memset>
    9956:	9502      	str	r5, [sp, #8]
    9958:	9703      	str	r7, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    995a:	b337      	cbz	r7, 99aa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    995c:	4620      	mov	r0, r4
    995e:	f009 fbce 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9962:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9964:	4628      	mov	r0, r5
    9966:	f009 fbd0 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    996a:	280a      	cmp	r0, #10
    996c:	d92a      	bls.n	99c4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    996e:	f105 000a 	add.w	r0, r5, #10
    9972:	f009 fbca 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9976:	b338      	cbz	r0, 99c8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9978:	4420      	add	r0, r4
    997a:	f009 fc8f 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    997e:	2805      	cmp	r0, #5
    9980:	d128      	bne.n	99d4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9982:	4620      	mov	r0, r4
    9984:	f009 fbbb 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9988:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    998a:	4628      	mov	r0, r5
    998c:	f009 fbbd 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9990:	280c      	cmp	r0, #12
    9992:	d91b      	bls.n	99cc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9994:	f105 000c 	add.w	r0, r5, #12
    9998:	f009 fbb7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    999c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    999e:	b1b8      	cbz	r0, 99d0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    99a0:	4620      	mov	r0, r4
    99a2:	f009 fba6 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    99a6:	4404      	add	r4, r0
    99a8:	e015      	b.n	99d6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    99aa:	4b5b      	ldr	r3, [pc, #364]	; (9b18 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>)
    99ac:	9301      	str	r3, [sp, #4]
    99ae:	f240 6361 	movw	r3, #1633	; 0x661
    99b2:	9300      	str	r3, [sp, #0]
    99b4:	4b59      	ldr	r3, [pc, #356]	; (9b1c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    99b6:	4a5a      	ldr	r2, [pc, #360]	; (9b20 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    99b8:	4641      	mov	r1, r8
    99ba:	4640      	mov	r0, r8
    99bc:	f00a f8f1 	bl	13ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    99c0:	2401      	movs	r4, #1
    99c2:	e086      	b.n	9ad2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    99c4:	2000      	movs	r0, #0
    99c6:	e7d6      	b.n	9976 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    99c8:	2000      	movs	r0, #0
    99ca:	e7d8      	b.n	997e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    99cc:	2000      	movs	r0, #0
    99ce:	e7e5      	b.n	999c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    99d0:	2400      	movs	r4, #0
    99d2:	e000      	b.n	99d6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    99d4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    99d6:	2c00      	cmp	r4, #0
    99d8:	d077      	beq.n	9aca <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19e>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    99da:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    99dc:	4620      	mov	r0, r4
    99de:	f009 fb8e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    99e2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    99e4:	4620      	mov	r0, r4
    99e6:	f009 fb90 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    99ea:	2804      	cmp	r0, #4
    99ec:	d97b      	bls.n	9ae6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ba>
    99ee:	1d20      	adds	r0, r4, #4
    99f0:	f009 fb8b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    99f4:	2800      	cmp	r0, #0
    99f6:	d078      	beq.n	9aea <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1be>
    99f8:	4428      	add	r0, r5
    99fa:	f009 fb8c 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    99fe:	b2c0      	uxtb	r0, r0
    9a00:	f00a f8a9 	bl	13b56 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9a04:	7038      	strb	r0, [r7, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9a06:	9f03      	ldr	r7, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9a08:	4628      	mov	r0, r5
    9a0a:	f009 fb78 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a0e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a10:	4620      	mov	r0, r4
    9a12:	f009 fb7a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a16:	2806      	cmp	r0, #6
    9a18:	d969      	bls.n	9aee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c2>
    9a1a:	1da0      	adds	r0, r4, #6
    9a1c:	f009 fb75 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9a20:	2800      	cmp	r0, #0
    9a22:	d066      	beq.n	9af2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c6>
    9a24:	4428      	add	r0, r5
    9a26:	f009 fb6a 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9a2a:	6078      	str	r0, [r7, #4]
    9a2c:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9a2e:	4628      	mov	r0, r5
    9a30:	f009 fb65 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a34:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a36:	4638      	mov	r0, r7
    9a38:	f009 fb67 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a3c:	2808      	cmp	r0, #8
    9a3e:	d95a      	bls.n	9af6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ca>
    9a40:	f107 0008 	add.w	r0, r7, #8
    9a44:	f009 fb61 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9a48:	2800      	cmp	r0, #0
    9a4a:	d056      	beq.n	9afa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ce>
    9a4c:	4428      	add	r0, r5
    9a4e:	f009 fb56 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9a52:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9a54:	4628      	mov	r0, r5
    9a56:	f009 fb52 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a5a:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a5c:	4638      	mov	r0, r7
    9a5e:	f009 fb54 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a62:	280a      	cmp	r0, #10
    9a64:	d94b      	bls.n	9afe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    9a66:	f107 000a 	add.w	r0, r7, #10
    9a6a:	f009 fb4e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9a6e:	2800      	cmp	r0, #0
    9a70:	d047      	beq.n	9b02 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d6>
    9a72:	4428      	add	r0, r5
    9a74:	f009 fb43 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_width = schema_params->filter_width();
    9a78:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9a7a:	4628      	mov	r0, r5
    9a7c:	f009 fb3f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a80:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a82:	4638      	mov	r0, r7
    9a84:	f009 fb41 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a88:	280c      	cmp	r0, #12
    9a8a:	d93c      	bls.n	9b06 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    9a8c:	f107 000c 	add.w	r0, r7, #12
    9a90:	f009 fb3b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9a94:	2800      	cmp	r0, #0
    9a96:	d038      	beq.n	9b0a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1de>
    9a98:	4428      	add	r0, r5
    9a9a:	f009 fb30 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_height = schema_params->filter_height();
    9a9e:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9aa0:	4628      	mov	r0, r5
    9aa2:	f009 fb2c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9aa6:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9aa8:	4638      	mov	r0, r7
    9aaa:	f009 fb2e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9aae:	280e      	cmp	r0, #14
    9ab0:	d92d      	bls.n	9b0e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e2>
    9ab2:	f107 000e 	add.w	r0, r7, #14
    9ab6:	f009 fb28 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9aba:	b350      	cbz	r0, 9b12 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    9abc:	4428      	add	r0, r5
    9abe:	f009 fb2a 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9ac2:	b2c0      	uxtb	r0, r0
    9ac4:	f00a f83d 	bl	13b42 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9ac8:	7520      	strb	r0, [r4, #20]
    9aca:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9acc:	2400      	movs	r4, #0
    9ace:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9ad0:	6033      	str	r3, [r6, #0]
	if (__ptr != nullptr)
    9ad2:	9903      	ldr	r1, [sp, #12]
    9ad4:	b119      	cbz	r1, 9ade <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b2>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9ad6:	9802      	ldr	r0, [sp, #8]
    9ad8:	6803      	ldr	r3, [r0, #0]
    9ada:	685b      	ldr	r3, [r3, #4]
    9adc:	4798      	blx	r3
}
    9ade:	4620      	mov	r0, r4
    9ae0:	b004      	add	sp, #16
    9ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ae6:	2000      	movs	r0, #0
    9ae8:	e784      	b.n	99f4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9aea:	2000      	movs	r0, #0
    9aec:	e787      	b.n	99fe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9aee:	2000      	movs	r0, #0
    9af0:	e796      	b.n	9a20 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9af2:	2000      	movs	r0, #0
    9af4:	e799      	b.n	9a2a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9af6:	2000      	movs	r0, #0
    9af8:	e7a6      	b.n	9a48 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9afa:	2000      	movs	r0, #0
    9afc:	e7a9      	b.n	9a52 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x126>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9afe:	2000      	movs	r0, #0
    9b00:	e7b5      	b.n	9a6e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x142>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b02:	2000      	movs	r0, #0
    9b04:	e7b8      	b.n	9a78 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b06:	2000      	movs	r0, #0
    9b08:	e7c4      	b.n	9a94 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b0a:	2000      	movs	r0, #0
    9b0c:	e7c7      	b.n	9a9e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x172>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b0e:	2000      	movs	r0, #0
    9b10:	e7d3      	b.n	9aba <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b12:	2000      	movs	r0, #0
    9b14:	e7d5      	b.n	9ac2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x196>
    9b16:	bf00      	nop
    9b18:	0006adc4 	.word	0x0006adc4
    9b1c:	0006ad6c 	.word	0x0006ad6c
    9b20:	0006a8a8 	.word	0x0006a8a8

00009b24 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    9b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b28:	b084      	sub	sp, #16
    9b2a:	4604      	mov	r4, r0
    9b2c:	4688      	mov	r8, r1
    9b2e:	4615      	mov	r5, r2
    9b30:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9b32:	f00a f819 	bl	13b68 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9b36:	682b      	ldr	r3, [r5, #0]
    9b38:	681b      	ldr	r3, [r3, #0]
    9b3a:	2204      	movs	r2, #4
    9b3c:	2118      	movs	r1, #24
    9b3e:	4628      	mov	r0, r5
    9b40:	4798      	blx	r3
    return new (allocated_memory) T();
    9b42:	4606      	mov	r6, r0
    9b44:	b130      	cbz	r0, 9b54 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
    9b46:	2300      	movs	r3, #0
    9b48:	6003      	str	r3, [r0, #0]
    9b4a:	6043      	str	r3, [r0, #4]
    9b4c:	6083      	str	r3, [r0, #8]
    9b4e:	60c3      	str	r3, [r0, #12]
    9b50:	6103      	str	r3, [r0, #16]
    9b52:	6143      	str	r3, [r0, #20]
    9b54:	9502      	str	r5, [sp, #8]
    9b56:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9b58:	b336      	cbz	r6, 9ba8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return data_ - ReadScalar<soffset_t>(data_);
    9b5a:	4620      	mov	r0, r4
    9b5c:	f009 facf 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9b60:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9b62:	4628      	mov	r0, r5
    9b64:	f009 fad1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b68:	280a      	cmp	r0, #10
    9b6a:	d92a      	bls.n	9bc2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    9b6c:	f105 000a 	add.w	r0, r5, #10
    9b70:	f009 facb 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b74:	b338      	cbz	r0, 9bc6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    9b76:	4420      	add	r0, r4
    9b78:	f009 fb90 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    9b7c:	2801      	cmp	r0, #1
    9b7e:	d128      	bne.n	9bd2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    return data_ - ReadScalar<soffset_t>(data_);
    9b80:	4620      	mov	r0, r4
    9b82:	f009 fabc 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9b86:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9b88:	4628      	mov	r0, r5
    9b8a:	f009 fabe 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b8e:	280c      	cmp	r0, #12
    9b90:	d91b      	bls.n	9bca <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9b92:	f105 000c 	add.w	r0, r5, #12
    9b96:	f009 fab8 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9b9a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b9c:	b1b8      	cbz	r0, 9bce <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9b9e:	4620      	mov	r0, r4
    9ba0:	f009 faa7 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9ba4:	4404      	add	r4, r0
    9ba6:	e015      	b.n	9bd4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9ba8:	4b5a      	ldr	r3, [pc, #360]	; (9d14 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9baa:	9301      	str	r3, [sp, #4]
    9bac:	f240 434d 	movw	r3, #1101	; 0x44d
    9bb0:	9300      	str	r3, [sp, #0]
    9bb2:	4b59      	ldr	r3, [pc, #356]	; (9d18 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9bb4:	4a59      	ldr	r2, [pc, #356]	; (9d1c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f8>)
    9bb6:	4641      	mov	r1, r8
    9bb8:	4640      	mov	r0, r8
    9bba:	f009 fff2 	bl	13ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9bbe:	2401      	movs	r4, #1
    9bc0:	e086      	b.n	9cd0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bc2:	2000      	movs	r0, #0
    9bc4:	e7d6      	b.n	9b74 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9bc6:	2000      	movs	r0, #0
    9bc8:	e7d8      	b.n	9b7c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bca:	2000      	movs	r0, #0
    9bcc:	e7e5      	b.n	9b9a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9bce:	2400      	movs	r4, #0
    9bd0:	e000      	b.n	9bd4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9bd2:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9bd4:	2c00      	cmp	r4, #0
    9bd6:	d077      	beq.n	9cc8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9bd8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9bda:	4620      	mov	r0, r4
    9bdc:	f009 fa8f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9be0:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9be2:	4620      	mov	r0, r4
    9be4:	f009 fa91 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9be8:	2804      	cmp	r0, #4
    9bea:	d97b      	bls.n	9ce4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c0>
    9bec:	1d20      	adds	r0, r4, #4
    9bee:	f009 fa8c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9bf2:	2800      	cmp	r0, #0
    9bf4:	d078      	beq.n	9ce8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c4>
    9bf6:	4428      	add	r0, r5
    9bf8:	f009 fa8d 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9bfc:	b2c0      	uxtb	r0, r0
    9bfe:	f009 ffaa 	bl	13b56 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9c02:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9c04:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c06:	4628      	mov	r0, r5
    9c08:	f009 fa79 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c0c:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c0e:	4620      	mov	r0, r4
    9c10:	f009 fa7b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c14:	2806      	cmp	r0, #6
    9c16:	d969      	bls.n	9cec <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    9c18:	1da0      	adds	r0, r4, #6
    9c1a:	f009 fa76 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c1e:	2800      	cmp	r0, #0
    9c20:	d066      	beq.n	9cf0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cc>
    9c22:	4428      	add	r0, r5
    9c24:	f009 fa6b 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9c28:	6070      	str	r0, [r6, #4]
    9c2a:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c2c:	4628      	mov	r0, r5
    9c2e:	f009 fa66 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c32:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c34:	4630      	mov	r0, r6
    9c36:	f009 fa68 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c3a:	2808      	cmp	r0, #8
    9c3c:	d95a      	bls.n	9cf4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    9c3e:	f106 0008 	add.w	r0, r6, #8
    9c42:	f009 fa62 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c46:	2800      	cmp	r0, #0
    9c48:	d056      	beq.n	9cf8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d4>
    9c4a:	4428      	add	r0, r5
    9c4c:	f009 fa57 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9c50:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9c52:	4628      	mov	r0, r5
    9c54:	f009 fa53 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c58:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c5a:	4630      	mov	r0, r6
    9c5c:	f009 fa55 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c60:	280a      	cmp	r0, #10
    9c62:	d94b      	bls.n	9cfc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d8>
    9c64:	f106 000a 	add.w	r0, r6, #10
    9c68:	f009 fa4f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c6c:	2800      	cmp	r0, #0
    9c6e:	d047      	beq.n	9d00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1dc>
    9c70:	4428      	add	r0, r5
    9c72:	f009 fa50 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9c76:	b2c0      	uxtb	r0, r0
    9c78:	f009 ff63 	bl	13b42 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9c7c:	7320      	strb	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c7e:	4628      	mov	r0, r5
    9c80:	f009 fa3d 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c84:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c86:	4630      	mov	r0, r6
    9c88:	f009 fa3f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c8c:	280c      	cmp	r0, #12
    9c8e:	d939      	bls.n	9d04 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e0>
    9c90:	f106 000c 	add.w	r0, r6, #12
    9c94:	f009 fa39 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c98:	2800      	cmp	r0, #0
    9c9a:	d035      	beq.n	9d08 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
    9c9c:	4428      	add	r0, r5
    9c9e:	f009 fa2e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    9ca2:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9ca4:	4628      	mov	r0, r5
    9ca6:	f009 fa2a 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9caa:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9cac:	4630      	mov	r0, r6
    9cae:	f009 fa2c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cb2:	280e      	cmp	r0, #14
    9cb4:	d92a      	bls.n	9d0c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e8>
    9cb6:	f106 000e 	add.w	r0, r6, #14
    9cba:	f009 fa26 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cbe:	b338      	cbz	r0, 9d10 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>
    9cc0:	4428      	add	r0, r5
    9cc2:	f009 fa1c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    9cc6:	6160      	str	r0, [r4, #20]
    9cc8:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9cca:	2400      	movs	r4, #0
    9ccc:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9cce:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9cd0:	9903      	ldr	r1, [sp, #12]
    9cd2:	b119      	cbz	r1, 9cdc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b8>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9cd4:	9802      	ldr	r0, [sp, #8]
    9cd6:	6803      	ldr	r3, [r0, #0]
    9cd8:	685b      	ldr	r3, [r3, #4]
    9cda:	4798      	blx	r3
}
    9cdc:	4620      	mov	r0, r4
    9cde:	b004      	add	sp, #16
    9ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ce4:	2000      	movs	r0, #0
    9ce6:	e784      	b.n	9bf2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ce8:	2000      	movs	r0, #0
    9cea:	e787      	b.n	9bfc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cec:	2000      	movs	r0, #0
    9cee:	e796      	b.n	9c1e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cf0:	2000      	movs	r0, #0
    9cf2:	e799      	b.n	9c28 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cf4:	2000      	movs	r0, #0
    9cf6:	e7a6      	b.n	9c46 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cf8:	2000      	movs	r0, #0
    9cfa:	e7a9      	b.n	9c50 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cfc:	2000      	movs	r0, #0
    9cfe:	e7b5      	b.n	9c6c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x148>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d00:	2000      	movs	r0, #0
    9d02:	e7b8      	b.n	9c76 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x152>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d04:	2000      	movs	r0, #0
    9d06:	e7c7      	b.n	9c98 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d08:	2001      	movs	r0, #1
    9d0a:	e7ca      	b.n	9ca2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d0c:	2000      	movs	r0, #0
    9d0e:	e7d6      	b.n	9cbe <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d10:	2001      	movs	r0, #1
    9d12:	e7d8      	b.n	9cc6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    9d14:	0006adc4 	.word	0x0006adc4
    9d18:	0006ad6c 	.word	0x0006ad6c
    9d1c:	0006a8a8 	.word	0x0006a8a8

00009d20 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
    9d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d24:	b084      	sub	sp, #16
    9d26:	4604      	mov	r4, r0
    9d28:	4688      	mov	r8, r1
    9d2a:	4616      	mov	r6, r2
    9d2c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9d2e:	f009 ff1b 	bl	13b68 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9d32:	6833      	ldr	r3, [r6, #0]
    9d34:	681b      	ldr	r3, [r3, #0]
    9d36:	2201      	movs	r2, #1
    9d38:	2104      	movs	r1, #4
    9d3a:	4630      	mov	r0, r6
    9d3c:	4798      	blx	r3
    return new (allocated_memory) T();
    9d3e:	4605      	mov	r5, r0
    9d40:	b108      	cbz	r0, 9d46 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    9d42:	2300      	movs	r3, #0
    9d44:	6003      	str	r3, [r0, #0]
    9d46:	9602      	str	r6, [sp, #8]
    9d48:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9d4a:	b305      	cbz	r5, 9d8e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    9d4c:	4620      	mov	r0, r4
    9d4e:	f009 f9d6 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d52:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d54:	4630      	mov	r0, r6
    9d56:	f009 f9d8 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d5a:	280a      	cmp	r0, #10
    9d5c:	d924      	bls.n	9da8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    9d5e:	f106 000a 	add.w	r0, r6, #10
    9d62:	f009 f9d2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d66:	b308      	cbz	r0, 9dac <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    9d68:	4420      	add	r0, r4
    9d6a:	f009 fa97 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    9d6e:	2808      	cmp	r0, #8
    9d70:	d128      	bne.n	9dc4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    9d72:	4620      	mov	r0, r4
    9d74:	f009 f9c3 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d78:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d7a:	4630      	mov	r0, r6
    9d7c:	f009 f9c5 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d80:	280c      	cmp	r0, #12
    9d82:	d915      	bls.n	9db0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    9d84:	f106 000c 	add.w	r0, r6, #12
    9d88:	f009 f9bf 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9d8c:	e011      	b.n	9db2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    9d8e:	4b4c      	ldr	r3, [pc, #304]	; (9ec0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    9d90:	9301      	str	r3, [sp, #4]
    9d92:	f240 531d 	movw	r3, #1309	; 0x51d
    9d96:	9300      	str	r3, [sp, #0]
    9d98:	4b4a      	ldr	r3, [pc, #296]	; (9ec4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    9d9a:	4a4b      	ldr	r2, [pc, #300]	; (9ec8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    9d9c:	4641      	mov	r1, r8
    9d9e:	4640      	mov	r0, r8
    9da0:	f009 feff 	bl	13ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9da4:	2401      	movs	r4, #1
    9da6:	e07d      	b.n	9ea4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    9da8:	2000      	movs	r0, #0
    9daa:	e7dc      	b.n	9d66 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9dac:	2000      	movs	r0, #0
    9dae:	e7de      	b.n	9d6e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9db0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    9db2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9db4:	b120      	cbz	r0, 9dc0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9db6:	4620      	mov	r0, r4
    9db8:	f009 f99b 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9dbc:	4404      	add	r4, r0
    9dbe:	e002      	b.n	9dc6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9dc0:	2400      	movs	r4, #0
    9dc2:	e000      	b.n	9dc6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9dc4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9dc6:	2c00      	cmp	r4, #0
    9dc8:	d069      	beq.n	9e9e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    9dca:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9dcc:	4620      	mov	r0, r4
    9dce:	f009 f996 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9dd2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9dd4:	4620      	mov	r0, r4
    9dd6:	f009 f998 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dda:	2804      	cmp	r0, #4
    9ddc:	d903      	bls.n	9de6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    9dde:	1d20      	adds	r0, r4, #4
    9de0:	f009 f993 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9de4:	e000      	b.n	9de8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    9de6:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9de8:	b118      	cbz	r0, 9df2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9dea:	4430      	add	r0, r6
    9dec:	f009 f993 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    9df0:	e000      	b.n	9df4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    9df2:	2000      	movs	r0, #0
        ConvertActivation(schema_params->fused_activation_function());
    9df4:	b2c0      	uxtb	r0, r0
    9df6:	f009 fea4 	bl	13b42 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9dfa:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    9dfc:	4630      	mov	r0, r6
    9dfe:	f009 f97e 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e02:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e04:	4620      	mov	r0, r4
    9e06:	f009 f980 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e0a:	2808      	cmp	r0, #8
    9e0c:	d904      	bls.n	9e18 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    9e0e:	f104 0008 	add.w	r0, r4, #8
    9e12:	f009 f97a 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9e16:	e000      	b.n	9e1a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    9e18:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e1a:	b118      	cbz	r0, 9e24 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    9e1c:	4430      	add	r0, r6
    9e1e:	f009 fa3d 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    9e22:	e000      	b.n	9e26 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    9e24:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    9e26:	3800      	subs	r0, #0
    9e28:	bf18      	it	ne
    9e2a:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    9e2c:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    9e2e:	4630      	mov	r0, r6
    9e30:	f009 f965 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e34:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e36:	4620      	mov	r0, r4
    9e38:	f009 f967 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e3c:	280a      	cmp	r0, #10
    9e3e:	d904      	bls.n	9e4a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    9e40:	f104 000a 	add.w	r0, r4, #10
    9e44:	f009 f961 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9e48:	e000      	b.n	9e4c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    9e4a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e4c:	b118      	cbz	r0, 9e56 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    9e4e:	4430      	add	r0, r6
    9e50:	f009 fa24 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    9e54:	e000      	b.n	9e58 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    9e56:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    9e58:	3800      	subs	r0, #0
    9e5a:	bf18      	it	ne
    9e5c:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    9e5e:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    9e60:	4630      	mov	r0, r6
    9e62:	f009 f94c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e66:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e68:	4620      	mov	r0, r4
    9e6a:	f009 f94e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e6e:	2806      	cmp	r0, #6
    9e70:	d903      	bls.n	9e7a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    9e72:	1da0      	adds	r0, r4, #6
    9e74:	f009 f949 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9e78:	e000      	b.n	9e7c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    9e7a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e7c:	b118      	cbz	r0, 9e86 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    9e7e:	4430      	add	r0, r6
    9e80:	f009 f949 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    9e84:	e000      	b.n	9e88 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    9e86:	2000      	movs	r0, #0
    switch (schema_params->weights_format()) {
    9e88:	b138      	cbz	r0, 9e9a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    9e8a:	2801      	cmp	r0, #1
    9e8c:	d014      	beq.n	9eb8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
        TF_LITE_REPORT_ERROR(error_reporter,
    9e8e:	490f      	ldr	r1, [pc, #60]	; (9ecc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    9e90:	4640      	mov	r0, r8
    9e92:	f009 fe77 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    9e96:	2401      	movs	r4, #1
    9e98:	e004      	b.n	9ea4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    9e9a:	2300      	movs	r3, #0
    9e9c:	706b      	strb	r3, [r5, #1]
	_M_t._M_ptr() = pointer();
    9e9e:	2400      	movs	r4, #0
    9ea0:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9ea2:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    9ea4:	9903      	ldr	r1, [sp, #12]
    9ea6:	b119      	cbz	r1, 9eb0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9ea8:	9802      	ldr	r0, [sp, #8]
    9eaa:	6803      	ldr	r3, [r0, #0]
    9eac:	685b      	ldr	r3, [r3, #4]
    9eae:	4798      	blx	r3
}
    9eb0:	4620      	mov	r0, r4
    9eb2:	b004      	add	sp, #16
    9eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    9eb8:	2301      	movs	r3, #1
    9eba:	706b      	strb	r3, [r5, #1]
        break;
    9ebc:	e7ef      	b.n	9e9e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    9ebe:	bf00      	nop
    9ec0:	0006adc4 	.word	0x0006adc4
    9ec4:	0006ad6c 	.word	0x0006ad6c
    9ec8:	0006a8a8 	.word	0x0006a8a8
    9ecc:	0006ade0 	.word	0x0006ade0

00009ed0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    9ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ed4:	b084      	sub	sp, #16
    9ed6:	4604      	mov	r4, r0
    9ed8:	4688      	mov	r8, r1
    9eda:	4615      	mov	r5, r2
    9edc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9ede:	f009 fe43 	bl	13b68 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9ee2:	682b      	ldr	r3, [r5, #0]
    9ee4:	681b      	ldr	r3, [r3, #0]
    9ee6:	2204      	movs	r2, #4
    9ee8:	211c      	movs	r1, #28
    9eea:	4628      	mov	r0, r5
    9eec:	4798      	blx	r3
    return new (allocated_memory) T();
    9eee:	4606      	mov	r6, r0
    9ef0:	b138      	cbz	r0, 9f02 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x32>
    9ef2:	2300      	movs	r3, #0
    9ef4:	6003      	str	r3, [r0, #0]
    9ef6:	6043      	str	r3, [r0, #4]
    9ef8:	6083      	str	r3, [r0, #8]
    9efa:	60c3      	str	r3, [r0, #12]
    9efc:	6103      	str	r3, [r0, #16]
    9efe:	6143      	str	r3, [r0, #20]
    9f00:	6183      	str	r3, [r0, #24]
    9f02:	9502      	str	r5, [sp, #8]
    9f04:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9f06:	b336      	cbz	r6, 9f56 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
    return data_ - ReadScalar<soffset_t>(data_);
    9f08:	4620      	mov	r0, r4
    9f0a:	f009 f8f8 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f0e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f10:	4628      	mov	r0, r5
    9f12:	f009 f8fa 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f16:	280a      	cmp	r0, #10
    9f18:	d92a      	bls.n	9f70 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9f1a:	f105 000a 	add.w	r0, r5, #10
    9f1e:	f009 f8f4 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f22:	b338      	cbz	r0, 9f74 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9f24:	4420      	add	r0, r4
    9f26:	f009 f9b9 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    9f2a:	2802      	cmp	r0, #2
    9f2c:	d128      	bne.n	9f80 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return data_ - ReadScalar<soffset_t>(data_);
    9f2e:	4620      	mov	r0, r4
    9f30:	f009 f8e5 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f34:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f36:	4628      	mov	r0, r5
    9f38:	f009 f8e7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f3c:	280c      	cmp	r0, #12
    9f3e:	d91b      	bls.n	9f78 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    9f40:	f105 000c 	add.w	r0, r5, #12
    9f44:	f009 f8e1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9f48:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9f4a:	b1b8      	cbz	r0, 9f7c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    9f4c:	4620      	mov	r0, r4
    9f4e:	f009 f8d0 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9f52:	4404      	add	r4, r0
    9f54:	e015      	b.n	9f82 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    9f56:	4b68      	ldr	r3, [pc, #416]	; (a0f8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>)
    9f58:	9301      	str	r3, [sp, #4]
    9f5a:	f240 43a2 	movw	r3, #1186	; 0x4a2
    9f5e:	9300      	str	r3, [sp, #0]
    9f60:	4b66      	ldr	r3, [pc, #408]	; (a0fc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22c>)
    9f62:	4a67      	ldr	r2, [pc, #412]	; (a100 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x230>)
    9f64:	4641      	mov	r1, r8
    9f66:	4640      	mov	r0, r8
    9f68:	f009 fe1b 	bl	13ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9f6c:	2401      	movs	r4, #1
    9f6e:	e09c      	b.n	a0aa <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f70:	2000      	movs	r0, #0
    9f72:	e7d6      	b.n	9f22 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f74:	2000      	movs	r0, #0
    9f76:	e7d8      	b.n	9f2a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f78:	2000      	movs	r0, #0
    9f7a:	e7e5      	b.n	9f48 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9f7c:	2400      	movs	r4, #0
    9f7e:	e000      	b.n	9f82 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    9f80:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9f82:	2c00      	cmp	r4, #0
    9f84:	f000 808d 	beq.w	a0a2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9f88:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9f8a:	4620      	mov	r0, r4
    9f8c:	f009 f8b7 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f90:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f92:	4620      	mov	r0, r4
    9f94:	f009 f8b9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f98:	2804      	cmp	r0, #4
    9f9a:	f240 8090 	bls.w	a0be <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ee>
    9f9e:	1d20      	adds	r0, r4, #4
    9fa0:	f009 f8b3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fa4:	2800      	cmp	r0, #0
    9fa6:	f000 808c 	beq.w	a0c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    9faa:	4428      	add	r0, r5
    9fac:	f009 f8b3 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9fb0:	b2c0      	uxtb	r0, r0
    9fb2:	f009 fdd0 	bl	13b56 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9fb6:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9fb8:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9fba:	4628      	mov	r0, r5
    9fbc:	f009 f89f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9fc0:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9fc2:	4620      	mov	r0, r4
    9fc4:	f009 f8a1 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fc8:	2806      	cmp	r0, #6
    9fca:	d97c      	bls.n	a0c6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f6>
    9fcc:	1da0      	adds	r0, r4, #6
    9fce:	f009 f89c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fd2:	2800      	cmp	r0, #0
    9fd4:	d079      	beq.n	a0ca <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fa>
    9fd6:	4428      	add	r0, r5
    9fd8:	f009 f891 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9fdc:	6070      	str	r0, [r6, #4]
    9fde:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9fe0:	4628      	mov	r0, r5
    9fe2:	f009 f88c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9fe6:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9fe8:	4630      	mov	r0, r6
    9fea:	f009 f88e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fee:	2808      	cmp	r0, #8
    9ff0:	d96d      	bls.n	a0ce <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fe>
    9ff2:	f106 0008 	add.w	r0, r6, #8
    9ff6:	f009 f888 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ffa:	2800      	cmp	r0, #0
    9ffc:	d069      	beq.n	a0d2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x202>
    9ffe:	4428      	add	r0, r5
    a000:	f009 f87d 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a004:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a006:	4628      	mov	r0, r5
    a008:	f009 f879 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a00c:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a00e:	4630      	mov	r0, r6
    a010:	f009 f87b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a014:	280a      	cmp	r0, #10
    a016:	d95e      	bls.n	a0d6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x206>
    a018:	f106 000a 	add.w	r0, r6, #10
    a01c:	f009 f875 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a020:	2800      	cmp	r0, #0
    a022:	d05a      	beq.n	a0da <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20a>
    a024:	4428      	add	r0, r5
    a026:	f009 f86a 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->depth_multiplier = schema_params->depth_multiplier();
    a02a:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a02c:	4628      	mov	r0, r5
    a02e:	f009 f866 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a032:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a034:	4630      	mov	r0, r6
    a036:	f009 f868 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a03a:	280c      	cmp	r0, #12
    a03c:	d94f      	bls.n	a0de <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20e>
    a03e:	f106 000c 	add.w	r0, r6, #12
    a042:	f009 f862 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a046:	2800      	cmp	r0, #0
    a048:	d04b      	beq.n	a0e2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x212>
    a04a:	4428      	add	r0, r5
    a04c:	f009 f863 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a050:	b2c0      	uxtb	r0, r0
    a052:	f009 fd76 	bl	13b42 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a056:	7420      	strb	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a058:	4628      	mov	r0, r5
    a05a:	f009 f850 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a05e:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a060:	4630      	mov	r0, r6
    a062:	f009 f852 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a066:	280e      	cmp	r0, #14
    a068:	d93d      	bls.n	a0e6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
    a06a:	f106 000e 	add.w	r0, r6, #14
    a06e:	f009 f84c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a072:	2800      	cmp	r0, #0
    a074:	d039      	beq.n	a0ea <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21a>
    a076:	4428      	add	r0, r5
    a078:	f009 f841 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a07c:	6160      	str	r0, [r4, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    a07e:	4628      	mov	r0, r5
    a080:	f009 f83d 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a084:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a086:	4630      	mov	r0, r6
    a088:	f009 f83f 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a08c:	2810      	cmp	r0, #16
    a08e:	d92e      	bls.n	a0ee <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21e>
    a090:	f106 0010 	add.w	r0, r6, #16
    a094:	f009 f839 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a098:	b358      	cbz	r0, a0f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x222>
    a09a:	4428      	add	r0, r5
    a09c:	f009 f82f 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a0a0:	61a0      	str	r0, [r4, #24]
    a0a2:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a0a4:	2400      	movs	r4, #0
    a0a6:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a0a8:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a0aa:	9903      	ldr	r1, [sp, #12]
    a0ac:	b119      	cbz	r1, a0b6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a0ae:	9802      	ldr	r0, [sp, #8]
    a0b0:	6803      	ldr	r3, [r0, #0]
    a0b2:	685b      	ldr	r3, [r3, #4]
    a0b4:	4798      	blx	r3
}
    a0b6:	4620      	mov	r0, r4
    a0b8:	b004      	add	sp, #16
    a0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0be:	2000      	movs	r0, #0
    a0c0:	e770      	b.n	9fa4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0c2:	2000      	movs	r0, #0
    a0c4:	e774      	b.n	9fb0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0c6:	2000      	movs	r0, #0
    a0c8:	e783      	b.n	9fd2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0ca:	2000      	movs	r0, #0
    a0cc:	e786      	b.n	9fdc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0ce:	2000      	movs	r0, #0
    a0d0:	e793      	b.n	9ffa <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0d2:	2000      	movs	r0, #0
    a0d4:	e796      	b.n	a004 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0d6:	2000      	movs	r0, #0
    a0d8:	e7a2      	b.n	a020 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0da:	2000      	movs	r0, #0
    a0dc:	e7a5      	b.n	a02a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0de:	2000      	movs	r0, #0
    a0e0:	e7b1      	b.n	a046 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x176>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0e2:	2000      	movs	r0, #0
    a0e4:	e7b4      	b.n	a050 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x180>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0e6:	2000      	movs	r0, #0
    a0e8:	e7c3      	b.n	a072 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0ea:	2001      	movs	r0, #1
    a0ec:	e7c6      	b.n	a07c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0ee:	2000      	movs	r0, #0
    a0f0:	e7d2      	b.n	a098 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0f2:	2001      	movs	r0, #1
    a0f4:	e7d4      	b.n	a0a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a0f6:	bf00      	nop
    a0f8:	0006adc4 	.word	0x0006adc4
    a0fc:	0006ad6c 	.word	0x0006ad6c
    a100:	0006a8a8 	.word	0x0006a8a8

0000a104 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a108:	b084      	sub	sp, #16
    a10a:	4604      	mov	r4, r0
    a10c:	4688      	mov	r8, r1
    a10e:	4615      	mov	r5, r2
    a110:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a112:	f009 fd29 	bl	13b68 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a116:	682b      	ldr	r3, [r5, #0]
    a118:	681b      	ldr	r3, [r3, #0]
    a11a:	2204      	movs	r2, #4
    a11c:	4611      	mov	r1, r2
    a11e:	4628      	mov	r0, r5
    a120:	4798      	blx	r3
    return new (allocated_memory) T();
    a122:	4606      	mov	r6, r0
    a124:	b108      	cbz	r0, a12a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a126:	2300      	movs	r3, #0
    a128:	6003      	str	r3, [r0, #0]
    a12a:	9502      	str	r5, [sp, #8]
    a12c:	9603      	str	r6, [sp, #12]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a12e:	b336      	cbz	r6, a17e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return data_ - ReadScalar<soffset_t>(data_);
    a130:	4620      	mov	r0, r4
    a132:	f008 ffe4 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a136:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a138:	4628      	mov	r0, r5
    a13a:	f008 ffe6 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a13e:	280a      	cmp	r0, #10
    a140:	d92a      	bls.n	a198 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    a142:	f105 000a 	add.w	r0, r5, #10
    a146:	f008 ffe0 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a14a:	b338      	cbz	r0, a19c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    a14c:	4420      	add	r0, r4
    a14e:	f009 f8a5 	bl	1329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    a152:	2809      	cmp	r0, #9
    a154:	d128      	bne.n	a1a8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a156:	4620      	mov	r0, r4
    a158:	f008 ffd1 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a15c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a15e:	4628      	mov	r0, r5
    a160:	f008 ffd3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a164:	280c      	cmp	r0, #12
    a166:	d91b      	bls.n	a1a0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    a168:	f105 000c 	add.w	r0, r5, #12
    a16c:	f008 ffcd 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a170:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a172:	b1b8      	cbz	r0, a1a4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a174:	4620      	mov	r0, r4
    a176:	f008 ffbc 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a17a:	4404      	add	r4, r0
    a17c:	e015      	b.n	a1aa <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a17e:	4b1d      	ldr	r3, [pc, #116]	; (a1f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
    a180:	9301      	str	r3, [sp, #4]
    a182:	f240 734c 	movw	r3, #1868	; 0x74c
    a186:	9300      	str	r3, [sp, #0]
    a188:	4b1b      	ldr	r3, [pc, #108]	; (a1f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
    a18a:	4a1c      	ldr	r2, [pc, #112]	; (a1fc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
    a18c:	4641      	mov	r1, r8
    a18e:	4640      	mov	r0, r8
    a190:	f009 fd07 	bl	13ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a194:	2401      	movs	r4, #1
    a196:	e01e      	b.n	a1d6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a198:	2000      	movs	r0, #0
    a19a:	e7d6      	b.n	a14a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a19c:	2000      	movs	r0, #0
    a19e:	e7d8      	b.n	a152 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1a0:	2000      	movs	r0, #0
    a1a2:	e7e5      	b.n	a170 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a1a4:	2400      	movs	r4, #0
    a1a6:	e000      	b.n	a1aa <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a1a8:	2400      	movs	r4, #0

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    a1aa:	b18c      	cbz	r4, a1d0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return GetField<float>(VT_BETA, 0.0f);
    a1ac:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a1ae:	4620      	mov	r0, r4
    a1b0:	f008 ffa5 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1b4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1b6:	4620      	mov	r0, r4
    a1b8:	f008 ffa7 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1bc:	2804      	cmp	r0, #4
    a1be:	d914      	bls.n	a1ea <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
    a1c0:	1d20      	adds	r0, r4, #4
    a1c2:	f008 ffa2 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1c6:	b190      	cbz	r0, a1ee <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xea>
    a1c8:	4428      	add	r0, r5
    a1ca:	f009 f86e 	bl	132aa <_ZN11flatbuffers10ReadScalarIfEET_PKv>
    params->beta = schema_params->beta();
    a1ce:	6030      	str	r0, [r6, #0]
	_M_t._M_ptr() = pointer();
    a1d0:	2400      	movs	r4, #0
    a1d2:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    a1d4:	603e      	str	r6, [r7, #0]
	if (__ptr != nullptr)
    a1d6:	9903      	ldr	r1, [sp, #12]
    a1d8:	b119      	cbz	r1, a1e2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a1da:	9802      	ldr	r0, [sp, #8]
    a1dc:	6803      	ldr	r3, [r0, #0]
    a1de:	685b      	ldr	r3, [r3, #4]
    a1e0:	4798      	blx	r3
  return kTfLiteOk;
}
    a1e2:	4620      	mov	r0, r4
    a1e4:	b004      	add	sp, #16
    a1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1ea:	2000      	movs	r0, #0
    a1ec:	e7eb      	b.n	a1c6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1ee:	2000      	movs	r0, #0
    a1f0:	e7ed      	b.n	a1ce <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    a1f2:	bf00      	nop
    a1f4:	0006adc4 	.word	0x0006adc4
    a1f8:	0006ad6c 	.word	0x0006ad6c
    a1fc:	0006a8a8 	.word	0x0006a8a8

0000a200 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    a200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a204:	4604      	mov	r4, r0
    a206:	4688      	mov	r8, r1
    a208:	4691      	mov	r9, r2
    a20a:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    a20c:	2300      	movs	r3, #0
    a20e:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    a210:	f009 fcd6 	bl	13bc0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    a214:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    a216:	4620      	mov	r0, r4
    a218:	f008 ff71 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a21c:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a21e:	4638      	mov	r0, r7
    a220:	f008 ff73 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a224:	2808      	cmp	r0, #8
    a226:	d904      	bls.n	a232 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    a228:	f107 0008 	add.w	r0, r7, #8
    a22c:	f008 ff6d 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a230:	e000      	b.n	a234 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    a232:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a234:	b120      	cbz	r0, a240 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    a236:	4420      	add	r0, r4
    a238:	f008 ff61 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a23c:	4607      	mov	r7, r0
    a23e:	e000      	b.n	a242 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    a240:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    a242:	2d91      	cmp	r5, #145	; 0x91
    a244:	d80d      	bhi.n	a262 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    a246:	2d20      	cmp	r5, #32
    a248:	d01c      	beq.n	a284 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    a24a:	f8d8 3000 	ldr.w	r3, [r8]
    a24e:	681b      	ldr	r3, [r3, #0]
    a250:	463a      	mov	r2, r7
    a252:	4629      	mov	r1, r5
    a254:	4640      	mov	r0, r8
    a256:	4798      	blx	r3
    a258:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a25a:	b148      	cbz	r0, a270 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    a25c:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    a25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    a262:	462a      	mov	r2, r5
    a264:	491c      	ldr	r1, [pc, #112]	; (a2d8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    a266:	4648      	mov	r0, r9
    a268:	f009 fc8c 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a26c:	2001      	movs	r0, #1
    a26e:	e7f6      	b.n	a25e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    a270:	463b      	mov	r3, r7
    a272:	4a1a      	ldr	r2, [pc, #104]	; (a2dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    a274:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    a278:	4919      	ldr	r1, [pc, #100]	; (a2e0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    a27a:	4648      	mov	r0, r9
    a27c:	f009 fc82 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    a280:	2001      	movs	r0, #1
    a282:	e7ec      	b.n	a25e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    a284:	4620      	mov	r0, r4
    a286:	f008 ff3a 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a28a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a28c:	4628      	mov	r0, r5
    a28e:	f008 ff3c 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a292:	2806      	cmp	r0, #6
    a294:	d914      	bls.n	a2c0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    a296:	1da8      	adds	r0, r5, #6
    a298:	f008 ff37 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a29c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a29e:	b188      	cbz	r0, a2c4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    a2a0:	4620      	mov	r0, r4
    a2a2:	f008 ff26 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a2a6:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    a2a8:	b171      	cbz	r1, a2c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    a2aa:	f8d8 3000 	ldr.w	r3, [r8]
    a2ae:	685b      	ldr	r3, [r3, #4]
    a2b0:	463a      	mov	r2, r7
    a2b2:	3104      	adds	r1, #4
    a2b4:	4640      	mov	r0, r8
    a2b6:	4798      	blx	r3
    a2b8:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a2ba:	b158      	cbz	r0, a2d4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    a2bc:	2000      	movs	r0, #0
    a2be:	e7ce      	b.n	a25e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2c0:	2000      	movs	r0, #0
    a2c2:	e7eb      	b.n	a29c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a2c4:	2100      	movs	r1, #0
    a2c6:	e7ef      	b.n	a2a8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    a2c8:	4906      	ldr	r1, [pc, #24]	; (a2e4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    a2ca:	4648      	mov	r0, r9
    a2cc:	f009 fc5a 	bl	13b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a2d0:	2001      	movs	r0, #1
    a2d2:	e7c4      	b.n	a25e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    a2d4:	2001      	movs	r0, #1
    a2d6:	e7c2      	b.n	a25e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    a2d8:	0006ae0c 	.word	0x0006ae0c
    a2dc:	00069b54 	.word	0x00069b54
    a2e0:	0006ae60 	.word	0x0006ae60
    a2e4:	0006af04 	.word	0x0006af04

0000a2e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    a2e8:	2801      	cmp	r0, #1
    a2ea:	d009      	beq.n	a300 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    a2ec:	2803      	cmp	r0, #3
    a2ee:	d00c      	beq.n	a30a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    a2f0:	2802      	cmp	r0, #2
    a2f2:	d00f      	beq.n	a314 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    a2f4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    a2f8:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a2fa:	4b09      	ldr	r3, [pc, #36]	; (a320 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a2fc:	6013      	str	r3, [r2, #0]
  }
}
    a2fe:	4770      	bx	lr
    *activation_min = 0;
    a300:	2300      	movs	r3, #0
    a302:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a304:	4b06      	ldr	r3, [pc, #24]	; (a320 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a306:	6013      	str	r3, [r2, #0]
    a308:	4770      	bx	lr
    *activation_min = 0;
    a30a:	2300      	movs	r3, #0
    a30c:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    a30e:	4b05      	ldr	r3, [pc, #20]	; (a324 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    a310:	6013      	str	r3, [r2, #0]
    a312:	4770      	bx	lr
    *activation_min = -1;
    a314:	4b04      	ldr	r3, [pc, #16]	; (a328 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    a316:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    a318:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    a31c:	6013      	str	r3, [r2, #0]
    a31e:	4770      	bx	lr
    a320:	7f7fffff 	.word	0x7f7fffff
    a324:	40c00000 	.word	0x40c00000
    a328:	bf800000 	.word	0xbf800000

0000a32c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a330:	b0a5      	sub	sp, #148	; 0x94
    a332:	9118      	str	r1, [sp, #96]	; 0x60
    a334:	9219      	str	r2, [sp, #100]	; 0x64
    a336:	461d      	mov	r5, r3
    a338:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
    a33c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    a33e:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  const int stride_width = params.stride_width;
    a342:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    a346:	920e      	str	r2, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    a348:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    a34c:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
    a34e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    a352:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
    a354:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    a358:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
    a35a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    a35e:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
    a360:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    a364:	9213      	str	r2, [sp, #76]	; 0x4c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    a366:	6a82      	ldr	r2, [r0, #40]	; 0x28
    a368:	921d      	str	r2, [sp, #116]	; 0x74
  const int32_t output_activation_max = params.quantized_activation_max;
    a36a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    a36c:	911c      	str	r1, [sp, #112]	; 0x70

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    a36e:	428a      	cmp	r2, r1
    a370:	f300 8086 	bgt.w	a480 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x154>
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
    a374:	682a      	ldr	r2, [r5, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a376:	2a04      	cmp	r2, #4
    a378:	f040 8084 	bne.w	a484 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    a37c:	f8de 2000 	ldr.w	r2, [lr]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a380:	2a04      	cmp	r2, #4
    a382:	f040 8081 	bne.w	a488 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x15c>
    a386:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a38a:	2a04      	cmp	r2, #4
    a38c:	d17e      	bne.n	a48c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x160>
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
    TFLITE_DCHECK_LT(i, size_);
    a38e:	682a      	ldr	r2, [r5, #0]
    a390:	2a00      	cmp	r2, #0
    a392:	dd7d      	ble.n	a490 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x164>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a394:	2a05      	cmp	r2, #5
    a396:	dd7d      	ble.n	a494 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x168>
    a398:	686a      	ldr	r2, [r5, #4]
    a39a:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a39c:	f8d9 2000 	ldr.w	r2, [r9]
    a3a0:	2a00      	cmp	r2, #0
    a3a2:	dd79      	ble.n	a498 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a3a4:	2a05      	cmp	r2, #5
    a3a6:	dd79      	ble.n	a49c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x170>
    a3a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a3ac:	6812      	ldr	r2, [r2, #0]
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a3ae:	428a      	cmp	r2, r1
    a3b0:	d177      	bne.n	a4a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a3b2:	9123      	str	r1, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    a3b4:	f8d9 2000 	ldr.w	r2, [r9]
    a3b8:	2a00      	cmp	r2, #0
    a3ba:	dd74      	ble.n	a4a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a3bc:	2a05      	cmp	r2, #5
    a3be:	dd74      	ble.n	a4aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17e>
    a3c0:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a3c4:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a3c6:	9222      	str	r2, [sp, #136]	; 0x88
      if (__b < __a)
    a3c8:	4291      	cmp	r1, r2
    a3ca:	dc71      	bgt.n	a4b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x184>
      return __a;
    a3cc:	aa23      	add	r2, sp, #140	; 0x8c
    a3ce:	6812      	ldr	r2, [r2, #0]
    a3d0:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    a3d2:	682a      	ldr	r2, [r5, #0]
    a3d4:	2a03      	cmp	r2, #3
    a3d6:	dd6d      	ble.n	a4b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a3d8:	2a05      	cmp	r2, #5
    a3da:	dd6d      	ble.n	a4b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x18c>
    a3dc:	686a      	ldr	r2, [r5, #4]
    a3de:	68d1      	ldr	r1, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    a3e0:	f8de 2000 	ldr.w	r2, [lr]
    a3e4:	2a03      	cmp	r2, #3
    a3e6:	dd69      	ble.n	a4bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x190>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a3e8:	2a05      	cmp	r2, #5
    a3ea:	dd69      	ble.n	a4c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x194>
    a3ec:	f8de 2004 	ldr.w	r2, [lr, #4]
    a3f0:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a3f2:	428a      	cmp	r2, r1
    a3f4:	d167      	bne.n	a4c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a3f6:	9121      	str	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    a3f8:	f8de 2000 	ldr.w	r2, [lr]
    a3fc:	2a03      	cmp	r2, #3
    a3fe:	dd64      	ble.n	a4ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a400:	2a05      	cmp	r2, #5
    a402:	dd64      	ble.n	a4ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a2>
    a404:	f8de 2004 	ldr.w	r2, [lr, #4]
    a408:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a40a:	9220      	str	r2, [sp, #128]	; 0x80
      if (__b < __a)
    a40c:	4291      	cmp	r1, r2
    a40e:	dc61      	bgt.n	a4d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a8>
      return __a;
    a410:	aa21      	add	r2, sp, #132	; 0x84
    a412:	6812      	ldr	r2, [r2, #0]
    a414:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    a416:	f8de 2000 	ldr.w	r2, [lr]
    a41a:	2a00      	cmp	r2, #0
    a41c:	dd5c      	ble.n	a4d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a41e:	2a05      	cmp	r2, #5
    a420:	dd5c      	ble.n	a4dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
    a422:	f8de 2004 	ldr.w	r2, [lr, #4]
    a426:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a428:	f8d9 2000 	ldr.w	r2, [r9]
    a42c:	2a03      	cmp	r2, #3
    a42e:	dd58      	ble.n	a4e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a430:	2a05      	cmp	r2, #5
    a432:	dd58      	ble.n	a4e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ba>
    a434:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a438:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a43a:	428a      	cmp	r2, r1
    a43c:	d156      	bne.n	a4ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a43e:	911f      	str	r1, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
    a440:	f8d9 2000 	ldr.w	r2, [r9]
    a444:	2a03      	cmp	r2, #3
    a446:	dd53      	ble.n	a4f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a448:	2a05      	cmp	r2, #5
    a44a:	dd53      	ble.n	a4f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c8>
    a44c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a450:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a452:	921e      	str	r2, [sp, #120]	; 0x78
      if (__b < __a)
    a454:	4291      	cmp	r1, r2
    a456:	dc50      	bgt.n	a4fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ce>
      return __a;
    a458:	aa1f      	add	r2, sp, #124	; 0x7c
    a45a:	6812      	ldr	r2, [r2, #0]
    a45c:	9205      	str	r2, [sp, #20]
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    a45e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    a460:	2a00      	cmp	r2, #0
    a462:	d051      	beq.n	a508 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a464:	6818      	ldr	r0, [r3, #0]
    a466:	2805      	cmp	r0, #5
    a468:	dd49      	ble.n	a4fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d2>
    a46a:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    a46c:	2100      	movs	r1, #0
    int buffer_size = 1;
    a46e:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
    a470:	4281      	cmp	r1, r0
    a472:	da46      	bge.n	a502 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d6>
      buffer_size *= dims_data[i];
    a474:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    a478:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
    a47c:	3101      	adds	r1, #1
    a47e:	e7f7      	b.n	a470 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    a480:	f00b fda0 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a484:	f00b fd9e 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a488:	f00b fd9c 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a48c:	f00b fd9a 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a490:	f00b fd98 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a494:	6869      	ldr	r1, [r5, #4]
    a496:	e781      	b.n	a39c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x70>
    TFLITE_DCHECK_LT(i, size_);
    a498:	f00b fd94 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a49c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a4a0:	e785      	b.n	a3ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x82>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a4a2:	f00b fd8f 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a4a6:	f00b fd8d 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a4aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a4ae:	e78a      	b.n	a3c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x9a>
	return __b;
    a4b0:	aa22      	add	r2, sp, #136	; 0x88
    a4b2:	e78c      	b.n	a3ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xa2>
    TFLITE_DCHECK_LT(i, size_);
    a4b4:	f00b fd86 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a4b8:	6929      	ldr	r1, [r5, #16]
    a4ba:	e791      	b.n	a3e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    a4bc:	f00b fd82 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a4c0:	f8de 2010 	ldr.w	r2, [lr, #16]
    a4c4:	e795      	b.n	a3f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a4c6:	f00b fd7d 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a4ca:	f00b fd7b 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a4ce:	f8de 2010 	ldr.w	r2, [lr, #16]
    a4d2:	e79a      	b.n	a40a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xde>
    a4d4:	aa20      	add	r2, sp, #128	; 0x80
    a4d6:	e79c      	b.n	a412 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    TFLITE_DCHECK_LT(i, size_);
    a4d8:	f00b fd74 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a4dc:	f8de 1004 	ldr.w	r1, [lr, #4]
    a4e0:	e7a2      	b.n	a428 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    a4e2:	f00b fd6f 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a4e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a4ea:	e7a6      	b.n	a43a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a4ec:	f00b fd6a 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a4f0:	f00b fd68 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a4f4:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a4f8:	e7ab      	b.n	a452 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x126>
    a4fa:	aa1e      	add	r2, sp, #120	; 0x78
    a4fc:	e7ad      	b.n	a45a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x12e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a4fe:	3304      	adds	r3, #4
    a500:	e7b4      	b.n	a46c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x140>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a502:	9b05      	ldr	r3, [sp, #20]
    a504:	429c      	cmp	r4, r3
    a506:	d160      	bne.n	a5ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x29e>
    TFLITE_DCHECK_LT(i, size_);
    a508:	682b      	ldr	r3, [r5, #0]
    a50a:	2b01      	cmp	r3, #1
    a50c:	dd5f      	ble.n	a5ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a50e:	2b05      	cmp	r3, #5
    a510:	dd5f      	ble.n	a5d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a6>
    a512:	686b      	ldr	r3, [r5, #4]
    a514:	685b      	ldr	r3, [r3, #4]
    a516:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    a518:	682b      	ldr	r3, [r5, #0]
    a51a:	2b02      	cmp	r3, #2
    a51c:	dd5c      	ble.n	a5d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a51e:	2b05      	cmp	r3, #5
    a520:	dd5c      	ble.n	a5dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b0>
    a522:	686b      	ldr	r3, [r5, #4]
    a524:	689b      	ldr	r3, [r3, #8]
    a526:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    a528:	f8de 3000 	ldr.w	r3, [lr]
    a52c:	2b01      	cmp	r3, #1
    a52e:	dd58      	ble.n	a5e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a530:	2b05      	cmp	r3, #5
    a532:	dd58      	ble.n	a5e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ba>
    a534:	f8de 3004 	ldr.w	r3, [lr, #4]
    a538:	685b      	ldr	r3, [r3, #4]
    a53a:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    a53c:	f8de 3000 	ldr.w	r3, [lr]
    a540:	2b02      	cmp	r3, #2
    a542:	dd54      	ble.n	a5ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a544:	2b05      	cmp	r3, #5
    a546:	dd54      	ble.n	a5f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c6>
    a548:	f8de 3004 	ldr.w	r3, [lr, #4]
    a54c:	689b      	ldr	r3, [r3, #8]
    a54e:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    a550:	f8d9 3000 	ldr.w	r3, [r9]
    a554:	2b01      	cmp	r3, #1
    a556:	dd50      	ble.n	a5fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a558:	2b05      	cmp	r3, #5
    a55a:	dd50      	ble.n	a5fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d2>
    a55c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a560:	685b      	ldr	r3, [r3, #4]
    a562:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    a564:	f8d9 3000 	ldr.w	r3, [r9]
    a568:	2b02      	cmp	r3, #2
    a56a:	dd4c      	ble.n	a606 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a56c:	2b05      	cmp	r3, #5
    a56e:	dd4c      	ble.n	a60a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2de>
    a570:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a574:	689b      	ldr	r3, [r3, #8]
    a576:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    a578:	2300      	movs	r3, #0
    a57a:	9300      	str	r3, [sp, #0]
    a57c:	46f0      	mov	r8, lr
    a57e:	464c      	mov	r4, r9
    a580:	46a9      	mov	r9, r5
    a582:	9b00      	ldr	r3, [sp, #0]
    a584:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a586:	4293      	cmp	r3, r2
    a588:	f280 8190 	bge.w	a8ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x580>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a58c:	2300      	movs	r3, #0
    a58e:	9301      	str	r3, [sp, #4]
    a590:	46ce      	mov	lr, r9
    a592:	46c1      	mov	r9, r8
    a594:	9b01      	ldr	r3, [sp, #4]
    a596:	9907      	ldr	r1, [sp, #28]
    a598:	428b      	cmp	r3, r1
    a59a:	f280 8181 	bge.w	a8a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x574>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    a59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a5a0:	fb02 f303 	mul.w	r3, r2, r3
    a5a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a5a6:	1a9b      	subs	r3, r3, r2
    a5a8:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a5aa:	2300      	movs	r3, #0
    a5ac:	9304      	str	r3, [sp, #16]
    a5ae:	46f0      	mov	r8, lr
    a5b0:	9b04      	ldr	r3, [sp, #16]
    a5b2:	9906      	ldr	r1, [sp, #24]
    a5b4:	428b      	cmp	r3, r1
    a5b6:	f280 816e 	bge.w	a896 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x56a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    a5ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a5bc:	fb02 f303 	mul.w	r3, r2, r3
    a5c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a5c2:	1a9b      	subs	r3, r3, r2
    a5c4:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    a5c6:	2100      	movs	r1, #0
    a5c8:	e135      	b.n	a836 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x50a>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a5ca:	f00b fcfb 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a5ce:	f00b fcf9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5d2:	68ab      	ldr	r3, [r5, #8]
    a5d4:	930b      	str	r3, [sp, #44]	; 0x2c
    a5d6:	e79f      	b.n	a518 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    a5d8:	f00b fcf4 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5dc:	68eb      	ldr	r3, [r5, #12]
    a5de:	930a      	str	r3, [sp, #40]	; 0x28
    a5e0:	e7a2      	b.n	a528 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fc>
    TFLITE_DCHECK_LT(i, size_);
    a5e2:	f00b fcef 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5e6:	f8de 3008 	ldr.w	r3, [lr, #8]
    a5ea:	9309      	str	r3, [sp, #36]	; 0x24
    a5ec:	e7a6      	b.n	a53c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x210>
    TFLITE_DCHECK_LT(i, size_);
    a5ee:	f00b fce9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5f2:	f8de 300c 	ldr.w	r3, [lr, #12]
    a5f6:	9308      	str	r3, [sp, #32]
    a5f8:	e7aa      	b.n	a550 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x224>
    TFLITE_DCHECK_LT(i, size_);
    a5fa:	f00b fce3 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5fe:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a602:	9307      	str	r3, [sp, #28]
    a604:	e7ae      	b.n	a564 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x238>
    TFLITE_DCHECK_LT(i, size_);
    a606:	f00b fcdd 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a60a:	f8d9 300c 	ldr.w	r3, [r9, #12]
    a60e:	9306      	str	r3, [sp, #24]
    a610:	e7b2      	b.n	a578 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x24c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a612:	f00b fcd7 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a616:	f00b fcd5 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a61a:	f00b fcd3 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a61e:	f00b fcd1 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a622:	f00b fccf 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a626:	f00b fccd 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a62a:	f00b fccb 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a62e:	f00b fcc9 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a632:	f00b fcc7 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a636:	f00b fcc5 	bl	15fc4 <abort>
    a63a:	9c33      	ldr	r4, [sp, #204]	; 0xcc
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a63c:	3501      	adds	r5, #1
    a63e:	9b08      	ldr	r3, [sp, #32]
    a640:	429d      	cmp	r5, r3
    a642:	da68      	bge.n	a716 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    a644:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a646:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a648:	fb03 2205 	mla	r2, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    a64c:	2a00      	cmp	r2, #0
    a64e:	dbf5      	blt.n	a63c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a652:	429a      	cmp	r2, r3
    a654:	daf2      	bge.n	a63c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a656:	2f00      	cmp	r7, #0
    a658:	dbf0      	blt.n	a63c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a65c:	429f      	cmp	r7, r3
    a65e:	daed      	bge.n	a63c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a660:	2300      	movs	r3, #0
    a662:	9433      	str	r4, [sp, #204]	; 0xcc

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    a664:	9c16      	ldr	r4, [sp, #88]	; 0x58
    a666:	42a3      	cmp	r3, r4
    a668:	dae7      	bge.n	a63a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a66a:	f8d8 4000 	ldr.w	r4, [r8]
    a66e:	2c04      	cmp	r4, #4
    a670:	d1cf      	bne.n	a612 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a672:	2800      	cmp	r0, #0
    a674:	dbcf      	blt.n	a616 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
    a676:	f8d8 4004 	ldr.w	r4, [r8, #4]
    a67a:	42a0      	cmp	r0, r4
    a67c:	dacb      	bge.n	a616 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a67e:	2f00      	cmp	r7, #0
    a680:	dbcb      	blt.n	a61a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
    a682:	f8d8 a008 	ldr.w	sl, [r8, #8]
    a686:	4557      	cmp	r7, sl
    a688:	dac7      	bge.n	a61a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a68a:	2a00      	cmp	r2, #0
    a68c:	dbc7      	blt.n	a61e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
    a68e:	f8d8 e00c 	ldr.w	lr, [r8, #12]
    a692:	4572      	cmp	r2, lr
    a694:	dac3      	bge.n	a61e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a696:	2b00      	cmp	r3, #0
    a698:	dbc3      	blt.n	a622 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
    a69a:	f8d8 c010 	ldr.w	ip, [r8, #16]
    a69e:	4563      	cmp	r3, ip
    a6a0:	dabf      	bge.n	a622 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    a6a2:	fb0a 7a00 	mla	sl, sl, r0, r7
    a6a6:	fb0a 2a0e 	mla	sl, sl, lr, r2
    a6aa:	fb0a 3c0c 	mla	ip, sl, ip, r3
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    a6ae:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    a6b0:	f934 e01c 	ldrsh.w	lr, [r4, ip, lsl #1]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a6b4:	f8d9 4000 	ldr.w	r4, [r9]
    a6b8:	2c04      	cmp	r4, #4
    a6ba:	d1b4      	bne.n	a626 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fa>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a6bc:	2900      	cmp	r1, #0
    a6be:	dbb4      	blt.n	a62a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
    a6c0:	f8d9 4004 	ldr.w	r4, [r9, #4]
    a6c4:	42a1      	cmp	r1, r4
    a6c6:	dab0      	bge.n	a62a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a6c8:	2e00      	cmp	r6, #0
    a6ca:	dbb0      	blt.n	a62e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
    a6cc:	f8d9 c008 	ldr.w	ip, [r9, #8]
    a6d0:	4566      	cmp	r6, ip
    a6d2:	daac      	bge.n	a62e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a6d4:	2d00      	cmp	r5, #0
    a6d6:	dbac      	blt.n	a632 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
    a6d8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
    a6dc:	455d      	cmp	r5, fp
    a6de:	daa8      	bge.n	a632 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	dba8      	blt.n	a636 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
    a6e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
    a6e8:	4553      	cmp	r3, sl
    a6ea:	daa4      	bge.n	a636 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    a6ec:	fb0c 6c01 	mla	ip, ip, r1, r6
    a6f0:	fb0c 5c0b 	mla	ip, ip, fp, r5
    a6f4:	fb0c 3c0a 	mla	ip, ip, sl, r3
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    a6f8:	9c30      	ldr	r4, [sp, #192]	; 0xc0
    a6fa:	f914 c00c 	ldrsb.w	ip, [r4, ip]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    a6fe:	fb0c fe0e 	mul.w	lr, ip, lr
    a702:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    a706:	eb1a 0a0e 	adds.w	sl, sl, lr
    a70a:	eb4b 7bee 	adc.w	fp, fp, lr, asr #31
    a70e:	e9cd ab02 	strd	sl, fp, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    a712:	3301      	adds	r3, #1
    a714:	e7a6      	b.n	a664 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x338>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a716:	3601      	adds	r6, #1
    a718:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a71a:	429e      	cmp	r6, r3
    a71c:	da06      	bge.n	a72c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x400>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    a71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a720:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a722:	fb03 2706 	mla	r7, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a726:	2500      	movs	r5, #0
    a728:	9800      	ldr	r0, [sp, #0]
    a72a:	e788      	b.n	a63e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x312>
    a72c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
              }
            }
          }
          if (bias_data) {
    a730:	9832      	ldr	r0, [sp, #200]	; 0xc8
    a732:	b130      	cbz	r0, a742 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x416>
            acc += bias_data[out_channel];
    a734:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    a738:	6828      	ldr	r0, [r5, #0]
    a73a:	686d      	ldr	r5, [r5, #4]
    a73c:	1812      	adds	r2, r2, r0
    a73e:	eb45 0303 	adc.w	r3, r5, r3
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    a742:	9818      	ldr	r0, [sp, #96]	; 0x60
    a744:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    a748:	9d19      	ldr	r5, [sp, #100]	; 0x64
    a74a:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
    a74e:	2800      	cmp	r0, #0
    a750:	db7a      	blt.n	a848 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x51c>
  assert(shift >= -31 && shift < 8);
    a752:	f105 061f 	add.w	r6, r5, #31
    a756:	2e26      	cmp	r6, #38	; 0x26
    a758:	d87c      	bhi.n	a854 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x528>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    a75a:	1c16      	adds	r6, r2, #0
    a75c:	960c      	str	r6, [sp, #48]	; 0x30
    a75e:	f543 4600 	adc.w	r6, r3, #32768	; 0x8000
    a762:	960d      	str	r6, [sp, #52]	; 0x34
    a764:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    a768:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    a76c:	bf08      	it	eq
    a76e:	2e00      	cmpeq	r6, #0
    a770:	d276      	bcs.n	a860 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x534>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    a772:	4e50      	ldr	r6, [pc, #320]	; (a8b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x588>)
    a774:	42b0      	cmp	r0, r6
    a776:	dc79      	bgt.n	a86c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x540>
    a778:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    a77c:	1400      	asrs	r0, r0, #16
                                   : 0x7FFF;
  int total_shift = 15 - shift;
    a77e:	f1c5 0c0f 	rsb	ip, r5, #15
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    a782:	17c7      	asrs	r7, r0, #31
    a784:	fb02 f607 	mul.w	r6, r2, r7
    a788:	fb00 6603 	mla	r6, r0, r3, r6
    a78c:	fba2 2300 	umull	r2, r3, r2, r0
    a790:	4433      	add	r3, r6
    a792:	f1c5 070e 	rsb	r7, r5, #14
    a796:	2001      	movs	r0, #1
    a798:	f1a7 0a20 	sub.w	sl, r7, #32
    a79c:	f1c7 0e20 	rsb	lr, r7, #32
    a7a0:	fa00 f60a 	lsl.w	r6, r0, sl
    a7a4:	fa20 fe0e 	lsr.w	lr, r0, lr
    a7a8:	ea46 060e 	orr.w	r6, r6, lr
    a7ac:	40b8      	lsls	r0, r7
    a7ae:	1810      	adds	r0, r2, r0
    a7b0:	eb43 0606 	adc.w	r6, r3, r6
  int32_t result = x >> total_shift;
    a7b4:	3511      	adds	r5, #17
    a7b6:	f1bc 0320 	subs.w	r3, ip, #32
    a7ba:	fa20 f00c 	lsr.w	r0, r0, ip
    a7be:	fa06 f505 	lsl.w	r5, r6, r5
    a7c2:	ea40 0005 	orr.w	r0, r0, r5
    a7c6:	d402      	bmi.n	a7ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4a2>
    a7c8:	fa46 f303 	asr.w	r3, r6, r3
    a7cc:	4318      	orrs	r0, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
    a7ce:	901b      	str	r0, [sp, #108]	; 0x6c
      if (__a < __b)
    a7d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a7d2:	4283      	cmp	r3, r0
    a7d4:	dc4d      	bgt.n	a872 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x546>
      return __a;
    a7d6:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::max(scaled_acc, output_activation_min);
    a7d8:	681a      	ldr	r2, [r3, #0]
    a7da:	921b      	str	r2, [sp, #108]	; 0x6c
      if (__b < __a)
    a7dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a7de:	429a      	cmp	r2, r3
    a7e0:	dc49      	bgt.n	a876 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54a>
      return __a;
    a7e2:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::min(scaled_acc, output_activation_max);
    a7e4:	681a      	ldr	r2, [r3, #0]
    a7e6:	921b      	str	r2, [sp, #108]	; 0x6c
  inline int32_t DimensionsCount() const { return size_; }
    a7e8:	6823      	ldr	r3, [r4, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a7ea:	2b04      	cmp	r3, #4
    a7ec:	d145      	bne.n	a87a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a7ee:	9800      	ldr	r0, [sp, #0]
    a7f0:	2800      	cmp	r0, #0
    a7f2:	db44      	blt.n	a87e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
    a7f4:	6863      	ldr	r3, [r4, #4]
    a7f6:	4298      	cmp	r0, r3
    a7f8:	da41      	bge.n	a87e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a7fa:	9b01      	ldr	r3, [sp, #4]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	db40      	blt.n	a882 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
    a800:	68a5      	ldr	r5, [r4, #8]
    a802:	42ab      	cmp	r3, r5
    a804:	da3d      	bge.n	a882 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a806:	9b04      	ldr	r3, [sp, #16]
    a808:	2b00      	cmp	r3, #0
    a80a:	db3c      	blt.n	a886 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
    a80c:	68e0      	ldr	r0, [r4, #12]
    a80e:	4283      	cmp	r3, r0
    a810:	da39      	bge.n	a886 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a812:	2900      	cmp	r1, #0
    a814:	db39      	blt.n	a88a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
    a816:	6923      	ldr	r3, [r4, #16]
    a818:	4299      	cmp	r1, r3
    a81a:	da36      	bge.n	a88a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    a81c:	9e00      	ldr	r6, [sp, #0]
    a81e:	9f01      	ldr	r7, [sp, #4]
    a820:	fb05 7506 	mla	r5, r5, r6, r7
    a824:	9e04      	ldr	r6, [sp, #16]
    a826:	fb05 6000 	mla	r0, r5, r0, r6
    a82a:	fb00 1303 	mla	r3, r0, r3, r1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    a82e:	9834      	ldr	r0, [sp, #208]	; 0xd0
    a830:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    a834:	3101      	adds	r1, #1
    a836:	9b05      	ldr	r3, [sp, #20]
    a838:	4299      	cmp	r1, r3
    a83a:	da28      	bge.n	a88e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x562>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a83c:	2600      	movs	r6, #0
          std::int64_t acc = 0;
    a83e:	2200      	movs	r2, #0
    a840:	2300      	movs	r3, #0
    a842:	e9cd 2302 	strd	r2, r3, [sp, #8]
    a846:	e767      	b.n	a718 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ec>
  assert(quantized_multiplier >= 0);
    a848:	4b1b      	ldr	r3, [pc, #108]	; (a8b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58c>)
    a84a:	4a1c      	ldr	r2, [pc, #112]	; (a8bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    a84c:	21b3      	movs	r1, #179	; 0xb3
    a84e:	481c      	ldr	r0, [pc, #112]	; (a8c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    a850:	f005 ffb6 	bl	107c0 <__assert_func>
  assert(shift >= -31 && shift < 8);
    a854:	4b1b      	ldr	r3, [pc, #108]	; (a8c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x598>)
    a856:	4a19      	ldr	r2, [pc, #100]	; (a8bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    a858:	21b4      	movs	r1, #180	; 0xb4
    a85a:	4819      	ldr	r0, [pc, #100]	; (a8c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    a85c:	f005 ffb0 	bl	107c0 <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    a860:	4b19      	ldr	r3, [pc, #100]	; (a8c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x59c>)
    a862:	4a16      	ldr	r2, [pc, #88]	; (a8bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    a864:	21b5      	movs	r1, #181	; 0xb5
    a866:	4816      	ldr	r0, [pc, #88]	; (a8c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    a868:	f005 ffaa 	bl	107c0 <__assert_func>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    a86c:	f647 70ff 	movw	r0, #32767	; 0x7fff
    a870:	e785      	b.n	a77e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x452>
	return __b;
    a872:	ab1d      	add	r3, sp, #116	; 0x74
    a874:	e7b0      	b.n	a7d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4ac>
	return __b;
    a876:	ab1c      	add	r3, sp, #112	; 0x70
    a878:	e7b4      	b.n	a7e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4b8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a87a:	f00b fba3 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a87e:	f00b fba1 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a882:	f00b fb9f 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a886:	f00b fb9d 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a88a:	f00b fb9b 	bl	15fc4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a88e:	9b04      	ldr	r3, [sp, #16]
    a890:	3301      	adds	r3, #1
    a892:	9304      	str	r3, [sp, #16]
    a894:	e68c      	b.n	a5b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x284>
    a896:	46c6      	mov	lr, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a898:	9b01      	ldr	r3, [sp, #4]
    a89a:	3301      	adds	r3, #1
    a89c:	9301      	str	r3, [sp, #4]
    a89e:	e679      	b.n	a594 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x268>
    a8a0:	46c8      	mov	r8, r9
    a8a2:	46f1      	mov	r9, lr
  for (int batch = 0; batch < batches; ++batch) {
    a8a4:	9b00      	ldr	r3, [sp, #0]
    a8a6:	3301      	adds	r3, #1
    a8a8:	9300      	str	r3, [sp, #0]
    a8aa:	e66a      	b.n	a582 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x256>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    a8ac:	b025      	add	sp, #148	; 0x94
    a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8b2:	bf00      	nop
    a8b4:	7ffeffff 	.word	0x7ffeffff
    a8b8:	0006af3c 	.word	0x0006af3c
    a8bc:	0006af58 	.word	0x0006af58
    a8c0:	0006afa0 	.word	0x0006afa0
    a8c4:	0006aff0 	.word	0x0006aff0
    a8c8:	0006b00c 	.word	0x0006b00c

0000a8cc <_ZN6tflite16Register_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    a8cc:	b470      	push	{r4, r5, r6}
    a8ce:	4606      	mov	r6, r0
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    a8d0:	4604      	mov	r4, r0
    a8d2:	4d05      	ldr	r5, [pc, #20]	; (a8e8 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
    a8d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a8d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a8dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    a8e0:	4630      	mov	r0, r6
    a8e2:	bc70      	pop	{r4, r5, r6}
    a8e4:	4770      	bx	lr
    a8e6:	bf00      	nop
    a8e8:	0006847c 	.word	0x0006847c

0000a8ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    int8_t* output_data) {
    a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8f0:	b0a7      	sub	sp, #156	; 0x9c
    a8f2:	911a      	str	r1, [sp, #104]	; 0x68
    a8f4:	921b      	str	r2, [sp, #108]	; 0x6c
    a8f6:	469a      	mov	sl, r3
    a8f8:	9f31      	ldr	r7, [sp, #196]	; 0xc4
    a8fa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    a8fc:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    a900:	6942      	ldr	r2, [r0, #20]
    a902:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_width = params.stride_width;
    a904:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    a908:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    a90a:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    a90e:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    a910:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    a914:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    a916:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    a91a:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    a91c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    a920:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
    a922:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    a926:	9212      	str	r2, [sp, #72]	; 0x48
  const int32_t output_offset = params.output_offset;
    a928:	69c2      	ldr	r2, [r0, #28]
    a92a:	9213      	str	r2, [sp, #76]	; 0x4c
  const int32_t output_activation_min = params.quantized_activation_min;
    a92c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    a92e:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    a930:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    a932:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    a934:	4291      	cmp	r1, r2
    a936:	f300 8082 	bgt.w	aa3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
  inline int32_t DimensionsCount() const { return size_; }
    a93a:	f8da 2000 	ldr.w	r2, [sl]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a93e:	2a04      	cmp	r2, #4
    a940:	d17f      	bne.n	aa42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
    a942:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a944:	2a04      	cmp	r2, #4
    a946:	d17e      	bne.n	aa46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15a>
    a948:	f8d8 2000 	ldr.w	r2, [r8]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a94c:	2a04      	cmp	r2, #4
    a94e:	d17c      	bne.n	aa4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15e>
    TFLITE_DCHECK_LT(i, size_);
    a950:	f8da 2000 	ldr.w	r2, [sl]
    a954:	2a00      	cmp	r2, #0
    a956:	dd7a      	ble.n	aa4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a958:	2a05      	cmp	r2, #5
    a95a:	dd7a      	ble.n	aa52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
    a95c:	f8da 2004 	ldr.w	r2, [sl, #4]
    a960:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a962:	f8d8 1000 	ldr.w	r1, [r8]
    a966:	2900      	cmp	r1, #0
    a968:	dd76      	ble.n	aa58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a96a:	2905      	cmp	r1, #5
    a96c:	dd76      	ble.n	aa5c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x170>
    a96e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a972:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a974:	4291      	cmp	r1, r2
    a976:	d174      	bne.n	aa62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a978:	9225      	str	r2, [sp, #148]	; 0x94
    TFLITE_DCHECK_LT(i, size_);
    a97a:	f8d8 1000 	ldr.w	r1, [r8]
    a97e:	2900      	cmp	r1, #0
    a980:	dd71      	ble.n	aa66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a982:	2905      	cmp	r1, #5
    a984:	dd71      	ble.n	aa6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
    a986:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a98a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a98c:	9124      	str	r1, [sp, #144]	; 0x90
      if (__b < __a)
    a98e:	428a      	cmp	r2, r1
    a990:	dc6e      	bgt.n	aa70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      return __a;
    a992:	aa25      	add	r2, sp, #148	; 0x94
    a994:	6812      	ldr	r2, [r2, #0]
    a996:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    a998:	f8da 2000 	ldr.w	r2, [sl]
    a99c:	2a03      	cmp	r2, #3
    a99e:	dd69      	ble.n	aa74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a9a0:	2a05      	cmp	r2, #5
    a9a2:	dd69      	ble.n	aa78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
    a9a4:	f8da 2004 	ldr.w	r2, [sl, #4]
    a9a8:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    a9aa:	6839      	ldr	r1, [r7, #0]
    a9ac:	2903      	cmp	r1, #3
    a9ae:	dd66      	ble.n	aa7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a9b0:	2905      	cmp	r1, #5
    a9b2:	dd66      	ble.n	aa82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x196>
    a9b4:	6879      	ldr	r1, [r7, #4]
    a9b6:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a9b8:	4291      	cmp	r1, r2
    a9ba:	d164      	bne.n	aa86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a9bc:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    a9be:	6839      	ldr	r1, [r7, #0]
    a9c0:	2903      	cmp	r1, #3
    a9c2:	dd62      	ble.n	aa8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a9c4:	2905      	cmp	r1, #5
    a9c6:	dd62      	ble.n	aa8e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    a9c8:	6879      	ldr	r1, [r7, #4]
    a9ca:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a9cc:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    a9ce:	428a      	cmp	r2, r1
    a9d0:	dc5f      	bgt.n	aa92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
      return __a;
    a9d2:	aa23      	add	r2, sp, #140	; 0x8c
    a9d4:	6812      	ldr	r2, [r2, #0]
    a9d6:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    a9d8:	683a      	ldr	r2, [r7, #0]
    a9da:	2a00      	cmp	r2, #0
    a9dc:	dd5b      	ble.n	aa96 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a9de:	2a05      	cmp	r2, #5
    a9e0:	dd5b      	ble.n	aa9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
    a9e2:	687a      	ldr	r2, [r7, #4]
    a9e4:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a9e6:	f8d8 1000 	ldr.w	r1, [r8]
    a9ea:	2903      	cmp	r1, #3
    a9ec:	dd57      	ble.n	aa9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a9ee:	2905      	cmp	r1, #5
    a9f0:	dd57      	ble.n	aaa2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
    a9f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a9f6:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a9f8:	4291      	cmp	r1, r2
    a9fa:	d155      	bne.n	aaa8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a9fc:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    a9fe:	f8d8 1000 	ldr.w	r1, [r8]
    aa02:	2903      	cmp	r1, #3
    aa04:	dd52      	ble.n	aaac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa06:	2905      	cmp	r1, #5
    aa08:	dd52      	ble.n	aab0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    aa0a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aa0e:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    aa10:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    aa12:	428a      	cmp	r2, r1
    aa14:	dc4f      	bgt.n	aab6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ca>
      return __a;
    aa16:	aa21      	add	r2, sp, #132	; 0x84
    aa18:	6812      	ldr	r2, [r2, #0]
    aa1a:	9203      	str	r2, [sp, #12]
  if (bias_data) {
    aa1c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    aa1e:	2a00      	cmp	r2, #0
    aa20:	d050      	beq.n	aac4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa22:	681c      	ldr	r4, [r3, #0]
    aa24:	2c05      	cmp	r4, #5
    aa26:	dd48      	ble.n	aaba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
    aa28:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    aa2a:	2200      	movs	r2, #0
    int buffer_size = 1;
    aa2c:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    aa2e:	42a2      	cmp	r2, r4
    aa30:	da45      	bge.n	aabe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d2>
      buffer_size *= dims_data[i];
    aa32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    aa36:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
    aa3a:	3201      	adds	r2, #1
    aa3c:	e7f7      	b.n	aa2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    aa3e:	f00b fac1 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    aa42:	f00b fabf 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    aa46:	f00b fabd 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    aa4a:	f00b fabb 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa4e:	f00b fab9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa52:	f8da 2004 	ldr.w	r2, [sl, #4]
    aa56:	e784      	b.n	a962 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x76>
    TFLITE_DCHECK_LT(i, size_);
    aa58:	f00b fab4 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aa60:	e788      	b.n	a974 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x88>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    aa62:	f00b faaf 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa66:	f00b faad 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aa6e:	e78d      	b.n	a98c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
	return __b;
    aa70:	aa24      	add	r2, sp, #144	; 0x90
    aa72:	e78f      	b.n	a994 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    aa74:	f00b faa6 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa78:	f8da 2010 	ldr.w	r2, [sl, #16]
    aa7c:	e795      	b.n	a9aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xbe>
    TFLITE_DCHECK_LT(i, size_);
    aa7e:	f00b faa1 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa82:	6939      	ldr	r1, [r7, #16]
    aa84:	e798      	b.n	a9b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xcc>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    aa86:	f00b fa9d 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa8a:	f00b fa9b 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa8e:	6939      	ldr	r1, [r7, #16]
    aa90:	e79c      	b.n	a9cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
    aa92:	aa22      	add	r2, sp, #136	; 0x88
    aa94:	e79e      	b.n	a9d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    aa96:	f00b fa95 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa9a:	687a      	ldr	r2, [r7, #4]
    aa9c:	e7a3      	b.n	a9e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    aa9e:	f00b fa91 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aaa2:	f8d8 1010 	ldr.w	r1, [r8, #16]
    aaa6:	e7a7      	b.n	a9f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    aaa8:	f00b fa8c 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aaac:	f00b fa8a 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aab0:	f8d8 1010 	ldr.w	r1, [r8, #16]
    aab4:	e7ac      	b.n	aa10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
    aab6:	aa20      	add	r2, sp, #128	; 0x80
    aab8:	e7ae      	b.n	aa18 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aaba:	3304      	adds	r3, #4
    aabc:	e7b5      	b.n	aa2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    aabe:	9b03      	ldr	r3, [sp, #12]
    aac0:	4299      	cmp	r1, r3
    aac2:	d167      	bne.n	ab94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
    TFLITE_DCHECK_LT(i, size_);
    aac4:	f8da 3000 	ldr.w	r3, [sl]
    aac8:	2b01      	cmp	r3, #1
    aaca:	dd65      	ble.n	ab98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aacc:	2b05      	cmp	r3, #5
    aace:	dd65      	ble.n	ab9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>
    aad0:	f8da 3004 	ldr.w	r3, [sl, #4]
    aad4:	685b      	ldr	r3, [r3, #4]
    aad6:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    aad8:	f8da 3000 	ldr.w	r3, [sl]
    aadc:	2b02      	cmp	r3, #2
    aade:	dd61      	ble.n	aba4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aae0:	2b05      	cmp	r3, #5
    aae2:	dd61      	ble.n	aba8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>
    aae4:	f8da 3004 	ldr.w	r3, [sl, #4]
    aae8:	689b      	ldr	r3, [r3, #8]
    aaea:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    aaec:	683b      	ldr	r3, [r7, #0]
    aaee:	2b01      	cmp	r3, #1
    aaf0:	dd5e      	ble.n	abb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aaf2:	2b05      	cmp	r3, #5
    aaf4:	dd5e      	ble.n	abb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>
    aaf6:	687b      	ldr	r3, [r7, #4]
    aaf8:	685b      	ldr	r3, [r3, #4]
    aafa:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    aafc:	683b      	ldr	r3, [r7, #0]
    aafe:	2b02      	cmp	r3, #2
    ab00:	dd5b      	ble.n	abba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab02:	2b05      	cmp	r3, #5
    ab04:	dd5b      	ble.n	abbe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    ab06:	687b      	ldr	r3, [r7, #4]
    ab08:	689b      	ldr	r3, [r3, #8]
    ab0a:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
    ab0c:	f8d8 3000 	ldr.w	r3, [r8]
    ab10:	2b01      	cmp	r3, #1
    ab12:	dd57      	ble.n	abc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab14:	2b05      	cmp	r3, #5
    ab16:	dd57      	ble.n	abc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2dc>
    ab18:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ab1c:	685b      	ldr	r3, [r3, #4]
    ab1e:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    ab20:	f8d8 3000 	ldr.w	r3, [r8]
    ab24:	2b02      	cmp	r3, #2
    ab26:	dd53      	ble.n	abd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab28:	2b05      	cmp	r3, #5
    ab2a:	dd53      	ble.n	abd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e8>
    ab2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ab30:	689b      	ldr	r3, [r3, #8]
    ab32:	9304      	str	r3, [sp, #16]
  for (int batch = 0; batch < batches; ++batch) {
    ab34:	f04f 0b00 	mov.w	fp, #0
    ab38:	46d1      	mov	r9, sl
    ab3a:	46ba      	mov	sl, r7
    ab3c:	4647      	mov	r7, r8
    ab3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ab40:	459b      	cmp	fp, r3
    ab42:	f280 81cd 	bge.w	aee0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    ab46:	2300      	movs	r3, #0
    ab48:	9301      	str	r3, [sp, #4]
    ab4a:	46c8      	mov	r8, r9
    ab4c:	46d1      	mov	r9, sl
    ab4e:	46da      	mov	sl, fp
    ab50:	46bb      	mov	fp, r7
    ab52:	9b01      	ldr	r3, [sp, #4]
    ab54:	9905      	ldr	r1, [sp, #20]
    ab56:	428b      	cmp	r3, r1
    ab58:	f280 81bb 	bge.w	aed2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e6>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    ab5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ab5e:	fb02 f303 	mul.w	r3, r2, r3
    ab62:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ab64:	1a9b      	subs	r3, r3, r2
    ab66:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    ab68:	2300      	movs	r3, #0
    ab6a:	9302      	str	r3, [sp, #8]
    ab6c:	f8cd b0d4 	str.w	fp, [sp, #212]	; 0xd4
    ab70:	46c3      	mov	fp, r8
    ab72:	46c8      	mov	r8, r9
    ab74:	46d1      	mov	r9, sl
    ab76:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    ab7a:	9b02      	ldr	r3, [sp, #8]
    ab7c:	9904      	ldr	r1, [sp, #16]
    ab7e:	428b      	cmp	r3, r1
    ab80:	f280 819c 	bge.w	aebc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5d0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    ab84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ab86:	fb02 f303 	mul.w	r3, r2, r3
    ab8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ab8c:	1a9b      	subs	r3, r3, r2
    ab8e:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    ab90:	2400      	movs	r4, #0
    ab92:	e157      	b.n	ae44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    ab94:	f00b fa16 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ab98:	f00b fa14 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab9c:	f8da 3008 	ldr.w	r3, [sl, #8]
    aba0:	9309      	str	r3, [sp, #36]	; 0x24
    aba2:	e799      	b.n	aad8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    aba4:	f00b fa0e 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aba8:	f8da 300c 	ldr.w	r3, [sl, #12]
    abac:	9308      	str	r3, [sp, #32]
    abae:	e79d      	b.n	aaec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
    TFLITE_DCHECK_LT(i, size_);
    abb0:	f00b fa08 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abb4:	68bb      	ldr	r3, [r7, #8]
    abb6:	9307      	str	r3, [sp, #28]
    abb8:	e7a0      	b.n	aafc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    TFLITE_DCHECK_LT(i, size_);
    abba:	f00b fa03 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abbe:	68fb      	ldr	r3, [r7, #12]
    abc0:	9306      	str	r3, [sp, #24]
    abc2:	e7a3      	b.n	ab0c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
    TFLITE_DCHECK_LT(i, size_);
    abc4:	f00b f9fe 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abc8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    abcc:	9305      	str	r3, [sp, #20]
    abce:	e7a7      	b.n	ab20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    TFLITE_DCHECK_LT(i, size_);
    abd0:	f00b f9f8 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    abd8:	9304      	str	r3, [sp, #16]
    abda:	e7ab      	b.n	ab34 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    abdc:	f00b f9f2 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    abe0:	f00b f9f0 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    abe4:	f00b f9ee 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    abe8:	f00b f9ec 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    abec:	f00b f9ea 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    abf0:	f00b f9e8 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    abf4:	f00b f9e6 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    abf8:	f00b f9e4 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    abfc:	f00b f9e2 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ac00:	f00b f9e0 	bl	15fc4 <abort>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    ac04:	3201      	adds	r2, #1
    ac06:	9b06      	ldr	r3, [sp, #24]
    ac08:	429a      	cmp	r2, r3
    ac0a:	da63      	bge.n	acd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e8>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    ac0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ac0e:	9815      	ldr	r0, [sp, #84]	; 0x54
    ac10:	fb03 0002 	mla	r0, r3, r2, r0
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    ac14:	2800      	cmp	r0, #0
    ac16:	dbf5      	blt.n	ac04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ac18:	9b08      	ldr	r3, [sp, #32]
    ac1a:	4298      	cmp	r0, r3
    ac1c:	daf2      	bge.n	ac04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ac1e:	2900      	cmp	r1, #0
    ac20:	dbf0      	blt.n	ac04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ac24:	4299      	cmp	r1, r3
    ac26:	daed      	bge.n	ac04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ac28:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    ac2a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    ac2c:	42ab      	cmp	r3, r5
    ac2e:	dae9      	bge.n	ac04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
  inline int32_t DimensionsCount() const { return size_; }
    ac30:	f8db 5000 	ldr.w	r5, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ac34:	2d04      	cmp	r5, #4
    ac36:	d1d1      	bne.n	abdc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ac38:	f1b9 0f00 	cmp.w	r9, #0
    ac3c:	dbd0      	blt.n	abe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
    ac3e:	f8db 5004 	ldr.w	r5, [fp, #4]
    ac42:	45a9      	cmp	r9, r5
    ac44:	dacc      	bge.n	abe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ac46:	2900      	cmp	r1, #0
    ac48:	dbcc      	blt.n	abe4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
    ac4a:	f8db c008 	ldr.w	ip, [fp, #8]
    ac4e:	4561      	cmp	r1, ip
    ac50:	dac8      	bge.n	abe4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ac52:	2800      	cmp	r0, #0
    ac54:	dbc8      	blt.n	abe8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
    ac56:	f8db 700c 	ldr.w	r7, [fp, #12]
    ac5a:	42b8      	cmp	r0, r7
    ac5c:	dac4      	bge.n	abe8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ac5e:	2b00      	cmp	r3, #0
    ac60:	dbc4      	blt.n	abec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
    ac62:	f8db 5010 	ldr.w	r5, [fp, #16]
    ac66:	42ab      	cmp	r3, r5
    ac68:	dac0      	bge.n	abec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ac6a:	fb0c 1c09 	mla	ip, ip, r9, r1
    ac6e:	fb0c 0707 	mla	r7, ip, r7, r0
    ac72:	fb07 3505 	mla	r5, r7, r5, r3
                                                      in_x, in_channel)];
    ac76:	9f30      	ldr	r7, [sp, #192]	; 0xc0
    ac78:	577f      	ldrsb	r7, [r7, r5]
  inline int32_t DimensionsCount() const { return size_; }
    ac7a:	f8d8 5000 	ldr.w	r5, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ac7e:	2d04      	cmp	r5, #4
    ac80:	d1b6      	bne.n	abf0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x304>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ac82:	2c00      	cmp	r4, #0
    ac84:	dbb6      	blt.n	abf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
    ac86:	f8d8 5004 	ldr.w	r5, [r8, #4]
    ac8a:	42ac      	cmp	r4, r5
    ac8c:	dab2      	bge.n	abf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ac8e:	2e00      	cmp	r6, #0
    ac90:	dbb2      	blt.n	abf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    ac92:	f8d8 e008 	ldr.w	lr, [r8, #8]
    ac96:	4576      	cmp	r6, lr
    ac98:	daae      	bge.n	abf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ac9a:	2a00      	cmp	r2, #0
    ac9c:	dbae      	blt.n	abfc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
    ac9e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
    aca2:	4562      	cmp	r2, ip
    aca4:	daaa      	bge.n	abfc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    aca6:	2b00      	cmp	r3, #0
    aca8:	dbaa      	blt.n	ac00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
    acaa:	f8d8 5010 	ldr.w	r5, [r8, #16]
    acae:	42ab      	cmp	r3, r5
    acb0:	daa6      	bge.n	ac00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    acb2:	fb0e 6e04 	mla	lr, lr, r4, r6
    acb6:	fb0e 2c0c 	mla	ip, lr, ip, r2
    acba:	fb0c 3c05 	mla	ip, ip, r5, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    acbe:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    acc0:	f915 c00c 	ldrsb.w	ip, [r5, ip]
                acc += filter_val * (input_val + input_offset);
    acc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    acc6:	442f      	add	r7, r5
    acc8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    acca:	fb0c 5507 	mla	r5, ip, r7, r5
    acce:	951d      	str	r5, [sp, #116]	; 0x74
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    acd0:	3301      	adds	r3, #1
    acd2:	e7aa      	b.n	ac2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    acd4:	3601      	adds	r6, #1
    acd6:	9b07      	ldr	r3, [sp, #28]
    acd8:	429e      	cmp	r6, r3
    acda:	da05      	bge.n	ace8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fc>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    acdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    acde:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ace0:	fb03 2106 	mla	r1, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    ace4:	2200      	movs	r2, #0
    ace6:	e78e      	b.n	ac06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x31a>
          if (bias_data) {
    ace8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    acea:	b123      	cbz	r3, acf6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40a>
            acc += bias_data[out_channel];
    acec:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    acf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    acf2:	4413      	add	r3, r2
    acf4:	931d      	str	r3, [sp, #116]	; 0x74
          acc = MultiplyByQuantizedMultiplier(
    acf6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    acf8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    acfa:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
    acfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ad00:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    ad04:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ad08:	2e00      	cmp	r6, #0
    ad0a:	f340 80a1 	ble.w	ae50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x564>
    ad0e:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ad10:	409d      	lsls	r5, r3
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ad12:	45ac      	cmp	ip, r5
    ad14:	f000 809e 	beq.w	ae54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x568>
    ad18:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ad1a:	17eb      	asrs	r3, r5, #31
  std::int64_t b_64(b);
    ad1c:	4660      	mov	r0, ip
    ad1e:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    ad20:	fb05 f101 	mul.w	r1, r5, r1
    ad24:	fb0c 1103 	mla	r1, ip, r3, r1
    ad28:	fba5 230c 	umull	r2, r3, r5, ip
    ad2c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ad2e:	2a00      	cmp	r2, #0
    ad30:	f173 0100 	sbcs.w	r1, r3, #0
    ad34:	f2c0 8095 	blt.w	ae62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x576>
    ad38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ad3c:	1852      	adds	r2, r2, r1
    ad3e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ad42:	4611      	mov	r1, r2
    ad44:	461d      	mov	r5, r3
    ad46:	2a00      	cmp	r2, #0
    ad48:	f173 0000 	sbcs.w	r0, r3, #0
    ad4c:	f2c0 808b 	blt.w	ae66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57a>
    ad50:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ad52:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ad56:	2f00      	cmp	r7, #0
    ad58:	f040 808d 	bne.w	ae76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58a>

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    ad5c:	2e00      	cmp	r6, #0
    ad5e:	f2c0 808d 	blt.w	ae7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x590>
  assert(exponent <= 31);
    ad62:	2e1f      	cmp	r6, #31
    ad64:	f300 8091 	bgt.w	ae8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x59e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ad68:	2701      	movs	r7, #1
    ad6a:	fa07 f006 	lsl.w	r0, r7, r6
    ad6e:	3801      	subs	r0, #1
    ad70:	f008 ff78 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ad74:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType zero = Dup<IntegerType>(0);
    ad76:	2000      	movs	r0, #0
    ad78:	f008 ff74 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ad7c:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    ad7e:	4638      	mov	r0, r7
    ad80:	f008 ff70 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ad84:	900b      	str	r0, [sp, #44]	; 0x2c
  const IntegerType remainder = BitAnd(x, mask);
    ad86:	990a      	ldr	r1, [sp, #40]	; 0x28
    ad88:	4628      	mov	r0, r5
    ad8a:	f008 ff6c 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ad8e:	9019      	str	r0, [sp, #100]	; 0x64
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ad90:	4639      	mov	r1, r7
    ad92:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad94:	f008 ff69 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ad98:	4607      	mov	r7, r0
    ad9a:	9918      	ldr	r1, [sp, #96]	; 0x60
    ad9c:	4628      	mov	r0, r5
    ad9e:	f008 ff70 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ada2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ada4:	f008 ff5f 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ada8:	4601      	mov	r1, r0
    adaa:	4638      	mov	r0, r7
    adac:	f008 ff5f 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    adb0:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    adb2:	4631      	mov	r1, r6
    adb4:	4628      	mov	r0, r5
    adb6:	f008 ff58 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    adba:	4605      	mov	r5, r0
    adbc:	4639      	mov	r1, r7
    adbe:	9819      	ldr	r0, [sp, #100]	; 0x64
    adc0:	f008 ff67 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    adc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    adc6:	f008 ff4e 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    adca:	4601      	mov	r1, r0
    adcc:	4628      	mov	r0, r5
    adce:	f008 ff4e 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
          acc += output_offset;
    add2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    add4:	4418      	add	r0, r3
    add6:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    add8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    adda:	4290      	cmp	r0, r2
    addc:	db5c      	blt.n	ae98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
      return __a;
    adde:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::max(acc, output_activation_min);
    ade0:	681b      	ldr	r3, [r3, #0]
    ade2:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    ade4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    ade6:	4293      	cmp	r3, r2
    ade8:	dc58      	bgt.n	ae9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
      return __a;
    adea:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::min(acc, output_activation_max);
    adec:	6818      	ldr	r0, [r3, #0]
    adee:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    adf0:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    adf4:	2b04      	cmp	r3, #4
    adf6:	d153      	bne.n	aea0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    adf8:	f1b9 0f00 	cmp.w	r9, #0
    adfc:	db52      	blt.n	aea4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    adfe:	f8da 3004 	ldr.w	r3, [sl, #4]
    ae02:	4599      	cmp	r9, r3
    ae04:	da4e      	bge.n	aea4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ae06:	9b01      	ldr	r3, [sp, #4]
    ae08:	2b00      	cmp	r3, #0
    ae0a:	db4d      	blt.n	aea8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
    ae0c:	f8da 1008 	ldr.w	r1, [sl, #8]
    ae10:	428b      	cmp	r3, r1
    ae12:	da49      	bge.n	aea8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ae14:	9b02      	ldr	r3, [sp, #8]
    ae16:	2b00      	cmp	r3, #0
    ae18:	db48      	blt.n	aeac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
    ae1a:	f8da 200c 	ldr.w	r2, [sl, #12]
    ae1e:	4293      	cmp	r3, r2
    ae20:	da44      	bge.n	aeac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ae22:	2c00      	cmp	r4, #0
    ae24:	db44      	blt.n	aeb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
    ae26:	f8da 3010 	ldr.w	r3, [sl, #16]
    ae2a:	429c      	cmp	r4, r3
    ae2c:	da40      	bge.n	aeb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ae2e:	9d01      	ldr	r5, [sp, #4]
    ae30:	fb01 5109 	mla	r1, r1, r9, r5
    ae34:	9d02      	ldr	r5, [sp, #8]
    ae36:	fb01 5202 	mla	r2, r1, r2, r5
    ae3a:	fb02 4303 	mla	r3, r2, r3, r4
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    ae3e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    ae40:	54d0      	strb	r0, [r2, r3]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    ae42:	3401      	adds	r4, #1
    ae44:	9b03      	ldr	r3, [sp, #12]
    ae46:	429c      	cmp	r4, r3
    ae48:	da34      	bge.n	aeb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c8>
          int32_t acc = 0;
    ae4a:	2600      	movs	r6, #0
    ae4c:	961d      	str	r6, [sp, #116]	; 0x74
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    ae4e:	e742      	b.n	acd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3ea>
  int right_shift = shift > 0 ? 0 : -shift;
    ae50:	4276      	negs	r6, r6
    ae52:	e75d      	b.n	ad10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x424>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ae54:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    ae58:	d001      	beq.n	ae5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x572>
    ae5a:	2700      	movs	r7, #0
    ae5c:	e75d      	b.n	ad1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
    ae5e:	2701      	movs	r7, #1
    ae60:	e75b      	b.n	ad1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ae62:	4921      	ldr	r1, [pc, #132]	; (aee8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5fc>)
    ae64:	e76a      	b.n	ad3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x450>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ae66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ae6a:	1851      	adds	r1, r2, r1
    ae6c:	f04f 0500 	mov.w	r5, #0
    ae70:	eb43 0505 	adc.w	r5, r3, r5
    ae74:	e76c      	b.n	ad50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x464>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ae76:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    ae7a:	e76f      	b.n	ad5c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x470>
  assert(exponent >= 0);
    ae7c:	4b1b      	ldr	r3, [pc, #108]	; (aeec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    ae7e:	4a1c      	ldr	r2, [pc, #112]	; (aef0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    ae80:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ae84:	481b      	ldr	r0, [pc, #108]	; (aef4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    ae86:	f005 fc9b 	bl	107c0 <__assert_func>
  assert(exponent <= 31);
    ae8a:	4b1b      	ldr	r3, [pc, #108]	; (aef8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    ae8c:	4a18      	ldr	r2, [pc, #96]	; (aef0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    ae8e:	f240 1167 	movw	r1, #359	; 0x167
    ae92:	4818      	ldr	r0, [pc, #96]	; (aef4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    ae94:	f005 fc94 	bl	107c0 <__assert_func>
	return __b;
    ae98:	ab1f      	add	r3, sp, #124	; 0x7c
    ae9a:	e7a1      	b.n	ade0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4f4>
	return __b;
    ae9c:	ab1e      	add	r3, sp, #120	; 0x78
    ae9e:	e7a5      	b.n	adec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x500>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    aea0:	f00b f890 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    aea4:	f00b f88e 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    aea8:	f00b f88c 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    aeac:	f00b f88a 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    aeb0:	f00b f888 	bl	15fc4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    aeb4:	9b02      	ldr	r3, [sp, #8]
    aeb6:	3301      	adds	r3, #1
    aeb8:	9302      	str	r3, [sp, #8]
    aeba:	e65e      	b.n	ab7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
    aebc:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
    aec0:	46ca      	mov	sl, r9
    aec2:	46c1      	mov	r9, r8
    aec4:	46d8      	mov	r8, fp
    aec6:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
    for (int out_y = 0; out_y < output_height; ++out_y) {
    aeca:	9b01      	ldr	r3, [sp, #4]
    aecc:	3301      	adds	r3, #1
    aece:	9301      	str	r3, [sp, #4]
    aed0:	e63f      	b.n	ab52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
    aed2:	465f      	mov	r7, fp
    aed4:	46d3      	mov	fp, sl
    aed6:	46ca      	mov	sl, r9
    aed8:	46c1      	mov	r9, r8
  for (int batch = 0; batch < batches; ++batch) {
    aeda:	f10b 0b01 	add.w	fp, fp, #1
    aede:	e62e      	b.n	ab3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x252>
}
    aee0:	b027      	add	sp, #156	; 0x9c
    aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aee6:	bf00      	nop
    aee8:	c0000001 	.word	0xc0000001
    aeec:	0006b05c 	.word	0x0006b05c
    aef0:	0006b06c 	.word	0x0006b06c
    aef4:	0006b0c4 	.word	0x0006b0c4
    aef8:	0006b120 	.word	0x0006b120

0000aefc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af00:	b0e7      	sub	sp, #412	; 0x19c
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    af02:	4bae      	ldr	r3, [pc, #696]	; (b1bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    af04:	681a      	ldr	r2, [r3, #0]
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    af06:	2800      	cmp	r0, #0
    af08:	d052      	beq.n	afb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    af0a:	4688      	mov	r8, r1
    af0c:	4681      	mov	r9, r0
  TFLITE_DCHECK(node != nullptr);
    af0e:	2900      	cmp	r1, #0
    af10:	d050      	beq.n	afb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    af12:	6d44      	ldr	r4, [r0, #84]	; 0x54
    af14:	680b      	ldr	r3, [r1, #0]
    af16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    af1a:	6859      	ldr	r1, [r3, #4]
    af1c:	47a0      	blx	r4
    af1e:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    af20:	4ba7      	ldr	r3, [pc, #668]	; (b1c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    af22:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    af24:	f1b9 0f00 	cmp.w	r9, #0
    af28:	d046      	beq.n	afb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
  TFLITE_DCHECK(node != nullptr);
    af2a:	f1b8 0f00 	cmp.w	r8, #0
    af2e:	d045      	beq.n	afbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    af30:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    af34:	f8d8 3000 	ldr.w	r3, [r8]
    af38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    af3c:	6859      	ldr	r1, [r3, #4]
    af3e:	4648      	mov	r0, r9
    af40:	4790      	blx	r2
    af42:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    af44:	f8d8 3000 	ldr.w	r3, [r8]
    af48:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    af4a:	2b03      	cmp	r3, #3
    af4c:	d038      	beq.n	afc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    af4e:	2600      	movs	r6, #0
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
    af50:	4b9c      	ldr	r3, [pc, #624]	; (b1c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    af52:	6819      	ldr	r1, [r3, #0]
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    af54:	f1b9 0f00 	cmp.w	r9, #0
    af58:	d049      	beq.n	afee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf2>
  TFLITE_DCHECK(node != nullptr);
    af5a:	f1b8 0f00 	cmp.w	r8, #0
    af5e:	d048      	beq.n	aff2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    af60:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    af64:	f8d8 3004 	ldr.w	r3, [r8, #4]
    af68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    af6c:	6859      	ldr	r1, [r3, #4]
    af6e:	4648      	mov	r0, r9
    af70:	4790      	blx	r2
    af72:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    af74:	f8d8 1014 	ldr.w	r1, [r8, #20]
    af78:	2900      	cmp	r1, #0
    af7a:	d03c      	beq.n	aff6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
  TFLITE_DCHECK(node->user_data != nullptr);
    af7c:	f8d8 b010 	ldr.w	fp, [r8, #16]
    af80:	f1bb 0f00 	cmp.w	fp, #0
    af84:	d039      	beq.n	affa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    af86:	7a38      	ldrb	r0, [r7, #8]
    af88:	7a23      	ldrb	r3, [r4, #8]
    af8a:	4298      	cmp	r0, r3
    af8c:	d037      	beq.n	affe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    af8e:	f8d9 4014 	ldr.w	r4, [r9, #20]
    af92:	9303      	str	r3, [sp, #12]
    af94:	9002      	str	r0, [sp, #8]
    af96:	4b8c      	ldr	r3, [pc, #560]	; (b1c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    af98:	9301      	str	r3, [sp, #4]
    af9a:	4b8c      	ldr	r3, [pc, #560]	; (b1cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    af9c:	9300      	str	r3, [sp, #0]
    af9e:	2337      	movs	r3, #55	; 0x37
    afa0:	4a8b      	ldr	r2, [pc, #556]	; (b1d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    afa2:	498c      	ldr	r1, [pc, #560]	; (b1d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    afa4:	4648      	mov	r0, r9
    afa6:	47a0      	blx	r4
    afa8:	2001      	movs	r0, #1
}
    afaa:	b067      	add	sp, #412	; 0x19c
    afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(context != nullptr);
    afb0:	f00b f808 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    afb4:	f00b f806 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    afb8:	f00b f804 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    afbc:	f00b f802 	bl	15fc4 <abort>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    afc0:	4b85      	ldr	r3, [pc, #532]	; (b1d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    afc2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    afc4:	f1b9 0f00 	cmp.w	r9, #0
    afc8:	d00d      	beq.n	afe6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node != nullptr);
    afca:	f1b8 0f00 	cmp.w	r8, #0
    afce:	d00c      	beq.n	afea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    afd0:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    afd4:	f8d8 3000 	ldr.w	r3, [r8]
    afd8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    afdc:	6859      	ldr	r1, [r3, #4]
    afde:	4648      	mov	r0, r9
    afe0:	4790      	blx	r2
    afe2:	4606      	mov	r6, r0
    afe4:	e7b4      	b.n	af50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(context != nullptr);
    afe6:	f00a ffed 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    afea:	f00a ffeb 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    afee:	f00a ffe9 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    aff2:	f00a ffe7 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    aff6:	f00a ffe5 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    affa:	f00a ffe3 	bl	15fc4 <abort>
  TF_LITE_ENSURE_MSG(
    affe:	7a2b      	ldrb	r3, [r5, #8]
    b000:	4298      	cmp	r0, r3
    b002:	d00a      	beq.n	b01a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    b004:	2807      	cmp	r0, #7
    b006:	d101      	bne.n	b00c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
    b008:	2b09      	cmp	r3, #9
    b00a:	d006      	beq.n	b01a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    b00c:	f8d9 3014 	ldr.w	r3, [r9, #20]
    b010:	4972      	ldr	r1, [pc, #456]	; (b1dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    b012:	4648      	mov	r0, r9
    b014:	4798      	blx	r3
    b016:	2001      	movs	r0, #1
    b018:	e7c7      	b.n	afaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  switch (input->type) {  // Already know in/out types are same.
    b01a:	2807      	cmp	r0, #7
    b01c:	d073      	beq.n	b106 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    b01e:	2809      	cmp	r0, #9
    b020:	f000 80e0 	beq.w	b1e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    b024:	2801      	cmp	r0, #1
    b026:	d00a      	beq.n	b03e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b028:	f8d9 4014 	ldr.w	r4, [r9, #20]
    b02c:	f7fd ffde 	bl	8fec <TfLiteTypeGetName>
    b030:	4602      	mov	r2, r0
    b032:	7a3b      	ldrb	r3, [r7, #8]
    b034:	496a      	ldr	r1, [pc, #424]	; (b1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    b036:	4648      	mov	r0, r9
    b038:	47a0      	blx	r4
      return kTfLiteError;
    b03a:	2001      	movs	r0, #1
    b03c:	e7b5      	b.n	afaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    b03e:	465a      	mov	r2, fp
    b040:	a80a      	add	r0, sp, #40	; 0x28
    b042:	f009 f8c7 	bl	141d4 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b046:	4639      	mov	r1, r7
    b048:	a818      	add	r0, sp, #96	; 0x60
    b04a:	f009 fbe0 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b04e:	4638      	mov	r0, r7
    b050:	f008 fdf4 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b054:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(filter),
    b056:	4629      	mov	r1, r5
    b058:	a81e      	add	r0, sp, #120	; 0x78
    b05a:	f009 fbd8 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b05e:	4628      	mov	r0, r5
    b060:	f008 fdec 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b064:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b066:	f10d 0890 	add.w	r8, sp, #144	; 0x90
    b06a:	4631      	mov	r1, r6
    b06c:	4640      	mov	r0, r8
    b06e:	f009 fbce 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b072:	4630      	mov	r0, r6
    b074:	f008 fde2 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b078:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b07a:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    b07e:	4621      	mov	r1, r4
    b080:	4648      	mov	r0, r9
    b082:	f009 fbc4 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b086:	4620      	mov	r0, r4
    b088:	f008 fdde 	bl	13c48 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    b08c:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(nullptr), nullptr);
    b08e:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
    b092:	2100      	movs	r1, #0
    b094:	4650      	mov	r0, sl
    b096:	f009 fbba 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b09a:	2300      	movs	r3, #0
    b09c:	9306      	str	r3, [sp, #24]
    b09e:	f8cd a014 	str.w	sl, [sp, #20]
    b0a2:	9404      	str	r4, [sp, #16]
    b0a4:	f8cd 900c 	str.w	r9, [sp, #12]
    b0a8:	9602      	str	r6, [sp, #8]
    b0aa:	f8cd 8004 	str.w	r8, [sp, #4]
    b0ae:	9500      	str	r5, [sp, #0]
    b0b0:	ab1e      	add	r3, sp, #120	; 0x78
    b0b2:	463a      	mov	r2, r7
    b0b4:	a918      	add	r1, sp, #96	; 0x60
    b0b6:	a80a      	add	r0, sp, #40	; 0x28
    b0b8:	f008 fe11 	bl	13cde <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
    if (size_ > kMaxSmallSize) {
    b0bc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    b0be:	2b05      	cmp	r3, #5
    b0c0:	dd03      	ble.n	b0ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
      delete[] dims_pointer_;
    b0c2:	9831      	ldr	r0, [sp, #196]	; 0xc4
    b0c4:	b108      	cbz	r0, b0ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    b0c6:	f00a ff68 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b0ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    b0cc:	2b05      	cmp	r3, #5
    b0ce:	dd03      	ble.n	b0d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
      delete[] dims_pointer_;
    b0d0:	982b      	ldr	r0, [sp, #172]	; 0xac
    b0d2:	b108      	cbz	r0, b0d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    b0d4:	f00a ff61 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b0d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b0da:	2b05      	cmp	r3, #5
    b0dc:	dd03      	ble.n	b0e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      delete[] dims_pointer_;
    b0de:	9825      	ldr	r0, [sp, #148]	; 0x94
    b0e0:	b108      	cbz	r0, b0e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    b0e2:	f00a ff5a 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b0e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b0e8:	2b05      	cmp	r3, #5
    b0ea:	dd03      	ble.n	b0f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      delete[] dims_pointer_;
    b0ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b0ee:	b108      	cbz	r0, b0f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    b0f0:	f00a ff53 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b0f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b0f6:	2b05      	cmp	r3, #5
    b0f8:	dd03      	ble.n	b102 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
      delete[] dims_pointer_;
    b0fa:	9819      	ldr	r0, [sp, #100]	; 0x64
    b0fc:	b108      	cbz	r0, b102 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
    b0fe:	f00a ff4c 	bl	15f9a <_ZdaPv>
  return kTfLiteOk;
    b102:	2000      	movs	r0, #0
      break;
    b104:	e751      	b.n	afaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    b106:	465a      	mov	r2, fp
    b108:	a80a      	add	r0, sp, #40	; 0x28
    b10a:	f009 f83c 	bl	14186 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b10e:	f8db a024 	ldr.w	sl, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    b112:	f8db b028 	ldr.w	fp, [fp, #40]	; 0x28
    b116:	4639      	mov	r1, r7
    b118:	a836      	add	r0, sp, #216	; 0xd8
    b11a:	f009 fb78 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b11e:	4638      	mov	r0, r7
    b120:	f008 fdbf 	bl	13ca2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    b124:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    b126:	af3c      	add	r7, sp, #240	; 0xf0
    b128:	4629      	mov	r1, r5
    b12a:	4638      	mov	r0, r7
    b12c:	f009 fb6f 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b130:	4628      	mov	r0, r5
    b132:	f008 fd8d 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b136:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b138:	f50d 7884 	add.w	r8, sp, #264	; 0x108
    b13c:	4631      	mov	r1, r6
    b13e:	4640      	mov	r0, r8
    b140:	f009 fb65 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b144:	4630      	mov	r0, r6
    b146:	f008 fdbc 	bl	13cc2 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
    b14a:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b14c:	f50d 7990 	add.w	r9, sp, #288	; 0x120
    b150:	4621      	mov	r1, r4
    b152:	4648      	mov	r0, r9
    b154:	f009 fb5b 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b158:	4620      	mov	r0, r4
    b15a:	f008 fda8 	bl	13cae <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    b15e:	9006      	str	r0, [sp, #24]
    b160:	f8cd 9014 	str.w	r9, [sp, #20]
    b164:	9604      	str	r6, [sp, #16]
    b166:	f8cd 800c 	str.w	r8, [sp, #12]
    b16a:	9502      	str	r5, [sp, #8]
    b16c:	9701      	str	r7, [sp, #4]
    b16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b170:	9300      	str	r3, [sp, #0]
    b172:	ab36      	add	r3, sp, #216	; 0xd8
    b174:	465a      	mov	r2, fp
    b176:	4651      	mov	r1, sl
    b178:	a80a      	add	r0, sp, #40	; 0x28
    b17a:	f7ff f8d7 	bl	a32c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
    if (size_ > kMaxSmallSize) {
    b17e:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b180:	2b05      	cmp	r3, #5
    b182:	dd03      	ble.n	b18c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
      delete[] dims_pointer_;
    b184:	9849      	ldr	r0, [sp, #292]	; 0x124
    b186:	b108      	cbz	r0, b18c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
    b188:	f00a ff07 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b18c:	9b42      	ldr	r3, [sp, #264]	; 0x108
    b18e:	2b05      	cmp	r3, #5
    b190:	dd03      	ble.n	b19a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      delete[] dims_pointer_;
    b192:	9843      	ldr	r0, [sp, #268]	; 0x10c
    b194:	b108      	cbz	r0, b19a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    b196:	f00a ff00 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b19a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    b19c:	2b05      	cmp	r3, #5
    b19e:	dd03      	ble.n	b1a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      delete[] dims_pointer_;
    b1a0:	983d      	ldr	r0, [sp, #244]	; 0xf4
    b1a2:	b108      	cbz	r0, b1a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    b1a4:	f00a fef9 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b1a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    b1aa:	2b05      	cmp	r3, #5
    b1ac:	dd03      	ble.n	b1b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
      delete[] dims_pointer_;
    b1ae:	9837      	ldr	r0, [sp, #220]	; 0xdc
    b1b0:	b108      	cbz	r0, b1b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    b1b2:	f00a fef2 	bl	15f9a <_ZdaPv>
  return kTfLiteOk;
    b1b6:	2000      	movs	r0, #0
      break;
    b1b8:	e6f7      	b.n	afaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
    b1ba:	bf00      	nop
    b1bc:	0006b3a0 	.word	0x0006b3a0
    b1c0:	0006b3a8 	.word	0x0006b3a8
    b1c4:	0006b3a4 	.word	0x0006b3a4
    b1c8:	0006b17c 	.word	0x0006b17c
    b1cc:	0006b18c 	.word	0x0006b18c
    b1d0:	0006b130 	.word	0x0006b130
    b1d4:	0006ab68 	.word	0x0006ab68
    b1d8:	0006b39c 	.word	0x0006b39c
    b1dc:	0006b198 	.word	0x0006b198
    b1e0:	0006b214 	.word	0x0006b214
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    b1e4:	465a      	mov	r2, fp
    b1e6:	a80a      	add	r0, sp, #40	; 0x28
    b1e8:	f008 ffcd 	bl	14186 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b1ec:	f8db 8024 	ldr.w	r8, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    b1f0:	f8db 9028 	ldr.w	r9, [fp, #40]	; 0x28
    b1f4:	4639      	mov	r1, r7
    b1f6:	a84e      	add	r0, sp, #312	; 0x138
    b1f8:	f009 fb09 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b1fc:	4638      	mov	r0, r7
    b1fe:	f008 fd27 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b202:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    b204:	af54      	add	r7, sp, #336	; 0x150
    b206:	4629      	mov	r1, r5
    b208:	4638      	mov	r0, r7
    b20a:	f009 fb00 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b20e:	4628      	mov	r0, r5
    b210:	f008 fd1e 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b214:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b216:	f50d 7ab4 	add.w	sl, sp, #360	; 0x168
    b21a:	4631      	mov	r1, r6
    b21c:	4650      	mov	r0, sl
    b21e:	f009 faf6 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b222:	4630      	mov	r0, r6
    b224:	f008 fd47 	bl	13cb6 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    b228:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b22a:	f50d 7bc0 	add.w	fp, sp, #384	; 0x180
    b22e:	4621      	mov	r1, r4
    b230:	4658      	mov	r0, fp
    b232:	f009 faec 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b236:	4620      	mov	r0, r4
    b238:	f008 fd10 	bl	13c5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    b23c:	9006      	str	r0, [sp, #24]
    b23e:	f8cd b014 	str.w	fp, [sp, #20]
    b242:	9604      	str	r6, [sp, #16]
    b244:	f8cd a00c 	str.w	sl, [sp, #12]
    b248:	9502      	str	r5, [sp, #8]
    b24a:	9701      	str	r7, [sp, #4]
    b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b24e:	9300      	str	r3, [sp, #0]
    b250:	ab4e      	add	r3, sp, #312	; 0x138
    b252:	464a      	mov	r2, r9
    b254:	4641      	mov	r1, r8
    b256:	a80a      	add	r0, sp, #40	; 0x28
    b258:	f7ff fb48 	bl	a8ec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    b25c:	9b60      	ldr	r3, [sp, #384]	; 0x180
    b25e:	2b05      	cmp	r3, #5
    b260:	dd03      	ble.n	b26a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    b262:	9861      	ldr	r0, [sp, #388]	; 0x184
    b264:	b108      	cbz	r0, b26a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    b266:	f00a fe98 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b26a:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    b26c:	2b05      	cmp	r3, #5
    b26e:	dd03      	ble.n	b278 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    b270:	985b      	ldr	r0, [sp, #364]	; 0x16c
    b272:	b108      	cbz	r0, b278 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    b274:	f00a fe91 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b278:	9b54      	ldr	r3, [sp, #336]	; 0x150
    b27a:	2b05      	cmp	r3, #5
    b27c:	dd03      	ble.n	b286 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
      delete[] dims_pointer_;
    b27e:	9855      	ldr	r0, [sp, #340]	; 0x154
    b280:	b108      	cbz	r0, b286 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    b282:	f00a fe8a 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b286:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    b288:	2b05      	cmp	r3, #5
    b28a:	dd03      	ble.n	b294 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
      delete[] dims_pointer_;
    b28c:	984f      	ldr	r0, [sp, #316]	; 0x13c
    b28e:	b108      	cbz	r0, b294 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
    b290:	f00a fe83 	bl	15f9a <_ZdaPv>
  return kTfLiteOk;
    b294:	2000      	movs	r0, #0
      break;
    b296:	e688      	b.n	afaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>

0000b298 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    b298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b29c:	b08f      	sub	sp, #60	; 0x3c
    b29e:	4604      	mov	r4, r0
    b2a0:	460d      	mov	r5, r1
    b2a2:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    b2a4:	6809      	ldr	r1, [r1, #0]
    b2a6:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    b2a8:	2903      	cmp	r1, #3
    b2aa:	d00a      	beq.n	b2c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    b2ac:	2902      	cmp	r1, #2
    b2ae:	d008      	beq.n	b2c2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    b2b0:	6945      	ldr	r5, [r0, #20]
    b2b2:	4b77      	ldr	r3, [pc, #476]	; (b490 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
    b2b4:	9300      	str	r3, [sp, #0]
    b2b6:	2356      	movs	r3, #86	; 0x56
    b2b8:	4a76      	ldr	r2, [pc, #472]	; (b494 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b2ba:	4977      	ldr	r1, [pc, #476]	; (b498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b2bc:	47a8      	blx	r5
    b2be:	2001      	movs	r0, #1
    b2c0:	e011      	b.n	b2e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    b2c2:	686a      	ldr	r2, [r5, #4]
    b2c4:	6812      	ldr	r2, [r2, #0]
    b2c6:	2a01      	cmp	r2, #1
    b2c8:	d010      	beq.n	b2ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    b2ca:	6966      	ldr	r6, [r4, #20]
    b2cc:	2501      	movs	r5, #1
    b2ce:	9503      	str	r5, [sp, #12]
    b2d0:	9202      	str	r2, [sp, #8]
    b2d2:	4b72      	ldr	r3, [pc, #456]	; (b49c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    b2d4:	9301      	str	r3, [sp, #4]
    b2d6:	4b72      	ldr	r3, [pc, #456]	; (b4a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    b2d8:	9300      	str	r3, [sp, #0]
    b2da:	2357      	movs	r3, #87	; 0x57
    b2dc:	4a6d      	ldr	r2, [pc, #436]	; (b494 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b2de:	4971      	ldr	r1, [pc, #452]	; (b4a4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    b2e0:	4620      	mov	r0, r4
    b2e2:	47b0      	blx	r6
    b2e4:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    b2e6:	b00f      	add	sp, #60	; 0x3c
    b2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    b2ec:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    b2f0:	68b1      	ldr	r1, [r6, #8]
    b2f2:	6872      	ldr	r2, [r6, #4]
    b2f4:	f8d6 8014 	ldr.w	r8, [r6, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    b2f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b2fa:	3801      	subs	r0, #1
    b2fc:	6937      	ldr	r7, [r6, #16]
    b2fe:	fb00 f007 	mul.w	r0, r0, r7
    b302:	f100 0901 	add.w	r9, r0, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
    b306:	b1b2      	cbz	r2, b336 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>

  switch (padding) {
    b308:	f1be 0f01 	cmp.w	lr, #1
    b30c:	d005      	beq.n	b31a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    b30e:	f1be 0f02 	cmp.w	lr, #2
    b312:	d009      	beq.n	b328 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    b314:	f04f 0c00 	mov.w	ip, #0
    b318:	e00e      	b.n	b338 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    b31a:	eb02 0c03 	add.w	ip, r2, r3
    b31e:	f10c 3cff 	add.w	ip, ip, #4294967295
    b322:	fb9c fcf2 	sdiv	ip, ip, r2
    b326:	e007      	b.n	b338 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    b328:	eb02 0c03 	add.w	ip, r2, r3
    b32c:	ebac 0c09 	sub.w	ip, ip, r9
    b330:	fb9c fcf2 	sdiv	ip, ip, r2
    b334:	e000      	b.n	b338 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    b336:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    b338:	9f18      	ldr	r7, [sp, #96]	; 0x60
    b33a:	3f01      	subs	r7, #1
    b33c:	fb07 f708 	mul.w	r7, r7, r8
    b340:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    b342:	b1c1      	cbz	r1, b376 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    b344:	f1be 0f01 	cmp.w	lr, #1
    b348:	d005      	beq.n	b356 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    b34a:	f1be 0f02 	cmp.w	lr, #2
    b34e:	d00a      	beq.n	b366 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    b350:	f04f 0e00 	mov.w	lr, #0
    b354:	e010      	b.n	b378 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    b356:	9816      	ldr	r0, [sp, #88]	; 0x58
    b358:	eb01 0e00 	add.w	lr, r1, r0
    b35c:	f10e 3eff 	add.w	lr, lr, #4294967295
    b360:	fb9e fef1 	sdiv	lr, lr, r1
    b364:	e008      	b.n	b378 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    b366:	9816      	ldr	r0, [sp, #88]	; 0x58
    b368:	eb01 0e00 	add.w	lr, r1, r0
    b36c:	ebae 0e07 	sub.w	lr, lr, r7
    b370:	fb9e fef1 	sdiv	lr, lr, r1
    b374:	e000      	b.n	b378 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    b376:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    b378:	f10e 3eff 	add.w	lr, lr, #4294967295
    b37c:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    b380:	9f16      	ldr	r7, [sp, #88]	; 0x58
    b382:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    b384:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    b388:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    b38c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    b390:	1049      	asrs	r1, r1, #1
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
  padding_values.height =
    b392:	910b      	str	r1, [sp, #44]	; 0x2c
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
    b394:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    b396:	f10c 3cff 	add.w	ip, ip, #4294967295
    b39a:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    b39e:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    b3a0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    b3a4:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    b3a8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    b3ac:	1052      	asrs	r2, r2, #1
  padding_values.width =
    b3ae:	920a      	str	r2, [sp, #40]	; 0x28
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
    b3b0:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    b3b2:	ab0e      	add	r3, sp, #56	; 0x38
    b3b4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    b3b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    b3ba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    b3be:	2200      	movs	r2, #0
    b3c0:	4629      	mov	r1, r5
    b3c2:	4620      	mov	r0, r4
    b3c4:	f008 fb7b 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    b3c8:	4607      	mov	r7, r0
    b3ca:	b308      	cbz	r0, b410 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    b3cc:	2201      	movs	r2, #1
    b3ce:	4629      	mov	r1, r5
    b3d0:	4620      	mov	r0, r4
    b3d2:	f008 fb74 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    b3d6:	4680      	mov	r8, r0
    b3d8:	b320      	cbz	r0, b424 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18c>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    b3da:	2202      	movs	r2, #2
    b3dc:	4629      	mov	r1, r5
    b3de:	4620      	mov	r0, r4
    b3e0:	f008 fbab 	bl	13b3a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    b3e4:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    b3e6:	2200      	movs	r2, #0
    b3e8:	4629      	mov	r1, r5
    b3ea:	4620      	mov	r0, r4
    b3ec:	f008 fb86 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    b3f0:	4605      	mov	r5, r0
    b3f2:	b308      	cbz	r0, b438 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>
  if (data_type != kTfLiteFloat32) {
    b3f4:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    b3f8:	2b01      	cmp	r3, #1
    b3fa:	d127      	bne.n	b44c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>
  data->input_zero_point = input->params.zero_point;
    b3fc:	693b      	ldr	r3, [r7, #16]
    b3fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b400:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    b402:	f8d8 3010 	ldr.w	r3, [r8, #16]
    b406:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    b408:	692b      	ldr	r3, [r5, #16]
    b40a:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    b40c:	2000      	movs	r0, #0
    b40e:	e76a      	b.n	b2e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    b410:	6965      	ldr	r5, [r4, #20]
    b412:	4b25      	ldr	r3, [pc, #148]	; (b4a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    b414:	9300      	str	r3, [sp, #0]
    b416:	2361      	movs	r3, #97	; 0x61
    b418:	4a1e      	ldr	r2, [pc, #120]	; (b494 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b41a:	491f      	ldr	r1, [pc, #124]	; (b498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b41c:	4620      	mov	r0, r4
    b41e:	47a8      	blx	r5
    b420:	2001      	movs	r0, #1
    b422:	e760      	b.n	b2e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    b424:	6965      	ldr	r5, [r4, #20]
    b426:	4b21      	ldr	r3, [pc, #132]	; (b4ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    b428:	9300      	str	r3, [sp, #0]
    b42a:	2363      	movs	r3, #99	; 0x63
    b42c:	4a19      	ldr	r2, [pc, #100]	; (b494 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b42e:	491a      	ldr	r1, [pc, #104]	; (b498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b430:	4620      	mov	r0, r4
    b432:	47a8      	blx	r5
    b434:	2001      	movs	r0, #1
    b436:	e756      	b.n	b2e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    b438:	6965      	ldr	r5, [r4, #20]
    b43a:	4b1d      	ldr	r3, [pc, #116]	; (b4b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    b43c:	9300      	str	r3, [sp, #0]
    b43e:	2367      	movs	r3, #103	; 0x67
    b440:	4a14      	ldr	r2, [pc, #80]	; (b494 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b442:	4915      	ldr	r1, [pc, #84]	; (b498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b444:	4620      	mov	r0, r4
    b446:	47a8      	blx	r5
    b448:	2001      	movs	r0, #1
    b44a:	e74c      	b.n	b2e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    b44c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b450:	685b      	ldr	r3, [r3, #4]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    b452:	360c      	adds	r6, #12
    b454:	9308      	str	r3, [sp, #32]
    b456:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b45a:	9307      	str	r3, [sp, #28]
    b45c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b460:	9306      	str	r3, [sp, #24]
    b462:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b464:	3330      	adds	r3, #48	; 0x30
    b466:	9305      	str	r3, [sp, #20]
    b468:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b46a:	332c      	adds	r3, #44	; 0x2c
    b46c:	9304      	str	r3, [sp, #16]
    b46e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b470:	3320      	adds	r3, #32
    b472:	9303      	str	r3, [sp, #12]
    b474:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b476:	331c      	adds	r3, #28
    b478:	9302      	str	r3, [sp, #8]
    b47a:	9601      	str	r6, [sp, #4]
    b47c:	9000      	str	r0, [sp, #0]
    b47e:	464b      	mov	r3, r9
    b480:	4642      	mov	r2, r8
    b482:	4639      	mov	r1, r7
    b484:	4620      	mov	r0, r4
    b486:	f7fd ffff 	bl	9488 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    b48a:	2800      	cmp	r0, #0
    b48c:	d0b6      	beq.n	b3fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x164>
    b48e:	e72a      	b.n	b2e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    b490:	0006b284 	.word	0x0006b284
    b494:	0006b230 	.word	0x0006b230
    b498:	0006a8a8 	.word	0x0006a8a8
    b49c:	0006b8f0 	.word	0x0006b8f0
    b4a0:	0006b2a8 	.word	0x0006b2a8
    b4a4:	0006ab68 	.word	0x0006ab68
    b4a8:	0006b2bc 	.word	0x0006b2bc
    b4ac:	0006b2d0 	.word	0x0006b2d0
    b4b0:	0006b2e4 	.word	0x0006b2e4

0000b4b4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4b8:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    b4ba:	690e      	ldr	r6, [r1, #16]
    b4bc:	2e00      	cmp	r6, #0
    b4be:	d052      	beq.n	b566 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    b4c0:	4604      	mov	r4, r0
    b4c2:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b4c4:	694f      	ldr	r7, [r1, #20]
    b4c6:	2f00      	cmp	r7, #0
    b4c8:	d04f      	beq.n	b56a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb6>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    b4ca:	2200      	movs	r2, #0
    b4cc:	f008 fb16 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    b4d0:	4680      	mov	r8, r0
    b4d2:	2800      	cmp	r0, #0
    b4d4:	d04b      	beq.n	b56e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    b4d6:	2200      	movs	r2, #0
    b4d8:	4629      	mov	r1, r5
    b4da:	4620      	mov	r0, r4
    b4dc:	f008 faef 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    b4e0:	4681      	mov	r9, r0
    b4e2:	2800      	cmp	r0, #0
    b4e4:	d051      	beq.n	b58a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    b4e6:	2201      	movs	r2, #1
    b4e8:	4629      	mov	r1, r5
    b4ea:	4620      	mov	r0, r4
    b4ec:	f008 fae7 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    b4f0:	4682      	mov	sl, r0
    b4f2:	2800      	cmp	r0, #0
    b4f4:	d054      	beq.n	b5a0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xec>

  const int input_width = input->dims->data[2];
    b4f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    b4fa:	68da      	ldr	r2, [r3, #12]
    b4fc:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    b4fe:	689b      	ldr	r3, [r3, #8]
    b500:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    b502:	6883      	ldr	r3, [r0, #8]
    b504:	68da      	ldr	r2, [r3, #12]
    b506:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    b508:	689a      	ldr	r2, [r3, #8]
    b50a:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    b50c:	f8d8 2008 	ldr.w	r2, [r8, #8]
    b510:	68d1      	ldr	r1, [r2, #12]
    b512:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    b514:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    b518:	685a      	ldr	r2, [r3, #4]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    b51a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b51c:	ea4f 0882 	mov.w	r8, r2, lsl #2
    b520:	4641      	mov	r1, r8
    b522:	4620      	mov	r0, r4
    b524:	4798      	blx	r3
  data->per_channel_output_multiplier =
    b526:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    b528:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b52a:	4641      	mov	r1, r8
    b52c:	4620      	mov	r0, r4
    b52e:	4798      	blx	r3
  data->per_channel_output_shift =
    b530:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    b532:	f899 3000 	ldrb.w	r3, [r9]
    b536:	2b09      	cmp	r3, #9
    b538:	d03d      	beq.n	b5b6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
    b53a:	2b07      	cmp	r3, #7
    b53c:	d03b      	beq.n	b5b6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    b53e:	9606      	str	r6, [sp, #24]
    b540:	9305      	str	r3, [sp, #20]
    b542:	f8cd b010 	str.w	fp, [sp, #16]
    b546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b548:	9303      	str	r3, [sp, #12]
    b54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b54c:	9302      	str	r3, [sp, #8]
    b54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b550:	9301      	str	r3, [sp, #4]
    b552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b554:	9300      	str	r3, [sp, #0]
    b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b558:	463a      	mov	r2, r7
    b55a:	4629      	mov	r1, r5
    b55c:	4620      	mov	r0, r4
    b55e:	f7ff fe9b 	bl	b298 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    b562:	4680      	mov	r8, r0
    b564:	e00d      	b.n	b582 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node->user_data != nullptr);
    b566:	f00a fd2d 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b56a:	f00a fd2b 	bl	15fc4 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    b56e:	6965      	ldr	r5, [r4, #20]
    b570:	4b32      	ldr	r3, [pc, #200]	; (b63c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    b572:	9300      	str	r3, [sp, #0]
    b574:	2386      	movs	r3, #134	; 0x86
    b576:	4a32      	ldr	r2, [pc, #200]	; (b640 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b578:	4932      	ldr	r1, [pc, #200]	; (b644 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b57a:	4620      	mov	r0, r4
    b57c:	47a8      	blx	r5
    b57e:	f04f 0801 	mov.w	r8, #1
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    b582:	4640      	mov	r0, r8
    b584:	b00f      	add	sp, #60	; 0x3c
    b586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    b58a:	6965      	ldr	r5, [r4, #20]
    b58c:	4b2e      	ldr	r3, [pc, #184]	; (b648 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    b58e:	9300      	str	r3, [sp, #0]
    b590:	2388      	movs	r3, #136	; 0x88
    b592:	4a2b      	ldr	r2, [pc, #172]	; (b640 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b594:	492b      	ldr	r1, [pc, #172]	; (b644 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b596:	4620      	mov	r0, r4
    b598:	47a8      	blx	r5
    b59a:	f04f 0801 	mov.w	r8, #1
    b59e:	e7f0      	b.n	b582 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE(context, filter != nullptr);
    b5a0:	6965      	ldr	r5, [r4, #20]
    b5a2:	4b2a      	ldr	r3, [pc, #168]	; (b64c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    b5a4:	9300      	str	r3, [sp, #0]
    b5a6:	238a      	movs	r3, #138	; 0x8a
    b5a8:	4a25      	ldr	r2, [pc, #148]	; (b640 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b5aa:	4926      	ldr	r1, [pc, #152]	; (b644 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b5ac:	4620      	mov	r0, r4
    b5ae:	47a8      	blx	r5
    b5b0:	f04f 0801 	mov.w	r8, #1
    b5b4:	e7e5      	b.n	b582 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    b5b6:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    b5ba:	f1b8 0f01 	cmp.w	r8, #1
    b5be:	d00f      	beq.n	b5e0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    b5c0:	6966      	ldr	r6, [r4, #20]
    b5c2:	2501      	movs	r5, #1
    b5c4:	9503      	str	r5, [sp, #12]
    b5c6:	f8cd 8008 	str.w	r8, [sp, #8]
    b5ca:	4b21      	ldr	r3, [pc, #132]	; (b650 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    b5cc:	9301      	str	r3, [sp, #4]
    b5ce:	4b21      	ldr	r3, [pc, #132]	; (b654 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    b5d0:	9300      	str	r3, [sp, #0]
    b5d2:	239e      	movs	r3, #158	; 0x9e
    b5d4:	4a1a      	ldr	r2, [pc, #104]	; (b640 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b5d6:	4920      	ldr	r1, [pc, #128]	; (b658 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    b5d8:	4620      	mov	r0, r4
    b5da:	47b0      	blx	r6
    b5dc:	46a8      	mov	r8, r5
    b5de:	e7d0      	b.n	b582 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    const auto* affine_quantization =
    b5e0:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    b5e4:	b1a2      	cbz	r2, b610 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    b5e6:	6811      	ldr	r1, [r2, #0]
    b5e8:	b1a1      	cbz	r1, b614 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    b5ea:	6850      	ldr	r0, [r2, #4]
    b5ec:	b1a0      	cbz	r0, b618 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
    TF_LITE_ENSURE(context,
    b5ee:	680a      	ldr	r2, [r1, #0]
    b5f0:	2a01      	cmp	r2, #1
    b5f2:	d013      	beq.n	b61c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    b5f4:	f8da 1008 	ldr.w	r1, [sl, #8]
    b5f8:	6849      	ldr	r1, [r1, #4]
    b5fa:	428a      	cmp	r2, r1
    b5fc:	d00e      	beq.n	b61c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    b5fe:	6965      	ldr	r5, [r4, #20]
    b600:	4b16      	ldr	r3, [pc, #88]	; (b65c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    b602:	9300      	str	r3, [sp, #0]
    b604:	23a7      	movs	r3, #167	; 0xa7
    b606:	4a0e      	ldr	r2, [pc, #56]	; (b640 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b608:	490e      	ldr	r1, [pc, #56]	; (b644 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b60a:	4620      	mov	r0, r4
    b60c:	47a8      	blx	r5
    b60e:	e7b8      	b.n	b582 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK(affine_quantization != nullptr);
    b610:	f00a fcd8 	bl	15fc4 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    b614:	f00a fcd6 	bl	15fc4 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    b618:	f00a fcd4 	bl	15fc4 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    b61c:	6801      	ldr	r1, [r0, #0]
    b61e:	428a      	cmp	r2, r1
    b620:	d08d      	beq.n	b53e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    b622:	6965      	ldr	r5, [r4, #20]
    b624:	9103      	str	r1, [sp, #12]
    b626:	9202      	str	r2, [sp, #8]
    b628:	4b0d      	ldr	r3, [pc, #52]	; (b660 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    b62a:	9301      	str	r3, [sp, #4]
    b62c:	4b0d      	ldr	r3, [pc, #52]	; (b664 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    b62e:	9300      	str	r3, [sp, #0]
    b630:	23ab      	movs	r3, #171	; 0xab
    b632:	4a03      	ldr	r2, [pc, #12]	; (b640 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b634:	4908      	ldr	r1, [pc, #32]	; (b658 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    b636:	4620      	mov	r0, r4
    b638:	47a8      	blx	r5
    b63a:	e7a2      	b.n	b582 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    b63c:	0006b2e4 	.word	0x0006b2e4
    b640:	0006b230 	.word	0x0006b230
    b644:	0006a8a8 	.word	0x0006a8a8
    b648:	0006b2bc 	.word	0x0006b2bc
    b64c:	0006b2d0 	.word	0x0006b2d0
    b650:	0006ab84 	.word	0x0006ab84
    b654:	0006abbc 	.word	0x0006abbc
    b658:	0006ab68 	.word	0x0006ab68
    b65c:	0006b2f8 	.word	0x0006b2f8
    b660:	0006b374 	.word	0x0006b374
    b664:	0006ac70 	.word	0x0006ac70

0000b668 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    b668:	b470      	push	{r4, r5, r6}
    b66a:	4606      	mov	r6, r0
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    b66c:	4604      	mov	r4, r0
    b66e:	4d05      	ldr	r5, [pc, #20]	; (b684 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
    b670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b674:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    b67c:	4630      	mov	r0, r6
    b67e:	bc70      	pop	{r4, r5, r6}
    b680:	4770      	bx	lr
    b682:	bf00      	nop
    b684:	0006849c 	.word	0x0006849c

0000b688 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b68c:	b0a5      	sub	sp, #148	; 0x94
    b68e:	911a      	str	r1, [sp, #104]	; 0x68
    b690:	921b      	str	r2, [sp, #108]	; 0x6c
    b692:	461f      	mov	r7, r3
    b694:	f8dd 80bc 	ldr.w	r8, [sp, #188]	; 0xbc
    b698:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    b69a:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    b69e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    b6a2:	920f      	str	r2, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    b6a4:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    b6a8:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    b6aa:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    b6ae:	9211      	str	r2, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    b6b0:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    b6b4:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    b6b6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    b6ba:	9213      	str	r2, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    b6bc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    b6c0:	9214      	str	r2, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
    b6c2:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    b6c6:	9206      	str	r2, [sp, #24]
  const int32_t input_offset = params.input_offset;
    b6c8:	6942      	ldr	r2, [r0, #20]
    b6ca:	9215      	str	r2, [sp, #84]	; 0x54
  const int32_t output_offset = params.output_offset;
    b6cc:	69c2      	ldr	r2, [r0, #28]
    b6ce:	9216      	str	r2, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    b6d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b6d2:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    b6d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    b6d6:	921e      	str	r2, [sp, #120]	; 0x78
  inline int32_t DimensionsCount() const { return size_; }
    b6d8:	6838      	ldr	r0, [r7, #0]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    b6da:	2804      	cmp	r0, #4
    b6dc:	f040 80b6 	bne.w	b84c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    b6e0:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    b6e4:	2804      	cmp	r0, #4
    b6e6:	f040 80b3 	bne.w	b850 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c8>
    b6ea:	f8d9 0000 	ldr.w	r0, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    b6ee:	2804      	cmp	r0, #4
    b6f0:	f040 80b0 	bne.w	b854 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1cc>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    b6f4:	4291      	cmp	r1, r2
    b6f6:	f300 80af 	bgt.w	b858 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
    TFLITE_DCHECK_LT(i, size_);
    b6fa:	683a      	ldr	r2, [r7, #0]
    b6fc:	2a00      	cmp	r2, #0
    b6fe:	f340 80ad 	ble.w	b85c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b702:	2a05      	cmp	r2, #5
    b704:	f340 80ac 	ble.w	b860 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    b708:	687a      	ldr	r2, [r7, #4]
    b70a:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    b70c:	f8d9 1000 	ldr.w	r1, [r9]
    b710:	2900      	cmp	r1, #0
    b712:	f340 80a7 	ble.w	b864 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b716:	2905      	cmp	r1, #5
    b718:	f340 80a6 	ble.w	b868 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    b71c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b720:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    b722:	4291      	cmp	r1, r2
    b724:	f040 80a3 	bne.w	b86e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b728:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    b72a:	f8d9 1000 	ldr.w	r1, [r9]
    b72e:	2900      	cmp	r1, #0
    b730:	f340 809f 	ble.w	b872 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b734:	2905      	cmp	r1, #5
    b736:	f340 809e 	ble.w	b876 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ee>
    b73a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b73e:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b740:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    b742:	428a      	cmp	r2, r1
    b744:	f300 809a 	bgt.w	b87c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
      return __a;
    b748:	aa23      	add	r2, sp, #140	; 0x8c
    b74a:	6812      	ldr	r2, [r2, #0]
    b74c:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    b74e:	f8d8 2000 	ldr.w	r2, [r8]
    b752:	2a03      	cmp	r2, #3
    b754:	f340 8094 	ble.w	b880 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b758:	2a05      	cmp	r2, #5
    b75a:	f340 8093 	ble.w	b884 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fc>
    b75e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b762:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    b764:	f8d9 1000 	ldr.w	r1, [r9]
    b768:	2903      	cmp	r1, #3
    b76a:	f340 808e 	ble.w	b88a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b76e:	2905      	cmp	r1, #5
    b770:	f340 808d 	ble.w	b88e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
    b774:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b778:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    b77a:	4291      	cmp	r1, r2
    b77c:	f040 808a 	bne.w	b894 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b780:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    b782:	f8d9 1000 	ldr.w	r1, [r9]
    b786:	2903      	cmp	r1, #3
    b788:	f340 8086 	ble.w	b898 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b78c:	2905      	cmp	r1, #5
    b78e:	f340 8085 	ble.w	b89c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x214>
    b792:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b796:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b798:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    b79a:	428a      	cmp	r2, r1
    b79c:	f300 8081 	bgt.w	b8a2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
      return __a;
    b7a0:	aa21      	add	r2, sp, #132	; 0x84
    b7a2:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    b7a4:	683a      	ldr	r2, [r7, #0]
    b7a6:	2a01      	cmp	r2, #1
    b7a8:	dd7d      	ble.n	b8a6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7aa:	2a05      	cmp	r2, #5
    b7ac:	dd7d      	ble.n	b8aa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
    b7ae:	687a      	ldr	r2, [r7, #4]
    b7b0:	6852      	ldr	r2, [r2, #4]
    b7b2:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    b7b4:	683a      	ldr	r2, [r7, #0]
    b7b6:	2a02      	cmp	r2, #2
    b7b8:	dd7a      	ble.n	b8b0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7ba:	2a05      	cmp	r2, #5
    b7bc:	dd7a      	ble.n	b8b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
    b7be:	687a      	ldr	r2, [r7, #4]
    b7c0:	6892      	ldr	r2, [r2, #8]
    b7c2:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    b7c4:	683a      	ldr	r2, [r7, #0]
    b7c6:	2a03      	cmp	r2, #3
    b7c8:	dd77      	ble.n	b8ba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7ca:	2a05      	cmp	r2, #5
    b7cc:	dd77      	ble.n	b8be <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x236>
    b7ce:	687a      	ldr	r2, [r7, #4]
    b7d0:	68d2      	ldr	r2, [r2, #12]
    b7d2:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    b7d4:	f8d8 2000 	ldr.w	r2, [r8]
    b7d8:	2a01      	cmp	r2, #1
    b7da:	dd73      	ble.n	b8c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7dc:	2a05      	cmp	r2, #5
    b7de:	dd73      	ble.n	b8c8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x240>
    b7e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b7e4:	6852      	ldr	r2, [r2, #4]
    b7e6:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    b7e8:	f8d8 2000 	ldr.w	r2, [r8]
    b7ec:	2a02      	cmp	r2, #2
    b7ee:	dd6f      	ble.n	b8d0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b7f0:	2a05      	cmp	r2, #5
    b7f2:	dd6f      	ble.n	b8d4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
    b7f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b7f8:	6892      	ldr	r2, [r2, #8]
    b7fa:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    b7fc:	f8d9 2000 	ldr.w	r2, [r9]
    b800:	2a01      	cmp	r2, #1
    b802:	dd6b      	ble.n	b8dc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x254>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b804:	2a05      	cmp	r2, #5
    b806:	dd6b      	ble.n	b8e0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x258>
    b808:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b80c:	6852      	ldr	r2, [r2, #4]
    b80e:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    b810:	f8d9 2000 	ldr.w	r2, [r9]
    b814:	2a02      	cmp	r2, #2
    b816:	dd67      	ble.n	b8e8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x260>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b818:	2a05      	cmp	r2, #5
    b81a:	dd67      	ble.n	b8ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x264>
    b81c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b820:	6892      	ldr	r2, [r2, #8]
    b822:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    b824:	9a05      	ldr	r2, [sp, #20]
    b826:	9806      	ldr	r0, [sp, #24]
    b828:	fb02 f200 	mul.w	r2, r2, r0
    b82c:	428a      	cmp	r2, r1
    b82e:	d161      	bne.n	b8f4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b830:	681c      	ldr	r4, [r3, #0]
    b832:	2c05      	cmp	r4, #5
    b834:	dd60      	ble.n	b8f8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x270>
    b836:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    b838:	2200      	movs	r2, #0
    int buffer_size = 1;
    b83a:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    b83c:	42a2      	cmp	r2, r4
    b83e:	da5d      	bge.n	b8fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x274>
      buffer_size *= dims_data[i];
    b840:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b844:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
    b848:	3201      	adds	r2, #1
    b84a:	e7f7      	b.n	b83c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    b84c:	f00a fbba 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    b850:	f00a fbb8 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    b854:	f00a fbb6 	bl	15fc4 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    b858:	f00a fbb4 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b85c:	f00a fbb2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b860:	687a      	ldr	r2, [r7, #4]
    b862:	e753      	b.n	b70c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
    TFLITE_DCHECK_LT(i, size_);
    b864:	f00a fbae 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b868:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b86c:	e759      	b.n	b722 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    b86e:	f00a fba9 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b872:	f00a fba7 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b876:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b87a:	e761      	b.n	b740 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
	return __b;
    b87c:	aa22      	add	r2, sp, #136	; 0x88
    b87e:	e764      	b.n	b74a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
    TFLITE_DCHECK_LT(i, size_);
    b880:	f00a fba0 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b884:	f8d8 2010 	ldr.w	r2, [r8, #16]
    b888:	e76c      	b.n	b764 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xdc>
    TFLITE_DCHECK_LT(i, size_);
    b88a:	f00a fb9b 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b88e:	f8d9 1010 	ldr.w	r1, [r9, #16]
    b892:	e772      	b.n	b77a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    b894:	f00a fb96 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b898:	f00a fb94 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b89c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    b8a0:	e77a      	b.n	b798 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
    b8a2:	aa20      	add	r2, sp, #128	; 0x80
    b8a4:	e77d      	b.n	b7a2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11a>
    TFLITE_DCHECK_LT(i, size_);
    b8a6:	f00a fb8d 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8aa:	68ba      	ldr	r2, [r7, #8]
    b8ac:	920c      	str	r2, [sp, #48]	; 0x30
    b8ae:	e781      	b.n	b7b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    TFLITE_DCHECK_LT(i, size_);
    b8b0:	f00a fb88 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8b4:	68fa      	ldr	r2, [r7, #12]
    b8b6:	920b      	str	r2, [sp, #44]	; 0x2c
    b8b8:	e784      	b.n	b7c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
    TFLITE_DCHECK_LT(i, size_);
    b8ba:	f00a fb83 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8be:	693a      	ldr	r2, [r7, #16]
    b8c0:	9205      	str	r2, [sp, #20]
    b8c2:	e787      	b.n	b7d4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14c>
    TFLITE_DCHECK_LT(i, size_);
    b8c4:	f00a fb7e 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8c8:	f8d8 2008 	ldr.w	r2, [r8, #8]
    b8cc:	920a      	str	r2, [sp, #40]	; 0x28
    b8ce:	e78b      	b.n	b7e8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    TFLITE_DCHECK_LT(i, size_);
    b8d0:	f00a fb78 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8d4:	f8d8 200c 	ldr.w	r2, [r8, #12]
    b8d8:	9209      	str	r2, [sp, #36]	; 0x24
    b8da:	e78f      	b.n	b7fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
    TFLITE_DCHECK_LT(i, size_);
    b8dc:	f00a fb72 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8e0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    b8e4:	9208      	str	r2, [sp, #32]
    b8e6:	e793      	b.n	b810 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    TFLITE_DCHECK_LT(i, size_);
    b8e8:	f00a fb6c 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8ec:	f8d9 200c 	ldr.w	r2, [r9, #12]
    b8f0:	9207      	str	r2, [sp, #28]
    b8f2:	e797      	b.n	b824 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    b8f4:	f00a fb66 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b8f8:	3304      	adds	r3, #4
    b8fa:	e79d      	b.n	b838 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    b8fc:	428d      	cmp	r5, r1
    b8fe:	d128      	bne.n	b952 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>

  for (int batch = 0; batch < batches; ++batch) {
    b900:	f04f 0a00 	mov.w	sl, #0
    b904:	46c3      	mov	fp, r8
    b906:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    b90a:	46d1      	mov	r9, sl
    b90c:	46ba      	mov	sl, r7
    b90e:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    b910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    b912:	4599      	cmp	r9, r3
    b914:	f280 81b4 	bge.w	bc80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    b918:	2300      	movs	r3, #0
    b91a:	9301      	str	r3, [sp, #4]
    b91c:	f8cd 900c 	str.w	r9, [sp, #12]
    b920:	46d0      	mov	r8, sl
    b922:	46d9      	mov	r9, fp
    b924:	46ba      	mov	sl, r7
    b926:	9b01      	ldr	r3, [sp, #4]
    b928:	9a08      	ldr	r2, [sp, #32]
    b92a:	4293      	cmp	r3, r2
    b92c:	f280 81a0 	bge.w	bc70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    b930:	2300      	movs	r3, #0
    b932:	9302      	str	r3, [sp, #8]
    b934:	464f      	mov	r7, r9
    b936:	46c1      	mov	r9, r8
    b938:	46d0      	mov	r8, sl
    b93a:	9b02      	ldr	r3, [sp, #8]
    b93c:	9a07      	ldr	r2, [sp, #28]
    b93e:	4293      	cmp	r3, r2
    b940:	f280 818f 	bge.w	bc62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5da>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    b944:	f04f 0b00 	mov.w	fp, #0
    b948:	46da      	mov	sl, fp
    b94a:	46cb      	mov	fp, r9
    b94c:	46c1      	mov	r9, r8
    b94e:	46b8      	mov	r8, r7
    b950:	e17a      	b.n	bc48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    b952:	f00a fb37 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b956:	f00a fb35 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b95a:	f00a fb33 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b95e:	f00a fb31 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b962:	f00a fb2f 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b966:	f00a fb2d 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b96a:	f00a fb2b 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b96e:	f00a fb29 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b972:	f00a fb27 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b976:	f00a fb25 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b97a:	f00a fb23 	bl	15fc4 <abort>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    b97e:	3201      	adds	r2, #1
    b980:	9909      	ldr	r1, [sp, #36]	; 0x24
    b982:	428a      	cmp	r2, r1
    b984:	da5e      	bge.n	ba44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3bc>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    b986:	9911      	ldr	r1, [sp, #68]	; 0x44
    b988:	980d      	ldr	r0, [sp, #52]	; 0x34
    b98a:	fb01 0602 	mla	r6, r1, r2, r0
                const int in_y =
    b98e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b990:	fb01 4703 	mla	r7, r1, r3, r4
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    b994:	2e00      	cmp	r6, #0
    b996:	dbf2      	blt.n	b97e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    b998:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b99a:	428e      	cmp	r6, r1
    b99c:	daef      	bge.n	b97e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    b99e:	2f00      	cmp	r7, #0
    b9a0:	dbed      	blt.n	b97e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    b9a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    b9a4:	428f      	cmp	r7, r1
    b9a6:	daea      	bge.n	b97e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
  inline int32_t DimensionsCount() const { return size_; }
    b9a8:	f8db 0000 	ldr.w	r0, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b9ac:	2804      	cmp	r0, #4
    b9ae:	d1d2      	bne.n	b956 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b9b0:	9903      	ldr	r1, [sp, #12]
    b9b2:	2900      	cmp	r1, #0
    b9b4:	dbd1      	blt.n	b95a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    b9b6:	f8db 0004 	ldr.w	r0, [fp, #4]
    b9ba:	4281      	cmp	r1, r0
    b9bc:	dacd      	bge.n	b95a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b9be:	2f00      	cmp	r7, #0
    b9c0:	dbcd      	blt.n	b95e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
    b9c2:	f8db e008 	ldr.w	lr, [fp, #8]
    b9c6:	4577      	cmp	r7, lr
    b9c8:	dac9      	bge.n	b95e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b9ca:	2e00      	cmp	r6, #0
    b9cc:	dbc9      	blt.n	b962 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
    b9ce:	f8db c00c 	ldr.w	ip, [fp, #12]
    b9d2:	4566      	cmp	r6, ip
    b9d4:	dac5      	bge.n	b962 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b9d6:	f1ba 0f00 	cmp.w	sl, #0
    b9da:	dbc4      	blt.n	b966 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
    b9dc:	f8db 0010 	ldr.w	r0, [fp, #16]
    b9e0:	4582      	cmp	sl, r0
    b9e2:	dac0      	bge.n	b966 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    b9e4:	9903      	ldr	r1, [sp, #12]
    b9e6:	fb0e 7701 	mla	r7, lr, r1, r7
    b9ea:	fb07 660c 	mla	r6, r7, ip, r6
    b9ee:	fb06 a000 	mla	r0, r6, r0, sl
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
                      input_shape, batch, in_y, in_x, in_channel)];
    b9f2:	992e      	ldr	r1, [sp, #184]	; 0xb8
    b9f4:	560e      	ldrsb	r6, [r1, r0]
  inline int32_t DimensionsCount() const { return size_; }
    b9f6:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b9fa:	2804      	cmp	r0, #4
    b9fc:	d1b5      	bne.n	b96a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b9fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
    ba02:	2800      	cmp	r0, #0
    ba04:	ddb3      	ble.n	b96e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e6>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ba06:	2b00      	cmp	r3, #0
    ba08:	dbb3      	blt.n	b972 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
    ba0a:	f8d8 0008 	ldr.w	r0, [r8, #8]
    ba0e:	4283      	cmp	r3, r0
    ba10:	daaf      	bge.n	b972 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ba12:	2a00      	cmp	r2, #0
    ba14:	dbaf      	blt.n	b976 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
    ba16:	f8d8 700c 	ldr.w	r7, [r8, #12]
    ba1a:	42ba      	cmp	r2, r7
    ba1c:	daab      	bge.n	b976 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ba1e:	2d00      	cmp	r5, #0
    ba20:	dbab      	blt.n	b97a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
    ba22:	f8d8 0010 	ldr.w	r0, [r8, #16]
    ba26:	4285      	cmp	r5, r0
    ba28:	daa7      	bge.n	b97a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ba2a:	fb07 2703 	mla	r7, r7, r3, r2
    ba2e:	fb07 5000 	mla	r0, r7, r0, r5
                  int32_t filter_val = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    ba32:	9930      	ldr	r1, [sp, #192]	; 0xc0
    ba34:	560f      	ldrsb	r7, [r1, r0]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    ba36:	9915      	ldr	r1, [sp, #84]	; 0x54
    ba38:	440e      	add	r6, r1
    ba3a:	981d      	ldr	r0, [sp, #116]	; 0x74
    ba3c:	fb07 0006 	mla	r0, r7, r6, r0
    ba40:	901d      	str	r0, [sp, #116]	; 0x74
    ba42:	e79c      	b.n	b97e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    ba44:	990d      	ldr	r1, [sp, #52]	; 0x34
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    ba46:	3301      	adds	r3, #1
    ba48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ba4a:	4293      	cmp	r3, r2
    ba4c:	da02      	bge.n	ba54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cc>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    ba4e:	2200      	movs	r2, #0
    ba50:	910d      	str	r1, [sp, #52]	; 0x34
    ba52:	e795      	b.n	b980 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
                }
              }
            }
            if (bias_data) {
    ba54:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    ba56:	b123      	cbz	r3, ba62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3da>
              acc += bias_data[output_channel];
    ba58:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    ba5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ba5e:	4413      	add	r3, r2
    ba60:	931d      	str	r3, [sp, #116]	; 0x74
            }
            acc = MultiplyByQuantizedMultiplier(
    ba62:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    ba64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ba66:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    ba6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ba6c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    ba70:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ba74:	2e00      	cmp	r6, #0
    ba76:	f340 80b3 	ble.w	bbe0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    ba7a:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ba7c:	409c      	lsls	r4, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ba7e:	45a4      	cmp	ip, r4
    ba80:	f000 80b0 	beq.w	bbe4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x55c>
    ba84:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ba86:	17e3      	asrs	r3, r4, #31
  std::int64_t b_64(b);
    ba88:	4660      	mov	r0, ip
    ba8a:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    ba8c:	fb04 f101 	mul.w	r1, r4, r1
    ba90:	fb0c 1103 	mla	r1, ip, r3, r1
    ba94:	fba4 230c 	umull	r2, r3, r4, ip
    ba98:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ba9a:	2a00      	cmp	r2, #0
    ba9c:	f173 0100 	sbcs.w	r1, r3, #0
    baa0:	f2c0 80a7 	blt.w	bbf2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56a>
    baa4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    baa8:	1852      	adds	r2, r2, r1
    baaa:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    baae:	4611      	mov	r1, r2
    bab0:	461c      	mov	r4, r3
    bab2:	2a00      	cmp	r2, #0
    bab4:	f173 0000 	sbcs.w	r0, r3, #0
    bab8:	f2c0 809d 	blt.w	bbf6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56e>
    babc:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    babe:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bac2:	2f00      	cmp	r7, #0
    bac4:	f040 809f 	bne.w	bc06 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57e>
  assert(exponent >= 0);
    bac8:	2e00      	cmp	r6, #0
    baca:	f2c0 809f 	blt.w	bc0c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x584>
  assert(exponent <= 31);
    bace:	2e1f      	cmp	r6, #31
    bad0:	f300 80a3 	bgt.w	bc1a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x592>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    bad4:	2701      	movs	r7, #1
    bad6:	fa07 f006 	lsl.w	r0, r7, r6
    bada:	3801      	subs	r0, #1
    badc:	f008 f8c2 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bae0:	900d      	str	r0, [sp, #52]	; 0x34
  const IntegerType zero = Dup<IntegerType>(0);
    bae2:	2000      	movs	r0, #0
    bae4:	f008 f8be 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bae8:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    baea:	4638      	mov	r0, r7
    baec:	f008 f8ba 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    baf0:	900e      	str	r0, [sp, #56]	; 0x38
  const IntegerType remainder = BitAnd(x, mask);
    baf2:	990d      	ldr	r1, [sp, #52]	; 0x34
    baf4:	4620      	mov	r0, r4
    baf6:	f008 f8b6 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    bafa:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    bafc:	4639      	mov	r1, r7
    bafe:	980d      	ldr	r0, [sp, #52]	; 0x34
    bb00:	f008 f8b3 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    bb04:	4607      	mov	r7, r0
    bb06:	9918      	ldr	r1, [sp, #96]	; 0x60
    bb08:	4620      	mov	r0, r4
    bb0a:	f008 f8ba 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    bb0e:	990e      	ldr	r1, [sp, #56]	; 0x38
    bb10:	f008 f8a9 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    bb14:	4601      	mov	r1, r0
    bb16:	4638      	mov	r0, r7
    bb18:	f008 f8a9 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    bb1c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    bb1e:	4631      	mov	r1, r6
    bb20:	4620      	mov	r0, r4
    bb22:	f008 f8a2 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    bb26:	4604      	mov	r4, r0
    bb28:	4639      	mov	r1, r7
    bb2a:	9819      	ldr	r0, [sp, #100]	; 0x64
    bb2c:	f008 f8b1 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    bb30:	990e      	ldr	r1, [sp, #56]	; 0x38
    bb32:	f008 f898 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    bb36:	4601      	mov	r1, r0
    bb38:	4620      	mov	r0, r4
    bb3a:	f008 f898 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    bb3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bb40:	4418      	add	r0, r3
    bb42:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    bb44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    bb46:	4290      	cmp	r0, r2
    bb48:	db6e      	blt.n	bc28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a0>
      return __a;
    bb4a:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::max(acc, output_activation_min);
    bb4c:	681b      	ldr	r3, [r3, #0]
    bb4e:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    bb50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    bb52:	4293      	cmp	r3, r2
    bb54:	dc6a      	bgt.n	bc2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a4>
      return __a;
    bb56:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::min(acc, output_activation_max);
    bb58:	6818      	ldr	r0, [r3, #0]
    bb5a:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    bb5c:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bb60:	2b04      	cmp	r3, #4
    bb62:	d165      	bne.n	bc30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bb64:	9a03      	ldr	r2, [sp, #12]
    bb66:	2a00      	cmp	r2, #0
    bb68:	db64      	blt.n	bc34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
    bb6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    bb6e:	429a      	cmp	r2, r3
    bb70:	da60      	bge.n	bc34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bb72:	9b01      	ldr	r3, [sp, #4]
    bb74:	2b00      	cmp	r3, #0
    bb76:	db5f      	blt.n	bc38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
    bb78:	f8d9 1008 	ldr.w	r1, [r9, #8]
    bb7c:	428b      	cmp	r3, r1
    bb7e:	da5b      	bge.n	bc38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bb80:	9b02      	ldr	r3, [sp, #8]
    bb82:	2b00      	cmp	r3, #0
    bb84:	db5a      	blt.n	bc3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
    bb86:	f8d9 200c 	ldr.w	r2, [r9, #12]
    bb8a:	4293      	cmp	r3, r2
    bb8c:	da56      	bge.n	bc3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bb8e:	2d00      	cmp	r5, #0
    bb90:	db56      	blt.n	bc40 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    bb92:	f8d9 3010 	ldr.w	r3, [r9, #16]
    bb96:	429d      	cmp	r5, r3
    bb98:	da52      	bge.n	bc40 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    bb9a:	9c03      	ldr	r4, [sp, #12]
    bb9c:	9e01      	ldr	r6, [sp, #4]
    bb9e:	fb01 6104 	mla	r1, r1, r4, r6
    bba2:	9c02      	ldr	r4, [sp, #8]
    bba4:	fb01 4202 	mla	r2, r1, r2, r4
    bba8:	fb02 5303 	mla	r3, r2, r3, r5
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
    bbac:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    bbae:	54d0      	strb	r0, [r2, r3]
          for (int m = 0; m < depth_multiplier; ++m) {
    bbb0:	9b04      	ldr	r3, [sp, #16]
    bbb2:	3301      	adds	r3, #1
    bbb4:	9304      	str	r3, [sp, #16]
    bbb6:	9904      	ldr	r1, [sp, #16]
    bbb8:	9b06      	ldr	r3, [sp, #24]
    bbba:	4299      	cmp	r1, r3
    bbbc:	da42      	bge.n	bc44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
            const int output_channel = m + in_channel * depth_multiplier;
    bbbe:	fb03 150a 	mla	r5, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
    bbc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bbc4:	9a02      	ldr	r2, [sp, #8]
    bbc6:	fb03 f102 	mul.w	r1, r3, r2
    bbca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bbcc:	1ac9      	subs	r1, r1, r3
            const int in_y_origin = (out_y * stride_height) - pad_height;
    bbce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bbd0:	9a01      	ldr	r2, [sp, #4]
    bbd2:	fb03 f402 	mul.w	r4, r3, r2
    bbd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bbd8:	1ae4      	subs	r4, r4, r3
            int32_t acc = 0;
    bbda:	2300      	movs	r3, #0
    bbdc:	931d      	str	r3, [sp, #116]	; 0x74
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    bbde:	e733      	b.n	ba48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c0>
  int right_shift = shift > 0 ? 0 : -shift;
    bbe0:	4276      	negs	r6, r6
    bbe2:	e74b      	b.n	ba7c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3f4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bbe4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    bbe8:	d001      	beq.n	bbee <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x566>
    bbea:	2700      	movs	r7, #0
    bbec:	e74b      	b.n	ba86 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
    bbee:	2701      	movs	r7, #1
    bbf0:	e749      	b.n	ba86 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bbf2:	4925      	ldr	r1, [pc, #148]	; (bc88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    bbf4:	e758      	b.n	baa8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x420>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bbf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bbfa:	1851      	adds	r1, r2, r1
    bbfc:	f04f 0400 	mov.w	r4, #0
    bc00:	eb43 0404 	adc.w	r4, r3, r4
    bc04:	e75a      	b.n	babc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x434>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bc06:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bc0a:	e75d      	b.n	bac8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x440>
  assert(exponent >= 0);
    bc0c:	4b1f      	ldr	r3, [pc, #124]	; (bc8c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    bc0e:	4a20      	ldr	r2, [pc, #128]	; (bc90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    bc10:	f44f 71b3 	mov.w	r1, #358	; 0x166
    bc14:	481f      	ldr	r0, [pc, #124]	; (bc94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    bc16:	f004 fdd3 	bl	107c0 <__assert_func>
  assert(exponent <= 31);
    bc1a:	4b1f      	ldr	r3, [pc, #124]	; (bc98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x610>)
    bc1c:	4a1c      	ldr	r2, [pc, #112]	; (bc90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    bc1e:	f240 1167 	movw	r1, #359	; 0x167
    bc22:	481c      	ldr	r0, [pc, #112]	; (bc94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    bc24:	f004 fdcc 	bl	107c0 <__assert_func>
	return __b;
    bc28:	ab1f      	add	r3, sp, #124	; 0x7c
    bc2a:	e78f      	b.n	bb4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c4>
	return __b;
    bc2c:	ab1e      	add	r3, sp, #120	; 0x78
    bc2e:	e793      	b.n	bb58 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bc30:	f00a f9c8 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bc34:	f00a f9c6 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bc38:	f00a f9c4 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bc3c:	f00a f9c2 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bc40:	f00a f9c0 	bl	15fc4 <abort>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    bc44:	f10a 0a01 	add.w	sl, sl, #1
    bc48:	9b05      	ldr	r3, [sp, #20]
    bc4a:	459a      	cmp	sl, r3
    bc4c:	da02      	bge.n	bc54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5cc>
          for (int m = 0; m < depth_multiplier; ++m) {
    bc4e:	2300      	movs	r3, #0
    bc50:	9304      	str	r3, [sp, #16]
    bc52:	e7b0      	b.n	bbb6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52e>
    bc54:	4647      	mov	r7, r8
    bc56:	46c8      	mov	r8, r9
    bc58:	46d9      	mov	r9, fp
      for (int out_x = 0; out_x < output_width; ++out_x) {
    bc5a:	9b02      	ldr	r3, [sp, #8]
    bc5c:	3301      	adds	r3, #1
    bc5e:	9302      	str	r3, [sp, #8]
    bc60:	e66b      	b.n	b93a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b2>
    bc62:	46c2      	mov	sl, r8
    bc64:	46c8      	mov	r8, r9
    bc66:	46b9      	mov	r9, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
    bc68:	9b01      	ldr	r3, [sp, #4]
    bc6a:	3301      	adds	r3, #1
    bc6c:	9301      	str	r3, [sp, #4]
    bc6e:	e65a      	b.n	b926 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
    bc70:	46cb      	mov	fp, r9
    bc72:	f8dd 900c 	ldr.w	r9, [sp, #12]
    bc76:	4657      	mov	r7, sl
    bc78:	46c2      	mov	sl, r8
  for (int batch = 0; batch < batches; ++batch) {
    bc7a:	f109 0901 	add.w	r9, r9, #1
    bc7e:	e647      	b.n	b910 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
          }
        }
      }
    }
  }
}
    bc80:	b025      	add	sp, #148	; 0x94
    bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc86:	bf00      	nop
    bc88:	c0000001 	.word	0xc0000001
    bc8c:	0006b05c 	.word	0x0006b05c
    bc90:	0006b06c 	.word	0x0006b06c
    bc94:	0006b0c4 	.word	0x0006b0c4
    bc98:	0006b120 	.word	0x0006b120

0000bc9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bca0:	b0cb      	sub	sp, #300	; 0x12c
  TFLITE_DCHECK(node->user_data != nullptr);
    bca2:	f8d1 9010 	ldr.w	r9, [r1, #16]
    bca6:	f1b9 0f00 	cmp.w	r9, #0
    bcaa:	d041      	beq.n	bd30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
    bcac:	4605      	mov	r5, r0
    bcae:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    bcb0:	f8d1 a014 	ldr.w	sl, [r1, #20]
    bcb4:	f1ba 0f00 	cmp.w	sl, #0
    bcb8:	d03c      	beq.n	bd34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
    bcba:	4b86      	ldr	r3, [pc, #536]	; (bed4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>)
    bcbc:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bcbe:	2800      	cmp	r0, #0
    bcc0:	d03a      	beq.n	bd38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  TFLITE_DCHECK(node != nullptr);
    bcc2:	2e00      	cmp	r6, #0
    bcc4:	d03a      	beq.n	bd3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    bcc6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    bcc8:	6873      	ldr	r3, [r6, #4]
    bcca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bcce:	6859      	ldr	r1, [r3, #4]
    bcd0:	4790      	blx	r2
    bcd2:	4604      	mov	r4, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
    bcd4:	4b80      	ldr	r3, [pc, #512]	; (bed8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    bcd6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bcd8:	2d00      	cmp	r5, #0
    bcda:	d031      	beq.n	bd40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
  TFLITE_DCHECK(node != nullptr);
    bcdc:	2e00      	cmp	r6, #0
    bcde:	d031      	beq.n	bd44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bce0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    bce2:	6833      	ldr	r3, [r6, #0]
    bce4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bce8:	6859      	ldr	r1, [r3, #4]
    bcea:	4628      	mov	r0, r5
    bcec:	4790      	blx	r2
    bcee:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
    bcf0:	4b7a      	ldr	r3, [pc, #488]	; (bedc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
    bcf2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bcf4:	b345      	cbz	r5, bd48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
  TFLITE_DCHECK(node != nullptr);
    bcf6:	b34e      	cbz	r6, bd4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bcf8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    bcfa:	6833      	ldr	r3, [r6, #0]
    bcfc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bd00:	6859      	ldr	r1, [r3, #4]
    bd02:	4628      	mov	r0, r5
    bd04:	4790      	blx	r2
    bd06:	4680      	mov	r8, r0
    bd08:	6833      	ldr	r3, [r6, #0]
    bd0a:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    bd0c:	2b03      	cmp	r3, #3
    bd0e:	d01f      	beq.n	bd50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    bd10:	2600      	movs	r6, #0
  switch (input->type) {  // Already know in/out types are same.
    bd12:	7a38      	ldrb	r0, [r7, #8]
    bd14:	2801      	cmp	r0, #1
    bd16:	d02c      	beq.n	bd72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    bd18:	2809      	cmp	r0, #9
    bd1a:	d07f      	beq.n	be1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    bd1c:	696c      	ldr	r4, [r5, #20]
    bd1e:	f7fd f965 	bl	8fec <TfLiteTypeGetName>
    bd22:	4602      	mov	r2, r0
    bd24:	7a3b      	ldrb	r3, [r7, #8]
    bd26:	496e      	ldr	r1, [pc, #440]	; (bee0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
    bd28:	4628      	mov	r0, r5
    bd2a:	47a0      	blx	r4
      return kTfLiteError;
    bd2c:	2001      	movs	r0, #1
    bd2e:	e072      	b.n	be16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
  TFLITE_DCHECK(node->user_data != nullptr);
    bd30:	f00a f948 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    bd34:	f00a f946 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    bd38:	f00a f944 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    bd3c:	f00a f942 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    bd40:	f00a f940 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    bd44:	f00a f93e 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    bd48:	f00a f93c 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    bd4c:	f00a f93a 	bl	15fc4 <abort>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    bd50:	4b64      	ldr	r3, [pc, #400]	; (bee4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
    bd52:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bd54:	b14d      	cbz	r5, bd6a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node != nullptr);
    bd56:	b156      	cbz	r6, bd6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bd58:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    bd5a:	6833      	ldr	r3, [r6, #0]
    bd5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bd60:	6859      	ldr	r1, [r3, #4]
    bd62:	4628      	mov	r0, r5
    bd64:	4790      	blx	r2
    bd66:	4606      	mov	r6, r0
    bd68:	e7d3      	b.n	bd12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TFLITE_DCHECK(context != nullptr);
    bd6a:	f00a f92b 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    bd6e:	f00a f929 	bl	15fc4 <abort>
          DepthwiseConvParamsFloat(params, data),
    bd72:	464a      	mov	r2, r9
    bd74:	4651      	mov	r1, sl
    bd76:	a80a      	add	r0, sp, #40	; 0x28
    bd78:	f008 fccf 	bl	1471a <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    bd7c:	4639      	mov	r1, r7
    bd7e:	a81a      	add	r0, sp, #104	; 0x68
    bd80:	f008 fd45 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bd84:	4638      	mov	r0, r7
    bd86:	f007 ff59 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    bd8a:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(filter),
    bd8c:	4641      	mov	r1, r8
    bd8e:	a820      	add	r0, sp, #128	; 0x80
    bd90:	f008 fd3d 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bd94:	4640      	mov	r0, r8
    bd96:	f007 ff51 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    bd9a:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(bias),
    bd9c:	f10d 0898 	add.w	r8, sp, #152	; 0x98
    bda0:	4631      	mov	r1, r6
    bda2:	4640      	mov	r0, r8
    bda4:	f008 fd33 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bda8:	4630      	mov	r0, r6
    bdaa:	f007 ff47 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    bdae:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    bdb0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    bdb4:	4621      	mov	r1, r4
    bdb6:	4648      	mov	r0, r9
    bdb8:	f008 fd29 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bdbc:	4620      	mov	r0, r4
    bdbe:	f007 ff43 	bl	13c48 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    bdc2:	9004      	str	r0, [sp, #16]
    bdc4:	f8cd 900c 	str.w	r9, [sp, #12]
    bdc8:	9602      	str	r6, [sp, #8]
    bdca:	f8cd 8004 	str.w	r8, [sp, #4]
    bdce:	9700      	str	r7, [sp, #0]
    bdd0:	ab20      	add	r3, sp, #128	; 0x80
    bdd2:	462a      	mov	r2, r5
    bdd4:	a91a      	add	r1, sp, #104	; 0x68
    bdd6:	a80a      	add	r0, sp, #40	; 0x28
    bdd8:	f008 fa21 	bl	1421e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
    if (size_ > kMaxSmallSize) {
    bddc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    bdde:	2b05      	cmp	r3, #5
    bde0:	dd03      	ble.n	bdea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
      delete[] dims_pointer_;
    bde2:	982d      	ldr	r0, [sp, #180]	; 0xb4
    bde4:	b108      	cbz	r0, bdea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    bde6:	f00a f8d8 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bdea:	9b26      	ldr	r3, [sp, #152]	; 0x98
    bdec:	2b05      	cmp	r3, #5
    bdee:	dd03      	ble.n	bdf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
      delete[] dims_pointer_;
    bdf0:	9827      	ldr	r0, [sp, #156]	; 0x9c
    bdf2:	b108      	cbz	r0, bdf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    bdf4:	f00a f8d1 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bdf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    bdfa:	2b05      	cmp	r3, #5
    bdfc:	dd03      	ble.n	be06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    bdfe:	9821      	ldr	r0, [sp, #132]	; 0x84
    be00:	b108      	cbz	r0, be06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    be02:	f00a f8ca 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    be06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    be08:	2b05      	cmp	r3, #5
    be0a:	dd03      	ble.n	be14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    be0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    be0e:	b108      	cbz	r0, be14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    be10:	f00a f8c3 	bl	15f9a <_ZdaPv>
  return kTfLiteOk;
    be14:	2000      	movs	r0, #0
}
    be16:	b04b      	add	sp, #300	; 0x12c
    be18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DepthwiseConvParamsQuantized(params, data),
    be1c:	464a      	mov	r2, r9
    be1e:	4651      	mov	r1, sl
    be20:	a80a      	add	r0, sp, #40	; 0x28
    be22:	f008 fc51 	bl	146c8 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    be26:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
    be2a:	f8d9 b028 	ldr.w	fp, [r9, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
    be2e:	4639      	mov	r1, r7
    be30:	a832      	add	r0, sp, #200	; 0xc8
    be32:	f008 fcec 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    be36:	4638      	mov	r0, r7
    be38:	f007 ff0a 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    be3c:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    be3e:	af38      	add	r7, sp, #224	; 0xe0
    be40:	4641      	mov	r1, r8
    be42:	4638      	mov	r0, r7
    be44:	f008 fce3 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    be48:	4640      	mov	r0, r8
    be4a:	f007 ff01 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    be4e:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    be50:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
    be54:	4631      	mov	r1, r6
    be56:	4640      	mov	r0, r8
    be58:	f008 fcd9 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    be5c:	4630      	mov	r0, r6
    be5e:	f007 ff2a 	bl	13cb6 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    be62:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    be64:	f50d 7988 	add.w	r9, sp, #272	; 0x110
    be68:	4621      	mov	r1, r4
    be6a:	4648      	mov	r0, r9
    be6c:	f008 fccf 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    be70:	4620      	mov	r0, r4
    be72:	f007 fef3 	bl	13c5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    be76:	9006      	str	r0, [sp, #24]
    be78:	f8cd 9014 	str.w	r9, [sp, #20]
    be7c:	9604      	str	r6, [sp, #16]
    be7e:	f8cd 800c 	str.w	r8, [sp, #12]
    be82:	9502      	str	r5, [sp, #8]
    be84:	9701      	str	r7, [sp, #4]
    be86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be88:	9300      	str	r3, [sp, #0]
    be8a:	ab32      	add	r3, sp, #200	; 0xc8
    be8c:	465a      	mov	r2, fp
    be8e:	4651      	mov	r1, sl
    be90:	a80a      	add	r0, sp, #40	; 0x28
    be92:	f7ff fbf9 	bl	b688 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    be96:	9b44      	ldr	r3, [sp, #272]	; 0x110
    be98:	2b05      	cmp	r3, #5
    be9a:	dd03      	ble.n	bea4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
      delete[] dims_pointer_;
    be9c:	9845      	ldr	r0, [sp, #276]	; 0x114
    be9e:	b108      	cbz	r0, bea4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
    bea0:	f00a f87b 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bea4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    bea6:	2b05      	cmp	r3, #5
    bea8:	dd03      	ble.n	beb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
      delete[] dims_pointer_;
    beaa:	983f      	ldr	r0, [sp, #252]	; 0xfc
    beac:	b108      	cbz	r0, beb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    beae:	f00a f874 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    beb2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    beb4:	2b05      	cmp	r3, #5
    beb6:	dd03      	ble.n	bec0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
      delete[] dims_pointer_;
    beb8:	9839      	ldr	r0, [sp, #228]	; 0xe4
    beba:	b108      	cbz	r0, bec0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    bebc:	f00a f86d 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bec0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    bec2:	2b05      	cmp	r3, #5
    bec4:	dd03      	ble.n	bece <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
      delete[] dims_pointer_;
    bec6:	9833      	ldr	r0, [sp, #204]	; 0xcc
    bec8:	b108      	cbz	r0, bece <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
    beca:	f00a f866 	bl	15f9a <_ZdaPv>
  return kTfLiteOk;
    bece:	2000      	movs	r0, #0
      break;
    bed0:	e7a1      	b.n	be16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    bed2:	bf00      	nop
    bed4:	0006b494 	.word	0x0006b494
    bed8:	0006b490 	.word	0x0006b490
    bedc:	0006b498 	.word	0x0006b498
    bee0:	0006b214 	.word	0x0006b214
    bee4:	0006b48c 	.word	0x0006b48c

0000bee8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    bee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    beec:	b08f      	sub	sp, #60	; 0x3c
    beee:	4604      	mov	r4, r0
    bef0:	460d      	mov	r5, r1
    bef2:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    bef4:	6809      	ldr	r1, [r1, #0]
    bef6:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    bef8:	2903      	cmp	r1, #3
    befa:	d00a      	beq.n	bf12 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    befc:	2902      	cmp	r1, #2
    befe:	d008      	beq.n	bf12 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    bf00:	6945      	ldr	r5, [r0, #20]
    bf02:	4b79      	ldr	r3, [pc, #484]	; (c0e8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    bf04:	9300      	str	r3, [sp, #0]
    bf06:	2357      	movs	r3, #87	; 0x57
    bf08:	4a78      	ldr	r2, [pc, #480]	; (c0ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    bf0a:	4979      	ldr	r1, [pc, #484]	; (c0f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    bf0c:	47a8      	blx	r5
    bf0e:	2001      	movs	r0, #1
    bf10:	e011      	b.n	bf36 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    bf12:	686a      	ldr	r2, [r5, #4]
    bf14:	6812      	ldr	r2, [r2, #0]
    bf16:	2a01      	cmp	r2, #1
    bf18:	d010      	beq.n	bf3c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    bf1a:	6966      	ldr	r6, [r4, #20]
    bf1c:	2501      	movs	r5, #1
    bf1e:	9503      	str	r5, [sp, #12]
    bf20:	9202      	str	r2, [sp, #8]
    bf22:	4b74      	ldr	r3, [pc, #464]	; (c0f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    bf24:	9301      	str	r3, [sp, #4]
    bf26:	4b74      	ldr	r3, [pc, #464]	; (c0f8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    bf28:	9300      	str	r3, [sp, #0]
    bf2a:	2358      	movs	r3, #88	; 0x58
    bf2c:	4a6f      	ldr	r2, [pc, #444]	; (c0ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    bf2e:	4973      	ldr	r1, [pc, #460]	; (c0fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    bf30:	4620      	mov	r0, r4
    bf32:	47b0      	blx	r6
    bf34:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    bf36:	b00f      	add	sp, #60	; 0x3c
    bf38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    bf3c:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    bf40:	68b1      	ldr	r1, [r6, #8]
    bf42:	6872      	ldr	r2, [r6, #4]
    bf44:	f8d6 8018 	ldr.w	r8, [r6, #24]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    bf48:	9817      	ldr	r0, [sp, #92]	; 0x5c
    bf4a:	3801      	subs	r0, #1
    bf4c:	6977      	ldr	r7, [r6, #20]
    bf4e:	fb00 f007 	mul.w	r0, r0, r7
    bf52:	f100 0901 	add.w	r9, r0, #1
  if (stride == 0) return 0;
    bf56:	b1b2      	cbz	r2, bf86 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
    bf58:	f1be 0f01 	cmp.w	lr, #1
    bf5c:	d005      	beq.n	bf6a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    bf5e:	f1be 0f02 	cmp.w	lr, #2
    bf62:	d009      	beq.n	bf78 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    bf64:	f04f 0c00 	mov.w	ip, #0
    bf68:	e00e      	b.n	bf88 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - 1) / stride;
    bf6a:	eb02 0c03 	add.w	ip, r2, r3
    bf6e:	f10c 3cff 	add.w	ip, ip, #4294967295
    bf72:	fb9c fcf2 	sdiv	ip, ip, r2
    bf76:	e007      	b.n	bf88 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - effective_filter_size) / stride;
    bf78:	eb02 0c03 	add.w	ip, r2, r3
    bf7c:	ebac 0c09 	sub.w	ip, ip, r9
    bf80:	fb9c fcf2 	sdiv	ip, ip, r2
    bf84:	e000      	b.n	bf88 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    bf86:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    bf88:	9f18      	ldr	r7, [sp, #96]	; 0x60
    bf8a:	3f01      	subs	r7, #1
    bf8c:	fb07 f708 	mul.w	r7, r7, r8
    bf90:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    bf92:	b1c1      	cbz	r1, bfc6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    bf94:	f1be 0f01 	cmp.w	lr, #1
    bf98:	d005      	beq.n	bfa6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    bf9a:	f1be 0f02 	cmp.w	lr, #2
    bf9e:	d00a      	beq.n	bfb6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    bfa0:	f04f 0e00 	mov.w	lr, #0
    bfa4:	e010      	b.n	bfc8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    bfa6:	9816      	ldr	r0, [sp, #88]	; 0x58
    bfa8:	eb01 0e00 	add.w	lr, r1, r0
    bfac:	f10e 3eff 	add.w	lr, lr, #4294967295
    bfb0:	fb9e fef1 	sdiv	lr, lr, r1
    bfb4:	e008      	b.n	bfc8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    bfb6:	9816      	ldr	r0, [sp, #88]	; 0x58
    bfb8:	eb01 0e00 	add.w	lr, r1, r0
    bfbc:	ebae 0e07 	sub.w	lr, lr, r7
    bfc0:	fb9e fef1 	sdiv	lr, lr, r1
    bfc4:	e000      	b.n	bfc8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    bfc6:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    bfc8:	f10e 3eff 	add.w	lr, lr, #4294967295
    bfcc:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    bfd0:	9f16      	ldr	r7, [sp, #88]	; 0x58
    bfd2:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    bfd4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    bfd8:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    bfdc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    bfe0:	1049      	asrs	r1, r1, #1
  padding_values.height =
    bfe2:	910b      	str	r1, [sp, #44]	; 0x2c
  padding_values.height_offset = offset;
    bfe4:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    bfe6:	f10c 3cff 	add.w	ip, ip, #4294967295
    bfea:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    bfee:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    bff0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    bff4:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    bff8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    bffc:	1052      	asrs	r2, r2, #1
  padding_values.width =
    bffe:	920a      	str	r2, [sp, #40]	; 0x28
  padding_values.width_offset = offset;
    c000:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    c002:	ab0e      	add	r3, sp, #56	; 0x38
    c004:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    c008:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    c00a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    c00e:	4b3c      	ldr	r3, [pc, #240]	; (c100 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    c010:	681a      	ldr	r2, [r3, #0]
    c012:	4629      	mov	r1, r5
    c014:	4620      	mov	r0, r4
    c016:	f007 fd52 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c01a:	4607      	mov	r7, r0
    c01c:	b320      	cbz	r0, c068 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x180>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    c01e:	4b39      	ldr	r3, [pc, #228]	; (c104 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
    c020:	681a      	ldr	r2, [r3, #0]
    c022:	4629      	mov	r1, r5
    c024:	4620      	mov	r0, r4
    c026:	f007 fd4a 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c02a:	4680      	mov	r8, r0
    c02c:	b330      	cbz	r0, c07c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    c02e:	4b36      	ldr	r3, [pc, #216]	; (c108 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
    c030:	681a      	ldr	r2, [r3, #0]
    c032:	4629      	mov	r1, r5
    c034:	4620      	mov	r0, r4
    c036:	f007 fd80 	bl	13b3a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    c03a:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    c03c:	4b33      	ldr	r3, [pc, #204]	; (c10c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x224>)
    c03e:	681a      	ldr	r2, [r3, #0]
    c040:	4629      	mov	r1, r5
    c042:	4620      	mov	r0, r4
    c044:	f007 fd5a 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c048:	4605      	mov	r5, r0
    c04a:	b308      	cbz	r0, c090 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>
  if (data_type != kTfLiteFloat32) {
    c04c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    c050:	2b01      	cmp	r3, #1
    c052:	d127      	bne.n	c0a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>
  data->input_zero_point = input->params.zero_point;
    c054:	693b      	ldr	r3, [r7, #16]
    c056:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c058:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    c05a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    c05e:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    c060:	692b      	ldr	r3, [r5, #16]
    c062:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    c064:	2000      	movs	r0, #0
    c066:	e766      	b.n	bf36 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    c068:	6965      	ldr	r5, [r4, #20]
    c06a:	4b29      	ldr	r3, [pc, #164]	; (c110 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>)
    c06c:	9300      	str	r3, [sp, #0]
    c06e:	2362      	movs	r3, #98	; 0x62
    c070:	4a1e      	ldr	r2, [pc, #120]	; (c0ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c072:	491f      	ldr	r1, [pc, #124]	; (c0f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c074:	4620      	mov	r0, r4
    c076:	47a8      	blx	r5
    c078:	2001      	movs	r0, #1
    c07a:	e75c      	b.n	bf36 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    c07c:	6965      	ldr	r5, [r4, #20]
    c07e:	4b25      	ldr	r3, [pc, #148]	; (c114 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
    c080:	9300      	str	r3, [sp, #0]
    c082:	2364      	movs	r3, #100	; 0x64
    c084:	4a19      	ldr	r2, [pc, #100]	; (c0ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c086:	491a      	ldr	r1, [pc, #104]	; (c0f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c088:	4620      	mov	r0, r4
    c08a:	47a8      	blx	r5
    c08c:	2001      	movs	r0, #1
    c08e:	e752      	b.n	bf36 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    c090:	6965      	ldr	r5, [r4, #20]
    c092:	4b21      	ldr	r3, [pc, #132]	; (c118 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
    c094:	9300      	str	r3, [sp, #0]
    c096:	2368      	movs	r3, #104	; 0x68
    c098:	4a14      	ldr	r2, [pc, #80]	; (c0ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c09a:	4915      	ldr	r1, [pc, #84]	; (c0f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c09c:	4620      	mov	r0, r4
    c09e:	47a8      	blx	r5
    c0a0:	2001      	movs	r0, #1
    c0a2:	e748      	b.n	bf36 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    c0a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c0a8:	691b      	ldr	r3, [r3, #16]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    c0aa:	3610      	adds	r6, #16
    c0ac:	9308      	str	r3, [sp, #32]
    c0ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0b2:	9307      	str	r3, [sp, #28]
    c0b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c0b8:	9306      	str	r3, [sp, #24]
    c0ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c0bc:	3330      	adds	r3, #48	; 0x30
    c0be:	9305      	str	r3, [sp, #20]
    c0c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c0c2:	332c      	adds	r3, #44	; 0x2c
    c0c4:	9304      	str	r3, [sp, #16]
    c0c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c0c8:	3320      	adds	r3, #32
    c0ca:	9303      	str	r3, [sp, #12]
    c0cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c0ce:	331c      	adds	r3, #28
    c0d0:	9302      	str	r3, [sp, #8]
    c0d2:	9601      	str	r6, [sp, #4]
    c0d4:	9000      	str	r0, [sp, #0]
    c0d6:	464b      	mov	r3, r9
    c0d8:	4642      	mov	r2, r8
    c0da:	4639      	mov	r1, r7
    c0dc:	4620      	mov	r0, r4
    c0de:	f7fd f9d3 	bl	9488 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    c0e2:	2800      	cmp	r0, #0
    c0e4:	d0b6      	beq.n	c054 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
    c0e6:	e726      	b.n	bf36 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    c0e8:	0006b284 	.word	0x0006b284
    c0ec:	0006b3ac 	.word	0x0006b3ac
    c0f0:	0006a8a8 	.word	0x0006a8a8
    c0f4:	0006b8f0 	.word	0x0006b8f0
    c0f8:	0006b2a8 	.word	0x0006b2a8
    c0fc:	0006ab68 	.word	0x0006ab68
    c100:	0006b3a0 	.word	0x0006b3a0
    c104:	0006b3a8 	.word	0x0006b3a8
    c108:	0006b39c 	.word	0x0006b39c
    c10c:	0006b3a4 	.word	0x0006b3a4
    c110:	0006b2bc 	.word	0x0006b2bc
    c114:	0006b2d0 	.word	0x0006b2d0
    c118:	0006b2e4 	.word	0x0006b2e4

0000c11c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c120:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    c122:	690e      	ldr	r6, [r1, #16]
    c124:	2e00      	cmp	r6, #0
    c126:	d051      	beq.n	c1cc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    c128:	4604      	mov	r4, r0
    c12a:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c12c:	694f      	ldr	r7, [r1, #20]
    c12e:	2f00      	cmp	r7, #0
    c130:	d04e      	beq.n	c1d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb4>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    c132:	2200      	movs	r2, #0
    c134:	f007 fce2 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c138:	4680      	mov	r8, r0
    c13a:	2800      	cmp	r0, #0
    c13c:	d04a      	beq.n	c1d4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
    c13e:	2200      	movs	r2, #0
    c140:	4629      	mov	r1, r5
    c142:	4620      	mov	r0, r4
    c144:	f007 fcbb 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c148:	4681      	mov	r9, r0
    c14a:	2800      	cmp	r0, #0
    c14c:	d050      	beq.n	c1f0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    c14e:	2201      	movs	r2, #1
    c150:	4629      	mov	r1, r5
    c152:	4620      	mov	r0, r4
    c154:	f007 fcb3 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c158:	4682      	mov	sl, r0
    c15a:	2800      	cmp	r0, #0
    c15c:	d053      	beq.n	c206 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xea>

  const int input_width = input->dims->data[2];
    c15e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c162:	68da      	ldr	r2, [r3, #12]
    c164:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    c166:	689b      	ldr	r3, [r3, #8]
    c168:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    c16a:	6883      	ldr	r3, [r0, #8]
    c16c:	68da      	ldr	r2, [r3, #12]
    c16e:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    c170:	689a      	ldr	r2, [r3, #8]
    c172:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    c174:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c178:	68d1      	ldr	r1, [r2, #12]
    c17a:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    c17c:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    c180:	691a      	ldr	r2, [r3, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    c182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c184:	ea4f 0882 	mov.w	r8, r2, lsl #2
    c188:	4641      	mov	r1, r8
    c18a:	4620      	mov	r0, r4
    c18c:	4798      	blx	r3
  data->per_channel_output_multiplier =
    c18e:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    c190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c192:	4641      	mov	r1, r8
    c194:	4620      	mov	r0, r4
    c196:	4798      	blx	r3
  data->per_channel_output_shift =
    c198:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    c19a:	f899 3000 	ldrb.w	r3, [r9]
    c19e:	2b09      	cmp	r3, #9
    c1a0:	d16a      	bne.n	c278 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    c1a2:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    c1a6:	f1b8 0f01 	cmp.w	r8, #1
    c1aa:	d037      	beq.n	c21c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x100>
    c1ac:	6966      	ldr	r6, [r4, #20]
    c1ae:	2501      	movs	r5, #1
    c1b0:	9503      	str	r5, [sp, #12]
    c1b2:	f8cd 8008 	str.w	r8, [sp, #8]
    c1b6:	4b3a      	ldr	r3, [pc, #232]	; (c2a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    c1b8:	9301      	str	r3, [sp, #4]
    c1ba:	4b3a      	ldr	r3, [pc, #232]	; (c2a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    c1bc:	9300      	str	r3, [sp, #0]
    c1be:	23a1      	movs	r3, #161	; 0xa1
    c1c0:	4a39      	ldr	r2, [pc, #228]	; (c2a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c1c2:	493a      	ldr	r1, [pc, #232]	; (c2ac <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c1c4:	4620      	mov	r0, r4
    c1c6:	47b0      	blx	r6
    c1c8:	46a8      	mov	r8, r5
    c1ca:	e00d      	b.n	c1e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TFLITE_DCHECK(node->user_data != nullptr);
    c1cc:	f009 fefa 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c1d0:	f009 fef8 	bl	15fc4 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    c1d4:	6965      	ldr	r5, [r4, #20]
    c1d6:	4b36      	ldr	r3, [pc, #216]	; (c2b0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    c1d8:	9300      	str	r3, [sp, #0]
    c1da:	2387      	movs	r3, #135	; 0x87
    c1dc:	4a32      	ldr	r2, [pc, #200]	; (c2a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c1de:	4935      	ldr	r1, [pc, #212]	; (c2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c1e0:	4620      	mov	r0, r4
    c1e2:	47a8      	blx	r5
    c1e4:	f04f 0801 	mov.w	r8, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    c1e8:	4640      	mov	r0, r8
    c1ea:	b00f      	add	sp, #60	; 0x3c
    c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    c1f0:	6965      	ldr	r5, [r4, #20]
    c1f2:	4b31      	ldr	r3, [pc, #196]	; (c2b8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    c1f4:	9300      	str	r3, [sp, #0]
    c1f6:	238a      	movs	r3, #138	; 0x8a
    c1f8:	4a2b      	ldr	r2, [pc, #172]	; (c2a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c1fa:	492e      	ldr	r1, [pc, #184]	; (c2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c1fc:	4620      	mov	r0, r4
    c1fe:	47a8      	blx	r5
    c200:	f04f 0801 	mov.w	r8, #1
    c204:	e7f0      	b.n	c1e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE(context, filter != nullptr);
    c206:	6965      	ldr	r5, [r4, #20]
    c208:	4b2c      	ldr	r3, [pc, #176]	; (c2bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    c20a:	9300      	str	r3, [sp, #0]
    c20c:	238d      	movs	r3, #141	; 0x8d
    c20e:	4a26      	ldr	r2, [pc, #152]	; (c2a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c210:	4928      	ldr	r1, [pc, #160]	; (c2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c212:	4620      	mov	r0, r4
    c214:	47a8      	blx	r5
    c216:	f04f 0801 	mov.w	r8, #1
    c21a:	e7e5      	b.n	c1e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    const auto* affine_quantization =
    c21c:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    c220:	b1a2      	cbz	r2, c24c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    c222:	6811      	ldr	r1, [r2, #0]
    c224:	b1a1      	cbz	r1, c250 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    c226:	6850      	ldr	r0, [r2, #4]
    c228:	b1a0      	cbz	r0, c254 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(
    c22a:	680a      	ldr	r2, [r1, #0]
    c22c:	2a01      	cmp	r2, #1
    c22e:	d013      	beq.n	c258 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    c230:	f8da 1008 	ldr.w	r1, [sl, #8]
    c234:	6909      	ldr	r1, [r1, #16]
    c236:	428a      	cmp	r2, r1
    c238:	d00e      	beq.n	c258 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    c23a:	6965      	ldr	r5, [r4, #20]
    c23c:	4b20      	ldr	r3, [pc, #128]	; (c2c0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    c23e:	9300      	str	r3, [sp, #0]
    c240:	23aa      	movs	r3, #170	; 0xaa
    c242:	4a19      	ldr	r2, [pc, #100]	; (c2a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c244:	491b      	ldr	r1, [pc, #108]	; (c2b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c246:	4620      	mov	r0, r4
    c248:	47a8      	blx	r5
    c24a:	e7cd      	b.n	c1e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    TFLITE_DCHECK(affine_quantization != nullptr);
    c24c:	f009 feba 	bl	15fc4 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    c250:	f009 feb8 	bl	15fc4 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    c254:	f009 feb6 	bl	15fc4 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    c258:	6801      	ldr	r1, [r0, #0]
    c25a:	428a      	cmp	r2, r1
    c25c:	d00c      	beq.n	c278 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    c25e:	6965      	ldr	r5, [r4, #20]
    c260:	9103      	str	r1, [sp, #12]
    c262:	9202      	str	r2, [sp, #8]
    c264:	4b17      	ldr	r3, [pc, #92]	; (c2c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    c266:	9301      	str	r3, [sp, #4]
    c268:	4b17      	ldr	r3, [pc, #92]	; (c2c8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    c26a:	9300      	str	r3, [sp, #0]
    c26c:	23af      	movs	r3, #175	; 0xaf
    c26e:	4a0e      	ldr	r2, [pc, #56]	; (c2a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c270:	490e      	ldr	r1, [pc, #56]	; (c2ac <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c272:	4620      	mov	r0, r4
    c274:	47a8      	blx	r5
    c276:	e7b7      	b.n	c1e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    c278:	9606      	str	r6, [sp, #24]
    c27a:	9305      	str	r3, [sp, #20]
    c27c:	f8cd b010 	str.w	fp, [sp, #16]
    c280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c282:	9303      	str	r3, [sp, #12]
    c284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c286:	9302      	str	r3, [sp, #8]
    c288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c28a:	9301      	str	r3, [sp, #4]
    c28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c28e:	9300      	str	r3, [sp, #0]
    c290:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c292:	463a      	mov	r2, r7
    c294:	4629      	mov	r1, r5
    c296:	4620      	mov	r0, r4
    c298:	f7ff fe26 	bl	bee8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    c29c:	4680      	mov	r8, r0
    c29e:	e7a3      	b.n	c1e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    c2a0:	0006ab84 	.word	0x0006ab84
    c2a4:	0006abbc 	.word	0x0006abbc
    c2a8:	0006b3ac 	.word	0x0006b3ac
    c2ac:	0006ab68 	.word	0x0006ab68
    c2b0:	0006b2e4 	.word	0x0006b2e4
    c2b4:	0006a8a8 	.word	0x0006a8a8
    c2b8:	0006b2bc 	.word	0x0006b2bc
    c2bc:	0006b2d0 	.word	0x0006b2d0
    c2c0:	0006b408 	.word	0x0006b408
    c2c4:	0006b374 	.word	0x0006b374
    c2c8:	0006ac70 	.word	0x0006ac70

0000c2cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    c2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2d0:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    c2d2:	690d      	ldr	r5, [r1, #16]
    c2d4:	b37d      	cbz	r5, c336 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    c2d6:	4607      	mov	r7, r0
    c2d8:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c2da:	694e      	ldr	r6, [r1, #20]
    c2dc:	b36e      	cbz	r6, c33a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    c2de:	4b38      	ldr	r3, [pc, #224]	; (c3c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    c2e0:	681a      	ldr	r2, [r3, #0]
    c2e2:	f007 fbec 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c2e6:	4681      	mov	r9, r0
    c2e8:	b348      	cbz	r0, c33e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    c2ea:	4b36      	ldr	r3, [pc, #216]	; (c3c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    c2ec:	681a      	ldr	r2, [r3, #0]
    c2ee:	4621      	mov	r1, r4
    c2f0:	4638      	mov	r0, r7
    c2f2:	f007 fbe4 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c2f6:	4682      	mov	sl, r0
    c2f8:	b368      	cbz	r0, c356 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    c2fa:	4b33      	ldr	r3, [pc, #204]	; (c3c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    c2fc:	681a      	ldr	r2, [r3, #0]
    c2fe:	4621      	mov	r1, r4
    c300:	4638      	mov	r0, r7
    c302:	f007 fc1a 	bl	13b3a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    c306:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    c308:	4b30      	ldr	r3, [pc, #192]	; (c3cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    c30a:	681a      	ldr	r2, [r3, #0]
    c30c:	4621      	mov	r1, r4
    c30e:	4638      	mov	r0, r7
    c310:	f007 fbf4 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c314:	4604      	mov	r4, r0
    c316:	b340      	cbz	r0, c36a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    c318:	f899 0000 	ldrb.w	r0, [r9]
    c31c:	7823      	ldrb	r3, [r4, #0]
    c31e:	4298      	cmp	r0, r3
    c320:	d12d      	bne.n	c37e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    c322:	f89a 3000 	ldrb.w	r3, [sl]
    c326:	4298      	cmp	r0, r3
    c328:	d03d      	beq.n	c3a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    c32a:	697b      	ldr	r3, [r7, #20]
    c32c:	4928      	ldr	r1, [pc, #160]	; (c3d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    c32e:	4638      	mov	r0, r7
    c330:	4798      	blx	r3
    c332:	2001      	movs	r0, #1
    c334:	e00c      	b.n	c350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    c336:	f009 fe45 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c33a:	f009 fe43 	bl	15fc4 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    c33e:	697c      	ldr	r4, [r7, #20]
    c340:	4b24      	ldr	r3, [pc, #144]	; (c3d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    c342:	9300      	str	r3, [sp, #0]
    c344:	232f      	movs	r3, #47	; 0x2f
    c346:	4a24      	ldr	r2, [pc, #144]	; (c3d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c348:	4924      	ldr	r1, [pc, #144]	; (c3dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c34a:	4638      	mov	r0, r7
    c34c:	47a0      	blx	r4
    c34e:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    c350:	b004      	add	sp, #16
    c352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    c356:	697c      	ldr	r4, [r7, #20]
    c358:	4b21      	ldr	r3, [pc, #132]	; (c3e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    c35a:	9300      	str	r3, [sp, #0]
    c35c:	2332      	movs	r3, #50	; 0x32
    c35e:	4a1e      	ldr	r2, [pc, #120]	; (c3d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c360:	491e      	ldr	r1, [pc, #120]	; (c3dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c362:	4638      	mov	r0, r7
    c364:	47a0      	blx	r4
    c366:	2001      	movs	r0, #1
    c368:	e7f2      	b.n	c350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    c36a:	697c      	ldr	r4, [r7, #20]
    c36c:	4b1d      	ldr	r3, [pc, #116]	; (c3e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    c36e:	9300      	str	r3, [sp, #0]
    c370:	2336      	movs	r3, #54	; 0x36
    c372:	4a19      	ldr	r2, [pc, #100]	; (c3d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c374:	4919      	ldr	r1, [pc, #100]	; (c3dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c376:	4638      	mov	r0, r7
    c378:	47a0      	blx	r4
    c37a:	2001      	movs	r0, #1
    c37c:	e7e8      	b.n	c350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    c37e:	697e      	ldr	r6, [r7, #20]
    c380:	f7fc fe34 	bl	8fec <TfLiteTypeGetName>
    c384:	4605      	mov	r5, r0
    c386:	7820      	ldrb	r0, [r4, #0]
    c388:	f7fc fe30 	bl	8fec <TfLiteTypeGetName>
    c38c:	9003      	str	r0, [sp, #12]
    c38e:	9502      	str	r5, [sp, #8]
    c390:	4b15      	ldr	r3, [pc, #84]	; (c3e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    c392:	9301      	str	r3, [sp, #4]
    c394:	4b15      	ldr	r3, [pc, #84]	; (c3ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    c396:	9300      	str	r3, [sp, #0]
    c398:	2338      	movs	r3, #56	; 0x38
    c39a:	4a0f      	ldr	r2, [pc, #60]	; (c3d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c39c:	4914      	ldr	r1, [pc, #80]	; (c3f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    c39e:	4638      	mov	r0, r7
    c3a0:	47b0      	blx	r6
    c3a2:	2001      	movs	r0, #1
    c3a4:	e7d4      	b.n	c350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    c3a6:	7831      	ldrb	r1, [r6, #0]
    c3a8:	9503      	str	r5, [sp, #12]
    c3aa:	9402      	str	r4, [sp, #8]
    c3ac:	f8cd 8004 	str.w	r8, [sp, #4]
    c3b0:	f8cd a000 	str.w	sl, [sp]
    c3b4:	464b      	mov	r3, r9
    c3b6:	4602      	mov	r2, r0
    c3b8:	4638      	mov	r0, r7
    c3ba:	f008 f9e6 	bl	1478a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    c3be:	e7c7      	b.n	c350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    c3c0:	0006b59c 	.word	0x0006b59c
    c3c4:	0006b5a4 	.word	0x0006b5a4
    c3c8:	0006b598 	.word	0x0006b598
    c3cc:	0006b5a0 	.word	0x0006b5a0
    c3d0:	0006b510 	.word	0x0006b510
    c3d4:	0006b2bc 	.word	0x0006b2bc
    c3d8:	0006b49c 	.word	0x0006b49c
    c3dc:	0006a8a8 	.word	0x0006a8a8
    c3e0:	0006b2d0 	.word	0x0006b2d0
    c3e4:	0006b2e4 	.word	0x0006b2e4
    c3e8:	0006b17c 	.word	0x0006b17c
    c3ec:	0006b18c 	.word	0x0006b18c
    c3f0:	0006b4f4 	.word	0x0006b4f4

0000c3f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    c3f4:	b470      	push	{r4, r5, r6}
    c3f6:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    c3f8:	4604      	mov	r4, r0
    c3fa:	4d05      	ldr	r5, [pc, #20]	; (c410 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    c3fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c3fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c400:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    c408:	4630      	mov	r0, r6
    c40a:	bc70      	pop	{r4, r5, r6}
    c40c:	4770      	bx	lr
    c40e:	bf00      	nop
    c410:	000684bc 	.word	0x000684bc

0000c414 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c418:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c41a:	f8d1 a014 	ldr.w	sl, [r1, #20]
    c41e:	f1ba 0f00 	cmp.w	sl, #0
    c422:	d04c      	beq.n	c4be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    c424:	4604      	mov	r4, r0
    c426:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    c428:	4ba5      	ldr	r3, [pc, #660]	; (c6c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    c42a:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c42c:	2800      	cmp	r0, #0
    c42e:	d048      	beq.n	c4c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    c430:	2e00      	cmp	r6, #0
    c432:	d048      	beq.n	c4c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c434:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c436:	6833      	ldr	r3, [r6, #0]
    c438:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c43c:	6859      	ldr	r1, [r3, #4]
    c43e:	4790      	blx	r2
    c440:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    c442:	4ba0      	ldr	r3, [pc, #640]	; (c6c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    c444:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c446:	2c00      	cmp	r4, #0
    c448:	d03f      	beq.n	c4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    c44a:	2e00      	cmp	r6, #0
    c44c:	d03f      	beq.n	c4ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c44e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c450:	6833      	ldr	r3, [r6, #0]
    c452:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c456:	6859      	ldr	r1, [r3, #4]
    c458:	4620      	mov	r0, r4
    c45a:	4790      	blx	r2
    c45c:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    c45e:	4b9a      	ldr	r3, [pc, #616]	; (c6c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    c460:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c462:	2c00      	cmp	r4, #0
    c464:	d035      	beq.n	c4d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    c466:	2e00      	cmp	r6, #0
    c468:	d035      	beq.n	c4d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c46a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c46c:	6833      	ldr	r3, [r6, #0]
    c46e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c472:	6859      	ldr	r1, [r3, #4]
    c474:	4620      	mov	r0, r4
    c476:	4790      	blx	r2
    c478:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    c47a:	4b94      	ldr	r3, [pc, #592]	; (c6cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    c47c:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c47e:	b364      	cbz	r4, c4da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    c480:	b36e      	cbz	r6, c4de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    c482:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c484:	6873      	ldr	r3, [r6, #4]
    c486:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c48a:	6859      	ldr	r1, [r3, #4]
    c48c:	4620      	mov	r0, r4
    c48e:	4790      	blx	r2
    c490:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    c492:	6931      	ldr	r1, [r6, #16]
    c494:	b329      	cbz	r1, c4e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    c496:	f898 0008 	ldrb.w	r0, [r8, #8]
    c49a:	2801      	cmp	r0, #1
    c49c:	d023      	beq.n	c4e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    c49e:	2809      	cmp	r0, #9
    c4a0:	f000 8136 	beq.w	c710 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c4a4:	6965      	ldr	r5, [r4, #20]
    c4a6:	f7fc fda1 	bl	8fec <TfLiteTypeGetName>
    c4aa:	4602      	mov	r2, r0
    c4ac:	f898 3008 	ldrb.w	r3, [r8, #8]
    c4b0:	4987      	ldr	r1, [pc, #540]	; (c6d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    c4b2:	4620      	mov	r0, r4
    c4b4:	47a8      	blx	r5
      return kTfLiteError;
    c4b6:	2001      	movs	r0, #1
}
    c4b8:	b04f      	add	sp, #316	; 0x13c
    c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c4be:	f009 fd81 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    c4c2:	f009 fd7f 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    c4c6:	f009 fd7d 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    c4ca:	f009 fd7b 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    c4ce:	f009 fd79 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    c4d2:	f009 fd77 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    c4d6:	f009 fd75 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    c4da:	f009 fd73 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    c4de:	f009 fd71 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    c4e2:	f009 fd6f 	bl	15fc4 <abort>
          FullyConnectedParamsFloat(params->activation),
    c4e6:	f89a 1000 	ldrb.w	r1, [sl]
    c4ea:	a812      	add	r0, sp, #72	; 0x48
    c4ec:	f008 f984 	bl	147f8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    c4f0:	4641      	mov	r1, r8
    c4f2:	a81c      	add	r0, sp, #112	; 0x70
    c4f4:	f008 f98b 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c4f8:	4640      	mov	r0, r8
    c4fa:	f007 fb9f 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c4fe:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    c500:	4649      	mov	r1, r9
    c502:	a822      	add	r0, sp, #136	; 0x88
    c504:	f008 f983 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c508:	4648      	mov	r0, r9
    c50a:	f007 fb97 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c50e:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    c510:	4639      	mov	r1, r7
    c512:	a828      	add	r0, sp, #160	; 0xa0
    c514:	f008 f97b 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c518:	4638      	mov	r0, r7
    c51a:	f007 fb8f 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c51e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    c520:	4629      	mov	r1, r5
    c522:	a82e      	add	r0, sp, #184	; 0xb8
    c524:	f008 f973 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c528:	4628      	mov	r0, r5
    c52a:	f007 fb8d 	bl	13c48 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    c52e:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    c530:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c532:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    c534:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    c538:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c53a:	9922      	ldr	r1, [sp, #136]	; 0x88
    c53c:	461c      	mov	r4, r3
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    c53e:	1e5a      	subs	r2, r3, #1
    c540:	d405      	bmi.n	c54e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    c542:	429a      	cmp	r2, r3
    c544:	da03      	bge.n	c54e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c546:	2b05      	cmp	r3, #5
    c548:	dd03      	ble.n	c552 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    c54a:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    c54c:	e002      	b.n	c554 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    c54e:	f009 fd39 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c552:	ad2f      	add	r5, sp, #188	; 0xbc
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    c554:	2300      	movs	r3, #0
  int flat_size = 1;
    c556:	f04f 0801 	mov.w	r8, #1
    c55a:	e004      	b.n	c566 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    c55c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    c560:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    c564:	3301      	adds	r3, #1
    c566:	429c      	cmp	r4, r3
    c568:	dd03      	ble.n	c572 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    c56a:	429a      	cmp	r2, r3
    c56c:	d1f6      	bne.n	c55c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    c56e:	2001      	movs	r0, #1
    c570:	e7f6      	b.n	c560 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    c572:	1e8b      	subs	r3, r1, #2
    c574:	d433      	bmi.n	c5de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    c576:	9822      	ldr	r0, [sp, #136]	; 0x88
    c578:	4283      	cmp	r3, r0
    c57a:	da32      	bge.n	c5e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c57c:	2805      	cmp	r0, #5
    c57e:	dd32      	ble.n	c5e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    c580:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c582:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    c586:	2a00      	cmp	r2, #0
    c588:	db33      	blt.n	c5f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    c58a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c58c:	4282      	cmp	r2, r0
    c58e:	da32      	bge.n	c5f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c590:	2805      	cmp	r0, #5
    c592:	dd32      	ble.n	c5fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    c594:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c596:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c59a:	4298      	cmp	r0, r3
    c59c:	d133      	bne.n	c606 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c59e:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    c5a0:	2a00      	cmp	r2, #0
    c5a2:	db32      	blt.n	c60a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    c5a4:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c5a6:	4282      	cmp	r2, r0
    c5a8:	da31      	bge.n	c60e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5aa:	2805      	cmp	r0, #5
    c5ac:	dd31      	ble.n	c612 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    c5ae:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c5b0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c5b4:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    c5b6:	4293      	cmp	r3, r2
    c5b8:	dc31      	bgt.n	c61e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    c5ba:	ab4d      	add	r3, sp, #308	; 0x134
    c5bc:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    c5c0:	3901      	subs	r1, #1
    c5c2:	d42e      	bmi.n	c622 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    c5c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c5c6:	4299      	cmp	r1, r3
    c5c8:	da2d      	bge.n	c626 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5ca:	2b05      	cmp	r3, #5
    c5cc:	dd2d      	ble.n	c62a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    c5ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c5d0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    c5d4:	2700      	movs	r7, #0
    c5d6:	f8cd 8014 	str.w	r8, [sp, #20]
    c5da:	46b0      	mov	r8, r6
    c5dc:	e06a      	b.n	c6b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    c5de:	f009 fcf1 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c5e2:	f009 fcef 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5e6:	a84e      	add	r0, sp, #312	; 0x138
    c5e8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    c5ec:	f853 3cac 	ldr.w	r3, [r3, #-172]
    c5f0:	e7c9      	b.n	c586 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    c5f2:	f009 fce7 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c5f6:	f009 fce5 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c5fa:	a84e      	add	r0, sp, #312	; 0x138
    c5fc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    c600:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    c604:	e7c9      	b.n	c59a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c606:	f009 fcdd 	bl	15fc4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    c60a:	f009 fcdb 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c60e:	f009 fcd9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c612:	a84e      	add	r0, sp, #312	; 0x138
    c614:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    c618:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    c61c:	e7ca      	b.n	c5b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    c61e:	ab4c      	add	r3, sp, #304	; 0x130
    c620:	e7cc      	b.n	c5bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    c622:	f009 fccf 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c626:	f009 fccd 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c62a:	ab4e      	add	r3, sp, #312	; 0x138
    c62c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c630:	f851 9cac 	ldr.w	r9, [r1, #-172]
    c634:	e7ce      	b.n	c5d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    c636:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    c63a:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    c63e:	9902      	ldr	r1, [sp, #8]
    c640:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    c644:	9a01      	ldr	r2, [sp, #4]
    c646:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    c64a:	f7f4 fb85 	bl	d58 <__aeabi_fmul>
    c64e:	4601      	mov	r1, r0
    c650:	4628      	mov	r0, r5
    c652:	f7f4 fa79 	bl	b48 <__addsf3>
    c656:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    c658:	3601      	adds	r6, #1
    c65a:	454e      	cmp	r6, r9
    c65c:	dbeb      	blt.n	c636 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    c65e:	f1b8 0f00 	cmp.w	r8, #0
    c662:	d020      	beq.n	c6a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    c664:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    c668:	4628      	mov	r0, r5
    c66a:	f7f4 fa6d 	bl	b48 <__addsf3>
    c66e:	4601      	mov	r1, r0
    c670:	fb0b 4607 	mla	r6, fp, r7, r4
    c674:	9011      	str	r0, [sp, #68]	; 0x44
    c676:	9b04      	ldr	r3, [sp, #16]
    c678:	9310      	str	r3, [sp, #64]	; 0x40
    c67a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    c67e:	4618      	mov	r0, r3
    c680:	f7f4 fd26 	bl	10d0 <__aeabi_fcmpgt>
    c684:	b988      	cbnz	r0, c6aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    c686:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    c688:	6829      	ldr	r1, [r5, #0]
    c68a:	4650      	mov	r0, sl
    c68c:	f7f4 fd02 	bl	1094 <__aeabi_fcmplt>
    c690:	b968      	cbnz	r0, c6ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
  return min(max(x, output_activation_min), output_activation_max);
    c692:	682b      	ldr	r3, [r5, #0]
    c694:	9a03      	ldr	r2, [sp, #12]
    c696:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c69a:	3401      	adds	r4, #1
    c69c:	455c      	cmp	r4, fp
    c69e:	da08      	bge.n	c6b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    c6a0:	2600      	movs	r6, #0
      float total = 0.f;
    c6a2:	2500      	movs	r5, #0
    c6a4:	e7d9      	b.n	c65a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    c6a6:	2100      	movs	r1, #0
    c6a8:	e7de      	b.n	c668 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    c6aa:	ad10      	add	r5, sp, #64	; 0x40
    c6ac:	e7ec      	b.n	c688 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    c6ae:	ad0f      	add	r5, sp, #60	; 0x3c
    c6b0:	e7ef      	b.n	c692 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    c6b2:	3701      	adds	r7, #1
    c6b4:	9b05      	ldr	r3, [sp, #20]
    c6b6:	429f      	cmp	r7, r3
    c6b8:	da0c      	bge.n	c6d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c6ba:	2400      	movs	r4, #0
    c6bc:	e7ee      	b.n	c69c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    c6be:	bf00      	nop
    c6c0:	0006b59c 	.word	0x0006b59c
    c6c4:	0006b5a4 	.word	0x0006b5a4
    c6c8:	0006b598 	.word	0x0006b598
    c6cc:	0006b5a0 	.word	0x0006b5a0
    c6d0:	0006b214 	.word	0x0006b214
    if (size_ > kMaxSmallSize) {
    c6d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c6d6:	2b05      	cmp	r3, #5
    c6d8:	dd03      	ble.n	c6e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    c6da:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c6dc:	b108      	cbz	r0, c6e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    c6de:	f009 fc5c 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c6e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    c6e4:	2b05      	cmp	r3, #5
    c6e6:	dd03      	ble.n	c6f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    c6e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
    c6ea:	b108      	cbz	r0, c6f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    c6ec:	f009 fc55 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c6f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c6f2:	2b05      	cmp	r3, #5
    c6f4:	dd03      	ble.n	c6fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    c6f6:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c6f8:	b108      	cbz	r0, c6fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    c6fa:	f009 fc4e 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c6fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c700:	2b05      	cmp	r3, #5
    c702:	dd03      	ble.n	c70c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    c704:	981d      	ldr	r0, [sp, #116]	; 0x74
    c706:	b108      	cbz	r0, c70c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    c708:	f009 fc47 	bl	15f9a <_ZdaPv>
  return kTfLiteOk;
    c70c:	2000      	movs	r0, #0
      break;
    c70e:	e6d3      	b.n	c4b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    c710:	a812      	add	r0, sp, #72	; 0x48
    c712:	f008 f829 	bl	14768 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    c716:	4641      	mov	r1, r8
    c718:	a834      	add	r0, sp, #208	; 0xd0
    c71a:	f008 f878 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c71e:	4640      	mov	r0, r8
    c720:	f007 fa96 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c724:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    c726:	4649      	mov	r1, r9
    c728:	a83a      	add	r0, sp, #232	; 0xe8
    c72a:	f008 f870 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c72e:	4648      	mov	r0, r9
    c730:	f007 fa8e 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c734:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    c736:	4639      	mov	r1, r7
    c738:	a840      	add	r0, sp, #256	; 0x100
    c73a:	f008 f868 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c73e:	4638      	mov	r0, r7
    c740:	f007 fab9 	bl	13cb6 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    c744:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    c746:	4629      	mov	r1, r5
    c748:	a846      	add	r0, sp, #280	; 0x118
    c74a:	f008 f860 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c74e:	4628      	mov	r0, r5
    c750:	f007 fa84 	bl	13c5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    c754:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    c756:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c758:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    c75a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c75c:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    c75e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c760:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    c762:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    c766:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    c76a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    c76c:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    c76e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c770:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    c772:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    c774:	2b01      	cmp	r3, #1
    c776:	dd33      	ble.n	c7e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    c778:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    c77a:	2802      	cmp	r0, #2
    c77c:	d132      	bne.n	c7e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c77e:	4291      	cmp	r1, r2
    c780:	dc32      	bgt.n	c7e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    c782:	9a46      	ldr	r2, [sp, #280]	; 0x118
    c784:	2a00      	cmp	r2, #0
    c786:	dd31      	ble.n	c7ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c788:	2a05      	cmp	r2, #5
    c78a:	dd31      	ble.n	c7f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    c78c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c78e:	6812      	ldr	r2, [r2, #0]
    c790:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    c792:	9a46      	ldr	r2, [sp, #280]	; 0x118
    c794:	2a01      	cmp	r2, #1
    c796:	dd2e      	ble.n	c7f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c798:	2a05      	cmp	r2, #5
    c79a:	dd2e      	ble.n	c7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    c79c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c79e:	6852      	ldr	r2, [r2, #4]
    c7a0:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    c7a2:	1e9a      	subs	r2, r3, #2
    c7a4:	d42c      	bmi.n	c800 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    c7a6:	993a      	ldr	r1, [sp, #232]	; 0xe8
    c7a8:	428a      	cmp	r2, r1
    c7aa:	da2b      	bge.n	c804 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7ac:	2905      	cmp	r1, #5
    c7ae:	dd2b      	ble.n	c808 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    c7b0:	993b      	ldr	r1, [sp, #236]	; 0xec
    c7b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    c7b6:	9901      	ldr	r1, [sp, #4]
    c7b8:	428a      	cmp	r2, r1
    c7ba:	db2b      	blt.n	c814 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    c7bc:	3b01      	subs	r3, #1
    c7be:	d42b      	bmi.n	c818 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    c7c0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    c7c2:	4293      	cmp	r3, r2
    c7c4:	da2a      	bge.n	c81c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7c6:	2a05      	cmp	r2, #5
    c7c8:	dd2a      	ble.n	c820 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    c7ca:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    c7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7d0:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    c7d2:	f04f 0a00 	mov.w	sl, #0
    c7d6:	4653      	mov	r3, sl
    c7d8:	46ca      	mov	sl, r9
    c7da:	46d9      	mov	r9, fp
    c7dc:	469b      	mov	fp, r3
    c7de:	e0ee      	b.n	c9be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    c7e0:	f009 fbf0 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    c7e4:	f009 fbee 	bl	15fc4 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c7e8:	f009 fbec 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c7ec:	f009 fbea 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7f0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c7f2:	920c      	str	r2, [sp, #48]	; 0x30
    c7f4:	e7cd      	b.n	c792 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    c7f6:	f009 fbe5 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7fa:	9a48      	ldr	r2, [sp, #288]	; 0x120
    c7fc:	9201      	str	r2, [sp, #4]
    c7fe:	e7d0      	b.n	c7a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    c800:	f009 fbe0 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c804:	f009 fbde 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c808:	a94e      	add	r1, sp, #312	; 0x138
    c80a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    c80e:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    c812:	e7d0      	b.n	c7b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    c814:	f009 fbd6 	bl	15fc4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    c818:	f009 fbd4 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c81c:	f009 fbd2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c820:	aa4e      	add	r2, sp, #312	; 0x138
    c822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c826:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    c82a:	930d      	str	r3, [sp, #52]	; 0x34
    c82c:	e7d1      	b.n	c7d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    c82e:	9b07      	ldr	r3, [sp, #28]
    c830:	b123      	cbz	r3, c83c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    c832:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    c836:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c838:	4413      	add	r3, r2
    c83a:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    c83c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    c83e:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    c842:	f1b9 0f00 	cmp.w	r9, #0
    c846:	f340 808f 	ble.w	c968 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    c84a:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    c84c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c84e:	4592      	cmp	sl, r2
    c850:	f000 808d 	beq.w	c96e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    c854:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    c856:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    c858:	4653      	mov	r3, sl
    c85a:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    c85c:	fb02 f304 	mul.w	r3, r2, r4
    c860:	fb0a 3101 	mla	r1, sl, r1, r3
    c864:	fba2 230a 	umull	r2, r3, r2, sl
    c868:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c86a:	2a00      	cmp	r2, #0
    c86c:	f173 0100 	sbcs.w	r1, r3, #0
    c870:	f2c0 8084 	blt.w	c97c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    c874:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c878:	1852      	adds	r2, r2, r1
    c87a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    c87e:	4611      	mov	r1, r2
    c880:	461c      	mov	r4, r3
    c882:	2a00      	cmp	r2, #0
    c884:	f173 0000 	sbcs.w	r0, r3, #0
    c888:	db7a      	blt.n	c980 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    c88a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    c88c:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c890:	2f00      	cmp	r7, #0
    c892:	d17d      	bne.n	c990 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>
  assert(exponent >= 0);
    c894:	2e00      	cmp	r6, #0
    c896:	db7e      	blt.n	c996 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    c898:	2e1f      	cmp	r6, #31
    c89a:	f300 8083 	bgt.w	c9a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c89e:	2701      	movs	r7, #1
    c8a0:	fa07 f006 	lsl.w	r0, r7, r6
    c8a4:	3801      	subs	r0, #1
    c8a6:	f007 f9dd 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c8aa:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c8ac:	2000      	movs	r0, #0
    c8ae:	f007 f9d9 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c8b2:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    c8b4:	4638      	mov	r0, r7
    c8b6:	f007 f9d5 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c8ba:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    c8bc:	4641      	mov	r1, r8
    c8be:	4620      	mov	r0, r4
    c8c0:	f007 f9d1 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c8c4:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c8c6:	4639      	mov	r1, r7
    c8c8:	4640      	mov	r0, r8
    c8ca:	f007 f9ce 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c8ce:	4680      	mov	r8, r0
    c8d0:	9902      	ldr	r1, [sp, #8]
    c8d2:	4620      	mov	r0, r4
    c8d4:	f007 f9d5 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c8d8:	9f03      	ldr	r7, [sp, #12]
    c8da:	4639      	mov	r1, r7
    c8dc:	f007 f9c3 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c8e0:	4601      	mov	r1, r0
    c8e2:	4640      	mov	r0, r8
    c8e4:	f007 f9c3 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c8e8:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    c8ea:	4631      	mov	r1, r6
    c8ec:	4620      	mov	r0, r4
    c8ee:	f007 f9bc 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c8f2:	4604      	mov	r4, r0
    c8f4:	4641      	mov	r1, r8
    c8f6:	9804      	ldr	r0, [sp, #16]
    c8f8:	f007 f9cb 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c8fc:	4639      	mov	r1, r7
    c8fe:	f007 f9b2 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c902:	4601      	mov	r1, r0
    c904:	4620      	mov	r0, r4
    c906:	f007 f9b2 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    c90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c90c:	4418      	add	r0, r3
    c90e:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    c910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c912:	4298      	cmp	r0, r3
    c914:	db4d      	blt.n	c9b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    c916:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    c918:	681b      	ldr	r3, [r3, #0]
    c91a:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    c91c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c91e:	4293      	cmp	r3, r2
    c920:	dc49      	bgt.n	c9b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    c922:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    c924:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    c926:	9b01      	ldr	r3, [sp, #4]
    c928:	fb03 530b 	mla	r3, r3, fp, r5
    c92c:	9908      	ldr	r1, [sp, #32]
    c92e:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c930:	3501      	adds	r5, #1
    c932:	9b01      	ldr	r3, [sp, #4]
    c934:	429d      	cmp	r5, r3
    c936:	da40      	bge.n	c9ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    c938:	2300      	movs	r3, #0
    c93a:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    c93c:	980d      	ldr	r0, [sp, #52]	; 0x34
    c93e:	4283      	cmp	r3, r0
    c940:	f6bf af75 	bge.w	c82e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    c944:	fb00 320b 	mla	r2, r0, fp, r3
    c948:	9905      	ldr	r1, [sp, #20]
    c94a:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    c94c:	fb00 3205 	mla	r2, r0, r5, r3
    c950:	9c06      	ldr	r4, [sp, #24]
    c952:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    c954:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c956:	4422      	add	r2, r4
    c958:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c95a:	4421      	add	r1, r4
    c95c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    c95e:	fb01 4202 	mla	r2, r1, r2, r4
    c962:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    c964:	3301      	adds	r3, #1
    c966:	e7ea      	b.n	c93e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    c968:	f1c9 0600 	rsb	r6, r9, #0
    c96c:	e76e      	b.n	c84c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c96e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c972:	d001      	beq.n	c978 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    c974:	2700      	movs	r7, #0
    c976:	e76e      	b.n	c856 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    c978:	2701      	movs	r7, #1
    c97a:	e76c      	b.n	c856 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c97c:	4921      	ldr	r1, [pc, #132]	; (ca04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    c97e:	e77b      	b.n	c878 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c984:	1851      	adds	r1, r2, r1
    c986:	f04f 0400 	mov.w	r4, #0
    c98a:	eb43 0404 	adc.w	r4, r3, r4
    c98e:	e77c      	b.n	c88a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c990:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c994:	e77e      	b.n	c894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    c996:	4b1c      	ldr	r3, [pc, #112]	; (ca08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    c998:	4a1c      	ldr	r2, [pc, #112]	; (ca0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    c99a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c99e:	481c      	ldr	r0, [pc, #112]	; (ca10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    c9a0:	f003 ff0e 	bl	107c0 <__assert_func>
  assert(exponent <= 31);
    c9a4:	4b1b      	ldr	r3, [pc, #108]	; (ca14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    c9a6:	4a19      	ldr	r2, [pc, #100]	; (ca0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    c9a8:	f240 1167 	movw	r1, #359	; 0x167
    c9ac:	4818      	ldr	r0, [pc, #96]	; (ca10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    c9ae:	f003 ff07 	bl	107c0 <__assert_func>
	return __b;
    c9b2:	ab0f      	add	r3, sp, #60	; 0x3c
    c9b4:	e7b0      	b.n	c918 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    c9b6:	ab10      	add	r3, sp, #64	; 0x40
    c9b8:	e7b4      	b.n	c924 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    c9ba:	f10b 0b01 	add.w	fp, fp, #1
    c9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9c0:	459b      	cmp	fp, r3
    c9c2:	da01      	bge.n	c9c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c9c4:	2500      	movs	r5, #0
    c9c6:	e7b4      	b.n	c932 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    c9c8:	9b46      	ldr	r3, [sp, #280]	; 0x118
    c9ca:	2b05      	cmp	r3, #5
    c9cc:	dd03      	ble.n	c9d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    c9ce:	9847      	ldr	r0, [sp, #284]	; 0x11c
    c9d0:	b108      	cbz	r0, c9d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    c9d2:	f009 fae2 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c9d6:	9b40      	ldr	r3, [sp, #256]	; 0x100
    c9d8:	2b05      	cmp	r3, #5
    c9da:	dd03      	ble.n	c9e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    c9dc:	9841      	ldr	r0, [sp, #260]	; 0x104
    c9de:	b108      	cbz	r0, c9e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    c9e0:	f009 fadb 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c9e4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    c9e6:	2b05      	cmp	r3, #5
    c9e8:	dd03      	ble.n	c9f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    c9ea:	983b      	ldr	r0, [sp, #236]	; 0xec
    c9ec:	b108      	cbz	r0, c9f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    c9ee:	f009 fad4 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c9f2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    c9f4:	2b05      	cmp	r3, #5
    c9f6:	dd03      	ble.n	ca00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    c9f8:	9835      	ldr	r0, [sp, #212]	; 0xd4
    c9fa:	b108      	cbz	r0, ca00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    c9fc:	f009 facd 	bl	15f9a <_ZdaPv>
  return kTfLiteOk;
    ca00:	2000      	movs	r0, #0
      break;
    ca02:	e559      	b.n	c4b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    ca04:	c0000001 	.word	0xc0000001
    ca08:	0006b05c 	.word	0x0006b05c
    ca0c:	0006b06c 	.word	0x0006b06c
    ca10:	0006b0c4 	.word	0x0006b0c4
    ca14:	0006b120 	.word	0x0006b120

0000ca18 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    ca18:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ca1a:	4288      	cmp	r0, r1
    ca1c:	d01e      	beq.n	ca5c <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    ca1e:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    ca20:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    ca22:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    ca24:	fb01 f407 	mul.w	r4, r1, r7
    ca28:	fb00 4403 	mla	r4, r0, r3, r4
    ca2c:	fba1 2300 	umull	r2, r3, r1, r0
    ca30:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ca32:	2a00      	cmp	r2, #0
    ca34:	f173 0100 	sbcs.w	r1, r3, #0
    ca38:	db17      	blt.n	ca6a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    ca3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ca3e:	1852      	adds	r2, r2, r1
    ca40:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ca44:	4611      	mov	r1, r2
    ca46:	4618      	mov	r0, r3
    ca48:	2a00      	cmp	r2, #0
    ca4a:	f173 0400 	sbcs.w	r4, r3, #0
    ca4e:	db0e      	blt.n	ca6e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    ca50:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ca52:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ca56:	b995      	cbnz	r5, ca7e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    ca58:	bcf0      	pop	{r4, r5, r6, r7}
    ca5a:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ca5c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    ca60:	d001      	beq.n	ca66 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    ca62:	2500      	movs	r5, #0
    ca64:	e7dc      	b.n	ca20 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    ca66:	2501      	movs	r5, #1
    ca68:	e7da      	b.n	ca20 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ca6a:	4906      	ldr	r1, [pc, #24]	; (ca84 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    ca6c:	e7e7      	b.n	ca3e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ca6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ca72:	1851      	adds	r1, r2, r1
    ca74:	f04f 0000 	mov.w	r0, #0
    ca78:	eb43 0000 	adc.w	r0, r3, r0
    ca7c:	e7e8      	b.n	ca50 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ca7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ca82:	e7e9      	b.n	ca58 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    ca84:	c0000001 	.word	0xc0000001

0000ca88 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    ca88:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ca8a:	4288      	cmp	r0, r1
    ca8c:	d01e      	beq.n	cacc <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    ca8e:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    ca90:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    ca92:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    ca94:	fb01 f407 	mul.w	r4, r1, r7
    ca98:	fb00 4403 	mla	r4, r0, r3, r4
    ca9c:	fba1 2300 	umull	r2, r3, r1, r0
    caa0:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    caa2:	2a00      	cmp	r2, #0
    caa4:	f173 0100 	sbcs.w	r1, r3, #0
    caa8:	db17      	blt.n	cada <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    caaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    caae:	1852      	adds	r2, r2, r1
    cab0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cab4:	4611      	mov	r1, r2
    cab6:	4618      	mov	r0, r3
    cab8:	2a00      	cmp	r2, #0
    caba:	f173 0400 	sbcs.w	r4, r3, #0
    cabe:	db0e      	blt.n	cade <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    cac0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    cac2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cac6:	b995      	cbnz	r5, caee <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    cac8:	bcf0      	pop	{r4, r5, r6, r7}
    caca:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cacc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    cad0:	d001      	beq.n	cad6 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    cad2:	2500      	movs	r5, #0
    cad4:	e7dc      	b.n	ca90 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    cad6:	2501      	movs	r5, #1
    cad8:	e7da      	b.n	ca90 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cada:	4906      	ldr	r1, [pc, #24]	; (caf4 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    cadc:	e7e7      	b.n	caae <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cae2:	1851      	adds	r1, r2, r1
    cae4:	f04f 0000 	mov.w	r0, #0
    cae8:	eb43 0000 	adc.w	r0, r3, r0
    caec:	e7e8      	b.n	cac0 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    caee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    caf2:	e7e9      	b.n	cac8 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    caf4:	c0000001 	.word	0xc0000001

0000caf8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    caf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cafc:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    cafe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    cb02:	f007 f8af 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb06:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    cb08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cb0c:	f007 f8aa 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb10:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    cb12:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
    cb16:	f007 f8a5 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb1a:	4601      	mov	r1, r0
    cb1c:	4620      	mov	r0, r4
    cb1e:	f007 f8b8 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cb22:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    cb24:	480b      	ldr	r0, [pc, #44]	; (cb54 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_+0x5c>)
    cb26:	f007 f89d 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb2a:	4601      	mov	r1, r0
    cb2c:	4620      	mov	r0, r4
    cb2e:	f007 f8a8 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cb32:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    cb34:	2102      	movs	r1, #2
    cb36:	4620      	mov	r0, r4
    cb38:	f007 fed2 	bl	148e0 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    cb3c:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    cb3e:	4641      	mov	r1, r8
    cb40:	4638      	mov	r0, r7
    cb42:	f007 feee 	bl	14922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    cb46:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    cb48:	4631      	mov	r1, r6
    cb4a:	4628      	mov	r0, r5
    cb4c:	f007 fee9 	bl	14922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    cb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb54:	e0000001 	.word	0xe0000001

0000cb58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    cb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb5c:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    cb5e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    cb62:	f007 f87f 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb66:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    cb68:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cb6c:	f007 f87a 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb70:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    cb72:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    cb76:	f007 f875 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb7a:	4601      	mov	r1, r0
    cb7c:	4620      	mov	r0, r4
    cb7e:	f007 f888 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cb82:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    cb84:	480b      	ldr	r0, [pc, #44]	; (cbb4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_+0x5c>)
    cb86:	f007 f86d 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb8a:	4601      	mov	r1, r0
    cb8c:	4620      	mov	r0, r4
    cb8e:	f007 f878 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cb92:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    cb94:	2101      	movs	r1, #1
    cb96:	4620      	mov	r0, r4
    cb98:	f007 fea2 	bl	148e0 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    cb9c:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    cb9e:	4641      	mov	r1, r8
    cba0:	4638      	mov	r0, r7
    cba2:	f007 febe 	bl	14922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    cba6:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    cba8:	4631      	mov	r1, r6
    cbaa:	4628      	mov	r0, r5
    cbac:	f007 feb9 	bl	14922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbb4:	c0000001 	.word	0xc0000001

0000cbb8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    cbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbbc:	4604      	mov	r4, r0
    retval.raw() = Dup<RawType>(x);
    cbbe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cbc2:	f007 f84f 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cbc6:	4601      	mov	r1, r0
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
    cbc8:	4620      	mov	r0, r4
    cbca:	f007 febb 	bl	14944 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cbce:	4607      	mov	r7, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cbd0:	2000      	movs	r0, #0
    cbd2:	f007 f847 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cbd6:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cbd8:	2000      	movs	r0, #0
    cbda:	f007 f843 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cbde:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
    cbe0:	2001      	movs	r0, #1
    cbe2:	f007 f83f 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cbe6:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    cbe8:	4629      	mov	r1, r5
    cbea:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cbee:	f007 f83a 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cbf2:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cbf4:	2101      	movs	r1, #1
    cbf6:	4628      	mov	r0, r5
    cbf8:	f007 f837 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cbfc:	4605      	mov	r5, r0
    cbfe:	4641      	mov	r1, r8
    cc00:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cc04:	f007 f83d 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cc08:	4621      	mov	r1, r4
    cc0a:	f007 f82c 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cc0e:	4601      	mov	r1, r0
    cc10:	4628      	mov	r0, r5
    cc12:	f007 f82c 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cc16:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    cc18:	2100      	movs	r1, #0
    cc1a:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cc1e:	f007 f824 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cc22:	4605      	mov	r5, r0
    cc24:	4641      	mov	r1, r8
    cc26:	4630      	mov	r0, r6
    cc28:	f007 f833 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cc2c:	4621      	mov	r1, r4
    cc2e:	f007 f81a 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cc32:	4601      	mov	r1, r0
    cc34:	4628      	mov	r0, r5
    cc36:	f007 f81a 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    cc3a:	f007 f813 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cc3e:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cc40:	2000      	movs	r0, #0
    cc42:	f007 f80f 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cc46:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cc48:	2000      	movs	r0, #0
    cc4a:	f007 f80b 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cc4e:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    cc50:	2001      	movs	r0, #1
    cc52:	f007 f807 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cc56:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    cc58:	f8df a0a8 	ldr.w	sl, [pc, #168]	; cd04 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x14c>
    cc5c:	4629      	mov	r1, r5
    cc5e:	4650      	mov	r0, sl
    cc60:	f007 f801 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cc64:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cc66:	2101      	movs	r1, #1
    cc68:	4628      	mov	r0, r5
    cc6a:	f006 fffe 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cc6e:	4605      	mov	r5, r0
    cc70:	4649      	mov	r1, r9
    cc72:	4650      	mov	r0, sl
    cc74:	f007 f805 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cc78:	4621      	mov	r1, r4
    cc7a:	f006 fff4 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cc7e:	4601      	mov	r1, r0
    cc80:	4628      	mov	r0, r5
    cc82:	f006 fff4 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cc86:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    cc88:	2100      	movs	r1, #0
    cc8a:	4650      	mov	r0, sl
    cc8c:	f006 ffed 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cc90:	4605      	mov	r5, r0
    cc92:	4649      	mov	r1, r9
    cc94:	4640      	mov	r0, r8
    cc96:	f006 fffc 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cc9a:	4621      	mov	r1, r4
    cc9c:	f006 ffe3 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cca0:	4601      	mov	r1, r0
    cca2:	4628      	mov	r0, r5
    cca4:	f006 ffe3 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    cca8:	f006 ffdc 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ccac:	4601      	mov	r1, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    ccae:	4638      	mov	r0, r7
    ccb0:	f7ff feb2 	bl	ca18 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ccb4:	4601      	mov	r1, r0
    ccb6:	4630      	mov	r0, r6
    ccb8:	f007 fe5f 	bl	1497a <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ccbc:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    ccbe:	2600      	movs	r6, #0
    ccc0:	e017      	b.n	ccf2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x13a>
    F2 half_denominator_times_x = half_denominator * x;
    ccc2:	4621      	mov	r1, r4
    ccc4:	4638      	mov	r0, r7
    ccc6:	f7ff fea7 	bl	ca18 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ccca:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    cccc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    ccd0:	f006 ffc8 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    ccd4:	4629      	mov	r1, r5
    ccd6:	f007 fe55 	bl	14984 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ccda:	4601      	mov	r1, r0
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
    ccdc:	4620      	mov	r0, r4
    ccde:	f7ff fed3 	bl	ca88 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    cce2:	f007 fe5a 	bl	1499a <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    cce6:	4601      	mov	r1, r0
    cce8:	4620      	mov	r0, r4
    ccea:	f007 fe46 	bl	1497a <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ccee:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    ccf0:	3601      	adds	r6, #1
    ccf2:	2e02      	cmp	r6, #2
    ccf4:	dde5      	ble.n	ccc2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
    ccf6:	4620      	mov	r0, r4
    ccf8:	f007 fe43 	bl	14982 <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
    ccfc:	f007 fe51 	bl	149a2 <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
}
    cd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd04:	c3c3c3c4 	.word	0xc3c3c3c4

0000cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    cd08:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cd0a:	4288      	cmp	r0, r1
    cd0c:	d01e      	beq.n	cd4c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    cd0e:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    cd10:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    cd12:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    cd14:	fb01 f407 	mul.w	r4, r1, r7
    cd18:	fb00 4403 	mla	r4, r0, r3, r4
    cd1c:	fba1 2300 	umull	r2, r3, r1, r0
    cd20:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cd22:	2a00      	cmp	r2, #0
    cd24:	f173 0100 	sbcs.w	r1, r3, #0
    cd28:	db17      	blt.n	cd5a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    cd2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cd2e:	1852      	adds	r2, r2, r1
    cd30:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cd34:	4611      	mov	r1, r2
    cd36:	4618      	mov	r0, r3
    cd38:	2a00      	cmp	r2, #0
    cd3a:	f173 0400 	sbcs.w	r4, r3, #0
    cd3e:	db0e      	blt.n	cd5e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    cd40:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    cd42:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cd46:	b995      	cbnz	r5, cd6e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    cd48:	bcf0      	pop	{r4, r5, r6, r7}
    cd4a:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cd4c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    cd50:	d001      	beq.n	cd56 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    cd52:	2500      	movs	r5, #0
    cd54:	e7dc      	b.n	cd10 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    cd56:	2501      	movs	r5, #1
    cd58:	e7da      	b.n	cd10 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cd5a:	4906      	ldr	r1, [pc, #24]	; (cd74 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    cd5c:	e7e7      	b.n	cd2e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cd5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cd62:	1851      	adds	r1, r2, r1
    cd64:	f04f 0000 	mov.w	r0, #0
    cd68:	eb43 0000 	adc.w	r0, r3, r0
    cd6c:	e7e8      	b.n	cd40 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cd6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cd72:	e7e9      	b.n	cd48 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    cd74:	c0000001 	.word	0xc0000001

0000cd78 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    cd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd7c:	4680      	mov	r8, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cd7e:	2000      	movs	r0, #0
    cd80:	f006 ff70 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd84:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cd86:	2000      	movs	r0, #0
    cd88:	f006 ff6c 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd8c:	4607      	mov	r7, r0
  const IntegerType one = Dup<IntegerType>(1);
    cd8e:	2001      	movs	r0, #1
    cd90:	f006 ff68 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd94:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    cd96:	f8df 9124 	ldr.w	r9, [pc, #292]	; cebc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x144>
    cd9a:	4629      	mov	r1, r5
    cd9c:	4648      	mov	r0, r9
    cd9e:	f006 ff62 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cda2:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cda4:	2101      	movs	r1, #1
    cda6:	4628      	mov	r0, r5
    cda8:	f006 ff5f 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cdac:	4605      	mov	r5, r0
    cdae:	4639      	mov	r1, r7
    cdb0:	4648      	mov	r0, r9
    cdb2:	f006 ff66 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cdb6:	4621      	mov	r1, r4
    cdb8:	f006 ff55 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cdbc:	4601      	mov	r1, r0
    cdbe:	4628      	mov	r0, r5
    cdc0:	f006 ff55 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cdc4:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    cdc6:	2100      	movs	r1, #0
    cdc8:	4648      	mov	r0, r9
    cdca:	f006 ff4e 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cdce:	4605      	mov	r5, r0
    cdd0:	4639      	mov	r1, r7
    cdd2:	4630      	mov	r0, r6
    cdd4:	f006 ff5d 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cdd8:	4621      	mov	r1, r4
    cdda:	f006 ff44 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cdde:	4601      	mov	r1, r0
    cde0:	4628      	mov	r0, r5
    cde2:	f006 ff44 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    cde6:	f006 ff3d 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdea:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cdec:	2000      	movs	r0, #0
    cdee:	f006 ff39 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdf2:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cdf4:	2000      	movs	r0, #0
    cdf6:	f006 ff35 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdfa:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    cdfc:	2001      	movs	r0, #1
    cdfe:	f006 ff31 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce02:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    ce04:	f8df a0b8 	ldr.w	sl, [pc, #184]	; cec0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x148>
    ce08:	4629      	mov	r1, r5
    ce0a:	4650      	mov	r0, sl
    ce0c:	f006 ff2b 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce10:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ce12:	2101      	movs	r1, #1
    ce14:	4628      	mov	r0, r5
    ce16:	f006 ff28 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ce1a:	4605      	mov	r5, r0
    ce1c:	4649      	mov	r1, r9
    ce1e:	4650      	mov	r0, sl
    ce20:	f006 ff2f 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ce24:	4621      	mov	r1, r4
    ce26:	f006 ff1e 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce2a:	4601      	mov	r1, r0
    ce2c:	4628      	mov	r0, r5
    ce2e:	f006 ff1e 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ce32:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    ce34:	2100      	movs	r1, #0
    ce36:	4650      	mov	r0, sl
    ce38:	f006 ff17 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ce3c:	4605      	mov	r5, r0
    ce3e:	4649      	mov	r1, r9
    ce40:	4638      	mov	r0, r7
    ce42:	f006 ff26 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ce46:	4621      	mov	r1, r4
    ce48:	f006 ff0d 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce4c:	4601      	mov	r1, r0
    ce4e:	4628      	mov	r0, r5
    ce50:	f006 ff0d 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    ce54:	f006 ff06 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce58:	4607      	mov	r7, r0
    ce5a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ce5e:	f006 ff01 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce62:	4601      	mov	r1, r0
  F x = a + F::template ConstantPOT<-3>();
    ce64:	4640      	mov	r0, r8
    ce66:	f007 fda4 	bl	149b2 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ce6a:	4604      	mov	r4, r0
  F x2 = x * x;
    ce6c:	4601      	mov	r1, r0
    ce6e:	f7ff ff4b 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ce72:	4605      	mov	r5, r0
  F x3 = x2 * x;
    ce74:	4621      	mov	r1, r4
    ce76:	f7ff ff47 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ce7a:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    ce7c:	4629      	mov	r1, r5
    ce7e:	4628      	mov	r0, r5
    ce80:	f7ff ff42 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
    ce84:	f007 fdd4 	bl	14a30 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
      SaturatingRoundingMultiplyByPOT<-1>(
    ce88:	4641      	mov	r1, r8
    ce8a:	f007 fd92 	bl	149b2 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ce8e:	4639      	mov	r1, r7
    ce90:	f7ff ff3a 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ce94:	4629      	mov	r1, r5
    ce96:	f007 fd8c 	bl	149b2 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ce9a:	f007 fd8e 	bl	149ba <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
    ce9e:	4601      	mov	r1, r0
  return AddSaturatingIf16Bit(
    cea0:	4620      	mov	r0, r4
    cea2:	f007 fd86 	bl	149b2 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cea6:	4601      	mov	r1, r0
    cea8:	4630      	mov	r0, r6
    ceaa:	f7ff ff2d 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ceae:	4601      	mov	r1, r0
    ceb0:	4630      	mov	r0, r6
    ceb2:	f007 fdc5 	bl	14a40 <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
}
    ceb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ceba:	bf00      	nop
    cebc:	70f5a894 	.word	0x70f5a894
    cec0:	2aaaaaab 	.word	0x2aaaaaab

0000cec4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    cec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cec8:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ceca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    cece:	f006 fec9 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ced2:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    ced4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ced8:	f006 fec4 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cedc:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    cede:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
    cee2:	f006 febf 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cee6:	4601      	mov	r1, r0
    cee8:	4620      	mov	r0, r4
    ceea:	f006 fed2 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ceee:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    cef0:	480b      	ldr	r0, [pc, #44]	; (cf20 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_+0x5c>)
    cef2:	f006 feb7 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cef6:	4601      	mov	r1, r0
    cef8:	4620      	mov	r0, r4
    cefa:	f006 fec2 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cefe:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    cf00:	2105      	movs	r1, #5
    cf02:	4620      	mov	r0, r4
    cf04:	f007 fcec 	bl	148e0 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    cf08:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    cf0a:	4641      	mov	r1, r8
    cf0c:	4638      	mov	r0, r7
    cf0e:	f007 fd08 	bl	14922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    cf12:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    cf14:	4631      	mov	r1, r6
    cf16:	4628      	mov	r0, r5
    cf18:	f007 fd03 	bl	14922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    cf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf20:	fc000001 	.word	0xfc000001

0000cf24 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    cf24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf28:	4606      	mov	r6, r0
    retval.raw() = Dup<RawType>(x);
    cf2a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    cf2e:	f006 fe99 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf32:	4604      	mov	r4, r0
    cf34:	2001      	movs	r0, #1
    cf36:	f006 fe95 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf3a:	4601      	mov	r1, r0
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
    cf3c:	4620      	mov	r0, r4
    cf3e:	f007 fd87 	bl	14a50 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cf42:	4601      	mov	r1, r0
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
    cf44:	4630      	mov	r0, r6
    cf46:	f007 fd87 	bl	14a58 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cf4a:	4621      	mov	r1, r4
    cf4c:	f007 fd80 	bl	14a50 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cf50:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    cf52:	f007 fdc5 	bl	14ae0 <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    cf56:	f7ff ff0f 	bl	cd78 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    cf5a:	4604      	mov	r4, r0
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
    cf5c:	4631      	mov	r1, r6
    cf5e:	4628      	mov	r0, r5
    cf60:	f007 fd76 	bl	14a50 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cf64:	4605      	mov	r5, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cf66:	2000      	movs	r0, #0
    cf68:	f006 fe7c 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf6c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cf6e:	2000      	movs	r0, #0
    cf70:	f006 fe78 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf74:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    cf76:	2001      	movs	r0, #1
    cf78:	f006 fe74 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf7c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    cf7e:	f8df b428 	ldr.w	fp, [pc, #1064]	; d3a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x484>
    cf82:	4641      	mov	r1, r8
    cf84:	4658      	mov	r0, fp
    cf86:	f006 fe6e 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cf8a:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cf8c:	2101      	movs	r1, #1
    cf8e:	4640      	mov	r0, r8
    cf90:	f006 fe6b 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cf94:	4680      	mov	r8, r0
    cf96:	4651      	mov	r1, sl
    cf98:	4658      	mov	r0, fp
    cf9a:	f006 fe72 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cf9e:	4639      	mov	r1, r7
    cfa0:	f006 fe61 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cfa4:	4601      	mov	r1, r0
    cfa6:	4640      	mov	r0, r8
    cfa8:	f006 fe61 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cfac:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    cfae:	2100      	movs	r1, #0
    cfb0:	4658      	mov	r0, fp
    cfb2:	f006 fe5a 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cfb6:	4680      	mov	r8, r0
    cfb8:	4651      	mov	r1, sl
    cfba:	4648      	mov	r0, r9
    cfbc:	f006 fe69 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cfc0:	4639      	mov	r1, r7
    cfc2:	f006 fe50 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cfc6:	4601      	mov	r1, r0
    cfc8:	4640      	mov	r0, r8
    cfca:	f006 fe50 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    cfce:	f006 fe49 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cfd2:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    cfd4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    cfd8:	f006 fe44 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cfdc:	4601      	mov	r1, r0
    cfde:	4628      	mov	r0, r5
    cfe0:	f006 fe41 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cfe4:	f006 fe47 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    cfe8:	4607      	mov	r7, r0
    cfea:	4641      	mov	r1, r8
    cfec:	4620      	mov	r0, r4
    cfee:	f7ff fe8b 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    cff2:	4601      	mov	r1, r0
    cff4:	4622      	mov	r2, r4
    cff6:	4638      	mov	r0, r7
    cff8:	f007 fcd7 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    cffc:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cffe:	2000      	movs	r0, #0
    d000:	f006 fe30 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d004:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d006:	2000      	movs	r0, #0
    d008:	f006 fe2c 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d00c:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d00e:	2001      	movs	r0, #1
    d010:	f006 fe28 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d014:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d016:	f8df b394 	ldr.w	fp, [pc, #916]	; d3ac <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x488>
    d01a:	4641      	mov	r1, r8
    d01c:	4658      	mov	r0, fp
    d01e:	f006 fe22 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d022:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d024:	2101      	movs	r1, #1
    d026:	4640      	mov	r0, r8
    d028:	f006 fe1f 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d02c:	4680      	mov	r8, r0
    d02e:	4651      	mov	r1, sl
    d030:	4658      	mov	r0, fp
    d032:	f006 fe26 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d036:	4639      	mov	r1, r7
    d038:	f006 fe15 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d03c:	4601      	mov	r1, r0
    d03e:	4640      	mov	r0, r8
    d040:	f006 fe15 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d044:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d046:	2100      	movs	r1, #0
    d048:	4658      	mov	r0, fp
    d04a:	f006 fe0e 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d04e:	4680      	mov	r8, r0
    d050:	4651      	mov	r1, sl
    d052:	4648      	mov	r0, r9
    d054:	f006 fe1d 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d058:	4639      	mov	r1, r7
    d05a:	f006 fe04 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d05e:	4601      	mov	r1, r0
    d060:	4640      	mov	r0, r8
    d062:	f006 fe04 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d066:	f006 fdfd 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d06a:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    d06c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    d070:	f006 fdf8 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d074:	4601      	mov	r1, r0
    d076:	4628      	mov	r0, r5
    d078:	f006 fdf5 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d07c:	f006 fdfb 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d080:	4607      	mov	r7, r0
    d082:	4641      	mov	r1, r8
    d084:	4620      	mov	r0, r4
    d086:	f7ff fe3f 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d08a:	4601      	mov	r1, r0
    d08c:	4622      	mov	r2, r4
    d08e:	4638      	mov	r0, r7
    d090:	f007 fc8b 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d094:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d096:	2000      	movs	r0, #0
    d098:	f006 fde4 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d09c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d09e:	2000      	movs	r0, #0
    d0a0:	f006 fde0 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0a4:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d0a6:	2001      	movs	r0, #1
    d0a8:	f006 fddc 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0ac:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d0ae:	f8df b300 	ldr.w	fp, [pc, #768]	; d3b0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x48c>
    d0b2:	4641      	mov	r1, r8
    d0b4:	4658      	mov	r0, fp
    d0b6:	f006 fdd6 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d0ba:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d0bc:	2101      	movs	r1, #1
    d0be:	4640      	mov	r0, r8
    d0c0:	f006 fdd3 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d0c4:	4680      	mov	r8, r0
    d0c6:	4651      	mov	r1, sl
    d0c8:	4658      	mov	r0, fp
    d0ca:	f006 fdda 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d0ce:	4639      	mov	r1, r7
    d0d0:	f006 fdc9 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d0d4:	4601      	mov	r1, r0
    d0d6:	4640      	mov	r0, r8
    d0d8:	f006 fdc9 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d0dc:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d0de:	2100      	movs	r1, #0
    d0e0:	4658      	mov	r0, fp
    d0e2:	f006 fdc2 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d0e6:	4680      	mov	r8, r0
    d0e8:	4651      	mov	r1, sl
    d0ea:	4648      	mov	r0, r9
    d0ec:	f006 fdd1 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d0f0:	4639      	mov	r1, r7
    d0f2:	f006 fdb8 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d0f6:	4601      	mov	r1, r0
    d0f8:	4640      	mov	r0, r8
    d0fa:	f006 fdb8 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d0fe:	f006 fdb1 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d102:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    d104:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    d108:	f006 fdac 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d10c:	4601      	mov	r1, r0
    d10e:	4628      	mov	r0, r5
    d110:	f006 fda9 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d114:	f006 fdaf 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d118:	4607      	mov	r7, r0
    d11a:	4641      	mov	r1, r8
    d11c:	4620      	mov	r0, r4
    d11e:	f7ff fdf3 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d122:	4601      	mov	r1, r0
    d124:	4622      	mov	r2, r4
    d126:	4638      	mov	r0, r7
    d128:	f007 fc3f 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d12c:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d12e:	2000      	movs	r0, #0
    d130:	f006 fd98 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d134:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d136:	2000      	movs	r0, #0
    d138:	f006 fd94 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d13c:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d13e:	2001      	movs	r0, #1
    d140:	f006 fd90 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d144:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d146:	f8df b26c 	ldr.w	fp, [pc, #620]	; d3b4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x490>
    d14a:	4641      	mov	r1, r8
    d14c:	4658      	mov	r0, fp
    d14e:	f006 fd8a 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d152:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d154:	2101      	movs	r1, #1
    d156:	4640      	mov	r0, r8
    d158:	f006 fd87 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d15c:	4680      	mov	r8, r0
    d15e:	4651      	mov	r1, sl
    d160:	4658      	mov	r0, fp
    d162:	f006 fd8e 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d166:	4639      	mov	r1, r7
    d168:	f006 fd7d 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d16c:	4601      	mov	r1, r0
    d16e:	4640      	mov	r0, r8
    d170:	f006 fd7d 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d174:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d176:	2100      	movs	r1, #0
    d178:	4658      	mov	r0, fp
    d17a:	f006 fd76 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d17e:	4680      	mov	r8, r0
    d180:	4651      	mov	r1, sl
    d182:	4648      	mov	r0, r9
    d184:	f006 fd85 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d188:	4639      	mov	r1, r7
    d18a:	f006 fd6c 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d18e:	4601      	mov	r1, r0
    d190:	4640      	mov	r0, r8
    d192:	f006 fd6c 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d196:	f006 fd65 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d19a:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    d19c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    d1a0:	f006 fd60 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1a4:	4601      	mov	r1, r0
    d1a6:	4628      	mov	r0, r5
    d1a8:	f006 fd5d 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d1ac:	f006 fd63 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d1b0:	4607      	mov	r7, r0
    d1b2:	4641      	mov	r1, r8
    d1b4:	4620      	mov	r0, r4
    d1b6:	f7ff fda7 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d1ba:	4601      	mov	r1, r0
    d1bc:	4622      	mov	r2, r4
    d1be:	4638      	mov	r0, r7
    d1c0:	f007 fbf3 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d1c4:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d1c6:	2000      	movs	r0, #0
    d1c8:	f006 fd4c 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1cc:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d1ce:	2000      	movs	r0, #0
    d1d0:	f006 fd48 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1d4:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d1d6:	2001      	movs	r0, #1
    d1d8:	f006 fd44 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1dc:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d1de:	f8df b1d8 	ldr.w	fp, [pc, #472]	; d3b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x494>
    d1e2:	4641      	mov	r1, r8
    d1e4:	4658      	mov	r0, fp
    d1e6:	f006 fd3e 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d1ea:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d1ec:	2101      	movs	r1, #1
    d1ee:	4640      	mov	r0, r8
    d1f0:	f006 fd3b 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d1f4:	4680      	mov	r8, r0
    d1f6:	4651      	mov	r1, sl
    d1f8:	4658      	mov	r0, fp
    d1fa:	f006 fd42 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d1fe:	4639      	mov	r1, r7
    d200:	f006 fd31 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d204:	4601      	mov	r1, r0
    d206:	4640      	mov	r0, r8
    d208:	f006 fd31 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d20c:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d20e:	2100      	movs	r1, #0
    d210:	4658      	mov	r0, fp
    d212:	f006 fd2a 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d216:	4680      	mov	r8, r0
    d218:	4651      	mov	r1, sl
    d21a:	4648      	mov	r0, r9
    d21c:	f006 fd39 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d220:	4639      	mov	r1, r7
    d222:	f006 fd20 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d226:	4601      	mov	r1, r0
    d228:	4640      	mov	r0, r8
    d22a:	f006 fd20 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d22e:	f006 fd19 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d232:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    d234:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d238:	f006 fd14 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d23c:	4601      	mov	r1, r0
    d23e:	4628      	mov	r0, r5
    d240:	f006 fd11 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d244:	f006 fd17 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d248:	4607      	mov	r7, r0
    d24a:	4641      	mov	r1, r8
    d24c:	4620      	mov	r0, r4
    d24e:	f7ff fd5b 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d252:	4601      	mov	r1, r0
    d254:	4622      	mov	r2, r4
    d256:	4638      	mov	r0, r7
    d258:	f007 fba7 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d25c:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d25e:	2000      	movs	r0, #0
    d260:	f006 fd00 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d264:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d266:	2000      	movs	r0, #0
    d268:	f006 fcfc 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d26c:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d26e:	2001      	movs	r0, #1
    d270:	f006 fcf8 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d274:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d276:	f8df b144 	ldr.w	fp, [pc, #324]	; d3bc <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x498>
    d27a:	4641      	mov	r1, r8
    d27c:	4658      	mov	r0, fp
    d27e:	f006 fcf2 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d282:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d284:	2101      	movs	r1, #1
    d286:	4640      	mov	r0, r8
    d288:	f006 fcef 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d28c:	4680      	mov	r8, r0
    d28e:	4651      	mov	r1, sl
    d290:	4658      	mov	r0, fp
    d292:	f006 fcf6 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d296:	4639      	mov	r1, r7
    d298:	f006 fce5 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d29c:	4601      	mov	r1, r0
    d29e:	4640      	mov	r0, r8
    d2a0:	f006 fce5 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d2a4:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d2a6:	2100      	movs	r1, #0
    d2a8:	4658      	mov	r0, fp
    d2aa:	f006 fcde 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d2ae:	4680      	mov	r8, r0
    d2b0:	4651      	mov	r1, sl
    d2b2:	4648      	mov	r0, r9
    d2b4:	f006 fced 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d2b8:	4639      	mov	r1, r7
    d2ba:	f006 fcd4 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d2be:	4601      	mov	r1, r0
    d2c0:	4640      	mov	r0, r8
    d2c2:	f006 fcd4 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d2c6:	f006 fccd 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2ca:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    d2cc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    d2d0:	f006 fcc8 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2d4:	4601      	mov	r1, r0
    d2d6:	4628      	mov	r0, r5
    d2d8:	f006 fcc5 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d2dc:	f006 fccb 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d2e0:	4607      	mov	r7, r0
    d2e2:	4641      	mov	r1, r8
    d2e4:	4620      	mov	r0, r4
    d2e6:	f7ff fd0f 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d2ea:	4601      	mov	r1, r0
    d2ec:	4622      	mov	r2, r4
    d2ee:	4638      	mov	r0, r7
    d2f0:	f007 fb5b 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d2f4:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d2f6:	2000      	movs	r0, #0
    d2f8:	f006 fcb4 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2fc:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d2fe:	2000      	movs	r0, #0
    d300:	f006 fcb0 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d304:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d306:	2001      	movs	r0, #1
    d308:	f006 fcac 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d30c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d30e:	4641      	mov	r1, r8
    d310:	20f2      	movs	r0, #242	; 0xf2
    d312:	f006 fca8 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d316:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d318:	2101      	movs	r1, #1
    d31a:	4640      	mov	r0, r8
    d31c:	f006 fca5 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d320:	4680      	mov	r8, r0
    d322:	4651      	mov	r1, sl
    d324:	20f2      	movs	r0, #242	; 0xf2
    d326:	f006 fcac 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d32a:	4639      	mov	r1, r7
    d32c:	f006 fc9b 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d330:	4601      	mov	r1, r0
    d332:	4640      	mov	r0, r8
    d334:	f006 fc9b 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d338:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d33a:	2100      	movs	r1, #0
    d33c:	20f2      	movs	r0, #242	; 0xf2
    d33e:	f006 fc94 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d342:	4680      	mov	r8, r0
    d344:	4651      	mov	r1, sl
    d346:	4648      	mov	r0, r9
    d348:	f006 fca3 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d34c:	4639      	mov	r1, r7
    d34e:	f006 fc8a 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d352:	4601      	mov	r1, r0
    d354:	4640      	mov	r0, r8
    d356:	f006 fc8a 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d35a:	f006 fc83 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d35e:	4607      	mov	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    d360:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d364:	f006 fc7e 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d368:	4601      	mov	r1, r0
    d36a:	4628      	mov	r0, r5
    d36c:	f006 fc7b 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d370:	f006 fc81 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d374:	4605      	mov	r5, r0
    d376:	4639      	mov	r1, r7
    d378:	4620      	mov	r0, r4
    d37a:	f7ff fcc5 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d37e:	4601      	mov	r1, r0
    d380:	4622      	mov	r2, r4
    d382:	4628      	mov	r0, r5
    d384:	f007 fb11 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d388:	4604      	mov	r4, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    d38a:	4630      	mov	r0, r6
    d38c:	f007 fba4 	bl	14ad8 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>
    d390:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    d392:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d396:	f006 fc65 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d39a:	4601      	mov	r1, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    d39c:	4622      	mov	r2, r4
    d39e:	4628      	mov	r0, r5
    d3a0:	f007 fb03 	bl	149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
}
    d3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3a8:	63afbe7b 	.word	0x63afbe7b
    d3ac:	4da2cbf2 	.word	0x4da2cbf2
    d3b0:	2f16ac6c 	.word	0x2f16ac6c
    d3b4:	1152aaa4 	.word	0x1152aaa4
    d3b8:	02582ab7 	.word	0x02582ab7
    d3bc:	000afe11 	.word	0x000afe11

0000d3c0 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    d3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3c4:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d3c6:	694f      	ldr	r7, [r1, #20]
    d3c8:	b35f      	cbz	r7, d422 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
    d3ca:	4604      	mov	r4, r0
    d3cc:	460d      	mov	r5, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    d3ce:	f8d1 8010 	ldr.w	r8, [r1, #16]
    d3d2:	f1b8 0f00 	cmp.w	r8, #0
    d3d6:	d026      	beq.n	d426 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    d3d8:	4b23      	ldr	r3, [pc, #140]	; (d468 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    d3da:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d3dc:	b328      	cbz	r0, d42a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    d3de:	b335      	cbz	r5, d42e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d3e0:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d3e2:	682b      	ldr	r3, [r5, #0]
    d3e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d3e8:	6859      	ldr	r1, [r3, #4]
    d3ea:	4790      	blx	r2
    d3ec:	4606      	mov	r6, r0
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    d3ee:	4b1f      	ldr	r3, [pc, #124]	; (d46c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    d3f0:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d3f2:	b1f4      	cbz	r4, d432 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    d3f4:	b1fd      	cbz	r5, d436 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d3f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d3f8:	686b      	ldr	r3, [r5, #4]
    d3fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d3fe:	6859      	ldr	r1, [r3, #4]
    d400:	4620      	mov	r0, r4
    d402:	4790      	blx	r2

  switch (input->type) {
    d404:	7a33      	ldrb	r3, [r6, #8]
    d406:	2b01      	cmp	r3, #1
    d408:	d017      	beq.n	d43a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    d40a:	2b09      	cmp	r3, #9
    d40c:	d021      	beq.n	d452 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
      break;
    case kTfLiteInt8:
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    d40e:	6965      	ldr	r5, [r4, #20]
    d410:	4618      	mov	r0, r3
    d412:	f7fb fdeb 	bl	8fec <TfLiteTypeGetName>
    d416:	4602      	mov	r2, r0
    d418:	4915      	ldr	r1, [pc, #84]	; (d470 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    d41a:	4620      	mov	r0, r4
    d41c:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    d41e:	2001      	movs	r0, #1
    d420:	e014      	b.n	d44c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d422:	f008 fdcf 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d426:	f008 fdcd 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    d42a:	f008 fdcb 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d42e:	f008 fdc9 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    d432:	f008 fdc7 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d436:	f008 fdc5 	bl	15fc4 <abort>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    d43a:	9001      	str	r0, [sp, #4]
    d43c:	9600      	str	r6, [sp, #0]
    d43e:	4643      	mov	r3, r8
    d440:	463a      	mov	r2, r7
    d442:	4629      	mov	r1, r5
    d444:	4620      	mov	r0, r4
    d446:	f007 fd7a 	bl	14f3e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  }
  return kTfLiteOk;
    d44a:	2000      	movs	r0, #0
}
    d44c:	b002      	add	sp, #8
    d44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    d452:	9001      	str	r0, [sp, #4]
    d454:	9600      	str	r6, [sp, #0]
    d456:	4643      	mov	r3, r8
    d458:	463a      	mov	r2, r7
    d45a:	4629      	mov	r1, r5
    d45c:	4620      	mov	r0, r4
    d45e:	f008 f90b 	bl	15678 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
    d462:	2000      	movs	r0, #0
      break;
    d464:	e7f2      	b.n	d44c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    d466:	bf00      	nop
    d468:	0006b650 	.word	0x0006b650
    d46c:	0006b654 	.word	0x0006b654
    d470:	0006b5a8 	.word	0x0006b5a8

0000d474 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    d474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d478:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d47a:	694f      	ldr	r7, [r1, #20]
    d47c:	b35f      	cbz	r7, d4d6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x62>
    d47e:	4604      	mov	r4, r0
    d480:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    d482:	f8d1 8010 	ldr.w	r8, [r1, #16]
    d486:	f1b8 0f00 	cmp.w	r8, #0
    d48a:	d026      	beq.n	d4da <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    d48c:	4b23      	ldr	r3, [pc, #140]	; (d51c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    d48e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d490:	b328      	cbz	r0, d4de <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    d492:	b335      	cbz	r5, d4e2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d494:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d496:	682b      	ldr	r3, [r5, #0]
    d498:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d49c:	6859      	ldr	r1, [r3, #4]
    d49e:	4790      	blx	r2
    d4a0:	4606      	mov	r6, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    d4a2:	4b1f      	ldr	r3, [pc, #124]	; (d520 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    d4a4:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d4a6:	b1f4      	cbz	r4, d4e6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    d4a8:	b1fd      	cbz	r5, d4ea <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d4aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d4ac:	686b      	ldr	r3, [r5, #4]
    d4ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d4b2:	6859      	ldr	r1, [r3, #4]
    d4b4:	4620      	mov	r0, r4
    d4b6:	4790      	blx	r2
  switch (input->type) {
    d4b8:	7a33      	ldrb	r3, [r6, #8]
    d4ba:	2b01      	cmp	r3, #1
    d4bc:	d017      	beq.n	d4ee <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    d4be:	2b09      	cmp	r3, #9
    d4c0:	d021      	beq.n	d506 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x92>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    d4c2:	6965      	ldr	r5, [r4, #20]
    d4c4:	4618      	mov	r0, r3
    d4c6:	f7fb fd91 	bl	8fec <TfLiteTypeGetName>
    d4ca:	4602      	mov	r2, r0
    d4cc:	4915      	ldr	r1, [pc, #84]	; (d524 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    d4ce:	4620      	mov	r0, r4
    d4d0:	47a8      	blx	r5
      return kTfLiteError;
    d4d2:	2001      	movs	r0, #1
    d4d4:	e014      	b.n	d500 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d4d6:	f008 fd75 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d4da:	f008 fd73 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    d4de:	f008 fd71 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d4e2:	f008 fd6f 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    d4e6:	f008 fd6d 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    d4ea:	f008 fd6b 	bl	15fc4 <abort>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    d4ee:	9001      	str	r0, [sp, #4]
    d4f0:	9600      	str	r6, [sp, #0]
    d4f2:	4643      	mov	r3, r8
    d4f4:	463a      	mov	r2, r7
    d4f6:	4629      	mov	r1, r5
    d4f8:	4620      	mov	r0, r4
    d4fa:	f007 fb4f 	bl	14b9c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
    d4fe:	2000      	movs	r0, #0
}
    d500:	b002      	add	sp, #8
    d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    d506:	9001      	str	r0, [sp, #4]
    d508:	9600      	str	r6, [sp, #0]
    d50a:	4643      	mov	r3, r8
    d50c:	463a      	mov	r2, r7
    d50e:	4629      	mov	r1, r5
    d510:	4620      	mov	r0, r4
    d512:	f007 fee2 	bl	152da <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
  return kTfLiteOk;
    d516:	2000      	movs	r0, #0
      break;
    d518:	e7f2      	b.n	d500 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    d51a:	bf00      	nop
    d51c:	0006b650 	.word	0x0006b650
    d520:	0006b654 	.word	0x0006b654
    d524:	0006b5cc 	.word	0x0006b5cc

0000d528 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    d528:	b470      	push	{r4, r5, r6}
    d52a:	4606      	mov	r6, r0
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    d52c:	4604      	mov	r4, r0
    d52e:	4d05      	ldr	r5, [pc, #20]	; (d544 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x1c>)
    d530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    d53c:	4630      	mov	r0, r6
    d53e:	bc70      	pop	{r4, r5, r6}
    d540:	4770      	bx	lr
    d542:	bf00      	nop
    d544:	000684dc 	.word	0x000684dc

0000d548 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:
      params->filter_width, params->padding, &out_height, &out_width);

  return kTfLiteOk;
}

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    d548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d54c:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d54e:	694f      	ldr	r7, [r1, #20]
    d550:	b34f      	cbz	r7, d5a6 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    d552:	4605      	mov	r5, r0
    d554:	460c      	mov	r4, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    d556:	690e      	ldr	r6, [r1, #16]
    d558:	b33e      	cbz	r6, d5aa <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x62>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    d55a:	2200      	movs	r2, #0
    d55c:	f006 faaf 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d560:	4680      	mov	r8, r0
    d562:	b320      	cbz	r0, d5ae <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    d564:	2200      	movs	r2, #0
    d566:	4621      	mov	r1, r4
    d568:	4628      	mov	r0, r5
    d56a:	f006 fac7 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d56e:	4681      	mov	r9, r0
    d570:	b350      	cbz	r0, d5c8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x80>

  TF_LITE_ENSURE_STATUS(
    d572:	9600      	str	r6, [sp, #0]
    d574:	4603      	mov	r3, r0
    d576:	4642      	mov	r2, r8
    d578:	4639      	mov	r1, r7
    d57a:	4628      	mov	r0, r5
    d57c:	f007 fabc 	bl	14af8 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    d580:	4604      	mov	r4, r0
    d582:	b9e8      	cbnz	r0, d5c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
    d584:	f898 3000 	ldrb.w	r3, [r8]
    d588:	2b01      	cmp	r3, #1
    d58a:	d027      	beq.n	d5dc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x94>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
    d58c:	2b09      	cmp	r3, #9
    d58e:	d117      	bne.n	d5c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRangeQuantized(context, params->activation, output,
    d590:	7d39      	ldrb	r1, [r7, #20]
    d592:	f106 0314 	add.w	r3, r6, #20
    d596:	9300      	str	r3, [sp, #0]
    d598:	f106 0310 	add.w	r3, r6, #16
    d59c:	464a      	mov	r2, r9
    d59e:	4628      	mov	r0, r5
    d5a0:	f7fb ff42 	bl	9428 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    d5a4:	e00c      	b.n	d5c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d5a6:	f008 fd0d 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d5aa:	f008 fd0b 	bl	15fc4 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    d5ae:	696c      	ldr	r4, [r5, #20]
    d5b0:	4b0e      	ldr	r3, [pc, #56]	; (d5ec <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
    d5b2:	9300      	str	r3, [sp, #0]
    d5b4:	233a      	movs	r3, #58	; 0x3a
    d5b6:	4a0e      	ldr	r2, [pc, #56]	; (d5f0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    d5b8:	490e      	ldr	r1, [pc, #56]	; (d5f4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    d5ba:	4628      	mov	r0, r5
    d5bc:	47a0      	blx	r4
    d5be:	2401      	movs	r4, #1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    d5c0:	4620      	mov	r0, r4
    d5c2:	b003      	add	sp, #12
    d5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    d5c8:	696c      	ldr	r4, [r5, #20]
    d5ca:	4b0b      	ldr	r3, [pc, #44]	; (d5f8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
    d5cc:	9300      	str	r3, [sp, #0]
    d5ce:	233c      	movs	r3, #60	; 0x3c
    d5d0:	4a07      	ldr	r2, [pc, #28]	; (d5f0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    d5d2:	4908      	ldr	r1, [pc, #32]	; (d5f4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    d5d4:	4628      	mov	r0, r5
    d5d6:	47a0      	blx	r4
    d5d8:	2401      	movs	r4, #1
    d5da:	e7f1      	b.n	d5c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    d5dc:	f106 021c 	add.w	r2, r6, #28
    d5e0:	f106 0118 	add.w	r1, r6, #24
    d5e4:	7d38      	ldrb	r0, [r7, #20]
    d5e6:	f7fc fe7f 	bl	a2e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
    d5ea:	e7e9      	b.n	d5c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    d5ec:	0006b2bc 	.word	0x0006b2bc
    d5f0:	0006b5f8 	.word	0x0006b5f8
    d5f4:	0006a8a8 	.word	0x0006a8a8
    d5f8:	0006b2e4 	.word	0x0006b2e4

0000d5fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d600:	b084      	sub	sp, #16
    d602:	4604      	mov	r4, r0
    d604:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    d606:	2200      	movs	r2, #0
    d608:	f006 fa59 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d60c:	b308      	cbz	r0, d652 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
    d60e:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    d610:	2200      	movs	r2, #0
    d612:	4639      	mov	r1, r7
    d614:	4620      	mov	r0, r4
    d616:	f006 fa71 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d61a:	4606      	mov	r6, r0
    d61c:	b328      	cbz	r0, d66a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6e>
  return NumElements(t->dims);
    d61e:	f8d5 8008 	ldr.w	r8, [r5, #8]
  for (int i = 0; i < dims->size; ++i) {
    d622:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    d626:	2201      	movs	r2, #1
    d628:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    d62a:	f8d8 1000 	ldr.w	r1, [r8]
    d62e:	4561      	cmp	r1, ip
    d630:	dd25      	ble.n	d67e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
    count *= dims->data[i];
    d632:	eb08 018c 	add.w	r1, r8, ip, lsl #2
    d636:	f8d1 e004 	ldr.w	lr, [r1, #4]
    d63a:	4670      	mov	r0, lr
    d63c:	17c1      	asrs	r1, r0, #31
    d63e:	fb02 f101 	mul.w	r1, r2, r1
    d642:	fb0e 1103 	mla	r1, lr, r3, r1
    d646:	fba2 230e 	umull	r2, r3, r2, lr
    d64a:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    d64c:	f10c 0c01 	add.w	ip, ip, #1
    d650:	e7eb      	b.n	d62a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    d652:	6965      	ldr	r5, [r4, #20]
    d654:	4b3e      	ldr	r3, [pc, #248]	; (d750 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    d656:	9300      	str	r3, [sp, #0]
    d658:	2323      	movs	r3, #35	; 0x23
    d65a:	4a3e      	ldr	r2, [pc, #248]	; (d754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d65c:	493e      	ldr	r1, [pc, #248]	; (d758 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    d65e:	4620      	mov	r0, r4
    d660:	47a8      	blx	r5
    d662:	2001      	movs	r0, #1
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}
    d664:	b004      	add	sp, #16
    d666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    d66a:	6965      	ldr	r5, [r4, #20]
    d66c:	4b3b      	ldr	r3, [pc, #236]	; (d75c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
    d66e:	9300      	str	r3, [sp, #0]
    d670:	2325      	movs	r3, #37	; 0x25
    d672:	4a38      	ldr	r2, [pc, #224]	; (d754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d674:	4938      	ldr	r1, [pc, #224]	; (d758 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    d676:	4620      	mov	r0, r4
    d678:	47a8      	blx	r5
    d67a:	2001      	movs	r0, #1
    d67c:	e7f2      	b.n	d664 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TfLiteIntArray* output_shape = output->dims;
    d67e:	68b0      	ldr	r0, [r6, #8]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d680:	683b      	ldr	r3, [r7, #0]
    d682:	681b      	ldr	r3, [r3, #0]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d684:	2b01      	cmp	r3, #1
    d686:	d004      	beq.n	d692 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_shape->size; ++i) {
    d688:	2300      	movs	r3, #0
  int stretch_dim = -1;
    d68a:	f04f 3cff 	mov.w	ip, #4294967295
  int num_output_elements = 1;
    d68e:	2701      	movs	r7, #1
    d690:	e01b      	b.n	d6ca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xce>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d692:	6803      	ldr	r3, [r0, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    d694:	2b01      	cmp	r3, #1
    d696:	d1f7      	bne.n	d688 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d698:	6843      	ldr	r3, [r0, #4]
    d69a:	2b00      	cmp	r3, #0
    d69c:	d1f4      	bne.n	d688 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
    output_shape->size = 0;
    d69e:	6003      	str	r3, [r0, #0]
    d6a0:	e7f2      	b.n	d688 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    d6a2:	6965      	ldr	r5, [r4, #20]
    d6a4:	f04f 33ff 	mov.w	r3, #4294967295
    d6a8:	9303      	str	r3, [sp, #12]
    d6aa:	f8cd c008 	str.w	ip, [sp, #8]
    d6ae:	4b2c      	ldr	r3, [pc, #176]	; (d760 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
    d6b0:	9301      	str	r3, [sp, #4]
    d6b2:	4b2c      	ldr	r3, [pc, #176]	; (d764 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
    d6b4:	9300      	str	r3, [sp, #0]
    d6b6:	233a      	movs	r3, #58	; 0x3a
    d6b8:	4a26      	ldr	r2, [pc, #152]	; (d754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d6ba:	492b      	ldr	r1, [pc, #172]	; (d768 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    d6bc:	4620      	mov	r0, r4
    d6be:	47a8      	blx	r5
    d6c0:	2001      	movs	r0, #1
    d6c2:	e7cf      	b.n	d664 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      num_output_elements *= value;
    d6c4:	fb01 f707 	mul.w	r7, r1, r7
  for (int i = 0; i < output_shape->size; ++i) {
    d6c8:	3301      	adds	r3, #1
    d6ca:	6801      	ldr	r1, [r0, #0]
    d6cc:	4299      	cmp	r1, r3
    d6ce:	dd0a      	ble.n	d6e6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
    int value = output_shape->data[i];
    d6d0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
    d6d4:	6849      	ldr	r1, [r1, #4]
    if (value == -1) {
    d6d6:	f1b1 3fff 	cmp.w	r1, #4294967295
    d6da:	d1f3      	bne.n	d6c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    d6dc:	f1bc 3fff 	cmp.w	ip, #4294967295
    d6e0:	d1df      	bne.n	d6a2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
      stretch_dim = i;
    d6e2:	469c      	mov	ip, r3
    d6e4:	e7f0      	b.n	d6c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  if (stretch_dim != -1) {
    d6e6:	f1bc 3fff 	cmp.w	ip, #4294967295
    d6ea:	d006      	beq.n	d6fa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    d6ec:	fb92 f3f7 	sdiv	r3, r2, r7
    d6f0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    d6f4:	6043      	str	r3, [r0, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    d6f6:	fb03 f707 	mul.w	r7, r3, r7
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    d6fa:	7828      	ldrb	r0, [r5, #0]
    d6fc:	7833      	ldrb	r3, [r6, #0]
    d6fe:	4298      	cmp	r0, r3
    d700:	d10f      	bne.n	d722 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x126>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    d702:	4297      	cmp	r7, r2
    d704:	d021      	beq.n	d74a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
    d706:	6965      	ldr	r5, [r4, #20]
    d708:	9703      	str	r7, [sp, #12]
    d70a:	9202      	str	r2, [sp, #8]
    d70c:	4b17      	ldr	r3, [pc, #92]	; (d76c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
    d70e:	9301      	str	r3, [sp, #4]
    d710:	4b17      	ldr	r3, [pc, #92]	; (d770 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
    d712:	9300      	str	r3, [sp, #0]
    d714:	2346      	movs	r3, #70	; 0x46
    d716:	4a0f      	ldr	r2, [pc, #60]	; (d754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d718:	4913      	ldr	r1, [pc, #76]	; (d768 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    d71a:	4620      	mov	r0, r4
    d71c:	47a8      	blx	r5
    d71e:	2001      	movs	r0, #1
    d720:	e7a0      	b.n	d664 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    d722:	6967      	ldr	r7, [r4, #20]
    d724:	f7fb fc62 	bl	8fec <TfLiteTypeGetName>
    d728:	4605      	mov	r5, r0
    d72a:	7830      	ldrb	r0, [r6, #0]
    d72c:	f7fb fc5e 	bl	8fec <TfLiteTypeGetName>
    d730:	9003      	str	r0, [sp, #12]
    d732:	9502      	str	r5, [sp, #8]
    d734:	4b0f      	ldr	r3, [pc, #60]	; (d774 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
    d736:	9301      	str	r3, [sp, #4]
    d738:	4b0f      	ldr	r3, [pc, #60]	; (d778 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
    d73a:	9300      	str	r3, [sp, #0]
    d73c:	2345      	movs	r3, #69	; 0x45
    d73e:	4a05      	ldr	r2, [pc, #20]	; (d754 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d740:	490e      	ldr	r1, [pc, #56]	; (d77c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
    d742:	4620      	mov	r0, r4
    d744:	47b8      	blx	r7
    d746:	2001      	movs	r0, #1
    d748:	e78c      	b.n	d664 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  return kTfLiteOk;
    d74a:	2000      	movs	r0, #0
    d74c:	e78a      	b.n	d664 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    d74e:	bf00      	nop
    d750:	0006b2bc 	.word	0x0006b2bc
    d754:	0006b658 	.word	0x0006b658
    d758:	0006a8a8 	.word	0x0006a8a8
    d75c:	0006b2e4 	.word	0x0006b2e4
    d760:	0006b6a8 	.word	0x0006b6a8
    d764:	0006b6ac 	.word	0x0006b6ac
    d768:	0006ab68 	.word	0x0006ab68
    d76c:	0006b6b8 	.word	0x0006b6b8
    d770:	0006b6cc 	.word	0x0006b6cc
    d774:	0006b17c 	.word	0x0006b17c
    d778:	0006b18c 	.word	0x0006b18c
    d77c:	0006b4f4 	.word	0x0006b4f4

0000d780 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d780:	b570      	push	{r4, r5, r6, lr}
    d782:	b084      	sub	sp, #16
    d784:	4605      	mov	r5, r0
    d786:	460c      	mov	r4, r1
    d788:	680b      	ldr	r3, [r1, #0]
    d78a:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    d78c:	2b01      	cmp	r3, #1
    d78e:	d00a      	beq.n	d7a6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    d790:	2b02      	cmp	r3, #2
    d792:	d008      	beq.n	d7a6 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    d794:	6944      	ldr	r4, [r0, #20]
    d796:	4b1a      	ldr	r3, [pc, #104]	; (d800 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    d798:	9300      	str	r3, [sp, #0]
    d79a:	234b      	movs	r3, #75	; 0x4b
    d79c:	4a19      	ldr	r2, [pc, #100]	; (d804 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    d79e:	491a      	ldr	r1, [pc, #104]	; (d808 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    d7a0:	47a0      	blx	r4
    d7a2:	2001      	movs	r0, #1
    d7a4:	e011      	b.n	d7ca <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    d7a6:	6863      	ldr	r3, [r4, #4]
    d7a8:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    d7aa:	2b01      	cmp	r3, #1
    d7ac:	d00f      	beq.n	d7ce <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
    d7ae:	696e      	ldr	r6, [r5, #20]
    d7b0:	2401      	movs	r4, #1
    d7b2:	9403      	str	r4, [sp, #12]
    d7b4:	9302      	str	r3, [sp, #8]
    d7b6:	4b15      	ldr	r3, [pc, #84]	; (d80c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    d7b8:	9301      	str	r3, [sp, #4]
    d7ba:	4b15      	ldr	r3, [pc, #84]	; (d810 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    d7bc:	9300      	str	r3, [sp, #0]
    d7be:	234c      	movs	r3, #76	; 0x4c
    d7c0:	4a10      	ldr	r2, [pc, #64]	; (d804 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    d7c2:	4914      	ldr	r1, [pc, #80]	; (d814 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    d7c4:	4628      	mov	r0, r5
    d7c6:	47b0      	blx	r6
    d7c8:	4620      	mov	r0, r4
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    d7ca:	b004      	add	sp, #16
    d7cc:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    d7ce:	4621      	mov	r1, r4
    d7d0:	4628      	mov	r0, r5
    d7d2:	f7ff ff13 	bl	d5fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    d7d6:	2800      	cmp	r0, #0
    d7d8:	d0f7      	beq.n	d7ca <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    d7da:	696e      	ldr	r6, [r5, #20]
    d7dc:	4621      	mov	r1, r4
    d7de:	4628      	mov	r0, r5
    d7e0:	f7ff ff0c 	bl	d5fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    d7e4:	2300      	movs	r3, #0
    d7e6:	9303      	str	r3, [sp, #12]
    d7e8:	9002      	str	r0, [sp, #8]
    d7ea:	4b0b      	ldr	r3, [pc, #44]	; (d818 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    d7ec:	9301      	str	r3, [sp, #4]
    d7ee:	4b0b      	ldr	r3, [pc, #44]	; (d81c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    d7f0:	9300      	str	r3, [sp, #0]
    d7f2:	234d      	movs	r3, #77	; 0x4d
    d7f4:	4a03      	ldr	r2, [pc, #12]	; (d804 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    d7f6:	4907      	ldr	r1, [pc, #28]	; (d814 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    d7f8:	4628      	mov	r0, r5
    d7fa:	47b0      	blx	r6
    d7fc:	2001      	movs	r0, #1
    d7fe:	e7e4      	b.n	d7ca <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    d800:	0006b6e0 	.word	0x0006b6e0
    d804:	0006b658 	.word	0x0006b658
    d808:	0006a8a8 	.word	0x0006a8a8
    d80c:	0006b8f0 	.word	0x0006b8f0
    d810:	0006b710 	.word	0x0006b710
    d814:	0006ab68 	.word	0x0006ab68
    d818:	0006b724 	.word	0x0006b724
    d81c:	0006b730 	.word	0x0006b730

0000d820 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    d820:	b470      	push	{r4, r5, r6}
    d822:	4606      	mov	r6, r0
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    d824:	4604      	mov	r4, r0
    d826:	4d05      	ldr	r5, [pc, #20]	; (d83c <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
    d828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d82a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d82c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    d834:	4630      	mov	r0, r6
    d836:	bc70      	pop	{r4, r5, r6}
    d838:	4770      	bx	lr
    d83a:	bf00      	nop
    d83c:	0006851c 	.word	0x0006851c

0000d840 <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    d840:	b470      	push	{r4, r5, r6}
    d842:	4606      	mov	r6, r0
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    d844:	4604      	mov	r4, r0
    d846:	4d05      	ldr	r5, [pc, #20]	; (d85c <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
    d848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d84c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    d854:	4630      	mov	r0, r6
    d856:	bc70      	pop	{r4, r5, r6}
    d858:	4770      	bx	lr
    d85a:	bf00      	nop
    d85c:	0006853c 	.word	0x0006853c

0000d860 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d864:	b091      	sub	sp, #68	; 0x44
    d866:	4691      	mov	r9, r2
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
    d868:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    d86c:	68c2      	ldr	r2, [r0, #12]
    d86e:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    d870:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    d872:	680d      	ldr	r5, [r1, #0]
      gemmlowp::FixedPoint<int32_t, kScaledDiffIntegerBits>;
  using FixedPointAccum =
      gemmlowp::FixedPoint<int32_t, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32_t, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    d874:	1e68      	subs	r0, r5, #1

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    d876:	2200      	movs	r2, #0
    d878:	e011      	b.n	d89e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    d87a:	f008 fba3 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    d87e:	f008 fba1 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d882:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    d886:	6866      	ldr	r6, [r4, #4]
    d888:	e017      	b.n	d8ba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    d88a:	f008 fb9b 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    d88e:	f008 fb99 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d892:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    d896:	6864      	ldr	r4, [r4, #4]
    if (i != skip_dim) {
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    d898:	42b4      	cmp	r4, r6
    d89a:	d119      	bne.n	d8d0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    d89c:	3201      	adds	r2, #1
    d89e:	4295      	cmp	r5, r2
    d8a0:	dd18      	ble.n	d8d4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    d8a2:	4290      	cmp	r0, r2
    d8a4:	d0fa      	beq.n	d89c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    d8a6:	2a00      	cmp	r2, #0
    d8a8:	dbe7      	blt.n	d87a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    d8aa:	680c      	ldr	r4, [r1, #0]
    d8ac:	42a2      	cmp	r2, r4
    d8ae:	dae6      	bge.n	d87e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d8b0:	2c05      	cmp	r4, #5
    d8b2:	dde6      	ble.n	d882 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    d8b4:	684c      	ldr	r4, [r1, #4]
    d8b6:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    d8ba:	2a00      	cmp	r2, #0
    d8bc:	dbe5      	blt.n	d88a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    d8be:	681c      	ldr	r4, [r3, #0]
    d8c0:	42a2      	cmp	r2, r4
    d8c2:	dae4      	bge.n	d88e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d8c4:	2c05      	cmp	r4, #5
    d8c6:	dde4      	ble.n	d892 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    d8c8:	685c      	ldr	r4, [r3, #4]
    d8ca:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    d8ce:	e7e3      	b.n	d898 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    d8d0:	f008 fb78 	bl	15fc4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    d8d4:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    d8d6:	2800      	cmp	r0, #0
    d8d8:	db08      	blt.n	d8ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    d8da:	42a8      	cmp	r0, r5
    d8dc:	da06      	bge.n	d8ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    d8de:	2d05      	cmp	r5, #5
    d8e0:	dd06      	ble.n	d8f0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    d8e2:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    d8e4:	2200      	movs	r2, #0
  int flat_size = 1;
    d8e6:	2401      	movs	r4, #1
    d8e8:	46ac      	mov	ip, r5
    d8ea:	e007      	b.n	d8fc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    d8ec:	f008 fb6a 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    d8f0:	1d0e      	adds	r6, r1, #4
    d8f2:	e7f7      	b.n	d8e4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    d8f4:	2501      	movs	r5, #1
    d8f6:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    d8fa:	3201      	adds	r2, #1
    d8fc:	4594      	cmp	ip, r2
    d8fe:	dd04      	ble.n	d90a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    d900:	4290      	cmp	r0, r2
    d902:	d0f7      	beq.n	d8f4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    d904:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    d908:	e7f5      	b.n	d8f6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    d90a:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    d90c:	2800      	cmp	r0, #0
    d90e:	db2e      	blt.n	d96e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    d910:	680a      	ldr	r2, [r1, #0]
    d912:	4290      	cmp	r0, r2
    d914:	da2d      	bge.n	d972 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d916:	2a05      	cmp	r2, #5
    d918:	dd2d      	ble.n	d976 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    d91a:	684a      	ldr	r2, [r1, #4]
    d91c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    d920:	2800      	cmp	r0, #0
    d922:	db2c      	blt.n	d97e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    d924:	6819      	ldr	r1, [r3, #0]
    d926:	4288      	cmp	r0, r1
    d928:	da2b      	bge.n	d982 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d92a:	2905      	cmp	r1, #5
    d92c:	dd2b      	ble.n	d986 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    d92e:	6859      	ldr	r1, [r3, #4]
    d930:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    d934:	4291      	cmp	r1, r2
    d936:	d12a      	bne.n	d98e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    d938:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    d93a:	2800      	cmp	r0, #0
    d93c:	db29      	blt.n	d992 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    d93e:	6819      	ldr	r1, [r3, #0]
    d940:	4288      	cmp	r0, r1
    d942:	da28      	bge.n	d996 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d944:	2905      	cmp	r1, #5
    d946:	dd28      	ble.n	d99a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    d948:	685b      	ldr	r3, [r3, #4]
    d94a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    d94e:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    d950:	429a      	cmp	r2, r3
    d952:	dc26      	bgt.n	d9a2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    d954:	ab0f      	add	r3, sp, #60	; 0x3c
    d956:	f8d3 b000 	ldr.w	fp, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    d95a:	f04f 0a00 	mov.w	sl, #0
    d95e:	4642      	mov	r2, r8
    d960:	46d0      	mov	r8, sl
    d962:	9702      	str	r7, [sp, #8]
    d964:	464b      	mov	r3, r9
    d966:	46d9      	mov	r9, fp
    d968:	469b      	mov	fp, r3
    d96a:	4692      	mov	sl, r2
    d96c:	e15d      	b.n	dc2a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ca>
    TFLITE_DCHECK_GE(i, 0);
    d96e:	f008 fb29 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    d972:	f008 fb27 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d976:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    d97a:	684a      	ldr	r2, [r1, #4]
    d97c:	e7d0      	b.n	d920 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    d97e:	f008 fb21 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    d982:	f008 fb1f 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d986:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    d98a:	6849      	ldr	r1, [r1, #4]
    d98c:	e7d2      	b.n	d934 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    d98e:	f008 fb19 	bl	15fc4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    d992:	f008 fb17 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    d996:	f008 fb15 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    d99a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    d99e:	685b      	ldr	r3, [r3, #4]
    d9a0:	e7d5      	b.n	d94e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    d9a2:	ab0e      	add	r3, sp, #56	; 0x38
    d9a4:	e7d7      	b.n	d956 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    d9a6:	f991 2000 	ldrsb.w	r2, [r1]
    d9aa:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    d9ae:	3301      	adds	r3, #1
    d9b0:	454b      	cmp	r3, r9
    d9b2:	da0c      	bge.n	d9ce <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    d9b4:	fb09 3208 	mla	r2, r9, r8, r3
    d9b8:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    d9bc:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    d9c0:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    d9c4:	4282      	cmp	r2, r0
    d9c6:	dcee      	bgt.n	d9a6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    d9c8:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    d9cc:	e7eb      	b.n	d9a6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    d9ce:	2000      	movs	r0, #0
    d9d0:	f006 f948 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    d9d4:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    d9d6:	2400      	movs	r4, #0
    d9d8:	9f06      	ldr	r7, [sp, #24]
    d9da:	9e02      	ldr	r6, [sp, #8]
    d9dc:	e01a      	b.n	da14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    d9de:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d9e2:	d002      	beq.n	d9ea <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    d9e4:	f04f 0c00 	mov.w	ip, #0
    d9e8:	e024      	b.n	da34 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    d9ea:	f04f 0c01 	mov.w	ip, #1
    d9ee:	e021      	b.n	da34 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    d9f0:	4993      	ldr	r1, [pc, #588]	; (dc40 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    d9f2:	e02f      	b.n	da54 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    d9f4:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    d9f6:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    d9fa:	f1bc 0f00 	cmp.w	ip, #0
    d9fe:	d13a      	bne.n	da76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    da00:	f7ff fa90 	bl	cf24 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    da04:	f007 f864 	bl	14ad0 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    da08:	4601      	mov	r1, r0
    da0a:	4628      	mov	r0, r5
    da0c:	f007 f81c 	bl	14a48 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    da10:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    da12:	3401      	adds	r4, #1
    da14:	454c      	cmp	r4, r9
    da16:	da31      	bge.n	da7c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    da18:	fb09 4308 	mla	r3, r9, r8, r4
    da1c:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    da20:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    da24:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    da26:	4296      	cmp	r6, r2
    da28:	dcf3      	bgt.n	da12 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    da2a:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    da2c:	4592      	cmp	sl, r2
    da2e:	d0d6      	beq.n	d9de <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    da30:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    da34:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    da36:	fb0a f301 	mul.w	r3, sl, r1
    da3a:	4650      	mov	r0, sl
    da3c:	17c1      	asrs	r1, r0, #31
    da3e:	fb02 3101 	mla	r1, r2, r1, r3
    da42:	fbaa 2302 	umull	r2, r3, sl, r2
    da46:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    da48:	2a00      	cmp	r2, #0
    da4a:	f173 0100 	sbcs.w	r1, r3, #0
    da4e:	dbcf      	blt.n	d9f0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    da50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    da54:	1852      	adds	r2, r2, r1
    da56:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    da5a:	4611      	mov	r1, r2
    da5c:	4618      	mov	r0, r3
    da5e:	2a00      	cmp	r2, #0
    da60:	f173 0e00 	sbcs.w	lr, r3, #0
    da64:	dac6      	bge.n	d9f4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    da66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    da6a:	1851      	adds	r1, r2, r1
    da6c:	f04f 0000 	mov.w	r0, #0
    da70:	eb43 0000 	adc.w	r0, r3, r0
    da74:	e7be      	b.n	d9f4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    da76:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    da7a:	e7c1      	b.n	da00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    da7c:	4628      	mov	r0, r5
    da7e:	f006 fef0 	bl	14862 <_ZN6tflite17CountLeadingZerosIjEEiT_>
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    da82:	f1c0 030c 	rsb	r3, r0, #12
    da86:	9307      	str	r3, [sp, #28]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    da88:	fa05 f000 	lsl.w	r0, r5, r0
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    da8c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    da90:	f7ff f892 	bl	cbb8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    da94:	9008      	str	r0, [sp, #32]
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    da96:	2600      	movs	r6, #0
    da98:	f8cd 8000 	str.w	r8, [sp]
    da9c:	4657      	mov	r7, sl
    da9e:	46ca      	mov	sl, r9
    daa0:	f8cd b004 	str.w	fp, [sp, #4]
    daa4:	e02b      	b.n	dafe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    daa6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    daaa:	d001      	beq.n	dab0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    daac:	2500      	movs	r5, #0
    daae:	e039      	b.n	db24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
    dab0:	2501      	movs	r5, #1
    dab2:	e037      	b.n	db24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dab4:	4962      	ldr	r1, [pc, #392]	; (dc40 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    dab6:	e045      	b.n	db44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dabc:	1851      	adds	r1, r2, r1
    dabe:	f04f 0000 	mov.w	r0, #0
    dac2:	eb43 0000 	adc.w	r0, r3, r0
    dac6:	e046      	b.n	db56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f6>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dac8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    dacc:	e048      	b.n	db60 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
  assert(exponent >= 0);
    dace:	4b5d      	ldr	r3, [pc, #372]	; (dc44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    dad0:	4a5d      	ldr	r2, [pc, #372]	; (dc48 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    dad2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dad6:	485d      	ldr	r0, [pc, #372]	; (dc4c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    dad8:	f002 fe72 	bl	107c0 <__assert_func>
  assert(exponent <= 31);
    dadc:	4b5c      	ldr	r3, [pc, #368]	; (dc50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
    dade:	4a5a      	ldr	r2, [pc, #360]	; (dc48 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    dae0:	f240 1167 	movw	r1, #359	; 0x167
    dae4:	4859      	ldr	r0, [pc, #356]	; (dc4c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    dae6:	f002 fe6b 	bl	107c0 <__assert_func>
	return __b;
    daea:	ab0c      	add	r3, sp, #48	; 0x30
    daec:	e089      	b.n	dc02 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a2>
	return __b;
    daee:	ab0d      	add	r3, sp, #52	; 0x34
    daf0:	e08e      	b.n	dc10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    daf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    daf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    daf8:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    for (int c = 0; c < depth; ++c) {
    dafc:	3601      	adds	r6, #1
    dafe:	4556      	cmp	r6, sl
    db00:	f280 808b 	bge.w	dc1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ba>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    db04:	9b00      	ldr	r3, [sp, #0]
    db06:	fb0a 6403 	mla	r4, sl, r3, r6
    db0a:	9b01      	ldr	r3, [sp, #4]
    db0c:	571a      	ldrsb	r2, [r3, r4]
    db0e:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    db12:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    db14:	9b02      	ldr	r3, [sp, #8]
    db16:	4293      	cmp	r3, r2
    db18:	dceb      	bgt.n	daf2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    db1a:	9b06      	ldr	r3, [sp, #24]
    db1c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    db1e:	4297      	cmp	r7, r2
    db20:	d0c1      	beq.n	daa6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    db22:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    db24:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    db26:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    db2a:	fb02 f309 	mul.w	r3, r2, r9
    db2e:	fb07 3101 	mla	r1, r7, r1, r3
    db32:	fba2 2307 	umull	r2, r3, r2, r7
    db36:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    db38:	2a00      	cmp	r2, #0
    db3a:	f173 0100 	sbcs.w	r1, r3, #0
    db3e:	dbb9      	blt.n	dab4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    db40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    db44:	1852      	adds	r2, r2, r1
    db46:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    db4a:	4611      	mov	r1, r2
    db4c:	4618      	mov	r0, r3
    db4e:	2a00      	cmp	r2, #0
    db50:	f173 0c00 	sbcs.w	ip, r3, #0
    db54:	dbb0      	blt.n	dab8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    db56:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    db58:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    db5c:	2d00      	cmp	r5, #0
    db5e:	d1b3      	bne.n	dac8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    db60:	f7ff f9e0 	bl	cf24 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    db64:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    db66:	9808      	ldr	r0, [sp, #32]
    db68:	f7ff f8ce 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    db6c:	4605      	mov	r5, r0
  assert(exponent >= 0);
    db6e:	9b07      	ldr	r3, [sp, #28]
    db70:	f113 090f 	adds.w	r9, r3, #15
    db74:	d4ab      	bmi.n	dace <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    db76:	f1b9 0f1f 	cmp.w	r9, #31
    db7a:	dcaf      	bgt.n	dadc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    db7c:	f04f 0b01 	mov.w	fp, #1
    db80:	fa0b f009 	lsl.w	r0, fp, r9
    db84:	3801      	subs	r0, #1
    db86:	f006 f86d 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    db8a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    db8c:	2000      	movs	r0, #0
    db8e:	f006 f869 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    db92:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    db94:	4658      	mov	r0, fp
    db96:	f006 f865 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    db9a:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    db9c:	4641      	mov	r1, r8
    db9e:	4628      	mov	r0, r5
    dba0:	f006 f861 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dba4:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    dba6:	4659      	mov	r1, fp
    dba8:	4640      	mov	r0, r8
    dbaa:	f006 f85e 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dbae:	4680      	mov	r8, r0
    dbb0:	9903      	ldr	r1, [sp, #12]
    dbb2:	4628      	mov	r0, r5
    dbb4:	f006 f865 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    dbb8:	f8dd b010 	ldr.w	fp, [sp, #16]
    dbbc:	4659      	mov	r1, fp
    dbbe:	f006 f852 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dbc2:	4601      	mov	r1, r0
    dbc4:	4640      	mov	r0, r8
    dbc6:	f006 f852 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    dbca:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    dbcc:	4649      	mov	r1, r9
    dbce:	4628      	mov	r0, r5
    dbd0:	f006 f84b 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dbd4:	4605      	mov	r5, r0
    dbd6:	4641      	mov	r1, r8
    dbd8:	9805      	ldr	r0, [sp, #20]
    dbda:	f006 f85a 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    dbde:	4659      	mov	r1, fp
    dbe0:	f006 f841 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dbe4:	4601      	mov	r1, r0
    dbe6:	4628      	mov	r0, r5
    dbe8:	f006 f841 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    dbec:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        const int32_t shifted_output =
    dbf0:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    dbf2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    dbf6:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    dbf8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    dbfc:	f6bf af75 	bge.w	daea <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    dc00:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    dc02:	4a14      	ldr	r2, [pc, #80]	; (dc54 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f4>)
    dc04:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    dc06:	681a      	ldr	r2, [r3, #0]
    dc08:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    dc0c:	f6ff af6f 	blt.w	daee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    dc10:	681b      	ldr	r3, [r3, #0]
    dc12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    dc14:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    dc18:	e770      	b.n	dafc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29c>
    dc1a:	f8dd 8000 	ldr.w	r8, [sp]
    dc1e:	46d1      	mov	r9, sl
    dc20:	46ba      	mov	sl, r7
    dc22:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    dc26:	f108 0801 	add.w	r8, r8, #1
    dc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dc2c:	4598      	cmp	r8, r3
    dc2e:	da04      	bge.n	dc3a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    dc30:	2380      	movs	r3, #128	; 0x80
    dc32:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    dc36:	2300      	movs	r3, #0
    dc38:	e6ba      	b.n	d9b0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
      }
    }
  }
}
    dc3a:	b011      	add	sp, #68	; 0x44
    dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc40:	c0000001 	.word	0xc0000001
    dc44:	0006b05c 	.word	0x0006b05c
    dc48:	0006b06c 	.word	0x0006b06c
    dc4c:	0006b0c4 	.word	0x0006b0c4
    dc50:	0006b120 	.word	0x0006b120
    dc54:	ffff8000 	.word	0xffff8000

0000dc58 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc5c:	b091      	sub	sp, #68	; 0x44
    dc5e:	4691      	mov	r9, r2
  const int32_t input_beta_multiplier = params.input_multiplier;
    dc60:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    dc64:	68c2      	ldr	r2, [r0, #12]
    dc66:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    dc68:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    dc6a:	680d      	ldr	r5, [r1, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    dc6c:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
    dc6e:	2200      	movs	r2, #0
    dc70:	e011      	b.n	dc96 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    dc72:	f008 f9a7 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc76:	f008 f9a5 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc7a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    dc7e:	6866      	ldr	r6, [r4, #4]
    dc80:	e017      	b.n	dcb2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    dc82:	f008 f99f 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc86:	f008 f99d 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc8a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    dc8e:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    dc90:	42b4      	cmp	r4, r6
    dc92:	d119      	bne.n	dcc8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    dc94:	3201      	adds	r2, #1
    dc96:	4295      	cmp	r5, r2
    dc98:	dd18      	ble.n	dccc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    dc9a:	4290      	cmp	r0, r2
    dc9c:	d0fa      	beq.n	dc94 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    dc9e:	2a00      	cmp	r2, #0
    dca0:	dbe7      	blt.n	dc72 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    dca2:	680c      	ldr	r4, [r1, #0]
    dca4:	42a2      	cmp	r2, r4
    dca6:	dae6      	bge.n	dc76 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dca8:	2c05      	cmp	r4, #5
    dcaa:	dde6      	ble.n	dc7a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    dcac:	684c      	ldr	r4, [r1, #4]
    dcae:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    dcb2:	2a00      	cmp	r2, #0
    dcb4:	dbe5      	blt.n	dc82 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    dcb6:	681c      	ldr	r4, [r3, #0]
    dcb8:	42a2      	cmp	r2, r4
    dcba:	dae4      	bge.n	dc86 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dcbc:	2c05      	cmp	r4, #5
    dcbe:	dde4      	ble.n	dc8a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    dcc0:	685c      	ldr	r4, [r3, #4]
    dcc2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    dcc6:	e7e3      	b.n	dc90 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    dcc8:	f008 f97c 	bl	15fc4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    dccc:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dcce:	2800      	cmp	r0, #0
    dcd0:	db08      	blt.n	dce4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    dcd2:	42a8      	cmp	r0, r5
    dcd4:	da06      	bge.n	dce4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dcd6:	2d05      	cmp	r5, #5
    dcd8:	dd06      	ble.n	dce8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    dcda:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    dcdc:	2200      	movs	r2, #0
  int flat_size = 1;
    dcde:	2401      	movs	r4, #1
    dce0:	46ac      	mov	ip, r5
    dce2:	e007      	b.n	dcf4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dce4:	f008 f96e 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dce8:	1d0e      	adds	r6, r1, #4
    dcea:	e7f7      	b.n	dcdc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dcec:	2501      	movs	r5, #1
    dcee:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    dcf2:	3201      	adds	r2, #1
    dcf4:	4594      	cmp	ip, r2
    dcf6:	dd04      	ble.n	dd02 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dcf8:	4290      	cmp	r0, r2
    dcfa:	d0f7      	beq.n	dcec <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    dcfc:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    dd00:	e7f5      	b.n	dcee <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    dd02:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    dd04:	2800      	cmp	r0, #0
    dd06:	db2e      	blt.n	dd66 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    dd08:	680a      	ldr	r2, [r1, #0]
    dd0a:	4290      	cmp	r0, r2
    dd0c:	da2d      	bge.n	dd6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dd0e:	2a05      	cmp	r2, #5
    dd10:	dd2d      	ble.n	dd6e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    dd12:	684a      	ldr	r2, [r1, #4]
    dd14:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    dd18:	2800      	cmp	r0, #0
    dd1a:	db2c      	blt.n	dd76 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    dd1c:	6819      	ldr	r1, [r3, #0]
    dd1e:	4288      	cmp	r0, r1
    dd20:	da2b      	bge.n	dd7a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dd22:	2905      	cmp	r1, #5
    dd24:	dd2b      	ble.n	dd7e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    dd26:	6859      	ldr	r1, [r3, #4]
    dd28:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dd2c:	4291      	cmp	r1, r2
    dd2e:	d12a      	bne.n	dd86 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    dd30:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    dd32:	2800      	cmp	r0, #0
    dd34:	db29      	blt.n	dd8a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    dd36:	6819      	ldr	r1, [r3, #0]
    dd38:	4288      	cmp	r0, r1
    dd3a:	da28      	bge.n	dd8e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dd3c:	2905      	cmp	r1, #5
    dd3e:	dd28      	ble.n	dd92 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    dd40:	685b      	ldr	r3, [r3, #4]
    dd42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    dd46:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    dd48:	429a      	cmp	r2, r3
    dd4a:	dc26      	bgt.n	dd9a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    dd4c:	ab0f      	add	r3, sp, #60	; 0x3c
    dd4e:	f8d3 b000 	ldr.w	fp, [r3]
  for (int i = 0; i < outer_size; ++i) {
    dd52:	f04f 0a00 	mov.w	sl, #0
    dd56:	4642      	mov	r2, r8
    dd58:	46d0      	mov	r8, sl
    dd5a:	9702      	str	r7, [sp, #8]
    dd5c:	464b      	mov	r3, r9
    dd5e:	46d9      	mov	r9, fp
    dd60:	469b      	mov	fp, r3
    dd62:	4692      	mov	sl, r2
    dd64:	e158      	b.n	e018 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c0>
    TFLITE_DCHECK_GE(i, 0);
    dd66:	f008 f92d 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dd6a:	f008 f92b 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dd6e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    dd72:	684a      	ldr	r2, [r1, #4]
    dd74:	e7d0      	b.n	dd18 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    dd76:	f008 f925 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dd7a:	f008 f923 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dd7e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    dd82:	6849      	ldr	r1, [r1, #4]
    dd84:	e7d2      	b.n	dd2c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dd86:	f008 f91d 	bl	15fc4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    dd8a:	f008 f91b 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dd8e:	f008 f919 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dd92:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    dd96:	685b      	ldr	r3, [r3, #4]
    dd98:	e7d5      	b.n	dd46 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    dd9a:	ab0e      	add	r3, sp, #56	; 0x38
    dd9c:	e7d7      	b.n	dd4e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    dd9e:	f991 2000 	ldrsb.w	r2, [r1]
    dda2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    dda6:	3301      	adds	r3, #1
    dda8:	454b      	cmp	r3, r9
    ddaa:	da0c      	bge.n	ddc6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    ddac:	fb09 3208 	mla	r2, r9, r8, r3
    ddb0:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    ddb4:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    ddb8:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    ddbc:	4282      	cmp	r2, r0
    ddbe:	dcee      	bgt.n	dd9e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    ddc0:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    ddc4:	e7eb      	b.n	dd9e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    ddc6:	2000      	movs	r0, #0
    ddc8:	f005 ff4c 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    ddcc:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    ddce:	2400      	movs	r4, #0
    ddd0:	9f06      	ldr	r7, [sp, #24]
    ddd2:	9e02      	ldr	r6, [sp, #8]
    ddd4:	e01a      	b.n	de0c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ddd6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ddda:	d002      	beq.n	dde2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    dddc:	f04f 0c00 	mov.w	ip, #0
    dde0:	e024      	b.n	de2c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    dde2:	f04f 0c01 	mov.w	ip, #1
    dde6:	e021      	b.n	de2c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dde8:	4991      	ldr	r1, [pc, #580]	; (e030 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    ddea:	e02f      	b.n	de4c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ddec:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ddee:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ddf2:	f1bc 0f00 	cmp.w	ip, #0
    ddf6:	d13a      	bne.n	de6e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    ddf8:	f7ff f894 	bl	cf24 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    ddfc:	f006 fe68 	bl	14ad0 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    de00:	4601      	mov	r1, r0
    de02:	4628      	mov	r0, r5
    de04:	f006 fe20 	bl	14a48 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    de08:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    de0a:	3401      	adds	r4, #1
    de0c:	454c      	cmp	r4, r9
    de0e:	da31      	bge.n	de74 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    de10:	fb09 4308 	mla	r3, r9, r8, r4
    de14:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    de18:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    de1c:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    de1e:	4296      	cmp	r6, r2
    de20:	dcf3      	bgt.n	de0a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    de22:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    de24:	4592      	cmp	sl, r2
    de26:	d0d6      	beq.n	ddd6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    de28:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    de2c:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    de2e:	fb0a f301 	mul.w	r3, sl, r1
    de32:	4650      	mov	r0, sl
    de34:	17c1      	asrs	r1, r0, #31
    de36:	fb02 3101 	mla	r1, r2, r1, r3
    de3a:	fbaa 2302 	umull	r2, r3, sl, r2
    de3e:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    de40:	2a00      	cmp	r2, #0
    de42:	f173 0100 	sbcs.w	r1, r3, #0
    de46:	dbcf      	blt.n	dde8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    de48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    de4c:	1852      	adds	r2, r2, r1
    de4e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    de52:	4611      	mov	r1, r2
    de54:	4618      	mov	r0, r3
    de56:	2a00      	cmp	r2, #0
    de58:	f173 0e00 	sbcs.w	lr, r3, #0
    de5c:	dac6      	bge.n	ddec <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    de5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    de62:	1851      	adds	r1, r2, r1
    de64:	f04f 0000 	mov.w	r0, #0
    de68:	eb43 0000 	adc.w	r0, r3, r0
    de6c:	e7be      	b.n	ddec <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    de6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    de72:	e7c1      	b.n	ddf8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    de74:	4628      	mov	r0, r5
    de76:	f006 fcf4 	bl	14862 <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    de7a:	f1c0 030c 	rsb	r3, r0, #12
    de7e:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    de80:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    de84:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    de88:	f7fe fe96 	bl	cbb8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    de8c:	9008      	str	r0, [sp, #32]
    for (int c = 0; c < depth; ++c) {
    de8e:	2600      	movs	r6, #0
    de90:	f8cd 8000 	str.w	r8, [sp]
    de94:	4657      	mov	r7, sl
    de96:	46ca      	mov	sl, r9
    de98:	f8cd b004 	str.w	fp, [sp, #4]
    de9c:	e029      	b.n	def2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    de9e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dea2:	d001      	beq.n	dea8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    dea4:	2500      	movs	r5, #0
    dea6:	e037      	b.n	df18 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
    dea8:	2501      	movs	r5, #1
    deaa:	e035      	b.n	df18 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    deac:	4960      	ldr	r1, [pc, #384]	; (e030 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    deae:	e043      	b.n	df38 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    deb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    deb4:	1851      	adds	r1, r2, r1
    deb6:	f04f 0000 	mov.w	r0, #0
    deba:	eb43 0000 	adc.w	r0, r3, r0
    debe:	e044      	b.n	df4a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dec0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    dec4:	e046      	b.n	df54 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2fc>
  assert(exponent >= 0);
    dec6:	4b5b      	ldr	r3, [pc, #364]	; (e034 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
    dec8:	4a5b      	ldr	r2, [pc, #364]	; (e038 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    deca:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dece:	485b      	ldr	r0, [pc, #364]	; (e03c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    ded0:	f002 fc76 	bl	107c0 <__assert_func>
  assert(exponent <= 31);
    ded4:	4b5a      	ldr	r3, [pc, #360]	; (e040 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    ded6:	4a58      	ldr	r2, [pc, #352]	; (e038 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    ded8:	f240 1167 	movw	r1, #359	; 0x167
    dedc:	4857      	ldr	r0, [pc, #348]	; (e03c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    dede:	f002 fc6f 	bl	107c0 <__assert_func>
	return __b;
    dee2:	ab0c      	add	r3, sp, #48	; 0x30
    dee4:	e084      	b.n	dff0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>
	return __b;
    dee6:	ab0d      	add	r3, sp, #52	; 0x34
    dee8:	e08a      	b.n	e000 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a8>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    deea:	2380      	movs	r3, #128	; 0x80
    deec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    deee:	5513      	strb	r3, [r2, r4]
    for (int c = 0; c < depth; ++c) {
    def0:	3601      	adds	r6, #1
    def2:	4556      	cmp	r6, sl
    def4:	f280 8088 	bge.w	e008 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    def8:	9b00      	ldr	r3, [sp, #0]
    defa:	fb0a 6403 	mla	r4, sl, r3, r6
    defe:	9b01      	ldr	r3, [sp, #4]
    df00:	571a      	ldrsb	r2, [r3, r4]
    df02:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    df06:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    df08:	9b02      	ldr	r3, [sp, #8]
    df0a:	4293      	cmp	r3, r2
    df0c:	dced      	bgt.n	deea <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    df0e:	9b06      	ldr	r3, [sp, #24]
    df10:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    df12:	4297      	cmp	r7, r2
    df14:	d0c3      	beq.n	de9e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    df16:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    df18:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    df1a:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    df1e:	fb02 f309 	mul.w	r3, r2, r9
    df22:	fb07 3101 	mla	r1, r7, r1, r3
    df26:	fba2 2307 	umull	r2, r3, r2, r7
    df2a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    df2c:	2a00      	cmp	r2, #0
    df2e:	f173 0100 	sbcs.w	r1, r3, #0
    df32:	dbbb      	blt.n	deac <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    df34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    df38:	1852      	adds	r2, r2, r1
    df3a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    df3e:	4611      	mov	r1, r2
    df40:	4618      	mov	r0, r3
    df42:	2a00      	cmp	r2, #0
    df44:	f173 0c00 	sbcs.w	ip, r3, #0
    df48:	dbb2      	blt.n	deb0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    df4a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    df4c:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    df50:	2d00      	cmp	r5, #0
    df52:	d1b5      	bne.n	dec0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    df54:	f7fe ffe6 	bl	cf24 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    df58:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    df5a:	9808      	ldr	r0, [sp, #32]
    df5c:	f7fe fed4 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    df60:	4605      	mov	r5, r0
  assert(exponent >= 0);
    df62:	9b07      	ldr	r3, [sp, #28]
    df64:	f113 0917 	adds.w	r9, r3, #23
    df68:	d4ad      	bmi.n	dec6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    df6a:	f1b9 0f1f 	cmp.w	r9, #31
    df6e:	dcb1      	bgt.n	ded4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    df70:	f04f 0b01 	mov.w	fp, #1
    df74:	fa0b f009 	lsl.w	r0, fp, r9
    df78:	3801      	subs	r0, #1
    df7a:	f005 fe73 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    df7e:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    df80:	2000      	movs	r0, #0
    df82:	f005 fe6f 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    df86:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    df88:	4658      	mov	r0, fp
    df8a:	f005 fe6b 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    df8e:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    df90:	4641      	mov	r1, r8
    df92:	4628      	mov	r0, r5
    df94:	f005 fe67 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    df98:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    df9a:	4659      	mov	r1, fp
    df9c:	4640      	mov	r0, r8
    df9e:	f005 fe64 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dfa2:	4680      	mov	r8, r0
    dfa4:	9903      	ldr	r1, [sp, #12]
    dfa6:	4628      	mov	r0, r5
    dfa8:	f005 fe6b 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    dfac:	f8dd b010 	ldr.w	fp, [sp, #16]
    dfb0:	4659      	mov	r1, fp
    dfb2:	f005 fe58 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dfb6:	4601      	mov	r1, r0
    dfb8:	4640      	mov	r0, r8
    dfba:	f005 fe58 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    dfbe:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    dfc0:	4649      	mov	r1, r9
    dfc2:	4628      	mov	r0, r5
    dfc4:	f005 fe51 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dfc8:	4605      	mov	r5, r0
    dfca:	4641      	mov	r1, r8
    dfcc:	9805      	ldr	r0, [sp, #20]
    dfce:	f005 fe60 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    dfd2:	4659      	mov	r1, fp
    dfd4:	f005 fe47 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dfd8:	4601      	mov	r1, r0
    dfda:	4628      	mov	r0, r5
    dfdc:	f005 fe47 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    dfe0:	3880      	subs	r0, #128	; 0x80
        const int32_t shifted_output =
    dfe2:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    dfe4:	237f      	movs	r3, #127	; 0x7f
    dfe6:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    dfe8:	4298      	cmp	r0, r3
    dfea:	f73f af7a 	bgt.w	dee2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    dfee:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    dff0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    dff4:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    dff6:	681a      	ldr	r2, [r3, #0]
    dff8:	f112 0f80 	cmn.w	r2, #128	; 0x80
    dffc:	f6ff af73 	blt.w	dee6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    e000:	681b      	ldr	r3, [r3, #0]
    e002:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e004:	5513      	strb	r3, [r2, r4]
    e006:	e773      	b.n	def0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x298>
    e008:	f8dd 8000 	ldr.w	r8, [sp]
    e00c:	46d1      	mov	r9, sl
    e00e:	46ba      	mov	sl, r7
    e010:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    e014:	f108 0801 	add.w	r8, r8, #1
    e018:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e01a:	4598      	cmp	r8, r3
    e01c:	da04      	bge.n	e028 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d0>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    e01e:	2380      	movs	r3, #128	; 0x80
    e020:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    e024:	2300      	movs	r3, #0
    e026:	e6bf      	b.n	dda8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
}
    e028:	b011      	add	sp, #68	; 0x44
    e02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e02e:	bf00      	nop
    e030:	c0000001 	.word	0xc0000001
    e034:	0006b05c 	.word	0x0006b05c
    e038:	0006b06c 	.word	0x0006b06c
    e03c:	0006b0c4 	.word	0x0006b0c4
    e040:	0006b120 	.word	0x0006b120

0000e044 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
    e044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e048:	b0bf      	sub	sp, #252	; 0xfc
    e04a:	4604      	mov	r4, r0
    e04c:	460d      	mov	r5, r1
    e04e:	4693      	mov	fp, r2
  if (input->type == kTfLiteInt8) {
    e050:	7a03      	ldrb	r3, [r0, #8]
    e052:	2b09      	cmp	r3, #9
    e054:	d152      	bne.n	e0fc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xb8>
    if (output->type == kTfLiteInt16) {
    e056:	7a0b      	ldrb	r3, [r1, #8]
    e058:	2b07      	cmp	r3, #7
    e05a:	d027      	beq.n	e0ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x68>
          op_data, tflite::micro::GetTensorShape(input),
    e05c:	4601      	mov	r1, r0
    e05e:	a81e      	add	r0, sp, #120	; 0x78
    e060:	f006 fbd5 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e064:	4620      	mov	r0, r4
    e066:	f005 fdf3 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e06a:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
    e06c:	4629      	mov	r1, r5
    e06e:	a824      	add	r0, sp, #144	; 0x90
    e070:	f006 fbcd 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e074:	4628      	mov	r0, r5
    e076:	f005 fdf1 	bl	13c5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    e07a:	9000      	str	r0, [sp, #0]
    e07c:	ab24      	add	r3, sp, #144	; 0x90
    e07e:	4622      	mov	r2, r4
    e080:	a91e      	add	r1, sp, #120	; 0x78
    e082:	4658      	mov	r0, fp
    e084:	f7ff fde8 	bl	dc58 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
    e088:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e08a:	2b05      	cmp	r3, #5
    e08c:	dd03      	ble.n	e096 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
      delete[] dims_pointer_;
    e08e:	9825      	ldr	r0, [sp, #148]	; 0x94
    e090:	b108      	cbz	r0, e096 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
    e092:	f007 ff82 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e096:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e098:	2b05      	cmp	r3, #5
    e09a:	f340 828b 	ble.w	e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e09e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    e0a0:	2800      	cmp	r0, #0
    e0a2:	f000 8287 	beq.w	e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e0a6:	f007 ff78 	bl	15f9a <_ZdaPv>
    e0aa:	e283      	b.n	e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
          op_data, tflite::micro::GetTensorShape(input),
    e0ac:	4601      	mov	r1, r0
    e0ae:	a812      	add	r0, sp, #72	; 0x48
    e0b0:	f006 fbad 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e0b4:	4620      	mov	r0, r4
    e0b6:	f005 fdcb 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e0ba:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
    e0bc:	4629      	mov	r1, r5
    e0be:	a818      	add	r0, sp, #96	; 0x60
    e0c0:	f006 fba5 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e0c4:	4628      	mov	r0, r5
    e0c6:	f005 fdf2 	bl	13cae <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    e0ca:	9000      	str	r0, [sp, #0]
    e0cc:	ab18      	add	r3, sp, #96	; 0x60
    e0ce:	4622      	mov	r2, r4
    e0d0:	a912      	add	r1, sp, #72	; 0x48
    e0d2:	4658      	mov	r0, fp
    e0d4:	f7ff fbc4 	bl	d860 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
    e0d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e0da:	2b05      	cmp	r3, #5
    e0dc:	dd03      	ble.n	e0e6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
      delete[] dims_pointer_;
    e0de:	9819      	ldr	r0, [sp, #100]	; 0x64
    e0e0:	b108      	cbz	r0, e0e6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
    e0e2:	f007 ff5a 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e0e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e0e8:	2b05      	cmp	r3, #5
    e0ea:	f340 8263 	ble.w	e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e0ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e0f0:	2800      	cmp	r0, #0
    e0f2:	f000 825f 	beq.w	e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e0f6:	f007 ff50 	bl	15f9a <_ZdaPv>
    e0fa:	e25b      	b.n	e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
        op_data, tflite::micro::GetTensorShape(input),
    e0fc:	4601      	mov	r1, r0
    e0fe:	a82a      	add	r0, sp, #168	; 0xa8
    e100:	f006 fb85 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
    e104:	4620      	mov	r0, r4
    e106:	f005 fdcc 	bl	13ca2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    e10a:	9005      	str	r0, [sp, #20]
        tflite::micro::GetTensorShape(output),
    e10c:	4629      	mov	r1, r5
    e10e:	a830      	add	r0, sp, #192	; 0xc0
    e110:	f006 fb7d 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
    e114:	4628      	mov	r0, r5
    e116:	f005 fdca 	bl	13cae <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    e11a:	9006      	str	r0, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
    e11c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e11e:	1e62      	subs	r2, r4, #1
  for (int i = 0; i < dims_count; ++i) {
    e120:	2300      	movs	r3, #0
    e122:	e015      	b.n	e150 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10c>
    TFLITE_DCHECK_GE(i, 0);
    e124:	f007 ff4e 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e128:	f007 ff4c 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e12c:	a93e      	add	r1, sp, #248	; 0xf8
    e12e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e132:	f851 1c4c 	ldr.w	r1, [r1, #-76]
    e136:	e019      	b.n	e16c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x128>
    TFLITE_DCHECK_GE(i, 0);
    e138:	f007 ff44 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e13c:	f007 ff42 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e140:	a83e      	add	r0, sp, #248	; 0xf8
    e142:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e146:	f850 0c34 	ldr.w	r0, [r0, #-52]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e14a:	4288      	cmp	r0, r1
    e14c:	d119      	bne.n	e182 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x13e>
  for (int i = 0; i < dims_count; ++i) {
    e14e:	3301      	adds	r3, #1
    e150:	429c      	cmp	r4, r3
    e152:	dd18      	ble.n	e186 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x142>
    if (i != skip_dim) {
    e154:	429a      	cmp	r2, r3
    e156:	d0fa      	beq.n	e14e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
    TFLITE_DCHECK_GE(i, 0);
    e158:	2b00      	cmp	r3, #0
    e15a:	dbe3      	blt.n	e124 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe0>
    TFLITE_DCHECK_LT(i, size_);
    e15c:	992a      	ldr	r1, [sp, #168]	; 0xa8
    e15e:	428b      	cmp	r3, r1
    e160:	dae2      	bge.n	e128 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e162:	2905      	cmp	r1, #5
    e164:	dde2      	ble.n	e12c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe8>
    e166:	992b      	ldr	r1, [sp, #172]	; 0xac
    e168:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e16c:	2b00      	cmp	r3, #0
    e16e:	dbe3      	blt.n	e138 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf4>
    TFLITE_DCHECK_LT(i, size_);
    e170:	9830      	ldr	r0, [sp, #192]	; 0xc0
    e172:	4283      	cmp	r3, r0
    e174:	dae2      	bge.n	e13c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e176:	2805      	cmp	r0, #5
    e178:	dde2      	ble.n	e140 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xfc>
    e17a:	9831      	ldr	r0, [sp, #196]	; 0xc4
    e17c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    e180:	e7e3      	b.n	e14a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x106>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e182:	f007 ff1f 	bl	15fc4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    e186:	982a      	ldr	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e188:	2a00      	cmp	r2, #0
    e18a:	db05      	blt.n	e198 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    e18c:	4282      	cmp	r2, r0
    e18e:	da03      	bge.n	e198 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e190:	2805      	cmp	r0, #5
    e192:	dd03      	ble.n	e19c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x158>
    e194:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    e196:	e002      	b.n	e19e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e198:	f007 ff14 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e19c:	ac2b      	add	r4, sp, #172	; 0xac
  for (int i = 0; i < dims_count; ++i) {
    e19e:	2300      	movs	r3, #0
  int flat_size = 1;
    e1a0:	2501      	movs	r5, #1
    e1a2:	e004      	b.n	e1ae <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x16a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e1a4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    e1a8:	fb01 f505 	mul.w	r5, r1, r5
  for (int i = 0; i < dims_count; ++i) {
    e1ac:	3301      	adds	r3, #1
    e1ae:	4298      	cmp	r0, r3
    e1b0:	dd03      	ble.n	e1ba <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x176>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e1b2:	429a      	cmp	r2, r3
    e1b4:	d1f6      	bne.n	e1a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x160>
    e1b6:	2101      	movs	r1, #1
    e1b8:	e7f6      	b.n	e1a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x164>
    e1ba:	950d      	str	r5, [sp, #52]	; 0x34
    TFLITE_DCHECK_GE(i, 0);
    e1bc:	2a00      	cmp	r2, #0
    e1be:	db2a      	blt.n	e216 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d2>
    TFLITE_DCHECK_LT(i, size_);
    e1c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    e1c2:	429a      	cmp	r2, r3
    e1c4:	da29      	bge.n	e21a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e1c6:	2b05      	cmp	r3, #5
    e1c8:	dd29      	ble.n	e21e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1da>
    e1ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    e1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e1d0:	2a00      	cmp	r2, #0
    e1d2:	db2a      	blt.n	e22a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1e6>
    TFLITE_DCHECK_LT(i, size_);
    e1d4:	9930      	ldr	r1, [sp, #192]	; 0xc0
    e1d6:	428a      	cmp	r2, r1
    e1d8:	da29      	bge.n	e22e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e1da:	2905      	cmp	r1, #5
    e1dc:	dd29      	ble.n	e232 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ee>
    e1de:	9931      	ldr	r1, [sp, #196]	; 0xc4
    e1e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e1e4:	4299      	cmp	r1, r3
    e1e6:	d12a      	bne.n	e23e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fa>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e1e8:	933b      	str	r3, [sp, #236]	; 0xec
    TFLITE_DCHECK_GE(i, 0);
    e1ea:	2a00      	cmp	r2, #0
    e1ec:	db29      	blt.n	e242 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fe>
    TFLITE_DCHECK_LT(i, size_);
    e1ee:	9930      	ldr	r1, [sp, #192]	; 0xc0
    e1f0:	428a      	cmp	r2, r1
    e1f2:	da28      	bge.n	e246 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e1f4:	2905      	cmp	r1, #5
    e1f6:	dd28      	ble.n	e24a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x206>
    e1f8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    e1fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e1fe:	923a      	str	r2, [sp, #232]	; 0xe8
      if (__b < __a)
    e200:	4293      	cmp	r3, r2
    e202:	dc28      	bgt.n	e256 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x212>
      return __a;
    e204:	ab3b      	add	r3, sp, #236	; 0xec
    e206:	f8d3 a000 	ldr.w	sl, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    e20a:	f04f 0800 	mov.w	r8, #0
    e20e:	46c1      	mov	r9, r8
    e210:	46d8      	mov	r8, fp
    e212:	46d3      	mov	fp, sl
    e214:	e1b6      	b.n	e584 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x540>
    TFLITE_DCHECK_GE(i, 0);
    e216:	f007 fed5 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e21a:	f007 fed3 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e21e:	ab3e      	add	r3, sp, #248	; 0xf8
    e220:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    e224:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    e228:	e7d2      	b.n	e1d0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x18c>
    TFLITE_DCHECK_GE(i, 0);
    e22a:	f007 fecb 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e22e:	f007 fec9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e232:	a93e      	add	r1, sp, #248	; 0xf8
    e234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    e238:	f851 1c34 	ldr.w	r1, [r1, #-52]
    e23c:	e7d2      	b.n	e1e4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1a0>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e23e:	f007 fec1 	bl	15fc4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    e242:	f007 febf 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e246:	f007 febd 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e24a:	a93e      	add	r1, sp, #248	; 0xf8
    e24c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    e250:	f852 2c34 	ldr.w	r2, [r2, #-52]
    e254:	e7d3      	b.n	e1fe <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ba>
	return __b;
    e256:	ab3a      	add	r3, sp, #232	; 0xe8
    e258:	e7d5      	b.n	e206 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1c2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e25a:	f9b2 2000 	ldrsh.w	r2, [r2]
    e25e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
    e262:	3301      	adds	r3, #1
    e264:	455b      	cmp	r3, fp
    e266:	da0c      	bge.n	e282 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x23e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e268:	fb0b 3109 	mla	r1, fp, r9, r3
    e26c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
      if (__a < __b)
    e270:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
    e274:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
    e278:	428c      	cmp	r4, r1
    e27a:	dbee      	blt.n	e25a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
      return __a;
    e27c:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
    e280:	e7eb      	b.n	e25a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    e282:	fb0b f309 	mul.w	r3, fp, r9
    e286:	9307      	str	r3, [sp, #28]
    e288:	9a06      	ldr	r2, [sp, #24]
    e28a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e28e:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    e290:	2600      	movs	r6, #0
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    e292:	46b2      	mov	sl, r6
    e294:	f8cd 9010 	str.w	r9, [sp, #16]
    e298:	e07c      	b.n	e394 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x350>
  int right_shift = shift > 0 ? 0 : -shift;
    e29a:	426d      	negs	r5, r5
    e29c:	e091      	b.n	e3c2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x37e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e29e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    e2a2:	d001      	beq.n	e2a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x264>
    e2a4:	2700      	movs	r7, #0
    e2a6:	e091      	b.n	e3cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
    e2a8:	2701      	movs	r7, #1
    e2aa:	e08f      	b.n	e3cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e2ac:	49c3      	ldr	r1, [pc, #780]	; (e5bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x578>)
    e2ae:	e0a1      	b.n	e3f4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3b0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e2b0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    e2b2:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e2b6:	2f00      	cmp	r7, #0
    e2b8:	f040 80ae 	bne.w	e418 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3d4>
  assert(exponent >= 0);
    e2bc:	2d00      	cmp	r5, #0
    e2be:	f2c0 80ae 	blt.w	e41e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3da>
  assert(exponent <= 31);
    e2c2:	2d1f      	cmp	r5, #31
    e2c4:	f300 80b2 	bgt.w	e42c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3e8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    e2c8:	2701      	movs	r7, #1
    e2ca:	fa07 f005 	lsl.w	r0, r7, r5
    e2ce:	3801      	subs	r0, #1
    e2d0:	f005 fcc8 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e2d4:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
    e2d6:	2000      	movs	r0, #0
    e2d8:	f005 fcc4 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e2dc:	9008      	str	r0, [sp, #32]
  const IntegerType one = Dup<IntegerType>(1);
    e2de:	4638      	mov	r0, r7
    e2e0:	f005 fcc0 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e2e4:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType remainder = BitAnd(x, mask);
    e2e6:	4649      	mov	r1, r9
    e2e8:	4620      	mov	r0, r4
    e2ea:	f005 fcbc 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e2ee:	900b      	str	r0, [sp, #44]	; 0x2c
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    e2f0:	4639      	mov	r1, r7
    e2f2:	4648      	mov	r0, r9
    e2f4:	f005 fcb9 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e2f8:	4681      	mov	r9, r0
    e2fa:	9908      	ldr	r1, [sp, #32]
    e2fc:	4620      	mov	r0, r4
    e2fe:	f005 fcc0 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    e302:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    e304:	4639      	mov	r1, r7
    e306:	f005 fcae 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e30a:	4601      	mov	r1, r0
    e30c:	4648      	mov	r0, r9
    e30e:	f005 fcae 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    e312:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    e314:	4629      	mov	r1, r5
    e316:	4620      	mov	r0, r4
    e318:	f005 fca7 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e31c:	4604      	mov	r4, r0
    e31e:	4649      	mov	r1, r9
    e320:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e322:	f005 fcb6 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    e326:	4639      	mov	r1, r7
    e328:	f005 fc9d 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e32c:	4601      	mov	r1, r0
    e32e:	4620      	mov	r0, r4
    e330:	f005 fc9d 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
  int32_t sym_scaled_diff = scaled_diff + 32767;
    e334:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
    e338:	307f      	adds	r0, #127	; 0x7f
    e33a:	9011      	str	r0, [sp, #68]	; 0x44
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    e33c:	4ba0      	ldr	r3, [pc, #640]	; (e5c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
    e33e:	933d      	str	r3, [sp, #244]	; 0xf4
      if (__a < __b)
    e340:	4298      	cmp	r0, r3
    e342:	db7a      	blt.n	e43a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3f6>
      return __a;
    e344:	ab11      	add	r3, sp, #68	; 0x44
               static_cast<int32_t>(32767));
    e346:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e34a:	923c      	str	r2, [sp, #240]	; 0xf0
      if (__b < __a)
    e34c:	681a      	ldr	r2, [r3, #0]
    e34e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    e352:	da74      	bge.n	e43e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fa>
    e354:	f9b3 3000 	ldrsh.w	r3, [r3]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    e358:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    e35c:	11da      	asrs	r2, r3, #7
    e35e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    e362:	b292      	uxth	r2, r2
  assert(index < 512 && "LUT index out of range.");
    e364:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    e368:	d26b      	bcs.n	e442 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fe>
  int16_t offset = value & 0x7f;
    e36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  int16_t base = lut[index];
    e36e:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
    e372:	3201      	adds	r2, #1
    e374:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
    e378:	1a52      	subs	r2, r2, r1
    e37a:	b212      	sxth	r2, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    e37c:	fb03 f302 	mul.w	r3, r3, r2
    e380:	3340      	adds	r3, #64	; 0x40
  return base + delta;
    e382:	f343 13cf 	sbfx	r3, r3, #7, #16
    e386:	440b      	add	r3, r1
    e388:	b21b      	sxth	r3, r3
      exp_results_Q015[c] =
    e38a:	9a03      	ldr	r2, [sp, #12]
    e38c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e38e:	5253      	strh	r3, [r2, r1]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    e390:	449a      	add	sl, r3
    for (int c = 0; c < depth; ++c) {
    e392:	3601      	adds	r6, #1
    e394:	455e      	cmp	r6, fp
    e396:	da5b      	bge.n	e450 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x40c>
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
    e398:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
      exp_results_Q015[c] =
    e39c:	0072      	lsls	r2, r6, #1
    e39e:	920c      	str	r2, [sp, #48]	; 0x30
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    e3a0:	9a04      	ldr	r2, [sp, #16]
    e3a2:	fb0b 6202 	mla	r2, fp, r2, r6
    e3a6:	9905      	ldr	r1, [sp, #20]
    e3a8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
    e3ac:	1ad2      	subs	r2, r2, r3
      input_diff, params.input_multiplier, params.input_left_shift);
    e3ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e3b2:	f8d8 500c 	ldr.w	r5, [r8, #12]
  int left_shift = shift > 0 ? shift : 0;
    e3b6:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    e3ba:	2d00      	cmp	r5, #0
    e3bc:	f77f af6d 	ble.w	e29a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x256>
    e3c0:	2500      	movs	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    e3c2:	408a      	lsls	r2, r1
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e3c4:	4293      	cmp	r3, r2
    e3c6:	f43f af6a 	beq.w	e29e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x25a>
    e3ca:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    e3cc:	4610      	mov	r0, r2
    e3ce:	17d1      	asrs	r1, r2, #31
    e3d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  std::int64_t b_64(b);
    e3d4:	17d9      	asrs	r1, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    e3d6:	fb02 f001 	mul.w	r0, r2, r1
    e3da:	9909      	ldr	r1, [sp, #36]	; 0x24
    e3dc:	fb03 0101 	mla	r1, r3, r1, r0
    e3e0:	fba2 2303 	umull	r2, r3, r2, r3
    e3e4:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e3e6:	2a00      	cmp	r2, #0
    e3e8:	f173 0100 	sbcs.w	r1, r3, #0
    e3ec:	f6ff af5e 	blt.w	e2ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x268>
    e3f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e3f4:	1852      	adds	r2, r2, r1
    e3f6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e3fa:	4611      	mov	r1, r2
    e3fc:	461c      	mov	r4, r3
    e3fe:	2a00      	cmp	r2, #0
    e400:	f173 0000 	sbcs.w	r0, r3, #0
    e404:	f6bf af54 	bge.w	e2b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
    e408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e40c:	1851      	adds	r1, r2, r1
    e40e:	f04f 0400 	mov.w	r4, #0
    e412:	eb43 0404 	adc.w	r4, r3, r4
    e416:	e74b      	b.n	e2b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e418:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    e41c:	e74e      	b.n	e2bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x278>
  assert(exponent >= 0);
    e41e:	4b69      	ldr	r3, [pc, #420]	; (e5c4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x580>)
    e420:	4a69      	ldr	r2, [pc, #420]	; (e5c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
    e422:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e426:	4869      	ldr	r0, [pc, #420]	; (e5cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
    e428:	f002 f9ca 	bl	107c0 <__assert_func>
  assert(exponent <= 31);
    e42c:	4b68      	ldr	r3, [pc, #416]	; (e5d0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x58c>)
    e42e:	4a66      	ldr	r2, [pc, #408]	; (e5c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
    e430:	f240 1167 	movw	r1, #359	; 0x167
    e434:	4865      	ldr	r0, [pc, #404]	; (e5cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
    e436:	f002 f9c3 	bl	107c0 <__assert_func>
	return __b;
    e43a:	ab3d      	add	r3, sp, #244	; 0xf4
    e43c:	e783      	b.n	e346 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x302>
	return __b;
    e43e:	ab3c      	add	r3, sp, #240	; 0xf0
    e440:	e788      	b.n	e354 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x310>
  assert(index < 512 && "LUT index out of range.");
    e442:	4b64      	ldr	r3, [pc, #400]	; (e5d4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
    e444:	4a64      	ldr	r2, [pc, #400]	; (e5d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
    e446:	f44f 71ac 	mov.w	r1, #344	; 0x158
    e44a:	4864      	ldr	r0, [pc, #400]	; (e5dc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
    e44c:	f002 f9b8 	bl	107c0 <__assert_func>
    e450:	f8dd 9010 	ldr.w	r9, [sp, #16]
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    e454:	4650      	mov	r0, sl
    e456:	f006 fa04 	bl	14862 <_ZN6tflite17CountLeadingZerosIjEEiT_>
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    e45a:	4652      	mov	r2, sl
    e45c:	17d3      	asrs	r3, r2, #31
    e45e:	b2c1      	uxtb	r1, r0
    e460:	1e4d      	subs	r5, r1, #1
    e462:	f1a1 0421 	sub.w	r4, r1, #33	; 0x21
    e466:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
    e46a:	fa03 f205 	lsl.w	r2, r3, r5
    e46e:	fa0a f404 	lsl.w	r4, sl, r4
    e472:	4322      	orrs	r2, r4
    e474:	fa2a f101 	lsr.w	r1, sl, r1
    e478:	430a      	orrs	r2, r1
    e47a:	fa0a f305 	lsl.w	r3, sl, r5
    e47e:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
    e482:	f142 0200 	adc.w	r2, r2, #0
         (1 << 13)) >>
    e486:	0b9b      	lsrs	r3, r3, #14
    e488:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    e48c:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
    e490:	9310      	str	r3, [sp, #64]	; 0x40
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    e492:	4a4b      	ldr	r2, [pc, #300]	; (e5c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
    e494:	9239      	str	r2, [sp, #228]	; 0xe4
      if (__a < __b)
    e496:	4293      	cmp	r3, r2
    e498:	db25      	blt.n	e4e6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a2>
      return __a;
    e49a:	ab10      	add	r3, sp, #64	; 0x40
                 static_cast<int32_t>(32767)));
    e49c:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e4a0:	9238      	str	r2, [sp, #224]	; 0xe0
      if (__b < __a)
    e4a2:	681a      	ldr	r2, [r3, #0]
    e4a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    e4a8:	da1f      	bge.n	e4ea <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a6>
    e4aa:	f9b3 2000 	ldrsh.w	r2, [r3]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
    e4ae:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    e4b2:	11d3      	asrs	r3, r2, #7
    e4b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    e4b8:	b29b      	uxth	r3, r3
  assert(index < 512 && "LUT index out of range.");
    e4ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e4be:	d216      	bcs.n	e4ee <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4aa>
  int16_t offset = value & 0x7f;
    e4c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  int16_t base = lut[index];
    e4c4:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
    e4c8:	3301      	adds	r3, #1
    e4ca:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
    e4ce:	1b1b      	subs	r3, r3, r4
    e4d0:	b21b      	sxth	r3, r3
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    e4d2:	fb02 f303 	mul.w	r3, r2, r3
    e4d6:	3340      	adds	r3, #64	; 0x40
  return base + delta;
    e4d8:	f343 13cf 	sbfx	r3, r3, #7, #16
    e4dc:	18e2      	adds	r2, r4, r3
    e4de:	b212      	sxth	r2, r2

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
    e4e0:	2100      	movs	r1, #0
    e4e2:	465f      	mov	r7, fp
    e4e4:	e01e      	b.n	e524 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4e0>
	return __b;
    e4e6:	ab39      	add	r3, sp, #228	; 0xe4
    e4e8:	e7d8      	b.n	e49c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x458>
	return __b;
    e4ea:	ab38      	add	r3, sp, #224	; 0xe0
    e4ec:	e7dd      	b.n	e4aa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x466>
  assert(index < 512 && "LUT index out of range.");
    e4ee:	4b39      	ldr	r3, [pc, #228]	; (e5d4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
    e4f0:	4a39      	ldr	r2, [pc, #228]	; (e5d8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
    e4f2:	f44f 71ac 	mov.w	r1, #344	; 0x158
    e4f6:	4839      	ldr	r0, [pc, #228]	; (e5dc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
    e4f8:	f002 f962 	bl	107c0 <__assert_func>
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e4fc:	9311      	str	r3, [sp, #68]	; 0x44
                            static_cast<int64_t>(reciprocal_scale_Q015) +
                        round) >>
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    e4fe:	2400      	movs	r4, #0
    e500:	9437      	str	r4, [sp, #220]	; 0xdc
      if (__a < __b)
    e502:	42a3      	cmp	r3, r4
    e504:	db37      	blt.n	e576 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x532>
      return __a;
    e506:	ab11      	add	r3, sp, #68	; 0x44
                   static_cast<int32_t>(32767)));
    e508:	f647 74ff 	movw	r4, #32767	; 0x7fff
    e50c:	9436      	str	r4, [sp, #216]	; 0xd8
      if (__b < __a)
    e50e:	681c      	ldr	r4, [r3, #0]
    e510:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    e514:	da31      	bge.n	e57a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x536>
          std::min(std::max(result, static_cast<int32_t>(0)),
    e516:	681c      	ldr	r4, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
    e518:	9b07      	ldr	r3, [sp, #28]
    e51a:	440b      	add	r3, r1
    e51c:	9d06      	ldr	r5, [sp, #24]
    e51e:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
    e522:	3101      	adds	r1, #1
    e524:	42b9      	cmp	r1, r7
    e526:	da2a      	bge.n	e57e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x53a>
      uint8_t right_shift = 31 - headroom_plus_one;
    e528:	f1c0 031f 	rsb	r3, r0, #31
    e52c:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
    e52e:	1e5c      	subs	r4, r3, #1
    e530:	2601      	movs	r6, #1
    e532:	40a6      	lsls	r6, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e534:	9c03      	ldr	r4, [sp, #12]
    e536:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
    e53a:	17e5      	asrs	r5, r4, #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e53c:	fa0f fa82 	sxth.w	sl, r2
    e540:	ea4f 7bea 	mov.w	fp, sl, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e544:	fb04 fc0b 	mul.w	ip, r4, fp
    e548:	fb02 cc05 	mla	ip, r2, r5, ip
    e54c:	fba4 450a 	umull	r4, r5, r4, sl
    e550:	4465      	add	r5, ip
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e552:	19a4      	adds	r4, r4, r6
    e554:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
                        round) >>
    e558:	f1c3 0c20 	rsb	ip, r3, #32
    e55c:	f1b3 0620 	subs.w	r6, r3, #32
    e560:	fa24 f303 	lsr.w	r3, r4, r3
    e564:	fa05 fc0c 	lsl.w	ip, r5, ip
    e568:	ea43 030c 	orr.w	r3, r3, ip
    e56c:	d4c6      	bmi.n	e4fc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
    e56e:	fa45 f606 	asr.w	r6, r5, r6
    e572:	4333      	orrs	r3, r6
    e574:	e7c2      	b.n	e4fc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
	return __b;
    e576:	ab37      	add	r3, sp, #220	; 0xdc
    e578:	e7c6      	b.n	e508 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4c4>
	return __b;
    e57a:	ab36      	add	r3, sp, #216	; 0xd8
    e57c:	e7cb      	b.n	e516 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4d2>
    e57e:	46bb      	mov	fp, r7
  for (int i = 0; i < outer_size; ++i) {
    e580:	f109 0901 	add.w	r9, r9, #1
    e584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e586:	4599      	cmp	r9, r3
    e588:	da06      	bge.n	e598 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x554>
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    e58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e58e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
    e592:	2300      	movs	r3, #0
    e594:	9805      	ldr	r0, [sp, #20]
    e596:	e665      	b.n	e264 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x220>
    if (size_ > kMaxSmallSize) {
    e598:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    e59a:	2b05      	cmp	r3, #5
    e59c:	dd03      	ble.n	e5a6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
      delete[] dims_pointer_;
    e59e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    e5a0:	b108      	cbz	r0, e5a6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
    e5a2:	f007 fcfa 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e5a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    e5a8:	2b05      	cmp	r3, #5
    e5aa:	dd03      	ble.n	e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e5ac:	982b      	ldr	r0, [sp, #172]	; 0xac
    e5ae:	b108      	cbz	r0, e5b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e5b0:	f007 fcf3 	bl	15f9a <_ZdaPv>
}
    e5b4:	b03f      	add	sp, #252	; 0xfc
    e5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5ba:	bf00      	nop
    e5bc:	c0000001 	.word	0xc0000001
    e5c0:	ffff8000 	.word	0xffff8000
    e5c4:	0006b05c 	.word	0x0006b05c
    e5c8:	0006b06c 	.word	0x0006b06c
    e5cc:	0006b0c4 	.word	0x0006b0c4
    e5d0:	0006b120 	.word	0x0006b120
    e5d4:	0006b750 	.word	0x0006b750
    e5d8:	0006b77c 	.word	0x0006b77c
    e5dc:	0006afa0 	.word	0x0006afa0

0000e5e0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5e4:	b0a1      	sub	sp, #132	; 0x84
  TFLITE_DCHECK(context != nullptr);
    e5e6:	2800      	cmp	r0, #0
    e5e8:	d030      	beq.n	e64c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
    e5ea:	460c      	mov	r4, r1
    e5ec:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
    e5ee:	2900      	cmp	r1, #0
    e5f0:	d02e      	beq.n	e650 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e5f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    e5f4:	680a      	ldr	r2, [r1, #0]
    e5f6:	6851      	ldr	r1, [r2, #4]
    e5f8:	4798      	blx	r3
    e5fa:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
    e5fc:	b356      	cbz	r6, e654 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
    e5fe:	b35c      	cbz	r4, e658 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e600:	6d73      	ldr	r3, [r6, #84]	; 0x54
    e602:	6862      	ldr	r2, [r4, #4]
    e604:	6851      	ldr	r1, [r2, #4]
    e606:	4630      	mov	r0, r6
    e608:	4798      	blx	r3
    e60a:	4681      	mov	r9, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    e60c:	6924      	ldr	r4, [r4, #16]
    e60e:	b32c      	cbz	r4, e65c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
    e610:	ad04      	add	r5, sp, #16
    e612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e61a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e61c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e61e:	e894 0003 	ldmia.w	r4, {r0, r1}
    e622:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
    e626:	7a38      	ldrb	r0, [r7, #8]
    e628:	2807      	cmp	r0, #7
    e62a:	f000 811a 	beq.w	e862 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
    e62e:	2809      	cmp	r0, #9
    e630:	f000 8117 	beq.w	e862 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
    e634:	2801      	cmp	r0, #1
    e636:	d013      	beq.n	e660 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e638:	6974      	ldr	r4, [r6, #20]
    e63a:	f7fa fcd7 	bl	8fec <TfLiteTypeGetName>
    e63e:	4602      	mov	r2, r0
    e640:	7a3b      	ldrb	r3, [r7, #8]
    e642:	498c      	ldr	r1, [pc, #560]	; (e874 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>)
    e644:	4630      	mov	r0, r6
    e646:	47a0      	blx	r4
      return kTfLiteError;
    e648:	2001      	movs	r0, #1
    e64a:	e110      	b.n	e86e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
  TFLITE_DCHECK(context != nullptr);
    e64c:	f007 fcba 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e650:	f007 fcb8 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
    e654:	f007 fcb6 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
    e658:	f007 fcb4 	bl	15fc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    e65c:	f007 fcb2 	bl	15fc4 <abort>
          op_data, tflite::micro::GetTensorShape(input),
    e660:	4639      	mov	r1, r7
    e662:	a812      	add	r0, sp, #72	; 0x48
    e664:	f006 f8d3 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e668:	4638      	mov	r0, r7
    e66a:	f005 fae7 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e66e:	4680      	mov	r8, r0
          tflite::micro::GetTensorShape(output),
    e670:	4649      	mov	r1, r9
    e672:	a818      	add	r0, sp, #96	; 0x60
    e674:	f006 f8cb 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e678:	4648      	mov	r0, r9
    e67a:	f005 fae5 	bl	13c48 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e67e:	4681      	mov	r9, r0
  inline int32_t DimensionsCount() const { return size_; }
    e680:	9812      	ldr	r0, [sp, #72]	; 0x48
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e682:	1e44      	subs	r4, r0, #1
  for (int i = 0; i < dims_count; ++i) {
    e684:	2300      	movs	r3, #0
    e686:	e013      	b.n	e6b0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    TFLITE_DCHECK_GE(i, 0);
    e688:	f007 fc9c 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e68c:	f007 fc9a 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e690:	aa20      	add	r2, sp, #128	; 0x80
    e692:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e696:	f852 2c34 	ldr.w	r2, [r2, #-52]
    e69a:	e017      	b.n	e6cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
    TFLITE_DCHECK_GE(i, 0);
    e69c:	f007 fc92 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e6a0:	f007 fc90 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e6a4:	9919      	ldr	r1, [sp, #100]	; 0x64
    e6a6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e6aa:	4291      	cmp	r1, r2
    e6ac:	d11b      	bne.n	e6e6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
  for (int i = 0; i < dims_count; ++i) {
    e6ae:	3301      	adds	r3, #1
    e6b0:	4298      	cmp	r0, r3
    e6b2:	dd1a      	ble.n	e6ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    if (i != skip_dim) {
    e6b4:	429c      	cmp	r4, r3
    e6b6:	d0fa      	beq.n	e6ae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK_GE(i, 0);
    e6b8:	2b00      	cmp	r3, #0
    e6ba:	dbe5      	blt.n	e688 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    e6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e6be:	4293      	cmp	r3, r2
    e6c0:	dae4      	bge.n	e68c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e6c2:	2a05      	cmp	r2, #5
    e6c4:	dde4      	ble.n	e690 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
    e6c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e6c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e6cc:	2b00      	cmp	r3, #0
    e6ce:	dbe5      	blt.n	e69c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    TFLITE_DCHECK_LT(i, size_);
    e6d0:	9918      	ldr	r1, [sp, #96]	; 0x60
    e6d2:	428b      	cmp	r3, r1
    e6d4:	dae4      	bge.n	e6a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e6d6:	2905      	cmp	r1, #5
    e6d8:	dce4      	bgt.n	e6a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
    e6da:	a920      	add	r1, sp, #128	; 0x80
    e6dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e6e0:	f851 1c1c 	ldr.w	r1, [r1, #-28]
    e6e4:	e7e1      	b.n	e6aa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e6e6:	f007 fc6d 	bl	15fc4 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    e6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e6ec:	2c00      	cmp	r4, #0
    e6ee:	db08      	blt.n	e702 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    e6f0:	429c      	cmp	r4, r3
    e6f2:	da06      	bge.n	e702 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e6f4:	2b05      	cmp	r3, #5
    e6f6:	dd06      	ble.n	e706 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x126>
    e6f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  for (int i = 0; i < dims_count; ++i) {
    e6fa:	2200      	movs	r2, #0
  int flat_size = 1;
    e6fc:	f04f 0a01 	mov.w	sl, #1
    e700:	e007      	b.n	e712 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e702:	f007 fc5f 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e706:	a813      	add	r0, sp, #76	; 0x4c
    e708:	e7f7      	b.n	e6fa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e70a:	2101      	movs	r1, #1
    e70c:	fb01 fa0a 	mul.w	sl, r1, sl
  for (int i = 0; i < dims_count; ++i) {
    e710:	3201      	adds	r2, #1
    e712:	4293      	cmp	r3, r2
    e714:	dd04      	ble.n	e720 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e716:	4294      	cmp	r4, r2
    e718:	d0f7      	beq.n	e70a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
    e71a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    e71e:	e7f5      	b.n	e70c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
    e720:	2c00      	cmp	r4, #0
    e722:	db25      	blt.n	e770 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x190>
    TFLITE_DCHECK_LT(i, size_);
    e724:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e726:	429c      	cmp	r4, r3
    e728:	da24      	bge.n	e774 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e72a:	2b05      	cmp	r3, #5
    e72c:	dd24      	ble.n	e778 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x198>
    e72e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e730:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e734:	2c00      	cmp	r4, #0
    e736:	db25      	blt.n	e784 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    TFLITE_DCHECK_LT(i, size_);
    e738:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e73a:	429c      	cmp	r4, r3
    e73c:	da24      	bge.n	e788 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e73e:	2b05      	cmp	r3, #5
    e740:	dd24      	ble.n	e78c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
    e742:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e744:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e748:	4293      	cmp	r3, r2
    e74a:	d125      	bne.n	e798 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e74c:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_GE(i, 0);
    e74e:	2c00      	cmp	r4, #0
    e750:	db24      	blt.n	e79c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    TFLITE_DCHECK_LT(i, size_);
    e752:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e754:	429c      	cmp	r4, r3
    e756:	da23      	bge.n	e7a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e758:	2b05      	cmp	r3, #5
    e75a:	dd23      	ble.n	e7a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c4>
    e75c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e75e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e762:	931e      	str	r3, [sp, #120]	; 0x78
      if (__b < __a)
    e764:	429a      	cmp	r2, r3
    e766:	dc23      	bgt.n	e7b0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      return __a;
    e768:	ab1f      	add	r3, sp, #124	; 0x7c
    e76a:	681d      	ldr	r5, [r3, #0]
  for (int i = 0; i < outer_size; ++i) {
    e76c:	2400      	movs	r4, #0
    e76e:	e061      	b.n	e834 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
    TFLITE_DCHECK_GE(i, 0);
    e770:	f007 fc28 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e774:	f007 fc26 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e778:	ab20      	add	r3, sp, #128	; 0x80
    e77a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e77e:	f853 2c34 	ldr.w	r2, [r3, #-52]
    e782:	e7d7      	b.n	e734 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
    TFLITE_DCHECK_GE(i, 0);
    e784:	f007 fc1e 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e788:	f007 fc1c 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e78c:	ab20      	add	r3, sp, #128	; 0x80
    e78e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e792:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    e796:	e7d7      	b.n	e748 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x168>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e798:	f007 fc14 	bl	15fc4 <abort>
    TFLITE_DCHECK_GE(i, 0);
    e79c:	f007 fc12 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e7a0:	f007 fc10 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e7a4:	ab20      	add	r3, sp, #128	; 0x80
    e7a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e7aa:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    e7ae:	e7d8      	b.n	e762 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
	return __b;
    e7b0:	ab1e      	add	r3, sp, #120	; 0x78
    e7b2:	e7da      	b.n	e76a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      max = std::max(max, input_data[i * depth + c]);
    e7b4:	683b      	ldr	r3, [r7, #0]
    e7b6:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    e7b8:	3601      	adds	r6, #1
    e7ba:	42ae      	cmp	r6, r5
    e7bc:	da0c      	bge.n	e7d8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      max = std::max(max, input_data[i * depth + c]);
    e7be:	fb05 6304 	mla	r3, r5, r4, r6
    e7c2:	eb08 0783 	add.w	r7, r8, r3, lsl #2
      if (__a < __b)
    e7c6:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    e7ca:	9803      	ldr	r0, [sp, #12]
    e7cc:	f7f2 fc62 	bl	1094 <__aeabi_fcmplt>
    e7d0:	2800      	cmp	r0, #0
    e7d2:	d1ef      	bne.n	e7b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
      return __a;
    e7d4:	af03      	add	r7, sp, #12
    e7d6:	e7ed      	b.n	e7b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    for (int c = 0; c < depth; ++c) {
    e7d8:	2700      	movs	r7, #0
    float sum = 0.f;
    e7da:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
    e7dc:	42af      	cmp	r7, r5
    e7de:	da1a      	bge.n	e816 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x236>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    e7e0:	fb05 7b04 	mla	fp, r5, r4, r7
    e7e4:	9903      	ldr	r1, [sp, #12]
    e7e6:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
    e7ea:	f7f2 f9ab 	bl	b44 <__aeabi_fsub>
    e7ee:	9001      	str	r0, [sp, #4]
                                   static_cast<float>(params.beta));
    e7f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e7f4:	f7f2 f952 	bl	a9c <__aeabi_d2f>
    e7f8:	4601      	mov	r1, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    e7fa:	9801      	ldr	r0, [sp, #4]
    e7fc:	f7f2 faac 	bl	d58 <__aeabi_fmul>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    e800:	f001 fe44 	bl	1048c <expf>
    e804:	4601      	mov	r1, r0
      output_data[i * depth + c] = exp_c;
    e806:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
      sum += exp_c;
    e80a:	4630      	mov	r0, r6
    e80c:	f7f2 f99c 	bl	b48 <__addsf3>
    e810:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
    e812:	3701      	adds	r7, #1
    e814:	e7e2      	b.n	e7dc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    for (int c = 0; c < depth; ++c) {
    e816:	2700      	movs	r7, #0
    e818:	42af      	cmp	r7, r5
    e81a:	da0a      	bge.n	e832 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    e81c:	fb05 7b04 	mla	fp, r5, r4, r7
    e820:	4631      	mov	r1, r6
    e822:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
    e826:	f7f2 fb4b 	bl	ec0 <__aeabi_fdiv>
    e82a:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
    for (int c = 0; c < depth; ++c) {
    e82e:	3701      	adds	r7, #1
    e830:	e7f2      	b.n	e818 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  for (int i = 0; i < outer_size; ++i) {
    e832:	3401      	adds	r4, #1
    e834:	4554      	cmp	r4, sl
    e836:	da04      	bge.n	e842 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    float max = std::numeric_limits<float>::lowest();
    e838:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    e83c:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    e83e:	2600      	movs	r6, #0
    e840:	e7bb      	b.n	e7ba <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1da>
    if (size_ > kMaxSmallSize) {
    e842:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e844:	2b05      	cmp	r3, #5
    e846:	dd03      	ble.n	e850 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
      delete[] dims_pointer_;
    e848:	9819      	ldr	r0, [sp, #100]	; 0x64
    e84a:	b108      	cbz	r0, e850 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
    e84c:	f007 fba5 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e850:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e852:	2b05      	cmp	r3, #5
    e854:	dd03      	ble.n	e85e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
      delete[] dims_pointer_;
    e856:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e858:	b108      	cbz	r0, e85e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
    e85a:	f007 fb9e 	bl	15f9a <_ZdaPv>
      return kTfLiteOk;
    e85e:	2000      	movs	r0, #0
    e860:	e005      	b.n	e86e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
      SoftmaxQuantized(input, output, op_data);
    e862:	aa04      	add	r2, sp, #16
    e864:	4649      	mov	r1, r9
    e866:	4638      	mov	r0, r7
    e868:	f7ff fbec 	bl	e044 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
    e86c:	2000      	movs	r0, #0
}
    e86e:	b021      	add	sp, #132	; 0x84
    e870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e874:	0006b214 	.word	0x0006b214

0000e878 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e87c:	b097      	sub	sp, #92	; 0x5c
    e87e:	4604      	mov	r4, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    e880:	680b      	ldr	r3, [r1, #0]
    e882:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    e884:	2b01      	cmp	r3, #1
    e886:	d00f      	beq.n	e8a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
    e888:	6946      	ldr	r6, [r0, #20]
    e88a:	2501      	movs	r5, #1
    e88c:	9503      	str	r5, [sp, #12]
    e88e:	9302      	str	r3, [sp, #8]
    e890:	4ba9      	ldr	r3, [pc, #676]	; (eb38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    e892:	9301      	str	r3, [sp, #4]
    e894:	4ba9      	ldr	r3, [pc, #676]	; (eb3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    e896:	9300      	str	r3, [sp, #0]
    e898:	235d      	movs	r3, #93	; 0x5d
    e89a:	4aa9      	ldr	r2, [pc, #676]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e89c:	49a9      	ldr	r1, [pc, #676]	; (eb44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    e89e:	47b0      	blx	r6
    e8a0:	4628      	mov	r0, r5
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    e8a2:	b017      	add	sp, #92	; 0x5c
    e8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8a8:	460d      	mov	r5, r1
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    e8aa:	684b      	ldr	r3, [r1, #4]
    e8ac:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    e8ae:	2b01      	cmp	r3, #1
    e8b0:	d00d      	beq.n	e8ce <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
    e8b2:	6946      	ldr	r6, [r0, #20]
    e8b4:	2501      	movs	r5, #1
    e8b6:	9503      	str	r5, [sp, #12]
    e8b8:	9302      	str	r3, [sp, #8]
    e8ba:	4b9f      	ldr	r3, [pc, #636]	; (eb38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    e8bc:	9301      	str	r3, [sp, #4]
    e8be:	4ba2      	ldr	r3, [pc, #648]	; (eb48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
    e8c0:	9300      	str	r3, [sp, #0]
    e8c2:	235e      	movs	r3, #94	; 0x5e
    e8c4:	4a9e      	ldr	r2, [pc, #632]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e8c6:	499f      	ldr	r1, [pc, #636]	; (eb44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    e8c8:	47b0      	blx	r6
    e8ca:	4628      	mov	r0, r5
    e8cc:	e7e9      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  const TfLiteTensor* input = GetInput(context, node, 0);
    e8ce:	2200      	movs	r2, #0
    e8d0:	f005 f8f5 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e8d4:	4606      	mov	r6, r0
    e8d6:	b340      	cbz	r0, e92a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    e8d8:	6883      	ldr	r3, [r0, #8]
    e8da:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    e8dc:	2b00      	cmp	r3, #0
    e8de:	dd2e      	ble.n	e93e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TfLiteTensor* output = GetOutput(context, node, 0);
    e8e0:	2200      	movs	r2, #0
    e8e2:	4629      	mov	r1, r5
    e8e4:	4620      	mov	r0, r4
    e8e6:	f005 f909 	bl	13afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e8ea:	9005      	str	r0, [sp, #20]
    e8ec:	2800      	cmp	r0, #0
    e8ee:	d030      	beq.n	e952 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    e8f0:	f8d5 9010 	ldr.w	r9, [r5, #16]
    e8f4:	f1b9 0f00 	cmp.w	r9, #0
    e8f8:	d035      	beq.n	e966 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xee>
  if (input->type == kTfLiteInt16) {
    e8fa:	7833      	ldrb	r3, [r6, #0]
    e8fc:	2b07      	cmp	r3, #7
    e8fe:	d03c      	beq.n	e97a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
  if (output->type == kTfLiteInt16) {
    e900:	9b05      	ldr	r3, [sp, #20]
    e902:	781b      	ldrb	r3, [r3, #0]
    e904:	2b07      	cmp	r3, #7
    e906:	d05d      	beq.n	e9c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    e908:	7832      	ldrb	r2, [r6, #0]
    e90a:	4293      	cmp	r3, r2
    e90c:	d069      	beq.n	e9e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    e90e:	6965      	ldr	r5, [r4, #20]
    e910:	9303      	str	r3, [sp, #12]
    e912:	9202      	str	r2, [sp, #8]
    e914:	4b8d      	ldr	r3, [pc, #564]	; (eb4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    e916:	9301      	str	r3, [sp, #4]
    e918:	4b8d      	ldr	r3, [pc, #564]	; (eb50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    e91a:	9300      	str	r3, [sp, #0]
    e91c:	2378      	movs	r3, #120	; 0x78
    e91e:	4a88      	ldr	r2, [pc, #544]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e920:	4988      	ldr	r1, [pc, #544]	; (eb44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    e922:	4620      	mov	r0, r4
    e924:	47a8      	blx	r5
    e926:	2001      	movs	r0, #1
    e928:	e7bb      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, input != nullptr);
    e92a:	6965      	ldr	r5, [r4, #20]
    e92c:	4b89      	ldr	r3, [pc, #548]	; (eb54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
    e92e:	9300      	str	r3, [sp, #0]
    e930:	2360      	movs	r3, #96	; 0x60
    e932:	4a83      	ldr	r2, [pc, #524]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e934:	4988      	ldr	r1, [pc, #544]	; (eb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    e936:	4620      	mov	r0, r4
    e938:	47a8      	blx	r5
    e93a:	2001      	movs	r0, #1
    e93c:	e7b1      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    e93e:	6965      	ldr	r5, [r4, #20]
    e940:	4b86      	ldr	r3, [pc, #536]	; (eb5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    e942:	9300      	str	r3, [sp, #0]
    e944:	2361      	movs	r3, #97	; 0x61
    e946:	4a7e      	ldr	r2, [pc, #504]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e948:	4983      	ldr	r1, [pc, #524]	; (eb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    e94a:	4620      	mov	r0, r4
    e94c:	47a8      	blx	r5
    e94e:	2001      	movs	r0, #1
    e950:	e7a7      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, output != nullptr);
    e952:	6965      	ldr	r5, [r4, #20]
    e954:	4b82      	ldr	r3, [pc, #520]	; (eb60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    e956:	9300      	str	r3, [sp, #0]
    e958:	2363      	movs	r3, #99	; 0x63
    e95a:	4a79      	ldr	r2, [pc, #484]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e95c:	497e      	ldr	r1, [pc, #504]	; (eb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    e95e:	4620      	mov	r0, r4
    e960:	47a8      	blx	r5
    e962:	2001      	movs	r0, #1
    e964:	e79d      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    e966:	6965      	ldr	r5, [r4, #20]
    e968:	4b7e      	ldr	r3, [pc, #504]	; (eb64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    e96a:	9300      	str	r3, [sp, #0]
    e96c:	2365      	movs	r3, #101	; 0x65
    e96e:	4a74      	ldr	r2, [pc, #464]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e970:	4979      	ldr	r1, [pc, #484]	; (eb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    e972:	4620      	mov	r0, r4
    e974:	47a8      	blx	r5
    e976:	2001      	movs	r0, #1
    e978:	e793      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    e97a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e97c:	f240 4102 	movw	r1, #1026	; 0x402
    e980:	4620      	mov	r0, r4
    e982:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    e984:	b150      	cbz	r0, e99c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x124>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    e986:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    e98a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e98c:	f240 4102 	movw	r1, #1026	; 0x402
    e990:	4620      	mov	r0, r4
    e992:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    e994:	b160      	cbz	r0, e9b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    op_data->one_over_one_plus_x_lut =
    e996:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
    e99a:	e7b1      	b.n	e900 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    e99c:	6965      	ldr	r5, [r4, #20]
    e99e:	4b72      	ldr	r3, [pc, #456]	; (eb68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    e9a0:	9300      	str	r3, [sp, #0]
    e9a2:	236b      	movs	r3, #107	; 0x6b
    e9a4:	4a66      	ldr	r2, [pc, #408]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e9a6:	496c      	ldr	r1, [pc, #432]	; (eb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    e9a8:	4620      	mov	r0, r4
    e9aa:	47a8      	blx	r5
    e9ac:	2001      	movs	r0, #1
    e9ae:	e778      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    e9b0:	6965      	ldr	r5, [r4, #20]
    e9b2:	4b6e      	ldr	r3, [pc, #440]	; (eb6c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    e9b4:	9300      	str	r3, [sp, #0]
    e9b6:	236f      	movs	r3, #111	; 0x6f
    e9b8:	4a61      	ldr	r2, [pc, #388]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e9ba:	4967      	ldr	r1, [pc, #412]	; (eb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    e9bc:	4620      	mov	r0, r4
    e9be:	47a8      	blx	r5
    e9c0:	2001      	movs	r0, #1
    e9c2:	e76e      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context,
    e9c4:	7833      	ldrb	r3, [r6, #0]
    e9c6:	2b09      	cmp	r3, #9
    e9c8:	d00b      	beq.n	e9e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    e9ca:	2b07      	cmp	r3, #7
    e9cc:	d009      	beq.n	e9e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    e9ce:	6965      	ldr	r5, [r4, #20]
    e9d0:	4b67      	ldr	r3, [pc, #412]	; (eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
    e9d2:	9300      	str	r3, [sp, #0]
    e9d4:	2375      	movs	r3, #117	; 0x75
    e9d6:	4a5a      	ldr	r2, [pc, #360]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    e9d8:	495f      	ldr	r1, [pc, #380]	; (eb58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    e9da:	4620      	mov	r0, r4
    e9dc:	47a8      	blx	r5
    e9de:	2001      	movs	r0, #1
    e9e0:	e75f      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  if (input->type == kTfLiteInt16) {
    e9e2:	7833      	ldrb	r3, [r6, #0]
    e9e4:	2b07      	cmp	r3, #7
    e9e6:	f040 81b7 	bne.w	ed58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    e9ea:	9b05      	ldr	r3, [sp, #20]
    e9ec:	f8d3 b010 	ldr.w	fp, [r3, #16]
    e9f0:	f1bb 0f00 	cmp.w	fp, #0
    e9f4:	d00f      	beq.n	ea16 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
    e9f6:	6965      	ldr	r5, [r4, #20]
    e9f8:	2300      	movs	r3, #0
    e9fa:	9303      	str	r3, [sp, #12]
    e9fc:	f8cd b008 	str.w	fp, [sp, #8]
    ea00:	4b5c      	ldr	r3, [pc, #368]	; (eb74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
    ea02:	9301      	str	r3, [sp, #4]
    ea04:	4b5c      	ldr	r3, [pc, #368]	; (eb78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    ea06:	9300      	str	r3, [sp, #0]
    ea08:	237d      	movs	r3, #125	; 0x7d
    ea0a:	4a4d      	ldr	r2, [pc, #308]	; (eb40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ea0c:	494d      	ldr	r1, [pc, #308]	; (eb44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    ea0e:	4620      	mov	r0, r4
    ea10:	47a8      	blx	r5
    ea12:	2001      	movs	r0, #1
    ea14:	e745      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    ea16:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    ea1a:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < num - 1; i++) {
    ea1c:	465f      	mov	r7, fp
    ea1e:	f8cd 901c 	str.w	r9, [sp, #28]
    ea22:	f8cd b020 	str.w	fp, [sp, #32]
    ea26:	469b      	mov	fp, r3
    ea28:	9609      	str	r6, [sp, #36]	; 0x24
    ea2a:	e007      	b.n	ea3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
	return __b;
    ea2c:	ae14      	add	r6, sp, #80	; 0x50
    ea2e:	e079      	b.n	eb24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    ea30:	6830      	ldr	r0, [r6, #0]
    ea32:	f7f2 fb57 	bl	10e4 <__aeabi_f2iz>
    ea36:	f82b 0017 	strh.w	r0, [fp, r7, lsl #1]
  for (int i = 0; i < num - 1; i++) {
    ea3a:	4657      	mov	r7, sl
    ea3c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    ea40:	f280 80a4 	bge.w	eb8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x314>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    ea44:	4638      	mov	r0, r7
    ea46:	f7f2 f933 	bl	cb0 <__aeabi_i2f>
    ea4a:	494c      	ldr	r1, [pc, #304]	; (eb7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ea4c:	f7f2 f984 	bl	d58 <__aeabi_fmul>
    ea50:	494b      	ldr	r1, [pc, #300]	; (eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    ea52:	f7f2 f877 	bl	b44 <__aeabi_fsub>
    ea56:	4606      	mov	r6, r0
    ea58:	f007 f82e 	bl	15ab8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ea5c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ea60:	f7f2 f97a 	bl	d58 <__aeabi_fmul>
    ea64:	f7f1 fd00 	bl	468 <__aeabi_f2d>
    ea68:	f001 fcc6 	bl	103f8 <round>
    ea6c:	f7f2 f816 	bl	a9c <__aeabi_d2f>
    ea70:	4680      	mov	r8, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ea72:	f107 0a01 	add.w	sl, r7, #1
    ea76:	4650      	mov	r0, sl
    ea78:	f7f2 f91a 	bl	cb0 <__aeabi_i2f>
    ea7c:	493f      	ldr	r1, [pc, #252]	; (eb7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ea7e:	f7f2 f96b 	bl	d58 <__aeabi_fmul>
    ea82:	493f      	ldr	r1, [pc, #252]	; (eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    ea84:	f7f2 f85e 	bl	b44 <__aeabi_fsub>
    ea88:	f007 f816 	bl	15ab8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ea8c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ea90:	f7f2 f962 	bl	d58 <__aeabi_fmul>
    ea94:	4681      	mov	r9, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    ea96:	4630      	mov	r0, r6
    ea98:	f007 f80e 	bl	15ab8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ea9c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    eaa0:	f7f2 f95a 	bl	d58 <__aeabi_fmul>
    eaa4:	f7f1 fce0 	bl	468 <__aeabi_f2d>
    eaa8:	f001 fca6 	bl	103f8 <round>
    eaac:	f7f1 fff6 	bl	a9c <__aeabi_d2f>
    eab0:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    eab2:	4648      	mov	r0, r9
    eab4:	f7f2 f848 	bl	b48 <__addsf3>
    eab8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    eabc:	f7f2 f94c 	bl	d58 <__aeabi_fmul>
    eac0:	f7f1 fcd2 	bl	468 <__aeabi_f2d>
    eac4:	f001 fc98 	bl	103f8 <round>
    eac8:	f7f1 ffe8 	bl	a9c <__aeabi_d2f>
    eacc:	4681      	mov	r9, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    eace:	492d      	ldr	r1, [pc, #180]	; (eb84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    ead0:	4630      	mov	r0, r6
    ead2:	f7f2 f839 	bl	b48 <__addsf3>
    ead6:	f006 ffef 	bl	15ab8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    eada:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    eade:	f7f2 f93b 	bl	d58 <__aeabi_fmul>
    eae2:	f7f1 fcc1 	bl	468 <__aeabi_f2d>
    eae6:	f001 fc87 	bl	103f8 <round>
    eaea:	f7f1 ffd7 	bl	a9c <__aeabi_d2f>
    eaee:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    eaf0:	4648      	mov	r0, r9
    eaf2:	f7f2 f827 	bl	b44 <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    eaf6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    eafa:	f7f2 f92d 	bl	d58 <__aeabi_fmul>
    eafe:	f7f1 fcb3 	bl	468 <__aeabi_f2d>
    eb02:	f001 fc79 	bl	103f8 <round>
    eb06:	f7f1 ffc9 	bl	a9c <__aeabi_d2f>
    eb0a:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    eb0c:	4640      	mov	r0, r8
    eb0e:	f7f2 f819 	bl	b44 <__aeabi_fsub>
    eb12:	9015      	str	r0, [sp, #84]	; 0x54
    eb14:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    eb18:	9114      	str	r1, [sp, #80]	; 0x50
      if (__a < __b)
    eb1a:	f7f2 fabb 	bl	1094 <__aeabi_fcmplt>
    eb1e:	2800      	cmp	r0, #0
    eb20:	d184      	bne.n	ea2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
      return __a;
    eb22:	ae15      	add	r6, sp, #84	; 0x54
                               32767.0f);
    eb24:	4918      	ldr	r1, [pc, #96]	; (eb88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    eb26:	9113      	str	r1, [sp, #76]	; 0x4c
      if (__b < __a)
    eb28:	6830      	ldr	r0, [r6, #0]
    eb2a:	f7f2 fad1 	bl	10d0 <__aeabi_fcmpgt>
    eb2e:	2800      	cmp	r0, #0
    eb30:	f43f af7e 	beq.w	ea30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
	return __b;
    eb34:	ae13      	add	r6, sp, #76	; 0x4c
    eb36:	e77b      	b.n	ea30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
    eb38:	0006b8f0 	.word	0x0006b8f0
    eb3c:	0006b8c8 	.word	0x0006b8c8
    eb40:	0006b7c0 	.word	0x0006b7c0
    eb44:	0006ab68 	.word	0x0006ab68
    eb48:	0006b710 	.word	0x0006b710
    eb4c:	0006b17c 	.word	0x0006b17c
    eb50:	0006b18c 	.word	0x0006b18c
    eb54:	0006b2bc 	.word	0x0006b2bc
    eb58:	0006a8a8 	.word	0x0006a8a8
    eb5c:	0006b8d8 	.word	0x0006b8d8
    eb60:	0006b2e4 	.word	0x0006b2e4
    eb64:	0006b8f4 	.word	0x0006b8f4
    eb68:	0006b910 	.word	0x0006b910
    eb6c:	0006b928 	.word	0x0006b928
    eb70:	0006ac08 	.word	0x0006ac08
    eb74:	0006af54 	.word	0x0006af54
    eb78:	0006b818 	.word	0x0006b818
    eb7c:	3ca00000 	.word	0x3ca00000
    eb80:	41200000 	.word	0x41200000
    eb84:	3c200000 	.word	0x3c200000
    eb88:	46fffe00 	.word	0x46fffe00
    eb8c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    eb90:	f8dd b020 	ldr.w	fp, [sp, #32]
    eb94:	9e09      	ldr	r6, [sp, #36]	; 0x24
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    eb96:	2000      	movs	r0, #0
    eb98:	f006 ff8e 	bl	15ab8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    eb9c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    eba0:	f7f2 f8da 	bl	d58 <__aeabi_fmul>
    eba4:	f7f1 fc60 	bl	468 <__aeabi_f2d>
    eba8:	f001 fc26 	bl	103f8 <round>
    ebac:	f7f1 ff76 	bl	a9c <__aeabi_d2f>
    ebb0:	9012      	str	r0, [sp, #72]	; 0x48
    ebb2:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    ebb6:	9111      	str	r1, [sp, #68]	; 0x44
      if (__a < __b)
    ebb8:	f7f2 fa6c 	bl	1094 <__aeabi_fcmplt>
    ebbc:	b9a0      	cbnz	r0, ebe8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x370>
      return __a;
    ebbe:	af12      	add	r7, sp, #72	; 0x48
    ebc0:	496c      	ldr	r1, [pc, #432]	; (ed74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    ebc2:	9110      	str	r1, [sp, #64]	; 0x40
      if (__b < __a)
    ebc4:	6838      	ldr	r0, [r7, #0]
    ebc6:	f7f2 fa83 	bl	10d0 <__aeabi_fcmpgt>
    ebca:	b978      	cbnz	r0, ebec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x374>
  table[num - 1] = std::min<float>(
    ebcc:	6838      	ldr	r0, [r7, #0]
    ebce:	f7f2 fa89 	bl	10e4 <__aeabi_f2iz>
    ebd2:	9b06      	ldr	r3, [sp, #24]
    ebd4:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    ebd8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
    ebdc:	9306      	str	r3, [sp, #24]
    ebde:	f8cd 901c 	str.w	r9, [sp, #28]
    ebe2:	469a      	mov	sl, r3
    ebe4:	9608      	str	r6, [sp, #32]
    ebe6:	e00b      	b.n	ec00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
	return __b;
    ebe8:	af11      	add	r7, sp, #68	; 0x44
    ebea:	e7e9      	b.n	ebc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x348>
	return __b;
    ebec:	af10      	add	r7, sp, #64	; 0x40
    ebee:	e7ed      	b.n	ebcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x354>
	return __b;
    ebf0:	ae0e      	add	r6, sp, #56	; 0x38
    ebf2:	e07b      	b.n	ecec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x474>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    ebf4:	6830      	ldr	r0, [r6, #0]
    ebf6:	f7f2 fa75 	bl	10e4 <__aeabi_f2iz>
    ebfa:	f82a 001b 	strh.w	r0, [sl, fp, lsl #1]
  for (int i = 0; i < num - 1; i++) {
    ebfe:	46cb      	mov	fp, r9
    ec00:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    ec04:	da7c      	bge.n	ed00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x488>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    ec06:	4658      	mov	r0, fp
    ec08:	f7f2 f852 	bl	cb0 <__aeabi_i2f>
    ec0c:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
    ec10:	f7f2 f8a2 	bl	d58 <__aeabi_fmul>
    ec14:	2100      	movs	r1, #0
    ec16:	f7f1 ff97 	bl	b48 <__addsf3>
    ec1a:	4606      	mov	r6, r0
    ec1c:	f006 ff41 	bl	15aa2 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ec20:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ec24:	f7f2 f898 	bl	d58 <__aeabi_fmul>
    ec28:	f7f1 fc1e 	bl	468 <__aeabi_f2d>
    ec2c:	f001 fbe4 	bl	103f8 <round>
    ec30:	f7f1 ff34 	bl	a9c <__aeabi_d2f>
    ec34:	4607      	mov	r7, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ec36:	f10b 0901 	add.w	r9, fp, #1
    ec3a:	4648      	mov	r0, r9
    ec3c:	f7f2 f838 	bl	cb0 <__aeabi_i2f>
    ec40:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
    ec44:	f7f2 f888 	bl	d58 <__aeabi_fmul>
    ec48:	2100      	movs	r1, #0
    ec4a:	f7f1 ff7d 	bl	b48 <__addsf3>
    ec4e:	f006 ff28 	bl	15aa2 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ec52:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ec56:	f7f2 f87f 	bl	d58 <__aeabi_fmul>
    ec5a:	4680      	mov	r8, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    ec5c:	4630      	mov	r0, r6
    ec5e:	f006 ff20 	bl	15aa2 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ec62:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ec66:	f7f2 f877 	bl	d58 <__aeabi_fmul>
    ec6a:	f7f1 fbfd 	bl	468 <__aeabi_f2d>
    ec6e:	f001 fbc3 	bl	103f8 <round>
    ec72:	f7f1 ff13 	bl	a9c <__aeabi_d2f>
    ec76:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ec78:	4640      	mov	r0, r8
    ec7a:	f7f1 ff65 	bl	b48 <__addsf3>
    ec7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    ec82:	f7f2 f869 	bl	d58 <__aeabi_fmul>
    ec86:	f7f1 fbef 	bl	468 <__aeabi_f2d>
    ec8a:	f001 fbb5 	bl	103f8 <round>
    ec8e:	f7f1 ff05 	bl	a9c <__aeabi_d2f>
    ec92:	4680      	mov	r8, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    ec94:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
    ec98:	4630      	mov	r0, r6
    ec9a:	f7f1 ff55 	bl	b48 <__addsf3>
    ec9e:	f006 ff00 	bl	15aa2 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    eca2:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    eca6:	f7f2 f857 	bl	d58 <__aeabi_fmul>
    ecaa:	f7f1 fbdd 	bl	468 <__aeabi_f2d>
    ecae:	f001 fba3 	bl	103f8 <round>
    ecb2:	f7f1 fef3 	bl	a9c <__aeabi_d2f>
    ecb6:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    ecb8:	4640      	mov	r0, r8
    ecba:	f7f1 ff43 	bl	b44 <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    ecbe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    ecc2:	f7f2 f849 	bl	d58 <__aeabi_fmul>
    ecc6:	f7f1 fbcf 	bl	468 <__aeabi_f2d>
    ecca:	f001 fb95 	bl	103f8 <round>
    ecce:	f7f1 fee5 	bl	a9c <__aeabi_d2f>
    ecd2:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    ecd4:	4638      	mov	r0, r7
    ecd6:	f7f1 ff35 	bl	b44 <__aeabi_fsub>
    ecda:	900f      	str	r0, [sp, #60]	; 0x3c
    ecdc:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    ece0:	910e      	str	r1, [sp, #56]	; 0x38
      if (__a < __b)
    ece2:	f7f2 f9d7 	bl	1094 <__aeabi_fcmplt>
    ece6:	2800      	cmp	r0, #0
    ece8:	d182      	bne.n	ebf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x378>
      return __a;
    ecea:	ae0f      	add	r6, sp, #60	; 0x3c
                               32767.0f);
    ecec:	4921      	ldr	r1, [pc, #132]	; (ed74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    ecee:	910d      	str	r1, [sp, #52]	; 0x34
      if (__b < __a)
    ecf0:	6830      	ldr	r0, [r6, #0]
    ecf2:	f7f2 f9ed 	bl	10d0 <__aeabi_fcmpgt>
    ecf6:	2800      	cmp	r0, #0
    ecf8:	f43f af7c 	beq.w	ebf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
	return __b;
    ecfc:	ae0d      	add	r6, sp, #52	; 0x34
    ecfe:	e779      	b.n	ebf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
    ed00:	f8dd 901c 	ldr.w	r9, [sp, #28]
    ed04:	9e08      	ldr	r6, [sp, #32]
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    ed06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    ed0a:	f006 feca 	bl	15aa2 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ed0e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ed12:	f7f2 f821 	bl	d58 <__aeabi_fmul>
    ed16:	f7f1 fba7 	bl	468 <__aeabi_f2d>
    ed1a:	f001 fb6d 	bl	103f8 <round>
    ed1e:	f7f1 febd 	bl	a9c <__aeabi_d2f>
    ed22:	900c      	str	r0, [sp, #48]	; 0x30
    ed24:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    ed28:	910b      	str	r1, [sp, #44]	; 0x2c
      if (__a < __b)
    ed2a:	f7f2 f9b3 	bl	1094 <__aeabi_fcmplt>
    ed2e:	b9e0      	cbnz	r0, ed6a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f2>
      return __a;
    ed30:	af0c      	add	r7, sp, #48	; 0x30
    ed32:	4910      	ldr	r1, [pc, #64]	; (ed74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    ed34:	910a      	str	r1, [sp, #40]	; 0x28
      if (__b < __a)
    ed36:	6838      	ldr	r0, [r7, #0]
    ed38:	f7f2 f9ca 	bl	10d0 <__aeabi_fcmpgt>
    ed3c:	b9b8      	cbnz	r0, ed6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f6>
  table[num - 1] = std::min<float>(
    ed3e:	6838      	ldr	r0, [r7, #0]
    ed40:	f7f2 f9d0 	bl	10e4 <__aeabi_f2iz>
    ed44:	9b06      	ldr	r3, [sp, #24]
    ed46:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    op_data->zero_point = output->params.zero_point;
    ed4a:	9a05      	ldr	r2, [sp, #20]
    ed4c:	6913      	ldr	r3, [r2, #16]
    ed4e:	f8c9 301c 	str.w	r3, [r9, #28]
    op_data->scale = output->params.scale;
    ed52:	68d3      	ldr	r3, [r2, #12]
    ed54:	f8c9 3020 	str.w	r3, [r9, #32]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
    ed58:	f8cd 9000 	str.w	r9, [sp]
    ed5c:	696b      	ldr	r3, [r5, #20]
    ed5e:	9a05      	ldr	r2, [sp, #20]
    ed60:	4631      	mov	r1, r6
    ed62:	4620      	mov	r0, r4
    ed64:	f7f2 fc64 	bl	1630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
    ed68:	e59b      	b.n	e8a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
	return __b;
    ed6a:	af0b      	add	r7, sp, #44	; 0x2c
    ed6c:	e7e1      	b.n	ed32 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
	return __b;
    ed6e:	af0a      	add	r7, sp, #40	; 0x28
    ed70:	e7e5      	b.n	ed3e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c6>
    ed72:	bf00      	nop
    ed74:	46fffe00 	.word	0x46fffe00

0000ed78 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    ed78:	4b03      	ldr	r3, [pc, #12]	; (ed88 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    ed7a:	4a04      	ldr	r2, [pc, #16]	; (ed8c <z_device_state_init+0x14>)
    ed7c:	4293      	cmp	r3, r2
    ed7e:	d201      	bcs.n	ed84 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    ed80:	3318      	adds	r3, #24
    ed82:	e7fa      	b.n	ed7a <z_device_state_init+0x2>
	}
}
    ed84:	4770      	bx	lr
    ed86:	bf00      	nop
    ed88:	00016c0c 	.word	0x00016c0c
    ed8c:	00016c9c 	.word	0x00016c9c

0000ed90 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    ed90:	b570      	push	{r4, r5, r6, lr}
    ed92:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ed94:	4b11      	ldr	r3, [pc, #68]	; (eddc <z_sys_init_run_level+0x4c>)
    ed96:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ed9a:	e009      	b.n	edb0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    ed9c:	4240      	negs	r0, r0
    ed9e:	e017      	b.n	edd0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    eda0:	68eb      	ldr	r3, [r5, #12]
    eda2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    eda4:	68ea      	ldr	r2, [r5, #12]
    eda6:	7853      	ldrb	r3, [r2, #1]
    eda8:	f043 0301 	orr.w	r3, r3, #1
    edac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    edae:	3408      	adds	r4, #8
    edb0:	1c73      	adds	r3, r6, #1
    edb2:	4a0a      	ldr	r2, [pc, #40]	; (eddc <z_sys_init_run_level+0x4c>)
    edb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edb8:	42a3      	cmp	r3, r4
    edba:	d90d      	bls.n	edd8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    edbc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    edbe:	6823      	ldr	r3, [r4, #0]
    edc0:	4628      	mov	r0, r5
    edc2:	4798      	blx	r3
		if (dev != NULL) {
    edc4:	2d00      	cmp	r5, #0
    edc6:	d0f2      	beq.n	edae <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    edc8:	2800      	cmp	r0, #0
    edca:	d0eb      	beq.n	eda4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    edcc:	2800      	cmp	r0, #0
    edce:	dbe5      	blt.n	ed9c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    edd0:	28ff      	cmp	r0, #255	; 0xff
    edd2:	dde5      	ble.n	eda0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    edd4:	20ff      	movs	r0, #255	; 0xff
    edd6:	e7e3      	b.n	eda0 <z_sys_init_run_level+0x10>
		}
	}
}
    edd8:	bd70      	pop	{r4, r5, r6, pc}
    edda:	bf00      	nop
    eddc:	0006b94c 	.word	0x0006b94c

0000ede0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    ede0:	4b01      	ldr	r3, [pc, #4]	; (ede8 <z_impl_z_errno+0x8>)
    ede2:	6898      	ldr	r0, [r3, #8]
}
    ede4:	3094      	adds	r0, #148	; 0x94
    ede6:	4770      	bx	lr
    ede8:	20020ec0 	.word	0x20020ec0

0000edec <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    edec:	b5f0      	push	{r4, r5, r6, r7, lr}
    edee:	b089      	sub	sp, #36	; 0x24
    edf0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    edf2:	4b15      	ldr	r3, [pc, #84]	; (ee48 <init_idle_thread+0x5c>)
    edf4:	25b0      	movs	r5, #176	; 0xb0
    edf6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    edfa:	4b14      	ldr	r3, [pc, #80]	; (ee4c <init_idle_thread+0x60>)
    edfc:	f44f 76b0 	mov.w	r6, #352	; 0x160
    ee00:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    ee04:	af06      	add	r7, sp, #24
    ee06:	4603      	mov	r3, r0
    ee08:	4a11      	ldr	r2, [pc, #68]	; (ee50 <init_idle_thread+0x64>)
    ee0a:	2108      	movs	r1, #8
    ee0c:	4638      	mov	r0, r7
    ee0e:	f002 ff82 	bl	11d16 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ee12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ee16:	480f      	ldr	r0, [pc, #60]	; (ee54 <init_idle_thread+0x68>)
    ee18:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    ee1c:	9705      	str	r7, [sp, #20]
    ee1e:	2301      	movs	r3, #1
    ee20:	9304      	str	r3, [sp, #16]
    ee22:	230f      	movs	r3, #15
    ee24:	9303      	str	r3, [sp, #12]
    ee26:	2300      	movs	r3, #0
    ee28:	9302      	str	r3, [sp, #8]
    ee2a:	9301      	str	r3, [sp, #4]
    ee2c:	9400      	str	r4, [sp, #0]
    ee2e:	4b0a      	ldr	r3, [pc, #40]	; (ee58 <init_idle_thread+0x6c>)
    ee30:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ee34:	4631      	mov	r1, r6
    ee36:	4628      	mov	r0, r5
    ee38:	f000 f948 	bl	f0cc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ee3c:	7b6b      	ldrb	r3, [r5, #13]
    ee3e:	f023 0304 	bic.w	r3, r3, #4
    ee42:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    ee44:	b009      	add	sp, #36	; 0x24
    ee46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee48:	20000390 	.word	0x20000390
    ee4c:	20029120 	.word	0x20029120
    ee50:	0006b964 	.word	0x0006b964
    ee54:	20020ec0 	.word	0x20020ec0
    ee58:	00015c1d 	.word	0x00015c1d

0000ee5c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    ee5c:	b570      	push	{r4, r5, r6, lr}
    ee5e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    ee60:	f000 fe00 	bl	fa64 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    ee64:	4d1b      	ldr	r5, [pc, #108]	; (eed4 <prepare_multithreading+0x78>)
    ee66:	4b1c      	ldr	r3, [pc, #112]	; (eed8 <prepare_multithreading+0x7c>)
    ee68:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ee6a:	4b1c      	ldr	r3, [pc, #112]	; (eedc <prepare_multithreading+0x80>)
    ee6c:	9305      	str	r3, [sp, #20]
    ee6e:	2301      	movs	r3, #1
    ee70:	9304      	str	r3, [sp, #16]
    ee72:	2400      	movs	r4, #0
    ee74:	9403      	str	r4, [sp, #12]
    ee76:	9402      	str	r4, [sp, #8]
    ee78:	9401      	str	r4, [sp, #4]
    ee7a:	9400      	str	r4, [sp, #0]
    ee7c:	4b18      	ldr	r3, [pc, #96]	; (eee0 <prepare_multithreading+0x84>)
    ee7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ee82:	4918      	ldr	r1, [pc, #96]	; (eee4 <prepare_multithreading+0x88>)
    ee84:	4628      	mov	r0, r5
    ee86:	f000 f921 	bl	f0cc <z_setup_new_thread>
    ee8a:	4606      	mov	r6, r0
    ee8c:	7b6b      	ldrb	r3, [r5, #13]
    ee8e:	f023 0304 	bic.w	r3, r3, #4
    ee92:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    ee94:	4628      	mov	r0, r5
    ee96:	f006 ff2b 	bl	15cf0 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    ee9a:	2c00      	cmp	r4, #0
    ee9c:	dd02      	ble.n	eea4 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    ee9e:	4630      	mov	r0, r6
    eea0:	b006      	add	sp, #24
    eea2:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    eea4:	4620      	mov	r0, r4
    eea6:	f7ff ffa1 	bl	edec <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    eeaa:	4b0f      	ldr	r3, [pc, #60]	; (eee8 <prepare_multithreading+0x8c>)
    eeac:	22b0      	movs	r2, #176	; 0xb0
    eeae:	fb02 3204 	mla	r2, r2, r4, r3
    eeb2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    eeb6:	4b08      	ldr	r3, [pc, #32]	; (eed8 <prepare_multithreading+0x7c>)
    eeb8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    eebc:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    eebe:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    eec0:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    eec4:	4a09      	ldr	r2, [pc, #36]	; (eeec <prepare_multithreading+0x90>)
    eec6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    eeca:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    eece:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    eed0:	3401      	adds	r4, #1
    eed2:	e7e2      	b.n	ee9a <prepare_multithreading+0x3e>
    eed4:	20000440 	.word	0x20000440
    eed8:	20020ec0 	.word	0x20020ec0
    eedc:	0006b970 	.word	0x0006b970
    eee0:	0000eef1 	.word	0x0000eef1
    eee4:	20021100 	.word	0x20021100
    eee8:	20000390 	.word	0x20000390
    eeec:	20029280 	.word	0x20029280

0000eef0 <bg_thread_main>:
{
    eef0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    eef2:	4b0b      	ldr	r3, [pc, #44]	; (ef20 <bg_thread_main+0x30>)
    eef4:	2201      	movs	r2, #1
    eef6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    eef8:	2002      	movs	r0, #2
    eefa:	f7ff ff49 	bl	ed90 <z_sys_init_run_level>
	boot_banner();
    eefe:	f001 f83b 	bl	ff78 <boot_banner>
	z_cpp_init_static();
    ef02:	f003 fb0e 	bl	12522 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ef06:	2003      	movs	r0, #3
    ef08:	f7ff ff42 	bl	ed90 <z_sys_init_run_level>
	z_init_static_threads();
    ef0c:	f000 f942 	bl	f194 <z_init_static_threads>
	main();
    ef10:	f002 fe9a 	bl	11c48 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ef14:	4a03      	ldr	r2, [pc, #12]	; (ef24 <bg_thread_main+0x34>)
    ef16:	7b13      	ldrb	r3, [r2, #12]
    ef18:	f023 0301 	bic.w	r3, r3, #1
    ef1c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ef1e:	bd08      	pop	{r3, pc}
    ef20:	20020f2f 	.word	0x20020f2f
    ef24:	20000440 	.word	0x20000440

0000ef28 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    ef28:	b508      	push	{r3, lr}
    ef2a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    ef2c:	4a01      	ldr	r2, [pc, #4]	; (ef34 <switch_to_main_thread+0xc>)
    ef2e:	4802      	ldr	r0, [pc, #8]	; (ef38 <switch_to_main_thread+0x10>)
    ef30:	f7f5 f9d0 	bl	42d4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    ef34:	0000eef1 	.word	0x0000eef1
    ef38:	20000440 	.word	0x20000440

0000ef3c <z_bss_zero>:
{
    ef3c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    ef3e:	4803      	ldr	r0, [pc, #12]	; (ef4c <z_bss_zero+0x10>)
    ef40:	4a03      	ldr	r2, [pc, #12]	; (ef50 <z_bss_zero+0x14>)
    ef42:	1a12      	subs	r2, r2, r0
    ef44:	2100      	movs	r1, #0
    ef46:	f007 f856 	bl	15ff6 <memset>
}
    ef4a:	bd08      	pop	{r3, pc}
    ef4c:	20000370 	.word	0x20000370
    ef50:	200210f0 	.word	0x200210f0

0000ef54 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    ef54:	b500      	push	{lr}
    ef56:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    ef58:	4b1c      	ldr	r3, [pc, #112]	; (efcc <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ef5a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    ef5e:	4c1c      	ldr	r4, [pc, #112]	; (efd0 <z_cstart+0x7c>)
    ef60:	6963      	ldr	r3, [r4, #20]
    ef62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ef66:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ef68:	23e0      	movs	r3, #224	; 0xe0
    ef6a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    ef6e:	2500      	movs	r5, #0
    ef70:	77e5      	strb	r5, [r4, #31]
    ef72:	7625      	strb	r5, [r4, #24]
    ef74:	7665      	strb	r5, [r4, #25]
    ef76:	76a5      	strb	r5, [r4, #26]
    ef78:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ef7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ef7e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    ef82:	6263      	str	r3, [r4, #36]	; 0x24
    ef84:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    ef88:	f7f5 fafc 	bl	4584 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    ef8c:	f7f5 f888 	bl	40a0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    ef90:	f04f 33ff 	mov.w	r3, #4294967295
    ef94:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    ef96:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    ef98:	f7f5 fbfe 	bl	4798 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    ef9c:	f7f5 fb98 	bl	46d0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    efa0:	2401      	movs	r4, #1
    efa2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    efa6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    efaa:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    efac:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    efae:	4b09      	ldr	r3, [pc, #36]	; (efd4 <z_cstart+0x80>)
    efb0:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    efb4:	f7ff fee0 	bl	ed78 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    efb8:	4628      	mov	r0, r5
    efba:	f7ff fee9 	bl	ed90 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    efbe:	4620      	mov	r0, r4
    efc0:	f7ff fee6 	bl	ed90 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    efc4:	f7ff ff4a 	bl	ee5c <prepare_multithreading>
    efc8:	f7ff ffae 	bl	ef28 <switch_to_main_thread>
    efcc:	20029aa0 	.word	0x20029aa0
    efd0:	e000ed00 	.word	0xe000ed00
    efd4:	20020ec0 	.word	0x20020ec0

0000efd8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    efd8:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    efda:	4c06      	ldr	r4, [pc, #24]	; (eff4 <init_mem_slab_module+0x1c>)
	int rc = 0;
    efdc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    efde:	4b06      	ldr	r3, [pc, #24]	; (eff8 <init_mem_slab_module+0x20>)
    efe0:	429c      	cmp	r4, r3
    efe2:	d206      	bcs.n	eff2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    efe4:	4620      	mov	r0, r4
    efe6:	f006 fd9a 	bl	15b1e <create_free_list>
		if (rc < 0) {
    efea:	2800      	cmp	r0, #0
    efec:	db01      	blt.n	eff2 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    efee:	3420      	adds	r4, #32
    eff0:	e7f5      	b.n	efde <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    eff2:	bd10      	pop	{r4, pc}
    eff4:	200002e4 	.word	0x200002e4
    eff8:	200002e4 	.word	0x200002e4

0000effc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    effc:	b5f0      	push	{r4, r5, r6, r7, lr}
    effe:	b083      	sub	sp, #12
    f000:	460c      	mov	r4, r1
    f002:	461f      	mov	r7, r3
    f004:	f04f 0320 	mov.w	r3, #32
    f008:	f3ef 8111 	mrs	r1, BASEPRI
    f00c:	f383 8812 	msr	BASEPRI_MAX, r3
    f010:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    f014:	6983      	ldr	r3, [r0, #24]
    f016:	b16b      	cbz	r3, f034 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    f018:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    f01a:	6983      	ldr	r3, [r0, #24]
    f01c:	681b      	ldr	r3, [r3, #0]
    f01e:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    f020:	69c3      	ldr	r3, [r0, #28]
    f022:	3301      	adds	r3, #1
    f024:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    f026:	2000      	movs	r0, #0
	__asm__ volatile(
    f028:	f381 8811 	msr	BASEPRI, r1
    f02c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    f030:	b003      	add	sp, #12
    f032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f034:	4616      	mov	r6, r2
    f036:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    f03a:	ea56 0307 	orrs.w	r3, r6, r7
    f03e:	d104      	bne.n	f04a <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    f040:	2300      	movs	r3, #0
    f042:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    f044:	f06f 000b 	mvn.w	r0, #11
    f048:	e7ee      	b.n	f028 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    f04a:	e9cd 6700 	strd	r6, r7, [sp]
    f04e:	4602      	mov	r2, r0
    f050:	4628      	mov	r0, r5
    f052:	f000 fbdd 	bl	f810 <z_pend_curr>
		if (result == 0) {
    f056:	2800      	cmp	r0, #0
    f058:	d1ea      	bne.n	f030 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    f05a:	4b02      	ldr	r3, [pc, #8]	; (f064 <k_mem_slab_alloc+0x68>)
    f05c:	689b      	ldr	r3, [r3, #8]
    f05e:	695b      	ldr	r3, [r3, #20]
    f060:	6023      	str	r3, [r4, #0]
		return result;
    f062:	e7e5      	b.n	f030 <k_mem_slab_alloc+0x34>
    f064:	20020ec0 	.word	0x20020ec0

0000f068 <z_thread_monitor_exit>:
	__asm__ volatile(
    f068:	f04f 0320 	mov.w	r3, #32
    f06c:	f3ef 8111 	mrs	r1, BASEPRI
    f070:	f383 8812 	msr	BASEPRI_MAX, r3
    f074:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    f078:	4b0a      	ldr	r3, [pc, #40]	; (f0a4 <z_thread_monitor_exit+0x3c>)
    f07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f07c:	4283      	cmp	r3, r0
    f07e:	d104      	bne.n	f08a <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    f080:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    f082:	4b08      	ldr	r3, [pc, #32]	; (f0a4 <z_thread_monitor_exit+0x3c>)
    f084:	629a      	str	r2, [r3, #40]	; 0x28
    f086:	e007      	b.n	f098 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    f088:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    f08a:	b113      	cbz	r3, f092 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    f08c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    f08e:	4282      	cmp	r2, r0
    f090:	d1fa      	bne.n	f088 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    f092:	b10b      	cbz	r3, f098 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    f094:	6f02      	ldr	r2, [r0, #112]	; 0x70
    f096:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    f098:	f381 8811 	msr	BASEPRI, r1
    f09c:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    f0a0:	4770      	bx	lr
    f0a2:	bf00      	nop
    f0a4:	20020ec0 	.word	0x20020ec0

0000f0a8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    f0a8:	b538      	push	{r3, r4, r5, lr}
    f0aa:	4614      	mov	r4, r2
    f0ac:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f0ae:	ea54 0305 	orrs.w	r3, r4, r5
    f0b2:	d102      	bne.n	f0ba <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    f0b4:	f006 fd9d 	bl	15bf2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    f0b8:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f0ba:	462b      	mov	r3, r5
    f0bc:	4902      	ldr	r1, [pc, #8]	; (f0c8 <schedule_new_thread+0x20>)
    f0be:	3018      	adds	r0, #24
    f0c0:	f000 fe2e 	bl	fd20 <z_add_timeout>
    f0c4:	e7f8      	b.n	f0b8 <schedule_new_thread+0x10>
    f0c6:	bf00      	nop
    f0c8:	00015d29 	.word	0x00015d29

0000f0cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0d0:	b085      	sub	sp, #20
    f0d2:	4604      	mov	r4, r0
    f0d4:	460f      	mov	r7, r1
    f0d6:	4615      	mov	r5, r2
    f0d8:	461e      	mov	r6, r3
    f0da:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    f0de:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    f0e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    f0e6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f0ea:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    f0ee:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    f0f0:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    f0f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f0f4:	2204      	movs	r2, #4
    f0f6:	9911      	ldr	r1, [sp, #68]	; 0x44
    f0f8:	f006 fd7f 	bl	15bfa <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    f0fc:	462a      	mov	r2, r5
    f0fe:	4639      	mov	r1, r7
    f100:	4620      	mov	r0, r4
    f102:	f006 fd5e 	bl	15bc2 <setup_thread_stack>
    f106:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f108:	f8cd 8008 	str.w	r8, [sp, #8]
    f10c:	f8cd 9004 	str.w	r9, [sp, #4]
    f110:	f8cd a000 	str.w	sl, [sp]
    f114:	4633      	mov	r3, r6
    f116:	4602      	mov	r2, r0
    f118:	4639      	mov	r1, r7
    f11a:	4620      	mov	r0, r4
    f11c:	f7f5 f88a 	bl	4234 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    f120:	2300      	movs	r3, #0
    f122:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    f124:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    f126:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    f12a:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    f12e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    f132:	f04f 0320 	mov.w	r3, #32
    f136:	f3ef 8211 	mrs	r2, BASEPRI
    f13a:	f383 8812 	msr	BASEPRI_MAX, r3
    f13e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    f142:	4b13      	ldr	r3, [pc, #76]	; (f190 <z_setup_new_thread+0xc4>)
    f144:	6a99      	ldr	r1, [r3, #40]	; 0x28
    f146:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    f148:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    f14a:	f382 8811 	msr	BASEPRI, r2
    f14e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    f152:	f1bb 0f00 	cmp.w	fp, #0
    f156:	d013      	beq.n	f180 <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    f158:	221f      	movs	r2, #31
    f15a:	4659      	mov	r1, fp
    f15c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    f160:	f007 f8bf 	bl	162e2 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    f164:	2300      	movs	r3, #0
    f166:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    f16a:	4b09      	ldr	r3, [pc, #36]	; (f190 <z_setup_new_thread+0xc4>)
    f16c:	689b      	ldr	r3, [r3, #8]
    f16e:	b15b      	cbz	r3, f188 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    f170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    f174:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    f178:	4628      	mov	r0, r5
    f17a:	b005      	add	sp, #20
    f17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    f180:	2300      	movs	r3, #0
    f182:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    f186:	e7f0      	b.n	f16a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    f188:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    f18c:	e7f4      	b.n	f178 <z_setup_new_thread+0xac>
    f18e:	bf00      	nop
    f190:	20020ec0 	.word	0x20020ec0

0000f194 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    f194:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    f198:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    f19a:	4c23      	ldr	r4, [pc, #140]	; (f228 <z_init_static_threads+0x94>)
    f19c:	4b23      	ldr	r3, [pc, #140]	; (f22c <z_init_static_threads+0x98>)
    f19e:	429c      	cmp	r4, r3
    f1a0:	d215      	bcs.n	f1ce <z_init_static_threads+0x3a>
		z_setup_new_thread(
    f1a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f1a4:	9305      	str	r3, [sp, #20]
    f1a6:	6a23      	ldr	r3, [r4, #32]
    f1a8:	9304      	str	r3, [sp, #16]
    f1aa:	69e3      	ldr	r3, [r4, #28]
    f1ac:	9303      	str	r3, [sp, #12]
    f1ae:	69a3      	ldr	r3, [r4, #24]
    f1b0:	9302      	str	r3, [sp, #8]
    f1b2:	6963      	ldr	r3, [r4, #20]
    f1b4:	9301      	str	r3, [sp, #4]
    f1b6:	6923      	ldr	r3, [r4, #16]
    f1b8:	9300      	str	r3, [sp, #0]
    f1ba:	68e3      	ldr	r3, [r4, #12]
    f1bc:	68a2      	ldr	r2, [r4, #8]
    f1be:	6861      	ldr	r1, [r4, #4]
    f1c0:	6820      	ldr	r0, [r4, #0]
    f1c2:	f7ff ff83 	bl	f0cc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    f1c6:	6823      	ldr	r3, [r4, #0]
    f1c8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    f1ca:	3430      	adds	r4, #48	; 0x30
    f1cc:	e7e6      	b.n	f19c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    f1ce:	f000 f9d7 	bl	f580 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    f1d2:	4c15      	ldr	r4, [pc, #84]	; (f228 <z_init_static_threads+0x94>)
    f1d4:	e01b      	b.n	f20e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    f1d6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    f1d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f1dc:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    f1e0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    f1e4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    f1e8:	03d8      	lsls	r0, r3, #15
    f1ea:	f240 35e7 	movw	r5, #999	; 0x3e7
    f1ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1f2:	2300      	movs	r3, #0
    f1f4:	1940      	adds	r0, r0, r5
    f1f6:	f04f 0500 	mov.w	r5, #0
    f1fa:	eb45 0101 	adc.w	r1, r5, r1
    f1fe:	f7f1 ff97 	bl	1130 <__aeabi_uldivmod>
    f202:	4602      	mov	r2, r0
    f204:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    f206:	4630      	mov	r0, r6
    f208:	f7ff ff4e 	bl	f0a8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    f20c:	3430      	adds	r4, #48	; 0x30
    f20e:	4b07      	ldr	r3, [pc, #28]	; (f22c <z_init_static_threads+0x98>)
    f210:	429c      	cmp	r4, r3
    f212:	d204      	bcs.n	f21e <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f214:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f216:	f1b3 3fff 	cmp.w	r3, #4294967295
    f21a:	d0f7      	beq.n	f20c <z_init_static_threads+0x78>
    f21c:	e7db      	b.n	f1d6 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    f21e:	f000 fbad 	bl	f97c <k_sched_unlock>
}
    f222:	b006      	add	sp, #24
    f224:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    f228:	200002e4 	.word	0x200002e4
    f22c:	200002e4 	.word	0x200002e4

0000f230 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    f230:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    f232:	f006 fe58 	bl	15ee6 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    f236:	4b04      	ldr	r3, [pc, #16]	; (f248 <pm_save_idle+0x18>)
    f238:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    f23a:	f7f4 fdf7 	bl	3e2c <pm_system_suspend>
    f23e:	b100      	cbz	r0, f242 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    f240:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    f242:	f7f4 ff33 	bl	40ac <arch_cpu_idle>
    f246:	e7fb      	b.n	f240 <pm_save_idle+0x10>
    f248:	20020ec0 	.word	0x20020ec0

0000f24c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f250:	b083      	sub	sp, #12
    f252:	4604      	mov	r4, r0
    f254:	461d      	mov	r5, r3
	__asm__ volatile(
    f256:	f04f 0320 	mov.w	r3, #32
    f25a:	f3ef 8711 	mrs	r7, BASEPRI
    f25e:	f383 8812 	msr	BASEPRI_MAX, r3
    f262:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f266:	68c1      	ldr	r1, [r0, #12]
    f268:	b999      	cbnz	r1, f292 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    f26a:	2900      	cmp	r1, #0
    f26c:	d14f      	bne.n	f30e <z_impl_k_mutex_lock+0xc2>
    f26e:	4b3a      	ldr	r3, [pc, #232]	; (f358 <z_impl_k_mutex_lock+0x10c>)
    f270:	689b      	ldr	r3, [r3, #8]
    f272:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f276:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    f278:	3101      	adds	r1, #1
    f27a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    f27c:	4b36      	ldr	r3, [pc, #216]	; (f358 <z_impl_k_mutex_lock+0x10c>)
    f27e:	689b      	ldr	r3, [r3, #8]
    f280:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    f282:	f387 8811 	msr	BASEPRI, r7
    f286:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    f28a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    f28c:	b003      	add	sp, #12
    f28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f292:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f294:	6882      	ldr	r2, [r0, #8]
    f296:	4b30      	ldr	r3, [pc, #192]	; (f358 <z_impl_k_mutex_lock+0x10c>)
    f298:	689b      	ldr	r3, [r3, #8]
    f29a:	429a      	cmp	r2, r3
    f29c:	d0e5      	beq.n	f26a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f29e:	ea55 0106 	orrs.w	r1, r5, r6
    f2a2:	bf0c      	ite	eq
    f2a4:	f04f 0801 	moveq.w	r8, #1
    f2a8:	f04f 0800 	movne.w	r8, #0
    f2ac:	d031      	beq.n	f312 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    f2ae:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f2b2:	4649      	mov	r1, r9
    f2b4:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f2b8:	f006 fcbc 	bl	15c34 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f2bc:	4581      	cmp	r9, r0
    f2be:	dc2f      	bgt.n	f320 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    f2c0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f2c4:	9600      	str	r6, [sp, #0]
    f2c6:	9501      	str	r5, [sp, #4]
    f2c8:	4622      	mov	r2, r4
    f2ca:	4639      	mov	r1, r7
    f2cc:	4823      	ldr	r0, [pc, #140]	; (f35c <z_impl_k_mutex_lock+0x110>)
    f2ce:	f000 fa9f 	bl	f810 <z_pend_curr>
	if (got_mutex == 0) {
    f2d2:	2800      	cmp	r0, #0
    f2d4:	d0da      	beq.n	f28c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    f2d6:	f04f 0320 	mov.w	r3, #32
    f2da:	f3ef 8511 	mrs	r5, BASEPRI
    f2de:	f383 8812 	msr	BASEPRI_MAX, r3
    f2e2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f2e6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f2e8:	429c      	cmp	r4, r3
    f2ea:	d01f      	beq.n	f32c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f2ec:	b1f3      	cbz	r3, f32c <z_impl_k_mutex_lock+0xe0>
    f2ee:	6921      	ldr	r1, [r4, #16]
    f2f0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f2f4:	f006 fc9e 	bl	15c34 <new_prio_for_inheritance>
    f2f8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f2fa:	4620      	mov	r0, r4
    f2fc:	f006 fca5 	bl	15c4a <adjust_owner_prio>
    f300:	b9b0      	cbnz	r0, f330 <z_impl_k_mutex_lock+0xe4>
    f302:	f1b9 0f00 	cmp.w	r9, #0
    f306:	d015      	beq.n	f334 <z_impl_k_mutex_lock+0xe8>
    f308:	f04f 0801 	mov.w	r8, #1
    f30c:	e012      	b.n	f334 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    f30e:	6923      	ldr	r3, [r4, #16]
    f310:	e7b1      	b.n	f276 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    f312:	f387 8811 	msr	BASEPRI, r7
    f316:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    f31a:	f06f 000f 	mvn.w	r0, #15
    f31e:	e7b5      	b.n	f28c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    f320:	4601      	mov	r1, r0
    f322:	4620      	mov	r0, r4
    f324:	f006 fc91 	bl	15c4a <adjust_owner_prio>
    f328:	4681      	mov	r9, r0
    f32a:	e7cb      	b.n	f2c4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f32c:	6921      	ldr	r1, [r4, #16]
    f32e:	e7e4      	b.n	f2fa <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f330:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    f334:	f1b8 0f00 	cmp.w	r8, #0
    f338:	d106      	bne.n	f348 <z_impl_k_mutex_lock+0xfc>
    f33a:	f385 8811 	msr	BASEPRI, r5
    f33e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    f342:	f06f 000a 	mvn.w	r0, #10
    f346:	e7a1      	b.n	f28c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    f348:	4629      	mov	r1, r5
    f34a:	4804      	ldr	r0, [pc, #16]	; (f35c <z_impl_k_mutex_lock+0x110>)
    f34c:	f000 f8fc 	bl	f548 <z_reschedule>
	return -EAGAIN;
    f350:	f06f 000a 	mvn.w	r0, #10
    f354:	e79a      	b.n	f28c <z_impl_k_mutex_lock+0x40>
    f356:	bf00      	nop
    f358:	20020ec0 	.word	0x20020ec0
    f35c:	20020eec 	.word	0x20020eec

0000f360 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    f360:	6882      	ldr	r2, [r0, #8]
    f362:	2a00      	cmp	r2, #0
    f364:	d035      	beq.n	f3d2 <z_impl_k_mutex_unlock+0x72>
{
    f366:	b538      	push	{r3, r4, r5, lr}
    f368:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f36a:	4b1d      	ldr	r3, [pc, #116]	; (f3e0 <z_impl_k_mutex_unlock+0x80>)
    f36c:	689b      	ldr	r3, [r3, #8]
    f36e:	429a      	cmp	r2, r3
    f370:	d132      	bne.n	f3d8 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    f372:	7bda      	ldrb	r2, [r3, #15]
    f374:	3a01      	subs	r2, #1
    f376:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    f378:	68c3      	ldr	r3, [r0, #12]
    f37a:	2b01      	cmp	r3, #1
    f37c:	d905      	bls.n	f38a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    f37e:	3b01      	subs	r3, #1
    f380:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    f382:	f000 fafb 	bl	f97c <k_sched_unlock>

	return 0;
    f386:	2000      	movs	r0, #0
}
    f388:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f38a:	f04f 0320 	mov.w	r3, #32
    f38e:	f3ef 8511 	mrs	r5, BASEPRI
    f392:	f383 8812 	msr	BASEPRI_MAX, r3
    f396:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f39a:	6901      	ldr	r1, [r0, #16]
    f39c:	f006 fc55 	bl	15c4a <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f3a0:	4620      	mov	r0, r4
    f3a2:	f006 fd40 	bl	15e26 <z_unpend_first_thread>
	mutex->owner = new_owner;
    f3a6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f3a8:	b160      	cbz	r0, f3c4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    f3aa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f3ae:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f3b0:	2300      	movs	r3, #0
    f3b2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    f3b6:	f006 fc9b 	bl	15cf0 <z_ready_thread>
		z_reschedule(&lock, key);
    f3ba:	4629      	mov	r1, r5
    f3bc:	4809      	ldr	r0, [pc, #36]	; (f3e4 <z_impl_k_mutex_unlock+0x84>)
    f3be:	f000 f8c3 	bl	f548 <z_reschedule>
    f3c2:	e7de      	b.n	f382 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    f3c4:	2300      	movs	r3, #0
    f3c6:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    f3c8:	f385 8811 	msr	BASEPRI, r5
    f3cc:	f3bf 8f6f 	isb	sy
    f3d0:	e7d7      	b.n	f382 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    f3d2:	f06f 0015 	mvn.w	r0, #21
}
    f3d6:	4770      	bx	lr
		return -EPERM;
    f3d8:	f04f 30ff 	mov.w	r0, #4294967295
    f3dc:	e7d4      	b.n	f388 <z_impl_k_mutex_unlock+0x28>
    f3de:	bf00      	nop
    f3e0:	20020ec0 	.word	0x20020ec0
    f3e4:	20020eec 	.word	0x20020eec

0000f3e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f3e8:	b538      	push	{r3, r4, r5, lr}
    f3ea:	4604      	mov	r4, r0
	__asm__ volatile(
    f3ec:	f04f 0320 	mov.w	r3, #32
    f3f0:	f3ef 8511 	mrs	r5, BASEPRI
    f3f4:	f383 8812 	msr	BASEPRI_MAX, r3
    f3f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    f3fc:	f006 fd13 	bl	15e26 <z_unpend_first_thread>

	if (thread != NULL) {
    f400:	b148      	cbz	r0, f416 <z_impl_k_sem_give+0x2e>
    f402:	2200      	movs	r2, #0
    f404:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f408:	f006 fc72 	bl	15cf0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f40c:	4629      	mov	r1, r5
    f40e:	4807      	ldr	r0, [pc, #28]	; (f42c <z_impl_k_sem_give+0x44>)
    f410:	f000 f89a 	bl	f548 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    f414:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f416:	68a3      	ldr	r3, [r4, #8]
    f418:	68e2      	ldr	r2, [r4, #12]
    f41a:	4293      	cmp	r3, r2
    f41c:	d003      	beq.n	f426 <z_impl_k_sem_give+0x3e>
    f41e:	2201      	movs	r2, #1
    f420:	4413      	add	r3, r2
    f422:	60a3      	str	r3, [r4, #8]
}
    f424:	e7f2      	b.n	f40c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f426:	2200      	movs	r2, #0
    f428:	e7fa      	b.n	f420 <z_impl_k_sem_give+0x38>
    f42a:	bf00      	nop
    f42c:	20020ef0 	.word	0x20020ef0

0000f430 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f430:	b530      	push	{r4, r5, lr}
    f432:	b083      	sub	sp, #12
    f434:	461d      	mov	r5, r3
    f436:	f04f 0320 	mov.w	r3, #32
    f43a:	f3ef 8111 	mrs	r1, BASEPRI
    f43e:	f383 8812 	msr	BASEPRI_MAX, r3
    f442:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    f446:	6883      	ldr	r3, [r0, #8]
    f448:	b143      	cbz	r3, f45c <z_impl_k_sem_take+0x2c>
		sem->count--;
    f44a:	3b01      	subs	r3, #1
    f44c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    f44e:	f381 8811 	msr	BASEPRI, r1
    f452:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f456:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    f458:	b003      	add	sp, #12
    f45a:	bd30      	pop	{r4, r5, pc}
    f45c:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f45e:	ea54 0305 	orrs.w	r3, r4, r5
    f462:	d006      	beq.n	f472 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f464:	e9cd 4500 	strd	r4, r5, [sp]
    f468:	4602      	mov	r2, r0
    f46a:	4805      	ldr	r0, [pc, #20]	; (f480 <z_impl_k_sem_take+0x50>)
    f46c:	f000 f9d0 	bl	f810 <z_pend_curr>
	return ret;
    f470:	e7f2      	b.n	f458 <z_impl_k_sem_take+0x28>
    f472:	f381 8811 	msr	BASEPRI, r1
    f476:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f47a:	f06f 000f 	mvn.w	r0, #15
    f47e:	e7eb      	b.n	f458 <z_impl_k_sem_take+0x28>
    f480:	20020ef0 	.word	0x20020ef0

0000f484 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    f484:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f486:	f1b3 3fff 	cmp.w	r3, #4294967295
    f48a:	bf08      	it	eq
    f48c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    f490:	d100      	bne.n	f494 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    f492:	bd38      	pop	{r3, r4, r5, pc}
    f494:	4902      	ldr	r1, [pc, #8]	; (f4a0 <add_thread_timeout+0x1c>)
    f496:	3018      	adds	r0, #24
    f498:	f000 fc42 	bl	fd20 <z_add_timeout>
    f49c:	e7f9      	b.n	f492 <add_thread_timeout+0xe>
    f49e:	bf00      	nop
    f4a0:	00015d29 	.word	0x00015d29

0000f4a4 <z_reset_time_slice>:
{
    f4a4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    f4a6:	4b08      	ldr	r3, [pc, #32]	; (f4c8 <z_reset_time_slice+0x24>)
    f4a8:	681b      	ldr	r3, [r3, #0]
    f4aa:	b903      	cbnz	r3, f4ae <z_reset_time_slice+0xa>
}
    f4ac:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    f4ae:	f7f6 fad9 	bl	5a64 <sys_clock_elapsed>
    f4b2:	4603      	mov	r3, r0
    f4b4:	4a04      	ldr	r2, [pc, #16]	; (f4c8 <z_reset_time_slice+0x24>)
    f4b6:	6810      	ldr	r0, [r2, #0]
    f4b8:	4403      	add	r3, r0
    f4ba:	4a04      	ldr	r2, [pc, #16]	; (f4cc <z_reset_time_slice+0x28>)
    f4bc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    f4be:	2100      	movs	r1, #0
    f4c0:	f006 fd27 	bl	15f12 <z_set_timeout_expiry>
}
    f4c4:	e7f2      	b.n	f4ac <z_reset_time_slice+0x8>
    f4c6:	bf00      	nop
    f4c8:	20020f00 	.word	0x20020f00
    f4cc:	20020ec0 	.word	0x20020ec0

0000f4d0 <k_sched_time_slice_set>:
{
    f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4d4:	4606      	mov	r6, r0
    f4d6:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    f4d8:	2300      	movs	r3, #0
	__asm__ volatile(
    f4da:	f04f 0220 	mov.w	r2, #32
    f4de:	f3ef 8711 	mrs	r7, BASEPRI
    f4e2:	f382 8812 	msr	BASEPRI_MAX, r2
    f4e6:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    f4ea:	e009      	b.n	f500 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    f4ec:	4b13      	ldr	r3, [pc, #76]	; (f53c <k_sched_time_slice_set+0x6c>)
    f4ee:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    f4f2:	f7ff ffd7 	bl	f4a4 <z_reset_time_slice>
	__asm__ volatile(
    f4f6:	f387 8811 	msr	BASEPRI, r7
    f4fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f4fe:	2301      	movs	r3, #1
    f500:	b9cb      	cbnz	r3, f536 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    f502:	2300      	movs	r3, #0
    f504:	4a0e      	ldr	r2, [pc, #56]	; (f540 <k_sched_time_slice_set+0x70>)
    f506:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    f508:	0c75      	lsrs	r5, r6, #17
    f50a:	03f4      	lsls	r4, r6, #15
    f50c:	f240 30e7 	movw	r0, #999	; 0x3e7
    f510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f514:	2300      	movs	r3, #0
    f516:	1820      	adds	r0, r4, r0
    f518:	f04f 0100 	mov.w	r1, #0
    f51c:	eb45 0101 	adc.w	r1, r5, r1
    f520:	f7f1 fe06 	bl	1130 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    f524:	4b07      	ldr	r3, [pc, #28]	; (f544 <k_sched_time_slice_set+0x74>)
    f526:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    f528:	2e00      	cmp	r6, #0
    f52a:	dddf      	ble.n	f4ec <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    f52c:	2802      	cmp	r0, #2
    f52e:	bfb8      	it	lt
    f530:	2002      	movlt	r0, #2
    f532:	6018      	str	r0, [r3, #0]
    f534:	e7da      	b.n	f4ec <k_sched_time_slice_set+0x1c>
}
    f536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f53a:	bf00      	nop
    f53c:	20020efc 	.word	0x20020efc
    f540:	20020ec0 	.word	0x20020ec0
    f544:	20020f00 	.word	0x20020f00

0000f548 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    f548:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    f54a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f54c:	b921      	cbnz	r1, f558 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f54e:	f3ef 8305 	mrs	r3, IPSR
    f552:	b913      	cbnz	r3, f55a <z_reschedule+0x12>
    f554:	2101      	movs	r1, #1
    f556:	e000      	b.n	f55a <z_reschedule+0x12>
    f558:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    f55a:	f011 0f01 	tst.w	r1, #1
    f55e:	d007      	beq.n	f570 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    f560:	4b06      	ldr	r3, [pc, #24]	; (f57c <z_reschedule+0x34>)
    f562:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    f564:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    f566:	429a      	cmp	r2, r3
    f568:	d002      	beq.n	f570 <z_reschedule+0x28>
	ret = arch_swap(key);
    f56a:	f7f4 fe0b 	bl	4184 <arch_swap>
		z_swap(lock, key);
    f56e:	e003      	b.n	f578 <z_reschedule+0x30>
    f570:	f380 8811 	msr	BASEPRI, r0
    f574:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    f578:	bd08      	pop	{r3, pc}
    f57a:	bf00      	nop
    f57c:	20020ec0 	.word	0x20020ec0

0000f580 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    f580:	2300      	movs	r3, #0
	__asm__ volatile(
    f582:	f04f 0220 	mov.w	r2, #32
    f586:	f3ef 8111 	mrs	r1, BASEPRI
    f58a:	f382 8812 	msr	BASEPRI_MAX, r2
    f58e:	f3bf 8f6f 	isb	sy
    f592:	b953      	cbnz	r3, f5aa <k_sched_lock+0x2a>
    f594:	4b05      	ldr	r3, [pc, #20]	; (f5ac <k_sched_lock+0x2c>)
    f596:	689a      	ldr	r2, [r3, #8]
    f598:	7bd3      	ldrb	r3, [r2, #15]
    f59a:	3b01      	subs	r3, #1
    f59c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    f59e:	f381 8811 	msr	BASEPRI, r1
    f5a2:	f3bf 8f6f 	isb	sy
    f5a6:	2301      	movs	r3, #1
    f5a8:	e7f3      	b.n	f592 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    f5aa:	4770      	bx	lr
    f5ac:	20020ec0 	.word	0x20020ec0

0000f5b0 <update_cache>:
{
    f5b0:	b538      	push	{r3, r4, r5, lr}
    f5b2:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    f5b4:	480f      	ldr	r0, [pc, #60]	; (f5f4 <update_cache+0x44>)
    f5b6:	f006 fb94 	bl	15ce2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f5ba:	4605      	mov	r5, r0
    f5bc:	b170      	cbz	r0, f5dc <update_cache+0x2c>
	if (preempt_ok != 0) {
    f5be:	b984      	cbnz	r4, f5e2 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    f5c0:	4b0d      	ldr	r3, [pc, #52]	; (f5f8 <update_cache+0x48>)
    f5c2:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    f5c4:	7b5a      	ldrb	r2, [r3, #13]
    f5c6:	f012 0f1f 	tst.w	r2, #31
    f5ca:	d10a      	bne.n	f5e2 <update_cache+0x32>
	return node->next != NULL;
    f5cc:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    f5ce:	b942      	cbnz	r2, f5e2 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    f5d0:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    f5d2:	2a7f      	cmp	r2, #127	; 0x7f
    f5d4:	d905      	bls.n	f5e2 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    f5d6:	4a08      	ldr	r2, [pc, #32]	; (f5f8 <update_cache+0x48>)
    f5d8:	61d3      	str	r3, [r2, #28]
    f5da:	e00a      	b.n	f5f2 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f5dc:	4b06      	ldr	r3, [pc, #24]	; (f5f8 <update_cache+0x48>)
    f5de:	68dd      	ldr	r5, [r3, #12]
    f5e0:	e7ed      	b.n	f5be <update_cache+0xe>
		if (thread != _current) {
    f5e2:	4b05      	ldr	r3, [pc, #20]	; (f5f8 <update_cache+0x48>)
    f5e4:	689b      	ldr	r3, [r3, #8]
    f5e6:	42ab      	cmp	r3, r5
    f5e8:	d001      	beq.n	f5ee <update_cache+0x3e>
			z_reset_time_slice();
    f5ea:	f7ff ff5b 	bl	f4a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    f5ee:	4b02      	ldr	r3, [pc, #8]	; (f5f8 <update_cache+0x48>)
    f5f0:	61dd      	str	r5, [r3, #28]
}
    f5f2:	bd38      	pop	{r3, r4, r5, pc}
    f5f4:	20020ee0 	.word	0x20020ee0
    f5f8:	20020ec0 	.word	0x20020ec0

0000f5fc <move_thread_to_end_of_prio_q>:
{
    f5fc:	b538      	push	{r3, r4, r5, lr}
    f5fe:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    f600:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    f602:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f606:	2b00      	cmp	r3, #0
    f608:	db28      	blt.n	f65c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    f60a:	7b6b      	ldrb	r3, [r5, #13]
    f60c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f610:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    f612:	4b1a      	ldr	r3, [pc, #104]	; (f67c <move_thread_to_end_of_prio_q+0x80>)
    f614:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f618:	429c      	cmp	r4, r3
    f61a:	d02d      	beq.n	f678 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f61c:	b16c      	cbz	r4, f63a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f61e:	4621      	mov	r1, r4
    f620:	4628      	mov	r0, r5
    f622:	f006 fb37 	bl	15c94 <z_sched_prio_cmp>
    f626:	2800      	cmp	r0, #0
    f628:	dc20      	bgt.n	f66c <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f62a:	b134      	cbz	r4, f63a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    f62c:	4b13      	ldr	r3, [pc, #76]	; (f67c <move_thread_to_end_of_prio_q+0x80>)
    f62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f630:	429c      	cmp	r4, r3
    f632:	d002      	beq.n	f63a <move_thread_to_end_of_prio_q+0x3e>
    f634:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f636:	2c00      	cmp	r4, #0
    f638:	d1f0      	bne.n	f61c <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    f63a:	4b10      	ldr	r3, [pc, #64]	; (f67c <move_thread_to_end_of_prio_q+0x80>)
    f63c:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    f63e:	f103 0120 	add.w	r1, r3, #32
    f642:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    f644:	606a      	str	r2, [r5, #4]

	tail->next = node;
    f646:	6015      	str	r5, [r2, #0]
	list->tail = node;
    f648:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    f64a:	4b0c      	ldr	r3, [pc, #48]	; (f67c <move_thread_to_end_of_prio_q+0x80>)
    f64c:	6898      	ldr	r0, [r3, #8]
    f64e:	42a8      	cmp	r0, r5
    f650:	bf14      	ite	ne
    f652:	2000      	movne	r0, #0
    f654:	2001      	moveq	r0, #1
    f656:	f7ff ffab 	bl	f5b0 <update_cache>
}
    f65a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f65c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f660:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    f662:	4601      	mov	r1, r0
    f664:	4806      	ldr	r0, [pc, #24]	; (f680 <move_thread_to_end_of_prio_q+0x84>)
    f666:	f006 fb34 	bl	15cd2 <z_priq_dumb_remove>
}
    f66a:	e7ce      	b.n	f60a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    f66c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    f66e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    f670:	602c      	str	r4, [r5, #0]
	prev->next = node;
    f672:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f674:	6065      	str	r5, [r4, #4]
}
    f676:	e7e8      	b.n	f64a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f678:	2400      	movs	r4, #0
    f67a:	e7cf      	b.n	f61c <move_thread_to_end_of_prio_q+0x20>
    f67c:	20020ec0 	.word	0x20020ec0
    f680:	20020ee0 	.word	0x20020ee0

0000f684 <z_time_slice>:
{
    f684:	b510      	push	{r4, lr}
	__asm__ volatile(
    f686:	f04f 0320 	mov.w	r3, #32
    f68a:	f3ef 8411 	mrs	r4, BASEPRI
    f68e:	f383 8812 	msr	BASEPRI_MAX, r3
    f692:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    f696:	4b1c      	ldr	r3, [pc, #112]	; (f708 <z_time_slice+0x84>)
    f698:	689b      	ldr	r3, [r3, #8]
    f69a:	4a1c      	ldr	r2, [pc, #112]	; (f70c <z_time_slice+0x88>)
    f69c:	6812      	ldr	r2, [r2, #0]
    f69e:	4293      	cmp	r3, r2
    f6a0:	d01d      	beq.n	f6de <z_time_slice+0x5a>
	pending_current = NULL;
    f6a2:	4a1a      	ldr	r2, [pc, #104]	; (f70c <z_time_slice+0x88>)
    f6a4:	2100      	movs	r1, #0
    f6a6:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    f6a8:	4a19      	ldr	r2, [pc, #100]	; (f710 <z_time_slice+0x8c>)
    f6aa:	6812      	ldr	r2, [r2, #0]
    f6ac:	b322      	cbz	r2, f6f8 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    f6ae:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    f6b0:	2a7f      	cmp	r2, #127	; 0x7f
    f6b2:	d821      	bhi.n	f6f8 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    f6b4:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    f6b6:	f012 0f1f 	tst.w	r2, #31
    f6ba:	d11d      	bne.n	f6f8 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    f6bc:	f993 100e 	ldrsb.w	r1, [r3, #14]
    f6c0:	4a14      	ldr	r2, [pc, #80]	; (f714 <z_time_slice+0x90>)
    f6c2:	6812      	ldr	r2, [r2, #0]
    f6c4:	4291      	cmp	r1, r2
    f6c6:	db17      	blt.n	f6f8 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    f6c8:	4a13      	ldr	r2, [pc, #76]	; (f718 <z_time_slice+0x94>)
    f6ca:	4293      	cmp	r3, r2
    f6cc:	d014      	beq.n	f6f8 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    f6ce:	4a0e      	ldr	r2, [pc, #56]	; (f708 <z_time_slice+0x84>)
    f6d0:	6912      	ldr	r2, [r2, #16]
    f6d2:	4282      	cmp	r2, r0
    f6d4:	dd0a      	ble.n	f6ec <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    f6d6:	1a10      	subs	r0, r2, r0
    f6d8:	4b0b      	ldr	r3, [pc, #44]	; (f708 <z_time_slice+0x84>)
    f6da:	6118      	str	r0, [r3, #16]
    f6dc:	e00f      	b.n	f6fe <z_time_slice+0x7a>
		z_reset_time_slice();
    f6de:	f7ff fee1 	bl	f4a4 <z_reset_time_slice>
	__asm__ volatile(
    f6e2:	f384 8811 	msr	BASEPRI, r4
    f6e6:	f3bf 8f6f 	isb	sy
		return;
    f6ea:	e00c      	b.n	f706 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    f6ec:	4618      	mov	r0, r3
    f6ee:	f7ff ff85 	bl	f5fc <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    f6f2:	f7ff fed7 	bl	f4a4 <z_reset_time_slice>
    f6f6:	e002      	b.n	f6fe <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    f6f8:	4b03      	ldr	r3, [pc, #12]	; (f708 <z_time_slice+0x84>)
    f6fa:	2200      	movs	r2, #0
    f6fc:	611a      	str	r2, [r3, #16]
    f6fe:	f384 8811 	msr	BASEPRI, r4
    f702:	f3bf 8f6f 	isb	sy
}
    f706:	bd10      	pop	{r4, pc}
    f708:	20020ec0 	.word	0x20020ec0
    f70c:	20020ef4 	.word	0x20020ef4
    f710:	20020f00 	.word	0x20020f00
    f714:	20020efc 	.word	0x20020efc
    f718:	20000390 	.word	0x20000390

0000f71c <ready_thread>:
{
    f71c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    f71e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    f720:	f990 200d 	ldrsb.w	r2, [r0, #13]
    f724:	2a00      	cmp	r2, #0
    f726:	db2d      	blt.n	f784 <ready_thread+0x68>
    f728:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f72a:	f013 0f1f 	tst.w	r3, #31
    f72e:	d105      	bne.n	f73c <ready_thread+0x20>
	return node->next != NULL;
    f730:	6982      	ldr	r2, [r0, #24]
    f732:	b10a      	cbz	r2, f738 <ready_thread+0x1c>
    f734:	2200      	movs	r2, #0
    f736:	e002      	b.n	f73e <ready_thread+0x22>
    f738:	2201      	movs	r2, #1
    f73a:	e000      	b.n	f73e <ready_thread+0x22>
    f73c:	2200      	movs	r2, #0
    f73e:	b30a      	cbz	r2, f784 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    f740:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f744:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    f746:	4b14      	ldr	r3, [pc, #80]	; (f798 <ready_thread+0x7c>)
    f748:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f74c:	429d      	cmp	r5, r3
    f74e:	d020      	beq.n	f792 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f750:	b16d      	cbz	r5, f76e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f752:	4629      	mov	r1, r5
    f754:	4620      	mov	r0, r4
    f756:	f006 fa9d 	bl	15c94 <z_sched_prio_cmp>
    f75a:	2800      	cmp	r0, #0
    f75c:	dc13      	bgt.n	f786 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f75e:	b135      	cbz	r5, f76e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    f760:	4b0d      	ldr	r3, [pc, #52]	; (f798 <ready_thread+0x7c>)
    f762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f764:	429d      	cmp	r5, r3
    f766:	d002      	beq.n	f76e <ready_thread+0x52>
    f768:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f76a:	2d00      	cmp	r5, #0
    f76c:	d1f0      	bne.n	f750 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    f76e:	4b0a      	ldr	r3, [pc, #40]	; (f798 <ready_thread+0x7c>)
    f770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    f772:	f103 0120 	add.w	r1, r3, #32
    f776:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    f778:	6062      	str	r2, [r4, #4]
	tail->next = node;
    f77a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    f77c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    f77e:	2000      	movs	r0, #0
    f780:	f7ff ff16 	bl	f5b0 <update_cache>
}
    f784:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    f786:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    f788:	6063      	str	r3, [r4, #4]
	node->next = successor;
    f78a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    f78c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    f78e:	606c      	str	r4, [r5, #4]
}
    f790:	e7f5      	b.n	f77e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f792:	2500      	movs	r5, #0
    f794:	e7dc      	b.n	f750 <ready_thread+0x34>
    f796:	bf00      	nop
    f798:	20020ec0 	.word	0x20020ec0

0000f79c <z_sched_start>:
{
    f79c:	b510      	push	{r4, lr}
	__asm__ volatile(
    f79e:	f04f 0320 	mov.w	r3, #32
    f7a2:	f3ef 8411 	mrs	r4, BASEPRI
    f7a6:	f383 8812 	msr	BASEPRI_MAX, r3
    f7aa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    f7ae:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    f7b0:	f013 0f04 	tst.w	r3, #4
    f7b4:	d104      	bne.n	f7c0 <z_sched_start+0x24>
	__asm__ volatile(
    f7b6:	f384 8811 	msr	BASEPRI, r4
    f7ba:	f3bf 8f6f 	isb	sy
}
    f7be:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f7c0:	f023 0304 	bic.w	r3, r3, #4
    f7c4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    f7c6:	f7ff ffa9 	bl	f71c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    f7ca:	4621      	mov	r1, r4
    f7cc:	4801      	ldr	r0, [pc, #4]	; (f7d4 <z_sched_start+0x38>)
    f7ce:	f7ff febb 	bl	f548 <z_reschedule>
    f7d2:	e7f4      	b.n	f7be <z_sched_start+0x22>
    f7d4:	20020ef8 	.word	0x20020ef8

0000f7d8 <unready_thread>:
{
    f7d8:	b510      	push	{r4, lr}
    f7da:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    f7dc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    f7de:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f7e2:	2b00      	cmp	r3, #0
    f7e4:	db08      	blt.n	f7f8 <unready_thread+0x20>
	update_cache(thread == _current);
    f7e6:	4b08      	ldr	r3, [pc, #32]	; (f808 <unready_thread+0x30>)
    f7e8:	6898      	ldr	r0, [r3, #8]
    f7ea:	42a0      	cmp	r0, r4
    f7ec:	bf14      	ite	ne
    f7ee:	2000      	movne	r0, #0
    f7f0:	2001      	moveq	r0, #1
    f7f2:	f7ff fedd 	bl	f5b0 <update_cache>
}
    f7f6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f7f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f7fc:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    f7fe:	4601      	mov	r1, r0
    f800:	4802      	ldr	r0, [pc, #8]	; (f80c <unready_thread+0x34>)
    f802:	f006 fa66 	bl	15cd2 <z_priq_dumb_remove>
}
    f806:	e7ee      	b.n	f7e6 <unready_thread+0xe>
    f808:	20020ec0 	.word	0x20020ec0
    f80c:	20020ee0 	.word	0x20020ee0

0000f810 <z_pend_curr>:
{
    f810:	b510      	push	{r4, lr}
    f812:	460c      	mov	r4, r1
    f814:	4611      	mov	r1, r2
	pending_current = _current;
    f816:	4b06      	ldr	r3, [pc, #24]	; (f830 <z_pend_curr+0x20>)
    f818:	6898      	ldr	r0, [r3, #8]
    f81a:	4b06      	ldr	r3, [pc, #24]	; (f834 <z_pend_curr+0x24>)
    f81c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    f81e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f822:	f006 fadf 	bl	15de4 <pend>
    f826:	4620      	mov	r0, r4
    f828:	f7f4 fcac 	bl	4184 <arch_swap>
}
    f82c:	bd10      	pop	{r4, pc}
    f82e:	bf00      	nop
    f830:	20020ec0 	.word	0x20020ec0
    f834:	20020ef4 	.word	0x20020ef4

0000f838 <z_set_prio>:
{
    f838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f83c:	4604      	mov	r4, r0
    f83e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    f840:	2300      	movs	r3, #0
	__asm__ volatile(
    f842:	f04f 0220 	mov.w	r2, #32
    f846:	f3ef 8611 	mrs	r6, BASEPRI
    f84a:	f382 8812 	msr	BASEPRI_MAX, r2
    f84e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    f852:	4698      	mov	r8, r3
    f854:	e008      	b.n	f868 <z_set_prio+0x30>
		if (need_sched) {
    f856:	f012 0801 	ands.w	r8, r2, #1
    f85a:	d111      	bne.n	f880 <z_set_prio+0x48>
			thread->base.prio = prio;
    f85c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    f85e:	f386 8811 	msr	BASEPRI, r6
    f862:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f866:	2301      	movs	r3, #1
    f868:	461a      	mov	r2, r3
    f86a:	2b00      	cmp	r3, #0
    f86c:	d13d      	bne.n	f8ea <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    f86e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f870:	f013 0f1f 	tst.w	r3, #31
    f874:	d1ef      	bne.n	f856 <z_set_prio+0x1e>
	return node->next != NULL;
    f876:	69a1      	ldr	r1, [r4, #24]
    f878:	2900      	cmp	r1, #0
    f87a:	d1ec      	bne.n	f856 <z_set_prio+0x1e>
    f87c:	2201      	movs	r2, #1
    f87e:	e7ea      	b.n	f856 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f884:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    f886:	f8df 906c 	ldr.w	r9, [pc, #108]	; f8f4 <z_set_prio+0xbc>
    f88a:	4621      	mov	r1, r4
    f88c:	4648      	mov	r0, r9
    f88e:	f006 fa20 	bl	15cd2 <z_priq_dumb_remove>
				thread->base.prio = prio;
    f892:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    f894:	7b63      	ldrb	r3, [r4, #13]
    f896:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f89a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    f89c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f8a0:	454d      	cmp	r5, r9
    f8a2:	d020      	beq.n	f8e6 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f8a4:	b16d      	cbz	r5, f8c2 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f8a6:	4629      	mov	r1, r5
    f8a8:	4620      	mov	r0, r4
    f8aa:	f006 f9f3 	bl	15c94 <z_sched_prio_cmp>
    f8ae:	2800      	cmp	r0, #0
    f8b0:	dc13      	bgt.n	f8da <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f8b2:	b135      	cbz	r5, f8c2 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    f8b4:	4b0e      	ldr	r3, [pc, #56]	; (f8f0 <z_set_prio+0xb8>)
    f8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f8b8:	429d      	cmp	r5, r3
    f8ba:	d002      	beq.n	f8c2 <z_set_prio+0x8a>
    f8bc:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f8be:	2d00      	cmp	r5, #0
    f8c0:	d1f0      	bne.n	f8a4 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    f8c2:	4b0b      	ldr	r3, [pc, #44]	; (f8f0 <z_set_prio+0xb8>)
    f8c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    f8c6:	f103 0120 	add.w	r1, r3, #32
    f8ca:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    f8cc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    f8ce:	6014      	str	r4, [r2, #0]
	list->tail = node;
    f8d0:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    f8d2:	2001      	movs	r0, #1
    f8d4:	f7ff fe6c 	bl	f5b0 <update_cache>
    f8d8:	e7c1      	b.n	f85e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    f8da:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    f8dc:	6063      	str	r3, [r4, #4]
	node->next = successor;
    f8de:	6025      	str	r5, [r4, #0]
	prev->next = node;
    f8e0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    f8e2:	606c      	str	r4, [r5, #4]
}
    f8e4:	e7f5      	b.n	f8d2 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f8e6:	2500      	movs	r5, #0
    f8e8:	e7dc      	b.n	f8a4 <z_set_prio+0x6c>
}
    f8ea:	4640      	mov	r0, r8
    f8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f8f0:	20020ec0 	.word	0x20020ec0
    f8f4:	20020ee0 	.word	0x20020ee0

0000f8f8 <z_impl_k_thread_suspend>:
{
    f8f8:	b538      	push	{r3, r4, r5, lr}
    f8fa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    f8fc:	3018      	adds	r0, #24
    f8fe:	f006 fad4 	bl	15eaa <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    f902:	2300      	movs	r3, #0
	__asm__ volatile(
    f904:	f04f 0220 	mov.w	r2, #32
    f908:	f3ef 8511 	mrs	r5, BASEPRI
    f90c:	f382 8812 	msr	BASEPRI_MAX, r2
    f910:	f3bf 8f6f 	isb	sy
    f914:	e010      	b.n	f938 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f916:	7b63      	ldrb	r3, [r4, #13]
    f918:	f043 0310 	orr.w	r3, r3, #16
    f91c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    f91e:	4b15      	ldr	r3, [pc, #84]	; (f974 <z_impl_k_thread_suspend+0x7c>)
    f920:	6898      	ldr	r0, [r3, #8]
    f922:	42a0      	cmp	r0, r4
    f924:	bf14      	ite	ne
    f926:	2000      	movne	r0, #0
    f928:	2001      	moveq	r0, #1
    f92a:	f7ff fe41 	bl	f5b0 <update_cache>
	__asm__ volatile(
    f92e:	f385 8811 	msr	BASEPRI, r5
    f932:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f936:	2301      	movs	r3, #1
    f938:	b963      	cbnz	r3, f954 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    f93a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    f93c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    f940:	2b00      	cmp	r3, #0
    f942:	dae8      	bge.n	f916 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f948:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    f94a:	4621      	mov	r1, r4
    f94c:	480a      	ldr	r0, [pc, #40]	; (f978 <z_impl_k_thread_suspend+0x80>)
    f94e:	f006 f9c0 	bl	15cd2 <z_priq_dumb_remove>
}
    f952:	e7e0      	b.n	f916 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    f954:	4b07      	ldr	r3, [pc, #28]	; (f974 <z_impl_k_thread_suspend+0x7c>)
    f956:	689b      	ldr	r3, [r3, #8]
    f958:	42a3      	cmp	r3, r4
    f95a:	d000      	beq.n	f95e <z_impl_k_thread_suspend+0x66>
}
    f95c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f95e:	f04f 0320 	mov.w	r3, #32
    f962:	f3ef 8011 	mrs	r0, BASEPRI
    f966:	f383 8812 	msr	BASEPRI_MAX, r3
    f96a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f96e:	f006 f99b 	bl	15ca8 <z_reschedule_irqlock>
    f972:	e7f3      	b.n	f95c <z_impl_k_thread_suspend+0x64>
    f974:	20020ec0 	.word	0x20020ec0
    f978:	20020ee0 	.word	0x20020ee0

0000f97c <k_sched_unlock>:

void k_sched_unlock(void)
{
    f97c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    f97e:	2300      	movs	r3, #0
    f980:	f04f 0220 	mov.w	r2, #32
    f984:	f3ef 8411 	mrs	r4, BASEPRI
    f988:	f382 8812 	msr	BASEPRI_MAX, r2
    f98c:	f3bf 8f6f 	isb	sy
    f990:	b96b      	cbnz	r3, f9ae <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    f992:	4b0c      	ldr	r3, [pc, #48]	; (f9c4 <k_sched_unlock+0x48>)
    f994:	689a      	ldr	r2, [r3, #8]
    f996:	7bd3      	ldrb	r3, [r2, #15]
    f998:	3301      	adds	r3, #1
    f99a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    f99c:	2000      	movs	r0, #0
    f99e:	f7ff fe07 	bl	f5b0 <update_cache>
	__asm__ volatile(
    f9a2:	f384 8811 	msr	BASEPRI, r4
    f9a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f9aa:	2301      	movs	r3, #1
    f9ac:	e7f0      	b.n	f990 <k_sched_unlock+0x14>
	__asm__ volatile(
    f9ae:	f04f 0320 	mov.w	r3, #32
    f9b2:	f3ef 8011 	mrs	r0, BASEPRI
    f9b6:	f383 8812 	msr	BASEPRI_MAX, r3
    f9ba:	f3bf 8f6f 	isb	sy
    f9be:	f006 f973 	bl	15ca8 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    f9c2:	bd10      	pop	{r4, pc}
    f9c4:	20020ec0 	.word	0x20020ec0

0000f9c8 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    f9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    f9ca:	7b43      	ldrb	r3, [r0, #13]
    f9cc:	f013 0f08 	tst.w	r3, #8
    f9d0:	d145      	bne.n	fa5e <end_thread+0x96>
    f9d2:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    f9d4:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f9d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    f9dc:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    f9de:	f013 0f80 	tst.w	r3, #128	; 0x80
    f9e2:	d114      	bne.n	fa0e <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    f9e4:	68ab      	ldr	r3, [r5, #8]
    f9e6:	b15b      	cbz	r3, fa00 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f9e8:	4628      	mov	r0, r5
    f9ea:	f006 f951 	bl	15c90 <pended_on_thread>
    f9ee:	4629      	mov	r1, r5
    f9f0:	f006 f96f 	bl	15cd2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f9f4:	7b6b      	ldrb	r3, [r5, #13]
    f9f6:	f023 0302 	bic.w	r3, r3, #2
    f9fa:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    f9fc:	2300      	movs	r3, #0
    f9fe:	60ab      	str	r3, [r5, #8]
    fa00:	f105 0018 	add.w	r0, r5, #24
    fa04:	f006 fa51 	bl	15eaa <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    fa08:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fa0c:	e01c      	b.n	fa48 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fa0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fa12:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    fa14:	4601      	mov	r1, r0
    fa16:	4812      	ldr	r0, [pc, #72]	; (fa60 <end_thread+0x98>)
    fa18:	f006 f95b 	bl	15cd2 <z_priq_dumb_remove>
}
    fa1c:	e7e2      	b.n	f9e4 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fa1e:	4620      	mov	r0, r4
    fa20:	f006 f936 	bl	15c90 <pended_on_thread>
    fa24:	4621      	mov	r1, r4
    fa26:	f006 f954 	bl	15cd2 <z_priq_dumb_remove>
    fa2a:	7b63      	ldrb	r3, [r4, #13]
    fa2c:	f023 0302 	bic.w	r3, r3, #2
    fa30:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    fa32:	2600      	movs	r6, #0
    fa34:	60a6      	str	r6, [r4, #8]
    fa36:	f104 0018 	add.w	r0, r4, #24
    fa3a:	f006 fa36 	bl	15eaa <z_abort_timeout>
    fa3e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    fa42:	4620      	mov	r0, r4
    fa44:	f7ff fe6a 	bl	f71c <ready_thread>
	return list->head == list;
    fa48:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa4a:	42bc      	cmp	r4, r7
    fa4c:	d001      	beq.n	fa52 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fa4e:	2c00      	cmp	r4, #0
    fa50:	d1e5      	bne.n	fa1e <end_thread+0x56>
		update_cache(1);
    fa52:	2001      	movs	r0, #1
    fa54:	f7ff fdac 	bl	f5b0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    fa58:	4628      	mov	r0, r5
    fa5a:	f7ff fb05 	bl	f068 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    fa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa60:	20020ee0 	.word	0x20020ee0

0000fa64 <z_sched_init>:
{
    fa64:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    fa66:	4b05      	ldr	r3, [pc, #20]	; (fa7c <z_sched_init+0x18>)
    fa68:	f103 0220 	add.w	r2, r3, #32
    fa6c:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    fa6e:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    fa70:	2100      	movs	r1, #0
    fa72:	4608      	mov	r0, r1
    fa74:	f7ff fd2c 	bl	f4d0 <k_sched_time_slice_set>
}
    fa78:	bd08      	pop	{r3, pc}
    fa7a:	bf00      	nop
    fa7c:	20020ec0 	.word	0x20020ec0

0000fa80 <z_impl_k_yield>:
{
    fa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa82:	f04f 0320 	mov.w	r3, #32
    fa86:	f3ef 8611 	mrs	r6, BASEPRI
    fa8a:	f383 8812 	msr	BASEPRI_MAX, r3
    fa8e:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    fa92:	4c1c      	ldr	r4, [pc, #112]	; (fb04 <z_impl_k_yield+0x84>)
    fa94:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fa96:	7b4b      	ldrb	r3, [r1, #13]
    fa98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fa9c:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    fa9e:	f104 0720 	add.w	r7, r4, #32
    faa2:	4638      	mov	r0, r7
    faa4:	f006 f915 	bl	15cd2 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    faa8:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    faaa:	7b6b      	ldrb	r3, [r5, #13]
    faac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fab0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    fab2:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fab4:	42bc      	cmp	r4, r7
    fab6:	d023      	beq.n	fb00 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fab8:	b16c      	cbz	r4, fad6 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    faba:	4621      	mov	r1, r4
    fabc:	4628      	mov	r0, r5
    fabe:	f006 f8e9 	bl	15c94 <z_sched_prio_cmp>
    fac2:	2800      	cmp	r0, #0
    fac4:	dc16      	bgt.n	faf4 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fac6:	b134      	cbz	r4, fad6 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    fac8:	4b0e      	ldr	r3, [pc, #56]	; (fb04 <z_impl_k_yield+0x84>)
    faca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    facc:	429c      	cmp	r4, r3
    face:	d002      	beq.n	fad6 <z_impl_k_yield+0x56>
    fad0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fad2:	2c00      	cmp	r4, #0
    fad4:	d1f0      	bne.n	fab8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    fad6:	4b0b      	ldr	r3, [pc, #44]	; (fb04 <z_impl_k_yield+0x84>)
    fad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fada:	f103 0120 	add.w	r1, r3, #32
    fade:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    fae0:	606a      	str	r2, [r5, #4]
	tail->next = node;
    fae2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    fae4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    fae6:	2001      	movs	r0, #1
    fae8:	f7ff fd62 	bl	f5b0 <update_cache>
    faec:	4630      	mov	r0, r6
    faee:	f7f4 fb49 	bl	4184 <arch_swap>
}
    faf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    faf4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    faf6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    faf8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    fafa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    fafc:	6065      	str	r5, [r4, #4]
}
    fafe:	e7f2      	b.n	fae6 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fb00:	2400      	movs	r4, #0
    fb02:	e7d9      	b.n	fab8 <z_impl_k_yield+0x38>
    fb04:	20020ec0 	.word	0x20020ec0

0000fb08 <z_tick_sleep>:
{
    fb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb0c:	4604      	mov	r4, r0
    fb0e:	460d      	mov	r5, r1
	if (ticks == 0) {
    fb10:	ea54 0105 	orrs.w	r1, r4, r5
    fb14:	d037      	beq.n	fb86 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    fb16:	f06f 0101 	mvn.w	r1, #1
    fb1a:	1a0a      	subs	r2, r1, r0
    fb1c:	f04f 31ff 	mov.w	r1, #4294967295
    fb20:	eb61 0305 	sbc.w	r3, r1, r5
    fb24:	2a01      	cmp	r2, #1
    fb26:	f173 0300 	sbcs.w	r3, r3, #0
    fb2a:	db30      	blt.n	fb8e <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    fb2c:	f06f 0601 	mvn.w	r6, #1
    fb30:	1a36      	subs	r6, r6, r0
    fb32:	f04f 0320 	mov.w	r3, #32
    fb36:	f3ef 8811 	mrs	r8, BASEPRI
    fb3a:	f383 8812 	msr	BASEPRI_MAX, r3
    fb3e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    fb42:	4f16      	ldr	r7, [pc, #88]	; (fb9c <z_tick_sleep+0x94>)
    fb44:	68b8      	ldr	r0, [r7, #8]
    fb46:	4b16      	ldr	r3, [pc, #88]	; (fba0 <z_tick_sleep+0x98>)
    fb48:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    fb4a:	f7ff fe45 	bl	f7d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    fb4e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    fb50:	4622      	mov	r2, r4
    fb52:	462b      	mov	r3, r5
    fb54:	4913      	ldr	r1, [pc, #76]	; (fba4 <z_tick_sleep+0x9c>)
    fb56:	3018      	adds	r0, #24
    fb58:	f000 f8e2 	bl	fd20 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    fb5c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fb5e:	7b53      	ldrb	r3, [r2, #13]
    fb60:	f043 0310 	orr.w	r3, r3, #16
    fb64:	7353      	strb	r3, [r2, #13]
    fb66:	4640      	mov	r0, r8
    fb68:	f7f4 fb0c 	bl	4184 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    fb6c:	2500      	movs	r5, #0
    fb6e:	f006 f9fb 	bl	15f68 <sys_clock_tick_get_32>
    fb72:	1a34      	subs	r4, r6, r0
    fb74:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    fb78:	2c01      	cmp	r4, #1
    fb7a:	f175 0300 	sbcs.w	r3, r5, #0
    fb7e:	da0a      	bge.n	fb96 <z_tick_sleep+0x8e>
	return 0;
    fb80:	2000      	movs	r0, #0
}
    fb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    fb86:	f7ff ff7b 	bl	fa80 <z_impl_k_yield>
		return 0;
    fb8a:	2000      	movs	r0, #0
    fb8c:	e7f9      	b.n	fb82 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    fb8e:	f006 f9eb 	bl	15f68 <sys_clock_tick_get_32>
    fb92:	1906      	adds	r6, r0, r4
    fb94:	e7cd      	b.n	fb32 <z_tick_sleep+0x2a>
		return ticks;
    fb96:	4620      	mov	r0, r4
    fb98:	e7f3      	b.n	fb82 <z_tick_sleep+0x7a>
    fb9a:	bf00      	nop
    fb9c:	20020ec0 	.word	0x20020ec0
    fba0:	20020ef4 	.word	0x20020ef4
    fba4:	00015d29 	.word	0x00015d29

0000fba8 <z_impl_k_sleep>:
{
    fba8:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fbaa:	f1b1 3fff 	cmp.w	r1, #4294967295
    fbae:	bf08      	it	eq
    fbb0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    fbb4:	d01a      	beq.n	fbec <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    fbb6:	f7ff ffa7 	bl	fb08 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    fbba:	4604      	mov	r4, r0
    fbbc:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    fbbe:	0169      	lsls	r1, r5, #5
    fbc0:	0143      	lsls	r3, r0, #5
    fbc2:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    fbc6:	1a18      	subs	r0, r3, r0
    fbc8:	eb62 0305 	sbc.w	r3, r2, r5
    fbcc:	009a      	lsls	r2, r3, #2
    fbce:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    fbd2:	0081      	lsls	r1, r0, #2
    fbd4:	4613      	mov	r3, r2
    fbd6:	1908      	adds	r0, r1, r4
    fbd8:	eb45 0303 	adc.w	r3, r5, r3
    fbdc:	00da      	lsls	r2, r3, #3
    fbde:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    fbe2:	00c1      	lsls	r1, r0, #3
    fbe4:	0bc8      	lsrs	r0, r1, #15
    fbe6:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    fbea:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    fbec:	4b03      	ldr	r3, [pc, #12]	; (fbfc <z_impl_k_sleep+0x54>)
    fbee:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    fbf0:	f7ff fe82 	bl	f8f8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    fbf4:	f04f 30ff 	mov.w	r0, #4294967295
    fbf8:	e7f7      	b.n	fbea <z_impl_k_sleep+0x42>
    fbfa:	bf00      	nop
    fbfc:	20020ec0 	.word	0x20020ec0

0000fc00 <z_impl_z_current_get>:
}
    fc00:	4b01      	ldr	r3, [pc, #4]	; (fc08 <z_impl_z_current_get+0x8>)
    fc02:	6898      	ldr	r0, [r3, #8]
    fc04:	4770      	bx	lr
    fc06:	bf00      	nop
    fc08:	20020ec0 	.word	0x20020ec0

0000fc0c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    fc0c:	b538      	push	{r3, r4, r5, lr}
    fc0e:	f04f 0320 	mov.w	r3, #32
    fc12:	f3ef 8511 	mrs	r5, BASEPRI
    fc16:	f383 8812 	msr	BASEPRI_MAX, r3
    fc1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    fc1e:	7b43      	ldrb	r3, [r0, #13]
    fc20:	f013 0f08 	tst.w	r3, #8
    fc24:	d004      	beq.n	fc30 <z_thread_abort+0x24>
	__asm__ volatile(
    fc26:	f385 8811 	msr	BASEPRI, r5
    fc2a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    fc2e:	bd38      	pop	{r3, r4, r5, pc}
    fc30:	4604      	mov	r4, r0
	end_thread(thread);
    fc32:	f7ff fec9 	bl	f9c8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    fc36:	4b08      	ldr	r3, [pc, #32]	; (fc58 <z_thread_abort+0x4c>)
    fc38:	689b      	ldr	r3, [r3, #8]
    fc3a:	42a3      	cmp	r3, r4
    fc3c:	d004      	beq.n	fc48 <z_thread_abort+0x3c>
    fc3e:	f385 8811 	msr	BASEPRI, r5
    fc42:	f3bf 8f6f 	isb	sy
    fc46:	e7f2      	b.n	fc2e <z_thread_abort+0x22>
    fc48:	f3ef 8305 	mrs	r3, IPSR
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	d1f6      	bne.n	fc3e <z_thread_abort+0x32>
    fc50:	4628      	mov	r0, r5
    fc52:	f7f4 fa97 	bl	4184 <arch_swap>
	return ret;
    fc56:	e7f2      	b.n	fc3e <z_thread_abort+0x32>
    fc58:	20020ec0 	.word	0x20020ec0

0000fc5c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    fc5c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    fc5e:	4806      	ldr	r0, [pc, #24]	; (fc78 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    fc60:	4a06      	ldr	r2, [pc, #24]	; (fc7c <z_data_copy+0x20>)
    fc62:	1a12      	subs	r2, r2, r0
    fc64:	4906      	ldr	r1, [pc, #24]	; (fc80 <z_data_copy+0x24>)
    fc66:	f006 f9b8 	bl	15fda <memcpy>
    fc6a:	4a06      	ldr	r2, [pc, #24]	; (fc84 <z_data_copy+0x28>)
    fc6c:	4906      	ldr	r1, [pc, #24]	; (fc88 <z_data_copy+0x2c>)
    fc6e:	4807      	ldr	r0, [pc, #28]	; (fc8c <z_data_copy+0x30>)
    fc70:	f006 f9b3 	bl	15fda <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    fc74:	bd08      	pop	{r3, pc}
    fc76:	bf00      	nop
    fc78:	20000000 	.word	0x20000000
    fc7c:	20000370 	.word	0x20000370
    fc80:	0006bc60 	.word	0x0006bc60
    fc84:	00000000 	.word	0x00000000
    fc88:	0006bc60 	.word	0x0006bc60
    fc8c:	20000000 	.word	0x20000000

0000fc90 <first>:
	return list->head == list;
    fc90:	4b03      	ldr	r3, [pc, #12]	; (fca0 <first+0x10>)
    fc92:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc94:	4298      	cmp	r0, r3
    fc96:	d000      	beq.n	fc9a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    fc98:	4770      	bx	lr
    fc9a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    fc9c:	e7fc      	b.n	fc98 <first+0x8>
    fc9e:	bf00      	nop
    fca0:	20000090 	.word	0x20000090

0000fca4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fca4:	b130      	cbz	r0, fcb4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    fca6:	4a04      	ldr	r2, [pc, #16]	; (fcb8 <next+0x14>)
    fca8:	6852      	ldr	r2, [r2, #4]
    fcaa:	4290      	cmp	r0, r2
    fcac:	d001      	beq.n	fcb2 <next+0xe>
    fcae:	6800      	ldr	r0, [r0, #0]
    fcb0:	4770      	bx	lr
    fcb2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    fcb4:	4770      	bx	lr
    fcb6:	bf00      	nop
    fcb8:	20000090 	.word	0x20000090

0000fcbc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    fcbc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    fcbe:	4b04      	ldr	r3, [pc, #16]	; (fcd0 <elapsed+0x14>)
    fcc0:	681b      	ldr	r3, [r3, #0]
    fcc2:	b10b      	cbz	r3, fcc8 <elapsed+0xc>
    fcc4:	2000      	movs	r0, #0
}
    fcc6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    fcc8:	f7f5 fecc 	bl	5a64 <sys_clock_elapsed>
    fccc:	e7fb      	b.n	fcc6 <elapsed+0xa>
    fcce:	bf00      	nop
    fcd0:	20020f04 	.word	0x20020f04

0000fcd4 <next_timeout>:

static int32_t next_timeout(void)
{
    fcd4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    fcd6:	f7ff ffdb 	bl	fc90 <first>
    fcda:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    fcdc:	f7ff ffee 	bl	fcbc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    fce0:	b18c      	cbz	r4, fd06 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fce2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    fce6:	1a12      	subs	r2, r2, r0
    fce8:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    fcec:	2a01      	cmp	r2, #1
    fcee:	f173 0100 	sbcs.w	r1, r3, #0
    fcf2:	db11      	blt.n	fd18 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fcf4:	4610      	mov	r0, r2
    fcf6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fcfa:	f173 0300 	sbcs.w	r3, r3, #0
    fcfe:	db04      	blt.n	fd0a <next_timeout+0x36>
    fd00:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fd04:	e001      	b.n	fd0a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    fd06:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    fd0a:	4b04      	ldr	r3, [pc, #16]	; (fd1c <next_timeout+0x48>)
    fd0c:	691b      	ldr	r3, [r3, #16]
    fd0e:	b113      	cbz	r3, fd16 <next_timeout+0x42>
    fd10:	4283      	cmp	r3, r0
    fd12:	da00      	bge.n	fd16 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    fd14:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    fd16:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    fd18:	2000      	movs	r0, #0
    fd1a:	e7f6      	b.n	fd0a <next_timeout+0x36>
    fd1c:	20020ec0 	.word	0x20020ec0

0000fd20 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    fd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd24:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fd26:	f1b3 3fff 	cmp.w	r3, #4294967295
    fd2a:	bf08      	it	eq
    fd2c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    fd30:	f000 8096 	beq.w	fe60 <z_add_timeout+0x140>
    fd34:	4682      	mov	sl, r0
    fd36:	4614      	mov	r4, r2
    fd38:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    fd3a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    fd3c:	2300      	movs	r3, #0
	__asm__ volatile(
    fd3e:	f04f 0220 	mov.w	r2, #32
    fd42:	f3ef 8b11 	mrs	fp, BASEPRI
    fd46:	f382 8812 	msr	BASEPRI_MAX, r2
    fd4a:	f3bf 8f6f 	isb	sy
    fd4e:	e02e      	b.n	fdae <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    fd50:	2201      	movs	r2, #1
    fd52:	2300      	movs	r3, #0
    fd54:	e04b      	b.n	fdee <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    fd56:	f7ff ffb1 	bl	fcbc <elapsed>
    fd5a:	1822      	adds	r2, r4, r0
    fd5c:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    fd60:	3201      	adds	r2, #1
    fd62:	f143 0300 	adc.w	r3, r3, #0
    fd66:	f8ca 2010 	str.w	r2, [sl, #16]
    fd6a:	f8ca 3014 	str.w	r3, [sl, #20]
    fd6e:	e042      	b.n	fdf6 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    fd70:	9b00      	ldr	r3, [sp, #0]
    fd72:	1ac2      	subs	r2, r0, r3
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	eb61 0303 	sbc.w	r3, r1, r3
    fd7a:	f8cc 2010 	str.w	r2, [ip, #16]
    fd7e:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    fd82:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    fd86:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    fd8a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    fd8e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    fd92:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    fd96:	f1bc 0f00 	cmp.w	ip, #0
    fd9a:	d049      	beq.n	fe30 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    fd9c:	f7ff ff78 	bl	fc90 <first>
    fda0:	4582      	cmp	sl, r0
    fda2:	d050      	beq.n	fe46 <z_add_timeout+0x126>
	__asm__ volatile(
    fda4:	f38b 8811 	msr	BASEPRI, fp
    fda8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    fdac:	2301      	movs	r3, #1
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d156      	bne.n	fe60 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    fdb2:	f06f 0301 	mvn.w	r3, #1
    fdb6:	ebb3 0804 	subs.w	r8, r3, r4
    fdba:	f04f 30ff 	mov.w	r0, #4294967295
    fdbe:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    fdc2:	f1b8 0f00 	cmp.w	r8, #0
    fdc6:	f179 0300 	sbcs.w	r3, r9, #0
    fdca:	dbc4      	blt.n	fd56 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    fdcc:	4a26      	ldr	r2, [pc, #152]	; (fe68 <z_add_timeout+0x148>)
    fdce:	6813      	ldr	r3, [r2, #0]
    fdd0:	6852      	ldr	r2, [r2, #4]
    fdd2:	18e3      	adds	r3, r4, r3
    fdd4:	eb45 0202 	adc.w	r2, r5, r2
    fdd8:	f06f 0101 	mvn.w	r1, #1
    fddc:	1ace      	subs	r6, r1, r3
    fdde:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    fde2:	4632      	mov	r2, r6
    fde4:	463b      	mov	r3, r7
    fde6:	2e01      	cmp	r6, #1
    fde8:	f177 0100 	sbcs.w	r1, r7, #0
    fdec:	dbb0      	blt.n	fd50 <z_add_timeout+0x30>
    fdee:	f8ca 2010 	str.w	r2, [sl, #16]
    fdf2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    fdf6:	f7ff ff4b 	bl	fc90 <first>
    fdfa:	4684      	mov	ip, r0
    fdfc:	f1bc 0f00 	cmp.w	ip, #0
    fe00:	d0c9      	beq.n	fd96 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    fe02:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    fe06:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    fe0a:	e9cd 2300 	strd	r2, r3, [sp]
    fe0e:	4282      	cmp	r2, r0
    fe10:	418b      	sbcs	r3, r1
    fe12:	dbad      	blt.n	fd70 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    fe14:	9b00      	ldr	r3, [sp, #0]
    fe16:	1a1a      	subs	r2, r3, r0
    fe18:	9b01      	ldr	r3, [sp, #4]
    fe1a:	eb63 0301 	sbc.w	r3, r3, r1
    fe1e:	f8ca 2010 	str.w	r2, [sl, #16]
    fe22:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    fe26:	4660      	mov	r0, ip
    fe28:	f7ff ff3c 	bl	fca4 <next>
    fe2c:	4684      	mov	ip, r0
    fe2e:	e7e5      	b.n	fdfc <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    fe30:	4b0e      	ldr	r3, [pc, #56]	; (fe6c <z_add_timeout+0x14c>)
    fe32:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    fe34:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    fe38:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    fe3c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    fe40:	f8c3 a004 	str.w	sl, [r3, #4]
}
    fe44:	e7aa      	b.n	fd9c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    fe46:	f7ff ff45 	bl	fcd4 <next_timeout>

			if (next_time == 0 ||
    fe4a:	4603      	mov	r3, r0
    fe4c:	b118      	cbz	r0, fe56 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    fe4e:	4a08      	ldr	r2, [pc, #32]	; (fe70 <z_add_timeout+0x150>)
    fe50:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    fe52:	4282      	cmp	r2, r0
    fe54:	d0a6      	beq.n	fda4 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    fe56:	2100      	movs	r1, #0
    fe58:	4618      	mov	r0, r3
    fe5a:	f7f5 fdcf 	bl	59fc <sys_clock_set_timeout>
    fe5e:	e7a1      	b.n	fda4 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    fe60:	b003      	add	sp, #12
    fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe66:	bf00      	nop
    fe68:	200004f0 	.word	0x200004f0
    fe6c:	20000090 	.word	0x20000090
    fe70:	20020ec0 	.word	0x20020ec0

0000fe74 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    fe74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe76:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    fe78:	f7ff fc04 	bl	f684 <z_time_slice>
	__asm__ volatile(
    fe7c:	f04f 0320 	mov.w	r3, #32
    fe80:	f3ef 8511 	mrs	r5, BASEPRI
    fe84:	f383 8812 	msr	BASEPRI_MAX, r3
    fe88:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    fe8c:	4b28      	ldr	r3, [pc, #160]	; (ff30 <sys_clock_announce+0xbc>)
    fe8e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    fe90:	f7ff fefe 	bl	fc90 <first>
    fe94:	4604      	mov	r4, r0
    fe96:	b350      	cbz	r0, feee <sys_clock_announce+0x7a>
    fe98:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    fe9c:	4b24      	ldr	r3, [pc, #144]	; (ff30 <sys_clock_announce+0xbc>)
    fe9e:	681b      	ldr	r3, [r3, #0]
    fea0:	17d9      	asrs	r1, r3, #31
    fea2:	42b3      	cmp	r3, r6
    fea4:	eb71 0207 	sbcs.w	r2, r1, r7
    fea8:	db21      	blt.n	feee <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    feaa:	4a22      	ldr	r2, [pc, #136]	; (ff34 <sys_clock_announce+0xc0>)
    feac:	e9d2 0100 	ldrd	r0, r1, [r2]
    feb0:	1980      	adds	r0, r0, r6
    feb2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    feb6:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    feba:	1b9b      	subs	r3, r3, r6
    febc:	4a1c      	ldr	r2, [pc, #112]	; (ff30 <sys_clock_announce+0xbc>)
    febe:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    fec0:	2200      	movs	r2, #0
    fec2:	2300      	movs	r3, #0
    fec4:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    fec8:	4620      	mov	r0, r4
    feca:	f005 ffd7 	bl	15e7c <remove_timeout>
	__asm__ volatile(
    fece:	f385 8811 	msr	BASEPRI, r5
    fed2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    fed6:	68a3      	ldr	r3, [r4, #8]
    fed8:	4620      	mov	r0, r4
    feda:	4798      	blx	r3
	__asm__ volatile(
    fedc:	f04f 0320 	mov.w	r3, #32
    fee0:	f3ef 8511 	mrs	r5, BASEPRI
    fee4:	f383 8812 	msr	BASEPRI_MAX, r3
    fee8:	f3bf 8f6f 	isb	sy
    feec:	e7d0      	b.n	fe90 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    feee:	b144      	cbz	r4, ff02 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    fef0:	4b0f      	ldr	r3, [pc, #60]	; (ff30 <sys_clock_announce+0xbc>)
    fef2:	6819      	ldr	r1, [r3, #0]
    fef4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    fef8:	1a52      	subs	r2, r2, r1
    fefa:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    fefe:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    ff02:	480c      	ldr	r0, [pc, #48]	; (ff34 <sys_clock_announce+0xc0>)
    ff04:	490a      	ldr	r1, [pc, #40]	; (ff30 <sys_clock_announce+0xbc>)
    ff06:	680c      	ldr	r4, [r1, #0]
    ff08:	e9d0 2300 	ldrd	r2, r3, [r0]
    ff0c:	1912      	adds	r2, r2, r4
    ff0e:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    ff12:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    ff16:	2400      	movs	r4, #0
    ff18:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    ff1a:	f7ff fedb 	bl	fcd4 <next_timeout>
    ff1e:	4621      	mov	r1, r4
    ff20:	f7f5 fd6c 	bl	59fc <sys_clock_set_timeout>
	__asm__ volatile(
    ff24:	f385 8811 	msr	BASEPRI, r5
    ff28:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    ff2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff2e:	bf00      	nop
    ff30:	20020f04 	.word	0x20020f04
    ff34:	200004f0 	.word	0x200004f0

0000ff38 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    ff38:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    ff3a:	2100      	movs	r1, #0
	__asm__ volatile(
    ff3c:	f04f 0320 	mov.w	r3, #32
    ff40:	f3ef 8411 	mrs	r4, BASEPRI
    ff44:	f383 8812 	msr	BASEPRI_MAX, r3
    ff48:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    ff4c:	2200      	movs	r2, #0
    ff4e:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    ff50:	b969      	cbnz	r1, ff6e <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    ff52:	f7f5 fd87 	bl	5a64 <sys_clock_elapsed>
    ff56:	4b07      	ldr	r3, [pc, #28]	; (ff74 <sys_clock_tick_get+0x3c>)
    ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff5c:	1812      	adds	r2, r2, r0
    ff5e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    ff62:	f384 8811 	msr	BASEPRI, r4
    ff66:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ff6a:	2101      	movs	r1, #1
    ff6c:	e7f0      	b.n	ff50 <sys_clock_tick_get+0x18>
	}
	return t;
}
    ff6e:	4610      	mov	r0, r2
    ff70:	4619      	mov	r1, r3
    ff72:	bd10      	pop	{r4, pc}
    ff74:	200004f0 	.word	0x200004f0

0000ff78 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    ff78:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    ff7a:	4a03      	ldr	r2, [pc, #12]	; (ff88 <boot_banner+0x10>)
    ff7c:	4903      	ldr	r1, [pc, #12]	; (ff8c <boot_banner+0x14>)
    ff7e:	4804      	ldr	r0, [pc, #16]	; (ff90 <boot_banner+0x18>)
    ff80:	f001 febb 	bl	11cfa <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    ff84:	bd08      	pop	{r3, pc}
    ff86:	bf00      	nop
    ff88:	00068800 	.word	0x00068800
    ff8c:	0006b978 	.word	0x0006b978
    ff90:	0006b984 	.word	0x0006b984

0000ff94 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    ff94:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ff96:	4c06      	ldr	r4, [pc, #24]	; (ffb0 <statics_init+0x1c>)
    ff98:	4b06      	ldr	r3, [pc, #24]	; (ffb4 <statics_init+0x20>)
    ff9a:	429c      	cmp	r4, r3
    ff9c:	d206      	bcs.n	ffac <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ff9e:	68a2      	ldr	r2, [r4, #8]
    ffa0:	6861      	ldr	r1, [r4, #4]
    ffa2:	4620      	mov	r0, r4
    ffa4:	f005 ffee 	bl	15f84 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ffa8:	3418      	adds	r4, #24
    ffaa:	e7f5      	b.n	ff98 <statics_init+0x4>
		}
	}
	return 0;
}
    ffac:	2000      	movs	r0, #0
    ffae:	bd10      	pop	{r4, pc}
    ffb0:	200002e4 	.word	0x200002e4
    ffb4:	200002e4 	.word	0x200002e4

0000ffb8 <nrf_cc3xx_platform_init_no_rng>:
    ffb8:	b510      	push	{r4, lr}
    ffba:	4c0a      	ldr	r4, [pc, #40]	; (ffe4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    ffbc:	6823      	ldr	r3, [r4, #0]
    ffbe:	b11b      	cbz	r3, ffc8 <nrf_cc3xx_platform_init_no_rng+0x10>
    ffc0:	2301      	movs	r3, #1
    ffc2:	6023      	str	r3, [r4, #0]
    ffc4:	2000      	movs	r0, #0
    ffc6:	bd10      	pop	{r4, pc}
    ffc8:	f000 f8d6 	bl	10178 <CC_LibInitNoRng>
    ffcc:	2800      	cmp	r0, #0
    ffce:	d0f7      	beq.n	ffc0 <nrf_cc3xx_platform_init_no_rng+0x8>
    ffd0:	3801      	subs	r0, #1
    ffd2:	2806      	cmp	r0, #6
    ffd4:	d803      	bhi.n	ffde <nrf_cc3xx_platform_init_no_rng+0x26>
    ffd6:	4b04      	ldr	r3, [pc, #16]	; (ffe8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    ffd8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ffdc:	bd10      	pop	{r4, pc}
    ffde:	4803      	ldr	r0, [pc, #12]	; (ffec <nrf_cc3xx_platform_init_no_rng+0x34>)
    ffe0:	bd10      	pop	{r4, pc}
    ffe2:	bf00      	nop
    ffe4:	20020f08 	.word	0x20020f08
    ffe8:	0006b9ac 	.word	0x0006b9ac
    ffec:	ffff8ffe 	.word	0xffff8ffe

0000fff0 <nrf_cc3xx_platform_abort>:
    fff0:	f3bf 8f4f 	dsb	sy
    fff4:	4905      	ldr	r1, [pc, #20]	; (1000c <nrf_cc3xx_platform_abort+0x1c>)
    fff6:	4b06      	ldr	r3, [pc, #24]	; (10010 <nrf_cc3xx_platform_abort+0x20>)
    fff8:	68ca      	ldr	r2, [r1, #12]
    fffa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fffe:	4313      	orrs	r3, r2
   10000:	60cb      	str	r3, [r1, #12]
   10002:	f3bf 8f4f 	dsb	sy
   10006:	bf00      	nop
   10008:	e7fd      	b.n	10006 <nrf_cc3xx_platform_abort+0x16>
   1000a:	bf00      	nop
   1000c:	e000ed00 	.word	0xe000ed00
   10010:	05fa0004 	.word	0x05fa0004

00010014 <CC_PalAbort>:
   10014:	b4f0      	push	{r4, r5, r6, r7}
   10016:	4f09      	ldr	r7, [pc, #36]	; (1003c <CC_PalAbort+0x28>)
   10018:	4e09      	ldr	r6, [pc, #36]	; (10040 <CC_PalAbort+0x2c>)
   1001a:	4c0a      	ldr	r4, [pc, #40]	; (10044 <CC_PalAbort+0x30>)
   1001c:	4a0a      	ldr	r2, [pc, #40]	; (10048 <CC_PalAbort+0x34>)
   1001e:	4d0b      	ldr	r5, [pc, #44]	; (1004c <CC_PalAbort+0x38>)
   10020:	490b      	ldr	r1, [pc, #44]	; (10050 <CC_PalAbort+0x3c>)
   10022:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   10026:	603b      	str	r3, [r7, #0]
   10028:	6852      	ldr	r2, [r2, #4]
   1002a:	6033      	str	r3, [r6, #0]
   1002c:	6023      	str	r3, [r4, #0]
   1002e:	2400      	movs	r4, #0
   10030:	602b      	str	r3, [r5, #0]
   10032:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   10036:	bcf0      	pop	{r4, r5, r6, r7}
   10038:	4710      	bx	r2
   1003a:	bf00      	nop
   1003c:	5002b400 	.word	0x5002b400
   10040:	5002b404 	.word	0x5002b404
   10044:	5002b408 	.word	0x5002b408
   10048:	20000098 	.word	0x20000098
   1004c:	5002b40c 	.word	0x5002b40c
   10050:	5002a000 	.word	0x5002a000

00010054 <nrf_cc3xx_platform_set_abort>:
   10054:	e9d0 1200 	ldrd	r1, r2, [r0]
   10058:	4b01      	ldr	r3, [pc, #4]	; (10060 <nrf_cc3xx_platform_set_abort+0xc>)
   1005a:	e9c3 1200 	strd	r1, r2, [r3]
   1005e:	4770      	bx	lr
   10060:	20000098 	.word	0x20000098

00010064 <mutex_free>:
   10064:	b510      	push	{r4, lr}
   10066:	4604      	mov	r4, r0
   10068:	b130      	cbz	r0, 10078 <mutex_free+0x14>
   1006a:	6863      	ldr	r3, [r4, #4]
   1006c:	06db      	lsls	r3, r3, #27
   1006e:	d502      	bpl.n	10076 <mutex_free+0x12>
   10070:	2300      	movs	r3, #0
   10072:	6023      	str	r3, [r4, #0]
   10074:	6063      	str	r3, [r4, #4]
   10076:	bd10      	pop	{r4, pc}
   10078:	4b02      	ldr	r3, [pc, #8]	; (10084 <mutex_free+0x20>)
   1007a:	4803      	ldr	r0, [pc, #12]	; (10088 <mutex_free+0x24>)
   1007c:	685b      	ldr	r3, [r3, #4]
   1007e:	4798      	blx	r3
   10080:	e7f3      	b.n	1006a <mutex_free+0x6>
   10082:	bf00      	nop
   10084:	20000098 	.word	0x20000098
   10088:	0006b9c8 	.word	0x0006b9c8

0001008c <mutex_unlock>:
   1008c:	b168      	cbz	r0, 100aa <mutex_unlock+0x1e>
   1008e:	6843      	ldr	r3, [r0, #4]
   10090:	b13b      	cbz	r3, 100a2 <mutex_unlock+0x16>
   10092:	06db      	lsls	r3, r3, #27
   10094:	d507      	bpl.n	100a6 <mutex_unlock+0x1a>
   10096:	f3bf 8f5f 	dmb	sy
   1009a:	2300      	movs	r3, #0
   1009c:	6003      	str	r3, [r0, #0]
   1009e:	4618      	mov	r0, r3
   100a0:	4770      	bx	lr
   100a2:	4803      	ldr	r0, [pc, #12]	; (100b0 <mutex_unlock+0x24>)
   100a4:	4770      	bx	lr
   100a6:	4803      	ldr	r0, [pc, #12]	; (100b4 <mutex_unlock+0x28>)
   100a8:	4770      	bx	lr
   100aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   100ae:	4770      	bx	lr
   100b0:	ffff8fea 	.word	0xffff8fea
   100b4:	ffff8fe9 	.word	0xffff8fe9

000100b8 <mutex_init>:
   100b8:	b510      	push	{r4, lr}
   100ba:	4604      	mov	r4, r0
   100bc:	b120      	cbz	r0, 100c8 <mutex_init+0x10>
   100be:	2200      	movs	r2, #0
   100c0:	2311      	movs	r3, #17
   100c2:	6022      	str	r2, [r4, #0]
   100c4:	6063      	str	r3, [r4, #4]
   100c6:	bd10      	pop	{r4, pc}
   100c8:	4801      	ldr	r0, [pc, #4]	; (100d0 <mutex_init+0x18>)
   100ca:	f7ff ffa3 	bl	10014 <CC_PalAbort>
   100ce:	e7f6      	b.n	100be <mutex_init+0x6>
   100d0:	0006b9f0 	.word	0x0006b9f0

000100d4 <mutex_lock>:
   100d4:	b1c0      	cbz	r0, 10108 <mutex_lock+0x34>
   100d6:	6843      	ldr	r3, [r0, #4]
   100d8:	b1a3      	cbz	r3, 10104 <mutex_lock+0x30>
   100da:	06db      	lsls	r3, r3, #27
   100dc:	d510      	bpl.n	10100 <mutex_lock+0x2c>
   100de:	2201      	movs	r2, #1
   100e0:	f3bf 8f5b 	dmb	ish
   100e4:	e850 3f00 	ldrex	r3, [r0]
   100e8:	e840 2100 	strex	r1, r2, [r0]
   100ec:	2900      	cmp	r1, #0
   100ee:	d1f9      	bne.n	100e4 <mutex_lock+0x10>
   100f0:	f3bf 8f5b 	dmb	ish
   100f4:	2b01      	cmp	r3, #1
   100f6:	d0f3      	beq.n	100e0 <mutex_lock+0xc>
   100f8:	f3bf 8f5f 	dmb	sy
   100fc:	2000      	movs	r0, #0
   100fe:	4770      	bx	lr
   10100:	4803      	ldr	r0, [pc, #12]	; (10110 <mutex_lock+0x3c>)
   10102:	4770      	bx	lr
   10104:	4803      	ldr	r0, [pc, #12]	; (10114 <mutex_lock+0x40>)
   10106:	4770      	bx	lr
   10108:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1010c:	4770      	bx	lr
   1010e:	bf00      	nop
   10110:	ffff8fe9 	.word	0xffff8fe9
   10114:	ffff8fea 	.word	0xffff8fea

00010118 <nrf_cc3xx_platform_set_mutexes>:
   10118:	b570      	push	{r4, r5, r6, lr}
   1011a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1011e:	4c13      	ldr	r4, [pc, #76]	; (1016c <nrf_cc3xx_platform_set_mutexes+0x54>)
   10120:	4d13      	ldr	r5, [pc, #76]	; (10170 <nrf_cc3xx_platform_set_mutexes+0x58>)
   10122:	e9c4 2300 	strd	r2, r3, [r4]
   10126:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1012a:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1012e:	4b11      	ldr	r3, [pc, #68]	; (10174 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   10130:	6808      	ldr	r0, [r1, #0]
   10132:	6018      	str	r0, [r3, #0]
   10134:	6848      	ldr	r0, [r1, #4]
   10136:	6058      	str	r0, [r3, #4]
   10138:	6888      	ldr	r0, [r1, #8]
   1013a:	6098      	str	r0, [r3, #8]
   1013c:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   10140:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   10144:	60de      	str	r6, [r3, #12]
   10146:	6118      	str	r0, [r3, #16]
   10148:	06cb      	lsls	r3, r1, #27
   1014a:	d50d      	bpl.n	10168 <nrf_cc3xx_platform_set_mutexes+0x50>
   1014c:	2300      	movs	r3, #0
   1014e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   10152:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   10156:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1015a:	4790      	blx	r2
   1015c:	6823      	ldr	r3, [r4, #0]
   1015e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   10162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10166:	4718      	bx	r3
   10168:	bd70      	pop	{r4, r5, r6, pc}
   1016a:	bf00      	nop
   1016c:	200000a8 	.word	0x200000a8
   10170:	20020f30 	.word	0x20020f30
   10174:	200000b8 	.word	0x200000b8

00010178 <CC_LibInitNoRng>:
   10178:	b510      	push	{r4, lr}
   1017a:	f000 f833 	bl	101e4 <CC_HalInit>
   1017e:	b120      	cbz	r0, 1018a <CC_LibInitNoRng+0x12>
   10180:	2403      	movs	r4, #3
   10182:	f000 f867 	bl	10254 <CC_PalTerminate>
   10186:	4620      	mov	r0, r4
   10188:	bd10      	pop	{r4, pc}
   1018a:	f000 f835 	bl	101f8 <CC_PalInit>
   1018e:	b990      	cbnz	r0, 101b6 <CC_LibInitNoRng+0x3e>
   10190:	f000 f8b0 	bl	102f4 <CC_PalPowerSaveModeSelect>
   10194:	b990      	cbnz	r0, 101bc <CC_LibInitNoRng+0x44>
   10196:	4b0f      	ldr	r3, [pc, #60]	; (101d4 <CC_LibInitNoRng+0x5c>)
   10198:	681b      	ldr	r3, [r3, #0]
   1019a:	0e1b      	lsrs	r3, r3, #24
   1019c:	2bf0      	cmp	r3, #240	; 0xf0
   1019e:	d108      	bne.n	101b2 <CC_LibInitNoRng+0x3a>
   101a0:	4a0d      	ldr	r2, [pc, #52]	; (101d8 <CC_LibInitNoRng+0x60>)
   101a2:	4b0e      	ldr	r3, [pc, #56]	; (101dc <CC_LibInitNoRng+0x64>)
   101a4:	6812      	ldr	r2, [r2, #0]
   101a6:	429a      	cmp	r2, r3
   101a8:	d00a      	beq.n	101c0 <CC_LibInitNoRng+0x48>
   101aa:	2407      	movs	r4, #7
   101ac:	f000 f81c 	bl	101e8 <CC_HalTerminate>
   101b0:	e7e7      	b.n	10182 <CC_LibInitNoRng+0xa>
   101b2:	2406      	movs	r4, #6
   101b4:	e7fa      	b.n	101ac <CC_LibInitNoRng+0x34>
   101b6:	2404      	movs	r4, #4
   101b8:	4620      	mov	r0, r4
   101ba:	bd10      	pop	{r4, pc}
   101bc:	2400      	movs	r4, #0
   101be:	e7f5      	b.n	101ac <CC_LibInitNoRng+0x34>
   101c0:	2001      	movs	r0, #1
   101c2:	f000 f897 	bl	102f4 <CC_PalPowerSaveModeSelect>
   101c6:	4604      	mov	r4, r0
   101c8:	2800      	cmp	r0, #0
   101ca:	d1f7      	bne.n	101bc <CC_LibInitNoRng+0x44>
   101cc:	4b04      	ldr	r3, [pc, #16]	; (101e0 <CC_LibInitNoRng+0x68>)
   101ce:	6018      	str	r0, [r3, #0]
   101d0:	e7d9      	b.n	10186 <CC_LibInitNoRng+0xe>
   101d2:	bf00      	nop
   101d4:	5002b928 	.word	0x5002b928
   101d8:	5002ba24 	.word	0x5002ba24
   101dc:	20e00000 	.word	0x20e00000
   101e0:	5002ba0c 	.word	0x5002ba0c

000101e4 <CC_HalInit>:
   101e4:	2000      	movs	r0, #0
   101e6:	4770      	bx	lr

000101e8 <CC_HalTerminate>:
   101e8:	2000      	movs	r0, #0
   101ea:	4770      	bx	lr

000101ec <CC_HalMaskInterrupt>:
   101ec:	4b01      	ldr	r3, [pc, #4]	; (101f4 <CC_HalMaskInterrupt+0x8>)
   101ee:	6018      	str	r0, [r3, #0]
   101f0:	4770      	bx	lr
   101f2:	bf00      	nop
   101f4:	5002ba04 	.word	0x5002ba04

000101f8 <CC_PalInit>:
   101f8:	b510      	push	{r4, lr}
   101fa:	4811      	ldr	r0, [pc, #68]	; (10240 <CC_PalInit+0x48>)
   101fc:	f000 f848 	bl	10290 <CC_PalMutexCreate>
   10200:	b100      	cbz	r0, 10204 <CC_PalInit+0xc>
   10202:	bd10      	pop	{r4, pc}
   10204:	480f      	ldr	r0, [pc, #60]	; (10244 <CC_PalInit+0x4c>)
   10206:	f000 f843 	bl	10290 <CC_PalMutexCreate>
   1020a:	2800      	cmp	r0, #0
   1020c:	d1f9      	bne.n	10202 <CC_PalInit+0xa>
   1020e:	4c0e      	ldr	r4, [pc, #56]	; (10248 <CC_PalInit+0x50>)
   10210:	4620      	mov	r0, r4
   10212:	f000 f83d 	bl	10290 <CC_PalMutexCreate>
   10216:	2800      	cmp	r0, #0
   10218:	d1f3      	bne.n	10202 <CC_PalInit+0xa>
   1021a:	4b0c      	ldr	r3, [pc, #48]	; (1024c <CC_PalInit+0x54>)
   1021c:	480c      	ldr	r0, [pc, #48]	; (10250 <CC_PalInit+0x58>)
   1021e:	601c      	str	r4, [r3, #0]
   10220:	f000 f836 	bl	10290 <CC_PalMutexCreate>
   10224:	4601      	mov	r1, r0
   10226:	2800      	cmp	r0, #0
   10228:	d1eb      	bne.n	10202 <CC_PalInit+0xa>
   1022a:	f000 f82d 	bl	10288 <CC_PalDmaInit>
   1022e:	4604      	mov	r4, r0
   10230:	b108      	cbz	r0, 10236 <CC_PalInit+0x3e>
   10232:	4620      	mov	r0, r4
   10234:	bd10      	pop	{r4, pc}
   10236:	f000 f83f 	bl	102b8 <CC_PalPowerSaveModeInit>
   1023a:	4620      	mov	r0, r4
   1023c:	e7fa      	b.n	10234 <CC_PalInit+0x3c>
   1023e:	bf00      	nop
   10240:	200000f0 	.word	0x200000f0
   10244:	200000e4 	.word	0x200000e4
   10248:	200000ec 	.word	0x200000ec
   1024c:	200000f4 	.word	0x200000f4
   10250:	200000e8 	.word	0x200000e8

00010254 <CC_PalTerminate>:
   10254:	b508      	push	{r3, lr}
   10256:	4808      	ldr	r0, [pc, #32]	; (10278 <CC_PalTerminate+0x24>)
   10258:	f000 f824 	bl	102a4 <CC_PalMutexDestroy>
   1025c:	4807      	ldr	r0, [pc, #28]	; (1027c <CC_PalTerminate+0x28>)
   1025e:	f000 f821 	bl	102a4 <CC_PalMutexDestroy>
   10262:	4807      	ldr	r0, [pc, #28]	; (10280 <CC_PalTerminate+0x2c>)
   10264:	f000 f81e 	bl	102a4 <CC_PalMutexDestroy>
   10268:	4806      	ldr	r0, [pc, #24]	; (10284 <CC_PalTerminate+0x30>)
   1026a:	f000 f81b 	bl	102a4 <CC_PalMutexDestroy>
   1026e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10272:	f000 b80b 	b.w	1028c <CC_PalDmaTerminate>
   10276:	bf00      	nop
   10278:	200000f0 	.word	0x200000f0
   1027c:	200000e4 	.word	0x200000e4
   10280:	200000ec 	.word	0x200000ec
   10284:	200000e8 	.word	0x200000e8

00010288 <CC_PalDmaInit>:
   10288:	2000      	movs	r0, #0
   1028a:	4770      	bx	lr

0001028c <CC_PalDmaTerminate>:
   1028c:	4770      	bx	lr
   1028e:	bf00      	nop

00010290 <CC_PalMutexCreate>:
   10290:	b508      	push	{r3, lr}
   10292:	4b03      	ldr	r3, [pc, #12]	; (102a0 <CC_PalMutexCreate+0x10>)
   10294:	6802      	ldr	r2, [r0, #0]
   10296:	681b      	ldr	r3, [r3, #0]
   10298:	6810      	ldr	r0, [r2, #0]
   1029a:	4798      	blx	r3
   1029c:	2000      	movs	r0, #0
   1029e:	bd08      	pop	{r3, pc}
   102a0:	200000a8 	.word	0x200000a8

000102a4 <CC_PalMutexDestroy>:
   102a4:	b508      	push	{r3, lr}
   102a6:	4b03      	ldr	r3, [pc, #12]	; (102b4 <CC_PalMutexDestroy+0x10>)
   102a8:	6802      	ldr	r2, [r0, #0]
   102aa:	685b      	ldr	r3, [r3, #4]
   102ac:	6810      	ldr	r0, [r2, #0]
   102ae:	4798      	blx	r3
   102b0:	2000      	movs	r0, #0
   102b2:	bd08      	pop	{r3, pc}
   102b4:	200000a8 	.word	0x200000a8

000102b8 <CC_PalPowerSaveModeInit>:
   102b8:	b570      	push	{r4, r5, r6, lr}
   102ba:	4c09      	ldr	r4, [pc, #36]	; (102e0 <CC_PalPowerSaveModeInit+0x28>)
   102bc:	4d09      	ldr	r5, [pc, #36]	; (102e4 <CC_PalPowerSaveModeInit+0x2c>)
   102be:	6920      	ldr	r0, [r4, #16]
   102c0:	68ab      	ldr	r3, [r5, #8]
   102c2:	4798      	blx	r3
   102c4:	b118      	cbz	r0, 102ce <CC_PalPowerSaveModeInit+0x16>
   102c6:	4b08      	ldr	r3, [pc, #32]	; (102e8 <CC_PalPowerSaveModeInit+0x30>)
   102c8:	4808      	ldr	r0, [pc, #32]	; (102ec <CC_PalPowerSaveModeInit+0x34>)
   102ca:	685b      	ldr	r3, [r3, #4]
   102cc:	4798      	blx	r3
   102ce:	4a08      	ldr	r2, [pc, #32]	; (102f0 <CC_PalPowerSaveModeInit+0x38>)
   102d0:	68eb      	ldr	r3, [r5, #12]
   102d2:	6920      	ldr	r0, [r4, #16]
   102d4:	2100      	movs	r1, #0
   102d6:	6011      	str	r1, [r2, #0]
   102d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   102dc:	4718      	bx	r3
   102de:	bf00      	nop
   102e0:	200000b8 	.word	0x200000b8
   102e4:	200000a8 	.word	0x200000a8
   102e8:	20000098 	.word	0x20000098
   102ec:	0006ba14 	.word	0x0006ba14
   102f0:	20020f1c 	.word	0x20020f1c

000102f4 <CC_PalPowerSaveModeSelect>:
   102f4:	b570      	push	{r4, r5, r6, lr}
   102f6:	4d1a      	ldr	r5, [pc, #104]	; (10360 <CC_PalPowerSaveModeSelect+0x6c>)
   102f8:	4e1a      	ldr	r6, [pc, #104]	; (10364 <CC_PalPowerSaveModeSelect+0x70>)
   102fa:	4604      	mov	r4, r0
   102fc:	68b2      	ldr	r2, [r6, #8]
   102fe:	6928      	ldr	r0, [r5, #16]
   10300:	4790      	blx	r2
   10302:	b9f0      	cbnz	r0, 10342 <CC_PalPowerSaveModeSelect+0x4e>
   10304:	b15c      	cbz	r4, 1031e <CC_PalPowerSaveModeSelect+0x2a>
   10306:	4c18      	ldr	r4, [pc, #96]	; (10368 <CC_PalPowerSaveModeSelect+0x74>)
   10308:	6823      	ldr	r3, [r4, #0]
   1030a:	b1ab      	cbz	r3, 10338 <CC_PalPowerSaveModeSelect+0x44>
   1030c:	2b01      	cmp	r3, #1
   1030e:	d01a      	beq.n	10346 <CC_PalPowerSaveModeSelect+0x52>
   10310:	3b01      	subs	r3, #1
   10312:	6023      	str	r3, [r4, #0]
   10314:	6928      	ldr	r0, [r5, #16]
   10316:	68f3      	ldr	r3, [r6, #12]
   10318:	4798      	blx	r3
   1031a:	2000      	movs	r0, #0
   1031c:	bd70      	pop	{r4, r5, r6, pc}
   1031e:	4c12      	ldr	r4, [pc, #72]	; (10368 <CC_PalPowerSaveModeSelect+0x74>)
   10320:	6821      	ldr	r1, [r4, #0]
   10322:	b939      	cbnz	r1, 10334 <CC_PalPowerSaveModeSelect+0x40>
   10324:	4b11      	ldr	r3, [pc, #68]	; (1036c <CC_PalPowerSaveModeSelect+0x78>)
   10326:	4a12      	ldr	r2, [pc, #72]	; (10370 <CC_PalPowerSaveModeSelect+0x7c>)
   10328:	2001      	movs	r0, #1
   1032a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1032e:	6813      	ldr	r3, [r2, #0]
   10330:	2b00      	cmp	r3, #0
   10332:	d1fc      	bne.n	1032e <CC_PalPowerSaveModeSelect+0x3a>
   10334:	3101      	adds	r1, #1
   10336:	6021      	str	r1, [r4, #0]
   10338:	68f3      	ldr	r3, [r6, #12]
   1033a:	6928      	ldr	r0, [r5, #16]
   1033c:	4798      	blx	r3
   1033e:	2000      	movs	r0, #0
   10340:	bd70      	pop	{r4, r5, r6, pc}
   10342:	480c      	ldr	r0, [pc, #48]	; (10374 <CC_PalPowerSaveModeSelect+0x80>)
   10344:	bd70      	pop	{r4, r5, r6, pc}
   10346:	4a0a      	ldr	r2, [pc, #40]	; (10370 <CC_PalPowerSaveModeSelect+0x7c>)
   10348:	6813      	ldr	r3, [r2, #0]
   1034a:	2b00      	cmp	r3, #0
   1034c:	d1fc      	bne.n	10348 <CC_PalPowerSaveModeSelect+0x54>
   1034e:	4a07      	ldr	r2, [pc, #28]	; (1036c <CC_PalPowerSaveModeSelect+0x78>)
   10350:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   10354:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   10358:	f7ff ff48 	bl	101ec <CC_HalMaskInterrupt>
   1035c:	6823      	ldr	r3, [r4, #0]
   1035e:	e7d7      	b.n	10310 <CC_PalPowerSaveModeSelect+0x1c>
   10360:	200000b8 	.word	0x200000b8
   10364:	200000a8 	.word	0x200000a8
   10368:	20020f1c 	.word	0x20020f1c
   1036c:	5002a000 	.word	0x5002a000
   10370:	5002b910 	.word	0x5002b910
   10374:	ffff8fe9 	.word	0xffff8fe9

00010378 <_ZSt15get_new_handlerv>:
   10378:	4b02      	ldr	r3, [pc, #8]	; (10384 <_ZSt15get_new_handlerv+0xc>)
   1037a:	6818      	ldr	r0, [r3, #0]
   1037c:	f3bf 8f5b 	dmb	ish
   10380:	4770      	bx	lr
   10382:	bf00      	nop
   10384:	20020f20 	.word	0x20020f20

00010388 <frexp>:
   10388:	f8df c064 	ldr.w	ip, [pc, #100]	; 103f0 <frexp+0x68>
   1038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1038e:	4617      	mov	r7, r2
   10390:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10394:	2200      	movs	r2, #0
   10396:	4563      	cmp	r3, ip
   10398:	4604      	mov	r4, r0
   1039a:	460d      	mov	r5, r1
   1039c:	603a      	str	r2, [r7, #0]
   1039e:	dc22      	bgt.n	103e6 <frexp+0x5e>
   103a0:	4684      	mov	ip, r0
   103a2:	ea53 0c0c 	orrs.w	ip, r3, ip
   103a6:	d01e      	beq.n	103e6 <frexp+0x5e>
   103a8:	f8df c048 	ldr.w	ip, [pc, #72]	; 103f4 <frexp+0x6c>
   103ac:	ea01 0c0c 	and.w	ip, r1, ip
   103b0:	460e      	mov	r6, r1
   103b2:	f1bc 0f00 	cmp.w	ip, #0
   103b6:	d109      	bne.n	103cc <frexp+0x44>
   103b8:	4b0c      	ldr	r3, [pc, #48]	; (103ec <frexp+0x64>)
   103ba:	2200      	movs	r2, #0
   103bc:	f7f0 f8ac 	bl	518 <__aeabi_dmul>
   103c0:	f06f 0235 	mvn.w	r2, #53	; 0x35
   103c4:	4604      	mov	r4, r0
   103c6:	460e      	mov	r6, r1
   103c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   103cc:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   103d0:	151b      	asrs	r3, r3, #20
   103d2:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   103d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   103da:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   103de:	4413      	add	r3, r2
   103e0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   103e4:	603b      	str	r3, [r7, #0]
   103e6:	4620      	mov	r0, r4
   103e8:	4629      	mov	r1, r5
   103ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   103ec:	43500000 	.word	0x43500000
   103f0:	7fefffff 	.word	0x7fefffff
   103f4:	7ff00000 	.word	0x7ff00000

000103f8 <round>:
   103f8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   103fc:	f3c1 570a 	ubfx	r7, r1, #20, #11
   10400:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
   10404:	2c13      	cmp	r4, #19
   10406:	460b      	mov	r3, r1
   10408:	460d      	mov	r5, r1
   1040a:	4602      	mov	r2, r0
   1040c:	dc0f      	bgt.n	1042e <round+0x36>
   1040e:	2c00      	cmp	r4, #0
   10410:	db2a      	blt.n	10468 <round+0x70>
   10412:	491d      	ldr	r1, [pc, #116]	; (10488 <round+0x90>)
   10414:	4121      	asrs	r1, r4
   10416:	ea03 0001 	and.w	r0, r3, r1
   1041a:	4310      	orrs	r0, r2
   1041c:	d02f      	beq.n	1047e <round+0x86>
   1041e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   10422:	4123      	asrs	r3, r4
   10424:	441d      	add	r5, r3
   10426:	ea25 0501 	bic.w	r5, r5, r1
   1042a:	2300      	movs	r3, #0
   1042c:	e025      	b.n	1047a <round+0x82>
   1042e:	2c33      	cmp	r4, #51	; 0x33
   10430:	dd07      	ble.n	10442 <round+0x4a>
   10432:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   10436:	d122      	bne.n	1047e <round+0x86>
   10438:	f7ef feb8 	bl	1ac <__adddf3>
   1043c:	4602      	mov	r2, r0
   1043e:	460b      	mov	r3, r1
   10440:	e01d      	b.n	1047e <round+0x86>
   10442:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   10446:	f04f 31ff 	mov.w	r1, #4294967295
   1044a:	fa21 f707 	lsr.w	r7, r1, r7
   1044e:	4238      	tst	r0, r7
   10450:	d015      	beq.n	1047e <round+0x86>
   10452:	2201      	movs	r2, #1
   10454:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
   10458:	fa02 f303 	lsl.w	r3, r2, r3
   1045c:	18c3      	adds	r3, r0, r3
   1045e:	bf28      	it	cs
   10460:	18ad      	addcs	r5, r5, r2
   10462:	ea23 0307 	bic.w	r3, r3, r7
   10466:	e008      	b.n	1047a <round+0x82>
   10468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1046c:	3401      	adds	r4, #1
   1046e:	bf04      	itt	eq
   10470:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
   10474:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
   10478:	2300      	movs	r3, #0
   1047a:	461a      	mov	r2, r3
   1047c:	462b      	mov	r3, r5
   1047e:	4610      	mov	r0, r2
   10480:	4619      	mov	r1, r3
   10482:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   10486:	bf00      	nop
   10488:	000fffff 	.word	0x000fffff

0001048c <expf>:
   1048c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1048e:	4e33      	ldr	r6, [pc, #204]	; (1055c <expf+0xd0>)
   10490:	b08b      	sub	sp, #44	; 0x2c
   10492:	4605      	mov	r5, r0
   10494:	f000 f86e 	bl	10574 <__ieee754_expf>
   10498:	f996 3000 	ldrsb.w	r3, [r6]
   1049c:	3301      	adds	r3, #1
   1049e:	4604      	mov	r4, r0
   104a0:	d00f      	beq.n	104c2 <expf+0x36>
   104a2:	4628      	mov	r0, r5
   104a4:	f000 f984 	bl	107b0 <finitef>
   104a8:	b158      	cbz	r0, 104c2 <expf+0x36>
   104aa:	492d      	ldr	r1, [pc, #180]	; (10560 <expf+0xd4>)
   104ac:	4628      	mov	r0, r5
   104ae:	f7f0 fe0f 	bl	10d0 <__aeabi_fcmpgt>
   104b2:	4607      	mov	r7, r0
   104b4:	2800      	cmp	r0, #0
   104b6:	d135      	bne.n	10524 <expf+0x98>
   104b8:	492a      	ldr	r1, [pc, #168]	; (10564 <expf+0xd8>)
   104ba:	4628      	mov	r0, r5
   104bc:	f7f0 fdea 	bl	1094 <__aeabi_fcmplt>
   104c0:	b910      	cbnz	r0, 104c8 <expf+0x3c>
   104c2:	4620      	mov	r0, r4
   104c4:	b00b      	add	sp, #44	; 0x2c
   104c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104c8:	4b27      	ldr	r3, [pc, #156]	; (10568 <expf+0xdc>)
   104ca:	9708      	str	r7, [sp, #32]
   104cc:	4628      	mov	r0, r5
   104ce:	2204      	movs	r2, #4
   104d0:	e9cd 2300 	strd	r2, r3, [sp]
   104d4:	f7ef ffc8 	bl	468 <__aeabi_f2d>
   104d8:	f996 3000 	ldrsb.w	r3, [r6]
   104dc:	2400      	movs	r4, #0
   104de:	2500      	movs	r5, #0
   104e0:	2b02      	cmp	r3, #2
   104e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   104e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   104ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
   104ee:	d014      	beq.n	1051a <expf+0x8e>
   104f0:	4668      	mov	r0, sp
   104f2:	f000 f95b 	bl	107ac <matherr>
   104f6:	b180      	cbz	r0, 1051a <expf+0x8e>
   104f8:	9b08      	ldr	r3, [sp, #32]
   104fa:	2b00      	cmp	r3, #0
   104fc:	d129      	bne.n	10552 <expf+0xc6>
   104fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10502:	f7f0 facb 	bl	a9c <__aeabi_d2f>
   10506:	4604      	mov	r4, r0
   10508:	4620      	mov	r0, r4
   1050a:	b00b      	add	sp, #44	; 0x2c
   1050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1050e:	4917      	ldr	r1, [pc, #92]	; (1056c <expf+0xe0>)
   10510:	2000      	movs	r0, #0
   10512:	2b02      	cmp	r3, #2
   10514:	e9cd 0106 	strd	r0, r1, [sp, #24]
   10518:	d1ea      	bne.n	104f0 <expf+0x64>
   1051a:	f002 f8fe 	bl	1271a <__errno>
   1051e:	2322      	movs	r3, #34	; 0x22
   10520:	6003      	str	r3, [r0, #0]
   10522:	e7e9      	b.n	104f8 <expf+0x6c>
   10524:	2303      	movs	r3, #3
   10526:	4a10      	ldr	r2, [pc, #64]	; (10568 <expf+0xdc>)
   10528:	9300      	str	r3, [sp, #0]
   1052a:	4628      	mov	r0, r5
   1052c:	2300      	movs	r3, #0
   1052e:	9308      	str	r3, [sp, #32]
   10530:	9201      	str	r2, [sp, #4]
   10532:	f7ef ff99 	bl	468 <__aeabi_f2d>
   10536:	f996 3000 	ldrsb.w	r3, [r6]
   1053a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1053e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10542:	2b00      	cmp	r3, #0
   10544:	d1e3      	bne.n	1050e <expf+0x82>
   10546:	4b0a      	ldr	r3, [pc, #40]	; (10570 <expf+0xe4>)
   10548:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1054c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10550:	e7ce      	b.n	104f0 <expf+0x64>
   10552:	f002 f8e2 	bl	1271a <__errno>
   10556:	9b08      	ldr	r3, [sp, #32]
   10558:	6003      	str	r3, [r0, #0]
   1055a:	e7d0      	b.n	104fe <expf+0x72>
   1055c:	200002c8 	.word	0x200002c8
   10560:	42b17180 	.word	0x42b17180
   10564:	c2cff1b5 	.word	0xc2cff1b5
   10568:	0006ba34 	.word	0x0006ba34
   1056c:	7ff00000 	.word	0x7ff00000
   10570:	47efffff 	.word	0x47efffff

00010574 <__ieee754_expf>:
   10574:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   10578:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1057c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10580:	4604      	mov	r4, r0
   10582:	d86a      	bhi.n	1065a <__ieee754_expf+0xe6>
   10584:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   10588:	f000 80c2 	beq.w	10710 <__ieee754_expf+0x19c>
   1058c:	4977      	ldr	r1, [pc, #476]	; (1076c <__ieee754_expf+0x1f8>)
   1058e:	4288      	cmp	r0, r1
   10590:	dc68      	bgt.n	10664 <__ieee754_expf+0xf0>
   10592:	2800      	cmp	r0, #0
   10594:	f2c0 80b5 	blt.w	10702 <__ieee754_expf+0x18e>
   10598:	4b75      	ldr	r3, [pc, #468]	; (10770 <__ieee754_expf+0x1fc>)
   1059a:	429a      	cmp	r2, r3
   1059c:	d968      	bls.n	10670 <__ieee754_expf+0xfc>
   1059e:	4b75      	ldr	r3, [pc, #468]	; (10774 <__ieee754_expf+0x200>)
   105a0:	429a      	cmp	r2, r3
   105a2:	f200 80c0 	bhi.w	10726 <__ieee754_expf+0x1b2>
   105a6:	4b74      	ldr	r3, [pc, #464]	; (10778 <__ieee754_expf+0x204>)
   105a8:	4620      	mov	r0, r4
   105aa:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   105ae:	f7f0 fac9 	bl	b44 <__aeabi_fsub>
   105b2:	4b72      	ldr	r3, [pc, #456]	; (1077c <__ieee754_expf+0x208>)
   105b4:	f1c5 0701 	rsb	r7, r5, #1
   105b8:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
   105bc:	4680      	mov	r8, r0
   105be:	1b7f      	subs	r7, r7, r5
   105c0:	4649      	mov	r1, r9
   105c2:	4640      	mov	r0, r8
   105c4:	f7f0 fabe 	bl	b44 <__aeabi_fsub>
   105c8:	4601      	mov	r1, r0
   105ca:	4605      	mov	r5, r0
   105cc:	f7f0 fbc4 	bl	d58 <__aeabi_fmul>
   105d0:	496b      	ldr	r1, [pc, #428]	; (10780 <__ieee754_expf+0x20c>)
   105d2:	4606      	mov	r6, r0
   105d4:	f7f0 fbc0 	bl	d58 <__aeabi_fmul>
   105d8:	496a      	ldr	r1, [pc, #424]	; (10784 <__ieee754_expf+0x210>)
   105da:	f7f0 fab3 	bl	b44 <__aeabi_fsub>
   105de:	4631      	mov	r1, r6
   105e0:	f7f0 fbba 	bl	d58 <__aeabi_fmul>
   105e4:	4968      	ldr	r1, [pc, #416]	; (10788 <__ieee754_expf+0x214>)
   105e6:	f7f0 faaf 	bl	b48 <__addsf3>
   105ea:	4631      	mov	r1, r6
   105ec:	f7f0 fbb4 	bl	d58 <__aeabi_fmul>
   105f0:	4966      	ldr	r1, [pc, #408]	; (1078c <__ieee754_expf+0x218>)
   105f2:	f7f0 faa7 	bl	b44 <__aeabi_fsub>
   105f6:	4631      	mov	r1, r6
   105f8:	f7f0 fbae 	bl	d58 <__aeabi_fmul>
   105fc:	4964      	ldr	r1, [pc, #400]	; (10790 <__ieee754_expf+0x21c>)
   105fe:	f7f0 faa3 	bl	b48 <__addsf3>
   10602:	4631      	mov	r1, r6
   10604:	f7f0 fba8 	bl	d58 <__aeabi_fmul>
   10608:	4601      	mov	r1, r0
   1060a:	4628      	mov	r0, r5
   1060c:	f7f0 fa9a 	bl	b44 <__aeabi_fsub>
   10610:	462c      	mov	r4, r5
   10612:	4606      	mov	r6, r0
   10614:	4682      	mov	sl, r0
   10616:	2f00      	cmp	r7, #0
   10618:	d05c      	beq.n	106d4 <__ieee754_expf+0x160>
   1061a:	4631      	mov	r1, r6
   1061c:	4628      	mov	r0, r5
   1061e:	f7f0 fb9b 	bl	d58 <__aeabi_fmul>
   10622:	4631      	mov	r1, r6
   10624:	4604      	mov	r4, r0
   10626:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1062a:	f7f0 fa8b 	bl	b44 <__aeabi_fsub>
   1062e:	4601      	mov	r1, r0
   10630:	4620      	mov	r0, r4
   10632:	f7f0 fc45 	bl	ec0 <__aeabi_fdiv>
   10636:	4601      	mov	r1, r0
   10638:	4648      	mov	r0, r9
   1063a:	f7f0 fa83 	bl	b44 <__aeabi_fsub>
   1063e:	4641      	mov	r1, r8
   10640:	f7f0 fa80 	bl	b44 <__aeabi_fsub>
   10644:	4601      	mov	r1, r0
   10646:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   1064a:	f7f0 fa7b 	bl	b44 <__aeabi_fsub>
   1064e:	f117 0f7d 	cmn.w	r7, #125	; 0x7d
   10652:	db60      	blt.n	10716 <__ieee754_expf+0x1a2>
   10654:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
   10658:	e002      	b.n	10660 <__ieee754_expf+0xec>
   1065a:	4601      	mov	r1, r0
   1065c:	f7f0 fa74 	bl	b48 <__addsf3>
   10660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10664:	494b      	ldr	r1, [pc, #300]	; (10794 <__ieee754_expf+0x220>)
   10666:	4608      	mov	r0, r1
   10668:	f7f0 fb76 	bl	d58 <__aeabi_fmul>
   1066c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10670:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   10674:	d209      	bcs.n	1068a <__ieee754_expf+0x116>
   10676:	4947      	ldr	r1, [pc, #284]	; (10794 <__ieee754_expf+0x220>)
   10678:	4620      	mov	r0, r4
   1067a:	f7f0 fa65 	bl	b48 <__addsf3>
   1067e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10682:	f7f0 fd25 	bl	10d0 <__aeabi_fcmpgt>
   10686:	2800      	cmp	r0, #0
   10688:	d16a      	bne.n	10760 <__ieee754_expf+0x1ec>
   1068a:	4621      	mov	r1, r4
   1068c:	4620      	mov	r0, r4
   1068e:	f7f0 fb63 	bl	d58 <__aeabi_fmul>
   10692:	493b      	ldr	r1, [pc, #236]	; (10780 <__ieee754_expf+0x20c>)
   10694:	4605      	mov	r5, r0
   10696:	f7f0 fb5f 	bl	d58 <__aeabi_fmul>
   1069a:	493a      	ldr	r1, [pc, #232]	; (10784 <__ieee754_expf+0x210>)
   1069c:	f7f0 fa52 	bl	b44 <__aeabi_fsub>
   106a0:	4629      	mov	r1, r5
   106a2:	f7f0 fb59 	bl	d58 <__aeabi_fmul>
   106a6:	4938      	ldr	r1, [pc, #224]	; (10788 <__ieee754_expf+0x214>)
   106a8:	f7f0 fa4e 	bl	b48 <__addsf3>
   106ac:	4629      	mov	r1, r5
   106ae:	f7f0 fb53 	bl	d58 <__aeabi_fmul>
   106b2:	4936      	ldr	r1, [pc, #216]	; (1078c <__ieee754_expf+0x218>)
   106b4:	f7f0 fa46 	bl	b44 <__aeabi_fsub>
   106b8:	4629      	mov	r1, r5
   106ba:	f7f0 fb4d 	bl	d58 <__aeabi_fmul>
   106be:	4934      	ldr	r1, [pc, #208]	; (10790 <__ieee754_expf+0x21c>)
   106c0:	f7f0 fa42 	bl	b48 <__addsf3>
   106c4:	4629      	mov	r1, r5
   106c6:	f7f0 fb47 	bl	d58 <__aeabi_fmul>
   106ca:	4601      	mov	r1, r0
   106cc:	4620      	mov	r0, r4
   106ce:	f7f0 fa39 	bl	b44 <__aeabi_fsub>
   106d2:	4682      	mov	sl, r0
   106d4:	4651      	mov	r1, sl
   106d6:	4620      	mov	r0, r4
   106d8:	f7f0 fb3e 	bl	d58 <__aeabi_fmul>
   106dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   106e0:	4605      	mov	r5, r0
   106e2:	4650      	mov	r0, sl
   106e4:	f7f0 fa2e 	bl	b44 <__aeabi_fsub>
   106e8:	4601      	mov	r1, r0
   106ea:	4628      	mov	r0, r5
   106ec:	f7f0 fbe8 	bl	ec0 <__aeabi_fdiv>
   106f0:	4621      	mov	r1, r4
   106f2:	f7f0 fa27 	bl	b44 <__aeabi_fsub>
   106f6:	4601      	mov	r1, r0
   106f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   106fc:	f7f0 fa22 	bl	b44 <__aeabi_fsub>
   10700:	e7ae      	b.n	10660 <__ieee754_expf+0xec>
   10702:	4b25      	ldr	r3, [pc, #148]	; (10798 <__ieee754_expf+0x224>)
   10704:	429a      	cmp	r2, r3
   10706:	f67f af47 	bls.w	10598 <__ieee754_expf+0x24>
   1070a:	2000      	movs	r0, #0
   1070c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10710:	2d00      	cmp	r5, #0
   10712:	d1fa      	bne.n	1070a <__ieee754_expf+0x196>
   10714:	e7a4      	b.n	10660 <__ieee754_expf+0xec>
   10716:	3764      	adds	r7, #100	; 0x64
   10718:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
   1071c:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   10720:	f7f0 fb1a 	bl	d58 <__aeabi_fmul>
   10724:	e79c      	b.n	10660 <__ieee754_expf+0xec>
   10726:	491d      	ldr	r1, [pc, #116]	; (1079c <__ieee754_expf+0x228>)
   10728:	4620      	mov	r0, r4
   1072a:	f7f0 fb15 	bl	d58 <__aeabi_fmul>
   1072e:	4b1c      	ldr	r3, [pc, #112]	; (107a0 <__ieee754_expf+0x22c>)
   10730:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   10734:	f7f0 fa08 	bl	b48 <__addsf3>
   10738:	f7f0 fcd4 	bl	10e4 <__aeabi_f2iz>
   1073c:	4607      	mov	r7, r0
   1073e:	f7f0 fab7 	bl	cb0 <__aeabi_i2f>
   10742:	4918      	ldr	r1, [pc, #96]	; (107a4 <__ieee754_expf+0x230>)
   10744:	4605      	mov	r5, r0
   10746:	f7f0 fb07 	bl	d58 <__aeabi_fmul>
   1074a:	4601      	mov	r1, r0
   1074c:	4620      	mov	r0, r4
   1074e:	f7f0 f9f9 	bl	b44 <__aeabi_fsub>
   10752:	4915      	ldr	r1, [pc, #84]	; (107a8 <__ieee754_expf+0x234>)
   10754:	4680      	mov	r8, r0
   10756:	4628      	mov	r0, r5
   10758:	f7f0 fafe 	bl	d58 <__aeabi_fmul>
   1075c:	4681      	mov	r9, r0
   1075e:	e72f      	b.n	105c0 <__ieee754_expf+0x4c>
   10760:	4620      	mov	r0, r4
   10762:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10766:	f7f0 f9ef 	bl	b48 <__addsf3>
   1076a:	e779      	b.n	10660 <__ieee754_expf+0xec>
   1076c:	42b17217 	.word	0x42b17217
   10770:	3eb17218 	.word	0x3eb17218
   10774:	3f851591 	.word	0x3f851591
   10778:	0006ba44 	.word	0x0006ba44
   1077c:	0006ba4c 	.word	0x0006ba4c
   10780:	3331bb4c 	.word	0x3331bb4c
   10784:	35ddea0e 	.word	0x35ddea0e
   10788:	388ab355 	.word	0x388ab355
   1078c:	3b360b61 	.word	0x3b360b61
   10790:	3e2aaaab 	.word	0x3e2aaaab
   10794:	7149f2ca 	.word	0x7149f2ca
   10798:	42cff1b5 	.word	0x42cff1b5
   1079c:	3fb8aa3b 	.word	0x3fb8aa3b
   107a0:	0006ba3c 	.word	0x0006ba3c
   107a4:	3f317180 	.word	0x3f317180
   107a8:	3717f7d1 	.word	0x3717f7d1

000107ac <matherr>:
   107ac:	2000      	movs	r0, #0
   107ae:	4770      	bx	lr

000107b0 <finitef>:
   107b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   107b4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   107b8:	bfac      	ite	ge
   107ba:	2000      	movge	r0, #0
   107bc:	2001      	movlt	r0, #1
   107be:	4770      	bx	lr

000107c0 <__assert_func>:
   107c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   107c2:	4614      	mov	r4, r2
   107c4:	461a      	mov	r2, r3
   107c6:	4b09      	ldr	r3, [pc, #36]	; (107ec <__assert_func+0x2c>)
   107c8:	681b      	ldr	r3, [r3, #0]
   107ca:	4605      	mov	r5, r0
   107cc:	68d8      	ldr	r0, [r3, #12]
   107ce:	b14c      	cbz	r4, 107e4 <__assert_func+0x24>
   107d0:	4b07      	ldr	r3, [pc, #28]	; (107f0 <__assert_func+0x30>)
   107d2:	9100      	str	r1, [sp, #0]
   107d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   107d8:	4906      	ldr	r1, [pc, #24]	; (107f4 <__assert_func+0x34>)
   107da:	462b      	mov	r3, r5
   107dc:	f000 f80e 	bl	107fc <fiprintf>
   107e0:	f005 fbf0 	bl	15fc4 <abort>
   107e4:	4b04      	ldr	r3, [pc, #16]	; (107f8 <__assert_func+0x38>)
   107e6:	461c      	mov	r4, r3
   107e8:	e7f3      	b.n	107d2 <__assert_func+0x12>
   107ea:	bf00      	nop
   107ec:	200000f8 	.word	0x200000f8
   107f0:	0006bac4 	.word	0x0006bac4
   107f4:	0006bad1 	.word	0x0006bad1
   107f8:	0006baff 	.word	0x0006baff

000107fc <fiprintf>:
   107fc:	b40e      	push	{r1, r2, r3}
   107fe:	b503      	push	{r0, r1, lr}
   10800:	4601      	mov	r1, r0
   10802:	ab03      	add	r3, sp, #12
   10804:	4805      	ldr	r0, [pc, #20]	; (1081c <fiprintf+0x20>)
   10806:	f853 2b04 	ldr.w	r2, [r3], #4
   1080a:	6800      	ldr	r0, [r0, #0]
   1080c:	9301      	str	r3, [sp, #4]
   1080e:	f000 f8bf 	bl	10990 <_vfiprintf_r>
   10812:	b002      	add	sp, #8
   10814:	f85d eb04 	ldr.w	lr, [sp], #4
   10818:	b003      	add	sp, #12
   1081a:	4770      	bx	lr
   1081c:	200000f8 	.word	0x200000f8

00010820 <malloc>:
   10820:	4b02      	ldr	r3, [pc, #8]	; (1082c <malloc+0xc>)
   10822:	4601      	mov	r1, r0
   10824:	6818      	ldr	r0, [r3, #0]
   10826:	f000 b859 	b.w	108dc <_malloc_r>
   1082a:	bf00      	nop
   1082c:	200000f8 	.word	0x200000f8

00010830 <free>:
   10830:	4b02      	ldr	r3, [pc, #8]	; (1083c <free+0xc>)
   10832:	4601      	mov	r1, r0
   10834:	6818      	ldr	r0, [r3, #0]
   10836:	f000 b803 	b.w	10840 <_free_r>
   1083a:	bf00      	nop
   1083c:	200000f8 	.word	0x200000f8

00010840 <_free_r>:
   10840:	b538      	push	{r3, r4, r5, lr}
   10842:	4605      	mov	r5, r0
   10844:	2900      	cmp	r1, #0
   10846:	d045      	beq.n	108d4 <_free_r+0x94>
   10848:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1084c:	1f0c      	subs	r4, r1, #4
   1084e:	2b00      	cmp	r3, #0
   10850:	bfb8      	it	lt
   10852:	18e4      	addlt	r4, r4, r3
   10854:	f001 f890 	bl	11978 <__malloc_lock>
   10858:	4a1f      	ldr	r2, [pc, #124]	; (108d8 <_free_r+0x98>)
   1085a:	6813      	ldr	r3, [r2, #0]
   1085c:	4610      	mov	r0, r2
   1085e:	b933      	cbnz	r3, 1086e <_free_r+0x2e>
   10860:	6063      	str	r3, [r4, #4]
   10862:	6014      	str	r4, [r2, #0]
   10864:	4628      	mov	r0, r5
   10866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1086a:	f001 b88b 	b.w	11984 <__malloc_unlock>
   1086e:	42a3      	cmp	r3, r4
   10870:	d90b      	bls.n	1088a <_free_r+0x4a>
   10872:	6821      	ldr	r1, [r4, #0]
   10874:	1862      	adds	r2, r4, r1
   10876:	4293      	cmp	r3, r2
   10878:	bf04      	itt	eq
   1087a:	681a      	ldreq	r2, [r3, #0]
   1087c:	685b      	ldreq	r3, [r3, #4]
   1087e:	6063      	str	r3, [r4, #4]
   10880:	bf04      	itt	eq
   10882:	1852      	addeq	r2, r2, r1
   10884:	6022      	streq	r2, [r4, #0]
   10886:	6004      	str	r4, [r0, #0]
   10888:	e7ec      	b.n	10864 <_free_r+0x24>
   1088a:	461a      	mov	r2, r3
   1088c:	685b      	ldr	r3, [r3, #4]
   1088e:	b10b      	cbz	r3, 10894 <_free_r+0x54>
   10890:	42a3      	cmp	r3, r4
   10892:	d9fa      	bls.n	1088a <_free_r+0x4a>
   10894:	6811      	ldr	r1, [r2, #0]
   10896:	1850      	adds	r0, r2, r1
   10898:	42a0      	cmp	r0, r4
   1089a:	d10b      	bne.n	108b4 <_free_r+0x74>
   1089c:	6820      	ldr	r0, [r4, #0]
   1089e:	4401      	add	r1, r0
   108a0:	1850      	adds	r0, r2, r1
   108a2:	4283      	cmp	r3, r0
   108a4:	6011      	str	r1, [r2, #0]
   108a6:	d1dd      	bne.n	10864 <_free_r+0x24>
   108a8:	6818      	ldr	r0, [r3, #0]
   108aa:	685b      	ldr	r3, [r3, #4]
   108ac:	6053      	str	r3, [r2, #4]
   108ae:	4401      	add	r1, r0
   108b0:	6011      	str	r1, [r2, #0]
   108b2:	e7d7      	b.n	10864 <_free_r+0x24>
   108b4:	d902      	bls.n	108bc <_free_r+0x7c>
   108b6:	230c      	movs	r3, #12
   108b8:	602b      	str	r3, [r5, #0]
   108ba:	e7d3      	b.n	10864 <_free_r+0x24>
   108bc:	6820      	ldr	r0, [r4, #0]
   108be:	1821      	adds	r1, r4, r0
   108c0:	428b      	cmp	r3, r1
   108c2:	bf04      	itt	eq
   108c4:	6819      	ldreq	r1, [r3, #0]
   108c6:	685b      	ldreq	r3, [r3, #4]
   108c8:	6063      	str	r3, [r4, #4]
   108ca:	bf04      	itt	eq
   108cc:	1809      	addeq	r1, r1, r0
   108ce:	6021      	streq	r1, [r4, #0]
   108d0:	6054      	str	r4, [r2, #4]
   108d2:	e7c7      	b.n	10864 <_free_r+0x24>
   108d4:	bd38      	pop	{r3, r4, r5, pc}
   108d6:	bf00      	nop
   108d8:	20020f24 	.word	0x20020f24

000108dc <_malloc_r>:
   108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108de:	1ccd      	adds	r5, r1, #3
   108e0:	f025 0503 	bic.w	r5, r5, #3
   108e4:	3508      	adds	r5, #8
   108e6:	2d0c      	cmp	r5, #12
   108e8:	bf38      	it	cc
   108ea:	250c      	movcc	r5, #12
   108ec:	2d00      	cmp	r5, #0
   108ee:	4606      	mov	r6, r0
   108f0:	db01      	blt.n	108f6 <_malloc_r+0x1a>
   108f2:	42a9      	cmp	r1, r5
   108f4:	d903      	bls.n	108fe <_malloc_r+0x22>
   108f6:	230c      	movs	r3, #12
   108f8:	6033      	str	r3, [r6, #0]
   108fa:	2000      	movs	r0, #0
   108fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108fe:	f001 f83b 	bl	11978 <__malloc_lock>
   10902:	4921      	ldr	r1, [pc, #132]	; (10988 <_malloc_r+0xac>)
   10904:	680a      	ldr	r2, [r1, #0]
   10906:	4614      	mov	r4, r2
   10908:	b99c      	cbnz	r4, 10932 <_malloc_r+0x56>
   1090a:	4f20      	ldr	r7, [pc, #128]	; (1098c <_malloc_r+0xb0>)
   1090c:	683b      	ldr	r3, [r7, #0]
   1090e:	b923      	cbnz	r3, 1091a <_malloc_r+0x3e>
   10910:	4621      	mov	r1, r4
   10912:	4630      	mov	r0, r6
   10914:	f000 fcbc 	bl	11290 <_sbrk_r>
   10918:	6038      	str	r0, [r7, #0]
   1091a:	4629      	mov	r1, r5
   1091c:	4630      	mov	r0, r6
   1091e:	f000 fcb7 	bl	11290 <_sbrk_r>
   10922:	1c43      	adds	r3, r0, #1
   10924:	d123      	bne.n	1096e <_malloc_r+0x92>
   10926:	230c      	movs	r3, #12
   10928:	6033      	str	r3, [r6, #0]
   1092a:	4630      	mov	r0, r6
   1092c:	f001 f82a 	bl	11984 <__malloc_unlock>
   10930:	e7e3      	b.n	108fa <_malloc_r+0x1e>
   10932:	6823      	ldr	r3, [r4, #0]
   10934:	1b5b      	subs	r3, r3, r5
   10936:	d417      	bmi.n	10968 <_malloc_r+0x8c>
   10938:	2b0b      	cmp	r3, #11
   1093a:	d903      	bls.n	10944 <_malloc_r+0x68>
   1093c:	6023      	str	r3, [r4, #0]
   1093e:	441c      	add	r4, r3
   10940:	6025      	str	r5, [r4, #0]
   10942:	e004      	b.n	1094e <_malloc_r+0x72>
   10944:	6863      	ldr	r3, [r4, #4]
   10946:	42a2      	cmp	r2, r4
   10948:	bf0c      	ite	eq
   1094a:	600b      	streq	r3, [r1, #0]
   1094c:	6053      	strne	r3, [r2, #4]
   1094e:	4630      	mov	r0, r6
   10950:	f001 f818 	bl	11984 <__malloc_unlock>
   10954:	f104 000b 	add.w	r0, r4, #11
   10958:	1d23      	adds	r3, r4, #4
   1095a:	f020 0007 	bic.w	r0, r0, #7
   1095e:	1ac2      	subs	r2, r0, r3
   10960:	d0cc      	beq.n	108fc <_malloc_r+0x20>
   10962:	1a1b      	subs	r3, r3, r0
   10964:	50a3      	str	r3, [r4, r2]
   10966:	e7c9      	b.n	108fc <_malloc_r+0x20>
   10968:	4622      	mov	r2, r4
   1096a:	6864      	ldr	r4, [r4, #4]
   1096c:	e7cc      	b.n	10908 <_malloc_r+0x2c>
   1096e:	1cc4      	adds	r4, r0, #3
   10970:	f024 0403 	bic.w	r4, r4, #3
   10974:	42a0      	cmp	r0, r4
   10976:	d0e3      	beq.n	10940 <_malloc_r+0x64>
   10978:	1a21      	subs	r1, r4, r0
   1097a:	4630      	mov	r0, r6
   1097c:	f000 fc88 	bl	11290 <_sbrk_r>
   10980:	3001      	adds	r0, #1
   10982:	d1dd      	bne.n	10940 <_malloc_r+0x64>
   10984:	e7cf      	b.n	10926 <_malloc_r+0x4a>
   10986:	bf00      	nop
   10988:	20020f24 	.word	0x20020f24
   1098c:	20020f28 	.word	0x20020f28

00010990 <_vfiprintf_r>:
   10990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10994:	460d      	mov	r5, r1
   10996:	b09d      	sub	sp, #116	; 0x74
   10998:	4614      	mov	r4, r2
   1099a:	4698      	mov	r8, r3
   1099c:	4606      	mov	r6, r0
   1099e:	b118      	cbz	r0, 109a8 <_vfiprintf_r+0x18>
   109a0:	6983      	ldr	r3, [r0, #24]
   109a2:	b90b      	cbnz	r3, 109a8 <_vfiprintf_r+0x18>
   109a4:	f000 ff26 	bl	117f4 <__sinit>
   109a8:	4b89      	ldr	r3, [pc, #548]	; (10bd0 <_vfiprintf_r+0x240>)
   109aa:	429d      	cmp	r5, r3
   109ac:	d11b      	bne.n	109e6 <_vfiprintf_r+0x56>
   109ae:	6875      	ldr	r5, [r6, #4]
   109b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   109b2:	07d9      	lsls	r1, r3, #31
   109b4:	d405      	bmi.n	109c2 <_vfiprintf_r+0x32>
   109b6:	89ab      	ldrh	r3, [r5, #12]
   109b8:	059a      	lsls	r2, r3, #22
   109ba:	d402      	bmi.n	109c2 <_vfiprintf_r+0x32>
   109bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   109be:	f001 fea0 	bl	12702 <__retarget_lock_acquire_recursive>
   109c2:	89ab      	ldrh	r3, [r5, #12]
   109c4:	071b      	lsls	r3, r3, #28
   109c6:	d501      	bpl.n	109cc <_vfiprintf_r+0x3c>
   109c8:	692b      	ldr	r3, [r5, #16]
   109ca:	b9eb      	cbnz	r3, 10a08 <_vfiprintf_r+0x78>
   109cc:	4629      	mov	r1, r5
   109ce:	4630      	mov	r0, r6
   109d0:	f000 fd9e 	bl	11510 <__swsetup_r>
   109d4:	b1c0      	cbz	r0, 10a08 <_vfiprintf_r+0x78>
   109d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   109d8:	07dc      	lsls	r4, r3, #31
   109da:	d50e      	bpl.n	109fa <_vfiprintf_r+0x6a>
   109dc:	f04f 30ff 	mov.w	r0, #4294967295
   109e0:	b01d      	add	sp, #116	; 0x74
   109e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109e6:	4b7b      	ldr	r3, [pc, #492]	; (10bd4 <_vfiprintf_r+0x244>)
   109e8:	429d      	cmp	r5, r3
   109ea:	d101      	bne.n	109f0 <_vfiprintf_r+0x60>
   109ec:	68b5      	ldr	r5, [r6, #8]
   109ee:	e7df      	b.n	109b0 <_vfiprintf_r+0x20>
   109f0:	4b79      	ldr	r3, [pc, #484]	; (10bd8 <_vfiprintf_r+0x248>)
   109f2:	429d      	cmp	r5, r3
   109f4:	bf08      	it	eq
   109f6:	68f5      	ldreq	r5, [r6, #12]
   109f8:	e7da      	b.n	109b0 <_vfiprintf_r+0x20>
   109fa:	89ab      	ldrh	r3, [r5, #12]
   109fc:	0598      	lsls	r0, r3, #22
   109fe:	d4ed      	bmi.n	109dc <_vfiprintf_r+0x4c>
   10a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10a02:	f001 fe86 	bl	12712 <__retarget_lock_release_recursive>
   10a06:	e7e9      	b.n	109dc <_vfiprintf_r+0x4c>
   10a08:	2300      	movs	r3, #0
   10a0a:	9309      	str	r3, [sp, #36]	; 0x24
   10a0c:	2320      	movs	r3, #32
   10a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   10a12:	f8cd 800c 	str.w	r8, [sp, #12]
   10a16:	2330      	movs	r3, #48	; 0x30
   10a18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 10bdc <_vfiprintf_r+0x24c>
   10a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   10a20:	f04f 0901 	mov.w	r9, #1
   10a24:	4623      	mov	r3, r4
   10a26:	469a      	mov	sl, r3
   10a28:	f813 2b01 	ldrb.w	r2, [r3], #1
   10a2c:	b10a      	cbz	r2, 10a32 <_vfiprintf_r+0xa2>
   10a2e:	2a25      	cmp	r2, #37	; 0x25
   10a30:	d1f9      	bne.n	10a26 <_vfiprintf_r+0x96>
   10a32:	ebba 0b04 	subs.w	fp, sl, r4
   10a36:	d00b      	beq.n	10a50 <_vfiprintf_r+0xc0>
   10a38:	465b      	mov	r3, fp
   10a3a:	4622      	mov	r2, r4
   10a3c:	4629      	mov	r1, r5
   10a3e:	4630      	mov	r0, r6
   10a40:	f005 faf6 	bl	16030 <__sfputs_r>
   10a44:	3001      	adds	r0, #1
   10a46:	f000 80aa 	beq.w	10b9e <_vfiprintf_r+0x20e>
   10a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a4c:	445a      	add	r2, fp
   10a4e:	9209      	str	r2, [sp, #36]	; 0x24
   10a50:	f89a 3000 	ldrb.w	r3, [sl]
   10a54:	2b00      	cmp	r3, #0
   10a56:	f000 80a2 	beq.w	10b9e <_vfiprintf_r+0x20e>
   10a5a:	2300      	movs	r3, #0
   10a5c:	f04f 32ff 	mov.w	r2, #4294967295
   10a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10a64:	f10a 0a01 	add.w	sl, sl, #1
   10a68:	9304      	str	r3, [sp, #16]
   10a6a:	9307      	str	r3, [sp, #28]
   10a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10a70:	931a      	str	r3, [sp, #104]	; 0x68
   10a72:	4654      	mov	r4, sl
   10a74:	2205      	movs	r2, #5
   10a76:	f814 1b01 	ldrb.w	r1, [r4], #1
   10a7a:	4858      	ldr	r0, [pc, #352]	; (10bdc <_vfiprintf_r+0x24c>)
   10a7c:	f7ef fb40 	bl	100 <memchr>
   10a80:	9a04      	ldr	r2, [sp, #16]
   10a82:	b9d8      	cbnz	r0, 10abc <_vfiprintf_r+0x12c>
   10a84:	06d1      	lsls	r1, r2, #27
   10a86:	bf44      	itt	mi
   10a88:	2320      	movmi	r3, #32
   10a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10a8e:	0713      	lsls	r3, r2, #28
   10a90:	bf44      	itt	mi
   10a92:	232b      	movmi	r3, #43	; 0x2b
   10a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10a98:	f89a 3000 	ldrb.w	r3, [sl]
   10a9c:	2b2a      	cmp	r3, #42	; 0x2a
   10a9e:	d015      	beq.n	10acc <_vfiprintf_r+0x13c>
   10aa0:	9a07      	ldr	r2, [sp, #28]
   10aa2:	4654      	mov	r4, sl
   10aa4:	2000      	movs	r0, #0
   10aa6:	f04f 0c0a 	mov.w	ip, #10
   10aaa:	4621      	mov	r1, r4
   10aac:	f811 3b01 	ldrb.w	r3, [r1], #1
   10ab0:	3b30      	subs	r3, #48	; 0x30
   10ab2:	2b09      	cmp	r3, #9
   10ab4:	d94e      	bls.n	10b54 <_vfiprintf_r+0x1c4>
   10ab6:	b1b0      	cbz	r0, 10ae6 <_vfiprintf_r+0x156>
   10ab8:	9207      	str	r2, [sp, #28]
   10aba:	e014      	b.n	10ae6 <_vfiprintf_r+0x156>
   10abc:	eba0 0308 	sub.w	r3, r0, r8
   10ac0:	fa09 f303 	lsl.w	r3, r9, r3
   10ac4:	4313      	orrs	r3, r2
   10ac6:	9304      	str	r3, [sp, #16]
   10ac8:	46a2      	mov	sl, r4
   10aca:	e7d2      	b.n	10a72 <_vfiprintf_r+0xe2>
   10acc:	9b03      	ldr	r3, [sp, #12]
   10ace:	1d19      	adds	r1, r3, #4
   10ad0:	681b      	ldr	r3, [r3, #0]
   10ad2:	9103      	str	r1, [sp, #12]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	bfbb      	ittet	lt
   10ad8:	425b      	neglt	r3, r3
   10ada:	f042 0202 	orrlt.w	r2, r2, #2
   10ade:	9307      	strge	r3, [sp, #28]
   10ae0:	9307      	strlt	r3, [sp, #28]
   10ae2:	bfb8      	it	lt
   10ae4:	9204      	strlt	r2, [sp, #16]
   10ae6:	7823      	ldrb	r3, [r4, #0]
   10ae8:	2b2e      	cmp	r3, #46	; 0x2e
   10aea:	d10c      	bne.n	10b06 <_vfiprintf_r+0x176>
   10aec:	7863      	ldrb	r3, [r4, #1]
   10aee:	2b2a      	cmp	r3, #42	; 0x2a
   10af0:	d135      	bne.n	10b5e <_vfiprintf_r+0x1ce>
   10af2:	9b03      	ldr	r3, [sp, #12]
   10af4:	1d1a      	adds	r2, r3, #4
   10af6:	681b      	ldr	r3, [r3, #0]
   10af8:	9203      	str	r2, [sp, #12]
   10afa:	2b00      	cmp	r3, #0
   10afc:	bfb8      	it	lt
   10afe:	f04f 33ff 	movlt.w	r3, #4294967295
   10b02:	3402      	adds	r4, #2
   10b04:	9305      	str	r3, [sp, #20]
   10b06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 10bec <_vfiprintf_r+0x25c>
   10b0a:	7821      	ldrb	r1, [r4, #0]
   10b0c:	2203      	movs	r2, #3
   10b0e:	4650      	mov	r0, sl
   10b10:	f7ef faf6 	bl	100 <memchr>
   10b14:	b140      	cbz	r0, 10b28 <_vfiprintf_r+0x198>
   10b16:	2340      	movs	r3, #64	; 0x40
   10b18:	eba0 000a 	sub.w	r0, r0, sl
   10b1c:	fa03 f000 	lsl.w	r0, r3, r0
   10b20:	9b04      	ldr	r3, [sp, #16]
   10b22:	4303      	orrs	r3, r0
   10b24:	3401      	adds	r4, #1
   10b26:	9304      	str	r3, [sp, #16]
   10b28:	f814 1b01 	ldrb.w	r1, [r4], #1
   10b2c:	482c      	ldr	r0, [pc, #176]	; (10be0 <_vfiprintf_r+0x250>)
   10b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   10b32:	2206      	movs	r2, #6
   10b34:	f7ef fae4 	bl	100 <memchr>
   10b38:	2800      	cmp	r0, #0
   10b3a:	d03f      	beq.n	10bbc <_vfiprintf_r+0x22c>
   10b3c:	4b29      	ldr	r3, [pc, #164]	; (10be4 <_vfiprintf_r+0x254>)
   10b3e:	bb1b      	cbnz	r3, 10b88 <_vfiprintf_r+0x1f8>
   10b40:	9b03      	ldr	r3, [sp, #12]
   10b42:	3307      	adds	r3, #7
   10b44:	f023 0307 	bic.w	r3, r3, #7
   10b48:	3308      	adds	r3, #8
   10b4a:	9303      	str	r3, [sp, #12]
   10b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b4e:	443b      	add	r3, r7
   10b50:	9309      	str	r3, [sp, #36]	; 0x24
   10b52:	e767      	b.n	10a24 <_vfiprintf_r+0x94>
   10b54:	fb0c 3202 	mla	r2, ip, r2, r3
   10b58:	460c      	mov	r4, r1
   10b5a:	2001      	movs	r0, #1
   10b5c:	e7a5      	b.n	10aaa <_vfiprintf_r+0x11a>
   10b5e:	2300      	movs	r3, #0
   10b60:	3401      	adds	r4, #1
   10b62:	9305      	str	r3, [sp, #20]
   10b64:	4619      	mov	r1, r3
   10b66:	f04f 0c0a 	mov.w	ip, #10
   10b6a:	4620      	mov	r0, r4
   10b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10b70:	3a30      	subs	r2, #48	; 0x30
   10b72:	2a09      	cmp	r2, #9
   10b74:	d903      	bls.n	10b7e <_vfiprintf_r+0x1ee>
   10b76:	2b00      	cmp	r3, #0
   10b78:	d0c5      	beq.n	10b06 <_vfiprintf_r+0x176>
   10b7a:	9105      	str	r1, [sp, #20]
   10b7c:	e7c3      	b.n	10b06 <_vfiprintf_r+0x176>
   10b7e:	fb0c 2101 	mla	r1, ip, r1, r2
   10b82:	4604      	mov	r4, r0
   10b84:	2301      	movs	r3, #1
   10b86:	e7f0      	b.n	10b6a <_vfiprintf_r+0x1da>
   10b88:	ab03      	add	r3, sp, #12
   10b8a:	9300      	str	r3, [sp, #0]
   10b8c:	462a      	mov	r2, r5
   10b8e:	4b16      	ldr	r3, [pc, #88]	; (10be8 <_vfiprintf_r+0x258>)
   10b90:	a904      	add	r1, sp, #16
   10b92:	4630      	mov	r0, r6
   10b94:	f000 f82c 	bl	10bf0 <_printf_float>
   10b98:	4607      	mov	r7, r0
   10b9a:	1c78      	adds	r0, r7, #1
   10b9c:	d1d6      	bne.n	10b4c <_vfiprintf_r+0x1bc>
   10b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10ba0:	07d9      	lsls	r1, r3, #31
   10ba2:	d405      	bmi.n	10bb0 <_vfiprintf_r+0x220>
   10ba4:	89ab      	ldrh	r3, [r5, #12]
   10ba6:	059a      	lsls	r2, r3, #22
   10ba8:	d402      	bmi.n	10bb0 <_vfiprintf_r+0x220>
   10baa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10bac:	f001 fdb1 	bl	12712 <__retarget_lock_release_recursive>
   10bb0:	89ab      	ldrh	r3, [r5, #12]
   10bb2:	065b      	lsls	r3, r3, #25
   10bb4:	f53f af12 	bmi.w	109dc <_vfiprintf_r+0x4c>
   10bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
   10bba:	e711      	b.n	109e0 <_vfiprintf_r+0x50>
   10bbc:	ab03      	add	r3, sp, #12
   10bbe:	9300      	str	r3, [sp, #0]
   10bc0:	462a      	mov	r2, r5
   10bc2:	4b09      	ldr	r3, [pc, #36]	; (10be8 <_vfiprintf_r+0x258>)
   10bc4:	a904      	add	r1, sp, #16
   10bc6:	4630      	mov	r0, r6
   10bc8:	f000 fa3c 	bl	11044 <_printf_i>
   10bcc:	e7e4      	b.n	10b98 <_vfiprintf_r+0x208>
   10bce:	bf00      	nop
   10bd0:	0006ba78 	.word	0x0006ba78
   10bd4:	0006ba98 	.word	0x0006ba98
   10bd8:	0006ba58 	.word	0x0006ba58
   10bdc:	0006bc01 	.word	0x0006bc01
   10be0:	0006bc0b 	.word	0x0006bc0b
   10be4:	00010bf1 	.word	0x00010bf1
   10be8:	00016031 	.word	0x00016031
   10bec:	0006bc07 	.word	0x0006bc07

00010bf0 <_printf_float>:
   10bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bf4:	b091      	sub	sp, #68	; 0x44
   10bf6:	460c      	mov	r4, r1
   10bf8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   10bfc:	4616      	mov	r6, r2
   10bfe:	461f      	mov	r7, r3
   10c00:	4605      	mov	r5, r0
   10c02:	f000 fe75 	bl	118f0 <_localeconv_r>
   10c06:	6803      	ldr	r3, [r0, #0]
   10c08:	9309      	str	r3, [sp, #36]	; 0x24
   10c0a:	4618      	mov	r0, r3
   10c0c:	f7f0 fc82 	bl	1514 <strlen>
   10c10:	2300      	movs	r3, #0
   10c12:	930e      	str	r3, [sp, #56]	; 0x38
   10c14:	f8d8 3000 	ldr.w	r3, [r8]
   10c18:	900a      	str	r0, [sp, #40]	; 0x28
   10c1a:	3307      	adds	r3, #7
   10c1c:	f023 0307 	bic.w	r3, r3, #7
   10c20:	f103 0208 	add.w	r2, r3, #8
   10c24:	f894 9018 	ldrb.w	r9, [r4, #24]
   10c28:	f8d4 b000 	ldr.w	fp, [r4]
   10c2c:	f8c8 2000 	str.w	r2, [r8]
   10c30:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   10c38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   10c3c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   10c40:	930b      	str	r3, [sp, #44]	; 0x2c
   10c42:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10c44:	4b9c      	ldr	r3, [pc, #624]	; (10eb8 <_printf_float+0x2c8>)
   10c46:	f04f 32ff 	mov.w	r2, #4294967295
   10c4a:	4640      	mov	r0, r8
   10c4c:	f7f0 fc42 	bl	14d4 <__aeabi_dcmpun>
   10c50:	bb70      	cbnz	r0, 10cb0 <_printf_float+0xc0>
   10c52:	4b99      	ldr	r3, [pc, #612]	; (10eb8 <_printf_float+0x2c8>)
   10c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10c56:	f04f 32ff 	mov.w	r2, #4294967295
   10c5a:	4640      	mov	r0, r8
   10c5c:	f7ef fed8 	bl	a10 <__aeabi_dcmple>
   10c60:	bb30      	cbnz	r0, 10cb0 <_printf_float+0xc0>
   10c62:	2200      	movs	r2, #0
   10c64:	2300      	movs	r3, #0
   10c66:	4640      	mov	r0, r8
   10c68:	4651      	mov	r1, sl
   10c6a:	f7ef fec7 	bl	9fc <__aeabi_dcmplt>
   10c6e:	b110      	cbz	r0, 10c76 <_printf_float+0x86>
   10c70:	232d      	movs	r3, #45	; 0x2d
   10c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10c76:	4b91      	ldr	r3, [pc, #580]	; (10ebc <_printf_float+0x2cc>)
   10c78:	4891      	ldr	r0, [pc, #580]	; (10ec0 <_printf_float+0x2d0>)
   10c7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   10c7e:	bf94      	ite	ls
   10c80:	4698      	movls	r8, r3
   10c82:	4680      	movhi	r8, r0
   10c84:	2303      	movs	r3, #3
   10c86:	6123      	str	r3, [r4, #16]
   10c88:	f02b 0304 	bic.w	r3, fp, #4
   10c8c:	6023      	str	r3, [r4, #0]
   10c8e:	f04f 0a00 	mov.w	sl, #0
   10c92:	9700      	str	r7, [sp, #0]
   10c94:	4633      	mov	r3, r6
   10c96:	aa0f      	add	r2, sp, #60	; 0x3c
   10c98:	4621      	mov	r1, r4
   10c9a:	4628      	mov	r0, r5
   10c9c:	f005 fa78 	bl	16190 <_printf_common>
   10ca0:	3001      	adds	r0, #1
   10ca2:	f040 808f 	bne.w	10dc4 <_printf_float+0x1d4>
   10ca6:	f04f 30ff 	mov.w	r0, #4294967295
   10caa:	b011      	add	sp, #68	; 0x44
   10cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cb0:	4642      	mov	r2, r8
   10cb2:	4653      	mov	r3, sl
   10cb4:	4640      	mov	r0, r8
   10cb6:	4651      	mov	r1, sl
   10cb8:	f7f0 fc0c 	bl	14d4 <__aeabi_dcmpun>
   10cbc:	b140      	cbz	r0, 10cd0 <_printf_float+0xe0>
   10cbe:	f1ba 0f00 	cmp.w	sl, #0
   10cc2:	bfbc      	itt	lt
   10cc4:	232d      	movlt	r3, #45	; 0x2d
   10cc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   10cca:	487e      	ldr	r0, [pc, #504]	; (10ec4 <_printf_float+0x2d4>)
   10ccc:	4b7e      	ldr	r3, [pc, #504]	; (10ec8 <_printf_float+0x2d8>)
   10cce:	e7d4      	b.n	10c7a <_printf_float+0x8a>
   10cd0:	6863      	ldr	r3, [r4, #4]
   10cd2:	1c5a      	adds	r2, r3, #1
   10cd4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   10cd8:	d142      	bne.n	10d60 <_printf_float+0x170>
   10cda:	2306      	movs	r3, #6
   10cdc:	6063      	str	r3, [r4, #4]
   10cde:	2200      	movs	r2, #0
   10ce0:	9206      	str	r2, [sp, #24]
   10ce2:	aa0e      	add	r2, sp, #56	; 0x38
   10ce4:	e9cd 9204 	strd	r9, r2, [sp, #16]
   10ce8:	aa0d      	add	r2, sp, #52	; 0x34
   10cea:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   10cee:	9203      	str	r2, [sp, #12]
   10cf0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   10cf4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10cf8:	6023      	str	r3, [r4, #0]
   10cfa:	6863      	ldr	r3, [r4, #4]
   10cfc:	9300      	str	r3, [sp, #0]
   10cfe:	4642      	mov	r2, r8
   10d00:	4653      	mov	r3, sl
   10d02:	4628      	mov	r0, r5
   10d04:	910b      	str	r1, [sp, #44]	; 0x2c
   10d06:	f005 f9a5 	bl	16054 <__cvt>
   10d0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10d0c:	2947      	cmp	r1, #71	; 0x47
   10d0e:	4680      	mov	r8, r0
   10d10:	990d      	ldr	r1, [sp, #52]	; 0x34
   10d12:	d108      	bne.n	10d26 <_printf_float+0x136>
   10d14:	1cc8      	adds	r0, r1, #3
   10d16:	db02      	blt.n	10d1e <_printf_float+0x12e>
   10d18:	6863      	ldr	r3, [r4, #4]
   10d1a:	4299      	cmp	r1, r3
   10d1c:	dd40      	ble.n	10da0 <_printf_float+0x1b0>
   10d1e:	f1a9 0902 	sub.w	r9, r9, #2
   10d22:	fa5f f989 	uxtb.w	r9, r9
   10d26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   10d2a:	d81f      	bhi.n	10d6c <_printf_float+0x17c>
   10d2c:	3901      	subs	r1, #1
   10d2e:	464a      	mov	r2, r9
   10d30:	f104 0050 	add.w	r0, r4, #80	; 0x50
   10d34:	910d      	str	r1, [sp, #52]	; 0x34
   10d36:	f005 f9ed 	bl	16114 <__exponent>
   10d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10d3c:	1813      	adds	r3, r2, r0
   10d3e:	2a01      	cmp	r2, #1
   10d40:	4682      	mov	sl, r0
   10d42:	6123      	str	r3, [r4, #16]
   10d44:	dc02      	bgt.n	10d4c <_printf_float+0x15c>
   10d46:	6822      	ldr	r2, [r4, #0]
   10d48:	07d2      	lsls	r2, r2, #31
   10d4a:	d501      	bpl.n	10d50 <_printf_float+0x160>
   10d4c:	3301      	adds	r3, #1
   10d4e:	6123      	str	r3, [r4, #16]
   10d50:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   10d54:	2b00      	cmp	r3, #0
   10d56:	d09c      	beq.n	10c92 <_printf_float+0xa2>
   10d58:	232d      	movs	r3, #45	; 0x2d
   10d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10d5e:	e798      	b.n	10c92 <_printf_float+0xa2>
   10d60:	2947      	cmp	r1, #71	; 0x47
   10d62:	d1bc      	bne.n	10cde <_printf_float+0xee>
   10d64:	2b00      	cmp	r3, #0
   10d66:	d1ba      	bne.n	10cde <_printf_float+0xee>
   10d68:	2301      	movs	r3, #1
   10d6a:	e7b7      	b.n	10cdc <_printf_float+0xec>
   10d6c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   10d70:	d118      	bne.n	10da4 <_printf_float+0x1b4>
   10d72:	2900      	cmp	r1, #0
   10d74:	6863      	ldr	r3, [r4, #4]
   10d76:	dd0b      	ble.n	10d90 <_printf_float+0x1a0>
   10d78:	6121      	str	r1, [r4, #16]
   10d7a:	b913      	cbnz	r3, 10d82 <_printf_float+0x192>
   10d7c:	6822      	ldr	r2, [r4, #0]
   10d7e:	07d0      	lsls	r0, r2, #31
   10d80:	d502      	bpl.n	10d88 <_printf_float+0x198>
   10d82:	3301      	adds	r3, #1
   10d84:	440b      	add	r3, r1
   10d86:	6123      	str	r3, [r4, #16]
   10d88:	65a1      	str	r1, [r4, #88]	; 0x58
   10d8a:	f04f 0a00 	mov.w	sl, #0
   10d8e:	e7df      	b.n	10d50 <_printf_float+0x160>
   10d90:	b913      	cbnz	r3, 10d98 <_printf_float+0x1a8>
   10d92:	6822      	ldr	r2, [r4, #0]
   10d94:	07d2      	lsls	r2, r2, #31
   10d96:	d501      	bpl.n	10d9c <_printf_float+0x1ac>
   10d98:	3302      	adds	r3, #2
   10d9a:	e7f4      	b.n	10d86 <_printf_float+0x196>
   10d9c:	2301      	movs	r3, #1
   10d9e:	e7f2      	b.n	10d86 <_printf_float+0x196>
   10da0:	f04f 0967 	mov.w	r9, #103	; 0x67
   10da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10da6:	4299      	cmp	r1, r3
   10da8:	db05      	blt.n	10db6 <_printf_float+0x1c6>
   10daa:	6823      	ldr	r3, [r4, #0]
   10dac:	6121      	str	r1, [r4, #16]
   10dae:	07d8      	lsls	r0, r3, #31
   10db0:	d5ea      	bpl.n	10d88 <_printf_float+0x198>
   10db2:	1c4b      	adds	r3, r1, #1
   10db4:	e7e7      	b.n	10d86 <_printf_float+0x196>
   10db6:	2900      	cmp	r1, #0
   10db8:	bfd4      	ite	le
   10dba:	f1c1 0202 	rsble	r2, r1, #2
   10dbe:	2201      	movgt	r2, #1
   10dc0:	4413      	add	r3, r2
   10dc2:	e7e0      	b.n	10d86 <_printf_float+0x196>
   10dc4:	6823      	ldr	r3, [r4, #0]
   10dc6:	055a      	lsls	r2, r3, #21
   10dc8:	d407      	bmi.n	10dda <_printf_float+0x1ea>
   10dca:	6923      	ldr	r3, [r4, #16]
   10dcc:	4642      	mov	r2, r8
   10dce:	4631      	mov	r1, r6
   10dd0:	4628      	mov	r0, r5
   10dd2:	47b8      	blx	r7
   10dd4:	3001      	adds	r0, #1
   10dd6:	d12b      	bne.n	10e30 <_printf_float+0x240>
   10dd8:	e765      	b.n	10ca6 <_printf_float+0xb6>
   10dda:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   10dde:	f240 80dc 	bls.w	10f9a <_printf_float+0x3aa>
   10de2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   10de6:	2200      	movs	r2, #0
   10de8:	2300      	movs	r3, #0
   10dea:	f7ef fdfd 	bl	9e8 <__aeabi_dcmpeq>
   10dee:	2800      	cmp	r0, #0
   10df0:	d033      	beq.n	10e5a <_printf_float+0x26a>
   10df2:	4a36      	ldr	r2, [pc, #216]	; (10ecc <_printf_float+0x2dc>)
   10df4:	2301      	movs	r3, #1
   10df6:	4631      	mov	r1, r6
   10df8:	4628      	mov	r0, r5
   10dfa:	47b8      	blx	r7
   10dfc:	3001      	adds	r0, #1
   10dfe:	f43f af52 	beq.w	10ca6 <_printf_float+0xb6>
   10e02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10e06:	429a      	cmp	r2, r3
   10e08:	db02      	blt.n	10e10 <_printf_float+0x220>
   10e0a:	6823      	ldr	r3, [r4, #0]
   10e0c:	07d8      	lsls	r0, r3, #31
   10e0e:	d50f      	bpl.n	10e30 <_printf_float+0x240>
   10e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10e14:	4631      	mov	r1, r6
   10e16:	4628      	mov	r0, r5
   10e18:	47b8      	blx	r7
   10e1a:	3001      	adds	r0, #1
   10e1c:	f43f af43 	beq.w	10ca6 <_printf_float+0xb6>
   10e20:	f04f 0800 	mov.w	r8, #0
   10e24:	f104 091a 	add.w	r9, r4, #26
   10e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10e2a:	3b01      	subs	r3, #1
   10e2c:	4543      	cmp	r3, r8
   10e2e:	dc09      	bgt.n	10e44 <_printf_float+0x254>
   10e30:	6823      	ldr	r3, [r4, #0]
   10e32:	079b      	lsls	r3, r3, #30
   10e34:	f100 8101 	bmi.w	1103a <_printf_float+0x44a>
   10e38:	68e0      	ldr	r0, [r4, #12]
   10e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10e3c:	4298      	cmp	r0, r3
   10e3e:	bfb8      	it	lt
   10e40:	4618      	movlt	r0, r3
   10e42:	e732      	b.n	10caa <_printf_float+0xba>
   10e44:	2301      	movs	r3, #1
   10e46:	464a      	mov	r2, r9
   10e48:	4631      	mov	r1, r6
   10e4a:	4628      	mov	r0, r5
   10e4c:	47b8      	blx	r7
   10e4e:	3001      	adds	r0, #1
   10e50:	f43f af29 	beq.w	10ca6 <_printf_float+0xb6>
   10e54:	f108 0801 	add.w	r8, r8, #1
   10e58:	e7e6      	b.n	10e28 <_printf_float+0x238>
   10e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10e5c:	2b00      	cmp	r3, #0
   10e5e:	dc37      	bgt.n	10ed0 <_printf_float+0x2e0>
   10e60:	4a1a      	ldr	r2, [pc, #104]	; (10ecc <_printf_float+0x2dc>)
   10e62:	2301      	movs	r3, #1
   10e64:	4631      	mov	r1, r6
   10e66:	4628      	mov	r0, r5
   10e68:	47b8      	blx	r7
   10e6a:	3001      	adds	r0, #1
   10e6c:	f43f af1b 	beq.w	10ca6 <_printf_float+0xb6>
   10e70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10e74:	4313      	orrs	r3, r2
   10e76:	d102      	bne.n	10e7e <_printf_float+0x28e>
   10e78:	6823      	ldr	r3, [r4, #0]
   10e7a:	07d9      	lsls	r1, r3, #31
   10e7c:	d5d8      	bpl.n	10e30 <_printf_float+0x240>
   10e7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10e82:	4631      	mov	r1, r6
   10e84:	4628      	mov	r0, r5
   10e86:	47b8      	blx	r7
   10e88:	3001      	adds	r0, #1
   10e8a:	f43f af0c 	beq.w	10ca6 <_printf_float+0xb6>
   10e8e:	f04f 0900 	mov.w	r9, #0
   10e92:	f104 0a1a 	add.w	sl, r4, #26
   10e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10e98:	425b      	negs	r3, r3
   10e9a:	454b      	cmp	r3, r9
   10e9c:	dc01      	bgt.n	10ea2 <_printf_float+0x2b2>
   10e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ea0:	e794      	b.n	10dcc <_printf_float+0x1dc>
   10ea2:	2301      	movs	r3, #1
   10ea4:	4652      	mov	r2, sl
   10ea6:	4631      	mov	r1, r6
   10ea8:	4628      	mov	r0, r5
   10eaa:	47b8      	blx	r7
   10eac:	3001      	adds	r0, #1
   10eae:	f43f aefa 	beq.w	10ca6 <_printf_float+0xb6>
   10eb2:	f109 0901 	add.w	r9, r9, #1
   10eb6:	e7ee      	b.n	10e96 <_printf_float+0x2a6>
   10eb8:	7fefffff 	.word	0x7fefffff
   10ebc:	0006bc12 	.word	0x0006bc12
   10ec0:	0006bc16 	.word	0x0006bc16
   10ec4:	0006bc1e 	.word	0x0006bc1e
   10ec8:	0006bc1a 	.word	0x0006bc1a
   10ecc:	0006bc22 	.word	0x0006bc22
   10ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   10ed4:	429a      	cmp	r2, r3
   10ed6:	bfa8      	it	ge
   10ed8:	461a      	movge	r2, r3
   10eda:	2a00      	cmp	r2, #0
   10edc:	4691      	mov	r9, r2
   10ede:	dc37      	bgt.n	10f50 <_printf_float+0x360>
   10ee0:	f04f 0b00 	mov.w	fp, #0
   10ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   10ee8:	f104 021a 	add.w	r2, r4, #26
   10eec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   10ef0:	ebaa 0309 	sub.w	r3, sl, r9
   10ef4:	455b      	cmp	r3, fp
   10ef6:	dc33      	bgt.n	10f60 <_printf_float+0x370>
   10ef8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10efc:	429a      	cmp	r2, r3
   10efe:	db3b      	blt.n	10f78 <_printf_float+0x388>
   10f00:	6823      	ldr	r3, [r4, #0]
   10f02:	07da      	lsls	r2, r3, #31
   10f04:	d438      	bmi.n	10f78 <_printf_float+0x388>
   10f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10f08:	990d      	ldr	r1, [sp, #52]	; 0x34
   10f0a:	eba2 030a 	sub.w	r3, r2, sl
   10f0e:	eba2 0901 	sub.w	r9, r2, r1
   10f12:	4599      	cmp	r9, r3
   10f14:	bfa8      	it	ge
   10f16:	4699      	movge	r9, r3
   10f18:	f1b9 0f00 	cmp.w	r9, #0
   10f1c:	dc34      	bgt.n	10f88 <_printf_float+0x398>
   10f1e:	f04f 0800 	mov.w	r8, #0
   10f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   10f26:	f104 0a1a 	add.w	sl, r4, #26
   10f2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10f2e:	1a9b      	subs	r3, r3, r2
   10f30:	eba3 0309 	sub.w	r3, r3, r9
   10f34:	4543      	cmp	r3, r8
   10f36:	f77f af7b 	ble.w	10e30 <_printf_float+0x240>
   10f3a:	2301      	movs	r3, #1
   10f3c:	4652      	mov	r2, sl
   10f3e:	4631      	mov	r1, r6
   10f40:	4628      	mov	r0, r5
   10f42:	47b8      	blx	r7
   10f44:	3001      	adds	r0, #1
   10f46:	f43f aeae 	beq.w	10ca6 <_printf_float+0xb6>
   10f4a:	f108 0801 	add.w	r8, r8, #1
   10f4e:	e7ec      	b.n	10f2a <_printf_float+0x33a>
   10f50:	4613      	mov	r3, r2
   10f52:	4631      	mov	r1, r6
   10f54:	4642      	mov	r2, r8
   10f56:	4628      	mov	r0, r5
   10f58:	47b8      	blx	r7
   10f5a:	3001      	adds	r0, #1
   10f5c:	d1c0      	bne.n	10ee0 <_printf_float+0x2f0>
   10f5e:	e6a2      	b.n	10ca6 <_printf_float+0xb6>
   10f60:	2301      	movs	r3, #1
   10f62:	4631      	mov	r1, r6
   10f64:	4628      	mov	r0, r5
   10f66:	920b      	str	r2, [sp, #44]	; 0x2c
   10f68:	47b8      	blx	r7
   10f6a:	3001      	adds	r0, #1
   10f6c:	f43f ae9b 	beq.w	10ca6 <_printf_float+0xb6>
   10f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10f72:	f10b 0b01 	add.w	fp, fp, #1
   10f76:	e7b9      	b.n	10eec <_printf_float+0x2fc>
   10f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10f7c:	4631      	mov	r1, r6
   10f7e:	4628      	mov	r0, r5
   10f80:	47b8      	blx	r7
   10f82:	3001      	adds	r0, #1
   10f84:	d1bf      	bne.n	10f06 <_printf_float+0x316>
   10f86:	e68e      	b.n	10ca6 <_printf_float+0xb6>
   10f88:	464b      	mov	r3, r9
   10f8a:	eb08 020a 	add.w	r2, r8, sl
   10f8e:	4631      	mov	r1, r6
   10f90:	4628      	mov	r0, r5
   10f92:	47b8      	blx	r7
   10f94:	3001      	adds	r0, #1
   10f96:	d1c2      	bne.n	10f1e <_printf_float+0x32e>
   10f98:	e685      	b.n	10ca6 <_printf_float+0xb6>
   10f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10f9c:	2a01      	cmp	r2, #1
   10f9e:	dc01      	bgt.n	10fa4 <_printf_float+0x3b4>
   10fa0:	07db      	lsls	r3, r3, #31
   10fa2:	d537      	bpl.n	11014 <_printf_float+0x424>
   10fa4:	2301      	movs	r3, #1
   10fa6:	4642      	mov	r2, r8
   10fa8:	4631      	mov	r1, r6
   10faa:	4628      	mov	r0, r5
   10fac:	47b8      	blx	r7
   10fae:	3001      	adds	r0, #1
   10fb0:	f43f ae79 	beq.w	10ca6 <_printf_float+0xb6>
   10fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10fb8:	4631      	mov	r1, r6
   10fba:	4628      	mov	r0, r5
   10fbc:	47b8      	blx	r7
   10fbe:	3001      	adds	r0, #1
   10fc0:	f43f ae71 	beq.w	10ca6 <_printf_float+0xb6>
   10fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   10fc8:	2200      	movs	r2, #0
   10fca:	2300      	movs	r3, #0
   10fcc:	f7ef fd0c 	bl	9e8 <__aeabi_dcmpeq>
   10fd0:	b9d8      	cbnz	r0, 1100a <_printf_float+0x41a>
   10fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10fd4:	f108 0201 	add.w	r2, r8, #1
   10fd8:	3b01      	subs	r3, #1
   10fda:	4631      	mov	r1, r6
   10fdc:	4628      	mov	r0, r5
   10fde:	47b8      	blx	r7
   10fe0:	3001      	adds	r0, #1
   10fe2:	d10e      	bne.n	11002 <_printf_float+0x412>
   10fe4:	e65f      	b.n	10ca6 <_printf_float+0xb6>
   10fe6:	2301      	movs	r3, #1
   10fe8:	464a      	mov	r2, r9
   10fea:	4631      	mov	r1, r6
   10fec:	4628      	mov	r0, r5
   10fee:	47b8      	blx	r7
   10ff0:	3001      	adds	r0, #1
   10ff2:	f43f ae58 	beq.w	10ca6 <_printf_float+0xb6>
   10ff6:	f108 0801 	add.w	r8, r8, #1
   10ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ffc:	3b01      	subs	r3, #1
   10ffe:	4543      	cmp	r3, r8
   11000:	dcf1      	bgt.n	10fe6 <_printf_float+0x3f6>
   11002:	4653      	mov	r3, sl
   11004:	f104 0250 	add.w	r2, r4, #80	; 0x50
   11008:	e6e1      	b.n	10dce <_printf_float+0x1de>
   1100a:	f04f 0800 	mov.w	r8, #0
   1100e:	f104 091a 	add.w	r9, r4, #26
   11012:	e7f2      	b.n	10ffa <_printf_float+0x40a>
   11014:	2301      	movs	r3, #1
   11016:	4642      	mov	r2, r8
   11018:	e7df      	b.n	10fda <_printf_float+0x3ea>
   1101a:	2301      	movs	r3, #1
   1101c:	464a      	mov	r2, r9
   1101e:	4631      	mov	r1, r6
   11020:	4628      	mov	r0, r5
   11022:	47b8      	blx	r7
   11024:	3001      	adds	r0, #1
   11026:	f43f ae3e 	beq.w	10ca6 <_printf_float+0xb6>
   1102a:	f108 0801 	add.w	r8, r8, #1
   1102e:	68e3      	ldr	r3, [r4, #12]
   11030:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11032:	1a5b      	subs	r3, r3, r1
   11034:	4543      	cmp	r3, r8
   11036:	dcf0      	bgt.n	1101a <_printf_float+0x42a>
   11038:	e6fe      	b.n	10e38 <_printf_float+0x248>
   1103a:	f04f 0800 	mov.w	r8, #0
   1103e:	f104 0919 	add.w	r9, r4, #25
   11042:	e7f4      	b.n	1102e <_printf_float+0x43e>

00011044 <_printf_i>:
   11044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   11048:	460c      	mov	r4, r1
   1104a:	4691      	mov	r9, r2
   1104c:	7e27      	ldrb	r7, [r4, #24]
   1104e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11050:	2f78      	cmp	r7, #120	; 0x78
   11052:	4680      	mov	r8, r0
   11054:	469a      	mov	sl, r3
   11056:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1105a:	d807      	bhi.n	1106c <_printf_i+0x28>
   1105c:	2f62      	cmp	r7, #98	; 0x62
   1105e:	d80a      	bhi.n	11076 <_printf_i+0x32>
   11060:	2f00      	cmp	r7, #0
   11062:	f000 80d8 	beq.w	11216 <_printf_i+0x1d2>
   11066:	2f58      	cmp	r7, #88	; 0x58
   11068:	f000 80a3 	beq.w	111b2 <_printf_i+0x16e>
   1106c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   11070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   11074:	e03a      	b.n	110ec <_printf_i+0xa8>
   11076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1107a:	2b15      	cmp	r3, #21
   1107c:	d8f6      	bhi.n	1106c <_printf_i+0x28>
   1107e:	a001      	add	r0, pc, #4	; (adr r0, 11084 <_printf_i+0x40>)
   11080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   11084:	000110dd 	.word	0x000110dd
   11088:	000110f1 	.word	0x000110f1
   1108c:	0001106d 	.word	0x0001106d
   11090:	0001106d 	.word	0x0001106d
   11094:	0001106d 	.word	0x0001106d
   11098:	0001106d 	.word	0x0001106d
   1109c:	000110f1 	.word	0x000110f1
   110a0:	0001106d 	.word	0x0001106d
   110a4:	0001106d 	.word	0x0001106d
   110a8:	0001106d 	.word	0x0001106d
   110ac:	0001106d 	.word	0x0001106d
   110b0:	000111fd 	.word	0x000111fd
   110b4:	00011121 	.word	0x00011121
   110b8:	000111df 	.word	0x000111df
   110bc:	0001106d 	.word	0x0001106d
   110c0:	0001106d 	.word	0x0001106d
   110c4:	0001121f 	.word	0x0001121f
   110c8:	0001106d 	.word	0x0001106d
   110cc:	00011121 	.word	0x00011121
   110d0:	0001106d 	.word	0x0001106d
   110d4:	0001106d 	.word	0x0001106d
   110d8:	000111e7 	.word	0x000111e7
   110dc:	680b      	ldr	r3, [r1, #0]
   110de:	1d1a      	adds	r2, r3, #4
   110e0:	681b      	ldr	r3, [r3, #0]
   110e2:	600a      	str	r2, [r1, #0]
   110e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   110e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   110ec:	2301      	movs	r3, #1
   110ee:	e0a3      	b.n	11238 <_printf_i+0x1f4>
   110f0:	6825      	ldr	r5, [r4, #0]
   110f2:	6808      	ldr	r0, [r1, #0]
   110f4:	062e      	lsls	r6, r5, #24
   110f6:	f100 0304 	add.w	r3, r0, #4
   110fa:	d50a      	bpl.n	11112 <_printf_i+0xce>
   110fc:	6805      	ldr	r5, [r0, #0]
   110fe:	600b      	str	r3, [r1, #0]
   11100:	2d00      	cmp	r5, #0
   11102:	da03      	bge.n	1110c <_printf_i+0xc8>
   11104:	232d      	movs	r3, #45	; 0x2d
   11106:	426d      	negs	r5, r5
   11108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1110c:	485e      	ldr	r0, [pc, #376]	; (11288 <_printf_i+0x244>)
   1110e:	230a      	movs	r3, #10
   11110:	e019      	b.n	11146 <_printf_i+0x102>
   11112:	f015 0f40 	tst.w	r5, #64	; 0x40
   11116:	6805      	ldr	r5, [r0, #0]
   11118:	600b      	str	r3, [r1, #0]
   1111a:	bf18      	it	ne
   1111c:	b22d      	sxthne	r5, r5
   1111e:	e7ef      	b.n	11100 <_printf_i+0xbc>
   11120:	680b      	ldr	r3, [r1, #0]
   11122:	6825      	ldr	r5, [r4, #0]
   11124:	1d18      	adds	r0, r3, #4
   11126:	6008      	str	r0, [r1, #0]
   11128:	0628      	lsls	r0, r5, #24
   1112a:	d501      	bpl.n	11130 <_printf_i+0xec>
   1112c:	681d      	ldr	r5, [r3, #0]
   1112e:	e002      	b.n	11136 <_printf_i+0xf2>
   11130:	0669      	lsls	r1, r5, #25
   11132:	d5fb      	bpl.n	1112c <_printf_i+0xe8>
   11134:	881d      	ldrh	r5, [r3, #0]
   11136:	4854      	ldr	r0, [pc, #336]	; (11288 <_printf_i+0x244>)
   11138:	2f6f      	cmp	r7, #111	; 0x6f
   1113a:	bf0c      	ite	eq
   1113c:	2308      	moveq	r3, #8
   1113e:	230a      	movne	r3, #10
   11140:	2100      	movs	r1, #0
   11142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   11146:	6866      	ldr	r6, [r4, #4]
   11148:	60a6      	str	r6, [r4, #8]
   1114a:	2e00      	cmp	r6, #0
   1114c:	bfa2      	ittt	ge
   1114e:	6821      	ldrge	r1, [r4, #0]
   11150:	f021 0104 	bicge.w	r1, r1, #4
   11154:	6021      	strge	r1, [r4, #0]
   11156:	b90d      	cbnz	r5, 1115c <_printf_i+0x118>
   11158:	2e00      	cmp	r6, #0
   1115a:	d04d      	beq.n	111f8 <_printf_i+0x1b4>
   1115c:	4616      	mov	r6, r2
   1115e:	fbb5 f1f3 	udiv	r1, r5, r3
   11162:	fb03 5711 	mls	r7, r3, r1, r5
   11166:	5dc7      	ldrb	r7, [r0, r7]
   11168:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1116c:	462f      	mov	r7, r5
   1116e:	42bb      	cmp	r3, r7
   11170:	460d      	mov	r5, r1
   11172:	d9f4      	bls.n	1115e <_printf_i+0x11a>
   11174:	2b08      	cmp	r3, #8
   11176:	d10b      	bne.n	11190 <_printf_i+0x14c>
   11178:	6823      	ldr	r3, [r4, #0]
   1117a:	07df      	lsls	r7, r3, #31
   1117c:	d508      	bpl.n	11190 <_printf_i+0x14c>
   1117e:	6923      	ldr	r3, [r4, #16]
   11180:	6861      	ldr	r1, [r4, #4]
   11182:	4299      	cmp	r1, r3
   11184:	bfde      	ittt	le
   11186:	2330      	movle	r3, #48	; 0x30
   11188:	f806 3c01 	strble.w	r3, [r6, #-1]
   1118c:	f106 36ff 	addle.w	r6, r6, #4294967295
   11190:	1b92      	subs	r2, r2, r6
   11192:	6122      	str	r2, [r4, #16]
   11194:	f8cd a000 	str.w	sl, [sp]
   11198:	464b      	mov	r3, r9
   1119a:	aa03      	add	r2, sp, #12
   1119c:	4621      	mov	r1, r4
   1119e:	4640      	mov	r0, r8
   111a0:	f004 fff6 	bl	16190 <_printf_common>
   111a4:	3001      	adds	r0, #1
   111a6:	d14c      	bne.n	11242 <_printf_i+0x1fe>
   111a8:	f04f 30ff 	mov.w	r0, #4294967295
   111ac:	b004      	add	sp, #16
   111ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   111b2:	4835      	ldr	r0, [pc, #212]	; (11288 <_printf_i+0x244>)
   111b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   111b8:	6823      	ldr	r3, [r4, #0]
   111ba:	680e      	ldr	r6, [r1, #0]
   111bc:	061f      	lsls	r7, r3, #24
   111be:	f856 5b04 	ldr.w	r5, [r6], #4
   111c2:	600e      	str	r6, [r1, #0]
   111c4:	d514      	bpl.n	111f0 <_printf_i+0x1ac>
   111c6:	07d9      	lsls	r1, r3, #31
   111c8:	bf44      	itt	mi
   111ca:	f043 0320 	orrmi.w	r3, r3, #32
   111ce:	6023      	strmi	r3, [r4, #0]
   111d0:	b91d      	cbnz	r5, 111da <_printf_i+0x196>
   111d2:	6823      	ldr	r3, [r4, #0]
   111d4:	f023 0320 	bic.w	r3, r3, #32
   111d8:	6023      	str	r3, [r4, #0]
   111da:	2310      	movs	r3, #16
   111dc:	e7b0      	b.n	11140 <_printf_i+0xfc>
   111de:	6823      	ldr	r3, [r4, #0]
   111e0:	f043 0320 	orr.w	r3, r3, #32
   111e4:	6023      	str	r3, [r4, #0]
   111e6:	2378      	movs	r3, #120	; 0x78
   111e8:	4828      	ldr	r0, [pc, #160]	; (1128c <_printf_i+0x248>)
   111ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   111ee:	e7e3      	b.n	111b8 <_printf_i+0x174>
   111f0:	065e      	lsls	r6, r3, #25
   111f2:	bf48      	it	mi
   111f4:	b2ad      	uxthmi	r5, r5
   111f6:	e7e6      	b.n	111c6 <_printf_i+0x182>
   111f8:	4616      	mov	r6, r2
   111fa:	e7bb      	b.n	11174 <_printf_i+0x130>
   111fc:	680b      	ldr	r3, [r1, #0]
   111fe:	6826      	ldr	r6, [r4, #0]
   11200:	6960      	ldr	r0, [r4, #20]
   11202:	1d1d      	adds	r5, r3, #4
   11204:	600d      	str	r5, [r1, #0]
   11206:	0635      	lsls	r5, r6, #24
   11208:	681b      	ldr	r3, [r3, #0]
   1120a:	d501      	bpl.n	11210 <_printf_i+0x1cc>
   1120c:	6018      	str	r0, [r3, #0]
   1120e:	e002      	b.n	11216 <_printf_i+0x1d2>
   11210:	0671      	lsls	r1, r6, #25
   11212:	d5fb      	bpl.n	1120c <_printf_i+0x1c8>
   11214:	8018      	strh	r0, [r3, #0]
   11216:	2300      	movs	r3, #0
   11218:	6123      	str	r3, [r4, #16]
   1121a:	4616      	mov	r6, r2
   1121c:	e7ba      	b.n	11194 <_printf_i+0x150>
   1121e:	680b      	ldr	r3, [r1, #0]
   11220:	1d1a      	adds	r2, r3, #4
   11222:	600a      	str	r2, [r1, #0]
   11224:	681e      	ldr	r6, [r3, #0]
   11226:	6862      	ldr	r2, [r4, #4]
   11228:	2100      	movs	r1, #0
   1122a:	4630      	mov	r0, r6
   1122c:	f7ee ff68 	bl	100 <memchr>
   11230:	b108      	cbz	r0, 11236 <_printf_i+0x1f2>
   11232:	1b80      	subs	r0, r0, r6
   11234:	6060      	str	r0, [r4, #4]
   11236:	6863      	ldr	r3, [r4, #4]
   11238:	6123      	str	r3, [r4, #16]
   1123a:	2300      	movs	r3, #0
   1123c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   11240:	e7a8      	b.n	11194 <_printf_i+0x150>
   11242:	6923      	ldr	r3, [r4, #16]
   11244:	4632      	mov	r2, r6
   11246:	4649      	mov	r1, r9
   11248:	4640      	mov	r0, r8
   1124a:	47d0      	blx	sl
   1124c:	3001      	adds	r0, #1
   1124e:	d0ab      	beq.n	111a8 <_printf_i+0x164>
   11250:	6823      	ldr	r3, [r4, #0]
   11252:	079b      	lsls	r3, r3, #30
   11254:	d413      	bmi.n	1127e <_printf_i+0x23a>
   11256:	68e0      	ldr	r0, [r4, #12]
   11258:	9b03      	ldr	r3, [sp, #12]
   1125a:	4298      	cmp	r0, r3
   1125c:	bfb8      	it	lt
   1125e:	4618      	movlt	r0, r3
   11260:	e7a4      	b.n	111ac <_printf_i+0x168>
   11262:	2301      	movs	r3, #1
   11264:	4632      	mov	r2, r6
   11266:	4649      	mov	r1, r9
   11268:	4640      	mov	r0, r8
   1126a:	47d0      	blx	sl
   1126c:	3001      	adds	r0, #1
   1126e:	d09b      	beq.n	111a8 <_printf_i+0x164>
   11270:	3501      	adds	r5, #1
   11272:	68e3      	ldr	r3, [r4, #12]
   11274:	9903      	ldr	r1, [sp, #12]
   11276:	1a5b      	subs	r3, r3, r1
   11278:	42ab      	cmp	r3, r5
   1127a:	dcf2      	bgt.n	11262 <_printf_i+0x21e>
   1127c:	e7eb      	b.n	11256 <_printf_i+0x212>
   1127e:	2500      	movs	r5, #0
   11280:	f104 0619 	add.w	r6, r4, #25
   11284:	e7f5      	b.n	11272 <_printf_i+0x22e>
   11286:	bf00      	nop
   11288:	0006bc24 	.word	0x0006bc24
   1128c:	0006bc35 	.word	0x0006bc35

00011290 <_sbrk_r>:
   11290:	b538      	push	{r3, r4, r5, lr}
   11292:	4d06      	ldr	r5, [pc, #24]	; (112ac <_sbrk_r+0x1c>)
   11294:	2300      	movs	r3, #0
   11296:	4604      	mov	r4, r0
   11298:	4608      	mov	r0, r1
   1129a:	602b      	str	r3, [r5, #0]
   1129c:	f7f3 fade 	bl	485c <_sbrk>
   112a0:	1c43      	adds	r3, r0, #1
   112a2:	d102      	bne.n	112aa <_sbrk_r+0x1a>
   112a4:	682b      	ldr	r3, [r5, #0]
   112a6:	b103      	cbz	r3, 112aa <_sbrk_r+0x1a>
   112a8:	6023      	str	r3, [r4, #0]
   112aa:	bd38      	pop	{r3, r4, r5, pc}
   112ac:	200210ec 	.word	0x200210ec

000112b0 <raise>:
   112b0:	4b02      	ldr	r3, [pc, #8]	; (112bc <raise+0xc>)
   112b2:	4601      	mov	r1, r0
   112b4:	6818      	ldr	r0, [r3, #0]
   112b6:	f004 bfd8 	b.w	1626a <_raise_r>
   112ba:	bf00      	nop
   112bc:	200000f8 	.word	0x200000f8

000112c0 <_kill_r>:
   112c0:	b538      	push	{r3, r4, r5, lr}
   112c2:	4d07      	ldr	r5, [pc, #28]	; (112e0 <_kill_r+0x20>)
   112c4:	2300      	movs	r3, #0
   112c6:	4604      	mov	r4, r0
   112c8:	4608      	mov	r0, r1
   112ca:	4611      	mov	r1, r2
   112cc:	602b      	str	r3, [r5, #0]
   112ce:	f001 fa06 	bl	126de <_kill>
   112d2:	1c43      	adds	r3, r0, #1
   112d4:	d102      	bne.n	112dc <_kill_r+0x1c>
   112d6:	682b      	ldr	r3, [r5, #0]
   112d8:	b103      	cbz	r3, 112dc <_kill_r+0x1c>
   112da:	6023      	str	r3, [r4, #0]
   112dc:	bd38      	pop	{r3, r4, r5, pc}
   112de:	bf00      	nop
   112e0:	200210ec 	.word	0x200210ec

000112e4 <strtok>:
   112e4:	4b13      	ldr	r3, [pc, #76]	; (11334 <strtok+0x50>)
   112e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112ea:	681f      	ldr	r7, [r3, #0]
   112ec:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   112ee:	4605      	mov	r5, r0
   112f0:	460e      	mov	r6, r1
   112f2:	b9b4      	cbnz	r4, 11322 <strtok+0x3e>
   112f4:	2050      	movs	r0, #80	; 0x50
   112f6:	f7ff fa93 	bl	10820 <malloc>
   112fa:	65b8      	str	r0, [r7, #88]	; 0x58
   112fc:	e9c0 4400 	strd	r4, r4, [r0]
   11300:	e9c0 4402 	strd	r4, r4, [r0, #8]
   11304:	e9c0 4404 	strd	r4, r4, [r0, #16]
   11308:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   1130c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   11310:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   11314:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   11318:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   1131c:	6184      	str	r4, [r0, #24]
   1131e:	7704      	strb	r4, [r0, #28]
   11320:	6244      	str	r4, [r0, #36]	; 0x24
   11322:	6dba      	ldr	r2, [r7, #88]	; 0x58
   11324:	4631      	mov	r1, r6
   11326:	4628      	mov	r0, r5
   11328:	2301      	movs	r3, #1
   1132a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1132e:	f004 bff8 	b.w	16322 <__strtok_r>
   11332:	bf00      	nop
   11334:	200000f8 	.word	0x200000f8

00011338 <_strtol_l.isra.0>:
   11338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1133c:	4e3a      	ldr	r6, [pc, #232]	; (11428 <_strtol_l.isra.0+0xf0>)
   1133e:	4686      	mov	lr, r0
   11340:	468c      	mov	ip, r1
   11342:	4660      	mov	r0, ip
   11344:	f81c 4b01 	ldrb.w	r4, [ip], #1
   11348:	5da5      	ldrb	r5, [r4, r6]
   1134a:	f015 0508 	ands.w	r5, r5, #8
   1134e:	d1f8      	bne.n	11342 <_strtol_l.isra.0+0xa>
   11350:	2c2d      	cmp	r4, #45	; 0x2d
   11352:	d133      	bne.n	113bc <_strtol_l.isra.0+0x84>
   11354:	f89c 4000 	ldrb.w	r4, [ip]
   11358:	f04f 0801 	mov.w	r8, #1
   1135c:	f100 0c02 	add.w	ip, r0, #2
   11360:	2b00      	cmp	r3, #0
   11362:	d05c      	beq.n	1141e <_strtol_l.isra.0+0xe6>
   11364:	2b10      	cmp	r3, #16
   11366:	d10c      	bne.n	11382 <_strtol_l.isra.0+0x4a>
   11368:	2c30      	cmp	r4, #48	; 0x30
   1136a:	d10a      	bne.n	11382 <_strtol_l.isra.0+0x4a>
   1136c:	f89c 0000 	ldrb.w	r0, [ip]
   11370:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11374:	2858      	cmp	r0, #88	; 0x58
   11376:	d14d      	bne.n	11414 <_strtol_l.isra.0+0xdc>
   11378:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1137c:	2310      	movs	r3, #16
   1137e:	f10c 0c02 	add.w	ip, ip, #2
   11382:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   11386:	3f01      	subs	r7, #1
   11388:	2600      	movs	r6, #0
   1138a:	fbb7 f9f3 	udiv	r9, r7, r3
   1138e:	4630      	mov	r0, r6
   11390:	fb03 7a19 	mls	sl, r3, r9, r7
   11394:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   11398:	2d09      	cmp	r5, #9
   1139a:	d818      	bhi.n	113ce <_strtol_l.isra.0+0x96>
   1139c:	462c      	mov	r4, r5
   1139e:	42a3      	cmp	r3, r4
   113a0:	dd24      	ble.n	113ec <_strtol_l.isra.0+0xb4>
   113a2:	1c75      	adds	r5, r6, #1
   113a4:	d007      	beq.n	113b6 <_strtol_l.isra.0+0x7e>
   113a6:	4581      	cmp	r9, r0
   113a8:	d31d      	bcc.n	113e6 <_strtol_l.isra.0+0xae>
   113aa:	d101      	bne.n	113b0 <_strtol_l.isra.0+0x78>
   113ac:	45a2      	cmp	sl, r4
   113ae:	db1a      	blt.n	113e6 <_strtol_l.isra.0+0xae>
   113b0:	fb00 4003 	mla	r0, r0, r3, r4
   113b4:	2601      	movs	r6, #1
   113b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   113ba:	e7eb      	b.n	11394 <_strtol_l.isra.0+0x5c>
   113bc:	2c2b      	cmp	r4, #43	; 0x2b
   113be:	bf08      	it	eq
   113c0:	f89c 4000 	ldrbeq.w	r4, [ip]
   113c4:	46a8      	mov	r8, r5
   113c6:	bf08      	it	eq
   113c8:	f100 0c02 	addeq.w	ip, r0, #2
   113cc:	e7c8      	b.n	11360 <_strtol_l.isra.0+0x28>
   113ce:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   113d2:	2d19      	cmp	r5, #25
   113d4:	d801      	bhi.n	113da <_strtol_l.isra.0+0xa2>
   113d6:	3c37      	subs	r4, #55	; 0x37
   113d8:	e7e1      	b.n	1139e <_strtol_l.isra.0+0x66>
   113da:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   113de:	2d19      	cmp	r5, #25
   113e0:	d804      	bhi.n	113ec <_strtol_l.isra.0+0xb4>
   113e2:	3c57      	subs	r4, #87	; 0x57
   113e4:	e7db      	b.n	1139e <_strtol_l.isra.0+0x66>
   113e6:	f04f 36ff 	mov.w	r6, #4294967295
   113ea:	e7e4      	b.n	113b6 <_strtol_l.isra.0+0x7e>
   113ec:	1c73      	adds	r3, r6, #1
   113ee:	d106      	bne.n	113fe <_strtol_l.isra.0+0xc6>
   113f0:	2322      	movs	r3, #34	; 0x22
   113f2:	f8ce 3000 	str.w	r3, [lr]
   113f6:	4638      	mov	r0, r7
   113f8:	b942      	cbnz	r2, 1140c <_strtol_l.isra.0+0xd4>
   113fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113fe:	f1b8 0f00 	cmp.w	r8, #0
   11402:	d000      	beq.n	11406 <_strtol_l.isra.0+0xce>
   11404:	4240      	negs	r0, r0
   11406:	2a00      	cmp	r2, #0
   11408:	d0f7      	beq.n	113fa <_strtol_l.isra.0+0xc2>
   1140a:	b10e      	cbz	r6, 11410 <_strtol_l.isra.0+0xd8>
   1140c:	f10c 31ff 	add.w	r1, ip, #4294967295
   11410:	6011      	str	r1, [r2, #0]
   11412:	e7f2      	b.n	113fa <_strtol_l.isra.0+0xc2>
   11414:	2430      	movs	r4, #48	; 0x30
   11416:	2b00      	cmp	r3, #0
   11418:	d1b3      	bne.n	11382 <_strtol_l.isra.0+0x4a>
   1141a:	2308      	movs	r3, #8
   1141c:	e7b1      	b.n	11382 <_strtol_l.isra.0+0x4a>
   1141e:	2c30      	cmp	r4, #48	; 0x30
   11420:	d0a4      	beq.n	1136c <_strtol_l.isra.0+0x34>
   11422:	230a      	movs	r3, #10
   11424:	e7ad      	b.n	11382 <_strtol_l.isra.0+0x4a>
   11426:	bf00      	nop
   11428:	0006bb01 	.word	0x0006bb01

0001142c <strtol>:
   1142c:	4613      	mov	r3, r2
   1142e:	460a      	mov	r2, r1
   11430:	4601      	mov	r1, r0
   11432:	4802      	ldr	r0, [pc, #8]	; (1143c <strtol+0x10>)
   11434:	6800      	ldr	r0, [r0, #0]
   11436:	f7ff bf7f 	b.w	11338 <_strtol_l.isra.0>
   1143a:	bf00      	nop
   1143c:	200000f8 	.word	0x200000f8

00011440 <viprintf>:
   11440:	4b09      	ldr	r3, [pc, #36]	; (11468 <viprintf+0x28>)
   11442:	b570      	push	{r4, r5, r6, lr}
   11444:	681c      	ldr	r4, [r3, #0]
   11446:	4605      	mov	r5, r0
   11448:	460e      	mov	r6, r1
   1144a:	b124      	cbz	r4, 11456 <viprintf+0x16>
   1144c:	69a3      	ldr	r3, [r4, #24]
   1144e:	b913      	cbnz	r3, 11456 <viprintf+0x16>
   11450:	4620      	mov	r0, r4
   11452:	f000 f9cf 	bl	117f4 <__sinit>
   11456:	68a1      	ldr	r1, [r4, #8]
   11458:	4633      	mov	r3, r6
   1145a:	462a      	mov	r2, r5
   1145c:	4620      	mov	r0, r4
   1145e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11462:	f7ff ba95 	b.w	10990 <_vfiprintf_r>
   11466:	bf00      	nop
   11468:	200000f8 	.word	0x200000f8

0001146c <__swbuf_r>:
   1146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1146e:	460e      	mov	r6, r1
   11470:	4614      	mov	r4, r2
   11472:	4605      	mov	r5, r0
   11474:	b118      	cbz	r0, 1147e <__swbuf_r+0x12>
   11476:	6983      	ldr	r3, [r0, #24]
   11478:	b90b      	cbnz	r3, 1147e <__swbuf_r+0x12>
   1147a:	f000 f9bb 	bl	117f4 <__sinit>
   1147e:	4b21      	ldr	r3, [pc, #132]	; (11504 <__swbuf_r+0x98>)
   11480:	429c      	cmp	r4, r3
   11482:	d12b      	bne.n	114dc <__swbuf_r+0x70>
   11484:	686c      	ldr	r4, [r5, #4]
   11486:	69a3      	ldr	r3, [r4, #24]
   11488:	60a3      	str	r3, [r4, #8]
   1148a:	89a3      	ldrh	r3, [r4, #12]
   1148c:	071a      	lsls	r2, r3, #28
   1148e:	d52f      	bpl.n	114f0 <__swbuf_r+0x84>
   11490:	6923      	ldr	r3, [r4, #16]
   11492:	b36b      	cbz	r3, 114f0 <__swbuf_r+0x84>
   11494:	6923      	ldr	r3, [r4, #16]
   11496:	6820      	ldr	r0, [r4, #0]
   11498:	1ac0      	subs	r0, r0, r3
   1149a:	6963      	ldr	r3, [r4, #20]
   1149c:	b2f6      	uxtb	r6, r6
   1149e:	4283      	cmp	r3, r0
   114a0:	4637      	mov	r7, r6
   114a2:	dc04      	bgt.n	114ae <__swbuf_r+0x42>
   114a4:	4621      	mov	r1, r4
   114a6:	4628      	mov	r0, r5
   114a8:	f000 f926 	bl	116f8 <_fflush_r>
   114ac:	bb30      	cbnz	r0, 114fc <__swbuf_r+0x90>
   114ae:	68a3      	ldr	r3, [r4, #8]
   114b0:	3b01      	subs	r3, #1
   114b2:	60a3      	str	r3, [r4, #8]
   114b4:	6823      	ldr	r3, [r4, #0]
   114b6:	1c5a      	adds	r2, r3, #1
   114b8:	6022      	str	r2, [r4, #0]
   114ba:	701e      	strb	r6, [r3, #0]
   114bc:	6963      	ldr	r3, [r4, #20]
   114be:	3001      	adds	r0, #1
   114c0:	4283      	cmp	r3, r0
   114c2:	d004      	beq.n	114ce <__swbuf_r+0x62>
   114c4:	89a3      	ldrh	r3, [r4, #12]
   114c6:	07db      	lsls	r3, r3, #31
   114c8:	d506      	bpl.n	114d8 <__swbuf_r+0x6c>
   114ca:	2e0a      	cmp	r6, #10
   114cc:	d104      	bne.n	114d8 <__swbuf_r+0x6c>
   114ce:	4621      	mov	r1, r4
   114d0:	4628      	mov	r0, r5
   114d2:	f000 f911 	bl	116f8 <_fflush_r>
   114d6:	b988      	cbnz	r0, 114fc <__swbuf_r+0x90>
   114d8:	4638      	mov	r0, r7
   114da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114dc:	4b0a      	ldr	r3, [pc, #40]	; (11508 <__swbuf_r+0x9c>)
   114de:	429c      	cmp	r4, r3
   114e0:	d101      	bne.n	114e6 <__swbuf_r+0x7a>
   114e2:	68ac      	ldr	r4, [r5, #8]
   114e4:	e7cf      	b.n	11486 <__swbuf_r+0x1a>
   114e6:	4b09      	ldr	r3, [pc, #36]	; (1150c <__swbuf_r+0xa0>)
   114e8:	429c      	cmp	r4, r3
   114ea:	bf08      	it	eq
   114ec:	68ec      	ldreq	r4, [r5, #12]
   114ee:	e7ca      	b.n	11486 <__swbuf_r+0x1a>
   114f0:	4621      	mov	r1, r4
   114f2:	4628      	mov	r0, r5
   114f4:	f000 f80c 	bl	11510 <__swsetup_r>
   114f8:	2800      	cmp	r0, #0
   114fa:	d0cb      	beq.n	11494 <__swbuf_r+0x28>
   114fc:	f04f 37ff 	mov.w	r7, #4294967295
   11500:	e7ea      	b.n	114d8 <__swbuf_r+0x6c>
   11502:	bf00      	nop
   11504:	0006ba78 	.word	0x0006ba78
   11508:	0006ba98 	.word	0x0006ba98
   1150c:	0006ba58 	.word	0x0006ba58

00011510 <__swsetup_r>:
   11510:	4b32      	ldr	r3, [pc, #200]	; (115dc <__swsetup_r+0xcc>)
   11512:	b570      	push	{r4, r5, r6, lr}
   11514:	681d      	ldr	r5, [r3, #0]
   11516:	4606      	mov	r6, r0
   11518:	460c      	mov	r4, r1
   1151a:	b125      	cbz	r5, 11526 <__swsetup_r+0x16>
   1151c:	69ab      	ldr	r3, [r5, #24]
   1151e:	b913      	cbnz	r3, 11526 <__swsetup_r+0x16>
   11520:	4628      	mov	r0, r5
   11522:	f000 f967 	bl	117f4 <__sinit>
   11526:	4b2e      	ldr	r3, [pc, #184]	; (115e0 <__swsetup_r+0xd0>)
   11528:	429c      	cmp	r4, r3
   1152a:	d10f      	bne.n	1154c <__swsetup_r+0x3c>
   1152c:	686c      	ldr	r4, [r5, #4]
   1152e:	89a3      	ldrh	r3, [r4, #12]
   11530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11534:	0719      	lsls	r1, r3, #28
   11536:	d42c      	bmi.n	11592 <__swsetup_r+0x82>
   11538:	06dd      	lsls	r5, r3, #27
   1153a:	d411      	bmi.n	11560 <__swsetup_r+0x50>
   1153c:	2309      	movs	r3, #9
   1153e:	6033      	str	r3, [r6, #0]
   11540:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   11544:	81a3      	strh	r3, [r4, #12]
   11546:	f04f 30ff 	mov.w	r0, #4294967295
   1154a:	e03e      	b.n	115ca <__swsetup_r+0xba>
   1154c:	4b25      	ldr	r3, [pc, #148]	; (115e4 <__swsetup_r+0xd4>)
   1154e:	429c      	cmp	r4, r3
   11550:	d101      	bne.n	11556 <__swsetup_r+0x46>
   11552:	68ac      	ldr	r4, [r5, #8]
   11554:	e7eb      	b.n	1152e <__swsetup_r+0x1e>
   11556:	4b24      	ldr	r3, [pc, #144]	; (115e8 <__swsetup_r+0xd8>)
   11558:	429c      	cmp	r4, r3
   1155a:	bf08      	it	eq
   1155c:	68ec      	ldreq	r4, [r5, #12]
   1155e:	e7e6      	b.n	1152e <__swsetup_r+0x1e>
   11560:	0758      	lsls	r0, r3, #29
   11562:	d512      	bpl.n	1158a <__swsetup_r+0x7a>
   11564:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11566:	b141      	cbz	r1, 1157a <__swsetup_r+0x6a>
   11568:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1156c:	4299      	cmp	r1, r3
   1156e:	d002      	beq.n	11576 <__swsetup_r+0x66>
   11570:	4630      	mov	r0, r6
   11572:	f7ff f965 	bl	10840 <_free_r>
   11576:	2300      	movs	r3, #0
   11578:	6363      	str	r3, [r4, #52]	; 0x34
   1157a:	89a3      	ldrh	r3, [r4, #12]
   1157c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   11580:	81a3      	strh	r3, [r4, #12]
   11582:	2300      	movs	r3, #0
   11584:	6063      	str	r3, [r4, #4]
   11586:	6923      	ldr	r3, [r4, #16]
   11588:	6023      	str	r3, [r4, #0]
   1158a:	89a3      	ldrh	r3, [r4, #12]
   1158c:	f043 0308 	orr.w	r3, r3, #8
   11590:	81a3      	strh	r3, [r4, #12]
   11592:	6923      	ldr	r3, [r4, #16]
   11594:	b94b      	cbnz	r3, 115aa <__swsetup_r+0x9a>
   11596:	89a3      	ldrh	r3, [r4, #12]
   11598:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1159c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   115a0:	d003      	beq.n	115aa <__swsetup_r+0x9a>
   115a2:	4621      	mov	r1, r4
   115a4:	4630      	mov	r0, r6
   115a6:	f000 f9a7 	bl	118f8 <__smakebuf_r>
   115aa:	89a0      	ldrh	r0, [r4, #12]
   115ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   115b0:	f010 0301 	ands.w	r3, r0, #1
   115b4:	d00a      	beq.n	115cc <__swsetup_r+0xbc>
   115b6:	2300      	movs	r3, #0
   115b8:	60a3      	str	r3, [r4, #8]
   115ba:	6963      	ldr	r3, [r4, #20]
   115bc:	425b      	negs	r3, r3
   115be:	61a3      	str	r3, [r4, #24]
   115c0:	6923      	ldr	r3, [r4, #16]
   115c2:	b943      	cbnz	r3, 115d6 <__swsetup_r+0xc6>
   115c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   115c8:	d1ba      	bne.n	11540 <__swsetup_r+0x30>
   115ca:	bd70      	pop	{r4, r5, r6, pc}
   115cc:	0781      	lsls	r1, r0, #30
   115ce:	bf58      	it	pl
   115d0:	6963      	ldrpl	r3, [r4, #20]
   115d2:	60a3      	str	r3, [r4, #8]
   115d4:	e7f4      	b.n	115c0 <__swsetup_r+0xb0>
   115d6:	2000      	movs	r0, #0
   115d8:	e7f7      	b.n	115ca <__swsetup_r+0xba>
   115da:	bf00      	nop
   115dc:	200000f8 	.word	0x200000f8
   115e0:	0006ba78 	.word	0x0006ba78
   115e4:	0006ba98 	.word	0x0006ba98
   115e8:	0006ba58 	.word	0x0006ba58

000115ec <__sflush_r>:
   115ec:	898a      	ldrh	r2, [r1, #12]
   115ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115f2:	4605      	mov	r5, r0
   115f4:	0710      	lsls	r0, r2, #28
   115f6:	460c      	mov	r4, r1
   115f8:	d458      	bmi.n	116ac <__sflush_r+0xc0>
   115fa:	684b      	ldr	r3, [r1, #4]
   115fc:	2b00      	cmp	r3, #0
   115fe:	dc05      	bgt.n	1160c <__sflush_r+0x20>
   11600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11602:	2b00      	cmp	r3, #0
   11604:	dc02      	bgt.n	1160c <__sflush_r+0x20>
   11606:	2000      	movs	r0, #0
   11608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1160c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1160e:	2e00      	cmp	r6, #0
   11610:	d0f9      	beq.n	11606 <__sflush_r+0x1a>
   11612:	2300      	movs	r3, #0
   11614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   11618:	682f      	ldr	r7, [r5, #0]
   1161a:	602b      	str	r3, [r5, #0]
   1161c:	d032      	beq.n	11684 <__sflush_r+0x98>
   1161e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   11620:	89a3      	ldrh	r3, [r4, #12]
   11622:	075a      	lsls	r2, r3, #29
   11624:	d505      	bpl.n	11632 <__sflush_r+0x46>
   11626:	6863      	ldr	r3, [r4, #4]
   11628:	1ac0      	subs	r0, r0, r3
   1162a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1162c:	b10b      	cbz	r3, 11632 <__sflush_r+0x46>
   1162e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11630:	1ac0      	subs	r0, r0, r3
   11632:	2300      	movs	r3, #0
   11634:	4602      	mov	r2, r0
   11636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   11638:	6a21      	ldr	r1, [r4, #32]
   1163a:	4628      	mov	r0, r5
   1163c:	47b0      	blx	r6
   1163e:	1c43      	adds	r3, r0, #1
   11640:	89a3      	ldrh	r3, [r4, #12]
   11642:	d106      	bne.n	11652 <__sflush_r+0x66>
   11644:	6829      	ldr	r1, [r5, #0]
   11646:	291d      	cmp	r1, #29
   11648:	d82c      	bhi.n	116a4 <__sflush_r+0xb8>
   1164a:	4a2a      	ldr	r2, [pc, #168]	; (116f4 <__sflush_r+0x108>)
   1164c:	40ca      	lsrs	r2, r1
   1164e:	07d6      	lsls	r6, r2, #31
   11650:	d528      	bpl.n	116a4 <__sflush_r+0xb8>
   11652:	2200      	movs	r2, #0
   11654:	6062      	str	r2, [r4, #4]
   11656:	04d9      	lsls	r1, r3, #19
   11658:	6922      	ldr	r2, [r4, #16]
   1165a:	6022      	str	r2, [r4, #0]
   1165c:	d504      	bpl.n	11668 <__sflush_r+0x7c>
   1165e:	1c42      	adds	r2, r0, #1
   11660:	d101      	bne.n	11666 <__sflush_r+0x7a>
   11662:	682b      	ldr	r3, [r5, #0]
   11664:	b903      	cbnz	r3, 11668 <__sflush_r+0x7c>
   11666:	6560      	str	r0, [r4, #84]	; 0x54
   11668:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1166a:	602f      	str	r7, [r5, #0]
   1166c:	2900      	cmp	r1, #0
   1166e:	d0ca      	beq.n	11606 <__sflush_r+0x1a>
   11670:	f104 0344 	add.w	r3, r4, #68	; 0x44
   11674:	4299      	cmp	r1, r3
   11676:	d002      	beq.n	1167e <__sflush_r+0x92>
   11678:	4628      	mov	r0, r5
   1167a:	f7ff f8e1 	bl	10840 <_free_r>
   1167e:	2000      	movs	r0, #0
   11680:	6360      	str	r0, [r4, #52]	; 0x34
   11682:	e7c1      	b.n	11608 <__sflush_r+0x1c>
   11684:	6a21      	ldr	r1, [r4, #32]
   11686:	2301      	movs	r3, #1
   11688:	4628      	mov	r0, r5
   1168a:	47b0      	blx	r6
   1168c:	1c41      	adds	r1, r0, #1
   1168e:	d1c7      	bne.n	11620 <__sflush_r+0x34>
   11690:	682b      	ldr	r3, [r5, #0]
   11692:	2b00      	cmp	r3, #0
   11694:	d0c4      	beq.n	11620 <__sflush_r+0x34>
   11696:	2b1d      	cmp	r3, #29
   11698:	d001      	beq.n	1169e <__sflush_r+0xb2>
   1169a:	2b16      	cmp	r3, #22
   1169c:	d101      	bne.n	116a2 <__sflush_r+0xb6>
   1169e:	602f      	str	r7, [r5, #0]
   116a0:	e7b1      	b.n	11606 <__sflush_r+0x1a>
   116a2:	89a3      	ldrh	r3, [r4, #12]
   116a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   116a8:	81a3      	strh	r3, [r4, #12]
   116aa:	e7ad      	b.n	11608 <__sflush_r+0x1c>
   116ac:	690f      	ldr	r7, [r1, #16]
   116ae:	2f00      	cmp	r7, #0
   116b0:	d0a9      	beq.n	11606 <__sflush_r+0x1a>
   116b2:	0793      	lsls	r3, r2, #30
   116b4:	680e      	ldr	r6, [r1, #0]
   116b6:	bf08      	it	eq
   116b8:	694b      	ldreq	r3, [r1, #20]
   116ba:	600f      	str	r7, [r1, #0]
   116bc:	bf18      	it	ne
   116be:	2300      	movne	r3, #0
   116c0:	eba6 0807 	sub.w	r8, r6, r7
   116c4:	608b      	str	r3, [r1, #8]
   116c6:	f1b8 0f00 	cmp.w	r8, #0
   116ca:	dd9c      	ble.n	11606 <__sflush_r+0x1a>
   116cc:	6a21      	ldr	r1, [r4, #32]
   116ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   116d0:	4643      	mov	r3, r8
   116d2:	463a      	mov	r2, r7
   116d4:	4628      	mov	r0, r5
   116d6:	47b0      	blx	r6
   116d8:	2800      	cmp	r0, #0
   116da:	dc06      	bgt.n	116ea <__sflush_r+0xfe>
   116dc:	89a3      	ldrh	r3, [r4, #12]
   116de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   116e2:	81a3      	strh	r3, [r4, #12]
   116e4:	f04f 30ff 	mov.w	r0, #4294967295
   116e8:	e78e      	b.n	11608 <__sflush_r+0x1c>
   116ea:	4407      	add	r7, r0
   116ec:	eba8 0800 	sub.w	r8, r8, r0
   116f0:	e7e9      	b.n	116c6 <__sflush_r+0xda>
   116f2:	bf00      	nop
   116f4:	20400001 	.word	0x20400001

000116f8 <_fflush_r>:
   116f8:	b538      	push	{r3, r4, r5, lr}
   116fa:	690b      	ldr	r3, [r1, #16]
   116fc:	4605      	mov	r5, r0
   116fe:	460c      	mov	r4, r1
   11700:	b913      	cbnz	r3, 11708 <_fflush_r+0x10>
   11702:	2500      	movs	r5, #0
   11704:	4628      	mov	r0, r5
   11706:	bd38      	pop	{r3, r4, r5, pc}
   11708:	b118      	cbz	r0, 11712 <_fflush_r+0x1a>
   1170a:	6983      	ldr	r3, [r0, #24]
   1170c:	b90b      	cbnz	r3, 11712 <_fflush_r+0x1a>
   1170e:	f000 f871 	bl	117f4 <__sinit>
   11712:	4b14      	ldr	r3, [pc, #80]	; (11764 <_fflush_r+0x6c>)
   11714:	429c      	cmp	r4, r3
   11716:	d11b      	bne.n	11750 <_fflush_r+0x58>
   11718:	686c      	ldr	r4, [r5, #4]
   1171a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1171e:	2b00      	cmp	r3, #0
   11720:	d0ef      	beq.n	11702 <_fflush_r+0xa>
   11722:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11724:	07d0      	lsls	r0, r2, #31
   11726:	d404      	bmi.n	11732 <_fflush_r+0x3a>
   11728:	0599      	lsls	r1, r3, #22
   1172a:	d402      	bmi.n	11732 <_fflush_r+0x3a>
   1172c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1172e:	f000 ffe8 	bl	12702 <__retarget_lock_acquire_recursive>
   11732:	4628      	mov	r0, r5
   11734:	4621      	mov	r1, r4
   11736:	f7ff ff59 	bl	115ec <__sflush_r>
   1173a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1173c:	07da      	lsls	r2, r3, #31
   1173e:	4605      	mov	r5, r0
   11740:	d4e0      	bmi.n	11704 <_fflush_r+0xc>
   11742:	89a3      	ldrh	r3, [r4, #12]
   11744:	059b      	lsls	r3, r3, #22
   11746:	d4dd      	bmi.n	11704 <_fflush_r+0xc>
   11748:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1174a:	f000 ffe2 	bl	12712 <__retarget_lock_release_recursive>
   1174e:	e7d9      	b.n	11704 <_fflush_r+0xc>
   11750:	4b05      	ldr	r3, [pc, #20]	; (11768 <_fflush_r+0x70>)
   11752:	429c      	cmp	r4, r3
   11754:	d101      	bne.n	1175a <_fflush_r+0x62>
   11756:	68ac      	ldr	r4, [r5, #8]
   11758:	e7df      	b.n	1171a <_fflush_r+0x22>
   1175a:	4b04      	ldr	r3, [pc, #16]	; (1176c <_fflush_r+0x74>)
   1175c:	429c      	cmp	r4, r3
   1175e:	bf08      	it	eq
   11760:	68ec      	ldreq	r4, [r5, #12]
   11762:	e7da      	b.n	1171a <_fflush_r+0x22>
   11764:	0006ba78 	.word	0x0006ba78
   11768:	0006ba98 	.word	0x0006ba98
   1176c:	0006ba58 	.word	0x0006ba58

00011770 <std>:
   11770:	2300      	movs	r3, #0
   11772:	b510      	push	{r4, lr}
   11774:	4604      	mov	r4, r0
   11776:	e9c0 3300 	strd	r3, r3, [r0]
   1177a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1177e:	6083      	str	r3, [r0, #8]
   11780:	8181      	strh	r1, [r0, #12]
   11782:	6643      	str	r3, [r0, #100]	; 0x64
   11784:	81c2      	strh	r2, [r0, #14]
   11786:	6183      	str	r3, [r0, #24]
   11788:	4619      	mov	r1, r3
   1178a:	2208      	movs	r2, #8
   1178c:	305c      	adds	r0, #92	; 0x5c
   1178e:	f004 fc32 	bl	15ff6 <memset>
   11792:	4b05      	ldr	r3, [pc, #20]	; (117a8 <std+0x38>)
   11794:	6263      	str	r3, [r4, #36]	; 0x24
   11796:	4b05      	ldr	r3, [pc, #20]	; (117ac <std+0x3c>)
   11798:	62a3      	str	r3, [r4, #40]	; 0x28
   1179a:	4b05      	ldr	r3, [pc, #20]	; (117b0 <std+0x40>)
   1179c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1179e:	4b05      	ldr	r3, [pc, #20]	; (117b4 <std+0x44>)
   117a0:	6224      	str	r4, [r4, #32]
   117a2:	6323      	str	r3, [r4, #48]	; 0x30
   117a4:	bd10      	pop	{r4, pc}
   117a6:	bf00      	nop
   117a8:	00016acd 	.word	0x00016acd
   117ac:	00016aef 	.word	0x00016aef
   117b0:	00016b27 	.word	0x00016b27
   117b4:	00016b4b 	.word	0x00016b4b

000117b8 <_cleanup_r>:
   117b8:	4901      	ldr	r1, [pc, #4]	; (117c0 <_cleanup_r+0x8>)
   117ba:	f004 be7b 	b.w	164b4 <_fwalk_reent>
   117be:	bf00      	nop
   117c0:	000116f9 	.word	0x000116f9

000117c4 <__sfp_lock_acquire>:
   117c4:	4801      	ldr	r0, [pc, #4]	; (117cc <__sfp_lock_acquire+0x8>)
   117c6:	f000 bf9c 	b.w	12702 <__retarget_lock_acquire_recursive>
   117ca:	bf00      	nop
   117cc:	200002f8 	.word	0x200002f8

000117d0 <__sfp_lock_release>:
   117d0:	4801      	ldr	r0, [pc, #4]	; (117d8 <__sfp_lock_release+0x8>)
   117d2:	f000 bf9e 	b.w	12712 <__retarget_lock_release_recursive>
   117d6:	bf00      	nop
   117d8:	200002f8 	.word	0x200002f8

000117dc <__sinit_lock_acquire>:
   117dc:	4801      	ldr	r0, [pc, #4]	; (117e4 <__sinit_lock_acquire+0x8>)
   117de:	f000 bf90 	b.w	12702 <__retarget_lock_acquire_recursive>
   117e2:	bf00      	nop
   117e4:	2000030c 	.word	0x2000030c

000117e8 <__sinit_lock_release>:
   117e8:	4801      	ldr	r0, [pc, #4]	; (117f0 <__sinit_lock_release+0x8>)
   117ea:	f000 bf92 	b.w	12712 <__retarget_lock_release_recursive>
   117ee:	bf00      	nop
   117f0:	2000030c 	.word	0x2000030c

000117f4 <__sinit>:
   117f4:	b510      	push	{r4, lr}
   117f6:	4604      	mov	r4, r0
   117f8:	f7ff fff0 	bl	117dc <__sinit_lock_acquire>
   117fc:	69a3      	ldr	r3, [r4, #24]
   117fe:	b11b      	cbz	r3, 11808 <__sinit+0x14>
   11800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11804:	f7ff bff0 	b.w	117e8 <__sinit_lock_release>
   11808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   1180c:	6523      	str	r3, [r4, #80]	; 0x50
   1180e:	4b13      	ldr	r3, [pc, #76]	; (1185c <__sinit+0x68>)
   11810:	4a13      	ldr	r2, [pc, #76]	; (11860 <__sinit+0x6c>)
   11812:	681b      	ldr	r3, [r3, #0]
   11814:	62a2      	str	r2, [r4, #40]	; 0x28
   11816:	42a3      	cmp	r3, r4
   11818:	bf04      	itt	eq
   1181a:	2301      	moveq	r3, #1
   1181c:	61a3      	streq	r3, [r4, #24]
   1181e:	4620      	mov	r0, r4
   11820:	f000 f820 	bl	11864 <__sfp>
   11824:	6060      	str	r0, [r4, #4]
   11826:	4620      	mov	r0, r4
   11828:	f000 f81c 	bl	11864 <__sfp>
   1182c:	60a0      	str	r0, [r4, #8]
   1182e:	4620      	mov	r0, r4
   11830:	f000 f818 	bl	11864 <__sfp>
   11834:	2200      	movs	r2, #0
   11836:	60e0      	str	r0, [r4, #12]
   11838:	2104      	movs	r1, #4
   1183a:	6860      	ldr	r0, [r4, #4]
   1183c:	f7ff ff98 	bl	11770 <std>
   11840:	68a0      	ldr	r0, [r4, #8]
   11842:	2201      	movs	r2, #1
   11844:	2109      	movs	r1, #9
   11846:	f7ff ff93 	bl	11770 <std>
   1184a:	68e0      	ldr	r0, [r4, #12]
   1184c:	2202      	movs	r2, #2
   1184e:	2112      	movs	r1, #18
   11850:	f7ff ff8e 	bl	11770 <std>
   11854:	2301      	movs	r3, #1
   11856:	61a3      	str	r3, [r4, #24]
   11858:	e7d2      	b.n	11800 <__sinit+0xc>
   1185a:	bf00      	nop
   1185c:	0006ba54 	.word	0x0006ba54
   11860:	000117b9 	.word	0x000117b9

00011864 <__sfp>:
   11864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11866:	4607      	mov	r7, r0
   11868:	f7ff ffac 	bl	117c4 <__sfp_lock_acquire>
   1186c:	4b1e      	ldr	r3, [pc, #120]	; (118e8 <__sfp+0x84>)
   1186e:	681e      	ldr	r6, [r3, #0]
   11870:	69b3      	ldr	r3, [r6, #24]
   11872:	b913      	cbnz	r3, 1187a <__sfp+0x16>
   11874:	4630      	mov	r0, r6
   11876:	f7ff ffbd 	bl	117f4 <__sinit>
   1187a:	3648      	adds	r6, #72	; 0x48
   1187c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   11880:	3b01      	subs	r3, #1
   11882:	d503      	bpl.n	1188c <__sfp+0x28>
   11884:	6833      	ldr	r3, [r6, #0]
   11886:	b30b      	cbz	r3, 118cc <__sfp+0x68>
   11888:	6836      	ldr	r6, [r6, #0]
   1188a:	e7f7      	b.n	1187c <__sfp+0x18>
   1188c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   11890:	b9d5      	cbnz	r5, 118c8 <__sfp+0x64>
   11892:	4b16      	ldr	r3, [pc, #88]	; (118ec <__sfp+0x88>)
   11894:	60e3      	str	r3, [r4, #12]
   11896:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1189a:	6665      	str	r5, [r4, #100]	; 0x64
   1189c:	f000 ff28 	bl	126f0 <__retarget_lock_init_recursive>
   118a0:	f7ff ff96 	bl	117d0 <__sfp_lock_release>
   118a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   118a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
   118ac:	6025      	str	r5, [r4, #0]
   118ae:	61a5      	str	r5, [r4, #24]
   118b0:	2208      	movs	r2, #8
   118b2:	4629      	mov	r1, r5
   118b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   118b8:	f004 fb9d 	bl	15ff6 <memset>
   118bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   118c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   118c4:	4620      	mov	r0, r4
   118c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118c8:	3468      	adds	r4, #104	; 0x68
   118ca:	e7d9      	b.n	11880 <__sfp+0x1c>
   118cc:	2104      	movs	r1, #4
   118ce:	4638      	mov	r0, r7
   118d0:	f004 fdda 	bl	16488 <__sfmoreglue>
   118d4:	4604      	mov	r4, r0
   118d6:	6030      	str	r0, [r6, #0]
   118d8:	2800      	cmp	r0, #0
   118da:	d1d5      	bne.n	11888 <__sfp+0x24>
   118dc:	f7ff ff78 	bl	117d0 <__sfp_lock_release>
   118e0:	230c      	movs	r3, #12
   118e2:	603b      	str	r3, [r7, #0]
   118e4:	e7ee      	b.n	118c4 <__sfp+0x60>
   118e6:	bf00      	nop
   118e8:	0006ba54 	.word	0x0006ba54
   118ec:	ffff0001 	.word	0xffff0001

000118f0 <_localeconv_r>:
   118f0:	4800      	ldr	r0, [pc, #0]	; (118f4 <_localeconv_r+0x4>)
   118f2:	4770      	bx	lr
   118f4:	2000024c 	.word	0x2000024c

000118f8 <__smakebuf_r>:
   118f8:	898b      	ldrh	r3, [r1, #12]
   118fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   118fc:	079d      	lsls	r5, r3, #30
   118fe:	4606      	mov	r6, r0
   11900:	460c      	mov	r4, r1
   11902:	d507      	bpl.n	11914 <__smakebuf_r+0x1c>
   11904:	f104 0347 	add.w	r3, r4, #71	; 0x47
   11908:	6023      	str	r3, [r4, #0]
   1190a:	6123      	str	r3, [r4, #16]
   1190c:	2301      	movs	r3, #1
   1190e:	6163      	str	r3, [r4, #20]
   11910:	b002      	add	sp, #8
   11912:	bd70      	pop	{r4, r5, r6, pc}
   11914:	ab01      	add	r3, sp, #4
   11916:	466a      	mov	r2, sp
   11918:	f004 fdeb 	bl	164f2 <__swhatbuf_r>
   1191c:	9900      	ldr	r1, [sp, #0]
   1191e:	4605      	mov	r5, r0
   11920:	4630      	mov	r0, r6
   11922:	f7fe ffdb 	bl	108dc <_malloc_r>
   11926:	b948      	cbnz	r0, 1193c <__smakebuf_r+0x44>
   11928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1192c:	059a      	lsls	r2, r3, #22
   1192e:	d4ef      	bmi.n	11910 <__smakebuf_r+0x18>
   11930:	f023 0303 	bic.w	r3, r3, #3
   11934:	f043 0302 	orr.w	r3, r3, #2
   11938:	81a3      	strh	r3, [r4, #12]
   1193a:	e7e3      	b.n	11904 <__smakebuf_r+0xc>
   1193c:	4b0d      	ldr	r3, [pc, #52]	; (11974 <__smakebuf_r+0x7c>)
   1193e:	62b3      	str	r3, [r6, #40]	; 0x28
   11940:	89a3      	ldrh	r3, [r4, #12]
   11942:	6020      	str	r0, [r4, #0]
   11944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11948:	81a3      	strh	r3, [r4, #12]
   1194a:	9b00      	ldr	r3, [sp, #0]
   1194c:	6163      	str	r3, [r4, #20]
   1194e:	9b01      	ldr	r3, [sp, #4]
   11950:	6120      	str	r0, [r4, #16]
   11952:	b15b      	cbz	r3, 1196c <__smakebuf_r+0x74>
   11954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11958:	4630      	mov	r0, r6
   1195a:	f000 f89b 	bl	11a94 <_isatty_r>
   1195e:	b128      	cbz	r0, 1196c <__smakebuf_r+0x74>
   11960:	89a3      	ldrh	r3, [r4, #12]
   11962:	f023 0303 	bic.w	r3, r3, #3
   11966:	f043 0301 	orr.w	r3, r3, #1
   1196a:	81a3      	strh	r3, [r4, #12]
   1196c:	89a0      	ldrh	r0, [r4, #12]
   1196e:	4305      	orrs	r5, r0
   11970:	81a5      	strh	r5, [r4, #12]
   11972:	e7cd      	b.n	11910 <__smakebuf_r+0x18>
   11974:	000117b9 	.word	0x000117b9

00011978 <__malloc_lock>:
   11978:	4801      	ldr	r0, [pc, #4]	; (11980 <__malloc_lock+0x8>)
   1197a:	f000 bec2 	b.w	12702 <__retarget_lock_acquire_recursive>
   1197e:	bf00      	nop
   11980:	200002e4 	.word	0x200002e4

00011984 <__malloc_unlock>:
   11984:	4801      	ldr	r0, [pc, #4]	; (1198c <__malloc_unlock+0x8>)
   11986:	f000 bec4 	b.w	12712 <__retarget_lock_release_recursive>
   1198a:	bf00      	nop
   1198c:	200002e4 	.word	0x200002e4

00011990 <__pow5mult>:
   11990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11994:	4615      	mov	r5, r2
   11996:	f012 0203 	ands.w	r2, r2, #3
   1199a:	4606      	mov	r6, r0
   1199c:	460f      	mov	r7, r1
   1199e:	d007      	beq.n	119b0 <__pow5mult+0x20>
   119a0:	4c21      	ldr	r4, [pc, #132]	; (11a28 <__pow5mult+0x98>)
   119a2:	3a01      	subs	r2, #1
   119a4:	2300      	movs	r3, #0
   119a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   119aa:	f004 fe11 	bl	165d0 <__multadd>
   119ae:	4607      	mov	r7, r0
   119b0:	10ad      	asrs	r5, r5, #2
   119b2:	d035      	beq.n	11a20 <__pow5mult+0x90>
   119b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   119b6:	b93c      	cbnz	r4, 119c8 <__pow5mult+0x38>
   119b8:	2010      	movs	r0, #16
   119ba:	f7fe ff31 	bl	10820 <malloc>
   119be:	e9c0 4401 	strd	r4, r4, [r0, #4]
   119c2:	6270      	str	r0, [r6, #36]	; 0x24
   119c4:	6004      	str	r4, [r0, #0]
   119c6:	60c4      	str	r4, [r0, #12]
   119c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   119cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   119d0:	b94c      	cbnz	r4, 119e6 <__pow5mult+0x56>
   119d2:	f240 2171 	movw	r1, #625	; 0x271
   119d6:	4630      	mov	r0, r6
   119d8:	f004 fe86 	bl	166e8 <__i2b>
   119dc:	2300      	movs	r3, #0
   119de:	f8c8 0008 	str.w	r0, [r8, #8]
   119e2:	4604      	mov	r4, r0
   119e4:	6003      	str	r3, [r0, #0]
   119e6:	f04f 0900 	mov.w	r9, #0
   119ea:	07eb      	lsls	r3, r5, #31
   119ec:	d50a      	bpl.n	11a04 <__pow5mult+0x74>
   119ee:	4639      	mov	r1, r7
   119f0:	4622      	mov	r2, r4
   119f2:	4630      	mov	r0, r6
   119f4:	f004 fe81 	bl	166fa <__multiply>
   119f8:	4639      	mov	r1, r7
   119fa:	4680      	mov	r8, r0
   119fc:	4630      	mov	r0, r6
   119fe:	f004 fdd0 	bl	165a2 <_Bfree>
   11a02:	4647      	mov	r7, r8
   11a04:	106d      	asrs	r5, r5, #1
   11a06:	d00b      	beq.n	11a20 <__pow5mult+0x90>
   11a08:	6820      	ldr	r0, [r4, #0]
   11a0a:	b938      	cbnz	r0, 11a1c <__pow5mult+0x8c>
   11a0c:	4622      	mov	r2, r4
   11a0e:	4621      	mov	r1, r4
   11a10:	4630      	mov	r0, r6
   11a12:	f004 fe72 	bl	166fa <__multiply>
   11a16:	6020      	str	r0, [r4, #0]
   11a18:	f8c0 9000 	str.w	r9, [r0]
   11a1c:	4604      	mov	r4, r0
   11a1e:	e7e4      	b.n	119ea <__pow5mult+0x5a>
   11a20:	4638      	mov	r0, r7
   11a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11a26:	bf00      	nop
   11a28:	0006bab8 	.word	0x0006bab8

00011a2c <_write_r>:
   11a2c:	b538      	push	{r3, r4, r5, lr}
   11a2e:	4d07      	ldr	r5, [pc, #28]	; (11a4c <_write_r+0x20>)
   11a30:	4604      	mov	r4, r0
   11a32:	4608      	mov	r0, r1
   11a34:	4611      	mov	r1, r2
   11a36:	2200      	movs	r2, #0
   11a38:	602a      	str	r2, [r5, #0]
   11a3a:	461a      	mov	r2, r3
   11a3c:	f000 fe3f 	bl	126be <_write>
   11a40:	1c43      	adds	r3, r0, #1
   11a42:	d102      	bne.n	11a4a <_write_r+0x1e>
   11a44:	682b      	ldr	r3, [r5, #0]
   11a46:	b103      	cbz	r3, 11a4a <_write_r+0x1e>
   11a48:	6023      	str	r3, [r4, #0]
   11a4a:	bd38      	pop	{r3, r4, r5, pc}
   11a4c:	200210ec 	.word	0x200210ec

00011a50 <_close_r>:
   11a50:	b538      	push	{r3, r4, r5, lr}
   11a52:	4d06      	ldr	r5, [pc, #24]	; (11a6c <_close_r+0x1c>)
   11a54:	2300      	movs	r3, #0
   11a56:	4604      	mov	r4, r0
   11a58:	4608      	mov	r0, r1
   11a5a:	602b      	str	r3, [r5, #0]
   11a5c:	f000 fe35 	bl	126ca <_close>
   11a60:	1c43      	adds	r3, r0, #1
   11a62:	d102      	bne.n	11a6a <_close_r+0x1a>
   11a64:	682b      	ldr	r3, [r5, #0]
   11a66:	b103      	cbz	r3, 11a6a <_close_r+0x1a>
   11a68:	6023      	str	r3, [r4, #0]
   11a6a:	bd38      	pop	{r3, r4, r5, pc}
   11a6c:	200210ec 	.word	0x200210ec

00011a70 <_fstat_r>:
   11a70:	b538      	push	{r3, r4, r5, lr}
   11a72:	4d07      	ldr	r5, [pc, #28]	; (11a90 <_fstat_r+0x20>)
   11a74:	2300      	movs	r3, #0
   11a76:	4604      	mov	r4, r0
   11a78:	4608      	mov	r0, r1
   11a7a:	4611      	mov	r1, r2
   11a7c:	602b      	str	r3, [r5, #0]
   11a7e:	f000 fe32 	bl	126e6 <_fstat>
   11a82:	1c43      	adds	r3, r0, #1
   11a84:	d102      	bne.n	11a8c <_fstat_r+0x1c>
   11a86:	682b      	ldr	r3, [r5, #0]
   11a88:	b103      	cbz	r3, 11a8c <_fstat_r+0x1c>
   11a8a:	6023      	str	r3, [r4, #0]
   11a8c:	bd38      	pop	{r3, r4, r5, pc}
   11a8e:	bf00      	nop
   11a90:	200210ec 	.word	0x200210ec

00011a94 <_isatty_r>:
   11a94:	b538      	push	{r3, r4, r5, lr}
   11a96:	4d06      	ldr	r5, [pc, #24]	; (11ab0 <_isatty_r+0x1c>)
   11a98:	2300      	movs	r3, #0
   11a9a:	4604      	mov	r4, r0
   11a9c:	4608      	mov	r0, r1
   11a9e:	602b      	str	r3, [r5, #0]
   11aa0:	f000 fe18 	bl	126d4 <_isatty>
   11aa4:	1c43      	adds	r3, r0, #1
   11aa6:	d102      	bne.n	11aae <_isatty_r+0x1a>
   11aa8:	682b      	ldr	r3, [r5, #0]
   11aaa:	b103      	cbz	r3, 11aae <_isatty_r+0x1a>
   11aac:	6023      	str	r3, [r4, #0]
   11aae:	bd38      	pop	{r3, r4, r5, pc}
   11ab0:	200210ec 	.word	0x200210ec

00011ab4 <_lseek_r>:
   11ab4:	b538      	push	{r3, r4, r5, lr}
   11ab6:	4d07      	ldr	r5, [pc, #28]	; (11ad4 <_lseek_r+0x20>)
   11ab8:	4604      	mov	r4, r0
   11aba:	4608      	mov	r0, r1
   11abc:	4611      	mov	r1, r2
   11abe:	2200      	movs	r2, #0
   11ac0:	602a      	str	r2, [r5, #0]
   11ac2:	461a      	mov	r2, r3
   11ac4:	f000 fe04 	bl	126d0 <_lseek>
   11ac8:	1c43      	adds	r3, r0, #1
   11aca:	d102      	bne.n	11ad2 <_lseek_r+0x1e>
   11acc:	682b      	ldr	r3, [r5, #0]
   11ace:	b103      	cbz	r3, 11ad2 <_lseek_r+0x1e>
   11ad0:	6023      	str	r3, [r4, #0]
   11ad2:	bd38      	pop	{r3, r4, r5, pc}
   11ad4:	200210ec 	.word	0x200210ec

00011ad8 <_read_r>:
   11ad8:	b538      	push	{r3, r4, r5, lr}
   11ada:	4d07      	ldr	r5, [pc, #28]	; (11af8 <_read_r+0x20>)
   11adc:	4604      	mov	r4, r0
   11ade:	4608      	mov	r0, r1
   11ae0:	4611      	mov	r1, r2
   11ae2:	2200      	movs	r2, #0
   11ae4:	602a      	str	r2, [r5, #0]
   11ae6:	461a      	mov	r2, r3
   11ae8:	f000 fde3 	bl	126b2 <_read>
   11aec:	1c43      	adds	r3, r0, #1
   11aee:	d102      	bne.n	11af6 <_read_r+0x1e>
   11af0:	682b      	ldr	r3, [r5, #0]
   11af2:	b103      	cbz	r3, 11af6 <_read_r+0x1e>
   11af4:	6023      	str	r3, [r4, #0]
   11af6:	bd38      	pop	{r3, r4, r5, pc}
   11af8:	200210ec 	.word	0x200210ec

00011afc <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
   11afc:	4601      	mov	r1, r0
  long ret = 0;
   11afe:	2000      	movs	r0, #0
   11b00:	e007      	b.n	11b12 <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
   11b02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   11b06:	b2d2      	uxtb	r2, r2
   11b08:	2a05      	cmp	r2, #5
   11b0a:	d80e      	bhi.n	11b2a <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
   11b0c:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
   11b0e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
   11b12:	780b      	ldrb	r3, [r1, #0]
   11b14:	b193      	cbz	r3, 11b3c <_Z9ee_hexdecPc+0x40>
   11b16:	2800      	cmp	r0, #0
   11b18:	db10      	blt.n	11b3c <_Z9ee_hexdecPc+0x40>
    c = *hex++;
   11b1a:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
   11b1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   11b20:	b2d2      	uxtb	r2, r2
   11b22:	2a09      	cmp	r2, #9
   11b24:	d8ed      	bhi.n	11b02 <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
   11b26:	3b30      	subs	r3, #48	; 0x30
   11b28:	e7f1      	b.n	11b0e <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
   11b2a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   11b2e:	b2d2      	uxtb	r2, r2
   11b30:	2a05      	cmp	r2, #5
   11b32:	d801      	bhi.n	11b38 <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
   11b34:	3b37      	subs	r3, #55	; 0x37
   11b36:	e7ea      	b.n	11b0e <_Z9ee_hexdecPc+0x12>
      return -1;
   11b38:	f04f 30ff 	mov.w	r0, #4294967295
}
   11b3c:	4770      	bx	lr

00011b3e <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
   11b3e:	2200      	movs	r2, #0
   11b40:	6002      	str	r2, [r0, #0]
   11b42:	6042      	str	r2, [r0, #4]
   11b44:	6082      	str	r2, [r0, #8]
  }
   11b46:	4770      	bx	lr

00011b48 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
   11b48:	2001      	movs	r0, #1
   11b4a:	4770      	bx	lr

00011b4c <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
   11b4c:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
   11b4e:	6803      	ldr	r3, [r0, #0]
   11b50:	699b      	ldr	r3, [r3, #24]
   11b52:	4798      	blx	r3
  }
   11b54:	bd08      	pop	{r3, pc}

00011b56 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
   11b56:	b508      	push	{r3, lr}
    return FindOp(op);
   11b58:	6803      	ldr	r3, [r0, #0]
   11b5a:	69db      	ldr	r3, [r3, #28]
   11b5c:	4798      	blx	r3
  }
   11b5e:	bd08      	pop	{r3, pc}

00011b60 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   11b60:	2920      	cmp	r1, #32
   11b62:	d00e      	beq.n	11b82 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x22>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   11b64:	b410      	push	{r4}
   11b66:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11b68:	2300      	movs	r3, #0
   11b6a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
   11b6e:	429a      	cmp	r2, r3
   11b70:	d909      	bls.n	11b86 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x26>
      const TfLiteRegistration& registration = registrations_[i];
   11b72:	eb04 1243 	add.w	r2, r4, r3, lsl #5
   11b76:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
   11b78:	6992      	ldr	r2, [r2, #24]
   11b7a:	428a      	cmp	r2, r1
   11b7c:	d004      	beq.n	11b88 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11b7e:	3301      	adds	r3, #1
   11b80:	e7f3      	b.n	11b6a <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   11b82:	2000      	movs	r0, #0
  }
   11b84:	4770      	bx	lr
    return nullptr;
   11b86:	2000      	movs	r0, #0
  }
   11b88:	bc10      	pop	{r4}
   11b8a:	4770      	bx	lr

00011b8c <_ZN6tflite22MicroMutableOpResolverILj6EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   11b8c:	4770      	bx	lr

00011b8e <_ZN6tflite16MicroModelRunnerIaaLi6EED1Ev>:
class MicroModelRunner {
   11b8e:	b510      	push	{r4, lr}
   11b90:	4604      	mov	r4, r0
   11b92:	300c      	adds	r0, #12
   11b94:	f001 fc8d 	bl	134b2 <_ZN6tflite16MicroInterpreterD1Ev>
   11b98:	4620      	mov	r0, r4
   11b9a:	bd10      	pop	{r4, pc}

00011b9c <_ZN6tflite22MicroMutableOpResolverILj6EED0Ev>:
   11b9c:	b510      	push	{r4, lr}
   11b9e:	4604      	mov	r4, r0
   11ba0:	f004 f9f9 	bl	15f96 <_ZdlPv>
   11ba4:	4620      	mov	r0, r4
   11ba6:	bd10      	pop	{r4, pc}

00011ba8 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   11ba8:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   11baa:	f8d0 40e8 	ldr.w	r4, [r0, #232]	; 0xe8
   11bae:	2c06      	cmp	r4, #6
   11bb0:	d801      	bhi.n	11bb6 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0xe>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   11bb2:	2300      	movs	r3, #0
   11bb4:	e002      	b.n	11bbc <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   11bb6:	f004 fa05 	bl	15fc4 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   11bba:	3301      	adds	r3, #1
   11bbc:	429c      	cmp	r4, r3
   11bbe:	d908      	bls.n	11bd2 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   11bc0:	18c2      	adds	r2, r0, r3
   11bc2:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
   11bc6:	428a      	cmp	r2, r1
   11bc8:	d1f7      	bne.n	11bba <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
   11bca:	3334      	adds	r3, #52	; 0x34
   11bcc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   11bd0:	e000      	b.n	11bd4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
   11bd2:	2000      	movs	r0, #0
  }
   11bd4:	bd10      	pop	{r4, pc}

00011bd6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   11bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11bd8:	4605      	mov	r5, r0
   11bda:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11bdc:	2400      	movs	r4, #0
   11bde:	e000      	b.n	11be2 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xc>
   11be0:	3401      	adds	r4, #1
   11be2:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   11be6:	42a3      	cmp	r3, r4
   11be8:	d90e      	bls.n	11c08 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x32>
      const TfLiteRegistration& registration = registrations_[i];
   11bea:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   11bee:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   11bf0:	699b      	ldr	r3, [r3, #24]
   11bf2:	2b20      	cmp	r3, #32
   11bf4:	d1f4      	bne.n	11be0 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
   11bf6:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   11bfa:	4639      	mov	r1, r7
   11bfc:	69d8      	ldr	r0, [r3, #28]
   11bfe:	f7ef fc7f 	bl	1500 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   11c02:	2800      	cmp	r0, #0
   11c04:	d1ec      	bne.n	11be0 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa>
   11c06:	e000      	b.n	11c0a <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x34>
    return nullptr;
   11c08:	2600      	movs	r6, #0
  }
   11c0a:	4630      	mov	r0, r6
   11c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011c0e <_Z6th_prev>:
void th_pre() {}
   11c0e:	4770      	bx	lr

00011c10 <_Z7th_postv>:
void th_post() {}
   11c10:	4770      	bx	lr

00011c12 <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
   11c12:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
   11c14:	f7f0 fed4 	bl	29c0 <_Z33ee_serial_command_parser_callbackPc>
}
   11c18:	bd08      	pop	{r3, pc}

00011c1a <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
   11c1a:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
   11c1c:	f004 fb74 	bl	16308 <strnlen>
}
   11c20:	bd08      	pop	{r3, pc}

00011c22 <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
   11c22:	b508      	push	{r3, lr}
   11c24:	f7ff fc0c 	bl	11440 <viprintf>
   11c28:	bd08      	pop	{r3, pc}

00011c2a <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
   11c2a:	b40f      	push	{r0, r1, r2, r3}
   11c2c:	b500      	push	{lr}
   11c2e:	b083      	sub	sp, #12
   11c30:	a904      	add	r1, sp, #16
   11c32:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
   11c36:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
   11c38:	f7ff fff3 	bl	11c22 <_Z10th_vprintfPKcSt9__va_list>
}
   11c3c:	b003      	add	sp, #12
   11c3e:	f85d eb04 	ldr.w	lr, [sp], #4
   11c42:	b004      	add	sp, #16
   11c44:	4770      	bx	lr

00011c46 <_Z24th_serialport_initializev>:
}
   11c46:	4770      	bx	lr

00011c48 <main>:
SHELL_CMD_ARG_REGISTER(start, 0, "test", cmd_start, 1, 10);

#endif /* CONFIG_SHELL */


int main(int argc, char *argv[]) {
   11c48:	b508      	push	{r3, lr}
console_init();
   11c4a:	f7f2 f867 	bl	3d1c <console_init>

ee_benchmark_initialize();
   11c4e:	f7f0 fcf9 	bl	2644 <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
   11c52:	f7f2 f863 	bl	3d1c <console_init>

  while (1) {
    int c;

    c = console_getchar();
   11c56:	f7f2 f84f 	bl	3cf8 <console_getchar>
    if (c < 0) {
   11c5a:	2800      	cmp	r0, #0
   11c5c:	dbfb      	blt.n	11c56 <main+0xe>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
   11c5e:	b2c0      	uxtb	r0, r0
   11c60:	f7f0 fcd0 	bl	2604 <_Z18ee_serial_callbackc>
   11c64:	e7f7      	b.n	11c56 <main+0xe>

00011c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
   11c66:	4770      	bx	lr

00011c68 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
   11c68:	b510      	push	{r4, lr}
   11c6a:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   11c6c:	6800      	ldr	r0, [r0, #0]
   11c6e:	f7ff fffa 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   11c72:	4420      	add	r0, r4
   11c74:	bd10      	pop	{r4, pc}

00011c76 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
   11c76:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
   11c78:	f7ff fff6 	bl	11c68 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
   11c7c:	bd08      	pop	{r3, pc}

00011c7e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11c7e:	4602      	mov	r2, r0
   11c80:	b158      	cbz	r0, 11c9a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11c82:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11c84:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11c88:	2b01      	cmp	r3, #1
   11c8a:	d003      	beq.n	11c94 <sys_notify_validate+0x16>
   11c8c:	2b03      	cmp	r3, #3
   11c8e:	d107      	bne.n	11ca0 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   11c90:	6803      	ldr	r3, [r0, #0]
   11c92:	b143      	cbz	r3, 11ca6 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   11c94:	2000      	movs	r0, #0
   11c96:	6090      	str	r0, [r2, #8]
   11c98:	4770      	bx	lr
		return -EINVAL;
   11c9a:	f06f 0015 	mvn.w	r0, #21
   11c9e:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   11ca0:	f06f 0015 	mvn.w	r0, #21
   11ca4:	4770      	bx	lr
			rv = -EINVAL;
   11ca6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   11caa:	4770      	bx	lr

00011cac <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11cac:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11cae:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11cb0:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11cb4:	6081      	str	r1, [r0, #8]
	switch (method) {
   11cb6:	2a03      	cmp	r2, #3
   11cb8:	d103      	bne.n	11cc2 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11cba:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11cbc:	2200      	movs	r2, #0
   11cbe:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11cc0:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   11cc2:	2000      	movs	r0, #0
   11cc4:	e7fa      	b.n	11cbc <sys_notify_finalize+0x10>

00011cc6 <arch_printk_char_out>:
}
   11cc6:	2000      	movs	r0, #0
   11cc8:	4770      	bx	lr

00011cca <str_out>:
{
   11cca:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11ccc:	680c      	ldr	r4, [r1, #0]
   11cce:	b154      	cbz	r4, 11ce6 <str_out+0x1c>
   11cd0:	688a      	ldr	r2, [r1, #8]
   11cd2:	684b      	ldr	r3, [r1, #4]
   11cd4:	429a      	cmp	r2, r3
   11cd6:	da06      	bge.n	11ce6 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   11cd8:	3b01      	subs	r3, #1
   11cda:	429a      	cmp	r2, r3
   11cdc:	d008      	beq.n	11cf0 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   11cde:	1c53      	adds	r3, r2, #1
   11ce0:	608b      	str	r3, [r1, #8]
   11ce2:	54a0      	strb	r0, [r4, r2]
   11ce4:	e002      	b.n	11cec <str_out+0x22>
		ctx->count++;
   11ce6:	688b      	ldr	r3, [r1, #8]
   11ce8:	3301      	adds	r3, #1
   11cea:	608b      	str	r3, [r1, #8]
}
   11cec:	bc10      	pop	{r4}
   11cee:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   11cf0:	1c53      	adds	r3, r2, #1
   11cf2:	608b      	str	r3, [r1, #8]
   11cf4:	2300      	movs	r3, #0
   11cf6:	54a3      	strb	r3, [r4, r2]
   11cf8:	e7f8      	b.n	11cec <str_out+0x22>

00011cfa <printk>:
{
   11cfa:	b40f      	push	{r0, r1, r2, r3}
   11cfc:	b500      	push	{lr}
   11cfe:	b083      	sub	sp, #12
   11d00:	a904      	add	r1, sp, #16
   11d02:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11d06:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   11d08:	f7f1 f978 	bl	2ffc <vprintk>
}
   11d0c:	b003      	add	sp, #12
   11d0e:	f85d eb04 	ldr.w	lr, [sp], #4
   11d12:	b004      	add	sp, #16
   11d14:	4770      	bx	lr

00011d16 <snprintk>:
{
   11d16:	b40c      	push	{r2, r3}
   11d18:	b500      	push	{lr}
   11d1a:	b083      	sub	sp, #12
   11d1c:	ab04      	add	r3, sp, #16
   11d1e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11d22:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11d24:	f7f1 f97a 	bl	301c <vsnprintk>
}
   11d28:	b003      	add	sp, #12
   11d2a:	f85d eb04 	ldr.w	lr, [sp], #4
   11d2e:	b002      	add	sp, #8
   11d30:	4770      	bx	lr

00011d32 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   11d32:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d36:	8b81      	ldrh	r1, [r0, #28]
   11d38:	f021 0107 	bic.w	r1, r1, #7
   11d3c:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11d3e:	8381      	strh	r1, [r0, #28]
}
   11d40:	4770      	bx	lr

00011d42 <notify_monitors>:
{
   11d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d46:	4606      	mov	r6, r0
   11d48:	460f      	mov	r7, r1
   11d4a:	4690      	mov	r8, r2
	return list->head;
   11d4c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11d4e:	b119      	cbz	r1, 11d58 <notify_monitors+0x16>
   11d50:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   11d52:	b131      	cbz	r1, 11d62 <notify_monitors+0x20>
	return node->next;
   11d54:	680c      	ldr	r4, [r1, #0]
   11d56:	e004      	b.n	11d62 <notify_monitors+0x20>
   11d58:	460c      	mov	r4, r1
   11d5a:	e002      	b.n	11d62 <notify_monitors+0x20>
   11d5c:	4623      	mov	r3, r4
   11d5e:	4621      	mov	r1, r4
   11d60:	461c      	mov	r4, r3
   11d62:	b159      	cbz	r1, 11d7c <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   11d64:	684d      	ldr	r5, [r1, #4]
   11d66:	4643      	mov	r3, r8
   11d68:	463a      	mov	r2, r7
   11d6a:	4630      	mov	r0, r6
   11d6c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11d6e:	2c00      	cmp	r4, #0
   11d70:	d0f4      	beq.n	11d5c <notify_monitors+0x1a>
   11d72:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   11d74:	2c00      	cmp	r4, #0
   11d76:	d0f2      	beq.n	11d5e <notify_monitors+0x1c>
	return node->next;
   11d78:	6823      	ldr	r3, [r4, #0]
   11d7a:	e7f0      	b.n	11d5e <notify_monitors+0x1c>
}
   11d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011d80 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d80:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   11d82:	f013 0307 	ands.w	r3, r3, #7
   11d86:	d103      	bne.n	11d90 <process_recheck+0x10>
	return list->head;
   11d88:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   11d8a:	b10a      	cbz	r2, 11d90 <process_recheck+0x10>
		evt = EVT_START;
   11d8c:	2003      	movs	r0, #3
   11d8e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11d90:	2b02      	cmp	r3, #2
   11d92:	d003      	beq.n	11d9c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   11d94:	2b01      	cmp	r3, #1
   11d96:	d006      	beq.n	11da6 <process_recheck+0x26>
	int evt = EVT_NOP;
   11d98:	2000      	movs	r0, #0
   11d9a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   11d9c:	8bc2      	ldrh	r2, [r0, #30]
   11d9e:	2a00      	cmp	r2, #0
   11da0:	d1f8      	bne.n	11d94 <process_recheck+0x14>
		evt = EVT_STOP;
   11da2:	2004      	movs	r0, #4
   11da4:	4770      	bx	lr
   11da6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   11da8:	b10b      	cbz	r3, 11dae <process_recheck+0x2e>
		evt = EVT_RESET;
   11daa:	2005      	movs	r0, #5
}
   11dac:	4770      	bx	lr
	int evt = EVT_NOP;
   11dae:	2000      	movs	r0, #0
   11db0:	4770      	bx	lr

00011db2 <process_complete>:
{
   11db2:	b538      	push	{r3, r4, r5, lr}
   11db4:	4604      	mov	r4, r0
   11db6:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11db8:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
   11dba:	2a00      	cmp	r2, #0
   11dbc:	db07      	blt.n	11dce <process_complete+0x1c>
   11dbe:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11dc2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11dc4:	2a01      	cmp	r2, #1
   11dc6:	d90e      	bls.n	11de6 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11dc8:	2b04      	cmp	r3, #4
   11dca:	d032      	beq.n	11e32 <process_complete+0x80>
}
   11dcc:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   11dce:	e9d0 0100 	ldrd	r0, r1, [r0]
   11dd2:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   11dd6:	2300      	movs	r3, #0
   11dd8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   11dda:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   11ddc:	2101      	movs	r1, #1
   11dde:	4620      	mov	r0, r4
   11de0:	f7ff ffa7 	bl	11d32 <set_state>
   11de4:	e7f2      	b.n	11dcc <process_complete+0x1a>
		*clients = mgr->clients;
   11de6:	e9d0 0100 	ldrd	r0, r1, [r0]
   11dea:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   11dee:	2200      	movs	r2, #0
   11df0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   11df2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   11df4:	2b06      	cmp	r3, #6
   11df6:	d117      	bne.n	11e28 <process_complete+0x76>
	return list->head;
   11df8:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11dfa:	b13b      	cbz	r3, 11e0c <process_complete+0x5a>
				mgr->refs += 1U;
   11dfc:	8be2      	ldrh	r2, [r4, #30]
   11dfe:	3201      	adds	r2, #1
   11e00:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
   11e02:	2b00      	cmp	r3, #0
   11e04:	d0f9      	beq.n	11dfa <process_complete+0x48>
	return node->next;
   11e06:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11e08:	2b00      	cmp	r3, #0
   11e0a:	d1f6      	bne.n	11dfa <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   11e0c:	2102      	movs	r1, #2
   11e0e:	4620      	mov	r0, r4
   11e10:	f7ff ff8f 	bl	11d32 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11e14:	4620      	mov	r0, r4
   11e16:	f7ff ffb3 	bl	11d80 <process_recheck>
   11e1a:	2800      	cmp	r0, #0
   11e1c:	d0d6      	beq.n	11dcc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e1e:	8ba3      	ldrh	r3, [r4, #28]
   11e20:	f043 0320 	orr.w	r3, r3, #32
   11e24:	83a3      	strh	r3, [r4, #28]
   11e26:	e7d1      	b.n	11dcc <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   11e28:	2100      	movs	r1, #0
   11e2a:	4620      	mov	r0, r4
   11e2c:	f7ff ff81 	bl	11d32 <set_state>
   11e30:	e7f0      	b.n	11e14 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   11e32:	2100      	movs	r1, #0
   11e34:	f7ff ff7d 	bl	11d32 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11e38:	4620      	mov	r0, r4
   11e3a:	f7ff ffa1 	bl	11d80 <process_recheck>
   11e3e:	2800      	cmp	r0, #0
   11e40:	d0c4      	beq.n	11dcc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e42:	8ba3      	ldrh	r3, [r4, #28]
   11e44:	f043 0320 	orr.w	r3, r3, #32
   11e48:	83a3      	strh	r3, [r4, #28]
}
   11e4a:	e7bf      	b.n	11dcc <process_complete+0x1a>

00011e4c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   11e4c:	b158      	cbz	r0, 11e66 <validate_args+0x1a>
{
   11e4e:	b510      	push	{r4, lr}
   11e50:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   11e52:	b159      	cbz	r1, 11e6c <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   11e54:	1d08      	adds	r0, r1, #4
   11e56:	f7ff ff12 	bl	11c7e <sys_notify_validate>
	if ((rv == 0)
   11e5a:	b918      	cbnz	r0, 11e64 <validate_args+0x18>
	    && ((cli->notify.flags
   11e5c:	68a3      	ldr	r3, [r4, #8]
   11e5e:	f033 0303 	bics.w	r3, r3, #3
   11e62:	d106      	bne.n	11e72 <validate_args+0x26>
}
   11e64:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11e66:	f06f 0015 	mvn.w	r0, #21
}
   11e6a:	4770      	bx	lr
		return -EINVAL;
   11e6c:	f06f 0015 	mvn.w	r0, #21
   11e70:	e7f8      	b.n	11e64 <validate_args+0x18>
		rv = -EINVAL;
   11e72:	f06f 0015 	mvn.w	r0, #21
   11e76:	e7f5      	b.n	11e64 <validate_args+0x18>

00011e78 <notify_one>:
{
   11e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e7c:	4607      	mov	r7, r0
   11e7e:	460c      	mov	r4, r1
   11e80:	4616      	mov	r6, r2
   11e82:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11e84:	4619      	mov	r1, r3
   11e86:	1d20      	adds	r0, r4, #4
   11e88:	f7ff ff10 	bl	11cac <sys_notify_finalize>
	if (cb) {
   11e8c:	b128      	cbz	r0, 11e9a <notify_one+0x22>
   11e8e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   11e90:	462b      	mov	r3, r5
   11e92:	4632      	mov	r2, r6
   11e94:	4621      	mov	r1, r4
   11e96:	4638      	mov	r0, r7
   11e98:	47c0      	blx	r8
}
   11e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e9e <notify_all>:
{
   11e9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ea2:	4681      	mov	r9, r0
   11ea4:	460c      	mov	r4, r1
   11ea6:	4690      	mov	r8, r2
   11ea8:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   11eaa:	e005      	b.n	11eb8 <notify_all+0x1a>
	list->tail = node;
   11eac:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   11eae:	463b      	mov	r3, r7
   11eb0:	4642      	mov	r2, r8
   11eb2:	4648      	mov	r0, r9
   11eb4:	f7ff ffe0 	bl	11e78 <notify_one>
	return list->head;
   11eb8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   11eba:	b129      	cbz	r1, 11ec8 <notify_all+0x2a>
	return node->next;
   11ebc:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   11ebe:	6025      	str	r5, [r4, #0]
	return list->tail;
   11ec0:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11ec2:	428e      	cmp	r6, r1
   11ec4:	d1f3      	bne.n	11eae <notify_all+0x10>
   11ec6:	e7f1      	b.n	11eac <notify_all+0xe>
}
   11ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011ecc <transition_complete>:
{
   11ecc:	b510      	push	{r4, lr}
	__asm__ volatile(
   11ece:	f04f 0420 	mov.w	r4, #32
   11ed2:	f3ef 8211 	mrs	r2, BASEPRI
   11ed6:	f384 8812 	msr	BASEPRI_MAX, r4
   11eda:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   11ede:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11ee0:	2101      	movs	r1, #1
   11ee2:	f7f1 f8b1 	bl	3048 <process_event>
}
   11ee6:	bd10      	pop	{r4, pc}

00011ee8 <onoff_manager_init>:
	if ((mgr == NULL)
   11ee8:	b170      	cbz	r0, 11f08 <onoff_manager_init+0x20>
{
   11eea:	b538      	push	{r3, r4, r5, lr}
   11eec:	460c      	mov	r4, r1
   11eee:	4605      	mov	r5, r0
	    || (transitions == NULL)
   11ef0:	b169      	cbz	r1, 11f0e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   11ef2:	680b      	ldr	r3, [r1, #0]
   11ef4:	b173      	cbz	r3, 11f14 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   11ef6:	684b      	ldr	r3, [r1, #4]
   11ef8:	b17b      	cbz	r3, 11f1a <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   11efa:	2220      	movs	r2, #32
   11efc:	2100      	movs	r1, #0
   11efe:	f004 f87a 	bl	15ff6 <memset>
   11f02:	612c      	str	r4, [r5, #16]
	return 0;
   11f04:	2000      	movs	r0, #0
}
   11f06:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11f08:	f06f 0015 	mvn.w	r0, #21
}
   11f0c:	4770      	bx	lr
		return -EINVAL;
   11f0e:	f06f 0015 	mvn.w	r0, #21
   11f12:	e7f8      	b.n	11f06 <onoff_manager_init+0x1e>
   11f14:	f06f 0015 	mvn.w	r0, #21
   11f18:	e7f5      	b.n	11f06 <onoff_manager_init+0x1e>
   11f1a:	f06f 0015 	mvn.w	r0, #21
   11f1e:	e7f2      	b.n	11f06 <onoff_manager_init+0x1e>

00011f20 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f22:	4604      	mov	r4, r0
   11f24:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11f26:	f7ff ff91 	bl	11e4c <validate_args>

	if (rv < 0) {
   11f2a:	1e06      	subs	r6, r0, #0
   11f2c:	db37      	blt.n	11f9e <onoff_request+0x7e>
   11f2e:	f04f 0320 	mov.w	r3, #32
   11f32:	f3ef 8211 	mrs	r2, BASEPRI
   11f36:	f383 8812 	msr	BASEPRI_MAX, r3
   11f3a:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11f3e:	8ba5      	ldrh	r5, [r4, #28]
   11f40:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11f44:	8be3      	ldrh	r3, [r4, #30]
   11f46:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11f4a:	428b      	cmp	r3, r1
   11f4c:	d02f      	beq.n	11fae <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   11f4e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   11f50:	2d02      	cmp	r5, #2
   11f52:	d00c      	beq.n	11f6e <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   11f54:	b18d      	cbz	r5, 11f7a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   11f56:	2d04      	cmp	r5, #4
   11f58:	d00f      	beq.n	11f7a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   11f5a:	2d06      	cmp	r5, #6
   11f5c:	d00d      	beq.n	11f7a <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   11f5e:	2d05      	cmp	r5, #5
   11f60:	d01f      	beq.n	11fa2 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   11f62:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   11f66:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   11f68:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   11f6a:	4608      	mov	r0, r1
   11f6c:	e00a      	b.n	11f84 <onoff_request+0x64>
		mgr->refs += 1U;
   11f6e:	3301      	adds	r3, #1
   11f70:	83e3      	strh	r3, [r4, #30]
		notify = true;
   11f72:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   11f74:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   11f76:	4618      	mov	r0, r3
   11f78:	e004      	b.n	11f84 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   11f7a:	fab5 f385 	clz	r3, r5
   11f7e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   11f80:	2100      	movs	r1, #0
		add_client = true;
   11f82:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   11f84:	b128      	cbz	r0, 11f92 <onoff_request+0x72>
	parent->next = child;
   11f86:	2000      	movs	r0, #0
   11f88:	6038      	str	r0, [r7, #0]
	return list->tail;
   11f8a:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   11f8c:	b1a8      	cbz	r0, 11fba <onoff_request+0x9a>
	parent->next = child;
   11f8e:	6007      	str	r7, [r0, #0]
	list->tail = node;
   11f90:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   11f92:	b9ab      	cbnz	r3, 11fc0 <onoff_request+0xa0>
	__asm__ volatile(
   11f94:	f382 8811 	msr	BASEPRI, r2
   11f98:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11f9c:	b9a9      	cbnz	r1, 11fca <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   11f9e:	4630      	mov	r0, r6
   11fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   11fa2:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   11fa6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   11fa8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   11faa:	4608      	mov	r0, r1
   11fac:	e7ea      	b.n	11f84 <onoff_request+0x64>
		rv = -EAGAIN;
   11fae:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   11fb2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   11fb4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   11fb6:	4608      	mov	r0, r1
   11fb8:	e7e4      	b.n	11f84 <onoff_request+0x64>
   11fba:	6067      	str	r7, [r4, #4]
	list->head = node;
   11fbc:	6027      	str	r7, [r4, #0]
}
   11fbe:	e7e8      	b.n	11f92 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   11fc0:	2102      	movs	r1, #2
   11fc2:	4620      	mov	r0, r4
   11fc4:	f7f1 f840 	bl	3048 <process_event>
   11fc8:	e7e9      	b.n	11f9e <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   11fca:	2300      	movs	r3, #0
   11fcc:	462a      	mov	r2, r5
   11fce:	4639      	mov	r1, r7
   11fd0:	4620      	mov	r0, r4
   11fd2:	f7ff ff51 	bl	11e78 <notify_one>
   11fd6:	e7e2      	b.n	11f9e <onoff_request+0x7e>

00011fd8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11fd8:	b508      	push	{r3, lr}
   11fda:	4604      	mov	r4, r0
   11fdc:	4608      	mov	r0, r1
   11fde:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   11fe0:	461a      	mov	r2, r3
   11fe2:	47a0      	blx	r4
	return z_impl_z_current_get();
   11fe4:	f7fd fe0c 	bl	fc00 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   11fe8:	f7f2 fb5c 	bl	46a4 <z_impl_k_thread_abort>

00011fec <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   11fec:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   11fee:	1d13      	adds	r3, r2, #4
   11ff0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11ff4:	b9d3      	cbnz	r3, 1202c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   11ff6:	2301      	movs	r3, #1
   11ff8:	fa03 f402 	lsl.w	r4, r3, r2
   11ffc:	68c3      	ldr	r3, [r0, #12]
   11ffe:	4323      	orrs	r3, r4
   12000:	60c3      	str	r3, [r0, #12]
		b->next = c;
   12002:	3204      	adds	r2, #4
   12004:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12008:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1200c:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
   1200e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   12012:	d307      	bcc.n	12024 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   12014:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   12016:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   12018:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1201c:	d304      	bcc.n	12028 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1201e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   12020:	bc70      	pop	{r4, r5, r6}
   12022:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   12024:	8099      	strh	r1, [r3, #4]
   12026:	e7f6      	b.n	12016 <free_list_add_bidx+0x2a>
   12028:	80d9      	strh	r1, [r3, #6]
   1202a:	e7f9      	b.n	12020 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1202c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   12030:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   12032:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   12036:	d318      	bcc.n	1206a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   12038:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1203a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1203e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   12042:	d314      	bcc.n	1206e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   12044:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   12046:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   12048:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1204c:	d311      	bcc.n	12072 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1204e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   12050:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   12054:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   12056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1205a:	d30c      	bcc.n	12076 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1205c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1205e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   12060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12064:	d309      	bcc.n	1207a <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   12066:	60a1      	str	r1, [r4, #8]
   12068:	e7da      	b.n	12020 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   1206a:	88a2      	ldrh	r2, [r4, #4]
   1206c:	e7e5      	b.n	1203a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1206e:	80aa      	strh	r2, [r5, #4]
   12070:	e7e9      	b.n	12046 <free_list_add_bidx+0x5a>
   12072:	80eb      	strh	r3, [r5, #6]
   12074:	e7ec      	b.n	12050 <free_list_add_bidx+0x64>
   12076:	80d1      	strh	r1, [r2, #6]
   12078:	e7f1      	b.n	1205e <free_list_add_bidx+0x72>
   1207a:	80a1      	strh	r1, [r4, #4]
   1207c:	e7d0      	b.n	12020 <free_list_add_bidx+0x34>

0001207e <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1207e:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   12080:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
   12082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12086:	d307      	bcc.n	12098 <free_list_add+0x1a>
	void *cmem = &buf[c];
   12088:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   1208c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1208e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   12090:	2a01      	cmp	r2, #1
   12092:	d002      	beq.n	1209a <free_list_add+0x1c>
   12094:	2200      	movs	r2, #0
   12096:	e000      	b.n	1209a <free_list_add+0x1c>
   12098:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1209a:	b9a2      	cbnz	r2, 120c6 <free_list_add+0x48>
	void *cmem = &buf[c];
   1209c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   120a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   120a4:	d310      	bcc.n	120c8 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   120a6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   120a8:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   120aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   120ae:	d30d      	bcc.n	120cc <free_list_add+0x4e>
   120b0:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   120b2:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   120b4:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   120b8:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   120ba:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
   120be:	f1c2 021f 	rsb	r2, r2, #31
   120c2:	f7ff ff93 	bl	11fec <free_list_add_bidx>
	}
}
   120c6:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   120c8:	8852      	ldrh	r2, [r2, #2]
   120ca:	e7ed      	b.n	120a8 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   120cc:	2304      	movs	r3, #4
   120ce:	e7f0      	b.n	120b2 <free_list_add+0x34>

000120d0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   120d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120d2:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   120d4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   120d8:	d32a      	bcc.n	12130 <sys_heap_init+0x60>
   120da:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   120dc:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   120de:	1dc8      	adds	r0, r1, #7
   120e0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   120e4:	440d      	add	r5, r1
   120e6:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   120ea:	1a2d      	subs	r5, r5, r0
   120ec:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   120ee:	4606      	mov	r6, r0
	heap->heap = h;
   120f0:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   120f2:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   120f4:	2300      	movs	r3, #0
   120f6:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   120f8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   120fc:	d31a      	bcc.n	12134 <sys_heap_init+0x64>
   120fe:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12100:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   12102:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   12106:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   12108:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1210c:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12110:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   12114:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12116:	f103 0e07 	add.w	lr, r3, #7
   1211a:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1211e:	2300      	movs	r3, #0
   12120:	4563      	cmp	r3, ip
   12122:	da09      	bge.n	12138 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   12124:	1d1a      	adds	r2, r3, #4
   12126:	2400      	movs	r4, #0
   12128:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1212c:	3301      	adds	r3, #1
   1212e:	e7f7      	b.n	12120 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   12130:	2504      	movs	r5, #4
   12132:	e7d3      	b.n	120dc <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   12134:	2304      	movs	r3, #4
   12136:	e7e3      	b.n	12100 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12138:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1213a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1213e:	d333      	bcc.n	121a8 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   12140:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   12142:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12146:	d331      	bcc.n	121ac <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   12148:	2300      	movs	r3, #0
   1214a:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   1214c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12150:	d32f      	bcc.n	121b2 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   12152:	6843      	ldr	r3, [r0, #4]
   12154:	f043 0301 	orr.w	r3, r3, #1
   12158:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1215a:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1215c:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1215e:	f02e 0307 	bic.w	r3, lr, #7
   12162:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   12164:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12168:	d328      	bcc.n	121bc <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   1216a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1216c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1216e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   12172:	d325      	bcc.n	121c0 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   12174:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   12176:	f025 0307 	bic.w	r3, r5, #7
   1217a:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   1217c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1217e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   12182:	d31f      	bcc.n	121c4 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   12184:	2400      	movs	r4, #0
   12186:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   12188:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1218a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1218e:	d31c      	bcc.n	121ca <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   12190:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   12192:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   12194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12198:	d319      	bcc.n	121ce <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1219a:	686b      	ldr	r3, [r5, #4]
   1219c:	f043 0301 	orr.w	r3, r3, #1
   121a0:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   121a2:	f7ff ff6c 	bl	1207e <free_list_add>
}
   121a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   121a8:	8043      	strh	r3, [r0, #2]
   121aa:	e7ca      	b.n	12142 <sys_heap_init+0x72>
   121ac:	2300      	movs	r3, #0
   121ae:	8003      	strh	r3, [r0, #0]
   121b0:	e7cc      	b.n	1214c <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   121b2:	8843      	ldrh	r3, [r0, #2]
   121b4:	f043 0301 	orr.w	r3, r3, #1
   121b8:	8043      	strh	r3, [r0, #2]
   121ba:	e7ce      	b.n	1215a <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   121bc:	8066      	strh	r6, [r4, #2]
   121be:	e7d5      	b.n	1216c <sys_heap_init+0x9c>
   121c0:	52c1      	strh	r1, [r0, r3]
   121c2:	e7d8      	b.n	12176 <sys_heap_init+0xa6>
   121c4:	2400      	movs	r4, #0
   121c6:	806c      	strh	r4, [r5, #2]
   121c8:	e7de      	b.n	12188 <sys_heap_init+0xb8>
   121ca:	52c2      	strh	r2, [r0, r3]
   121cc:	e7e1      	b.n	12192 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   121ce:	886b      	ldrh	r3, [r5, #2]
   121d0:	f043 0301 	orr.w	r3, r3, #1
   121d4:	806b      	strh	r3, [r5, #2]
   121d6:	e7e4      	b.n	121a2 <sys_heap_init+0xd2>

000121d8 <outs>:
{
   121d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121dc:	4607      	mov	r7, r0
   121de:	460e      	mov	r6, r1
   121e0:	4614      	mov	r4, r2
   121e2:	4698      	mov	r8, r3
	size_t count = 0;
   121e4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   121e6:	e006      	b.n	121f6 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   121e8:	4631      	mov	r1, r6
   121ea:	f814 0b01 	ldrb.w	r0, [r4], #1
   121ee:	47b8      	blx	r7
		if (rc < 0) {
   121f0:	2800      	cmp	r0, #0
   121f2:	db09      	blt.n	12208 <outs+0x30>
		++count;
   121f4:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   121f6:	4544      	cmp	r4, r8
   121f8:	d3f6      	bcc.n	121e8 <outs+0x10>
   121fa:	f1b8 0f00 	cmp.w	r8, #0
   121fe:	d102      	bne.n	12206 <outs+0x2e>
   12200:	7823      	ldrb	r3, [r4, #0]
   12202:	2b00      	cmp	r3, #0
   12204:	d1f0      	bne.n	121e8 <outs+0x10>
	return (int)count;
   12206:	4628      	mov	r0, r5
}
   12208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001220c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1220c:	4770      	bx	lr

0001220e <tty_putchar>:
{
   1220e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12212:	4604      	mov	r4, r0
   12214:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   12216:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
   1221a:	f003 fce4 	bl	15be6 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   1221e:	b330      	cbz	r0, 1226e <tty_putchar+0x60>
   12220:	2200      	movs	r2, #0
   12222:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
   12224:	4630      	mov	r0, r6
   12226:	f7fd f903 	bl	f430 <z_impl_k_sem_take>
	if (res < 0) {
   1222a:	2800      	cmp	r0, #0
   1222c:	db1d      	blt.n	1226a <tty_putchar+0x5c>
	__asm__ volatile(
   1222e:	f04f 0320 	mov.w	r3, #32
   12232:	f3ef 8111 	mrs	r1, BASEPRI
   12236:	f383 8812 	msr	BASEPRI_MAX, r3
   1223a:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   1223e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   12240:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
   12242:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   12244:	4298      	cmp	r0, r3
   12246:	d800      	bhi.n	1224a <tty_putchar+0x3c>
		tx_next = 0;
   12248:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
   1224a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   1224c:	4298      	cmp	r0, r3
   1224e:	d02e      	beq.n	122ae <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
   12250:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12252:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
   12254:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
   12256:	f381 8811 	msr	BASEPRI, r1
   1225a:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   1225e:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   12260:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
   12262:	69db      	ldr	r3, [r3, #28]
   12264:	b353      	cbz	r3, 122bc <tty_putchar+0xae>
		api->irq_tx_enable(dev);
   12266:	4798      	blx	r3
	return 0;
   12268:	2000      	movs	r0, #0
}
   1226a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1226e:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
   12270:	f1b3 3fff 	cmp.w	r3, #4294967295
   12274:	d017      	beq.n	122a6 <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   12276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1227a:	ea4f 79e3 	mov.w	r9, r3, asr #31
   1227e:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   12282:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   12286:	03d8      	lsls	r0, r3, #15
   12288:	f240 37e7 	movw	r7, #999	; 0x3e7
   1228c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12290:	2300      	movs	r3, #0
   12292:	19c0      	adds	r0, r0, r7
   12294:	f04f 0700 	mov.w	r7, #0
   12298:	eb47 0101 	adc.w	r1, r7, r1
   1229c:	f7ee ff48 	bl	1130 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
   122a0:	4602      	mov	r2, r0
   122a2:	460b      	mov	r3, r1
   122a4:	e7be      	b.n	12224 <tty_putchar+0x16>
   122a6:	f04f 32ff 	mov.w	r2, #4294967295
   122aa:	4613      	mov	r3, r2
   122ac:	e7ba      	b.n	12224 <tty_putchar+0x16>
   122ae:	f381 8811 	msr	BASEPRI, r1
   122b2:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   122b6:	f06f 001b 	mvn.w	r0, #27
   122ba:	e7d6      	b.n	1226a <tty_putchar+0x5c>
	return 0;
   122bc:	2000      	movs	r0, #0
   122be:	e7d4      	b.n	1226a <tty_putchar+0x5c>

000122c0 <tty_getchar>:
{
   122c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122c2:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   122c4:	1d05      	adds	r5, r0, #4
   122c6:	6a03      	ldr	r3, [r0, #32]
   122c8:	f1b3 3fff 	cmp.w	r3, #4294967295
   122cc:	d031      	beq.n	12332 <tty_getchar+0x72>
   122ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   122d2:	17df      	asrs	r7, r3, #31
   122d4:	03f9      	lsls	r1, r7, #15
   122d6:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   122da:	03d8      	lsls	r0, r3, #15
   122dc:	f240 36e7 	movw	r6, #999	; 0x3e7
   122e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   122e4:	2300      	movs	r3, #0
   122e6:	1980      	adds	r0, r0, r6
   122e8:	f04f 0600 	mov.w	r6, #0
   122ec:	eb46 0101 	adc.w	r1, r6, r1
   122f0:	f7ee ff1e 	bl	1130 <__aeabi_uldivmod>
   122f4:	4602      	mov	r2, r0
   122f6:	460b      	mov	r3, r1
   122f8:	4628      	mov	r0, r5
   122fa:	f7fd f899 	bl	f430 <z_impl_k_sem_take>
	if (res < 0) {
   122fe:	2800      	cmp	r0, #0
   12300:	db16      	blt.n	12330 <tty_getchar+0x70>
	__asm__ volatile(
   12302:	f04f 0320 	mov.w	r3, #32
   12306:	f3ef 8111 	mrs	r1, BASEPRI
   1230a:	f383 8812 	msr	BASEPRI_MAX, r3
   1230e:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   12312:	6960      	ldr	r0, [r4, #20]
   12314:	8ba2      	ldrh	r2, [r4, #28]
   12316:	1c53      	adds	r3, r2, #1
   12318:	b29b      	uxth	r3, r3
   1231a:	83a3      	strh	r3, [r4, #28]
   1231c:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   1231e:	69a2      	ldr	r2, [r4, #24]
   12320:	4293      	cmp	r3, r2
   12322:	d301      	bcc.n	12328 <tty_getchar+0x68>
		tty->rx_get = 0U;
   12324:	2300      	movs	r3, #0
   12326:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
   12328:	f381 8811 	msr	BASEPRI, r1
   1232c:	f3bf 8f6f 	isb	sy
}
   12330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   12332:	f04f 32ff 	mov.w	r2, #4294967295
   12336:	4613      	mov	r3, r2
   12338:	e7de      	b.n	122f8 <tty_getchar+0x38>

0001233a <tty_read_unbuf>:
{
   1233a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1233e:	b083      	sub	sp, #12
   12340:	4681      	mov	r9, r0
   12342:	460e      	mov	r6, r1
   12344:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
   12346:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
   12348:	f04f 0800 	mov.w	r8, #0
	while (size) {
   1234c:	e01a      	b.n	12384 <tty_read_unbuf+0x4a>
		return -ENOSYS;
   1234e:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
   12352:	f1b8 0f00 	cmp.w	r8, #0
   12356:	d003      	beq.n	12360 <tty_read_unbuf+0x26>
	return out_size;
   12358:	4640      	mov	r0, r8
}
   1235a:	b003      	add	sp, #12
   1235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
   12360:	f000 f9db 	bl	1271a <__errno>
   12364:	6004      	str	r4, [r0, #0]
				return -1;
   12366:	f04f 30ff 	mov.w	r0, #4294967295
   1236a:	e7f6      	b.n	1235a <tty_read_unbuf+0x20>
		if (size == 0 ||
   1236c:	2d00      	cmp	r5, #0
   1236e:	d0f3      	beq.n	12358 <tty_read_unbuf+0x1e>
   12370:	f1b7 3fff 	cmp.w	r7, #4294967295
   12374:	d003      	beq.n	1237e <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   12376:	1e7b      	subs	r3, r7, #1
   12378:	2f00      	cmp	r7, #0
   1237a:	d0ed      	beq.n	12358 <tty_read_unbuf+0x1e>
   1237c:	461f      	mov	r7, r3
		if (res == -1) {
   1237e:	f1b4 3fff 	cmp.w	r4, #4294967295
   12382:	d018      	beq.n	123b6 <tty_read_unbuf+0x7c>
	while (size) {
   12384:	2d00      	cmp	r5, #0
   12386:	d0e7      	beq.n	12358 <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
   12388:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
   1238c:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
   1238e:	681b      	ldr	r3, [r3, #0]
   12390:	2b00      	cmp	r3, #0
   12392:	d0dc      	beq.n	1234e <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
   12394:	f10d 0107 	add.w	r1, sp, #7
   12398:	4798      	blx	r3
   1239a:	4604      	mov	r4, r0
		if (res <= -2) {
   1239c:	f1b0 3fff 	cmp.w	r0, #4294967295
   123a0:	dbd7      	blt.n	12352 <tty_read_unbuf+0x18>
		if (res == 0) {
   123a2:	2800      	cmp	r0, #0
   123a4:	d1e2      	bne.n	1236c <tty_read_unbuf+0x32>
			*p++ = c;
   123a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   123aa:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
   123ae:	f108 0801 	add.w	r8, r8, #1
			size--;
   123b2:	3d01      	subs	r5, #1
   123b4:	e7da      	b.n	1236c <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
   123b6:	2021      	movs	r0, #33	; 0x21
   123b8:	2100      	movs	r1, #0
   123ba:	f7fd fbf5 	bl	fba8 <z_impl_k_sleep>
   123be:	e7e1      	b.n	12384 <tty_read_unbuf+0x4a>

000123c0 <tty_irq_input_hook>:
{
   123c0:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
   123c2:	8bc2      	ldrh	r2, [r0, #30]
   123c4:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
   123c6:	6984      	ldr	r4, [r0, #24]
   123c8:	429c      	cmp	r4, r3
   123ca:	d800      	bhi.n	123ce <tty_irq_input_hook+0xe>
		rx_next = 0;
   123cc:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
   123ce:	8b84      	ldrh	r4, [r0, #28]
   123d0:	429c      	cmp	r4, r3
   123d2:	d007      	beq.n	123e4 <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
   123d4:	6944      	ldr	r4, [r0, #20]
   123d6:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
   123d8:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
   123da:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   123dc:	f7fd f804 	bl	f3e8 <z_impl_k_sem_give>
}
   123e0:	2001      	movs	r0, #1
   123e2:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
   123e4:	217e      	movs	r1, #126	; 0x7e
   123e6:	f7ff ff12 	bl	1220e <tty_putchar>
		return 1;
   123ea:	e7f9      	b.n	123e0 <tty_irq_input_hook+0x20>

000123ec <tty_uart_isr>:
{
   123ec:	b530      	push	{r4, r5, lr}
   123ee:	b083      	sub	sp, #12
   123f0:	4604      	mov	r4, r0
   123f2:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
   123f4:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   123f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   123f8:	b103      	cbz	r3, 123fc <tty_uart_isr+0x10>
	return api->irq_update(dev);
   123fa:	4798      	blx	r3
	const struct uart_driver_api *api =
   123fc:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   123fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12400:	b143      	cbz	r3, 12414 <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
   12402:	4620      	mov	r0, r4
   12404:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   12406:	b180      	cbz	r0, 1242a <tty_uart_isr+0x3e>
   12408:	e004      	b.n	12414 <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
   1240a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1240e:	4628      	mov	r0, r5
   12410:	f7ff ffd6 	bl	123c0 <tty_irq_input_hook>
	const struct uart_driver_api *api =
   12414:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
   12416:	699b      	ldr	r3, [r3, #24]
   12418:	2b00      	cmp	r3, #0
   1241a:	d0f6      	beq.n	1240a <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
   1241c:	2201      	movs	r2, #1
   1241e:	f10d 0107 	add.w	r1, sp, #7
   12422:	4620      	mov	r0, r4
   12424:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   12426:	2800      	cmp	r0, #0
   12428:	d1ef      	bne.n	1240a <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
   1242a:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
   1242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1242e:	b113      	cbz	r3, 12436 <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
   12430:	4620      	mov	r0, r4
   12432:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   12434:	b1b8      	cbz	r0, 12466 <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
   12436:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
   12438:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1243a:	4299      	cmp	r1, r3
   1243c:	d015      	beq.n	1246a <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   1243e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   12440:	1c4a      	adds	r2, r1, #1
   12442:	87aa      	strh	r2, [r5, #60]	; 0x3c
   12444:	4419      	add	r1, r3
	const struct uart_driver_api *api =
   12446:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
   12448:	695b      	ldr	r3, [r3, #20]
   1244a:	b113      	cbz	r3, 12452 <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
   1244c:	2201      	movs	r2, #1
   1244e:	4620      	mov	r0, r4
   12450:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   12452:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   12454:	6bab      	ldr	r3, [r5, #56]	; 0x38
   12456:	429a      	cmp	r2, r3
   12458:	d301      	bcc.n	1245e <tty_uart_isr+0x72>
				tty->tx_get = 0U;
   1245a:	2300      	movs	r3, #0
   1245c:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
   1245e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   12462:	f7fc ffc1 	bl	f3e8 <z_impl_k_sem_give>
}
   12466:	b003      	add	sp, #12
   12468:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
   1246a:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
   1246c:	6a1b      	ldr	r3, [r3, #32]
   1246e:	2b00      	cmp	r3, #0
   12470:	d0f9      	beq.n	12466 <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
   12472:	4620      	mov	r0, r4
   12474:	4798      	blx	r3
   12476:	e7f6      	b.n	12466 <tty_uart_isr+0x7a>

00012478 <tty_read>:
{
   12478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1247c:	4607      	mov	r7, r0
   1247e:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
   12480:	6983      	ldr	r3, [r0, #24]
   12482:	b17b      	cbz	r3, 124a4 <tty_read+0x2c>
	size_t out_size = 0;
   12484:	2600      	movs	r6, #0
	while (size--) {
   12486:	f102 38ff 	add.w	r8, r2, #4294967295
   1248a:	b1ba      	cbz	r2, 124bc <tty_read+0x44>
		res = tty_getchar(tty);
   1248c:	4638      	mov	r0, r7
   1248e:	f7ff ff17 	bl	122c0 <tty_getchar>
		if (res < 0) {
   12492:	1e04      	subs	r4, r0, #0
   12494:	db0a      	blt.n	124ac <tty_read+0x34>
		*p++ = (uint8_t)res;
   12496:	4629      	mov	r1, r5
   12498:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
   1249c:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
   1249e:	460d      	mov	r5, r1
	while (size--) {
   124a0:	4642      	mov	r2, r8
   124a2:	e7f0      	b.n	12486 <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
   124a4:	f7ff ff49 	bl	1233a <tty_read_unbuf>
   124a8:	4604      	mov	r4, r0
   124aa:	e008      	b.n	124be <tty_read+0x46>
			if (out_size == 0) {
   124ac:	b10e      	cbz	r6, 124b2 <tty_read+0x3a>
			return out_size;
   124ae:	4634      	mov	r4, r6
   124b0:	e005      	b.n	124be <tty_read+0x46>
				errno = -res;
   124b2:	f000 f932 	bl	1271a <__errno>
   124b6:	4263      	negs	r3, r4
   124b8:	6003      	str	r3, [r0, #0]
				return res;
   124ba:	e000      	b.n	124be <tty_read+0x46>
	return out_size;
   124bc:	4634      	mov	r4, r6
}
   124be:	4620      	mov	r0, r4
   124c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000124c4 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   124c4:	b570      	push	{r4, r5, r6, lr}
   124c6:	4604      	mov	r4, r0
   124c8:	460e      	mov	r6, r1
   124ca:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
   124cc:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   124ce:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   124d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   124d2:	b103      	cbz	r3, 124d6 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   124d4:	4798      	blx	r3

	tty->rx_ringbuf = buf;
   124d6:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
   124d8:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
   124da:	b90d      	cbnz	r5, 124e0 <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
   124dc:	2000      	movs	r0, #0
   124de:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
   124e0:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   124e2:	f04f 32ff 	mov.w	r2, #4294967295
   124e6:	2100      	movs	r1, #0
   124e8:	f003 fbc1 	bl	15c6e <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
   124ec:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   124ee:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   124f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   124f2:	2b00      	cmp	r3, #0
   124f4:	d0f2      	beq.n	124dc <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
   124f6:	4798      	blx	r3
   124f8:	e7f0      	b.n	124dc <tty_set_rx_buf+0x18>

000124fa <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   124fa:	b570      	push	{r4, r5, r6, lr}
   124fc:	4604      	mov	r4, r0
   124fe:	460e      	mov	r6, r1
   12500:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   12502:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   12504:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   12506:	6a1b      	ldr	r3, [r3, #32]
   12508:	b103      	cbz	r3, 1250c <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
   1250a:	4798      	blx	r3

	tty->tx_ringbuf = buf;
   1250c:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
   1250e:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
   12510:	f104 0024 	add.w	r0, r4, #36	; 0x24
   12514:	1e69      	subs	r1, r5, #1
   12516:	f04f 32ff 	mov.w	r2, #4294967295
   1251a:	f003 fba8 	bl	15c6e <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   1251e:	2000      	movs	r0, #0
   12520:	bd70      	pop	{r4, r5, r6, pc}

00012522 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   12522:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   12524:	f7f1 fc32 	bl	3d8c <__do_global_ctors_aux>
	__do_init_array_aux();
   12528:	f7f1 fc22 	bl	3d70 <__do_init_array_aux>
}
   1252c:	bd08      	pop	{r3, pc}

0001252e <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   1252e:	2000      	movs	r0, #0
   12530:	4770      	bx	lr

00012532 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   12532:	2200      	movs	r2, #0
   12534:	6002      	str	r2, [r0, #0]
   12536:	6042      	str	r2, [r0, #4]
   12538:	6082      	str	r2, [r0, #8]
}
   1253a:	4770      	bx	lr

0001253c <abort_function>:
{
   1253c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1253e:	2000      	movs	r0, #0
   12540:	f7f1 fb9e 	bl	3c80 <sys_reboot>

00012544 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12544:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12546:	f003 fad0 	bl	15aea <z_fatal_error>
}
   1254a:	bd08      	pop	{r3, pc}

0001254c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1254c:	b508      	push	{r3, lr}
   1254e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12550:	6800      	ldr	r0, [r0, #0]
   12552:	f7ff fff7 	bl	12544 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   12556:	bd08      	pop	{r3, pc}

00012558 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   12558:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1255a:	2100      	movs	r1, #0
   1255c:	2001      	movs	r0, #1
   1255e:	f7ff fff1 	bl	12544 <z_arm_fatal_error>
}
   12562:	bd08      	pop	{r3, pc}

00012564 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   12564:	b508      	push	{r3, lr}
	handler();
   12566:	f7f1 fded 	bl	4144 <z_SysNmiOnReset>
	z_arm_int_exit();
   1256a:	f7f1 fee9 	bl	4340 <z_arm_exc_exit>
}
   1256e:	bd08      	pop	{r3, pc}

00012570 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   12570:	b508      	push	{r3, lr}
   12572:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   12574:	4601      	mov	r1, r0
   12576:	4618      	mov	r0, r3
   12578:	f7ff ffd9 	bl	1252e <__cxa_atexit>
}
   1257c:	bd08      	pop	{r3, pc}

0001257e <memory_fault_recoverable>:
}
   1257e:	2000      	movs	r0, #0
   12580:	4770      	bx	lr

00012582 <debug_monitor>:
	*recoverable = false;
   12582:	2300      	movs	r3, #0
   12584:	700b      	strb	r3, [r1, #0]
}
   12586:	4770      	bx	lr

00012588 <fault_handle>:
{
   12588:	b508      	push	{r3, lr}
	*recoverable = false;
   1258a:	2300      	movs	r3, #0
   1258c:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1258e:	1ecb      	subs	r3, r1, #3
   12590:	2b09      	cmp	r3, #9
   12592:	d81a      	bhi.n	125ca <fault_handle+0x42>
   12594:	e8df f003 	tbb	[pc, r3]
   12598:	110d0905 	.word	0x110d0905
   1259c:	19191919 	.word	0x19191919
   125a0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   125a2:	4611      	mov	r1, r2
   125a4:	f7f1 ff5c 	bl	4460 <hard_fault>
		break;
   125a8:	e010      	b.n	125cc <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   125aa:	2100      	movs	r1, #0
   125ac:	f7f1 ff12 	bl	43d4 <mem_manage_fault>
		break;
   125b0:	e00c      	b.n	125cc <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   125b2:	2100      	movs	r1, #0
   125b4:	f7f1 fed2 	bl	435c <bus_fault>
		break;
   125b8:	e008      	b.n	125cc <fault_handle+0x44>
		reason = usage_fault(esf);
   125ba:	f7f1 fef9 	bl	43b0 <usage_fault>
		break;
   125be:	e005      	b.n	125cc <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   125c0:	4611      	mov	r1, r2
   125c2:	f7ff ffde 	bl	12582 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   125c6:	2000      	movs	r0, #0
		break;
   125c8:	e000      	b.n	125cc <fault_handle+0x44>
	*recoverable = false;
   125ca:	2000      	movs	r0, #0
}
   125cc:	bd08      	pop	{r3, pc}

000125ce <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   125ce:	6843      	ldr	r3, [r0, #4]
   125d0:	1e5a      	subs	r2, r3, #1
		&&
   125d2:	4213      	tst	r3, r2
   125d4:	d106      	bne.n	125e4 <mpu_partition_is_valid+0x16>
		&&
   125d6:	2b1f      	cmp	r3, #31
   125d8:	d906      	bls.n	125e8 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   125da:	6803      	ldr	r3, [r0, #0]
		&&
   125dc:	421a      	tst	r2, r3
   125de:	d005      	beq.n	125ec <mpu_partition_is_valid+0x1e>
   125e0:	2000      	movs	r0, #0
   125e2:	4770      	bx	lr
   125e4:	2000      	movs	r0, #0
   125e6:	4770      	bx	lr
   125e8:	2000      	movs	r0, #0
   125ea:	4770      	bx	lr
   125ec:	2001      	movs	r0, #1
}
   125ee:	4770      	bx	lr

000125f0 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   125f0:	2807      	cmp	r0, #7
   125f2:	d805      	bhi.n	12600 <region_allocate_and_init+0x10>
{
   125f4:	b510      	push	{r4, lr}
   125f6:	4604      	mov	r4, r0
	region_init(index, region_conf);
   125f8:	f7f2 f88a 	bl	4710 <region_init>
	return index;
   125fc:	4620      	mov	r0, r4
}
   125fe:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12600:	f06f 0015 	mvn.w	r0, #21
}
   12604:	4770      	bx	lr

00012606 <mpu_configure_region>:
{
   12606:	b500      	push	{lr}
   12608:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1260a:	680b      	ldr	r3, [r1, #0]
   1260c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1260e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12610:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   12612:	2b20      	cmp	r3, #32
   12614:	d912      	bls.n	1263c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   12616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1261a:	d811      	bhi.n	12640 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1261c:	3b01      	subs	r3, #1
   1261e:	fab3 f383 	clz	r3, r3
   12622:	f1c3 031f 	rsb	r3, r3, #31
   12626:	005b      	lsls	r3, r3, #1
   12628:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1262c:	4313      	orrs	r3, r2
   1262e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   12630:	a901      	add	r1, sp, #4
   12632:	f7ff ffdd 	bl	125f0 <region_allocate_and_init>
}
   12636:	b005      	add	sp, #20
   12638:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   1263c:	2308      	movs	r3, #8
   1263e:	e7f5      	b.n	1262c <mpu_configure_region+0x26>
		return REGION_4G;
   12640:	233e      	movs	r3, #62	; 0x3e
   12642:	e7f3      	b.n	1262c <mpu_configure_region+0x26>

00012644 <mpu_configure_regions>:
{
   12644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12648:	4680      	mov	r8, r0
   1264a:	460f      	mov	r7, r1
   1264c:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   1264e:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   12650:	2500      	movs	r5, #0
   12652:	e009      	b.n	12668 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12654:	4621      	mov	r1, r4
   12656:	b2f0      	uxtb	r0, r6
   12658:	f7ff ffd5 	bl	12606 <mpu_configure_region>
   1265c:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   1265e:	f110 0f16 	cmn.w	r0, #22
   12662:	d014      	beq.n	1268e <mpu_configure_regions+0x4a>
		reg_index++;
   12664:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   12666:	3501      	adds	r5, #1
   12668:	42bd      	cmp	r5, r7
   1266a:	da10      	bge.n	1268e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   1266c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   12670:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   12674:	6862      	ldr	r2, [r4, #4]
   12676:	2a00      	cmp	r2, #0
   12678:	d0f5      	beq.n	12666 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   1267a:	f1b9 0f00 	cmp.w	r9, #0
   1267e:	d0e9      	beq.n	12654 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   12680:	4620      	mov	r0, r4
   12682:	f7ff ffa4 	bl	125ce <mpu_partition_is_valid>
		if (do_sanity_check &&
   12686:	2800      	cmp	r0, #0
   12688:	d1e4      	bne.n	12654 <mpu_configure_regions+0x10>
			return -EINVAL;
   1268a:	f06f 0615 	mvn.w	r6, #21
}
   1268e:	4630      	mov	r0, r6
   12690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012694 <arm_core_mpu_configure_static_mpu_regions>:
{
   12694:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   12696:	f7f2 f84b 	bl	4730 <mpu_configure_static_mpu_regions>
}
   1269a:	bd08      	pop	{r3, pc}

0001269c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   1269c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1269e:	f7f2 f851 	bl	4744 <mpu_configure_dynamic_mpu_regions>
}
   126a2:	bd08      	pop	{r3, pc}

000126a4 <malloc_prepare>:
}
   126a4:	2000      	movs	r0, #0
   126a6:	4770      	bx	lr

000126a8 <_stdout_hook_default>:
}
   126a8:	f04f 30ff 	mov.w	r0, #4294967295
   126ac:	4770      	bx	lr

000126ae <_stdin_hook_default>:
}
   126ae:	2000      	movs	r0, #0
   126b0:	4770      	bx	lr

000126b2 <_read>:
{
   126b2:	b508      	push	{r3, lr}
   126b4:	4608      	mov	r0, r1
   126b6:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   126b8:	f7f2 f896 	bl	47e8 <z_impl_zephyr_read_stdin>
}
   126bc:	bd08      	pop	{r3, pc}

000126be <_write>:
{
   126be:	b508      	push	{r3, lr}
   126c0:	4608      	mov	r0, r1
   126c2:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   126c4:	f7f2 f8a6 	bl	4814 <z_impl_zephyr_write_stdout>
}
   126c8:	bd08      	pop	{r3, pc}

000126ca <_close>:
}
   126ca:	f04f 30ff 	mov.w	r0, #4294967295
   126ce:	4770      	bx	lr

000126d0 <_lseek>:
}
   126d0:	2000      	movs	r0, #0
   126d2:	4770      	bx	lr

000126d4 <_isatty>:
}
   126d4:	2802      	cmp	r0, #2
   126d6:	bfcc      	ite	gt
   126d8:	2000      	movgt	r0, #0
   126da:	2001      	movle	r0, #1
   126dc:	4770      	bx	lr

000126de <_kill>:
}
   126de:	2000      	movs	r0, #0
   126e0:	4770      	bx	lr

000126e2 <_getpid>:
}
   126e2:	2000      	movs	r0, #0
   126e4:	4770      	bx	lr

000126e6 <_fstat>:
	st->st_mode = S_IFCHR;
   126e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   126ea:	604b      	str	r3, [r1, #4]
}
   126ec:	2000      	movs	r0, #0
   126ee:	4770      	bx	lr

000126f0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   126f0:	b510      	push	{r4, lr}
   126f2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   126f4:	2014      	movs	r0, #20
   126f6:	f7fe f893 	bl	10820 <malloc>
   126fa:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   126fc:	f003 fab0 	bl	15c60 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   12700:	bd10      	pop	{r4, pc}

00012702 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   12702:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   12704:	f04f 32ff 	mov.w	r2, #4294967295
   12708:	f04f 33ff 	mov.w	r3, #4294967295
   1270c:	f7fc fd9e 	bl	f24c <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   12710:	bd08      	pop	{r3, pc}

00012712 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   12712:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   12714:	f7fc fe24 	bl	f360 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   12718:	bd08      	pop	{r3, pc}

0001271a <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   1271a:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1271c:	f7fc fb60 	bl	ede0 <z_impl_z_errno>
	return z_errno();
}
   12720:	bd08      	pop	{r3, pc}

00012722 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   12722:	b084      	sub	sp, #16
   12724:	ab04      	add	r3, sp, #16
   12726:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1272a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1272e:	2b06      	cmp	r3, #6
   12730:	d001      	beq.n	12736 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   12732:	b004      	add	sp, #16
   12734:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   12736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1273a:	2201      	movs	r2, #1
   1273c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   12740:	f3bf 8f4f 	dsb	sy
        __WFE();
   12744:	bf20      	wfe
    while (true)
   12746:	e7fd      	b.n	12744 <pm_power_state_set+0x22>

00012748 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   12748:	b084      	sub	sp, #16
   1274a:	ab04      	add	r3, sp, #16
   1274c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   12750:	2300      	movs	r3, #0
   12752:	f383 8811 	msr	BASEPRI, r3
   12756:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1275a:	b004      	add	sp, #16
   1275c:	4770      	bx	lr

0001275e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1275e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   12760:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   12764:	0089      	lsls	r1, r1, #2
   12766:	3140      	adds	r1, #64	; 0x40
}
   12768:	4408      	add	r0, r1
   1276a:	4770      	bx	lr

0001276c <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1276c:	6840      	ldr	r0, [r0, #4]
}
   1276e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   12772:	4770      	bx	lr

00012774 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   12774:	6900      	ldr	r0, [r0, #16]
}
   12776:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   1277a:	4770      	bx	lr

0001277c <get_status>:
{
   1277c:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1277e:	b2c9      	uxtb	r1, r1
   12780:	f7ff ffed 	bl	1275e <get_sub_data>
   12784:	6880      	ldr	r0, [r0, #8]
}
   12786:	f000 0007 	and.w	r0, r0, #7
   1278a:	bd08      	pop	{r3, pc}

0001278c <set_off_state>:
	__asm__ volatile(
   1278c:	f04f 0320 	mov.w	r3, #32
   12790:	f3ef 8211 	mrs	r2, BASEPRI
   12794:	f383 8812 	msr	BASEPRI_MAX, r3
   12798:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1279c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1279e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   127a2:	d001      	beq.n	127a8 <set_off_state+0x1c>
   127a4:	428b      	cmp	r3, r1
   127a6:	d107      	bne.n	127b8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   127a8:	2301      	movs	r3, #1
   127aa:	6003      	str	r3, [r0, #0]
	int err = 0;
   127ac:	2000      	movs	r0, #0
	__asm__ volatile(
   127ae:	f382 8811 	msr	BASEPRI, r2
   127b2:	f3bf 8f6f 	isb	sy
}
   127b6:	4770      	bx	lr
		err = -EPERM;
   127b8:	f04f 30ff 	mov.w	r0, #4294967295
   127bc:	e7f7      	b.n	127ae <set_off_state+0x22>

000127be <set_starting_state>:
{
   127be:	b410      	push	{r4}
	__asm__ volatile(
   127c0:	f04f 0320 	mov.w	r3, #32
   127c4:	f3ef 8211 	mrs	r2, BASEPRI
   127c8:	f383 8812 	msr	BASEPRI_MAX, r3
   127cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   127d0:	6803      	ldr	r3, [r0, #0]
   127d2:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   127d6:	f003 0307 	and.w	r3, r3, #7
   127da:	2b01      	cmp	r3, #1
   127dc:	d009      	beq.n	127f2 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   127de:	428c      	cmp	r4, r1
   127e0:	d00a      	beq.n	127f8 <set_starting_state+0x3a>
		err = -EPERM;
   127e2:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   127e6:	f382 8811 	msr	BASEPRI, r2
   127ea:	f3bf 8f6f 	isb	sy
}
   127ee:	bc10      	pop	{r4}
   127f0:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   127f2:	6001      	str	r1, [r0, #0]
	int err = 0;
   127f4:	2000      	movs	r0, #0
   127f6:	e7f6      	b.n	127e6 <set_starting_state+0x28>
		err = -EALREADY;
   127f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   127fc:	e7f3      	b.n	127e6 <set_starting_state+0x28>

000127fe <set_on_state>:
	__asm__ volatile(
   127fe:	f04f 0320 	mov.w	r3, #32
   12802:	f3ef 8211 	mrs	r2, BASEPRI
   12806:	f383 8812 	msr	BASEPRI_MAX, r3
   1280a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1280e:	6803      	ldr	r3, [r0, #0]
   12810:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12814:	f043 0302 	orr.w	r3, r3, #2
   12818:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1281a:	f382 8811 	msr	BASEPRI, r2
   1281e:	f3bf 8f6f 	isb	sy
}
   12822:	4770      	bx	lr

00012824 <clkstarted_handle>:
{
   12824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12826:	4606      	mov	r6, r0
   12828:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1282a:	f7ff ff98 	bl	1275e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1282e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   12830:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   12832:	2300      	movs	r3, #0
   12834:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   12838:	f7ff ffe1 	bl	127fe <set_on_state>
	if (callback) {
   1283c:	b11d      	cbz	r5, 12846 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1283e:	463a      	mov	r2, r7
   12840:	4621      	mov	r1, r4
   12842:	4630      	mov	r0, r6
   12844:	47a8      	blx	r5
}
   12846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012848 <stop>:
{
   12848:	b570      	push	{r4, r5, r6, lr}
   1284a:	4606      	mov	r6, r0
   1284c:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1284e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   12850:	4621      	mov	r1, r4
   12852:	f7ff ff84 	bl	1275e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   12856:	4629      	mov	r1, r5
   12858:	3008      	adds	r0, #8
   1285a:	f7ff ff97 	bl	1278c <set_off_state>
	if (err < 0) {
   1285e:	2800      	cmp	r0, #0
   12860:	db06      	blt.n	12870 <stop+0x28>
	get_sub_config(dev, type)->stop();
   12862:	4621      	mov	r1, r4
   12864:	4630      	mov	r0, r6
   12866:	f7ff ff81 	bl	1276c <get_sub_config>
   1286a:	6843      	ldr	r3, [r0, #4]
   1286c:	4798      	blx	r3
	return 0;
   1286e:	2000      	movs	r0, #0
}
   12870:	bd70      	pop	{r4, r5, r6, pc}

00012872 <api_stop>:
{
   12872:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   12874:	2280      	movs	r2, #128	; 0x80
   12876:	f7ff ffe7 	bl	12848 <stop>
}
   1287a:	bd08      	pop	{r3, pc}

0001287c <async_start>:
{
   1287c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12880:	4606      	mov	r6, r0
   12882:	4690      	mov	r8, r2
   12884:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   12886:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   12888:	4629      	mov	r1, r5
   1288a:	f7ff ff68 	bl	1275e <get_sub_data>
   1288e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   12890:	9906      	ldr	r1, [sp, #24]
   12892:	3008      	adds	r0, #8
   12894:	f7ff ff93 	bl	127be <set_starting_state>
	if (err < 0) {
   12898:	2800      	cmp	r0, #0
   1289a:	db09      	blt.n	128b0 <async_start+0x34>
	subdata->cb = cb;
   1289c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   128a0:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   128a2:	4629      	mov	r1, r5
   128a4:	4630      	mov	r0, r6
   128a6:	f7ff ff61 	bl	1276c <get_sub_config>
   128aa:	6803      	ldr	r3, [r0, #0]
   128ac:	4798      	blx	r3
	return 0;
   128ae:	2000      	movs	r0, #0
}
   128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000128b4 <api_start>:
{
   128b4:	b510      	push	{r4, lr}
   128b6:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   128b8:	2480      	movs	r4, #128	; 0x80
   128ba:	9400      	str	r4, [sp, #0]
   128bc:	f7ff ffde 	bl	1287c <async_start>
}
   128c0:	b002      	add	sp, #8
   128c2:	bd10      	pop	{r4, pc}

000128c4 <onoff_started_callback>:
{
   128c4:	b510      	push	{r4, lr}
   128c6:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   128c8:	b2c9      	uxtb	r1, r1
   128ca:	f7ff ff53 	bl	12774 <get_onoff_manager>
	notify(mgr, 0);
   128ce:	2100      	movs	r1, #0
   128d0:	47a0      	blx	r4
}
   128d2:	bd10      	pop	{r4, pc}

000128d4 <hfclk_start>:
{
   128d4:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   128d6:	2001      	movs	r0, #1
   128d8:	f7f3 fa50 	bl	5d7c <nrfx_clock_start>
}
   128dc:	bd08      	pop	{r3, pc}

000128de <lfclk_start>:
{
   128de:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   128e0:	2000      	movs	r0, #0
   128e2:	f7f3 fa4b 	bl	5d7c <nrfx_clock_start>
}
   128e6:	bd08      	pop	{r3, pc}

000128e8 <hfclk_stop>:
{
   128e8:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   128ea:	2001      	movs	r0, #1
   128ec:	f7f3 fa7e 	bl	5dec <nrfx_clock_stop>
}
   128f0:	bd08      	pop	{r3, pc}

000128f2 <lfclk_stop>:
{
   128f2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   128f4:	2000      	movs	r0, #0
   128f6:	f7f3 fa79 	bl	5dec <nrfx_clock_stop>
}
   128fa:	bd08      	pop	{r3, pc}

000128fc <blocking_start_callback>:
{
   128fc:	b508      	push	{r3, lr}
   128fe:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   12900:	f7fc fd72 	bl	f3e8 <z_impl_k_sem_give>
}
   12904:	bd08      	pop	{r3, pc}

00012906 <debug_hook_out_nop>:
}
   12906:	2000      	movs	r0, #0
   12908:	4770      	bx	lr

0001290a <gpio_nrfx_port_get_raw>:
	return port->config;
   1290a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1290c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1290e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   12912:	600b      	str	r3, [r1, #0]
}
   12914:	2000      	movs	r0, #0
   12916:	4770      	bx	lr

00012918 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   12918:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1291a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1291c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   12920:	4042      	eors	r2, r0
   12922:	400a      	ands	r2, r1
   12924:	4042      	eors	r2, r0
    p_reg->OUT = value;
   12926:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1292a:	2000      	movs	r0, #0
   1292c:	4770      	bx	lr

0001292e <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1292e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12930:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   12932:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   12936:	2000      	movs	r0, #0
   12938:	4770      	bx	lr

0001293a <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1293a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1293c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1293e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   12942:	2000      	movs	r0, #0
   12944:	4770      	bx	lr

00012946 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   12946:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12948:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1294a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1294e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   12950:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   12954:	2000      	movs	r0, #0
   12956:	4770      	bx	lr

00012958 <gpio_nrfx_manage_callback>:
{
   12958:	b470      	push	{r4, r5, r6}
	return port->data;
   1295a:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1295c:	1d05      	adds	r5, r0, #4
	return list->head;
   1295e:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   12960:	b1db      	cbz	r3, 1299a <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   12962:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12964:	2400      	movs	r4, #0
   12966:	e00a      	b.n	1297e <gpio_nrfx_manage_callback+0x26>
	return node->next;
   12968:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1296a:	6043      	str	r3, [r0, #4]
	return list->tail;
   1296c:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1296e:	42a1      	cmp	r1, r4
   12970:	d10f      	bne.n	12992 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   12972:	606b      	str	r3, [r5, #4]
}
   12974:	e00d      	b.n	12992 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   12976:	606c      	str	r4, [r5, #4]
}
   12978:	e00b      	b.n	12992 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1297a:	461c      	mov	r4, r3
   1297c:	681b      	ldr	r3, [r3, #0]
   1297e:	b15b      	cbz	r3, 12998 <gpio_nrfx_manage_callback+0x40>
   12980:	429e      	cmp	r6, r3
   12982:	d1fa      	bne.n	1297a <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   12984:	2c00      	cmp	r4, #0
   12986:	d0ef      	beq.n	12968 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   12988:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1298a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1298c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1298e:	4299      	cmp	r1, r3
   12990:	d0f1      	beq.n	12976 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   12992:	2300      	movs	r3, #0
   12994:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12996:	e000      	b.n	1299a <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   12998:	b152      	cbz	r2, 129b0 <gpio_nrfx_manage_callback+0x58>
	if (set) {
   1299a:	b162      	cbz	r2, 129b6 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   1299c:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   1299e:	600b      	str	r3, [r1, #0]
	list->head = node;
   129a0:	6041      	str	r1, [r0, #4]
	return list->tail;
   129a2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   129a4:	b10b      	cbz	r3, 129aa <gpio_nrfx_manage_callback+0x52>
	return 0;
   129a6:	2000      	movs	r0, #0
   129a8:	e006      	b.n	129b8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   129aa:	6069      	str	r1, [r5, #4]
   129ac:	2000      	movs	r0, #0
}
   129ae:	e003      	b.n	129b8 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   129b0:	f06f 0015 	mvn.w	r0, #21
   129b4:	e000      	b.n	129b8 <gpio_nrfx_manage_callback+0x60>
	return 0;
   129b6:	2000      	movs	r0, #0
}
   129b8:	bc70      	pop	{r4, r5, r6}
   129ba:	4770      	bx	lr

000129bc <endtx_isr>:
	return dev->config;
   129bc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   129be:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   129c0:	f04f 0120 	mov.w	r1, #32
   129c4:	f3ef 8211 	mrs	r2, BASEPRI
   129c8:	f381 8812 	msr	BASEPRI_MAX, r1
   129cc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   129d0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   129d4:	b131      	cbz	r1, 129e4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   129d6:	2100      	movs	r1, #0
   129d8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   129dc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   129e0:	2101      	movs	r1, #1
   129e2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   129e4:	f382 8811 	msr	BASEPRI, r2
   129e8:	f3bf 8f6f 	isb	sy
}
   129ec:	4770      	bx	lr

000129ee <uarte_nrfx_isr_int>:
{
   129ee:	b538      	push	{r3, r4, r5, lr}
   129f0:	4604      	mov	r4, r0
	return dev->config;
   129f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   129f4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   129f6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   129fa:	f413 7f80 	tst.w	r3, #256	; 0x100
   129fe:	d003      	beq.n	12a08 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a00:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   12a04:	2b00      	cmp	r3, #0
   12a06:	d139      	bne.n	12a7c <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   12a08:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12a0a:	685b      	ldr	r3, [r3, #4]
   12a0c:	f013 0f10 	tst.w	r3, #16
   12a10:	d01a      	beq.n	12a48 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   12a12:	f04f 0320 	mov.w	r3, #32
   12a16:	f3ef 8211 	mrs	r2, BASEPRI
   12a1a:	f383 8812 	msr	BASEPRI_MAX, r3
   12a1e:	f3bf 8f6f 	isb	sy
   12a22:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12a26:	b113      	cbz	r3, 12a2e <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12a28:	2300      	movs	r3, #0
   12a2a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   12a2e:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   12a30:	68db      	ldr	r3, [r3, #12]
   12a32:	b10b      	cbz	r3, 12a38 <uarte_nrfx_isr_int+0x4a>
   12a34:	691b      	ldr	r3, [r3, #16]
   12a36:	b91b      	cbnz	r3, 12a40 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   12a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   12a3c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   12a40:	f382 8811 	msr	BASEPRI, r2
   12a44:	f3bf 8f6f 	isb	sy
	return dev->data;
   12a48:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   12a4a:	68da      	ldr	r2, [r3, #12]
   12a4c:	b1aa      	cbz	r2, 12a7a <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a4e:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12a52:	b121      	cbz	r1, 12a5e <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   12a54:	2100      	movs	r1, #0
   12a56:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   12a58:	68da      	ldr	r2, [r3, #12]
   12a5a:	7b92      	ldrb	r2, [r2, #14]
   12a5c:	b98a      	cbnz	r2, 12a82 <uarte_nrfx_isr_int+0x94>
   12a5e:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   12a62:	b122      	cbz	r2, 12a6e <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12a64:	2200      	movs	r2, #0
   12a66:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   12a6a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   12a6e:	68da      	ldr	r2, [r3, #12]
   12a70:	6813      	ldr	r3, [r2, #0]
   12a72:	b113      	cbz	r3, 12a7a <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   12a74:	6851      	ldr	r1, [r2, #4]
   12a76:	4620      	mov	r0, r4
   12a78:	4798      	blx	r3
}
   12a7a:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   12a7c:	f7ff ff9e 	bl	129bc <endtx_isr>
   12a80:	e7c2      	b.n	12a08 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   12a82:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   12a86:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   12a8a:	68db      	ldr	r3, [r3, #12]
   12a8c:	7399      	strb	r1, [r3, #14]
			return;
   12a8e:	e7f4      	b.n	12a7a <uarte_nrfx_isr_int+0x8c>

00012a90 <uarte_nrfx_configure>:
{
   12a90:	b570      	push	{r4, r5, r6, lr}
   12a92:	b082      	sub	sp, #8
   12a94:	4605      	mov	r5, r0
   12a96:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   12a98:	794b      	ldrb	r3, [r1, #5]
   12a9a:	2b01      	cmp	r3, #1
   12a9c:	d006      	beq.n	12aac <uarte_nrfx_configure+0x1c>
   12a9e:	2b03      	cmp	r3, #3
   12aa0:	d011      	beq.n	12ac6 <uarte_nrfx_configure+0x36>
   12aa2:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   12aa6:	4618      	mov	r0, r3
   12aa8:	b002      	add	sp, #8
   12aaa:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   12aac:	2300      	movs	r3, #0
   12aae:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12ab2:	79a3      	ldrb	r3, [r4, #6]
   12ab4:	2b03      	cmp	r3, #3
   12ab6:	d140      	bne.n	12b3a <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   12ab8:	79e3      	ldrb	r3, [r4, #7]
   12aba:	b143      	cbz	r3, 12ace <uarte_nrfx_configure+0x3e>
   12abc:	2b01      	cmp	r3, #1
   12abe:	d010      	beq.n	12ae2 <uarte_nrfx_configure+0x52>
   12ac0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   12ac4:	e7ef      	b.n	12aa6 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12ac6:	2310      	movs	r3, #16
   12ac8:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   12acc:	e7f1      	b.n	12ab2 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   12ace:	2300      	movs	r3, #0
   12ad0:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   12ad4:	7923      	ldrb	r3, [r4, #4]
   12ad6:	b183      	cbz	r3, 12afa <uarte_nrfx_configure+0x6a>
   12ad8:	2b02      	cmp	r3, #2
   12ada:	d02a      	beq.n	12b32 <uarte_nrfx_configure+0xa2>
   12adc:	f06f 0385 	mvn.w	r3, #133	; 0x85
   12ae0:	e7e1      	b.n	12aa6 <uarte_nrfx_configure+0x16>
	return dev->config;
   12ae2:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   12ae4:	685b      	ldr	r3, [r3, #4]
   12ae6:	f003 0201 	and.w	r2, r3, #1
   12aea:	f003 0302 	and.w	r3, r3, #2
   12aee:	4313      	orrs	r3, r2
   12af0:	d026      	beq.n	12b40 <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   12af2:	2301      	movs	r3, #1
   12af4:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   12af8:	e7ec      	b.n	12ad4 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   12afa:	2300      	movs	r3, #0
   12afc:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12b00:	6821      	ldr	r1, [r4, #0]
   12b02:	4628      	mov	r0, r5
   12b04:	f7f2 fba2 	bl	524c <baudrate_set>
   12b08:	4603      	mov	r3, r0
   12b0a:	b9e0      	cbnz	r0, 12b46 <uarte_nrfx_configure+0xb6>
	return dev->config;
   12b0c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   12b0e:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12b10:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   12b14:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   12b18:	f89d 2004 	ldrb.w	r2, [sp, #4]
   12b1c:	4331      	orrs	r1, r6
   12b1e:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12b20:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   12b24:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   12b26:	3204      	adds	r2, #4
   12b28:	e894 0003 	ldmia.w	r4, {r0, r1}
   12b2c:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   12b30:	e7b9      	b.n	12aa6 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12b32:	230e      	movs	r3, #14
   12b34:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   12b38:	e7e2      	b.n	12b00 <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   12b3a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   12b3e:	e7b2      	b.n	12aa6 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   12b40:	f06f 0385 	mvn.w	r3, #133	; 0x85
   12b44:	e7af      	b.n	12aa6 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   12b46:	f06f 0385 	mvn.w	r3, #133	; 0x85
   12b4a:	e7ac      	b.n	12aa6 <uarte_nrfx_configure+0x16>

00012b4c <uarte_nrfx_config_get>:
{
   12b4c:	460b      	mov	r3, r1
	return dev->data;
   12b4e:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   12b50:	6891      	ldr	r1, [r2, #8]
   12b52:	6850      	ldr	r0, [r2, #4]
   12b54:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12b58:	2000      	movs	r0, #0
   12b5a:	4770      	bx	lr

00012b5c <uarte_nrfx_err_check>:
	return dev->config;
   12b5c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12b5e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12b60:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12b64:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12b68:	4770      	bx	lr

00012b6a <is_tx_ready>:
	return dev->config;
   12b6a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12b6c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12b6e:	685b      	ldr	r3, [r3, #4]
   12b70:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12b74:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12b78:	b929      	cbnz	r1, 12b86 <is_tx_ready+0x1c>
   12b7a:	b933      	cbnz	r3, 12b8a <is_tx_ready+0x20>
   12b7c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   12b80:	b92b      	cbnz	r3, 12b8e <is_tx_ready+0x24>
   12b82:	2000      	movs	r0, #0
   12b84:	4770      	bx	lr
   12b86:	2001      	movs	r0, #1
   12b88:	4770      	bx	lr
   12b8a:	2000      	movs	r0, #0
   12b8c:	4770      	bx	lr
   12b8e:	2001      	movs	r0, #1
}
   12b90:	4770      	bx	lr

00012b92 <uarte_enable>:
	return dev->config;
   12b92:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12b94:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12b96:	2208      	movs	r2, #8
   12b98:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   12b9c:	4770      	bx	lr

00012b9e <tx_start>:
{
   12b9e:	b510      	push	{r4, lr}
	return dev->config;
   12ba0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12ba2:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12ba4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12ba8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12bac:	2300      	movs	r3, #0
   12bae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12bb2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   12bb6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   12bba:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   12bbe:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12bc0:	685b      	ldr	r3, [r3, #4]
   12bc2:	f013 0f10 	tst.w	r3, #16
   12bc6:	d102      	bne.n	12bce <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12bc8:	2301      	movs	r3, #1
   12bca:	60a3      	str	r3, [r4, #8]
}
   12bcc:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   12bce:	2101      	movs	r1, #1
   12bd0:	f7ff ffdf 	bl	12b92 <uarte_enable>
    p_reg->INTENSET = mask;
   12bd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   12bd8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   12bdc:	e7f4      	b.n	12bc8 <tx_start+0x2a>

00012bde <uarte_nrfx_poll_in>:
{
   12bde:	b410      	push	{r4}
	return dev->data;
   12be0:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   12be2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12be4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12be6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12bea:	b152      	cbz	r2, 12c02 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   12bec:	7d62      	ldrb	r2, [r4, #21]
   12bee:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12bf0:	2000      	movs	r0, #0
   12bf2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12bf6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12bfa:	2201      	movs	r2, #1
   12bfc:	601a      	str	r2, [r3, #0]
}
   12bfe:	bc10      	pop	{r4}
   12c00:	4770      	bx	lr
		return -1;
   12c02:	f04f 30ff 	mov.w	r0, #4294967295
   12c06:	e7fa      	b.n	12bfe <uarte_nrfx_poll_in+0x20>

00012c08 <uarte_nrfx_fifo_fill>:
{
   12c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c0c:	4680      	mov	r8, r0
	return dev->data;
   12c0e:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   12c10:	68fb      	ldr	r3, [r7, #12]
   12c12:	899e      	ldrh	r6, [r3, #12]
   12c14:	4296      	cmp	r6, r2
   12c16:	bfa8      	it	ge
   12c18:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   12c1a:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12c1c:	2201      	movs	r2, #1
   12c1e:	f3bf 8f5b 	dmb	ish
   12c22:	e853 0f00 	ldrex	r0, [r3]
   12c26:	2800      	cmp	r0, #0
   12c28:	d103      	bne.n	12c32 <uarte_nrfx_fifo_fill+0x2a>
   12c2a:	e843 2400 	strex	r4, r2, [r3]
   12c2e:	2c00      	cmp	r4, #0
   12c30:	d1f7      	bne.n	12c22 <uarte_nrfx_fifo_fill+0x1a>
   12c32:	f3bf 8f5b 	dmb	ish
   12c36:	d101      	bne.n	12c3c <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   12c38:	2300      	movs	r3, #0
   12c3a:	e006      	b.n	12c4a <uarte_nrfx_fifo_fill+0x42>
		return 0;
   12c3c:	2600      	movs	r6, #0
   12c3e:	e019      	b.n	12c74 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   12c40:	68fc      	ldr	r4, [r7, #12]
   12c42:	68a4      	ldr	r4, [r4, #8]
   12c44:	5ccd      	ldrb	r5, [r1, r3]
   12c46:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   12c48:	3301      	adds	r3, #1
   12c4a:	42b3      	cmp	r3, r6
   12c4c:	dbf8      	blt.n	12c40 <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   12c4e:	f04f 0320 	mov.w	r3, #32
   12c52:	f3ef 8411 	mrs	r4, BASEPRI
   12c56:	f383 8812 	msr	BASEPRI_MAX, r3
   12c5a:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   12c5e:	4640      	mov	r0, r8
   12c60:	f7ff ff83 	bl	12b6a <is_tx_ready>
   12c64:	b948      	cbnz	r0, 12c7a <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   12c66:	68fb      	ldr	r3, [r7, #12]
   12c68:	2600      	movs	r6, #0
   12c6a:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   12c6c:	f384 8811 	msr	BASEPRI, r4
   12c70:	f3bf 8f6f 	isb	sy
}
   12c74:	4630      	mov	r0, r6
   12c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   12c7a:	68fb      	ldr	r3, [r7, #12]
   12c7c:	4632      	mov	r2, r6
   12c7e:	6899      	ldr	r1, [r3, #8]
   12c80:	4640      	mov	r0, r8
   12c82:	f7ff ff8c 	bl	12b9e <tx_start>
   12c86:	e7f1      	b.n	12c6c <uarte_nrfx_fifo_fill+0x64>

00012c88 <uarte_nrfx_fifo_read>:
	return dev->config;
   12c88:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12c8a:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   12c8c:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12c8e:	2a00      	cmp	r2, #0
   12c90:	dd0c      	ble.n	12cac <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12c92:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12c96:	b15a      	cbz	r2, 12cb0 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12c98:	2200      	movs	r2, #0
   12c9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12c9e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   12ca2:	7d42      	ldrb	r2, [r0, #21]
   12ca4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12ca6:	2001      	movs	r0, #1
   12ca8:	6018      	str	r0, [r3, #0]
}
   12caa:	4770      	bx	lr
	int num_rx = 0;
   12cac:	2000      	movs	r0, #0
   12cae:	4770      	bx	lr
   12cb0:	2000      	movs	r0, #0
}
   12cb2:	4770      	bx	lr

00012cb4 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   12cb4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12cb6:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   12cb8:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   12cba:	f04f 0020 	mov.w	r0, #32
   12cbe:	f3ef 8311 	mrs	r3, BASEPRI
   12cc2:	f380 8812 	msr	BASEPRI_MAX, r0
   12cc6:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   12cca:	68c9      	ldr	r1, [r1, #12]
   12ccc:	2000      	movs	r0, #0
   12cce:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   12cd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   12cd4:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   12cd8:	f383 8811 	msr	BASEPRI, r3
   12cdc:	f3bf 8f6f 	isb	sy
}
   12ce0:	4770      	bx	lr

00012ce2 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   12ce2:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   12ce4:	68db      	ldr	r3, [r3, #12]
   12ce6:	2201      	movs	r2, #1
   12ce8:	739a      	strb	r2, [r3, #14]
}
   12cea:	4770      	bx	lr

00012cec <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   12cec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12cee:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   12cf0:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   12cf2:	68db      	ldr	r3, [r3, #12]
   12cf4:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12cf6:	b94a      	cbnz	r2, 12d0c <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12cf8:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   12cfc:	b15a      	cbz	r2, 12d16 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   12cfe:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12d02:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   12d06:	d008      	beq.n	12d1a <uarte_nrfx_irq_tx_ready_complete+0x2e>
   12d08:	2001      	movs	r0, #1
   12d0a:	e000      	b.n	12d0e <uarte_nrfx_irq_tx_ready_complete+0x22>
   12d0c:	2000      	movs	r0, #0
	if (ready) {
   12d0e:	b108      	cbz	r0, 12d14 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   12d10:	2200      	movs	r2, #0
   12d12:	611a      	str	r2, [r3, #16]
}
   12d14:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12d16:	2000      	movs	r0, #0
   12d18:	e7f9      	b.n	12d0e <uarte_nrfx_irq_tx_ready_complete+0x22>
   12d1a:	2000      	movs	r0, #0
   12d1c:	e7f7      	b.n	12d0e <uarte_nrfx_irq_tx_ready_complete+0x22>

00012d1e <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   12d1e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d20:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d22:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   12d26:	3800      	subs	r0, #0
   12d28:	bf18      	it	ne
   12d2a:	2001      	movne	r0, #1
   12d2c:	4770      	bx	lr

00012d2e <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   12d2e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d30:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12d32:	2210      	movs	r2, #16
   12d34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12d38:	4770      	bx	lr

00012d3a <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   12d3a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d3c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12d3e:	2210      	movs	r2, #16
   12d40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12d44:	4770      	bx	lr

00012d46 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   12d46:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d48:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
   12d4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12d52:	4770      	bx	lr

00012d54 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   12d54:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d56:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12d58:	f44f 7200 	mov.w	r2, #512	; 0x200
   12d5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12d60:	4770      	bx	lr

00012d62 <uarte_nrfx_irq_is_pending>:
{
   12d62:	b538      	push	{r3, r4, r5, lr}
   12d64:	4604      	mov	r4, r0
	return dev->config;
   12d66:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d68:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   12d6a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   12d6e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   12d72:	d106      	bne.n	12d82 <uarte_nrfx_irq_is_pending+0x20>
   12d74:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   12d78:	f013 0f10 	tst.w	r3, #16
   12d7c:	d107      	bne.n	12d8e <uarte_nrfx_irq_is_pending+0x2c>
   12d7e:	2000      	movs	r0, #0
}
   12d80:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   12d82:	f7ff ffb3 	bl	12cec <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   12d86:	2800      	cmp	r0, #0
   12d88:	d0f4      	beq.n	12d74 <uarte_nrfx_irq_is_pending+0x12>
		||
   12d8a:	2001      	movs	r0, #1
   12d8c:	e7f8      	b.n	12d80 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   12d8e:	4620      	mov	r0, r4
   12d90:	f7ff ffc5 	bl	12d1e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   12d94:	2800      	cmp	r0, #0
   12d96:	d0f3      	beq.n	12d80 <uarte_nrfx_irq_is_pending+0x1e>
		||
   12d98:	2001      	movs	r0, #1
   12d9a:	e7f1      	b.n	12d80 <uarte_nrfx_irq_is_pending+0x1e>

00012d9c <uarte_nrfx_irq_update>:
}
   12d9c:	2001      	movs	r0, #1
   12d9e:	4770      	bx	lr

00012da0 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   12da0:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   12da2:	68d8      	ldr	r0, [r3, #12]
   12da4:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   12da6:	68db      	ldr	r3, [r3, #12]
   12da8:	605a      	str	r2, [r3, #4]
}
   12daa:	4770      	bx	lr

00012dac <wait_tx_ready>:
{
   12dac:	b570      	push	{r4, r5, r6, lr}
   12dae:	4606      	mov	r6, r0
   12db0:	e014      	b.n	12ddc <wait_tx_ready+0x30>
		if (res) {
   12db2:	b17d      	cbz	r5, 12dd4 <wait_tx_ready+0x28>
	__asm__ volatile(
   12db4:	f04f 0320 	mov.w	r3, #32
   12db8:	f3ef 8411 	mrs	r4, BASEPRI
   12dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   12dc0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   12dc4:	4630      	mov	r0, r6
   12dc6:	f7ff fed0 	bl	12b6a <is_tx_ready>
   12dca:	b9a0      	cbnz	r0, 12df6 <wait_tx_ready+0x4a>
	__asm__ volatile(
   12dcc:	f384 8811 	msr	BASEPRI, r4
   12dd0:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   12dd4:	2021      	movs	r0, #33	; 0x21
   12dd6:	2100      	movs	r1, #0
   12dd8:	f7fc fee6 	bl	fba8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12ddc:	2464      	movs	r4, #100	; 0x64
   12dde:	4630      	mov	r0, r6
   12de0:	f7ff fec3 	bl	12b6a <is_tx_ready>
   12de4:	4605      	mov	r5, r0
   12de6:	2800      	cmp	r0, #0
   12de8:	d1e3      	bne.n	12db2 <wait_tx_ready+0x6>
   12dea:	2001      	movs	r0, #1
   12dec:	f000 f8b0 	bl	12f50 <nrfx_busy_wait>
   12df0:	3c01      	subs	r4, #1
   12df2:	d1f4      	bne.n	12dde <wait_tx_ready+0x32>
   12df4:	e7dd      	b.n	12db2 <wait_tx_ready+0x6>
}
   12df6:	4620      	mov	r0, r4
   12df8:	bd70      	pop	{r4, r5, r6, pc}

00012dfa <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   12dfa:	b510      	push	{r4, lr}
   12dfc:	4604      	mov	r4, r0
   12dfe:	2200      	movs	r2, #0
   12e00:	2101      	movs	r1, #1
   12e02:	2002      	movs	r0, #2
   12e04:	f7f1 f988 	bl	4118 <z_arm_irq_priority_set>
   12e08:	2002      	movs	r0, #2
   12e0a:	f7f1 f967 	bl	40dc <arch_irq_enable>
   12e0e:	2101      	movs	r1, #1
   12e10:	4620      	mov	r0, r4
   12e12:	f7f2 fb1f 	bl	5454 <uarte_instance_init>
   12e16:	bd10      	pop	{r4, pc}

00012e18 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   12e18:	b510      	push	{r4, lr}
   12e1a:	4604      	mov	r4, r0
   12e1c:	2200      	movs	r2, #0
   12e1e:	2101      	movs	r1, #1
   12e20:	2028      	movs	r0, #40	; 0x28
   12e22:	f7f1 f979 	bl	4118 <z_arm_irq_priority_set>
   12e26:	2028      	movs	r0, #40	; 0x28
   12e28:	f7f1 f958 	bl	40dc <arch_irq_enable>
   12e2c:	2101      	movs	r1, #1
   12e2e:	4620      	mov	r0, r4
   12e30:	f7f2 fb10 	bl	5454 <uarte_instance_init>
   12e34:	bd10      	pop	{r4, pc}

00012e36 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   12e36:	4770      	bx	lr

00012e38 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   12e38:	4770      	bx	lr

00012e3a <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   12e3a:	4770      	bx	lr

00012e3c <counter_sub>:
	return (a - b) & COUNTER_MAX;
   12e3c:	1a40      	subs	r0, r0, r1
}
   12e3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12e42:	4770      	bx	lr

00012e44 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   12e44:	f100 0350 	add.w	r3, r0, #80	; 0x50
   12e48:	009b      	lsls	r3, r3, #2
   12e4a:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12e4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12e50:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   12e54:	2200      	movs	r2, #0
   12e56:	601a      	str	r2, [r3, #0]
   12e58:	681b      	ldr	r3, [r3, #0]
}
   12e5a:	4770      	bx	lr

00012e5c <absolute_time_to_cc>:
}
   12e5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12e60:	4770      	bx	lr

00012e62 <full_int_lock>:
	__asm__ volatile(
   12e62:	f04f 0320 	mov.w	r3, #32
   12e66:	f3ef 8011 	mrs	r0, BASEPRI
   12e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   12e6e:	f3bf 8f6f 	isb	sy
}
   12e72:	4770      	bx	lr

00012e74 <full_int_unlock>:
	__asm__ volatile(
   12e74:	f380 8811 	msr	BASEPRI, r0
   12e78:	f3bf 8f6f 	isb	sy
}
   12e7c:	4770      	bx	lr

00012e7e <set_absolute_alarm>:
{
   12e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e80:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   12e82:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   12e86:	f7f2 fbab 	bl	55e0 <get_comparator>
   12e8a:	4607      	mov	r7, r0
   12e8c:	e019      	b.n	12ec2 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   12e8e:	2013      	movs	r0, #19
   12e90:	f003 f872 	bl	15f78 <z_impl_k_busy_wait>
}
   12e94:	e022      	b.n	12edc <set_absolute_alarm+0x5e>
		event_clear(chan);
   12e96:	4630      	mov	r0, r6
   12e98:	f7ff ffd4 	bl	12e44 <event_clear>
		event_enable(chan);
   12e9c:	4630      	mov	r0, r6
   12e9e:	f7f2 fba7 	bl	55f0 <event_enable>
		set_comparator(chan, cc_val);
   12ea2:	4629      	mov	r1, r5
   12ea4:	4630      	mov	r0, r6
   12ea6:	f7f2 fb91 	bl	55cc <set_comparator>
		now2 = counter();
   12eaa:	f7f2 fbb5 	bl	5618 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12eae:	4284      	cmp	r4, r0
   12eb0:	d01e      	beq.n	12ef0 <set_absolute_alarm+0x72>
   12eb2:	1c81      	adds	r1, r0, #2
   12eb4:	4628      	mov	r0, r5
   12eb6:	f7ff ffc1 	bl	12e3c <counter_sub>
	} while ((now2 != now) &&
   12eba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12ebe:	d917      	bls.n	12ef0 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   12ec0:	462f      	mov	r7, r5
		now = counter();
   12ec2:	f7f2 fba9 	bl	5618 <counter>
   12ec6:	4604      	mov	r4, r0
		set_comparator(chan, now);
   12ec8:	4601      	mov	r1, r0
   12eca:	4630      	mov	r0, r6
   12ecc:	f7f2 fb7e 	bl	55cc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   12ed0:	4621      	mov	r1, r4
   12ed2:	4638      	mov	r0, r7
   12ed4:	f7ff ffb2 	bl	12e3c <counter_sub>
   12ed8:	2801      	cmp	r0, #1
   12eda:	d0d8      	beq.n	12e8e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   12edc:	1ca7      	adds	r7, r4, #2
   12ede:	4639      	mov	r1, r7
   12ee0:	4628      	mov	r0, r5
   12ee2:	f7ff ffab 	bl	12e3c <counter_sub>
   12ee6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12eea:	d9d4      	bls.n	12e96 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   12eec:	463d      	mov	r5, r7
   12eee:	e7d2      	b.n	12e96 <set_absolute_alarm+0x18>
}
   12ef0:	4628      	mov	r0, r5
   12ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012ef4 <compare_set>:
{
   12ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ef6:	b083      	sub	sp, #12
   12ef8:	4604      	mov	r4, r0
   12efa:	4617      	mov	r7, r2
   12efc:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   12efe:	f7f2 fb91 	bl	5624 <compare_int_lock>
   12f02:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   12f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12f06:	9301      	str	r3, [sp, #4]
   12f08:	9b08      	ldr	r3, [sp, #32]
   12f0a:	9300      	str	r3, [sp, #0]
   12f0c:	463a      	mov	r2, r7
   12f0e:	462b      	mov	r3, r5
   12f10:	4620      	mov	r0, r4
   12f12:	f7f2 fc75 	bl	5800 <compare_set_nolocks>
   12f16:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   12f18:	4631      	mov	r1, r6
   12f1a:	4620      	mov	r0, r4
   12f1c:	f7f2 fbe6 	bl	56ec <compare_int_unlock>
}
   12f20:	4628      	mov	r0, r5
   12f22:	b003      	add	sp, #12
   12f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012f26 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12f26:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   12f28:	2000      	movs	r0, #0
   12f2a:	f7f1 fcc5 	bl	48b8 <sys_arch_reboot>

00012f2e <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   12f2e:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   12f30:	f7fd f842 	bl	ffb8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   12f34:	bd08      	pop	{r3, pc}

00012f36 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   12f36:	b510      	push	{r4, lr}
   12f38:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   12f3a:	f7f0 ffdb 	bl	3ef4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   12f3e:	f7f1 f89b 	bl	4078 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   12f42:	4620      	mov	r0, r4
   12f44:	f7ff fff3 	bl	12f2e <hw_cc3xx_init_internal>
	return res;
}
   12f48:	bd10      	pop	{r4, pc}

00012f4a <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   12f4a:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   12f4c:	4780      	blx	r0
}
   12f4e:	bd08      	pop	{r3, pc}

00012f50 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   12f50:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   12f52:	f003 f811 	bl	15f78 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   12f56:	bd08      	pop	{r3, pc}

00012f58 <nrfx_clock_enable>:
{
   12f58:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   12f5a:	2000      	movs	r0, #0
   12f5c:	f7f1 f8ce 	bl	40fc <arch_irq_is_enabled>
   12f60:	b100      	cbz	r0, 12f64 <nrfx_clock_enable+0xc>
}
   12f62:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   12f64:	f7f1 f8ba 	bl	40dc <arch_irq_enable>
   12f68:	e7fb      	b.n	12f62 <nrfx_clock_enable+0xa>

00012f6a <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   12f6a:	2301      	movs	r3, #1
   12f6c:	4083      	lsls	r3, r0
   12f6e:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   12f72:	bf14      	ite	ne
   12f74:	2001      	movne	r0, #1
   12f76:	2000      	moveq	r0, #0
   12f78:	4770      	bx	lr

00012f7a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   12f7a:	b508      	push	{r3, lr}
  _DoInit();
   12f7c:	f7f3 f8c2 	bl	6104 <_DoInit>
}
   12f80:	bd08      	pop	{r3, pc}

00012f82 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   12f82:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   12f84:	f7ff fff9 	bl	12f7a <SEGGER_RTT_Init>

	return 0;
}
   12f88:	2000      	movs	r0, #0
   12f8a:	bd08      	pop	{r3, pc}

00012f8c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   12f8c:	4770      	bx	lr

00012f8e <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
   12f8e:	6903      	ldr	r3, [r0, #16]
   12f90:	6183      	str	r3, [r0, #24]
   12f92:	4770      	bx	lr

00012f94 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   12f94:	b510      	push	{r4, lr}
   12f96:	4604      	mov	r4, r0
   12f98:	f002 fffd 	bl	15f96 <_ZdlPv>
   12f9c:	4620      	mov	r0, r4
   12f9e:	bd10      	pop	{r4, pc}

00012fa0 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   12fa0:	b510      	push	{r4, lr}
   12fa2:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   12fa4:	4413      	add	r3, r2
   12fa6:	f7f3 f945 	bl	6234 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
   12faa:	4620      	mov	r0, r4
   12fac:	bd10      	pop	{r4, pc}

00012fae <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
   12fae:	6880      	ldr	r0, [r0, #8]
   12fb0:	4770      	bx	lr

00012fb2 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
   12fb2:	b570      	push	{r4, r5, r6, lr}
   12fb4:	4604      	mov	r4, r0
   12fb6:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
   12fb8:	6980      	ldr	r0, [r0, #24]
   12fba:	f000 f823 	bl	13004 <_ZN6tflite14AlignPointerUpEPhj>
   12fbe:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
   12fc0:	4631      	mov	r1, r6
   12fc2:	6960      	ldr	r0, [r4, #20]
   12fc4:	f000 f825 	bl	13012 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
   12fc8:	1b40      	subs	r0, r0, r5
   12fca:	bd70      	pop	{r4, r5, r6, pc}

00012fcc <_ZN6tflite18MicroErrorReporterD1Ev>:
 public:
  ~MicroErrorReporter() override {}
   12fcc:	4770      	bx	lr

00012fce <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
   12fce:	b508      	push	{r3, lr}
   12fd0:	4608      	mov	r0, r1
  Log(format, args);
   12fd2:	4611      	mov	r1, r2
   12fd4:	f7f3 f974 	bl	62c0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
   12fd8:	2000      	movs	r0, #0
   12fda:	bd08      	pop	{r3, pc}

00012fdc <_ZN6tflite18MicroErrorReporterD0Ev>:
   12fdc:	b510      	push	{r4, lr}
   12fde:	4604      	mov	r4, r0
   12fe0:	f002 ffd9 	bl	15f96 <_ZdlPv>
   12fe4:	4620      	mov	r0, r4
   12fe6:	bd10      	pop	{r4, pc}

00012fe8 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
   12fe8:	b40f      	push	{r0, r1, r2, r3}
   12fea:	b500      	push	{lr}
   12fec:	b083      	sub	sp, #12
   12fee:	a904      	add	r1, sp, #16
   12ff0:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
   12ff4:	9101      	str	r1, [sp, #4]
  Log(format, args);
   12ff6:	f7f3 f963 	bl	62c0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
   12ffa:	b003      	add	sp, #12
   12ffc:	f85d eb04 	ldr.w	lr, [sp], #4
   13000:	b004      	add	sp, #16
   13002:	4770      	bx	lr

00013004 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   13004:	4408      	add	r0, r1
   13006:	3801      	subs	r0, #1
   13008:	fbb0 f0f1 	udiv	r0, r0, r1
}
   1300c:	fb01 f000 	mul.w	r0, r1, r0
   13010:	4770      	bx	lr

00013012 <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   13012:	fbb0 f0f1 	udiv	r0, r0, r1
}
   13016:	fb01 f000 	mul.w	r0, r1, r0
   1301a:	4770      	bx	lr

0001301c <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   1301c:	4408      	add	r0, r1
   1301e:	3801      	subs	r0, #1
   13020:	fbb0 f0f1 	udiv	r0, r0, r1
}
   13024:	fb01 f000 	mul.w	r0, r1, r0
   13028:	4770      	bx	lr

0001302a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
   1302a:	3801      	subs	r0, #1
   1302c:	280f      	cmp	r0, #15
   1302e:	d83d      	bhi.n	130ac <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
   13030:	e8df f000 	tbb	[pc, r0]
   13034:	2820180c 	.word	0x2820180c
   13038:	3414303c 	.word	0x3414303c
   1303c:	38100824 	.word	0x38100824
   13040:	1c3c3c2c 	.word	0x1c3c3c2c
      *size = sizeof(int16_t);
   13044:	2302      	movs	r3, #2
   13046:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13048:	2000      	movs	r0, #0
      break;
   1304a:	4770      	bx	lr
      *size = sizeof(float);
   1304c:	2304      	movs	r3, #4
   1304e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13050:	2000      	movs	r0, #0
      break;
   13052:	4770      	bx	lr
      *size = sizeof(double);
   13054:	2308      	movs	r3, #8
   13056:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13058:	2000      	movs	r0, #0
      break;
   1305a:	4770      	bx	lr
      *size = sizeof(int16_t);
   1305c:	2302      	movs	r3, #2
   1305e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13060:	2000      	movs	r0, #0
      break;
   13062:	4770      	bx	lr
      *size = sizeof(int32_t);
   13064:	2304      	movs	r3, #4
   13066:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13068:	2000      	movs	r0, #0
      break;
   1306a:	4770      	bx	lr
      *size = sizeof(uint32_t);
   1306c:	2304      	movs	r3, #4
   1306e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13070:	2000      	movs	r0, #0
      break;
   13072:	4770      	bx	lr
      *size = sizeof(uint8_t);
   13074:	2301      	movs	r3, #1
   13076:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13078:	2000      	movs	r0, #0
      break;
   1307a:	4770      	bx	lr
      *size = sizeof(int8_t);
   1307c:	2301      	movs	r3, #1
   1307e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13080:	2000      	movs	r0, #0
      break;
   13082:	4770      	bx	lr
      *size = sizeof(int64_t);
   13084:	2308      	movs	r3, #8
   13086:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13088:	2000      	movs	r0, #0
      break;
   1308a:	4770      	bx	lr
      *size = sizeof(uint64_t);
   1308c:	2308      	movs	r3, #8
   1308e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13090:	2000      	movs	r0, #0
      break;
   13092:	4770      	bx	lr
      *size = sizeof(bool);
   13094:	2301      	movs	r3, #1
   13096:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13098:	2000      	movs	r0, #0
      break;
   1309a:	4770      	bx	lr
      *size = sizeof(float) * 2;
   1309c:	2308      	movs	r3, #8
   1309e:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   130a0:	2000      	movs	r0, #0
      break;
   130a2:	4770      	bx	lr
      *size = sizeof(double) * 2;
   130a4:	2310      	movs	r3, #16
   130a6:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   130a8:	2000      	movs	r0, #0
      break;
   130aa:	4770      	bx	lr
  return kTfLiteOk;
   130ac:	2001      	movs	r0, #1
}
   130ae:	4770      	bx	lr

000130b0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
   130b0:	b530      	push	{r4, r5, lr}
   130b2:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
   130b4:	b129      	cbz	r1, 130c2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
   130b6:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
   130b8:	6842      	ldr	r2, [r0, #4]
   130ba:	b1c2      	cbz	r2, 130ee <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   130bc:	2300      	movs	r3, #0
  int element_count = 1;
   130be:	2401      	movs	r4, #1
   130c0:	e007      	b.n	130d2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
   130c2:	f002 ff7f 	bl	15fc4 <abort>
      element_count *= eval_tensor->dims->data[n];
   130c6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   130ca:	6849      	ldr	r1, [r1, #4]
   130cc:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   130d0:	3301      	adds	r3, #1
   130d2:	6811      	ldr	r1, [r2, #0]
   130d4:	4299      	cmp	r1, r3
   130d6:	dcf6      	bgt.n	130c6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
   130d8:	a901      	add	r1, sp, #4
   130da:	7a00      	ldrb	r0, [r0, #8]
   130dc:	f7ff ffa5 	bl	1302a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   130e0:	b918      	cbnz	r0, 130ea <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
   130e2:	9b01      	ldr	r3, [sp, #4]
   130e4:	fb03 f404 	mul.w	r4, r3, r4
   130e8:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
   130ea:	b003      	add	sp, #12
   130ec:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
   130ee:	2401      	movs	r4, #1
   130f0:	e7f2      	b.n	130d8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

000130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
   130f2:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   130f4:	6800      	ldr	r0, [r0, #0]
   130f6:	f7fe fdb6 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   130fa:	bd08      	pop	{r3, pc}

000130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
   130fc:	4770      	bx	lr

000130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
   130fe:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   13100:	6800      	ldr	r0, [r0, #0]
   13102:	f7ff fffb 	bl	130fc <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
   13106:	bd08      	pop	{r3, pc}

00013108 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
   13108:	4770      	bx	lr

0001310a <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
   1310a:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   1310c:	8800      	ldrh	r0, [r0, #0]
   1310e:	f7ff fffb 	bl	13108 <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
   13112:	bd08      	pop	{r3, pc}

00013114 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
   13114:	4770      	bx	lr

00013116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
   13116:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   13118:	f990 0000 	ldrsb.w	r0, [r0]
   1311c:	f7ff fffa 	bl	13114 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
   13120:	bd08      	pop	{r3, pc}

00013122 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
   13122:	4770      	bx	lr

00013124 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
   13124:	3901      	subs	r1, #1
  char* p1 = start;
   13126:	4603      	mov	r3, r0
  while (p1 < p2) {
   13128:	4288      	cmp	r0, r1
   1312a:	d20a      	bcs.n	13142 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
   1312c:	b410      	push	{r4}
    char tmp = *p1;
   1312e:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
   13130:	780c      	ldrb	r4, [r1, #0]
   13132:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
   13136:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
   1313a:	428b      	cmp	r3, r1
   1313c:	d3f7      	bcc.n	1312e <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
   1313e:	bc10      	pop	{r4}
   13140:	4770      	bx	lr
   13142:	4770      	bx	lr

00013144 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   13144:	b410      	push	{r4}
   13146:	4604      	mov	r4, r0
  while (*current != 0) {
   13148:	7803      	ldrb	r3, [r0, #0]
   1314a:	b10b      	cbz	r3, 13150 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
   1314c:	3001      	adds	r0, #1
  while (*current != 0) {
   1314e:	e7fb      	b.n	13148 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
   13150:	3901      	subs	r1, #1
   13152:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
   13154:	7813      	ldrb	r3, [r2, #0]
   13156:	b12b      	cbz	r3, 13164 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
   13158:	4288      	cmp	r0, r1
   1315a:	d203      	bcs.n	13164 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
   1315c:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
   13160:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   13162:	e7f7      	b.n	13154 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
   13164:	2300      	movs	r3, #0
   13166:	7003      	strb	r3, [r0, #0]
}
   13168:	bc10      	pop	{r4}
   1316a:	4770      	bx	lr

0001316c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   1316c:	b538      	push	{r3, r4, r5, lr}
   1316e:	4605      	mov	r5, r0
   13170:	4608      	mov	r0, r1
   13172:	460c      	mov	r4, r1
   13174:	e008      	b.n	13188 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
   13176:	3330      	adds	r3, #48	; 0x30
   13178:	b2db      	uxtb	r3, r3
    *buffer++ = character;
   1317a:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
   1317e:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
   13182:	42aa      	cmp	r2, r5
   13184:	d809      	bhi.n	1319a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
   13186:	461d      	mov	r5, r3
    int32_t digit = i % base;
   13188:	fbb5 f3f2 	udiv	r3, r5, r2
   1318c:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
   13190:	2b09      	cmp	r3, #9
   13192:	ddf0      	ble.n	13176 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
   13194:	3357      	adds	r3, #87	; 0x57
   13196:	b2db      	uxtb	r3, r3
   13198:	e7ef      	b.n	1317a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
   1319a:	2300      	movs	r3, #0
   1319c:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
   1319e:	4621      	mov	r1, r4
   131a0:	f7ff ffc0 	bl	13124 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
   131a4:	4620      	mov	r0, r4
   131a6:	bd38      	pop	{r3, r4, r5, pc}

000131a8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
   131a8:	b508      	push	{r3, lr}
  if (i < 0) {
   131aa:	2800      	cmp	r0, #0
   131ac:	db03      	blt.n	131b6 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
   131ae:	220a      	movs	r2, #10
   131b0:	f7ff ffdc 	bl	1316c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   131b4:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
   131b6:	222d      	movs	r2, #45	; 0x2d
   131b8:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
   131bc:	4240      	negs	r0, r0
   131be:	e7f6      	b.n	131ae <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

000131c0 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
   131c0:	b530      	push	{r4, r5, lr}
   131c2:	b08d      	sub	sp, #52	; 0x34
   131c4:	4604      	mov	r4, r0
   131c6:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
   131c8:	4669      	mov	r1, sp
   131ca:	4610      	mov	r0, r2
   131cc:	f7ff ffec 	bl	131a8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
   131d0:	466a      	mov	r2, sp
   131d2:	4629      	mov	r1, r5
   131d4:	4620      	mov	r0, r4
   131d6:	f7ff ffb5 	bl	13144 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   131da:	b00d      	add	sp, #52	; 0x34
   131dc:	bd30      	pop	{r4, r5, pc}

000131de <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
   131de:	b530      	push	{r4, r5, lr}
   131e0:	b08d      	sub	sp, #52	; 0x34
   131e2:	4604      	mov	r4, r0
   131e4:	460d      	mov	r5, r1
   131e6:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
   131e8:	461a      	mov	r2, r3
   131ea:	4669      	mov	r1, sp
   131ec:	f7ff ffbe 	bl	1316c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   131f0:	466a      	mov	r2, sp
   131f2:	4629      	mov	r1, r5
   131f4:	4620      	mov	r0, r4
   131f6:	f7ff ffa5 	bl	13144 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   131fa:	b00d      	add	sp, #52	; 0x34
   131fc:	bd30      	pop	{r4, r5, pc}

000131fe <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
   131fe:	b510      	push	{r4, lr}
   13200:	4604      	mov	r4, r0
   13202:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
   13204:	4621      	mov	r1, r4
   13206:	f7ff ffcf 	bl	131a8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
   1320a:	1b00      	subs	r0, r0, r4
   1320c:	bd10      	pop	{r4, pc}

0001320e <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
   1320e:	b510      	push	{r4, lr}
   13210:	4604      	mov	r4, r0
   13212:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   13214:	220a      	movs	r2, #10
   13216:	4621      	mov	r1, r4
   13218:	f7ff ffa8 	bl	1316c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   1321c:	1b00      	subs	r0, r0, r4
   1321e:	bd10      	pop	{r4, pc}

00013220 <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
   13220:	b510      	push	{r4, lr}
   13222:	4604      	mov	r4, r0
   13224:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   13226:	2210      	movs	r2, #16
   13228:	4621      	mov	r1, r4
   1322a:	f7ff ff9f 	bl	1316c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   1322e:	1b00      	subs	r0, r0, r4
   13230:	bd10      	pop	{r4, pc}

00013232 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
   13232:	b510      	push	{r4, lr}
   13234:	4604      	mov	r4, r0
   13236:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   13238:	4621      	mov	r1, r4
   1323a:	f7f3 f8db 	bl	63f4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
   1323e:	1b00      	subs	r0, r0, r4
   13240:	bd10      	pop	{r4, pc}

00013242 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   13242:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   13244:	2300      	movs	r3, #0
  int result = 1;
   13246:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
   13248:	6811      	ldr	r1, [r2, #0]
   1324a:	4299      	cmp	r1, r3
   1324c:	dd06      	ble.n	1325c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
   1324e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   13252:	6849      	ldr	r1, [r1, #4]
   13254:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
   13258:	3301      	adds	r3, #1
   1325a:	e7f5      	b.n	13248 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
   1325c:	4770      	bx	lr

0001325e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
   1325e:	b538      	push	{r3, r4, r5, lr}
   13260:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   13262:	f7ff ff4c 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13266:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13268:	4628      	mov	r0, r5
   1326a:	f7ff ff4e 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1326e:	280a      	cmp	r0, #10
   13270:	d90e      	bls.n	13290 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
   13272:	f105 000a 	add.w	r0, r5, #10
   13276:	f7ff ff48 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   1327a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1327c:	b150      	cbz	r0, 13294 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
   1327e:	4620      	mov	r0, r4
   13280:	f7ff ff37 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   13284:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
   13286:	b138      	cbz	r0, 13298 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
   13288:	6800      	ldr	r0, [r0, #0]
   1328a:	f7fe fcec 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   1328e:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13290:	2000      	movs	r0, #0
   13292:	e7f2      	b.n	1327a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   13294:	2000      	movs	r0, #0
   13296:	e7f6      	b.n	13286 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
   13298:	2000      	movs	r0, #0
   1329a:	e7f8      	b.n	1328e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

0001329c <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
   1329c:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   1329e:	7800      	ldrb	r0, [r0, #0]
   132a0:	f7ff ff3f 	bl	13122 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
   132a4:	bd08      	pop	{r3, pc}

000132a6 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
   132a6:	4770      	bx	lr

000132a8 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
   132a8:	4770      	bx	lr

000132aa <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
   132aa:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   132ac:	6800      	ldr	r0, [r0, #0]
   132ae:	f7ff fffb 	bl	132a8 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
}
   132b2:	bd08      	pop	{r3, pc}

000132b4 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
   132b4:	4770      	bx	lr

000132b6 <_ZN6tflite10MicroGraphD0Ev>:
   132b6:	b510      	push	{r4, lr}
   132b8:	4604      	mov	r4, r0
   132ba:	f002 fe6c 	bl	15f96 <_ZdlPv>
   132be:	4620      	mov	r0, r4
   132c0:	bd10      	pop	{r4, pc}

000132c2 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
   132c2:	6101      	str	r1, [r0, #16]
}
   132c4:	4770      	bx	lr

000132c6 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
   132c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   132ca:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
   132cc:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   132d0:	2700      	movs	r7, #0
   132d2:	e017      	b.n	13304 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
   132d4:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
   132d6:	2200      	movs	r2, #0
      if (registration->init) {
   132d8:	681b      	ldr	r3, [r3, #0]
   132da:	b113      	cbz	r3, 132e2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
   132dc:	6870      	ldr	r0, [r6, #4]
   132de:	4798      	blx	r3
        node->user_data =
   132e0:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
   132e2:	3501      	adds	r5, #1
   132e4:	4545      	cmp	r5, r8
   132e6:	d20c      	bcs.n	13302 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   132e8:	6933      	ldr	r3, [r6, #16]
   132ea:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
   132ee:	242c      	movs	r4, #44	; 0x2c
   132f0:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
   132f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   132f6:	695a      	ldr	r2, [r3, #20]
   132f8:	2a20      	cmp	r2, #32
   132fa:	d1eb      	bne.n	132d4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
   132fc:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
   132fe:	69e2      	ldr	r2, [r4, #28]
   13300:	e7ea      	b.n	132d8 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   13302:	3701      	adds	r7, #1
   13304:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
   13306:	6818      	ldr	r0, [r3, #0]
   13308:	f7fe fcad 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   1330c:	4287      	cmp	r7, r0
   1330e:	d207      	bcs.n	13320 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
   13310:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   13312:	4639      	mov	r1, r7
   13314:	68b0      	ldr	r0, [r6, #8]
   13316:	f7f3 f9c3 	bl	66a0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   1331a:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
   1331c:	2500      	movs	r5, #0
   1331e:	e7e1      	b.n	132e4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
   13320:	f8c6 9014 	str.w	r9, [r6, #20]
}
   13324:	2000      	movs	r0, #0
   13326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001332a <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
   1332a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1332e:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
   13330:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   13334:	2600      	movs	r6, #0
   13336:	e013      	b.n	13360 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
   13338:	3401      	adds	r4, #1
   1333a:	42bc      	cmp	r4, r7
   1333c:	d20f      	bcs.n	1335e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   1333e:	692b      	ldr	r3, [r5, #16]
   13340:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
   13344:	232c      	movs	r3, #44	; 0x2c
   13346:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
   1334a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
   1334c:	2a00      	cmp	r2, #0
   1334e:	d0f3      	beq.n	13338 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
   13350:	6852      	ldr	r2, [r2, #4]
   13352:	2a00      	cmp	r2, #0
   13354:	d0f0      	beq.n	13338 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
   13356:	6919      	ldr	r1, [r3, #16]
   13358:	6868      	ldr	r0, [r5, #4]
   1335a:	4790      	blx	r2
   1335c:	e7ec      	b.n	13338 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   1335e:	3601      	adds	r6, #1
   13360:	69ab      	ldr	r3, [r5, #24]
   13362:	6818      	ldr	r0, [r3, #0]
   13364:	f7fe fc7f 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   13368:	4286      	cmp	r6, r0
   1336a:	d207      	bcs.n	1337c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
   1336c:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   1336e:	4631      	mov	r1, r6
   13370:	68a8      	ldr	r0, [r5, #8]
   13372:	f7f3 f995 	bl	66a0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   13376:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
   13378:	2400      	movs	r4, #0
   1337a:	e7de      	b.n	1333a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
   1337c:	f8c5 8014 	str.w	r8, [r5, #20]
}
   13380:	2000      	movs	r0, #0
   13382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013386 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
   13386:	b538      	push	{r3, r4, r5, lr}
   13388:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
   1338a:	4620      	mov	r0, r4
   1338c:	f7ff feb7 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13390:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13392:	4628      	mov	r0, r5
   13394:	f7ff feb9 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13398:	2808      	cmp	r0, #8
   1339a:	d90d      	bls.n	133b8 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
   1339c:	f105 0008 	add.w	r0, r5, #8
   133a0:	f7ff feb3 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   133a4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   133a6:	b148      	cbz	r0, 133bc <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
   133a8:	4620      	mov	r0, r4
   133aa:	f7ff fea2 	bl	130f2 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   133ae:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
   133b0:	6820      	ldr	r0, [r4, #0]
   133b2:	f7fe fc58 	bl	11c66 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   133b6:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   133b8:	2000      	movs	r0, #0
   133ba:	e7f3      	b.n	133a4 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   133bc:	2400      	movs	r4, #0
   133be:	e7f7      	b.n	133b0 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

000133c0 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
   133c0:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
   133c2:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
   133c4:	6e98      	ldr	r0, [r3, #104]	; 0x68
   133c6:	6803      	ldr	r3, [r0, #0]
   133c8:	68db      	ldr	r3, [r3, #12]
   133ca:	4798      	blx	r3
}
   133cc:	bd08      	pop	{r3, pc}

000133ce <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
   133ce:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
   133d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
   133d4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   133d8:	4770      	bx	lr

000133da <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
   133da:	b570      	push	{r4, r5, r6, lr}
   133dc:	b082      	sub	sp, #8
   133de:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
   133e0:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   133e2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
   133e4:	6802      	ldr	r2, [r0, #0]
   133e6:	6855      	ldr	r5, [r2, #4]
   133e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   133ea:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   133ee:	6821      	ldr	r1, [r4, #0]
   133f0:	9600      	str	r6, [sp, #0]
   133f2:	47a8      	blx	r5
}
   133f4:	b002      	add	sp, #8
   133f6:	bd70      	pop	{r4, r5, r6, pc}

000133f8 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
   133f8:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   133fa:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   133fc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
   13400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
   13404:	6858      	ldr	r0, [r3, #4]
   13406:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   1340a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1340e:	4770      	bx	lr

00013410 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
   13410:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
   13412:	336c      	adds	r3, #108	; 0x6c
   13414:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
   13416:	2000      	movs	r0, #0
   13418:	4770      	bx	lr

0001341a <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
   1341a:	b508      	push	{r3, lr}
   1341c:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
   1341e:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
   13420:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
   13424:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13426:	f7f4 fad9 	bl	79dc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
   1342a:	bd08      	pop	{r3, pc}

0001342c <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
   1342c:	b40e      	push	{r1, r2, r3}
   1342e:	b500      	push	{lr}
   13430:	b082      	sub	sp, #8
   13432:	aa03      	add	r2, sp, #12
   13434:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
   13438:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
   1343a:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
   1343c:	6898      	ldr	r0, [r3, #8]
   1343e:	6803      	ldr	r3, [r0, #0]
   13440:	689b      	ldr	r3, [r3, #8]
   13442:	4798      	blx	r3
}
   13444:	b002      	add	sp, #8
   13446:	f85d eb04 	ldr.w	lr, [sp], #4
   1344a:	b003      	add	sp, #12
   1344c:	4770      	bx	lr

0001344e <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   1344e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13452:	4604      	mov	r4, r0
   13454:	460d      	mov	r5, r1
   13456:	461e      	mov	r6, r3
   13458:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
   1345c:	6001      	str	r1, [r0, #0]
   1345e:	6042      	str	r2, [r0, #4]
   13460:	f8c0 8008 	str.w	r8, [r0, #8]
   13464:	f100 070c 	add.w	r7, r0, #12
   13468:	225c      	movs	r2, #92	; 0x5c
   1346a:	2100      	movs	r1, #0
   1346c:	4638      	mov	r0, r7
   1346e:	f002 fdc2 	bl	15ff6 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   13472:	4642      	mov	r2, r8
   13474:	9906      	ldr	r1, [sp, #24]
   13476:	4630      	mov	r0, r6
   13478:	f000 f90a 	bl	13690 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
   1347c:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
   1347e:	66a0      	str	r0, [r4, #104]	; 0x68
   13480:	462a      	mov	r2, r5
   13482:	4639      	mov	r1, r7
   13484:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   13488:	f7f3 fa00 	bl	688c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
   1348c:	2300      	movs	r3, #0
   1348e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   13492:	2201      	movs	r2, #1
   13494:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
   13498:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1349c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   134a0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
   134a4:	9908      	ldr	r1, [sp, #32]
   134a6:	4620      	mov	r0, r4
   134a8:	f7f3 fc80 	bl	6dac <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
   134ac:	4620      	mov	r0, r4
   134ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000134b2 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   134b2:	b510      	push	{r4, lr}
   134b4:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   134b6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
   134b8:	b113      	cbz	r3, 134c0 <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
   134ba:	306c      	adds	r0, #108	; 0x6c
   134bc:	f7ff ff35 	bl	1332a <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
   134c0:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   134c4:	f7ff fef6 	bl	132b4 <_ZN6tflite10MicroGraphD1Ev>
}
   134c8:	4620      	mov	r0, r4
   134ca:	bd10      	pop	{r4, pc}

000134cc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
   134cc:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
   134ce:	306c      	adds	r0, #108	; 0x6c
   134d0:	f7f3 fb78 	bl	6bc4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
   134d4:	bd08      	pop	{r3, pc}

000134d6 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
   134d6:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   134d8:	6840      	ldr	r0, [r0, #4]
   134da:	6803      	ldr	r3, [r0, #0]
   134dc:	68db      	ldr	r3, [r3, #12]
   134de:	4798      	blx	r3
  }
   134e0:	bd08      	pop	{r3, pc}

000134e2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   134e2:	4770      	bx	lr

000134e4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
   134e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   134e6:	6844      	ldr	r4, [r0, #4]
   134e8:	6843      	ldr	r3, [r0, #4]
   134ea:	6885      	ldr	r5, [r0, #8]
   134ec:	441d      	add	r5, r3
   134ee:	42a5      	cmp	r5, r4
   134f0:	d91a      	bls.n	13528 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
   134f2:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
   134f4:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
   134f8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
   134fc:	6806      	ldr	r6, [r0, #0]
   134fe:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   13502:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
   13506:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
   1350a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   1350e:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
   13512:	f8dc 3004 	ldr.w	r3, [ip, #4]
   13516:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
   13518:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
   1351a:	f04f 33ff 	mov.w	r3, #4294967295
   1351e:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
   13520:	2301      	movs	r3, #1
   13522:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   13524:	441c      	add	r4, r3
   13526:	e7df      	b.n	134e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
   13528:	2000      	movs	r0, #0
   1352a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001352c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   1352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13530:	b085      	sub	sp, #20
   13532:	9001      	str	r0, [sp, #4]
   13534:	4688      	mov	r8, r1
   13536:	4693      	mov	fp, r2
   13538:	461f      	mov	r7, r3
   1353a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
   1353e:	2400      	movs	r4, #0
  int planner_index = 0;
   13540:	4626      	mov	r6, r4
   13542:	e000      	b.n	13546 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   13544:	3401      	adds	r4, #1
   13546:	454c      	cmp	r4, r9
   13548:	d21a      	bcs.n	13580 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
   1354a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1354e:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
   13552:	7d2b      	ldrb	r3, [r5, #20]
   13554:	2b00      	cmp	r3, #0
   13556:	d0f5      	beq.n	13544 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
   13558:	f04f 33ff 	mov.w	r3, #4294967295
   1355c:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
   1355e:	f8d8 3000 	ldr.w	r3, [r8]
   13562:	f8d3 a014 	ldr.w	sl, [r3, #20]
   13566:	ab03      	add	r3, sp, #12
   13568:	4632      	mov	r2, r6
   1356a:	9901      	ldr	r1, [sp, #4]
   1356c:	4640      	mov	r0, r8
   1356e:	47d0      	blx	sl
   13570:	4603      	mov	r3, r0
   13572:	b930      	cbnz	r0, 13582 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   13574:	686a      	ldr	r2, [r5, #4]
   13576:	9b03      	ldr	r3, [sp, #12]
   13578:	445b      	add	r3, fp
   1357a:	6013      	str	r3, [r2, #0]
      ++planner_index;
   1357c:	3601      	adds	r6, #1
   1357e:	e7e1      	b.n	13544 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
   13580:	2300      	movs	r3, #0
}
   13582:	4618      	mov	r0, r3
   13584:	b005      	add	sp, #20
   13586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001358a <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   1358a:	4770      	bx	lr

0001358c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
   1358c:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   1358e:	6840      	ldr	r0, [r0, #4]
   13590:	6803      	ldr	r3, [r0, #0]
   13592:	68db      	ldr	r3, [r3, #12]
   13594:	2210      	movs	r2, #16
   13596:	4798      	blx	r3
}
   13598:	bd08      	pop	{r3, pc}

0001359a <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
   1359a:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
   1359c:	6840      	ldr	r0, [r0, #4]
   1359e:	6803      	ldr	r3, [r0, #0]
   135a0:	695b      	ldr	r3, [r3, #20]
   135a2:	4798      	blx	r3
}
   135a4:	bd08      	pop	{r3, pc}

000135a6 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
   135a6:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   135a8:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
   135aa:	6803      	ldr	r3, [r0, #0]
   135ac:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   135ae:	2204      	movs	r2, #4
   135b0:	2140      	movs	r1, #64	; 0x40
   135b2:	4798      	blx	r3
}
   135b4:	bd08      	pop	{r3, pc}

000135b6 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   135b6:	4770      	bx	lr

000135b8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
   135b8:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   135ba:	b161      	cbz	r1, 135d6 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
   135bc:	4613      	mov	r3, r2
   135be:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
   135c0:	6942      	ldr	r2, [r0, #20]
   135c2:	b132      	cbz	r2, 135d2 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
   135c4:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
   135c6:	6802      	ldr	r2, [r0, #0]
   135c8:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
   135ca:	2204      	movs	r2, #4
   135cc:	0099      	lsls	r1, r3, #2
   135ce:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
   135d0:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
   135d2:	2000      	movs	r0, #0
   135d4:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   135d6:	f002 fcf5 	bl	15fc4 <abort>

000135da <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   135da:	b510      	push	{r4, lr}
   135dc:	4604      	mov	r4, r0
   135de:	f002 fcda 	bl	15f96 <_ZdlPv>
   135e2:	4620      	mov	r0, r4
   135e4:	bd10      	pop	{r4, pc}

000135e6 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   135e6:	b510      	push	{r4, lr}
   135e8:	4604      	mov	r4, r0
   135ea:	f002 fcd4 	bl	15f96 <_ZdlPv>
   135ee:	4620      	mov	r0, r4
   135f0:	bd10      	pop	{r4, pc}

000135f2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   135f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135f6:	b082      	sub	sp, #8
   135f8:	4682      	mov	sl, r0
   135fa:	4689      	mov	r9, r1
   135fc:	4617      	mov	r7, r2
   135fe:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
   13600:	2500      	movs	r5, #0
   13602:	e00a      	b.n	1361a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   13604:	68e1      	ldr	r1, [r4, #12]
   13606:	9301      	str	r3, [sp, #4]
   13608:	9100      	str	r1, [sp, #0]
   1360a:	68a3      	ldr	r3, [r4, #8]
   1360c:	4651      	mov	r1, sl
   1360e:	4648      	mov	r0, r9
   13610:	f000 f8c9 	bl	137a6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   13614:	4603      	mov	r3, r0
   13616:	bb08      	cbnz	r0, 1365c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   13618:	3501      	adds	r5, #1
   1361a:	4545      	cmp	r5, r8
   1361c:	d21d      	bcs.n	1365a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
   1361e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   13622:	00e3      	lsls	r3, r4, #3
   13624:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
   13628:	7d26      	ldrb	r6, [r4, #20]
   1362a:	2e00      	cmp	r6, #0
   1362c:	d0f4      	beq.n	13618 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
   1362e:	2110      	movs	r1, #16
   13630:	58f8      	ldr	r0, [r7, r3]
   13632:	f7ff fcf3 	bl	1301c <_ZN6tflite11AlignSizeUpEjj>
   13636:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   13638:	6923      	ldr	r3, [r4, #16]
   1363a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1363e:	d1e1      	bne.n	13604 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
   13640:	f8d9 3000 	ldr.w	r3, [r9]
   13644:	689e      	ldr	r6, [r3, #8]
   13646:	68e3      	ldr	r3, [r4, #12]
   13648:	9300      	str	r3, [sp, #0]
   1364a:	68a3      	ldr	r3, [r4, #8]
   1364c:	4651      	mov	r1, sl
   1364e:	4648      	mov	r0, r9
   13650:	47b0      	blx	r6
   13652:	4603      	mov	r3, r0
   13654:	2800      	cmp	r0, #0
   13656:	d0df      	beq.n	13618 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
   13658:	e000      	b.n	1365c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
   1365a:	2300      	movs	r3, #0
}
   1365c:	4618      	mov	r0, r3
   1365e:	b002      	add	sp, #8
   13660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00013664 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   13664:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
   13666:	b178      	cbz	r0, 13688 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
   13668:	460c      	mov	r4, r1
   1366a:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
   1366c:	b171      	cbz	r1, 1368c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
   1366e:	6803      	ldr	r3, [r0, #0]
   13670:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   13672:	2204      	movs	r2, #4
   13674:	211c      	movs	r1, #28
   13676:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   13678:	4606      	mov	r6, r0
   1367a:	b118      	cbz	r0, 13684 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
   1367c:	4622      	mov	r2, r4
   1367e:	4629      	mov	r1, r5
   13680:	f7f4 f99e 	bl	79c0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   13684:	4630      	mov	r0, r6
   13686:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
   13688:	f002 fc9c 	bl	15fc4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   1368c:	f002 fc9a 	bl	15fc4 <abort>

00013690 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   13690:	b570      	push	{r4, r5, r6, lr}
   13692:	4604      	mov	r4, r0
   13694:	460e      	mov	r6, r1
   13696:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   13698:	2110      	movs	r1, #16
   1369a:	f7ff fcb3 	bl	13004 <_ZN6tflite14AlignPointerUpEPhj>
   1369e:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   136a0:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   136a2:	1a22      	subs	r2, r4, r0
   136a4:	4628      	mov	r0, r5
   136a6:	f7f2 fdd3 	bl	6250 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   136aa:	4629      	mov	r1, r5
   136ac:	f7ff ffda 	bl	13664 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   136b0:	bd70      	pop	{r4, r5, r6, pc}

000136b2 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
   136b2:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
   136b4:	2300      	movs	r3, #0
   136b6:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   136b8:	6840      	ldr	r0, [r0, #4]
   136ba:	6803      	ldr	r3, [r0, #0]
   136bc:	689b      	ldr	r3, [r3, #8]
   136be:	2204      	movs	r2, #4
   136c0:	2160      	movs	r1, #96	; 0x60
   136c2:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
   136c4:	bd08      	pop	{r3, pc}

000136c6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
   136c6:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
   136c8:	6840      	ldr	r0, [r0, #4]
   136ca:	f7ff fc70 	bl	12fae <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
   136ce:	2104      	movs	r1, #4
   136d0:	f7ff fc98 	bl	13004 <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
   136d4:	bd08      	pop	{r3, pc}

000136d6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
   136d6:	b570      	push	{r4, r5, r6, lr}
   136d8:	4605      	mov	r5, r0
   136da:	460e      	mov	r6, r1
  ResetTempAllocations();
   136dc:	6803      	ldr	r3, [r0, #0]
   136de:	689b      	ldr	r3, [r3, #8]
   136e0:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
   136e2:	4628      	mov	r0, r5
   136e4:	f7ff ffef 	bl	136c6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   136e8:	2300      	movs	r3, #0
   136ea:	e000      	b.n	136ee <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
   136ec:	3301      	adds	r3, #1
   136ee:	6969      	ldr	r1, [r5, #20]
   136f0:	4299      	cmp	r1, r3
   136f2:	d907      	bls.n	13704 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   136f4:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   136f8:	6854      	ldr	r4, [r2, #4]
   136fa:	f1b4 3fff 	cmp.w	r4, #4294967295
   136fe:	d1f5      	bne.n	136ec <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
   13700:	6056      	str	r6, [r2, #4]
   13702:	e7f3      	b.n	136ec <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   13704:	6868      	ldr	r0, [r5, #4]
   13706:	6803      	ldr	r3, [r0, #0]
   13708:	689b      	ldr	r3, [r3, #8]
   1370a:	310c      	adds	r1, #12
   1370c:	2204      	movs	r2, #4
   1370e:	00c9      	lsls	r1, r1, #3
   13710:	4798      	blx	r3
}
   13712:	bd70      	pop	{r4, r5, r6, pc}

00013714 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
   13714:	6880      	ldr	r0, [r0, #8]
   13716:	4770      	bx	lr

00013718 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   13718:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   1371a:	b119      	cbz	r1, 13724 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1371c:	b122      	cbz	r2, 13728 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   1371e:	601a      	str	r2, [r3, #0]
}
   13720:	2000      	movs	r0, #0
   13722:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   13724:	f002 fc4e 	bl	15fc4 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   13728:	f002 fc4c 	bl	15fc4 <abort>

0001372c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
   1372c:	b508      	push	{r3, lr}
   1372e:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
   13730:	460a      	mov	r2, r1
   13732:	68c1      	ldr	r1, [r0, #12]
   13734:	6840      	ldr	r0, [r0, #4]
   13736:	f7ff ffef 	bl	13718 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
   1373a:	bd08      	pop	{r3, pc}

0001373c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   1373c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   1373e:	b119      	cbz	r1, 13748 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   13740:	b122      	cbz	r2, 1374c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   13742:	601a      	str	r2, [r3, #0]
}
   13744:	2000      	movs	r0, #0
   13746:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   13748:	f002 fc3c 	bl	15fc4 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1374c:	f002 fc3a 	bl	15fc4 <abort>

00013750 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   13750:	4770      	bx	lr

00013752 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   13752:	6880      	ldr	r0, [r0, #8]
   13754:	4770      	bx	lr

00013756 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   13756:	b510      	push	{r4, lr}
   13758:	4604      	mov	r4, r0
}
   1375a:	f002 fc1c 	bl	15f96 <_ZdlPv>
   1375e:	4620      	mov	r0, r4
   13760:	bd10      	pop	{r4, pc}

00013762 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   13762:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
   13764:	2301      	movs	r3, #1
    any_swapped = false;
   13766:	2700      	movs	r7, #0
   13768:	e000      	b.n	1376c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
   1376a:	3301      	adds	r3, #1
   1376c:	4293      	cmp	r3, r2
   1376e:	da16      	bge.n	1379e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
   13770:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   13774:	3c01      	subs	r4, #1
   13776:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1377a:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   1377e:	42b5      	cmp	r5, r6
   13780:	daf3      	bge.n	1376a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
   13782:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
   13786:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
   1378a:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
   1378e:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
   13792:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
   13796:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
   1379a:	2701      	movs	r7, #1
   1379c:	e7e5      	b.n	1376a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
   1379e:	2f00      	cmp	r7, #0
   137a0:	d1e0      	bne.n	13764 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   137a2:	bcf0      	pop	{r4, r5, r6, r7}
   137a4:	4770      	bx	lr

000137a6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   137a6:	b570      	push	{r4, r5, r6, lr}
   137a8:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
   137aa:	68c5      	ldr	r5, [r0, #12]
   137ac:	6886      	ldr	r6, [r0, #8]
   137ae:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   137b2:	6804      	ldr	r4, [r0, #0]
   137b4:	68a4      	ldr	r4, [r4, #8]
   137b6:	9e06      	ldr	r6, [sp, #24]
   137b8:	9600      	str	r6, [sp, #0]
   137ba:	47a0      	blx	r4
   137bc:	b918      	cbnz	r0, 137c6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
   137be:	9b07      	ldr	r3, [sp, #28]
   137c0:	606b      	str	r3, [r5, #4]
}
   137c2:	b002      	add	sp, #8
   137c4:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
   137c6:	2001      	movs	r0, #1
   137c8:	e7fb      	b.n	137c2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

000137ca <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
   137ca:	68c0      	ldr	r0, [r0, #12]
   137cc:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
   137ce:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   137d2:	6888      	ldr	r0, [r1, #8]
   137d4:	4298      	cmp	r0, r3
   137d6:	dc04      	bgt.n	137e2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
   137d8:	68cb      	ldr	r3, [r1, #12]
   137da:	4293      	cmp	r3, r2
   137dc:	db03      	blt.n	137e6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
   137de:	2001      	movs	r0, #1
   137e0:	4770      	bx	lr
    return false;
   137e2:	2000      	movs	r0, #0
   137e4:	4770      	bx	lr
    return false;
   137e6:	2000      	movs	r0, #0
}
   137e8:	4770      	bx	lr

000137ea <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   137ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   137ec:	4605      	mov	r5, r0
   137ee:	4616      	mov	r6, r2
   137f0:	461f      	mov	r7, r3
  if (start == nullptr) {
   137f2:	b1c9      	cbz	r1, 13828 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
   137f4:	688b      	ldr	r3, [r1, #8]
   137f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   137fa:	d01c      	beq.n	13836 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   137fc:	6984      	ldr	r4, [r0, #24]
   137fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13802:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   13806:	463b      	mov	r3, r7
   13808:	4632      	mov	r2, r6
   1380a:	4621      	mov	r1, r4
   1380c:	4628      	mov	r0, r5
   1380e:	f7ff ffdc 	bl	137ca <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   13812:	b998      	cbnz	r0, 1383c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
   13814:	68a4      	ldr	r4, [r4, #8]
   13816:	f1b4 3fff 	cmp.w	r4, #4294967295
   1381a:	d00e      	beq.n	1383a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   1381c:	69a9      	ldr	r1, [r5, #24]
   1381e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
   13822:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   13826:	e7ee      	b.n	13806 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   13828:	6984      	ldr	r4, [r0, #24]
   1382a:	6a03      	ldr	r3, [r0, #32]
   1382c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13830:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   13834:	e7e7      	b.n	13806 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
   13836:	2400      	movs	r4, #0
   13838:	e000      	b.n	1383c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
   1383a:	2400      	movs	r4, #0
}
   1383c:	4620      	mov	r0, r4
   1383e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013840 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   13840:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   13844:	2b00      	cmp	r3, #0
   13846:	f000 80d5 	beq.w	139f4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   1384a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384e:	b083      	sub	sp, #12
   13850:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   13852:	6886      	ldr	r6, [r0, #8]
   13854:	2e00      	cmp	r6, #0
   13856:	f000 80ca 	beq.w	139ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
   1385a:	2000      	movs	r0, #0
   1385c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   13860:	4603      	mov	r3, r0
   13862:	e00e      	b.n	13882 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   13864:	6925      	ldr	r5, [r4, #16]
   13866:	5852      	ldr	r2, [r2, r1]
   13868:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
   1386c:	6962      	ldr	r2, [r4, #20]
   1386e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   13872:	68e2      	ldr	r2, [r4, #12]
   13874:	4411      	add	r1, r2
   13876:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13878:	6849      	ldr	r1, [r1, #4]
   1387a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
   1387e:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
   13880:	3301      	adds	r3, #1
   13882:	68a2      	ldr	r2, [r4, #8]
   13884:	429a      	cmp	r2, r3
   13886:	dd15      	ble.n	138b4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   13888:	68e2      	ldr	r2, [r4, #12]
   1388a:	0119      	lsls	r1, r3, #4
   1388c:	eb02 1503 	add.w	r5, r2, r3, lsl #4
   13890:	686d      	ldr	r5, [r5, #4]
   13892:	f1b5 3fff 	cmp.w	r5, #4294967295
   13896:	d1e5      	bne.n	13864 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
   13898:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   1389a:	6925      	ldr	r5, [r4, #16]
   1389c:	5852      	ldr	r2, [r2, r1]
   1389e:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   138a2:	6962      	ldr	r2, [r4, #20]
   138a4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
   138a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   138aa:	f04f 31ff 	mov.w	r1, #4294967295
   138ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   138b2:	e7e5      	b.n	13880 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   138b4:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
   138b6:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   138b8:	1a12      	subs	r2, r2, r0
   138ba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   138be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   138c2:	f7ff ff4e 	bl	13762 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
   138c6:	2300      	movs	r3, #0
   138c8:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
   138ca:	2301      	movs	r3, #1
   138cc:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   138ce:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   138d2:	f04f 33ff 	mov.w	r3, #4294967295
   138d6:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
   138da:	6963      	ldr	r3, [r4, #20]
   138dc:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   138de:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   138e2:	68e2      	ldr	r2, [r4, #12]
   138e4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   138e8:	6852      	ldr	r2, [r2, #4]
   138ea:	f1b2 3fff 	cmp.w	r2, #4294967295
   138ee:	d007      	beq.n	13900 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
   138f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   138f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138f6:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
   138fa:	f04f 0901 	mov.w	r9, #1
   138fe:	e036      	b.n	1396e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
   13900:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13902:	2100      	movs	r1, #0
   13904:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   13908:	e7f2      	b.n	138f0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
   1390a:	2100      	movs	r1, #0
    int candidate_offset = 0;
   1390c:	460d      	mov	r5, r1
   1390e:	f8cd a000 	str.w	sl, [sp]
   13912:	f8cd 9004 	str.w	r9, [sp, #4]
   13916:	4681      	mov	r9, r0
   13918:	4692      	mov	sl, r2
   1391a:	e004      	b.n	13926 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
   1391c:	b1d9      	cbz	r1, 13956 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
   1391e:	680b      	ldr	r3, [r1, #0]
   13920:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
   13922:	459b      	cmp	fp, r3
   13924:	dd12      	ble.n	1394c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   13926:	460e      	mov	r6, r1
   13928:	4653      	mov	r3, sl
   1392a:	464a      	mov	r2, r9
   1392c:	4620      	mov	r0, r4
   1392e:	f7ff ff5c 	bl	137ea <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
   13932:	4601      	mov	r1, r0
        if (prior_entry) {
   13934:	2e00      	cmp	r6, #0
   13936:	d0f1      	beq.n	1391c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
   13938:	6873      	ldr	r3, [r6, #4]
   1393a:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
   1393c:	6833      	ldr	r3, [r6, #0]
   1393e:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
   13942:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
   13944:	429d      	cmp	r5, r3
   13946:	dae9      	bge.n	1391c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
   13948:	461d      	mov	r5, r3
   1394a:	e7e7      	b.n	1391c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
   1394c:	f8dd a000 	ldr.w	sl, [sp]
   13950:	f8dd 9004 	ldr.w	r9, [sp, #4]
   13954:	e01f      	b.n	13996 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
   13956:	f8dd a000 	ldr.w	sl, [sp]
   1395a:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1395e:	e01a      	b.n	13996 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
   13960:	6a23      	ldr	r3, [r4, #32]
   13962:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
   13966:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
   13968:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
   1396a:	f109 0901 	add.w	r9, r9, #1
   1396e:	68a3      	ldr	r3, [r4, #8]
   13970:	454b      	cmp	r3, r9
   13972:	dd3c      	ble.n	139ee <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
   13974:	6963      	ldr	r3, [r4, #20]
   13976:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   1397a:	f8d4 800c 	ldr.w	r8, [r4, #12]
   1397e:	013a      	lsls	r2, r7, #4
   13980:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
   13984:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   13988:	689a      	ldr	r2, [r3, #8]
   1398a:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   1398c:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   1398e:	685d      	ldr	r5, [r3, #4]
   13990:	f1b5 3fff 	cmp.w	r5, #4294967295
   13994:	d0b9      	beq.n	1390a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
   13996:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13998:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   1399c:	69a2      	ldr	r2, [r4, #24]
   1399e:	69e3      	ldr	r3, [r4, #28]
   139a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   139a4:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
   139a8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
   139ac:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
   139b0:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
   139b2:	1c7b      	adds	r3, r7, #1
   139b4:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   139b6:	f8da 3000 	ldr.w	r3, [sl]
   139ba:	42ab      	cmp	r3, r5
   139bc:	dcd0      	bgt.n	13960 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
   139be:	4650      	mov	r0, sl
   139c0:	e000      	b.n	139c4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
   139c2:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
   139c4:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
   139c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   139ca:	d00c      	beq.n	139e6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   139cc:	69a2      	ldr	r2, [r4, #24]
   139ce:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   139d2:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
   139d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   139da:	42aa      	cmp	r2, r5
   139dc:	ddf1      	ble.n	139c2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
   139de:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
   139e2:	6087      	str	r7, [r0, #8]
          break;
   139e4:	e7c1      	b.n	1396a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
   139e6:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
   139e8:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
   139ec:	e7bd      	b.n	1396a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
   139ee:	b003      	add	sp, #12
   139f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f4:	4770      	bx	lr

000139f6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   139f6:	b570      	push	{r4, r5, r6, lr}
   139f8:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   139fa:	f7ff ff21 	bl	13840 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   139fe:	68a3      	ldr	r3, [r4, #8]
   13a00:	b1d3      	cbz	r3, 13a38 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   13a02:	69a6      	ldr	r6, [r4, #24]
   13a04:	6a23      	ldr	r3, [r4, #32]
   13a06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a0a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
   13a0e:	2000      	movs	r0, #0
   13a10:	e007      	b.n	13a22 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
   13a12:	689b      	ldr	r3, [r3, #8]
   13a14:	f1b3 3fff 	cmp.w	r3, #4294967295
   13a18:	d00f      	beq.n	13a3a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   13a1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
   13a22:	b153      	cbz	r3, 13a3a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
   13a24:	68e5      	ldr	r5, [r4, #12]
   13a26:	685a      	ldr	r2, [r3, #4]
   13a28:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
   13a2a:	681a      	ldr	r2, [r3, #0]
   13a2c:	5869      	ldr	r1, [r5, r1]
   13a2e:	440a      	add	r2, r1
    if (current_size > max_size) {
   13a30:	4290      	cmp	r0, r2
   13a32:	d2ee      	bcs.n	13a12 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
   13a34:	4610      	mov	r0, r2
   13a36:	e7ec      	b.n	13a12 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
   13a38:	2000      	movs	r0, #0
}
   13a3a:	bd70      	pop	{r4, r5, r6, pc}

00013a3c <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
   13a3c:	3001      	adds	r0, #1
}
   13a3e:	0080      	lsls	r0, r0, #2
   13a40:	4770      	bx	lr

00013a42 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   13a42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13a46:	460e      	mov	r6, r1
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   13a48:	2401      	movs	r4, #1
   13a4a:	fa04 fc00 	lsl.w	ip, r4, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   13a4e:	1a12      	subs	r2, r2, r0
   13a50:	f1a2 0120 	sub.w	r1, r2, #32
   13a54:	f1c2 0320 	rsb	r3, r2, #32
   13a58:	fa04 f101 	lsl.w	r1, r4, r1
   13a5c:	fa24 f303 	lsr.w	r3, r4, r3
   13a60:	ea41 0703 	orr.w	r7, r1, r3
   13a64:	fa04 f502 	lsl.w	r5, r4, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   13a68:	f10c 30ff 	add.w	r0, ip, #4294967295
   13a6c:	f7ec fcea 	bl	444 <__aeabi_i2d>
   13a70:	4680      	mov	r8, r0
   13a72:	4689      	mov	r9, r1
   13a74:	4628      	mov	r0, r5
   13a76:	4639      	mov	r1, r7
   13a78:	f7ec fd20 	bl	4bc <__aeabi_l2d>
   13a7c:	4602      	mov	r2, r0
   13a7e:	460b      	mov	r3, r1
   13a80:	4640      	mov	r0, r8
   13a82:	4649      	mov	r1, r9
   13a84:	f7ec fd48 	bl	518 <__aeabi_dmul>
   13a88:	4680      	mov	r8, r0
   13a8a:	4689      	mov	r9, r1
      (1ll << input_left_shift);
   13a8c:	f1a6 0120 	sub.w	r1, r6, #32
   13a90:	f1c6 0320 	rsb	r3, r6, #32
   13a94:	fa04 f101 	lsl.w	r1, r4, r1
   13a98:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
   13a9c:	fa04 f006 	lsl.w	r0, r4, r6
   13aa0:	4319      	orrs	r1, r3
   13aa2:	f7ec fd0b 	bl	4bc <__aeabi_l2d>
   13aa6:	4602      	mov	r2, r0
   13aa8:	460b      	mov	r3, r1
  const double max_input_rescaled =
   13aaa:	4640      	mov	r0, r8
   13aac:	4649      	mov	r1, r9
   13aae:	f7ec fe5d 	bl	76c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   13ab2:	f7ed ff59 	bl	1968 <floor>
   13ab6:	f7ec ffc9 	bl	a4c <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   13aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
   13abe:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   13ac0:	680b      	ldr	r3, [r1, #0]
   13ac2:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   13ac6:	2a00      	cmp	r2, #0
   13ac8:	db10      	blt.n	13aec <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   13aca:	428a      	cmp	r2, r1
   13acc:	da10      	bge.n	13af0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   13ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   13ad2:	f1b1 3fff 	cmp.w	r1, #4294967295
   13ad6:	d00d      	beq.n	13af4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   13ad8:	2900      	cmp	r1, #0
   13ada:	db0d      	blt.n	13af8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   13adc:	6883      	ldr	r3, [r0, #8]
   13ade:	b113      	cbz	r3, 13ae6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   13ae0:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   13ae4:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   13ae6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   13ae8:	4798      	blx	r3
   13aea:	e7fb      	b.n	13ae4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   13aec:	2000      	movs	r0, #0
   13aee:	e7f9      	b.n	13ae4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13af0:	2000      	movs	r0, #0
   13af2:	e7f7      	b.n	13ae4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13af4:	2000      	movs	r0, #0
   13af6:	e7f5      	b.n	13ae4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13af8:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
   13afa:	e7f3      	b.n	13ae4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

00013afc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
   13afc:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   13afe:	684b      	ldr	r3, [r1, #4]
   13b00:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   13b04:	2a00      	cmp	r2, #0
   13b06:	db10      	blt.n	13b2a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
   13b08:	4291      	cmp	r1, r2
   13b0a:	dd10      	ble.n	13b2e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   13b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   13b10:	f1b1 3fff 	cmp.w	r1, #4294967295
   13b14:	d00d      	beq.n	13b32 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   13b16:	2900      	cmp	r1, #0
   13b18:	db0d      	blt.n	13b36 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   13b1a:	6883      	ldr	r3, [r0, #8]
   13b1c:	b113      	cbz	r3, 13b24 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   13b1e:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   13b22:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   13b24:	6d03      	ldr	r3, [r0, #80]	; 0x50
   13b26:	4798      	blx	r3
   13b28:	e7fb      	b.n	13b22 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   13b2a:	2000      	movs	r0, #0
   13b2c:	e7f9      	b.n	13b22 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13b2e:	2000      	movs	r0, #0
   13b30:	e7f7      	b.n	13b22 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13b32:	2000      	movs	r0, #0
   13b34:	e7f5      	b.n	13b22 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13b36:	2000      	movs	r0, #0
   13b38:	e7f3      	b.n	13b22 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

00013b3a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
   13b3a:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
   13b3c:	f7ff ffbf 	bl	13abe <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
   13b40:	bd08      	pop	{r3, pc}

00013b42 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
   13b42:	1e43      	subs	r3, r0, #1
   13b44:	2b04      	cmp	r3, #4
   13b46:	d804      	bhi.n	13b52 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
   13b48:	e8df f003 	tbb	[pc, r3]
   13b4c:	04040404 	.word	0x04040404
   13b50:	04          	.byte	0x04
   13b51:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
   13b52:	2000      	movs	r0, #0
}
   13b54:	4770      	bx	lr

00013b56 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   13b56:	b118      	cbz	r0, 13b60 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xa>
   13b58:	2801      	cmp	r0, #1
   13b5a:	d103      	bne.n	13b64 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xe>
      return kTfLitePaddingValid;
   13b5c:	2002      	movs	r0, #2
   13b5e:	4770      	bx	lr
  switch (padding) {
   13b60:	2001      	movs	r0, #1
   13b62:	4770      	bx	lr
  return kTfLitePaddingUnknown;
   13b64:	2000      	movs	r0, #0
}
   13b66:	4770      	bx	lr

00013b68 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   13b68:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   13b6a:	b118      	cbz	r0, 13b74 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
   13b6c:	b121      	cbz	r1, 13b78 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
   13b6e:	b12a      	cbz	r2, 13b7c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
   13b70:	b133      	cbz	r3, 13b80 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
   13b72:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
   13b74:	f002 fa26 	bl	15fc4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   13b78:	f002 fa24 	bl	15fc4 <abort>
  TFLITE_DCHECK(allocator != nullptr);
   13b7c:	f002 fa22 	bl	15fc4 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
   13b80:	f002 fa20 	bl	15fc4 <abort>

00013b84 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   13b84:	b40e      	push	{r1, r2, r3}
   13b86:	b500      	push	{lr}
   13b88:	b082      	sub	sp, #8
   13b8a:	aa03      	add	r2, sp, #12
   13b8c:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   13b90:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   13b92:	6803      	ldr	r3, [r0, #0]
   13b94:	689b      	ldr	r3, [r3, #8]
   13b96:	4798      	blx	r3
  va_end(args);
  return code;
}
   13b98:	b002      	add	sp, #8
   13b9a:	f85d eb04 	ldr.w	lr, [sp], #4
   13b9e:	b003      	add	sp, #12
   13ba0:	4770      	bx	lr

00013ba2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   13ba2:	b40c      	push	{r2, r3}
   13ba4:	b500      	push	{lr}
   13ba6:	b083      	sub	sp, #12
   13ba8:	aa04      	add	r2, sp, #16
   13baa:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   13bae:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   13bb0:	6803      	ldr	r3, [r0, #0]
   13bb2:	689b      	ldr	r3, [r3, #8]
   13bb4:	4798      	blx	r3
  va_end(args);
  return code;
}
   13bb6:	b003      	add	sp, #12
   13bb8:	f85d eb04 	ldr.w	lr, [sp], #4
   13bbc:	b002      	add	sp, #8
   13bbe:	4770      	bx	lr

00013bc0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
   13bc0:	b570      	push	{r4, r5, r6, lr}
   13bc2:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
   13bc4:	b368      	cbz	r0, 13c22 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
   13bc6:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   13bc8:	f7ff fa99 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13bcc:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13bce:	4628      	mov	r0, r5
   13bd0:	f7ff fa9b 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13bd4:	280a      	cmp	r0, #10
   13bd6:	d926      	bls.n	13c26 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
   13bd8:	f105 000a 	add.w	r0, r5, #10
   13bdc:	f7ff fa95 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13be0:	b318      	cbz	r0, 13c2a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
   13be2:	4420      	add	r0, r4
   13be4:	f7ff fa8b 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
   13be8:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
   13bea:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
   13bee:	4620      	mov	r0, r4
   13bf0:	f7ff fa85 	bl	130fe <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13bf4:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13bf6:	4630      	mov	r0, r6
   13bf8:	f7ff fa87 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13bfc:	2804      	cmp	r0, #4
   13bfe:	d916      	bls.n	13c2e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
   13c00:	1d30      	adds	r0, r6, #4
   13c02:	f7ff fa82 	bl	1310a <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13c06:	b1a0      	cbz	r0, 13c32 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
   13c08:	4420      	add	r0, r4
   13c0a:	f7ff fa84 	bl	13116 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
   13c0e:	b2c0      	uxtb	r0, r0
   13c10:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
   13c14:	42a8      	cmp	r0, r5
   13c16:	d80e      	bhi.n	13c36 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
   13c18:	f10d 0306 	add.w	r3, sp, #6
}
   13c1c:	7818      	ldrb	r0, [r3, #0]
   13c1e:	b002      	add	sp, #8
   13c20:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
   13c22:	f002 f9cf 	bl	15fc4 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13c26:	2000      	movs	r0, #0
   13c28:	e7da      	b.n	13be0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13c2a:	2000      	movs	r0, #0
   13c2c:	e7dc      	b.n	13be8 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13c2e:	2000      	movs	r0, #0
   13c30:	e7e9      	b.n	13c06 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13c32:	2000      	movs	r0, #0
   13c34:	e7eb      	b.n	13c0e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
   13c36:	f10d 0307 	add.w	r3, sp, #7
   13c3a:	e7ef      	b.n	13c1c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

00013c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13c3c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13c3e:	b108      	cbz	r0, 13c44 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
   13c40:	6800      	ldr	r0, [r0, #0]
   13c42:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13c44:	f002 f9be 	bl	15fc4 <abort>

00013c48 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13c48:	b108      	cbz	r0, 13c4e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
   13c4a:	6800      	ldr	r0, [r0, #0]
   13c4c:	4770      	bx	lr
}
   13c4e:	4770      	bx	lr

00013c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13c50:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13c52:	b108      	cbz	r0, 13c58 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13c54:	6800      	ldr	r0, [r0, #0]
   13c56:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13c58:	f002 f9b4 	bl	15fc4 <abort>

00013c5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13c5c:	b108      	cbz	r0, 13c62 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
   13c5e:	6800      	ldr	r0, [r0, #0]
   13c60:	4770      	bx	lr
}
   13c62:	4770      	bx	lr

00013c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
   13c64:	4770      	bx	lr

00013c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
   13c66:	4008      	ands	r0, r1
   13c68:	4770      	bx	lr

00013c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
   13c6a:	4108      	asrs	r0, r1
   13c6c:	4770      	bx	lr

00013c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
   13c6e:	4408      	add	r0, r1
   13c70:	4770      	bx	lr

00013c72 <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
   13c72:	43c0      	mvns	r0, r0
   13c74:	4770      	bx	lr

00013c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
   13c76:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
   13c78:	b110      	cbz	r0, 13c80 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
   13c7a:	2000      	movs	r0, #0
   13c7c:	f7ff fff9 	bl	13c72 <_ZN8gemmlowp6BitNotIiEET_S1_>
}
   13c80:	bd08      	pop	{r3, pc}

00013c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
   13c82:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
   13c84:	4288      	cmp	r0, r1
   13c86:	bfac      	ite	ge
   13c88:	2000      	movge	r0, #0
   13c8a:	2001      	movlt	r0, #1
   13c8c:	f7ff fff3 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   13c90:	bd08      	pop	{r3, pc}

00013c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
   13c92:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
   13c94:	4288      	cmp	r0, r1
   13c96:	bfd4      	ite	le
   13c98:	2000      	movle	r0, #0
   13c9a:	2001      	movgt	r0, #1
   13c9c:	f7ff ffeb 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   13ca0:	bd08      	pop	{r3, pc}

00013ca2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13ca2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13ca4:	b108      	cbz	r0, 13caa <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13ca6:	6800      	ldr	r0, [r0, #0]
   13ca8:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13caa:	f002 f98b 	bl	15fc4 <abort>

00013cae <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13cae:	b108      	cbz	r0, 13cb4 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
   13cb0:	6800      	ldr	r0, [r0, #0]
   13cb2:	4770      	bx	lr
}
   13cb4:	4770      	bx	lr

00013cb6 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13cb6:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13cb8:	b108      	cbz	r0, 13cbe <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13cba:	6800      	ldr	r0, [r0, #0]
   13cbc:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13cbe:	f002 f981 	bl	15fc4 <abort>

00013cc2 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13cc2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13cc4:	b108      	cbz	r0, 13cca <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13cc6:	6800      	ldr	r0, [r0, #0]
   13cc8:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13cca:	f002 f97b 	bl	15fc4 <abort>

00013cce <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   13cce:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13cd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13cd2:	b113      	cbz	r3, 13cda <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   13cd4:	2134      	movs	r1, #52	; 0x34
   13cd6:	4798      	blx	r3
}
   13cd8:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13cda:	f002 f973 	bl	15fc4 <abort>

00013cde <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   13cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce2:	b0a3      	sub	sp, #140	; 0x8c
   13ce4:	9217      	str	r2, [sp, #92]	; 0x5c
   13ce6:	461e      	mov	r6, r3
   13ce8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   13cea:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int stride_width = params.stride_width;
   13cec:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   13cf0:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   13cf2:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   13cf6:	920d      	str	r2, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
   13cf8:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   13cfc:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
   13cfe:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   13d02:	920f      	str	r2, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
   13d04:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   13d08:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   13d0a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   13d0e:	9211      	str	r2, [sp, #68]	; 0x44
  const float output_activation_min = params.float_activation_min;
   13d10:	6b02      	ldr	r2, [r0, #48]	; 0x30
   13d12:	9212      	str	r2, [sp, #72]	; 0x48
  const float output_activation_max = params.float_activation_max;
   13d14:	6b42      	ldr	r2, [r0, #52]	; 0x34
   13d16:	9204      	str	r2, [sp, #16]
  inline int32_t DimensionsCount() const { return size_; }
   13d18:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   13d1a:	2a04      	cmp	r2, #4
   13d1c:	d173      	bne.n	13e06 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x128>
   13d1e:	468b      	mov	fp, r1
   13d20:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   13d22:	2a04      	cmp	r2, #4
   13d24:	d171      	bne.n	13e0a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12c>
   13d26:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   13d28:	2a04      	cmp	r2, #4
   13d2a:	d170      	bne.n	13e0e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x130>
    TFLITE_DCHECK_LT(i, size_);
   13d2c:	680a      	ldr	r2, [r1, #0]
   13d2e:	2a00      	cmp	r2, #0
   13d30:	dd6f      	ble.n	13e12 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13d32:	2a05      	cmp	r2, #5
   13d34:	dd6f      	ble.n	13e16 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x138>
   13d36:	684a      	ldr	r2, [r1, #4]
   13d38:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   13d3a:	6839      	ldr	r1, [r7, #0]
   13d3c:	2900      	cmp	r1, #0
   13d3e:	dd6c      	ble.n	13e1a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13d40:	2905      	cmp	r1, #5
   13d42:	dd6c      	ble.n	13e1e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x140>
   13d44:	6879      	ldr	r1, [r7, #4]
   13d46:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13d48:	4291      	cmp	r1, r2
   13d4a:	d16a      	bne.n	13e22 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13d4c:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
   13d4e:	6839      	ldr	r1, [r7, #0]
   13d50:	2900      	cmp	r1, #0
   13d52:	dd68      	ble.n	13e26 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x148>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13d54:	2905      	cmp	r1, #5
   13d56:	dd68      	ble.n	13e2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x14c>
   13d58:	6879      	ldr	r1, [r7, #4]
   13d5a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13d5c:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
   13d5e:	428a      	cmp	r2, r1
   13d60:	dc65      	bgt.n	13e2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x150>
      return __a;
   13d62:	aa21      	add	r2, sp, #132	; 0x84
   13d64:	6812      	ldr	r2, [r2, #0]
   13d66:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   13d68:	f8db 2000 	ldr.w	r2, [fp]
   13d6c:	2a03      	cmp	r2, #3
   13d6e:	dd60      	ble.n	13e32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13d70:	2a05      	cmp	r2, #5
   13d72:	dd60      	ble.n	13e36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x158>
   13d74:	f8db 2004 	ldr.w	r2, [fp, #4]
   13d78:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   13d7a:	6831      	ldr	r1, [r6, #0]
   13d7c:	2903      	cmp	r1, #3
   13d7e:	dd5d      	ble.n	13e3c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13d80:	2905      	cmp	r1, #5
   13d82:	dd5d      	ble.n	13e40 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
   13d84:	6871      	ldr	r1, [r6, #4]
   13d86:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13d88:	4291      	cmp	r1, r2
   13d8a:	d15b      	bne.n	13e44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13d8c:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   13d8e:	6831      	ldr	r1, [r6, #0]
   13d90:	2903      	cmp	r1, #3
   13d92:	dd59      	ble.n	13e48 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13d94:	2905      	cmp	r1, #5
   13d96:	dd59      	ble.n	13e4c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16e>
   13d98:	6871      	ldr	r1, [r6, #4]
   13d9a:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13d9c:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   13d9e:	428a      	cmp	r2, r1
   13da0:	dc56      	bgt.n	13e50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x172>
      return __a;
   13da2:	aa1f      	add	r2, sp, #124	; 0x7c
   13da4:	6812      	ldr	r2, [r2, #0]
   13da6:	9215      	str	r2, [sp, #84]	; 0x54
    TFLITE_DCHECK_LT(i, size_);
   13da8:	6832      	ldr	r2, [r6, #0]
   13daa:	2a00      	cmp	r2, #0
   13dac:	dd52      	ble.n	13e54 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13dae:	2a05      	cmp	r2, #5
   13db0:	dd52      	ble.n	13e58 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17a>
   13db2:	6872      	ldr	r2, [r6, #4]
   13db4:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   13db6:	6839      	ldr	r1, [r7, #0]
   13db8:	2903      	cmp	r1, #3
   13dba:	dd4f      	ble.n	13e5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13dbc:	2905      	cmp	r1, #5
   13dbe:	dd4f      	ble.n	13e60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
   13dc0:	6879      	ldr	r1, [r7, #4]
   13dc2:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13dc4:	4291      	cmp	r1, r2
   13dc6:	d14d      	bne.n	13e64 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13dc8:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   13dca:	6839      	ldr	r1, [r7, #0]
   13dcc:	2903      	cmp	r1, #3
   13dce:	dd4b      	ble.n	13e68 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13dd0:	2905      	cmp	r1, #5
   13dd2:	dd4b      	ble.n	13e6c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18e>
   13dd4:	6879      	ldr	r1, [r7, #4]
   13dd6:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13dd8:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   13dda:	428a      	cmp	r2, r1
   13ddc:	dc48      	bgt.n	13e70 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x192>
      return __a;
   13dde:	aa1d      	add	r2, sp, #116	; 0x74
   13de0:	6812      	ldr	r2, [r2, #0]
   13de2:	9205      	str	r2, [sp, #20]
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
   13de4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   13de6:	2a00      	cmp	r2, #0
   13de8:	d049      	beq.n	13e7e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13dea:	681c      	ldr	r4, [r3, #0]
   13dec:	2c05      	cmp	r4, #5
   13dee:	dd41      	ble.n	13e74 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
   13df0:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   13df2:	2200      	movs	r2, #0
    int buffer_size = 1;
   13df4:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   13df6:	42a2      	cmp	r2, r4
   13df8:	da3e      	bge.n	13e78 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19a>
      buffer_size *= dims_data[i];
   13dfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13dfe:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   13e02:	3201      	adds	r2, #1
   13e04:	e7f7      	b.n	13df6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x118>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   13e06:	f002 f8dd 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   13e0a:	f002 f8db 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   13e0e:	f002 f8d9 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13e12:	f002 f8d7 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e16:	684a      	ldr	r2, [r1, #4]
   13e18:	e78f      	b.n	13d3a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5c>
    TFLITE_DCHECK_LT(i, size_);
   13e1a:	f002 f8d3 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e1e:	6879      	ldr	r1, [r7, #4]
   13e20:	e792      	b.n	13d48 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13e22:	f002 f8cf 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13e26:	f002 f8cd 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e2a:	6879      	ldr	r1, [r7, #4]
   13e2c:	e796      	b.n	13d5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x7e>
	return __b;
   13e2e:	aa20      	add	r2, sp, #128	; 0x80
   13e30:	e798      	b.n	13d64 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x86>
    TFLITE_DCHECK_LT(i, size_);
   13e32:	f002 f8c7 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e36:	f8db 2010 	ldr.w	r2, [fp, #16]
   13e3a:	e79e      	b.n	13d7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x9c>
    TFLITE_DCHECK_LT(i, size_);
   13e3c:	f002 f8c2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e40:	6931      	ldr	r1, [r6, #16]
   13e42:	e7a1      	b.n	13d88 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xaa>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13e44:	f002 f8be 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13e48:	f002 f8bc 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e4c:	6931      	ldr	r1, [r6, #16]
   13e4e:	e7a5      	b.n	13d9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xbe>
   13e50:	aa1e      	add	r2, sp, #120	; 0x78
   13e52:	e7a7      	b.n	13da4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc6>
    TFLITE_DCHECK_LT(i, size_);
   13e54:	f002 f8b6 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e58:	6872      	ldr	r2, [r6, #4]
   13e5a:	e7ac      	b.n	13db6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd8>
    TFLITE_DCHECK_LT(i, size_);
   13e5c:	f002 f8b2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e60:	6939      	ldr	r1, [r7, #16]
   13e62:	e7af      	b.n	13dc4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13e64:	f002 f8ae 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13e68:	f002 f8ac 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e6c:	6939      	ldr	r1, [r7, #16]
   13e6e:	e7b3      	b.n	13dd8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xfa>
   13e70:	aa1c      	add	r2, sp, #112	; 0x70
   13e72:	e7b5      	b.n	13de0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13e74:	3304      	adds	r3, #4
   13e76:	e7bc      	b.n	13df2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   13e78:	9b05      	ldr	r3, [sp, #20]
   13e7a:	4299      	cmp	r1, r3
   13e7c:	d161      	bne.n	13f42 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x264>
    TFLITE_DCHECK_LT(i, size_);
   13e7e:	f8db 3000 	ldr.w	r3, [fp]
   13e82:	2b01      	cmp	r3, #1
   13e84:	dd5f      	ble.n	13f46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x268>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e86:	2b05      	cmp	r3, #5
   13e88:	dd5f      	ble.n	13f4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x26c>
   13e8a:	f8db 3004 	ldr.w	r3, [fp, #4]
   13e8e:	685b      	ldr	r3, [r3, #4]
   13e90:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   13e92:	f8db 3000 	ldr.w	r3, [fp]
   13e96:	2b02      	cmp	r3, #2
   13e98:	dd5b      	ble.n	13f52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e9a:	2b05      	cmp	r3, #5
   13e9c:	dd5b      	ble.n	13f56 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x278>
   13e9e:	f8db 3004 	ldr.w	r3, [fp, #4]
   13ea2:	689b      	ldr	r3, [r3, #8]
   13ea4:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   13ea6:	6833      	ldr	r3, [r6, #0]
   13ea8:	2b01      	cmp	r3, #1
   13eaa:	dd58      	ble.n	13f5e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x280>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13eac:	2b05      	cmp	r3, #5
   13eae:	dd58      	ble.n	13f62 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
   13eb0:	6873      	ldr	r3, [r6, #4]
   13eb2:	685b      	ldr	r3, [r3, #4]
   13eb4:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   13eb6:	6833      	ldr	r3, [r6, #0]
   13eb8:	2b02      	cmp	r3, #2
   13eba:	dd55      	ble.n	13f68 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ebc:	2b05      	cmp	r3, #5
   13ebe:	dd55      	ble.n	13f6c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28e>
   13ec0:	6873      	ldr	r3, [r6, #4]
   13ec2:	689b      	ldr	r3, [r3, #8]
   13ec4:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   13ec6:	683b      	ldr	r3, [r7, #0]
   13ec8:	2b01      	cmp	r3, #1
   13eca:	dd52      	ble.n	13f72 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x294>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ecc:	2b05      	cmp	r3, #5
   13ece:	dd52      	ble.n	13f76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x298>
   13ed0:	687b      	ldr	r3, [r7, #4]
   13ed2:	685b      	ldr	r3, [r3, #4]
   13ed4:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   13ed6:	683b      	ldr	r3, [r7, #0]
   13ed8:	2b02      	cmp	r3, #2
   13eda:	dd4f      	ble.n	13f7c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13edc:	2b05      	cmp	r3, #5
   13ede:	dd4f      	ble.n	13f80 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a2>
   13ee0:	687b      	ldr	r3, [r7, #4]
   13ee2:	689b      	ldr	r3, [r3, #8]
   13ee4:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
   13ee6:	f04f 0a00 	mov.w	sl, #0
   13eea:	46d1      	mov	r9, sl
   13eec:	46da      	mov	sl, fp
   13eee:	46b3      	mov	fp, r6
   13ef0:	463e      	mov	r6, r7
   13ef2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13ef4:	4599      	cmp	r9, r3
   13ef6:	f280 8143 	bge.w	14180 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x4a2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   13efa:	2300      	movs	r3, #0
   13efc:	9300      	str	r3, [sp, #0]
   13efe:	46c8      	mov	r8, r9
   13f00:	46d9      	mov	r9, fp
   13f02:	46d3      	mov	fp, sl
   13f04:	46b2      	mov	sl, r6
   13f06:	9b00      	ldr	r3, [sp, #0]
   13f08:	9907      	ldr	r1, [sp, #28]
   13f0a:	428b      	cmp	r3, r1
   13f0c:	f280 8132 	bge.w	14174 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x496>
      const int in_y_origin = (out_y * stride_height) - pad_height;
   13f10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13f12:	fb02 f303 	mul.w	r3, r2, r3
   13f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13f18:	1a9b      	subs	r3, r3, r2
   13f1a:	9313      	str	r3, [sp, #76]	; 0x4c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   13f1c:	2300      	movs	r3, #0
   13f1e:	9301      	str	r3, [sp, #4]
   13f20:	4647      	mov	r7, r8
   13f22:	46d8      	mov	r8, fp
   13f24:	9b01      	ldr	r3, [sp, #4]
   13f26:	9906      	ldr	r1, [sp, #24]
   13f28:	428b      	cmp	r3, r1
   13f2a:	f280 811d 	bge.w	14168 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
   13f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13f30:	fb02 f303 	mul.w	r3, r2, r3
   13f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13f36:	1a9b      	subs	r3, r3, r2
   13f38:	9314      	str	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   13f3a:	f04f 0b00 	mov.w	fp, #0
   13f3e:	463e      	mov	r6, r7
   13f40:	e0f3      	b.n	1412a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   13f42:	f002 f83f 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13f46:	f002 f83d 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f4a:	f8db 3008 	ldr.w	r3, [fp, #8]
   13f4e:	930b      	str	r3, [sp, #44]	; 0x2c
   13f50:	e79f      	b.n	13e92 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
   13f52:	f002 f837 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f56:	f8db 300c 	ldr.w	r3, [fp, #12]
   13f5a:	930a      	str	r3, [sp, #40]	; 0x28
   13f5c:	e7a3      	b.n	13ea6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
   13f5e:	f002 f831 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f62:	68b3      	ldr	r3, [r6, #8]
   13f64:	9309      	str	r3, [sp, #36]	; 0x24
   13f66:	e7a6      	b.n	13eb6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d8>
    TFLITE_DCHECK_LT(i, size_);
   13f68:	f002 f82c 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f6c:	68f3      	ldr	r3, [r6, #12]
   13f6e:	9308      	str	r3, [sp, #32]
   13f70:	e7a9      	b.n	13ec6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
    TFLITE_DCHECK_LT(i, size_);
   13f72:	f002 f827 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f76:	68bb      	ldr	r3, [r7, #8]
   13f78:	9307      	str	r3, [sp, #28]
   13f7a:	e7ac      	b.n	13ed6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
    TFLITE_DCHECK_LT(i, size_);
   13f7c:	f002 f822 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f80:	68fb      	ldr	r3, [r7, #12]
   13f82:	9306      	str	r3, [sp, #24]
   13f84:	e7af      	b.n	13ee6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x208>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   13f86:	f002 f81d 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   13f8a:	f002 f81b 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   13f8e:	f002 f819 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   13f92:	f002 f817 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   13f96:	f002 f815 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   13f9a:	f002 f813 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   13f9e:	f002 f811 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   13fa2:	f002 f80f 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   13fa6:	f002 f80d 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   13faa:	f002 f80b 	bl	15fc4 <abort>
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   13fae:	3501      	adds	r5, #1
   13fb0:	9b08      	ldr	r3, [sp, #32]
   13fb2:	429d      	cmp	r5, r3
   13fb4:	da69      	bge.n	1408a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ac>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
   13fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13fba:	fb03 2a05 	mla	sl, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   13fbe:	f1ba 0f00 	cmp.w	sl, #0
   13fc2:	dbf4      	blt.n	13fae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   13fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13fc6:	459a      	cmp	sl, r3
   13fc8:	daf1      	bge.n	13fae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   13fca:	2e00      	cmp	r6, #0
   13fcc:	dbef      	blt.n	13fae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   13fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13fd0:	429e      	cmp	r6, r3
   13fd2:	daec      	bge.n	13fae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   13fd4:	2400      	movs	r4, #0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   13fd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13fd8:	429c      	cmp	r4, r3
   13fda:	dae8      	bge.n	13fae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
  inline int32_t DimensionsCount() const { return size_; }
   13fdc:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   13fe0:	2b04      	cmp	r3, #4
   13fe2:	d1d0      	bne.n	13f86 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   13fe4:	9a03      	ldr	r2, [sp, #12]
   13fe6:	2a00      	cmp	r2, #0
   13fe8:	dbcf      	blt.n	13f8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
   13fea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13fee:	429a      	cmp	r2, r3
   13ff0:	dacb      	bge.n	13f8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   13ff2:	2e00      	cmp	r6, #0
   13ff4:	dbcb      	blt.n	13f8e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
   13ff6:	f8d8 1008 	ldr.w	r1, [r8, #8]
   13ffa:	428e      	cmp	r6, r1
   13ffc:	dac7      	bge.n	13f8e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   13ffe:	f1ba 0f00 	cmp.w	sl, #0
   14002:	dbc6      	blt.n	13f92 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
   14004:	f8d8 200c 	ldr.w	r2, [r8, #12]
   14008:	4592      	cmp	sl, r2
   1400a:	dac2      	bge.n	13f92 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1400c:	2c00      	cmp	r4, #0
   1400e:	dbc2      	blt.n	13f96 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
   14010:	f8d8 3010 	ldr.w	r3, [r8, #16]
   14014:	429c      	cmp	r4, r3
   14016:	dabe      	bge.n	13f96 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14018:	9803      	ldr	r0, [sp, #12]
   1401a:	fb01 6100 	mla	r1, r1, r0, r6
   1401e:	fb01 a202 	mla	r2, r1, r2, sl
   14022:	fb02 4303 	mla	r3, r2, r3, r4
                float input_value = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
   14026:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14028:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   1402c:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14030:	2b04      	cmp	r3, #4
   14032:	d1b2      	bne.n	13f9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2bc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14034:	f1bb 0f00 	cmp.w	fp, #0
   14038:	dbb1      	blt.n	13f9e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
   1403a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1403e:	459b      	cmp	fp, r3
   14040:	daad      	bge.n	13f9e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14042:	2f00      	cmp	r7, #0
   14044:	dbad      	blt.n	13fa2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
   14046:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1404a:	428f      	cmp	r7, r1
   1404c:	daa9      	bge.n	13fa2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1404e:	2d00      	cmp	r5, #0
   14050:	dba9      	blt.n	13fa6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
   14052:	f8d9 200c 	ldr.w	r2, [r9, #12]
   14056:	4295      	cmp	r5, r2
   14058:	daa5      	bge.n	13fa6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1405a:	2c00      	cmp	r4, #0
   1405c:	dba5      	blt.n	13faa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
   1405e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   14062:	429c      	cmp	r4, r3
   14064:	daa1      	bge.n	13faa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14066:	fb01 710b 	mla	r1, r1, fp, r7
   1406a:	fb01 5202 	mla	r2, r1, r2, r5
   1406e:	fb02 4303 	mla	r3, r2, r3, r4
                float filter_value = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
   14072:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   14074:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   14078:	f7ec fe6e 	bl	d58 <__aeabi_fmul>
   1407c:	4601      	mov	r1, r0
   1407e:	9802      	ldr	r0, [sp, #8]
   14080:	f7ec fd62 	bl	b48 <__addsf3>
   14084:	9002      	str	r0, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   14086:	3401      	adds	r4, #1
   14088:	e7a5      	b.n	13fd6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1408a:	3701      	adds	r7, #1
   1408c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1408e:	429f      	cmp	r7, r3
   14090:	da05      	bge.n	1409e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3c0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   14092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14094:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14096:	fb03 2607 	mla	r6, r3, r7, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1409a:	2500      	movs	r5, #0
   1409c:	e788      	b.n	13fb0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d2>
   1409e:	9e03      	ldr	r6, [sp, #12]
   140a0:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
   140a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   140a6:	2b00      	cmp	r3, #0
   140a8:	d049      	beq.n	1413e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x460>
            bias_value = bias_data[out_channel];
   140aa:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
   140ae:	9802      	ldr	r0, [sp, #8]
   140b0:	f7ec fd4a 	bl	b48 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   140b4:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   140b8:	2b04      	cmp	r3, #4
   140ba:	d142      	bne.n	14142 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x464>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   140bc:	2e00      	cmp	r6, #0
   140be:	db42      	blt.n	14146 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
   140c0:	f8da 3004 	ldr.w	r3, [sl, #4]
   140c4:	429e      	cmp	r6, r3
   140c6:	da3e      	bge.n	14146 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   140c8:	9b00      	ldr	r3, [sp, #0]
   140ca:	2b00      	cmp	r3, #0
   140cc:	db3d      	blt.n	1414a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
   140ce:	f8da 2008 	ldr.w	r2, [sl, #8]
   140d2:	4293      	cmp	r3, r2
   140d4:	da39      	bge.n	1414a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   140d6:	9901      	ldr	r1, [sp, #4]
   140d8:	2900      	cmp	r1, #0
   140da:	db38      	blt.n	1414e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
   140dc:	f8da 300c 	ldr.w	r3, [sl, #12]
   140e0:	4299      	cmp	r1, r3
   140e2:	da34      	bge.n	1414e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   140e4:	f1bb 0f00 	cmp.w	fp, #0
   140e8:	db33      	blt.n	14152 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
   140ea:	f8da 4010 	ldr.w	r4, [sl, #16]
   140ee:	45a3      	cmp	fp, r4
   140f0:	da2f      	bge.n	14152 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   140f2:	9900      	ldr	r1, [sp, #0]
   140f4:	fb02 1206 	mla	r2, r2, r6, r1
   140f8:	9901      	ldr	r1, [sp, #4]
   140fa:	fb02 1303 	mla	r3, r2, r3, r1
   140fe:	fb03 b404 	mla	r4, r3, r4, fp
   14102:	9019      	str	r0, [sp, #100]	; 0x64
   14104:	9912      	ldr	r1, [sp, #72]	; 0x48
   14106:	911a      	str	r1, [sp, #104]	; 0x68
   14108:	9b04      	ldr	r3, [sp, #16]
   1410a:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   1410c:	f7ec ffc2 	bl	1094 <__aeabi_fcmplt>
   14110:	bb08      	cbnz	r0, 14156 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x478>
      return __a;
   14112:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   14114:	6829      	ldr	r1, [r5, #0]
   14116:	9804      	ldr	r0, [sp, #16]
   14118:	f7ec ffbc 	bl	1094 <__aeabi_fcmplt>
   1411c:	b9e8      	cbnz	r0, 1415a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x47c>
  return min(max(x, output_activation_min), output_activation_max);
   1411e:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   14120:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   14122:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   14126:	f10b 0b01 	add.w	fp, fp, #1
   1412a:	9b05      	ldr	r3, [sp, #20]
   1412c:	459b      	cmp	fp, r3
   1412e:	da16      	bge.n	1415e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x480>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   14130:	2700      	movs	r7, #0
          float total = 0.f;
   14132:	2300      	movs	r3, #0
   14134:	9302      	str	r3, [sp, #8]
   14136:	9603      	str	r6, [sp, #12]
   14138:	f8cd a0bc 	str.w	sl, [sp, #188]	; 0xbc
   1413c:	e7a6      	b.n	1408c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ae>
          float bias_value = 0.0f;
   1413e:	2100      	movs	r1, #0
   14140:	e7b5      	b.n	140ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14142:	f001 ff3f 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14146:	f001 ff3d 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1414a:	f001 ff3b 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1414e:	f001 ff39 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14152:	f001 ff37 	bl	15fc4 <abort>
	return __b;
   14156:	ad1a      	add	r5, sp, #104	; 0x68
   14158:	e7dc      	b.n	14114 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x436>
	return __b;
   1415a:	ad1b      	add	r5, sp, #108	; 0x6c
   1415c:	e7df      	b.n	1411e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x440>
   1415e:	4637      	mov	r7, r6
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14160:	9b01      	ldr	r3, [sp, #4]
   14162:	3301      	adds	r3, #1
   14164:	9301      	str	r3, [sp, #4]
   14166:	e6dd      	b.n	13f24 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x246>
   14168:	46c3      	mov	fp, r8
   1416a:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1416c:	9b00      	ldr	r3, [sp, #0]
   1416e:	3301      	adds	r3, #1
   14170:	9300      	str	r3, [sp, #0]
   14172:	e6c8      	b.n	13f06 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x228>
   14174:	4656      	mov	r6, sl
   14176:	46da      	mov	sl, fp
   14178:	46cb      	mov	fp, r9
  for (int batch = 0; batch < batches; ++batch) {
   1417a:	f108 0901 	add.w	r9, r8, #1
   1417e:	e6b8      	b.n	13ef2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x214>
                                           output_activation_max);
        }
      }
    }
  }
}
   14180:	b023      	add	sp, #140	; 0x8c
   14182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014186 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                               const OpDataConv& data) {
   14186:	b570      	push	{r4, r5, r6, lr}
   14188:	4604      	mov	r4, r0
   1418a:	460e      	mov	r6, r1
   1418c:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   1418e:	6913      	ldr	r3, [r2, #16]
   14190:	425b      	negs	r3, r3
   14192:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   14194:	6953      	ldr	r3, [r2, #20]
   14196:	425b      	negs	r3, r3
   14198:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   1419a:	6993      	ldr	r3, [r2, #24]
   1419c:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   1419e:	69d3      	ldr	r3, [r2, #28]
   141a0:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   141a2:	6a13      	ldr	r3, [r2, #32]
   141a4:	425b      	negs	r3, r3
   141a6:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   141a8:	7808      	ldrb	r0, [r1, #0]
   141aa:	f000 fb54 	bl	14856 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   141ae:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   141b0:	686b      	ldr	r3, [r5, #4]
   141b2:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   141b4:	682b      	ldr	r3, [r5, #0]
   141b6:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   141b8:	68b3      	ldr	r3, [r6, #8]
   141ba:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   141bc:	6873      	ldr	r3, [r6, #4]
   141be:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   141c0:	6973      	ldr	r3, [r6, #20]
   141c2:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   141c4:	6933      	ldr	r3, [r6, #16]
   141c6:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   141c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   141ca:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   141cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   141ce:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   141d0:	4620      	mov	r0, r4
   141d2:	bd70      	pop	{r4, r5, r6, pc}

000141d4 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                           const OpDataConv& data) {
   141d4:	b570      	push	{r4, r5, r6, lr}
   141d6:	4604      	mov	r4, r0
   141d8:	460d      	mov	r5, r1
   141da:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   141dc:	f100 0234 	add.w	r2, r0, #52	; 0x34
   141e0:	f100 0130 	add.w	r1, r0, #48	; 0x30
   141e4:	7b28      	ldrb	r0, [r5, #12]
   141e6:	f7f6 f87f 	bl	a2e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   141ea:	7828      	ldrb	r0, [r5, #0]
   141ec:	f000 fb33 	bl	14856 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   141f0:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   141f2:	6833      	ldr	r3, [r6, #0]
   141f4:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   141f6:	6873      	ldr	r3, [r6, #4]
   141f8:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   141fa:	686b      	ldr	r3, [r5, #4]
   141fc:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   141fe:	68ab      	ldr	r3, [r5, #8]
   14200:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   14202:	692b      	ldr	r3, [r5, #16]
   14204:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   14206:	696b      	ldr	r3, [r5, #20]
   14208:	8223      	strh	r3, [r4, #16]
}
   1420a:	4620      	mov	r0, r4
   1420c:	bd70      	pop	{r4, r5, r6, pc}

0001420e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   1420e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14210:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14212:	b113      	cbz	r3, 1421a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   14214:	2134      	movs	r1, #52	; 0x34
   14216:	4798      	blx	r3
}
   14218:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1421a:	f001 fed3 	bl	15fc4 <abort>

0001421e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   1421e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14222:	b0a1      	sub	sp, #132	; 0x84
   14224:	9217      	str	r2, [sp, #92]	; 0x5c
   14226:	461e      	mov	r6, r3
   14228:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1422a:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int stride_width = params.stride_width;
   1422e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   14232:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   14234:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   14238:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   1423a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   1423e:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   14240:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   14244:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   14246:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   1424a:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   1424c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   14250:	9212      	str	r2, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   14252:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   14256:	9205      	str	r2, [sp, #20]
  const float output_activation_min = params.float_activation_min;
   14258:	6b02      	ldr	r2, [r0, #48]	; 0x30
   1425a:	9213      	str	r2, [sp, #76]	; 0x4c
  const float output_activation_max = params.float_activation_max;
   1425c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1425e:	9206      	str	r2, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   14260:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14262:	2a04      	cmp	r2, #4
   14264:	f040 80b2 	bne.w	143cc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ae>
   14268:	468b      	mov	fp, r1
   1426a:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   1426c:	2a04      	cmp	r2, #4
   1426e:	f040 80af 	bne.w	143d0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
   14272:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14276:	2a04      	cmp	r2, #4
   14278:	f040 80ac 	bne.w	143d4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b6>
    TFLITE_DCHECK_LT(i, size_);
   1427c:	680a      	ldr	r2, [r1, #0]
   1427e:	2a00      	cmp	r2, #0
   14280:	f340 80aa 	ble.w	143d8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ba>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14284:	2a05      	cmp	r2, #5
   14286:	f340 80a9 	ble.w	143dc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
   1428a:	684a      	ldr	r2, [r1, #4]
   1428c:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   1428e:	f8d9 1000 	ldr.w	r1, [r9]
   14292:	2900      	cmp	r1, #0
   14294:	f340 80a4 	ble.w	143e0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14298:	2905      	cmp	r1, #5
   1429a:	f340 80a3 	ble.w	143e4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
   1429e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   142a2:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   142a4:	4291      	cmp	r1, r2
   142a6:	f040 80a0 	bne.w	143ea <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1cc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   142aa:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   142ac:	f8d9 1000 	ldr.w	r1, [r9]
   142b0:	2900      	cmp	r1, #0
   142b2:	f340 809c 	ble.w	143ee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   142b6:	2905      	cmp	r1, #5
   142b8:	f340 809b 	ble.w	143f2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
   142bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
   142c0:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   142c2:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   142c4:	428a      	cmp	r2, r1
   142c6:	f300 8097 	bgt.w	143f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1da>
      return __a;
   142ca:	aa1f      	add	r2, sp, #124	; 0x7c
   142cc:	6812      	ldr	r2, [r2, #0]
   142ce:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   142d0:	6832      	ldr	r2, [r6, #0]
   142d2:	2a03      	cmp	r2, #3
   142d4:	f340 8092 	ble.w	143fc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   142d8:	2a05      	cmp	r2, #5
   142da:	f340 8091 	ble.w	14400 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e2>
   142de:	6872      	ldr	r2, [r6, #4]
   142e0:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   142e2:	f8d9 1000 	ldr.w	r1, [r9]
   142e6:	2903      	cmp	r1, #3
   142e8:	f340 808c 	ble.w	14404 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   142ec:	2905      	cmp	r1, #5
   142ee:	f340 808b 	ble.w	14408 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ea>
   142f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   142f6:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   142f8:	4291      	cmp	r1, r2
   142fa:	f040 8088 	bne.w	1440e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   142fe:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   14300:	f8d9 1000 	ldr.w	r1, [r9]
   14304:	2903      	cmp	r1, #3
   14306:	f340 8084 	ble.w	14412 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1430a:	2905      	cmp	r1, #5
   1430c:	f340 8083 	ble.w	14416 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
   14310:	f8d9 1004 	ldr.w	r1, [r9, #4]
   14314:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14316:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   14318:	428a      	cmp	r2, r1
   1431a:	dc7f      	bgt.n	1441c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
      return __a;
   1431c:	aa1d      	add	r2, sp, #116	; 0x74
   1431e:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   14320:	f8db 2000 	ldr.w	r2, [fp]
   14324:	2a01      	cmp	r2, #1
   14326:	dd7b      	ble.n	14420 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14328:	2a05      	cmp	r2, #5
   1432a:	dd7b      	ble.n	14424 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x206>
   1432c:	f8db 2004 	ldr.w	r2, [fp, #4]
   14330:	6852      	ldr	r2, [r2, #4]
   14332:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   14334:	f8db 2000 	ldr.w	r2, [fp]
   14338:	2a02      	cmp	r2, #2
   1433a:	dd77      	ble.n	1442c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1433c:	2a05      	cmp	r2, #5
   1433e:	dd77      	ble.n	14430 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x212>
   14340:	f8db 2004 	ldr.w	r2, [fp, #4]
   14344:	6892      	ldr	r2, [r2, #8]
   14346:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   14348:	f8db 2000 	ldr.w	r2, [fp]
   1434c:	2a03      	cmp	r2, #3
   1434e:	dd73      	ble.n	14438 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14350:	2a05      	cmp	r2, #5
   14352:	dd73      	ble.n	1443c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21e>
   14354:	f8db 2004 	ldr.w	r2, [fp, #4]
   14358:	68d2      	ldr	r2, [r2, #12]
   1435a:	9204      	str	r2, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   1435c:	6832      	ldr	r2, [r6, #0]
   1435e:	2a01      	cmp	r2, #1
   14360:	dd70      	ble.n	14444 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14362:	2a05      	cmp	r2, #5
   14364:	dd70      	ble.n	14448 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   14366:	6872      	ldr	r2, [r6, #4]
   14368:	6852      	ldr	r2, [r2, #4]
   1436a:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   1436c:	6832      	ldr	r2, [r6, #0]
   1436e:	2a02      	cmp	r2, #2
   14370:	dd6d      	ble.n	1444e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14372:	2a05      	cmp	r2, #5
   14374:	dd6d      	ble.n	14452 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x234>
   14376:	6872      	ldr	r2, [r6, #4]
   14378:	6892      	ldr	r2, [r2, #8]
   1437a:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   1437c:	f8d9 2000 	ldr.w	r2, [r9]
   14380:	2a01      	cmp	r2, #1
   14382:	dd69      	ble.n	14458 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14384:	2a05      	cmp	r2, #5
   14386:	dd69      	ble.n	1445c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23e>
   14388:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1438c:	6852      	ldr	r2, [r2, #4]
   1438e:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   14390:	f8d9 2000 	ldr.w	r2, [r9]
   14394:	2a02      	cmp	r2, #2
   14396:	dd65      	ble.n	14464 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x246>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14398:	2a05      	cmp	r2, #5
   1439a:	dd65      	ble.n	14468 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24a>
   1439c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   143a0:	6892      	ldr	r2, [r2, #8]
   143a2:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   143a4:	9a04      	ldr	r2, [sp, #16]
   143a6:	9805      	ldr	r0, [sp, #20]
   143a8:	fb02 f200 	mul.w	r2, r2, r0
   143ac:	428a      	cmp	r2, r1
   143ae:	d15f      	bne.n	14470 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   143b0:	681c      	ldr	r4, [r3, #0]
   143b2:	2c05      	cmp	r4, #5
   143b4:	dd5e      	ble.n	14474 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x256>
   143b6:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   143b8:	2200      	movs	r2, #0
    int buffer_size = 1;
   143ba:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
   143bc:	42a2      	cmp	r2, r4
   143be:	da5b      	bge.n	14478 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
      buffer_size *= dims_data[i];
   143c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   143c4:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
   143c8:	3201      	adds	r2, #1
   143ca:	e7f7      	b.n	143bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   143cc:	f001 fdfa 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   143d0:	f001 fdf8 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   143d4:	f001 fdf6 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   143d8:	f001 fdf4 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   143dc:	684a      	ldr	r2, [r1, #4]
   143de:	e756      	b.n	1428e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
    TFLITE_DCHECK_LT(i, size_);
   143e0:	f001 fdf0 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   143e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   143e8:	e75c      	b.n	142a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   143ea:	f001 fdeb 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   143ee:	f001 fde9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   143f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   143f6:	e764      	b.n	142c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xa4>
	return __b;
   143f8:	aa1e      	add	r2, sp, #120	; 0x78
   143fa:	e767      	b.n	142cc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xae>
    TFLITE_DCHECK_LT(i, size_);
   143fc:	f001 fde2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14400:	6932      	ldr	r2, [r6, #16]
   14402:	e76e      	b.n	142e2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc4>
    TFLITE_DCHECK_LT(i, size_);
   14404:	f001 fdde 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14408:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1440c:	e774      	b.n	142f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1440e:	f001 fdd9 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14412:	f001 fdd7 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14416:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1441a:	e77c      	b.n	14316 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf8>
   1441c:	aa1c      	add	r2, sp, #112	; 0x70
   1441e:	e77e      	b.n	1431e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    TFLITE_DCHECK_LT(i, size_);
   14420:	f001 fdd0 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14424:	f8db 2008 	ldr.w	r2, [fp, #8]
   14428:	920c      	str	r2, [sp, #48]	; 0x30
   1442a:	e783      	b.n	14334 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x116>
    TFLITE_DCHECK_LT(i, size_);
   1442c:	f001 fdca 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14430:	f8db 200c 	ldr.w	r2, [fp, #12]
   14434:	920b      	str	r2, [sp, #44]	; 0x2c
   14436:	e787      	b.n	14348 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12a>
    TFLITE_DCHECK_LT(i, size_);
   14438:	f001 fdc4 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1443c:	f8db 2010 	ldr.w	r2, [fp, #16]
   14440:	9204      	str	r2, [sp, #16]
   14442:	e78b      	b.n	1435c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
    TFLITE_DCHECK_LT(i, size_);
   14444:	f001 fdbe 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14448:	68b2      	ldr	r2, [r6, #8]
   1444a:	920a      	str	r2, [sp, #40]	; 0x28
   1444c:	e78e      	b.n	1436c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14e>
    TFLITE_DCHECK_LT(i, size_);
   1444e:	f001 fdb9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14452:	68f2      	ldr	r2, [r6, #12]
   14454:	9209      	str	r2, [sp, #36]	; 0x24
   14456:	e791      	b.n	1437c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   14458:	f001 fdb4 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1445c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   14460:	9208      	str	r2, [sp, #32]
   14462:	e795      	b.n	14390 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x172>
    TFLITE_DCHECK_LT(i, size_);
   14464:	f001 fdae 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14468:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1446c:	9207      	str	r2, [sp, #28]
   1446e:	e799      	b.n	143a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x186>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   14470:	f001 fda8 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14474:	3304      	adds	r3, #4
   14476:	e79f      	b.n	143b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   14478:	428d      	cmp	r5, r1
   1447a:	d11e      	bne.n	144ba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x29c>

  for (int b = 0; b < batches; ++b) {
   1447c:	f04f 0a00 	mov.w	sl, #0
   14480:	464c      	mov	r4, r9
   14482:	46d1      	mov	r9, sl
   14484:	46b2      	mov	sl, r6
   14486:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14488:	4599      	cmp	r9, r3
   1448a:	f280 811a 	bge.w	146c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1448e:	2300      	movs	r3, #0
   14490:	9300      	str	r3, [sp, #0]
   14492:	46c8      	mov	r8, r9
   14494:	46d1      	mov	r9, sl
   14496:	46a2      	mov	sl, r4
   14498:	9b00      	ldr	r3, [sp, #0]
   1449a:	9a08      	ldr	r2, [sp, #32]
   1449c:	4293      	cmp	r3, r2
   1449e:	f280 810b 	bge.w	146b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x49a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   144a2:	2300      	movs	r3, #0
   144a4:	9301      	str	r3, [sp, #4]
   144a6:	4647      	mov	r7, r8
   144a8:	46d0      	mov	r8, sl
   144aa:	9b01      	ldr	r3, [sp, #4]
   144ac:	9a07      	ldr	r2, [sp, #28]
   144ae:	4293      	cmp	r3, r2
   144b0:	f280 80fc 	bge.w	146ac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48e>
        for (int ic = 0; ic < input_depth; ++ic) {
   144b4:	f04f 0a00 	mov.w	sl, #0
   144b8:	e0ee      	b.n	14698 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x47a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   144ba:	f001 fd83 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   144be:	f001 fd81 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   144c2:	f001 fd7f 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   144c6:	f001 fd7d 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   144ca:	f001 fd7b 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   144ce:	f001 fd79 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   144d2:	f001 fd77 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   144d6:	f001 fd75 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   144da:	f001 fd73 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   144de:	f001 fd71 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   144e2:	f001 fd6f 	bl	15fc4 <abort>
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   144e6:	3601      	adds	r6, #1
   144e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   144ea:	429e      	cmp	r6, r3
   144ec:	da60      	bge.n	145b0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x392>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
   144ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   144f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   144f2:	fb03 2306 	mla	r3, r3, r6, r2
                const int in_y =
   144f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   144f8:	9915      	ldr	r1, [sp, #84]	; 0x54
   144fa:	fb02 1205 	mla	r2, r2, r5, r1
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   144fe:	2b00      	cmp	r3, #0
   14500:	dbf1      	blt.n	144e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   14502:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14504:	428b      	cmp	r3, r1
   14506:	daee      	bge.n	144e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   14508:	2a00      	cmp	r2, #0
   1450a:	dbec      	blt.n	144e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   1450c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1450e:	428a      	cmp	r2, r1
   14510:	dae9      	bge.n	144e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
  inline int32_t DimensionsCount() const { return size_; }
   14512:	f8db 1000 	ldr.w	r1, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14516:	2904      	cmp	r1, #4
   14518:	d1d1      	bne.n	144be <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1451a:	2f00      	cmp	r7, #0
   1451c:	dbd1      	blt.n	144c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
   1451e:	f8db 1004 	ldr.w	r1, [fp, #4]
   14522:	428f      	cmp	r7, r1
   14524:	dacd      	bge.n	144c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14526:	2a00      	cmp	r2, #0
   14528:	dbcd      	blt.n	144c6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
   1452a:	f8db c008 	ldr.w	ip, [fp, #8]
   1452e:	4562      	cmp	r2, ip
   14530:	dac9      	bge.n	144c6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14532:	2b00      	cmp	r3, #0
   14534:	dbc9      	blt.n	144ca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
   14536:	f8db 000c 	ldr.w	r0, [fp, #12]
   1453a:	4283      	cmp	r3, r0
   1453c:	dac5      	bge.n	144ca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1453e:	f1ba 0f00 	cmp.w	sl, #0
   14542:	dbc4      	blt.n	144ce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
   14544:	f8db 1010 	ldr.w	r1, [fp, #16]
   14548:	458a      	cmp	sl, r1
   1454a:	dac0      	bge.n	144ce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1454c:	fb0c 2207 	mla	r2, ip, r7, r2
   14550:	fb02 3300 	mla	r3, r2, r0, r3
   14554:	fb03 a101 	mla	r1, r3, r1, sl
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   14558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1455a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   1455e:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14562:	2b04      	cmp	r3, #4
   14564:	d1b5      	bne.n	144d2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14566:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1456a:	2b00      	cmp	r3, #0
   1456c:	ddb3      	ble.n	144d6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1456e:	2d00      	cmp	r5, #0
   14570:	dbb3      	blt.n	144da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
   14572:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14576:	429d      	cmp	r5, r3
   14578:	daaf      	bge.n	144da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1457a:	2e00      	cmp	r6, #0
   1457c:	dbaf      	blt.n	144de <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
   1457e:	f8d9 200c 	ldr.w	r2, [r9, #12]
   14582:	4296      	cmp	r6, r2
   14584:	daab      	bge.n	144de <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14586:	2c00      	cmp	r4, #0
   14588:	dbab      	blt.n	144e2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
   1458a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1458e:	429c      	cmp	r4, r3
   14590:	daa7      	bge.n	144e2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14592:	fb02 6205 	mla	r2, r2, r5, r6
   14596:	fb02 4303 	mla	r3, r2, r3, r4
                  float filter_value = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
   1459a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1459c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   145a0:	f7ec fbda 	bl	d58 <__aeabi_fmul>
   145a4:	4601      	mov	r1, r0
   145a6:	9803      	ldr	r0, [sp, #12]
   145a8:	f7ec face 	bl	b48 <__addsf3>
   145ac:	9003      	str	r0, [sp, #12]
   145ae:	e79a      	b.n	144e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   145b0:	3501      	adds	r5, #1
   145b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145b4:	429d      	cmp	r5, r3
   145b6:	da01      	bge.n	145bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x39e>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   145b8:	2600      	movs	r6, #0
   145ba:	e795      	b.n	144e8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ca>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
   145bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   145be:	2b00      	cmp	r3, #0
   145c0:	d058      	beq.n	14674 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x456>
              bias_value = bias_data[oc];
   145c2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
   145c6:	9803      	ldr	r0, [sp, #12]
   145c8:	f7ec fabe 	bl	b48 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   145cc:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   145d0:	2b04      	cmp	r3, #4
   145d2:	d151      	bne.n	14678 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   145d4:	2f00      	cmp	r7, #0
   145d6:	db51      	blt.n	1467c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
   145d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   145dc:	429f      	cmp	r7, r3
   145de:	da4d      	bge.n	1467c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   145e0:	9b00      	ldr	r3, [sp, #0]
   145e2:	2b00      	cmp	r3, #0
   145e4:	db4c      	blt.n	14680 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
   145e6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   145ea:	4293      	cmp	r3, r2
   145ec:	da48      	bge.n	14680 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   145ee:	9901      	ldr	r1, [sp, #4]
   145f0:	2900      	cmp	r1, #0
   145f2:	db47      	blt.n	14684 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
   145f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   145f8:	4299      	cmp	r1, r3
   145fa:	da43      	bge.n	14684 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   145fc:	2c00      	cmp	r4, #0
   145fe:	db43      	blt.n	14688 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
   14600:	f8d8 1010 	ldr.w	r1, [r8, #16]
   14604:	428c      	cmp	r4, r1
   14606:	da3f      	bge.n	14688 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14608:	9d00      	ldr	r5, [sp, #0]
   1460a:	fb02 5207 	mla	r2, r2, r7, r5
   1460e:	9d01      	ldr	r5, [sp, #4]
   14610:	fb02 5303 	mla	r3, r2, r3, r5
   14614:	fb03 4401 	mla	r4, r3, r1, r4
   14618:	9019      	str	r0, [sp, #100]	; 0x64
   1461a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1461c:	911a      	str	r1, [sp, #104]	; 0x68
   1461e:	9b06      	ldr	r3, [sp, #24]
   14620:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   14622:	f7ec fd37 	bl	1094 <__aeabi_fcmplt>
   14626:	2800      	cmp	r0, #0
   14628:	d130      	bne.n	1468c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46e>
      return __a;
   1462a:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   1462c:	6829      	ldr	r1, [r5, #0]
   1462e:	9806      	ldr	r0, [sp, #24]
   14630:	f7ec fd30 	bl	1094 <__aeabi_fcmplt>
   14634:	bb60      	cbnz	r0, 14690 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x472>
   14636:	682b      	ldr	r3, [r5, #0]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   14638:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   1463a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; m++) {
   1463e:	9b02      	ldr	r3, [sp, #8]
   14640:	3301      	adds	r3, #1
   14642:	9302      	str	r3, [sp, #8]
   14644:	9902      	ldr	r1, [sp, #8]
   14646:	9b05      	ldr	r3, [sp, #20]
   14648:	4299      	cmp	r1, r3
   1464a:	da23      	bge.n	14694 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x476>
            const int oc = m + ic * depth_multiplier;
   1464c:	fb03 140a 	mla	r4, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
   14650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14652:	9a01      	ldr	r2, [sp, #4]
   14654:	fb03 f302 	mul.w	r3, r3, r2
   14658:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1465a:	1a9b      	subs	r3, r3, r2
   1465c:	9314      	str	r3, [sp, #80]	; 0x50
            const int in_y_origin = (out_y * stride_height) - pad_height;
   1465e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14660:	9a00      	ldr	r2, [sp, #0]
   14662:	fb03 f302 	mul.w	r3, r3, r2
   14666:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14668:	1a9b      	subs	r3, r3, r2
   1466a:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1466c:	2500      	movs	r5, #0
            float total = 0.f;
   1466e:	2300      	movs	r3, #0
   14670:	9303      	str	r3, [sp, #12]
   14672:	e79e      	b.n	145b2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x394>
            float bias_value = 0.0f;
   14674:	2100      	movs	r1, #0
   14676:	e7a6      	b.n	145c6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3a8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14678:	f001 fca4 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1467c:	f001 fca2 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14680:	f001 fca0 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14684:	f001 fc9e 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14688:	f001 fc9c 	bl	15fc4 <abort>
	return __b;
   1468c:	ad1a      	add	r5, sp, #104	; 0x68
   1468e:	e7cd      	b.n	1462c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x40e>
	return __b;
   14690:	ad1b      	add	r5, sp, #108	; 0x6c
   14692:	e7d0      	b.n	14636 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x418>
        for (int ic = 0; ic < input_depth; ++ic) {
   14694:	f10a 0a01 	add.w	sl, sl, #1
   14698:	9b04      	ldr	r3, [sp, #16]
   1469a:	459a      	cmp	sl, r3
   1469c:	da02      	bge.n	146a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x486>
          for (int m = 0; m < depth_multiplier; m++) {
   1469e:	2300      	movs	r3, #0
   146a0:	9302      	str	r3, [sp, #8]
   146a2:	e7cf      	b.n	14644 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x426>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   146a4:	9b01      	ldr	r3, [sp, #4]
   146a6:	3301      	adds	r3, #1
   146a8:	9301      	str	r3, [sp, #4]
   146aa:	e6fe      	b.n	144aa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x28c>
   146ac:	46c2      	mov	sl, r8
   146ae:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   146b0:	9b00      	ldr	r3, [sp, #0]
   146b2:	3301      	adds	r3, #1
   146b4:	9300      	str	r3, [sp, #0]
   146b6:	e6ef      	b.n	14498 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27a>
   146b8:	4654      	mov	r4, sl
   146ba:	46ca      	mov	sl, r9
  for (int b = 0; b < batches; ++b) {
   146bc:	f108 0901 	add.w	r9, r8, #1
   146c0:	e6e1      	b.n	14486 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x268>
          }
        }
      }
    }
  }
}
   146c2:	b021      	add	sp, #132	; 0x84
   146c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000146c8 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   146c8:	b570      	push	{r4, r5, r6, lr}
   146ca:	4604      	mov	r4, r0
   146cc:	460e      	mov	r6, r1
   146ce:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   146d0:	6913      	ldr	r3, [r2, #16]
   146d2:	425b      	negs	r3, r3
   146d4:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   146d6:	6953      	ldr	r3, [r2, #20]
   146d8:	425b      	negs	r3, r3
   146da:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   146dc:	6993      	ldr	r3, [r2, #24]
   146de:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   146e0:	69d3      	ldr	r3, [r2, #28]
   146e2:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   146e4:	6a13      	ldr	r3, [r2, #32]
   146e6:	425b      	negs	r3, r3
   146e8:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   146ea:	7808      	ldrb	r0, [r1, #0]
   146ec:	f000 f8b3 	bl	14856 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   146f0:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   146f2:	686b      	ldr	r3, [r5, #4]
   146f4:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   146f6:	682b      	ldr	r3, [r5, #0]
   146f8:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   146fa:	68b3      	ldr	r3, [r6, #8]
   146fc:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   146fe:	6873      	ldr	r3, [r6, #4]
   14700:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   14702:	69b3      	ldr	r3, [r6, #24]
   14704:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   14706:	6973      	ldr	r3, [r6, #20]
   14708:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
   1470a:	68f3      	ldr	r3, [r6, #12]
   1470c:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
   1470e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14710:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   14712:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14714:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   14716:	4620      	mov	r0, r4
   14718:	bd70      	pop	{r4, r5, r6, pc}

0001471a <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   1471a:	b570      	push	{r4, r5, r6, lr}
   1471c:	4604      	mov	r4, r0
   1471e:	460d      	mov	r5, r1
   14720:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   14722:	f100 0234 	add.w	r2, r0, #52	; 0x34
   14726:	f100 0130 	add.w	r1, r0, #48	; 0x30
   1472a:	7c28      	ldrb	r0, [r5, #16]
   1472c:	f7f5 fddc 	bl	a2e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   14730:	7828      	ldrb	r0, [r5, #0]
   14732:	f000 f890 	bl	14856 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   14736:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   14738:	6833      	ldr	r3, [r6, #0]
   1473a:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   1473c:	6873      	ldr	r3, [r6, #4]
   1473e:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   14740:	686b      	ldr	r3, [r5, #4]
   14742:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   14744:	68ab      	ldr	r3, [r5, #8]
   14746:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   14748:	696b      	ldr	r3, [r5, #20]
   1474a:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   1474c:	69ab      	ldr	r3, [r5, #24]
   1474e:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
   14750:	68eb      	ldr	r3, [r5, #12]
   14752:	8263      	strh	r3, [r4, #18]
}
   14754:	4620      	mov	r0, r4
   14756:	bd70      	pop	{r4, r5, r6, pc}

00014758 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   14758:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1475a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1475c:	b113      	cbz	r3, 14764 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
   1475e:	2120      	movs	r1, #32
   14760:	4798      	blx	r3
}
   14762:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14764:	f001 fc2e 	bl	15fc4 <abort>

00014768 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
   14768:	694a      	ldr	r2, [r1, #20]
   1476a:	4252      	negs	r2, r2
   1476c:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   1476e:	698a      	ldr	r2, [r1, #24]
   14770:	4252      	negs	r2, r2
   14772:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   14774:	69ca      	ldr	r2, [r1, #28]
   14776:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   14778:	680a      	ldr	r2, [r1, #0]
   1477a:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   1477c:	684a      	ldr	r2, [r1, #4]
   1477e:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   14780:	688a      	ldr	r2, [r1, #8]
   14782:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   14784:	68ca      	ldr	r2, [r1, #12]
   14786:	6182      	str	r2, [r0, #24]
  return op_params;
}
   14788:	4770      	bx	lr

0001478a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   1478a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1478e:	b084      	sub	sp, #16
   14790:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14792:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
   14794:	2a01      	cmp	r2, #1
   14796:	d103      	bne.n	147a0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
   14798:	2000      	movs	r0, #0
}
   1479a:	b004      	add	sp, #16
   1479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   147a0:	4604      	mov	r4, r0
   147a2:	4688      	mov	r8, r1
   147a4:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
   147a6:	2200      	movs	r2, #0
   147a8:	2300      	movs	r3, #0
   147aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   147ae:	ab02      	add	r3, sp, #8
   147b0:	9301      	str	r3, [sp, #4]
   147b2:	9600      	str	r6, [sp, #0]
   147b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   147b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   147b8:	4639      	mov	r1, r7
   147ba:	f7ec fee1 	bl	1580 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   147be:	2800      	cmp	r0, #0
   147c0:	d1eb      	bne.n	1479a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   147c2:	1d2b      	adds	r3, r5, #4
   147c4:	462a      	mov	r2, r5
   147c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   147ca:	f7f4 fc65 	bl	9098 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
   147ce:	693b      	ldr	r3, [r7, #16]
   147d0:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
   147d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   147d4:	691b      	ldr	r3, [r3, #16]
   147d6:	b96b      	cbnz	r3, 147f4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
   147d8:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
   147da:	6933      	ldr	r3, [r6, #16]
   147dc:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   147de:	f105 030c 	add.w	r3, r5, #12
   147e2:	9300      	str	r3, [sp, #0]
   147e4:	f105 0308 	add.w	r3, r5, #8
   147e8:	4632      	mov	r2, r6
   147ea:	4641      	mov	r1, r8
   147ec:	4620      	mov	r0, r4
   147ee:	f7f4 fe1b 	bl	9428 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
   147f2:	e7d2      	b.n	1479a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
   147f4:	f001 fbe6 	bl	15fc4 <abort>

000147f8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
   147f8:	b510      	push	{r4, lr}
   147fa:	4604      	mov	r4, r0
   147fc:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
   147fe:	f104 0220 	add.w	r2, r4, #32
   14802:	f104 011c 	add.w	r1, r4, #28
   14806:	f7f5 fd6f 	bl	a2e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
   1480a:	4620      	mov	r0, r4
   1480c:	bd10      	pop	{r4, pc}

0001480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   1480e:	b570      	push	{r4, r5, r6, lr}
   14810:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   14812:	b1b9      	cbz	r1, 14844 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
   14814:	684d      	ldr	r5, [r1, #4]
   14816:	b1ad      	cbz	r5, 14844 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   14818:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
   1481c:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   1481e:	2e05      	cmp	r6, #5
   14820:	dd07      	ble.n	14832 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
   14822:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   14826:	429e      	cmp	r6, r3
   14828:	d210      	bcs.n	1484c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
   1482a:	00b0      	lsls	r0, r6, #2
   1482c:	f001 fbc8 	bl	15fc0 <_Znaj>
   14830:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14832:	6823      	ldr	r3, [r4, #0]
   14834:	2b05      	cmp	r3, #5
   14836:	dd0c      	ble.n	14852 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
   14838:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   1483a:	00b2      	lsls	r2, r6, #2
   1483c:	4629      	mov	r1, r5
   1483e:	f001 fbcc 	bl	15fda <memcpy>
  }
   14842:	e001      	b.n	14848 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
   14844:	2300      	movs	r3, #0
   14846:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   14848:	4620      	mov	r0, r4
   1484a:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
   1484c:	f04f 30ff 	mov.w	r0, #4294967295
   14850:	e7ec      	b.n	1482c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14852:	1d20      	adds	r0, r4, #4
   14854:	e7f1      	b.n	1483a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

00014856 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   14856:	2801      	cmp	r0, #1
   14858:	d002      	beq.n	14860 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
   1485a:	2802      	cmp	r0, #2
   1485c:	d000      	beq.n	14860 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   1485e:	2000      	movs	r0, #0
  }
}
   14860:	4770      	bx	lr

00014862 <_ZN6tflite17CountLeadingZerosIjEEiT_>:
  return integer_input ? __builtin_clz(integer_input)
   14862:	b110      	cbz	r0, 1486a <_ZN6tflite17CountLeadingZerosIjEEiT_+0x8>
   14864:	fab0 f080 	clz	r0, r0
   14868:	4770      	bx	lr
   1486a:	2020      	movs	r0, #32
}
   1486c:	4770      	bx	lr

0001486e <_ZN8gemmlowp3SubIiEET_S1_S1_>:
}
   1486e:	1a40      	subs	r0, r0, r1
   14870:	4770      	bx	lr

00014872 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   14872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14876:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14878:	2001      	movs	r0, #1
   1487a:	f7ff f9f3 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1487e:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   14880:	2000      	movs	r0, #0
   14882:	f7ff f9ef 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14886:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14888:	2001      	movs	r0, #1
   1488a:	f7ff f9eb 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1488e:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   14890:	4631      	mov	r1, r6
   14892:	4620      	mov	r0, r4
   14894:	f7ff f9e7 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14898:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   1489a:	2101      	movs	r1, #1
   1489c:	4630      	mov	r0, r6
   1489e:	f7ff f9e4 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   148a2:	4606      	mov	r6, r0
   148a4:	4641      	mov	r1, r8
   148a6:	4620      	mov	r0, r4
   148a8:	f7ff f9eb 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   148ac:	4629      	mov	r1, r5
   148ae:	f7ff f9da 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   148b2:	4601      	mov	r1, r0
   148b4:	4630      	mov	r0, r6
   148b6:	f7ff f9da 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   148ba:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   148bc:	2101      	movs	r1, #1
   148be:	4620      	mov	r0, r4
   148c0:	f7ff f9d3 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   148c4:	4604      	mov	r4, r0
   148c6:	4631      	mov	r1, r6
   148c8:	4638      	mov	r0, r7
   148ca:	f7ff f9e2 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   148ce:	4629      	mov	r1, r5
   148d0:	f7ff f9c9 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   148d4:	4601      	mov	r1, r0
   148d6:	4620      	mov	r0, r4
   148d8:	f7ff f9c9 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   148dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000148e0 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
   148e0:	b4f0      	push	{r4, r5, r6, r7}
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
   148e2:	17c7      	asrs	r7, r0, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   148e4:	2301      	movs	r3, #1
   148e6:	fa03 f101 	lsl.w	r1, r3, r1
   148ea:	17cd      	asrs	r5, r1, #31
   148ec:	fb01 f307 	mul.w	r3, r1, r7
   148f0:	fb00 3305 	mla	r3, r0, r5, r3
   148f4:	fba1 0100 	umull	r0, r1, r1, r0
   148f8:	4419      	add	r1, r3
             ? min
   148fa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   148fe:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   14902:	db06      	blt.n	14912 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x32>
             : wide_shifted > max ? max
   14904:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   14908:	f171 0300 	sbcs.w	r3, r1, #0
   1490c:	da04      	bge.n	14918 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x38>
}
   1490e:	bcf0      	pop	{r4, r5, r6, r7}
   14910:	4770      	bx	lr
             ? min
   14912:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   14916:	e7fa      	b.n	1490e <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>
             : wide_shifted > max ? max
   14918:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
   1491c:	e7f7      	b.n	1490e <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>

0001491e <_ZN8gemmlowp6BitXorIiEET_S1_S1_>:
}
   1491e:	4048      	eors	r0, r1
   14920:	4770      	bx	lr

00014922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
   14922:	b570      	push	{r4, r5, r6, lr}
   14924:	4606      	mov	r6, r0
   14926:	4615      	mov	r5, r2
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
   14928:	f7ff f99d 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1492c:	4604      	mov	r4, r0
   1492e:	4630      	mov	r0, r6
   14930:	f7ff f99f 	bl	13c72 <_ZN8gemmlowp6BitNotIiEET_S1_>
   14934:	4629      	mov	r1, r5
   14936:	f7ff f996 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1493a:	4601      	mov	r1, r0
   1493c:	4620      	mov	r0, r4
   1493e:	f7ff ffee 	bl	1491e <_ZN8gemmlowp6BitXorIiEET_S1_S1_>
}
   14942:	bd70      	pop	{r4, r5, r6, pc}

00014944 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   14944:	b430      	push	{r4, r5}
  std::int64_t b64 = b;
   14946:	17cb      	asrs	r3, r1, #31
  std::int64_t sum = a64 + b64;
   14948:	180a      	adds	r2, r1, r0
   1494a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1494e:	2a00      	cmp	r2, #0
   14950:	f173 0100 	sbcs.w	r1, r3, #0
   14954:	db0d      	blt.n	14972 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x2e>
   14956:	2101      	movs	r1, #1
   14958:	2000      	movs	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   1495a:	1854      	adds	r4, r2, r1
   1495c:	eb43 0500 	adc.w	r5, r3, r0
   14960:	0feb      	lsrs	r3, r5, #31
   14962:	18e4      	adds	r4, r4, r3
   14964:	f145 0500 	adc.w	r5, r5, #0
   14968:	0860      	lsrs	r0, r4, #1
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   1496a:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
   1496e:	bc30      	pop	{r4, r5}
   14970:	4770      	bx	lr
  std::int64_t sign = sum >= 0 ? 1 : -1;
   14972:	f04f 31ff 	mov.w	r1, #4294967295
   14976:	4608      	mov	r0, r1
   14978:	e7ef      	b.n	1495a <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x16>

0001497a <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   1497a:	b508      	push	{r3, lr}
   1497c:	f7ff f977 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14980:	bd08      	pop	{r3, pc}

00014982 <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
}
   14982:	4770      	bx	lr

00014984 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   14984:	b508      	push	{r3, lr}
   14986:	f7ff ff72 	bl	1486e <_ZN8gemmlowp3SubIiEET_S1_S1_>
   1498a:	bd08      	pop	{r3, pc}

0001498c <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
   1498c:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(!a);
   1498e:	fab0 f080 	clz	r0, r0
   14992:	0940      	lsrs	r0, r0, #5
   14994:	f7ff f96f 	bl	13c76 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   14998:	bd08      	pop	{r3, pc}

0001499a <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   1499a:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   1499c:	f7f8 f8ac 	bl	caf8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>
}
   149a0:	bd08      	pop	{r3, pc}

000149a2 <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   149a2:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   149a4:	f7f8 f8d8 	bl	cb58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>
}
   149a8:	bd08      	pop	{r3, pc}

000149aa <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
   149aa:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   149ac:	f7ff ffb9 	bl	14922 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
   149b0:	bd08      	pop	{r3, pc}

000149b2 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   149b2:	b508      	push	{r3, lr}
   149b4:	f7ff f95b 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   149b8:	bd08      	pop	{r3, pc}

000149ba <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   149ba:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   149bc:	f7ff ff59 	bl	14872 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>
}
   149c0:	bd08      	pop	{r3, pc}

000149c2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   149c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149c6:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   149c8:	2003      	movs	r0, #3
   149ca:	f7ff f94b 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   149ce:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   149d0:	2000      	movs	r0, #0
   149d2:	f7ff f947 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   149d6:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   149d8:	2001      	movs	r0, #1
   149da:	f7ff f943 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   149de:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   149e0:	4631      	mov	r1, r6
   149e2:	4620      	mov	r0, r4
   149e4:	f7ff f93f 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   149e8:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   149ea:	2101      	movs	r1, #1
   149ec:	4630      	mov	r0, r6
   149ee:	f7ff f93c 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   149f2:	4606      	mov	r6, r0
   149f4:	4641      	mov	r1, r8
   149f6:	4620      	mov	r0, r4
   149f8:	f7ff f943 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   149fc:	4629      	mov	r1, r5
   149fe:	f7ff f932 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14a02:	4601      	mov	r1, r0
   14a04:	4630      	mov	r0, r6
   14a06:	f7ff f932 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14a0a:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14a0c:	2102      	movs	r1, #2
   14a0e:	4620      	mov	r0, r4
   14a10:	f7ff f92b 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14a14:	4604      	mov	r4, r0
   14a16:	4631      	mov	r1, r6
   14a18:	4638      	mov	r0, r7
   14a1a:	f7ff f93a 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14a1e:	4629      	mov	r1, r5
   14a20:	f7ff f921 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14a24:	4601      	mov	r1, r0
   14a26:	4620      	mov	r0, r4
   14a28:	f7ff f921 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014a30 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   14a30:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14a32:	f7ff ffc6 	bl	149c2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>
}
   14a36:	bd08      	pop	{r3, pc}

00014a38 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
   14a38:	b508      	push	{r3, lr}
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
   14a3a:	f7ff f918 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14a3e:	bd08      	pop	{r3, pc}

00014a40 <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
   14a40:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14a42:	f7ff fff9 	bl	14a38 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>
}
   14a46:	bd08      	pop	{r3, pc}

00014a48 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   14a48:	b508      	push	{r3, lr}
   14a4a:	f7ff f910 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14a4e:	bd08      	pop	{r3, pc}

00014a50 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   14a50:	b508      	push	{r3, lr}
   14a52:	f7ff ff0c 	bl	1486e <_ZN8gemmlowp3SubIiEET_S1_S1_>
   14a56:	bd08      	pop	{r3, pc}

00014a58 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
   14a58:	b508      	push	{r3, lr}
   14a5a:	f7ff f904 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14a5e:	bd08      	pop	{r3, pc}

00014a60 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   14a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a64:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14a66:	f640 70ff 	movw	r0, #4095	; 0xfff
   14a6a:	f7ff f8fb 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a6e:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   14a70:	2000      	movs	r0, #0
   14a72:	f7ff f8f7 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a76:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14a78:	2001      	movs	r0, #1
   14a7a:	f7ff f8f3 	bl	13c64 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a7e:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   14a80:	4631      	mov	r1, r6
   14a82:	4620      	mov	r0, r4
   14a84:	f7ff f8ef 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14a88:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   14a8a:	2101      	movs	r1, #1
   14a8c:	4630      	mov	r0, r6
   14a8e:	f7ff f8ec 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14a92:	4606      	mov	r6, r0
   14a94:	4641      	mov	r1, r8
   14a96:	4620      	mov	r0, r4
   14a98:	f7ff f8f3 	bl	13c82 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   14a9c:	4629      	mov	r1, r5
   14a9e:	f7ff f8e2 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14aa2:	4601      	mov	r1, r0
   14aa4:	4630      	mov	r0, r6
   14aa6:	f7ff f8e2 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14aaa:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14aac:	210c      	movs	r1, #12
   14aae:	4620      	mov	r0, r4
   14ab0:	f7ff f8db 	bl	13c6a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14ab4:	4604      	mov	r4, r0
   14ab6:	4631      	mov	r1, r6
   14ab8:	4638      	mov	r0, r7
   14aba:	f7ff f8ea 	bl	13c92 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14abe:	4629      	mov	r1, r5
   14ac0:	f7ff f8d1 	bl	13c66 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14ac4:	4601      	mov	r1, r0
   14ac6:	4620      	mov	r0, r4
   14ac8:	f7ff f8d1 	bl	13c6e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014ad0 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14ad0:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14ad2:	f7ff ffc5 	bl	14a60 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>
}
   14ad6:	bd08      	pop	{r3, pc}

00014ad8 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
   14ad8:	b508      	push	{r3, lr}
   14ada:	f7ff ff57 	bl	1498c <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>
   14ade:	bd08      	pop	{r3, pc}

00014ae0 <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14ae0:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14ae2:	f7f8 f9ef 	bl	cec4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>
}
   14ae6:	bd08      	pop	{r3, pc}

00014ae8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   14ae8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14aec:	b113      	cbz	r3, 14af4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
   14aee:	2120      	movs	r1, #32
   14af0:	4798      	blx	r3
}
   14af2:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14af4:	f001 fa66 	bl	15fc4 <abort>

00014af8 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    OpDataPooling* data) {
   14af8:	b4f0      	push	{r4, r5, r6, r7}
   14afa:	b084      	sub	sp, #16
  return t->dims->data[dim];
   14afc:	6893      	ldr	r3, [r2, #8]
   14afe:	689e      	ldr	r6, [r3, #8]
   14b00:	68dc      	ldr	r4, [r3, #12]
      params->stride_height, params->stride_width,
   14b02:	688a      	ldr	r2, [r1, #8]
   14b04:	684b      	ldr	r3, [r1, #4]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   14b06:	690f      	ldr	r7, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
   14b08:	68cd      	ldr	r5, [r1, #12]
   14b0a:	7808      	ldrb	r0, [r1, #0]
  if (stride == 0) return 0;
   14b0c:	b17b      	cbz	r3, 14b2e <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x36>
  switch (padding) {
   14b0e:	2801      	cmp	r0, #1
   14b10:	d003      	beq.n	14b1a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x22>
   14b12:	2802      	cmp	r0, #2
   14b14:	d006      	beq.n	14b24 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x2c>
   14b16:	2100      	movs	r1, #0
   14b18:	e00a      	b.n	14b30 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - 1) / stride;
   14b1a:	1919      	adds	r1, r3, r4
   14b1c:	3901      	subs	r1, #1
   14b1e:	fb91 f1f3 	sdiv	r1, r1, r3
   14b22:	e005      	b.n	14b30 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - effective_filter_size) / stride;
   14b24:	1919      	adds	r1, r3, r4
   14b26:	1b49      	subs	r1, r1, r5
   14b28:	fb91 f1f3 	sdiv	r1, r1, r3
   14b2c:	e000      	b.n	14b30 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
  if (stride == 0) return 0;
   14b2e:	4619      	mov	r1, r3
   14b30:	b17a      	cbz	r2, 14b52 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5a>
  switch (padding) {
   14b32:	2801      	cmp	r0, #1
   14b34:	d003      	beq.n	14b3e <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x46>
   14b36:	2802      	cmp	r0, #2
   14b38:	d006      	beq.n	14b48 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x50>
   14b3a:	2000      	movs	r0, #0
   14b3c:	e00a      	b.n	14b54 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - 1) / stride;
   14b3e:	1990      	adds	r0, r2, r6
   14b40:	3801      	subs	r0, #1
   14b42:	fb90 f0f2 	sdiv	r0, r0, r2
   14b46:	e005      	b.n	14b54 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - effective_filter_size) / stride;
   14b48:	1990      	adds	r0, r2, r6
   14b4a:	1bc0      	subs	r0, r0, r7
   14b4c:	fb90 f0f2 	sdiv	r0, r0, r2
   14b50:	e000      	b.n	14b54 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
  if (stride == 0) return 0;
   14b52:	4610      	mov	r0, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   14b54:	3801      	subs	r0, #1
   14b56:	fb00 7202 	mla	r2, r0, r2, r7
  int total_padding =
   14b5a:	1b92      	subs	r2, r2, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   14b5c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
   14b60:	f002 0001 	and.w	r0, r2, #1
  return total_padding / 2;
   14b64:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   14b68:	1052      	asrs	r2, r2, #1
  padding_values.height =
   14b6a:	9201      	str	r2, [sp, #4]
  padding_values.height_offset = offset;
   14b6c:	9003      	str	r0, [sp, #12]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   14b6e:	3901      	subs	r1, #1
   14b70:	fb01 5303 	mla	r3, r1, r3, r5
  int total_padding =
   14b74:	1b1b      	subs	r3, r3, r4
  total_padding = total_padding > 0 ? total_padding : 0;
   14b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  *offset = total_padding % 2;
   14b7a:	f003 0201 	and.w	r2, r3, #1
  return total_padding / 2;
   14b7e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   14b82:	105b      	asrs	r3, r3, #1
  padding_values.width =
   14b84:	9300      	str	r3, [sp, #0]
  padding_values.width_offset = offset;
   14b86:	9202      	str	r2, [sp, #8]
   14b88:	ab04      	add	r3, sp, #16
   14b8a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   14b8e:	9c08      	ldr	r4, [sp, #32]
   14b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   14b94:	2000      	movs	r0, #0
   14b96:	b004      	add	sp, #16
   14b98:	bcf0      	pop	{r4, r5, r6, r7}
   14b9a:	4770      	bx	lr

00014b9c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   14b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ba0:	b0b5      	sub	sp, #212	; 0xd4
   14ba2:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   14ba4:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
   14ba6:	6891      	ldr	r1, [r2, #8]
   14ba8:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   14baa:	6851      	ldr	r1, [r2, #4]
   14bac:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   14bae:	6911      	ldr	r1, [r2, #16]
   14bb0:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   14bb2:	68d2      	ldr	r2, [r2, #12]
   14bb4:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   14bb6:	685a      	ldr	r2, [r3, #4]
   14bb8:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   14bbc:	681a      	ldr	r2, [r3, #0]
   14bbe:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   14bc2:	699a      	ldr	r2, [r3, #24]
   14bc4:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   14bc6:	69db      	ldr	r3, [r3, #28]
   14bc8:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   14bca:	4629      	mov	r1, r5
   14bcc:	a81e      	add	r0, sp, #120	; 0x78
   14bce:	f7ff fe1e 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   14bd2:	4628      	mov	r0, r5
   14bd4:	f7ff f832 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   14bd8:	9002      	str	r0, [sp, #8]
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
   14bda:	4621      	mov	r1, r4
   14bdc:	a824      	add	r0, sp, #144	; 0x90
   14bde:	f7ff fe16 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   14be2:	4620      	mov	r0, r4
   14be4:	f7ff f830 	bl	13c48 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   14be8:	9003      	str	r0, [sp, #12]
  inline int32_t DimensionsCount() const { return size_; }
   14bea:	9b1e      	ldr	r3, [sp, #120]	; 0x78

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14bec:	2b04      	cmp	r3, #4
   14bee:	d17b      	bne.n	14ce8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x14c>
   14bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14bf2:	2b04      	cmp	r3, #4
   14bf4:	d17a      	bne.n	14cec <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x150>
    TFLITE_DCHECK_LT(i, size_);
   14bf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14bf8:	2b00      	cmp	r3, #0
   14bfa:	dd79      	ble.n	14cf0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14bfc:	2b05      	cmp	r3, #5
   14bfe:	dd79      	ble.n	14cf4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x158>
   14c00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14c02:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   14c04:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14c06:	2a00      	cmp	r2, #0
   14c08:	dd76      	ble.n	14cf8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c0a:	2a05      	cmp	r2, #5
   14c0c:	dd76      	ble.n	14cfc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x160>
   14c0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14c10:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14c12:	429a      	cmp	r2, r3
   14c14:	d174      	bne.n	14d00 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x164>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14c16:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   14c18:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14c1a:	2a00      	cmp	r2, #0
   14c1c:	dd72      	ble.n	14d04 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c1e:	2a05      	cmp	r2, #5
   14c20:	dd72      	ble.n	14d08 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x16c>
   14c22:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14c24:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14c26:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   14c28:	4293      	cmp	r3, r2
   14c2a:	dc6f      	bgt.n	14d0c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x170>
      return __a;
   14c2c:	ab33      	add	r3, sp, #204	; 0xcc
   14c2e:	681b      	ldr	r3, [r3, #0]
   14c30:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   14c32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14c34:	2b03      	cmp	r3, #3
   14c36:	dd6b      	ble.n	14d10 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c38:	2b05      	cmp	r3, #5
   14c3a:	dd6b      	ble.n	14d14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x178>
   14c3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14c3e:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   14c40:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14c42:	2a03      	cmp	r2, #3
   14c44:	dd68      	ble.n	14d18 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x17c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c46:	2a05      	cmp	r2, #5
   14c48:	dd68      	ble.n	14d1c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x180>
   14c4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14c4c:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14c4e:	429a      	cmp	r2, r3
   14c50:	d166      	bne.n	14d20 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x184>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14c52:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   14c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14c56:	2a03      	cmp	r2, #3
   14c58:	dd64      	ble.n	14d24 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c5a:	2a05      	cmp	r2, #5
   14c5c:	dd64      	ble.n	14d28 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x18c>
   14c5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14c60:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14c62:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   14c64:	4293      	cmp	r3, r2
   14c66:	dc61      	bgt.n	14d2c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x190>
      return __a;
   14c68:	ab31      	add	r3, sp, #196	; 0xc4
   14c6a:	681b      	ldr	r3, [r3, #0]
   14c6c:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   14c6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14c70:	2b01      	cmp	r3, #1
   14c72:	dd5d      	ble.n	14d30 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c74:	2b05      	cmp	r3, #5
   14c76:	dd5d      	ble.n	14d34 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x198>
   14c78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14c7a:	685b      	ldr	r3, [r3, #4]
   14c7c:	930f      	str	r3, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
   14c7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14c80:	2b02      	cmp	r3, #2
   14c82:	dd5a      	ble.n	14d3a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c84:	2b05      	cmp	r3, #5
   14c86:	dd5a      	ble.n	14d3e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a2>
   14c88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14c8a:	689b      	ldr	r3, [r3, #8]
   14c8c:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
   14c8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14c90:	2b01      	cmp	r3, #1
   14c92:	dd57      	ble.n	14d44 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14c94:	2b05      	cmp	r3, #5
   14c96:	dd57      	ble.n	14d48 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1ac>
   14c98:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14c9a:	685b      	ldr	r3, [r3, #4]
   14c9c:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   14c9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14ca0:	2b02      	cmp	r3, #2
   14ca2:	dd54      	ble.n	14d4e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14ca4:	2b05      	cmp	r3, #5
   14ca6:	dd54      	ble.n	14d52 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b6>
   14ca8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14caa:	689b      	ldr	r3, [r3, #8]
   14cac:	930c      	str	r3, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   14cae:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14cb0:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_width = params.stride_width;
   14cb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14cb4:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int batch = 0; batch < batches; ++batch) {
   14cb6:	f04f 0b00 	mov.w	fp, #0
   14cba:	9b08      	ldr	r3, [sp, #32]
   14cbc:	459b      	cmp	fp, r3
   14cbe:	f280 812d 	bge.w	14f1c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14cc2:	f04f 0a00 	mov.w	sl, #0
   14cc6:	46d1      	mov	r9, sl
   14cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14cca:	4599      	cmp	r9, r3
   14ccc:	f280 8123 	bge.w	14f16 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x37a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14cd0:	f04f 0a00 	mov.w	sl, #0
   14cd4:	46d8      	mov	r8, fp
   14cd6:	46cb      	mov	fp, r9
   14cd8:	46d1      	mov	r9, sl
   14cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14cdc:	4599      	cmp	r9, r3
   14cde:	f280 8115 	bge.w	14f0c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   14ce2:	f04f 0a00 	mov.w	sl, #0
   14ce6:	e0c6      	b.n	14e76 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2da>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14ce8:	f001 f96c 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14cec:	f001 f96a 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14cf0:	f001 f968 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14cf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14cf6:	e785      	b.n	14c04 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x68>
    TFLITE_DCHECK_LT(i, size_);
   14cf8:	f001 f964 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14cfc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14cfe:	e788      	b.n	14c12 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x76>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14d00:	f001 f960 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14d04:	f001 f95e 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d08:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14d0a:	e78c      	b.n	14c26 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x8a>
	return __b;
   14d0c:	ab32      	add	r3, sp, #200	; 0xc8
   14d0e:	e78e      	b.n	14c2e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x92>
    TFLITE_DCHECK_LT(i, size_);
   14d10:	f001 f958 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14d16:	e793      	b.n	14c40 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
   14d18:	f001 f954 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d1c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   14d1e:	e796      	b.n	14c4e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xb2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14d20:	f001 f950 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14d24:	f001 f94e 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d28:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   14d2a:	e79a      	b.n	14c62 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xc6>
   14d2c:	ab30      	add	r3, sp, #192	; 0xc0
   14d2e:	e79c      	b.n	14c6a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xce>
    TFLITE_DCHECK_LT(i, size_);
   14d30:	f001 f948 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d34:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14d36:	930f      	str	r3, [sp, #60]	; 0x3c
   14d38:	e7a1      	b.n	14c7e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   14d3a:	f001 f943 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14d40:	930e      	str	r3, [sp, #56]	; 0x38
   14d42:	e7a4      	b.n	14c8e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   14d44:	f001 f93e 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d48:	9b26      	ldr	r3, [sp, #152]	; 0x98
   14d4a:	930d      	str	r3, [sp, #52]	; 0x34
   14d4c:	e7a7      	b.n	14c9e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   14d4e:	f001 f939 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d52:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   14d54:	930c      	str	r3, [sp, #48]	; 0x30
   14d56:	e7aa      	b.n	14cae <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x112>
	return __b;
   14d58:	a92e      	add	r1, sp, #184	; 0xb8
   14d5a:	e0a5      	b.n	14ea8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x30c>
	return __b;
   14d5c:	aa2d      	add	r2, sp, #180	; 0xb4
   14d5e:	e0ad      	b.n	14ebc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x320>
	return __b;
   14d60:	aa2b      	add	r2, sp, #172	; 0xac
   14d62:	e0b5      	b.n	14ed0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x334>
	return __b;
   14d64:	ab2a      	add	r3, sp, #168	; 0xa8
   14d66:	e0bc      	b.n	14ee2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x346>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14d68:	f001 f92c 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14d6c:	f001 f92a 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14d70:	f001 f928 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14d74:	f001 f926 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14d78:	f001 f924 	bl	15fc4 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
          float filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   14d7c:	3601      	adds	r6, #1
   14d7e:	42b5      	cmp	r5, r6
   14d80:	dd37      	ble.n	14df2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   14d82:	9f06      	ldr	r7, [sp, #24]
   14d84:	9b07      	ldr	r3, [sp, #28]
   14d86:	42bb      	cmp	r3, r7
   14d88:	ddf8      	ble.n	14d7c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   14d8a:	9b04      	ldr	r3, [sp, #16]
   14d8c:	19d8      	adds	r0, r3, r7
              const int in_y = in_y_origin + filter_y;
   14d8e:	9b05      	ldr	r3, [sp, #20]
   14d90:	eb03 0c06 	add.w	ip, r3, r6
  inline int32_t DimensionsCount() const { return size_; }
   14d94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14d96:	2b04      	cmp	r3, #4
   14d98:	d1e6      	bne.n	14d68 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1cc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14d9a:	f1b8 0f00 	cmp.w	r8, #0
   14d9e:	dbe5      	blt.n	14d6c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
   14da0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14da2:	4598      	cmp	r8, r3
   14da4:	dae2      	bge.n	14d6c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14da6:	f1bc 0f00 	cmp.w	ip, #0
   14daa:	dbe1      	blt.n	14d70 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
   14dac:	9920      	ldr	r1, [sp, #128]	; 0x80
   14dae:	458c      	cmp	ip, r1
   14db0:	dade      	bge.n	14d70 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14db2:	2800      	cmp	r0, #0
   14db4:	dbde      	blt.n	14d74 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
   14db6:	9a21      	ldr	r2, [sp, #132]	; 0x84
   14db8:	4290      	cmp	r0, r2
   14dba:	dadb      	bge.n	14d74 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14dbc:	f1ba 0f00 	cmp.w	sl, #0
   14dc0:	dbda      	blt.n	14d78 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
   14dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14dc4:	459a      	cmp	sl, r3
   14dc6:	dad7      	bge.n	14d78 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14dc8:	fb01 c108 	mla	r1, r1, r8, ip
   14dcc:	fb01 0202 	mla	r2, r1, r2, r0
   14dd0:	fb02 a303 	mla	r3, r2, r3, sl
              total +=
   14dd4:	9a02      	ldr	r2, [sp, #8]
   14dd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   14dda:	9801      	ldr	r0, [sp, #4]
   14ddc:	f7eb feb4 	bl	b48 <__addsf3>
   14de0:	9001      	str	r0, [sp, #4]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   14de2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14de6:	4620      	mov	r0, r4
   14de8:	f7eb feae 	bl	b48 <__addsf3>
   14dec:	4604      	mov	r4, r0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   14dee:	3701      	adds	r7, #1
   14df0:	e7c8      	b.n	14d84 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e8>
            }
          }
          if (filter_count == 0) return false;
   14df2:	2100      	movs	r1, #0
   14df4:	4620      	mov	r0, r4
   14df6:	f7ec f943 	bl	1080 <__aeabi_fcmpeq>
   14dfa:	2800      	cmp	r0, #0
   14dfc:	f040 808e 	bne.w	14f1c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
          const float average = total / filter_count;
   14e00:	4621      	mov	r1, r4
   14e02:	9801      	ldr	r0, [sp, #4]
   14e04:	f7ec f85c 	bl	ec0 <__aeabi_fdiv>
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   14e08:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   14e0a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   14e0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14e0e:	2b04      	cmp	r3, #4
   14e10:	d16b      	bne.n	14eea <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x34e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14e12:	f1b8 0f00 	cmp.w	r8, #0
   14e16:	db6a      	blt.n	14eee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
   14e18:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e1a:	4598      	cmp	r8, r3
   14e1c:	da67      	bge.n	14eee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14e1e:	f1bb 0f00 	cmp.w	fp, #0
   14e22:	db66      	blt.n	14ef2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
   14e24:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14e26:	4593      	cmp	fp, r2
   14e28:	da63      	bge.n	14ef2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14e2a:	f1b9 0f00 	cmp.w	r9, #0
   14e2e:	db62      	blt.n	14ef6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
   14e30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   14e32:	4599      	cmp	r9, r3
   14e34:	da5f      	bge.n	14ef6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14e36:	f1ba 0f00 	cmp.w	sl, #0
   14e3a:	db5e      	blt.n	14efa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
   14e3c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   14e3e:	45a2      	cmp	sl, r4
   14e40:	da5b      	bge.n	14efa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14e42:	fb02 b208 	mla	r2, r2, r8, fp
   14e46:	fb02 9303 	mla	r3, r2, r3, r9
   14e4a:	fb03 a404 	mla	r4, r3, r4, sl
   14e4e:	9012      	str	r0, [sp, #72]	; 0x48
   14e50:	9111      	str	r1, [sp, #68]	; 0x44
   14e52:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   14e54:	f7ec f91e 	bl	1094 <__aeabi_fcmplt>
   14e58:	2800      	cmp	r0, #0
   14e5a:	d150      	bne.n	14efe <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x362>
      return __a;
   14e5c:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   14e5e:	6829      	ldr	r1, [r5, #0]
   14e60:	4630      	mov	r0, r6
   14e62:	f7ec f917 	bl	1094 <__aeabi_fcmplt>
   14e66:	2800      	cmp	r0, #0
   14e68:	d14b      	bne.n	14f02 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x366>
  return min(max(x, output_activation_min), output_activation_max);
   14e6a:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   14e6c:	9a03      	ldr	r2, [sp, #12]
   14e6e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   14e72:	f10a 0a01 	add.w	sl, sl, #1
   14e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e78:	459a      	cmp	sl, r3
   14e7a:	da44      	bge.n	14f06 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x36a>
              (out_x * stride_width) - params.padding_values.width;
   14e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14e7e:	fb09 f203 	mul.w	r2, r9, r3
   14e82:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   14e86:	1a53      	subs	r3, r2, r1
   14e88:	9304      	str	r3, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
   14e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e8c:	fb0b f003 	mul.w	r0, fp, r3
   14e90:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   14e94:	1ac4      	subs	r4, r0, r3
   14e96:	9405      	str	r4, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   14e98:	2400      	movs	r4, #0
   14e9a:	942f      	str	r4, [sp, #188]	; 0xbc
   14e9c:	1a8a      	subs	r2, r1, r2
   14e9e:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   14ea0:	42a2      	cmp	r2, r4
   14ea2:	f73f af59 	bgt.w	14d58 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1bc>
      return __a;
   14ea6:	a92f      	add	r1, sp, #188	; 0xbc
   14ea8:	6809      	ldr	r1, [r1, #0]
   14eaa:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
   14eac:	990e      	ldr	r1, [sp, #56]	; 0x38
   14eae:	440a      	add	r2, r1
   14eb0:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   14eb2:	9919      	ldr	r1, [sp, #100]	; 0x64
   14eb4:	428a      	cmp	r2, r1
   14eb6:	f6ff af51 	blt.w	14d5c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c0>
      return __a;
   14eba:	aa19      	add	r2, sp, #100	; 0x64
   14ebc:	6812      	ldr	r2, [r2, #0]
   14ebe:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
   14ec0:	2200      	movs	r2, #0
   14ec2:	922c      	str	r2, [sp, #176]	; 0xb0
   14ec4:	1a1b      	subs	r3, r3, r0
   14ec6:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   14ec8:	4293      	cmp	r3, r2
   14eca:	f73f af49 	bgt.w	14d60 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c4>
      return __a;
   14ece:	aa2c      	add	r2, sp, #176	; 0xb0
   14ed0:	6816      	ldr	r6, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   14ed2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14ed4:	4413      	add	r3, r2
   14ed6:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   14ed8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14eda:	4293      	cmp	r3, r2
   14edc:	f6ff af42 	blt.w	14d64 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c8>
      return __a;
   14ee0:	ab18      	add	r3, sp, #96	; 0x60
   14ee2:	681d      	ldr	r5, [r3, #0]
          float filter_count = 0;
   14ee4:	2400      	movs	r4, #0
          float total = 0.f;
   14ee6:	9401      	str	r4, [sp, #4]
   14ee8:	e749      	b.n	14d7e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14eea:	f001 f86b 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14eee:	f001 f869 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14ef2:	f001 f867 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14ef6:	f001 f865 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14efa:	f001 f863 	bl	15fc4 <abort>
	return __b;
   14efe:	ad11      	add	r5, sp, #68	; 0x44
   14f00:	e7ad      	b.n	14e5e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2c2>
	return __b;
   14f02:	ad10      	add	r5, sp, #64	; 0x40
   14f04:	e7b1      	b.n	14e6a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14f06:	f109 0901 	add.w	r9, r9, #1
   14f0a:	e6e6      	b.n	14cda <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x13e>
   14f0c:	46d9      	mov	r9, fp
   14f0e:	46c3      	mov	fp, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14f10:	f109 0901 	add.w	r9, r9, #1
   14f14:	e6d8      	b.n	14cc8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x12c>
  for (int batch = 0; batch < batches; ++batch) {
   14f16:	f10b 0b01 	add.w	fp, fp, #1
   14f1a:	e6ce      	b.n	14cba <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x11e>
    if (size_ > kMaxSmallSize) {
   14f1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14f1e:	2b05      	cmp	r3, #5
   14f20:	dd03      	ble.n	14f2a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
      delete[] dims_pointer_;
   14f22:	9825      	ldr	r0, [sp, #148]	; 0x94
   14f24:	b108      	cbz	r0, 14f2a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
   14f26:	f001 f838 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   14f2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14f2c:	2b05      	cmp	r3, #5
   14f2e:	dd03      	ble.n	14f38 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
      delete[] dims_pointer_;
   14f30:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14f32:	b108      	cbz	r0, 14f38 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
   14f34:	f001 f831 	bl	15f9a <_ZdaPv>
                             tflite::micro::GetTensorData<float>(output));
}
   14f38:	b035      	add	sp, #212	; 0xd4
   14f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014f3e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
   14f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f42:	b0b5      	sub	sp, #212	; 0xd4
   14f44:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   14f46:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   14f48:	6891      	ldr	r1, [r2, #8]
   14f4a:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   14f4c:	6851      	ldr	r1, [r2, #4]
   14f4e:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   14f50:	6911      	ldr	r1, [r2, #16]
   14f52:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   14f54:	68d2      	ldr	r2, [r2, #12]
   14f56:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   14f58:	685a      	ldr	r2, [r3, #4]
   14f5a:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   14f5e:	681a      	ldr	r2, [r3, #0]
   14f60:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   14f64:	699a      	ldr	r2, [r3, #24]
   14f66:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   14f68:	69db      	ldr	r3, [r3, #28]
   14f6a:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   14f6c:	4629      	mov	r1, r5
   14f6e:	a81e      	add	r0, sp, #120	; 0x78
   14f70:	f7ff fc4d 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   14f74:	4628      	mov	r0, r5
   14f76:	f7fe fe61 	bl	13c3c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   14f7a:	4682      	mov	sl, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
   14f7c:	4621      	mov	r1, r4
   14f7e:	a824      	add	r0, sp, #144	; 0x90
   14f80:	f7ff fc45 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   14f84:	4620      	mov	r0, r4
   14f86:	f7fe fe5f 	bl	13c48 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   14f8a:	9000      	str	r0, [sp, #0]
  inline int32_t DimensionsCount() const { return size_; }
   14f8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14f8e:	2b04      	cmp	r3, #4
   14f90:	f040 8081 	bne.w	15096 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x158>
   14f94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14f96:	2b04      	cmp	r3, #4
   14f98:	d17f      	bne.n	1509a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15c>
    TFLITE_DCHECK_LT(i, size_);
   14f9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14f9c:	2b00      	cmp	r3, #0
   14f9e:	dd7e      	ble.n	1509e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x160>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14fa0:	2b05      	cmp	r3, #5
   14fa2:	dd7e      	ble.n	150a2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x164>
   14fa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14fa6:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   14fa8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14faa:	2a00      	cmp	r2, #0
   14fac:	dd7b      	ble.n	150a6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14fae:	2a05      	cmp	r2, #5
   14fb0:	dd7b      	ble.n	150aa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16c>
   14fb2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14fb4:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14fb6:	429a      	cmp	r2, r3
   14fb8:	d179      	bne.n	150ae <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x170>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14fba:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   14fbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14fbe:	2a00      	cmp	r2, #0
   14fc0:	dd77      	ble.n	150b2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14fc2:	2a05      	cmp	r2, #5
   14fc4:	dd77      	ble.n	150b6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x178>
   14fc6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14fc8:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14fca:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   14fcc:	4293      	cmp	r3, r2
   14fce:	dc74      	bgt.n	150ba <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17c>
      return __a;
   14fd0:	ab33      	add	r3, sp, #204	; 0xcc
   14fd2:	681b      	ldr	r3, [r3, #0]
   14fd4:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   14fd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14fd8:	2b03      	cmp	r3, #3
   14fda:	dd70      	ble.n	150be <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x180>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14fdc:	2b05      	cmp	r3, #5
   14fde:	dd70      	ble.n	150c2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x184>
   14fe0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14fe2:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   14fe4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14fe6:	2a03      	cmp	r2, #3
   14fe8:	dd6d      	ble.n	150c6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14fea:	2a05      	cmp	r2, #5
   14fec:	dd6d      	ble.n	150ca <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18c>
   14fee:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14ff0:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14ff2:	429a      	cmp	r2, r3
   14ff4:	d16b      	bne.n	150ce <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x190>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14ff6:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   14ff8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14ffa:	2a03      	cmp	r2, #3
   14ffc:	dd69      	ble.n	150d2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14ffe:	2a05      	cmp	r2, #5
   15000:	dd69      	ble.n	150d6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x198>
   15002:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15004:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15006:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   15008:	4293      	cmp	r3, r2
   1500a:	dc66      	bgt.n	150da <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19c>
      return __a;
   1500c:	ab31      	add	r3, sp, #196	; 0xc4
   1500e:	681b      	ldr	r3, [r3, #0]
   15010:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   15012:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15014:	2b01      	cmp	r3, #1
   15016:	dd62      	ble.n	150de <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15018:	2b05      	cmp	r3, #5
   1501a:	dd62      	ble.n	150e2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a4>
   1501c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1501e:	685b      	ldr	r3, [r3, #4]
   15020:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   15022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15024:	2b02      	cmp	r3, #2
   15026:	dd5f      	ble.n	150e8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15028:	2b05      	cmp	r3, #5
   1502a:	dd5f      	ble.n	150ec <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
   1502c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1502e:	689b      	ldr	r3, [r3, #8]
   15030:	930c      	str	r3, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   15032:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15034:	2b01      	cmp	r3, #1
   15036:	dd5c      	ble.n	150f2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15038:	2b05      	cmp	r3, #5
   1503a:	dd5c      	ble.n	150f6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
   1503c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1503e:	685b      	ldr	r3, [r3, #4]
   15040:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   15042:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15044:	2b02      	cmp	r3, #2
   15046:	dd59      	ble.n	150fc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15048:	2b05      	cmp	r3, #5
   1504a:	dd59      	ble.n	15100 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
   1504c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1504e:	689b      	ldr	r3, [r3, #8]
   15050:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   15052:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15054:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   15056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15058:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   1505a:	f04f 0b00 	mov.w	fp, #0
   1505e:	46d9      	mov	r9, fp
   15060:	46d3      	mov	fp, sl
   15062:	9b06      	ldr	r3, [sp, #24]
   15064:	4599      	cmp	r9, r3
   15066:	f280 8127 	bge.w	152b8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1506a:	f04f 0a00 	mov.w	sl, #0
   1506e:	46d8      	mov	r8, fp
   15070:	46cb      	mov	fp, r9
   15072:	46d1      	mov	r9, sl
   15074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15076:	4599      	cmp	r9, r3
   15078:	f280 8119 	bge.w	152ae <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1507c:	f04f 0a00 	mov.w	sl, #0
   15080:	464f      	mov	r7, r9
   15082:	4653      	mov	r3, sl
   15084:	46c2      	mov	sl, r8
   15086:	4698      	mov	r8, r3
   15088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1508a:	4598      	cmp	r8, r3
   1508c:	f280 810b 	bge.w	152a6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
        for (int channel = 0; channel < depth; ++channel) {
   15090:	f04f 0900 	mov.w	r9, #0
   15094:	e0ba      	b.n	1520c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ce>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15096:	f000 ff95 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1509a:	f000 ff93 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1509e:	f000 ff91 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   150a4:	e780      	b.n	14fa8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x6a>
    TFLITE_DCHECK_LT(i, size_);
   150a6:	f000 ff8d 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
   150ac:	e783      	b.n	14fb6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x78>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   150ae:	f000 ff89 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   150b2:	f000 ff87 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   150b8:	e787      	b.n	14fca <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8c>
	return __b;
   150ba:	ab32      	add	r3, sp, #200	; 0xc8
   150bc:	e789      	b.n	14fd2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x94>
    TFLITE_DCHECK_LT(i, size_);
   150be:	f000 ff81 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   150c4:	e78e      	b.n	14fe4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   150c6:	f000 ff7d 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   150cc:	e791      	b.n	14ff2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   150ce:	f000 ff79 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   150d2:	f000 ff77 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   150d8:	e795      	b.n	15006 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc8>
   150da:	ab30      	add	r3, sp, #192	; 0xc0
   150dc:	e797      	b.n	1500e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xd0>
    TFLITE_DCHECK_LT(i, size_);
   150de:	f000 ff71 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   150e4:	930d      	str	r3, [sp, #52]	; 0x34
   150e6:	e79c      	b.n	15022 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe4>
    TFLITE_DCHECK_LT(i, size_);
   150e8:	f000 ff6c 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
   150ee:	930c      	str	r3, [sp, #48]	; 0x30
   150f0:	e79f      	b.n	15032 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   150f2:	f000 ff67 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   150f8:	930b      	str	r3, [sp, #44]	; 0x2c
   150fa:	e7a2      	b.n	15042 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x104>
    TFLITE_DCHECK_LT(i, size_);
   150fc:	f000 ff62 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15100:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   15102:	930a      	str	r3, [sp, #40]	; 0x28
   15104:	e7a5      	b.n	15052 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x114>
	return __b;
   15106:	a92e      	add	r1, sp, #184	; 0xb8
   15108:	e099      	b.n	1523e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x300>
	return __b;
   1510a:	aa2d      	add	r2, sp, #180	; 0xb4
   1510c:	e0a1      	b.n	15252 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x314>
	return __b;
   1510e:	aa2b      	add	r2, sp, #172	; 0xac
   15110:	e0a9      	b.n	15266 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x328>
	return __b;
   15112:	ab2a      	add	r3, sp, #168	; 0xa8
   15114:	e0b0      	b.n	15278 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x33a>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15116:	f000 ff55 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1511a:	f000 ff53 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1511e:	f000 ff51 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15122:	f000 ff4f 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15126:	f000 ff4d 	bl	15fc4 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   1512a:	6833      	ldr	r3, [r6, #0]
   1512c:	930f      	str	r3, [sp, #60]	; 0x3c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1512e:	3501      	adds	r5, #1
   15130:	9b04      	ldr	r3, [sp, #16]
   15132:	42ab      	cmp	r3, r5
   15134:	dd2d      	ble.n	15192 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x254>
              const int in_x = in_x_origin + filter_x;
   15136:	9b01      	ldr	r3, [sp, #4]
   15138:	1958      	adds	r0, r3, r5
              const int in_y = in_y_origin + filter_y;
   1513a:	9b02      	ldr	r3, [sp, #8]
   1513c:	191e      	adds	r6, r3, r4
  inline int32_t DimensionsCount() const { return size_; }
   1513e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15140:	2b04      	cmp	r3, #4
   15142:	d1e8      	bne.n	15116 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15144:	f1bb 0f00 	cmp.w	fp, #0
   15148:	dbe7      	blt.n	1511a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
   1514a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1514c:	459b      	cmp	fp, r3
   1514e:	dae4      	bge.n	1511a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15150:	2e00      	cmp	r6, #0
   15152:	dbe4      	blt.n	1511e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
   15154:	9920      	ldr	r1, [sp, #128]	; 0x80
   15156:	428e      	cmp	r6, r1
   15158:	dae1      	bge.n	1511e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1515a:	2800      	cmp	r0, #0
   1515c:	dbe1      	blt.n	15122 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
   1515e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15160:	4290      	cmp	r0, r2
   15162:	dade      	bge.n	15122 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15164:	f1b9 0f00 	cmp.w	r9, #0
   15168:	dbdd      	blt.n	15126 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
   1516a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1516c:	4599      	cmp	r9, r3
   1516e:	dada      	bge.n	15126 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15170:	fb01 610b 	mla	r1, r1, fp, r6
   15174:	fb01 0202 	mla	r2, r1, r2, r0
   15178:	fb02 9303 	mla	r3, r2, r3, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1517c:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
      if (__a < __b)
   15180:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   15184:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15186:	f7eb ff85 	bl	1094 <__aeabi_fcmplt>
   1518a:	2800      	cmp	r0, #0
   1518c:	d1cd      	bne.n	1512a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
      return __a;
   1518e:	ae0f      	add	r6, sp, #60	; 0x3c
   15190:	e7cb      	b.n	1512a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15192:	3401      	adds	r4, #1
   15194:	9b05      	ldr	r3, [sp, #20]
   15196:	42a3      	cmp	r3, r4
   15198:	dd01      	ble.n	1519e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x260>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1519a:	9d03      	ldr	r5, [sp, #12]
   1519c:	e7c8      	b.n	15130 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   1519e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   151a0:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   151a2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   151a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   151a6:	2b04      	cmp	r3, #4
   151a8:	d16c      	bne.n	15284 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x346>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   151aa:	f1bb 0f00 	cmp.w	fp, #0
   151ae:	db6b      	blt.n	15288 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
   151b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   151b2:	459b      	cmp	fp, r3
   151b4:	da68      	bge.n	15288 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   151b6:	2f00      	cmp	r7, #0
   151b8:	db68      	blt.n	1528c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
   151ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
   151bc:	4297      	cmp	r7, r2
   151be:	da65      	bge.n	1528c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   151c0:	f1b8 0f00 	cmp.w	r8, #0
   151c4:	db64      	blt.n	15290 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
   151c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   151c8:	4598      	cmp	r8, r3
   151ca:	da61      	bge.n	15290 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   151cc:	f1b9 0f00 	cmp.w	r9, #0
   151d0:	db60      	blt.n	15294 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
   151d2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   151d4:	45a1      	cmp	r9, r4
   151d6:	da5d      	bge.n	15294 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   151d8:	fb02 720b 	mla	r2, r2, fp, r7
   151dc:	fb02 8303 	mla	r3, r2, r3, r8
   151e0:	fb03 9404 	mla	r4, r3, r4, r9
   151e4:	9012      	str	r0, [sp, #72]	; 0x48
   151e6:	9111      	str	r1, [sp, #68]	; 0x44
   151e8:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   151ea:	f7eb ff53 	bl	1094 <__aeabi_fcmplt>
   151ee:	2800      	cmp	r0, #0
   151f0:	d152      	bne.n	15298 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35a>
      return __a;
   151f2:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   151f4:	6829      	ldr	r1, [r5, #0]
   151f6:	4630      	mov	r0, r6
   151f8:	f7eb ff4c 	bl	1094 <__aeabi_fcmplt>
   151fc:	2800      	cmp	r0, #0
   151fe:	d14d      	bne.n	1529c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35e>
   15200:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   15202:	9a00      	ldr	r2, [sp, #0]
   15204:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   15208:	f109 0901 	add.w	r9, r9, #1
   1520c:	9b07      	ldr	r3, [sp, #28]
   1520e:	4599      	cmp	r9, r3
   15210:	da46      	bge.n	152a0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
              (out_x * stride_width) - params.padding_values.width;
   15212:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15214:	fb08 f203 	mul.w	r2, r8, r3
   15218:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   1521c:	1a53      	subs	r3, r2, r1
   1521e:	9301      	str	r3, [sp, #4]
              (out_y * stride_height) - params.padding_values.height;
   15220:	9b08      	ldr	r3, [sp, #32]
   15222:	fb07 f003 	mul.w	r0, r7, r3
   15226:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   1522a:	1ac4      	subs	r4, r0, r3
   1522c:	9402      	str	r4, [sp, #8]
          const int filter_x_start = std::max(0, -in_x_origin);
   1522e:	2400      	movs	r4, #0
   15230:	942f      	str	r4, [sp, #188]	; 0xbc
   15232:	1a8a      	subs	r2, r1, r2
   15234:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   15236:	42a2      	cmp	r2, r4
   15238:	f73f af65 	bgt.w	15106 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c8>
      return __a;
   1523c:	a92f      	add	r1, sp, #188	; 0xbc
   1523e:	6809      	ldr	r1, [r1, #0]
   15240:	9103      	str	r1, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
   15242:	990c      	ldr	r1, [sp, #48]	; 0x30
   15244:	440a      	add	r2, r1
   15246:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   15248:	9919      	ldr	r1, [sp, #100]	; 0x64
   1524a:	428a      	cmp	r2, r1
   1524c:	f6ff af5d 	blt.w	1510a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
      return __a;
   15250:	aa19      	add	r2, sp, #100	; 0x64
   15252:	6812      	ldr	r2, [r2, #0]
   15254:	9204      	str	r2, [sp, #16]
          const int filter_y_start = std::max(0, -in_y_origin);
   15256:	2200      	movs	r2, #0
   15258:	922c      	str	r2, [sp, #176]	; 0xb0
   1525a:	1a1b      	subs	r3, r3, r0
   1525c:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   1525e:	4293      	cmp	r3, r2
   15260:	f73f af55 	bgt.w	1510e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
      return __a;
   15264:	aa2c      	add	r2, sp, #176	; 0xb0
   15266:	6814      	ldr	r4, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   15268:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1526a:	4413      	add	r3, r2
   1526c:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   1526e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15270:	4293      	cmp	r3, r2
   15272:	f6ff af4e 	blt.w	15112 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d4>
      return __a;
   15276:	ab18      	add	r3, sp, #96	; 0x60
   15278:	681b      	ldr	r3, [r3, #0]
   1527a:	9305      	str	r3, [sp, #20]
          float max = std::numeric_limits<float>::lowest();
   1527c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   15280:	930f      	str	r3, [sp, #60]	; 0x3c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15282:	e787      	b.n	15194 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x256>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15284:	f000 fe9e 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15288:	f000 fe9c 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1528c:	f000 fe9a 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15290:	f000 fe98 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15294:	f000 fe96 	bl	15fc4 <abort>
	return __b;
   15298:	ad11      	add	r5, sp, #68	; 0x44
   1529a:	e7ab      	b.n	151f4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2b6>
	return __b;
   1529c:	ad10      	add	r5, sp, #64	; 0x40
   1529e:	e7af      	b.n	15200 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2c2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   152a0:	f108 0801 	add.w	r8, r8, #1
   152a4:	e6f0      	b.n	15088 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14a>
   152a6:	46d0      	mov	r8, sl
    for (int out_y = 0; out_y < output_height; ++out_y) {
   152a8:	f107 0901 	add.w	r9, r7, #1
   152ac:	e6e2      	b.n	15074 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
   152ae:	46d9      	mov	r9, fp
   152b0:	46c3      	mov	fp, r8
  for (int batch = 0; batch < batches; ++batch) {
   152b2:	f109 0901 	add.w	r9, r9, #1
   152b6:	e6d4      	b.n	15062 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x124>
    if (size_ > kMaxSmallSize) {
   152b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   152ba:	2b05      	cmp	r3, #5
   152bc:	dd03      	ble.n	152c6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
      delete[] dims_pointer_;
   152be:	9825      	ldr	r0, [sp, #148]	; 0x94
   152c0:	b108      	cbz	r0, 152c6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
   152c2:	f000 fe6a 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   152c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   152c8:	2b05      	cmp	r3, #5
   152ca:	dd03      	ble.n	152d4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
      delete[] dims_pointer_;
   152cc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   152ce:	b108      	cbz	r0, 152d4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
   152d0:	f000 fe63 	bl	15f9a <_ZdaPv>
                         tflite::micro::GetTensorData<float>(output));
}
   152d4:	b035      	add	sp, #212	; 0xd4
   152d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000152da <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:
                                 TfLiteEvalTensor* output) {
   152da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152de:	b0b1      	sub	sp, #196	; 0xc4
   152e0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
   152e2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   152e4:	7a21      	ldrb	r1, [r4, #8]
   152e6:	2909      	cmp	r1, #9
   152e8:	f040 80a0 	bne.w	1542c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x152>
  op_params.stride_height = params->stride_height;
   152ec:	6891      	ldr	r1, [r2, #8]
   152ee:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
   152f0:	6851      	ldr	r1, [r2, #4]
   152f2:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
   152f4:	6911      	ldr	r1, [r2, #16]
   152f6:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
   152f8:	68d2      	ldr	r2, [r2, #12]
   152fa:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
   152fc:	685a      	ldr	r2, [r3, #4]
   152fe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
   15302:	681a      	ldr	r2, [r3, #0]
   15304:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
   15308:	691a      	ldr	r2, [r3, #16]
   1530a:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
   1530c:	695b      	ldr	r3, [r3, #20]
   1530e:	9317      	str	r3, [sp, #92]	; 0x5c
      op_params, tflite::micro::GetTensorShape(input),
   15310:	4621      	mov	r1, r4
   15312:	a81a      	add	r0, sp, #104	; 0x68
   15314:	f7ff fa7b 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   15318:	4620      	mov	r0, r4
   1531a:	f7fe fc99 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   1531e:	9004      	str	r0, [sp, #16]
      tflite::micro::GetTensorShape(output),
   15320:	4629      	mov	r1, r5
   15322:	a820      	add	r0, sp, #128	; 0x80
   15324:	f7ff fa73 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   15328:	4628      	mov	r0, r5
   1532a:	f7fe fc97 	bl	13c5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   1532e:	9005      	str	r0, [sp, #20]

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15330:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15334:	429a      	cmp	r2, r3
   15336:	dc7b      	bgt.n	15430 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x156>
  inline int32_t DimensionsCount() const { return size_; }
   15338:	9b1a      	ldr	r3, [sp, #104]	; 0x68
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1533a:	2b04      	cmp	r3, #4
   1533c:	d17a      	bne.n	15434 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15a>
   1533e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   15340:	2b04      	cmp	r3, #4
   15342:	d179      	bne.n	15438 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   15344:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15346:	2b00      	cmp	r3, #0
   15348:	dd78      	ble.n	1543c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1534a:	2b05      	cmp	r3, #5
   1534c:	dd78      	ble.n	15440 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x166>
   1534e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15350:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   15352:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15354:	2a00      	cmp	r2, #0
   15356:	dd75      	ble.n	15444 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15358:	2a05      	cmp	r2, #5
   1535a:	dd75      	ble.n	15448 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16e>
   1535c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1535e:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15360:	429a      	cmp	r2, r3
   15362:	d173      	bne.n	1544c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x172>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15364:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   15366:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15368:	2a00      	cmp	r2, #0
   1536a:	dd71      	ble.n	15450 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1536c:	2a05      	cmp	r2, #5
   1536e:	dd71      	ble.n	15454 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17a>
   15370:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15372:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15374:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   15376:	4293      	cmp	r3, r2
   15378:	dc6e      	bgt.n	15458 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17e>
      return __a;
   1537a:	ab2f      	add	r3, sp, #188	; 0xbc
   1537c:	681b      	ldr	r3, [r3, #0]
   1537e:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   15380:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15382:	2b03      	cmp	r3, #3
   15384:	dd6a      	ble.n	1545c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15386:	2b05      	cmp	r3, #5
   15388:	dd6a      	ble.n	15460 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x186>
   1538a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1538c:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   1538e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15390:	2a03      	cmp	r2, #3
   15392:	dd67      	ble.n	15464 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15394:	2a05      	cmp	r2, #5
   15396:	dd67      	ble.n	15468 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18e>
   15398:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1539a:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1539c:	429a      	cmp	r2, r3
   1539e:	d165      	bne.n	1546c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x192>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   153a0:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   153a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   153a4:	2a03      	cmp	r2, #3
   153a6:	dd63      	ble.n	15470 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   153a8:	2a05      	cmp	r2, #5
   153aa:	dd63      	ble.n	15474 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19a>
   153ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
   153ae:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   153b0:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   153b2:	4293      	cmp	r3, r2
   153b4:	dc60      	bgt.n	15478 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19e>
      return __a;
   153b6:	ab2d      	add	r3, sp, #180	; 0xb4
   153b8:	681b      	ldr	r3, [r3, #0]
   153ba:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   153bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   153be:	2b01      	cmp	r3, #1
   153c0:	dd5c      	ble.n	1547c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   153c2:	2b05      	cmp	r3, #5
   153c4:	dd5c      	ble.n	15480 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a6>
   153c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   153c8:	685b      	ldr	r3, [r3, #4]
   153ca:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   153cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   153ce:	2b02      	cmp	r3, #2
   153d0:	dd59      	ble.n	15486 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   153d2:	2b05      	cmp	r3, #5
   153d4:	dd59      	ble.n	1548a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b0>
   153d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   153d8:	689b      	ldr	r3, [r3, #8]
   153da:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   153dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   153de:	2b01      	cmp	r3, #1
   153e0:	dd56      	ble.n	15490 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   153e2:	2b05      	cmp	r3, #5
   153e4:	dd56      	ble.n	15494 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ba>
   153e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   153e8:	685b      	ldr	r3, [r3, #4]
   153ea:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   153ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
   153ee:	2b02      	cmp	r3, #2
   153f0:	dd53      	ble.n	1549a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   153f2:	2b05      	cmp	r3, #5
   153f4:	dd53      	ble.n	1549e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c4>
   153f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   153f8:	689b      	ldr	r3, [r3, #8]
   153fa:	930d      	str	r3, [sp, #52]	; 0x34
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   153fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   153fe:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_width = params.stride_width;
   15400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15402:	930c      	str	r3, [sp, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
   15404:	f04f 0800 	mov.w	r8, #0
   15408:	9b06      	ldr	r3, [sp, #24]
   1540a:	4598      	cmp	r8, r3
   1540c:	f280 8123 	bge.w	15656 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   15410:	2700      	movs	r7, #0
   15412:	46c6      	mov	lr, r8
   15414:	46b8      	mov	r8, r7
   15416:	9b08      	ldr	r3, [sp, #32]
   15418:	4598      	cmp	r8, r3
   1541a:	f280 8119 	bge.w	15650 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x376>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1541e:	2600      	movs	r6, #0
   15420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15422:	429e      	cmp	r6, r3
   15424:	f280 8111 	bge.w	1564a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   15428:	2200      	movs	r2, #0
   1542a:	e0bc      	b.n	155a6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2cc>
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   1542c:	f000 fdca 	bl	15fc4 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15430:	f000 fdc8 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15434:	f000 fdc6 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   15438:	f000 fdc4 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1543c:	f000 fdc2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15442:	e786      	b.n	15352 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x78>
    TFLITE_DCHECK_LT(i, size_);
   15444:	f000 fdbe 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15448:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1544a:	e789      	b.n	15360 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1544c:	f000 fdba 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   15450:	f000 fdb8 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15454:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15456:	e78d      	b.n	15374 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x9a>
	return __b;
   15458:	ab2e      	add	r3, sp, #184	; 0xb8
   1545a:	e78f      	b.n	1537c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xa2>
    TFLITE_DCHECK_LT(i, size_);
   1545c:	f000 fdb2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15460:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15462:	e794      	b.n	1538e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
   15464:	f000 fdae 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15468:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1546a:	e797      	b.n	1539c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xc2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1546c:	f000 fdaa 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   15470:	f000 fda8 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15474:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15476:	e79b      	b.n	153b0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xd6>
   15478:	ab2c      	add	r3, sp, #176	; 0xb0
   1547a:	e79d      	b.n	153b8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xde>
    TFLITE_DCHECK_LT(i, size_);
   1547c:	f000 fda2 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15480:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15482:	930a      	str	r3, [sp, #40]	; 0x28
   15484:	e7a2      	b.n	153cc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   15486:	f000 fd9d 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1548a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1548c:	9309      	str	r3, [sp, #36]	; 0x24
   1548e:	e7a5      	b.n	153dc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   15490:	f000 fd98 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15494:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15496:	9308      	str	r3, [sp, #32]
   15498:	e7a8      	b.n	153ec <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x112>
    TFLITE_DCHECK_LT(i, size_);
   1549a:	f000 fd93 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1549e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   154a0:	930d      	str	r3, [sp, #52]	; 0x34
   154a2:	e7ab      	b.n	153fc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x122>
	return __b;
   154a4:	a82a      	add	r0, sp, #168	; 0xa8
   154a6:	e097      	b.n	155d8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2fe>
	return __b;
   154a8:	a929      	add	r1, sp, #164	; 0xa4
   154aa:	e09f      	b.n	155ec <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x312>
	return __b;
   154ac:	a927      	add	r1, sp, #156	; 0x9c
   154ae:	e0a7      	b.n	15600 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x326>
	return __b;
   154b0:	ab26      	add	r3, sp, #152	; 0x98
   154b2:	e0ae      	b.n	15612 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x338>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   154b4:	f000 fd86 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   154b8:	f000 fd84 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   154bc:	f000 fd82 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   154c0:	f000 fd80 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   154c4:	f000 fd7e 	bl	15fc4 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   154c8:	3101      	adds	r1, #1
   154ca:	9803      	ldr	r0, [sp, #12]
   154cc:	4288      	cmp	r0, r1
   154ce:	dd2f      	ble.n	15530 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   154d0:	9801      	ldr	r0, [sp, #4]
   154d2:	9c02      	ldr	r4, [sp, #8]
   154d4:	4284      	cmp	r4, r0
   154d6:	ddf7      	ble.n	154c8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ee>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   154d8:	eb0c 0700 	add.w	r7, ip, r0
              const int in_y = in_y_origin + filter_y;
   154dc:	eb09 0a01 	add.w	sl, r9, r1
  inline int32_t DimensionsCount() const { return size_; }
   154e0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   154e2:	2d04      	cmp	r5, #4
   154e4:	d1e6      	bne.n	154b4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1da>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   154e6:	f1be 0f00 	cmp.w	lr, #0
   154ea:	dbe5      	blt.n	154b8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
   154ec:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   154ee:	45ae      	cmp	lr, r5
   154f0:	dae2      	bge.n	154b8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   154f2:	f1ba 0f00 	cmp.w	sl, #0
   154f6:	dbe1      	blt.n	154bc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
   154f8:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
   154fc:	45da      	cmp	sl, fp
   154fe:	dadd      	bge.n	154bc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15500:	2f00      	cmp	r7, #0
   15502:	dbdd      	blt.n	154c0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
   15504:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   15506:	42af      	cmp	r7, r5
   15508:	dada      	bge.n	154c0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1550a:	2a00      	cmp	r2, #0
   1550c:	dbda      	blt.n	154c4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
   1550e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   15510:	42a2      	cmp	r2, r4
   15512:	dad7      	bge.n	154c4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15514:	fb0b aa0e 	mla	sl, fp, lr, sl
   15518:	fb0a 7705 	mla	r7, sl, r5, r7
   1551c:	fb07 2404 	mla	r4, r7, r4, r2
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   15520:	9d04      	ldr	r5, [sp, #16]
   15522:	572d      	ldrsb	r5, [r5, r4]
              acc +=
   15524:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   15526:	442c      	add	r4, r5
   15528:	940e      	str	r4, [sp, #56]	; 0x38
              filter_count++;
   1552a:	3301      	adds	r3, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1552c:	3001      	adds	r0, #1
   1552e:	e7d0      	b.n	154d2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f8>
            }
          }
          if (filter_count == 0) return false;
   15530:	2b00      	cmp	r3, #0
   15532:	f000 8090 	beq.w	15656 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   15536:	990e      	ldr	r1, [sp, #56]	; 0x38
   15538:	2900      	cmp	r1, #0
   1553a:	dd6f      	ble.n	1561c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x342>
   1553c:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   15540:	eb01 0160 	add.w	r1, r1, r0, asr #1
   15544:	fb91 f3f3 	sdiv	r3, r1, r3
   15548:	930e      	str	r3, [sp, #56]	; 0x38
      if (__a < __b)
   1554a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1554c:	428b      	cmp	r3, r1
   1554e:	db6c      	blt.n	1562a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x350>
      return __a;
   15550:	ab0e      	add	r3, sp, #56	; 0x38
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
   15552:	681b      	ldr	r3, [r3, #0]
   15554:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   15556:	9917      	ldr	r1, [sp, #92]	; 0x5c
   15558:	428b      	cmp	r3, r1
   1555a:	dc68      	bgt.n	1562e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x354>
      return __a;
   1555c:	ab0e      	add	r3, sp, #56	; 0x38
          acc = std::min(acc, params.quantized_activation_max);
   1555e:	681c      	ldr	r4, [r3, #0]
   15560:	940e      	str	r4, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
   15562:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15564:	2b04      	cmp	r3, #4
   15566:	d164      	bne.n	15632 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x358>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15568:	f1be 0f00 	cmp.w	lr, #0
   1556c:	db63      	blt.n	15636 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
   1556e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   15570:	459e      	cmp	lr, r3
   15572:	da60      	bge.n	15636 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15574:	f1b8 0f00 	cmp.w	r8, #0
   15578:	db5f      	blt.n	1563a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
   1557a:	9822      	ldr	r0, [sp, #136]	; 0x88
   1557c:	4580      	cmp	r8, r0
   1557e:	da5c      	bge.n	1563a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15580:	2e00      	cmp	r6, #0
   15582:	db5c      	blt.n	1563e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
   15584:	9923      	ldr	r1, [sp, #140]	; 0x8c
   15586:	428e      	cmp	r6, r1
   15588:	da59      	bge.n	1563e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1558a:	2a00      	cmp	r2, #0
   1558c:	db59      	blt.n	15642 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
   1558e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15590:	429a      	cmp	r2, r3
   15592:	da56      	bge.n	15642 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15594:	fb00 800e 	mla	r0, r0, lr, r8
   15598:	fb00 6101 	mla	r1, r0, r1, r6
   1559c:	fb01 2303 	mla	r3, r1, r3, r2
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   155a0:	9905      	ldr	r1, [sp, #20]
   155a2:	54cc      	strb	r4, [r1, r3]
        for (int channel = 0; channel < depth; ++channel) {
   155a4:	3201      	adds	r2, #1
   155a6:	9b07      	ldr	r3, [sp, #28]
   155a8:	429a      	cmp	r2, r3
   155aa:	da4c      	bge.n	15646 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x36c>
              (out_x * stride_width) - params.padding_values.width;
   155ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   155ae:	fb06 f103 	mul.w	r1, r6, r3
   155b2:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
          const int in_x_origin =
   155b6:	eba1 0c00 	sub.w	ip, r1, r0
              (out_y * stride_height) - params.padding_values.height;
   155ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   155bc:	fb08 f403 	mul.w	r4, r8, r3
   155c0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
          const int in_y_origin =
   155c4:	eba4 0903 	sub.w	r9, r4, r3
          const int filter_x_start = std::max(0, -in_x_origin);
   155c8:	2500      	movs	r5, #0
   155ca:	952b      	str	r5, [sp, #172]	; 0xac
   155cc:	1a41      	subs	r1, r0, r1
   155ce:	912a      	str	r1, [sp, #168]	; 0xa8
      if (__a < __b)
   155d0:	42a9      	cmp	r1, r5
   155d2:	f73f af67 	bgt.w	154a4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ca>
      return __a;
   155d6:	a82b      	add	r0, sp, #172	; 0xac
   155d8:	6800      	ldr	r0, [r0, #0]
   155da:	9001      	str	r0, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   155dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   155de:	4401      	add	r1, r0
   155e0:	9129      	str	r1, [sp, #164]	; 0xa4
      if (__b < __a)
   155e2:	9815      	ldr	r0, [sp, #84]	; 0x54
   155e4:	4281      	cmp	r1, r0
   155e6:	f6ff af5f 	blt.w	154a8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ce>
      return __a;
   155ea:	a915      	add	r1, sp, #84	; 0x54
   155ec:	6809      	ldr	r1, [r1, #0]
   155ee:	9102      	str	r1, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   155f0:	2100      	movs	r1, #0
   155f2:	9128      	str	r1, [sp, #160]	; 0xa0
   155f4:	1b1b      	subs	r3, r3, r4
   155f6:	9327      	str	r3, [sp, #156]	; 0x9c
      if (__a < __b)
   155f8:	428b      	cmp	r3, r1
   155fa:	f73f af57 	bgt.w	154ac <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d2>
      return __a;
   155fe:	a928      	add	r1, sp, #160	; 0xa0
   15600:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   15602:	980a      	ldr	r0, [sp, #40]	; 0x28
   15604:	4403      	add	r3, r0
   15606:	9326      	str	r3, [sp, #152]	; 0x98
      if (__b < __a)
   15608:	9814      	ldr	r0, [sp, #80]	; 0x50
   1560a:	4283      	cmp	r3, r0
   1560c:	f6ff af50 	blt.w	154b0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d6>
      return __a;
   15610:	ab14      	add	r3, sp, #80	; 0x50
   15612:	681b      	ldr	r3, [r3, #0]
   15614:	9303      	str	r3, [sp, #12]
          int32_t acc = 0;
   15616:	2300      	movs	r3, #0
   15618:	930e      	str	r3, [sp, #56]	; 0x38
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1561a:	e756      	b.n	154ca <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f0>
                        : (acc - filter_count / 2) / filter_count;
   1561c:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   15620:	eba1 0160 	sub.w	r1, r1, r0, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   15624:	fb91 f3f3 	sdiv	r3, r1, r3
   15628:	e78e      	b.n	15548 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x26e>
	return __b;
   1562a:	ab16      	add	r3, sp, #88	; 0x58
   1562c:	e791      	b.n	15552 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x278>
	return __b;
   1562e:	ab17      	add	r3, sp, #92	; 0x5c
   15630:	e795      	b.n	1555e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x284>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15632:	f000 fcc7 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15636:	f000 fcc5 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1563a:	f000 fcc3 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1563e:	f000 fcc1 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15642:	f000 fcbf 	bl	15fc4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   15646:	3601      	adds	r6, #1
   15648:	e6ea      	b.n	15420 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x146>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1564a:	f108 0801 	add.w	r8, r8, #1
   1564e:	e6e2      	b.n	15416 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   15650:	f10e 0801 	add.w	r8, lr, #1
   15654:	e6d8      	b.n	15408 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12e>
    if (size_ > kMaxSmallSize) {
   15656:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15658:	2b05      	cmp	r3, #5
   1565a:	dd03      	ble.n	15664 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
      delete[] dims_pointer_;
   1565c:	9821      	ldr	r0, [sp, #132]	; 0x84
   1565e:	b108      	cbz	r0, 15664 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
   15660:	f000 fc9b 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   15664:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15666:	2b05      	cmp	r3, #5
   15668:	dd03      	ble.n	15672 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
      delete[] dims_pointer_;
   1566a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1566c:	b108      	cbz	r0, 15672 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
   1566e:	f000 fc94 	bl	15f9a <_ZdaPv>
}
   15672:	b031      	add	sp, #196	; 0xc4
   15674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015678 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   15678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1567c:	b0b1      	sub	sp, #196	; 0xc4
   1567e:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   15680:	9c3b      	ldr	r4, [sp, #236]	; 0xec
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   15682:	6891      	ldr	r1, [r2, #8]
   15684:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.stride_width = params->stride_width;
   15686:	6851      	ldr	r1, [r2, #4]
   15688:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.filter_height = params->filter_height;
   1568a:	6911      	ldr	r1, [r2, #16]
   1568c:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_width = params->filter_width;
   1568e:	68d2      	ldr	r2, [r2, #12]
   15690:	9214      	str	r2, [sp, #80]	; 0x50
  op_params.padding_values.height = data->padding.height;
   15692:	685a      	ldr	r2, [r3, #4]
   15694:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  op_params.padding_values.width = data->padding.width;
   15698:	681a      	ldr	r2, [r3, #0]
   1569a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  op_params.quantized_activation_min = data->activation_min;
   1569e:	691a      	ldr	r2, [r3, #16]
   156a0:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.quantized_activation_max = data->activation_max;
   156a2:	695b      	ldr	r3, [r3, #20]
   156a4:	9316      	str	r3, [sp, #88]	; 0x58

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
   156a6:	4629      	mov	r1, r5
   156a8:	a819      	add	r0, sp, #100	; 0x64
   156aa:	f7ff f8b0 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   156ae:	4628      	mov	r0, r5
   156b0:	f7fe face 	bl	13c50 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   156b4:	4681      	mov	r9, r0
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
   156b6:	4621      	mov	r1, r4
   156b8:	a81f      	add	r0, sp, #124	; 0x7c
   156ba:	f7ff f8a8 	bl	1480e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   156be:	4620      	mov	r0, r4
   156c0:	f7fe facc 	bl	13c5c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   156c4:	9000      	str	r0, [sp, #0]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   156c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   156c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   156ca:	429a      	cmp	r2, r3
   156cc:	f300 8081 	bgt.w	157d2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15a>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   156d0:	f112 0f80 	cmn.w	r2, #128	; 0x80
   156d4:	db7f      	blt.n	157d6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15e>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   156d6:	2b7f      	cmp	r3, #127	; 0x7f
   156d8:	dc7f      	bgt.n	157da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x162>
  inline int32_t DimensionsCount() const { return size_; }
   156da:	9b19      	ldr	r3, [sp, #100]	; 0x64
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   156dc:	2b04      	cmp	r3, #4
   156de:	d17e      	bne.n	157de <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x166>
   156e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   156e2:	2b04      	cmp	r3, #4
   156e4:	d17d      	bne.n	157e2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16a>
    TFLITE_DCHECK_LT(i, size_);
   156e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   156e8:	2b00      	cmp	r3, #0
   156ea:	dd7c      	ble.n	157e6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   156ec:	2b05      	cmp	r3, #5
   156ee:	dd7c      	ble.n	157ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x172>
   156f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   156f2:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   156f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   156f6:	2a00      	cmp	r2, #0
   156f8:	dd79      	ble.n	157ee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   156fa:	2a05      	cmp	r2, #5
   156fc:	dd79      	ble.n	157f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17a>
   156fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15700:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15702:	429a      	cmp	r2, r3
   15704:	d177      	bne.n	157f6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15706:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   15708:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1570a:	2a00      	cmp	r2, #0
   1570c:	dd75      	ble.n	157fa <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1570e:	2a05      	cmp	r2, #5
   15710:	dd75      	ble.n	157fe <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x186>
   15712:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15714:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15716:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   15718:	4293      	cmp	r3, r2
   1571a:	dc72      	bgt.n	15802 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18a>
      return __a;
   1571c:	ab2f      	add	r3, sp, #188	; 0xbc
   1571e:	681b      	ldr	r3, [r3, #0]
   15720:	9304      	str	r3, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   15722:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15724:	2b03      	cmp	r3, #3
   15726:	dd6e      	ble.n	15806 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15728:	2b05      	cmp	r3, #5
   1572a:	dd6e      	ble.n	1580a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x192>
   1572c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1572e:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   15730:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15732:	2a03      	cmp	r2, #3
   15734:	dd6b      	ble.n	1580e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15736:	2a05      	cmp	r2, #5
   15738:	dd6b      	ble.n	15812 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19a>
   1573a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1573c:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1573e:	429a      	cmp	r2, r3
   15740:	d169      	bne.n	15816 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15742:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   15744:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15746:	2a03      	cmp	r2, #3
   15748:	dd67      	ble.n	1581a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1574a:	2a05      	cmp	r2, #5
   1574c:	dd67      	ble.n	1581e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a6>
   1574e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15750:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15752:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   15754:	4293      	cmp	r3, r2
   15756:	dc64      	bgt.n	15822 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
      return __a;
   15758:	ab2d      	add	r3, sp, #180	; 0xb4
   1575a:	681b      	ldr	r3, [r3, #0]
   1575c:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   1575e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15760:	2b01      	cmp	r3, #1
   15762:	dd60      	ble.n	15826 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15764:	2b05      	cmp	r3, #5
   15766:	dd60      	ble.n	1582a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b2>
   15768:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1576a:	685b      	ldr	r3, [r3, #4]
   1576c:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   1576e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15770:	2b02      	cmp	r3, #2
   15772:	dd5d      	ble.n	15830 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15774:	2b05      	cmp	r3, #5
   15776:	dd5d      	ble.n	15834 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1bc>
   15778:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1577a:	689b      	ldr	r3, [r3, #8]
   1577c:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
   1577e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15780:	2b01      	cmp	r3, #1
   15782:	dd5a      	ble.n	1583a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15784:	2b05      	cmp	r3, #5
   15786:	dd5a      	ble.n	1583e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c6>
   15788:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1578a:	685b      	ldr	r3, [r3, #4]
   1578c:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   1578e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15790:	2b02      	cmp	r3, #2
   15792:	dd57      	ble.n	15844 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15794:	2b05      	cmp	r3, #5
   15796:	dd57      	ble.n	15848 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
   15798:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1579a:	689b      	ldr	r3, [r3, #8]
   1579c:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   1579e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   157a0:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   157a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   157a4:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   157a6:	f04f 0c00 	mov.w	ip, #0
   157aa:	46c8      	mov	r8, r9
   157ac:	46e1      	mov	r9, ip
   157ae:	9b04      	ldr	r3, [sp, #16]
   157b0:	4599      	cmp	r9, r3
   157b2:	f280 812b 	bge.w	15a0c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x394>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   157b6:	2700      	movs	r7, #0
   157b8:	46c6      	mov	lr, r8
   157ba:	46b8      	mov	r8, r7
   157bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   157be:	4598      	cmp	r8, r3
   157c0:	f280 8120 	bge.w	15a04 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x38c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   157c4:	2600      	movs	r6, #0
   157c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   157c8:	429e      	cmp	r6, r3
   157ca:	f280 8118 	bge.w	159fe <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x386>
        for (int channel = 0; channel < depth; ++channel) {
   157ce:	2300      	movs	r3, #0
   157d0:	e0c7      	b.n	15962 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ea>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   157d2:	f000 fbf7 	bl	15fc4 <abort>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   157d6:	f000 fbf5 	bl	15fc4 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   157da:	f000 fbf3 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   157de:	f000 fbf1 	bl	15fc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   157e2:	f000 fbef 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   157e6:	f000 fbed 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   157ec:	e782      	b.n	156f4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x7c>
    TFLITE_DCHECK_LT(i, size_);
   157ee:	f000 fbe9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   157f4:	e785      	b.n	15702 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   157f6:	f000 fbe5 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   157fa:	f000 fbe3 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15800:	e789      	b.n	15716 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x9e>
	return __b;
   15802:	ab2e      	add	r3, sp, #184	; 0xb8
   15804:	e78b      	b.n	1571e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   15806:	f000 fbdd 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1580a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1580c:	e790      	b.n	15730 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb8>
    TFLITE_DCHECK_LT(i, size_);
   1580e:	f000 fbd9 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15812:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   15814:	e793      	b.n	1573e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15816:	f000 fbd5 	bl	15fc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1581a:	f000 fbd3 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1581e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   15820:	e797      	b.n	15752 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xda>
   15822:	ab2c      	add	r3, sp, #176	; 0xb0
   15824:	e799      	b.n	1575a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   15826:	f000 fbcd 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1582a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1582c:	9306      	str	r3, [sp, #24]
   1582e:	e79e      	b.n	1576e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf6>
    TFLITE_DCHECK_LT(i, size_);
   15830:	f000 fbc8 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15834:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15836:	9305      	str	r3, [sp, #20]
   15838:	e7a1      	b.n	1577e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x106>
    TFLITE_DCHECK_LT(i, size_);
   1583a:	f000 fbc3 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1583e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   15840:	930b      	str	r3, [sp, #44]	; 0x2c
   15842:	e7a4      	b.n	1578e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x116>
    TFLITE_DCHECK_LT(i, size_);
   15844:	f000 fbbe 	bl	15fc4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15848:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1584a:	930a      	str	r3, [sp, #40]	; 0x28
   1584c:	e7a7      	b.n	1579e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x126>
	return __b;
   1584e:	aa2a      	add	r2, sp, #168	; 0xa8
   15850:	e0a0      	b.n	15994 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x31c>
	return __b;
   15852:	aa29      	add	r2, sp, #164	; 0xa4
   15854:	e0a8      	b.n	159a8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x330>
	return __b;
   15856:	a927      	add	r1, sp, #156	; 0x9c
   15858:	e0b0      	b.n	159bc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x344>
	return __b;
   1585a:	aa26      	add	r2, sp, #152	; 0x98
   1585c:	e0b7      	b.n	159ce <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1585e:	f000 fbb1 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15862:	f000 fbaf 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15866:	f000 fbad 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1586a:	f000 fbab 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1586e:	f000 fba9 	bl	15fc4 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   15872:	f994 2000 	ldrsb.w	r2, [r4]
   15876:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1587a:	3001      	adds	r0, #1
   1587c:	9a02      	ldr	r2, [sp, #8]
   1587e:	4282      	cmp	r2, r0
   15880:	dd2d      	ble.n	158de <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x266>
              const int in_x = in_x_origin + filter_x;
   15882:	eb0c 0400 	add.w	r4, ip, r0
              const int in_y = in_y_origin + filter_y;
   15886:	eb0a 0701 	add.w	r7, sl, r1
  inline int32_t DimensionsCount() const { return size_; }
   1588a:	9d19      	ldr	r5, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1588c:	2d04      	cmp	r5, #4
   1588e:	d1e6      	bne.n	1585e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15890:	f1b9 0f00 	cmp.w	r9, #0
   15894:	dbe5      	blt.n	15862 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
   15896:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   15898:	45a9      	cmp	r9, r5
   1589a:	dae2      	bge.n	15862 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1589c:	2f00      	cmp	r7, #0
   1589e:	dbe2      	blt.n	15866 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
   158a0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   158a4:	455f      	cmp	r7, fp
   158a6:	dade      	bge.n	15866 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   158a8:	2c00      	cmp	r4, #0
   158aa:	dbde      	blt.n	1586a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
   158ac:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   158ae:	42ac      	cmp	r4, r5
   158b0:	dadb      	bge.n	1586a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   158b2:	2b00      	cmp	r3, #0
   158b4:	dbdb      	blt.n	1586e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
   158b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   158b8:	4293      	cmp	r3, r2
   158ba:	dad8      	bge.n	1586e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   158bc:	fb0b 7709 	mla	r7, fp, r9, r7
   158c0:	fb07 4405 	mla	r4, r7, r5, r4
   158c4:	fb04 3202 	mla	r2, r4, r2, r3
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   158c8:	eb0e 0402 	add.w	r4, lr, r2
      if (__a < __b)
   158cc:	f99d 5037 	ldrsb.w	r5, [sp, #55]	; 0x37
   158d0:	f91e 2002 	ldrsb.w	r2, [lr, r2]
   158d4:	4295      	cmp	r5, r2
   158d6:	dbcc      	blt.n	15872 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
      return __a;
   158d8:	f10d 0437 	add.w	r4, sp, #55	; 0x37
   158dc:	e7c9      	b.n	15872 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   158de:	3101      	adds	r1, #1
   158e0:	9a03      	ldr	r2, [sp, #12]
   158e2:	428a      	cmp	r2, r1
   158e4:	dd01      	ble.n	158ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x272>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   158e6:	9801      	ldr	r0, [sp, #4]
   158e8:	e7c8      	b.n	1587c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x204>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
   158ea:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
   158ee:	f88d 2097 	strb.w	r2, [sp, #151]	; 0x97
      if (__a < __b)
   158f2:	f99d 1037 	ldrsb.w	r1, [sp, #55]	; 0x37
   158f6:	428a      	cmp	r2, r1
   158f8:	dc6f      	bgt.n	159da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
      return __a;
   158fa:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   158fe:	f992 1000 	ldrsb.w	r1, [r2]
   15902:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
          max = std::min<int8_t>(max, params.quantized_activation_max);
   15906:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   1590a:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
      if (__b < __a)
   1590e:	4291      	cmp	r1, r2
   15910:	dc66      	bgt.n	159e0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
      return __a;
   15912:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   15916:	f992 4000 	ldrsb.w	r4, [r2]
   1591a:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  inline int32_t DimensionsCount() const { return size_; }
   1591e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15920:	2a04      	cmp	r2, #4
   15922:	d160      	bne.n	159e6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15924:	f1b9 0f00 	cmp.w	r9, #0
   15928:	db5f      	blt.n	159ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
   1592a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1592c:	4591      	cmp	r9, r2
   1592e:	da5c      	bge.n	159ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15930:	f1b8 0f00 	cmp.w	r8, #0
   15934:	db5b      	blt.n	159ee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
   15936:	9821      	ldr	r0, [sp, #132]	; 0x84
   15938:	4580      	cmp	r8, r0
   1593a:	da58      	bge.n	159ee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1593c:	2e00      	cmp	r6, #0
   1593e:	db58      	blt.n	159f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
   15940:	9922      	ldr	r1, [sp, #136]	; 0x88
   15942:	428e      	cmp	r6, r1
   15944:	da55      	bge.n	159f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15946:	2b00      	cmp	r3, #0
   15948:	db55      	blt.n	159f6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
   1594a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1594c:	4293      	cmp	r3, r2
   1594e:	da52      	bge.n	159f6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15950:	fb00 8009 	mla	r0, r0, r9, r8
   15954:	fb00 6101 	mla	r1, r0, r1, r6
   15958:	fb01 3202 	mla	r2, r1, r2, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1595c:	9900      	ldr	r1, [sp, #0]
   1595e:	548c      	strb	r4, [r1, r2]
        for (int channel = 0; channel < depth; ++channel) {
   15960:	3301      	adds	r3, #1
   15962:	9a07      	ldr	r2, [sp, #28]
   15964:	4293      	cmp	r3, r2
   15966:	da48      	bge.n	159fa <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x382>
              (out_x * stride_width) - params.padding_values.width;
   15968:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1596a:	fb06 f002 	mul.w	r0, r6, r2
   1596e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
          const int in_x_origin =
   15972:	eba0 0c02 	sub.w	ip, r0, r2
              (out_y * stride_height) - params.padding_values.height;
   15976:	9908      	ldr	r1, [sp, #32]
   15978:	fb08 f401 	mul.w	r4, r8, r1
   1597c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
          const int in_y_origin =
   15980:	eba4 0a01 	sub.w	sl, r4, r1
          const int filter_x_start = std::max(0, -in_x_origin);
   15984:	2500      	movs	r5, #0
   15986:	952b      	str	r5, [sp, #172]	; 0xac
   15988:	1a10      	subs	r0, r2, r0
   1598a:	902a      	str	r0, [sp, #168]	; 0xa8
      if (__a < __b)
   1598c:	42a8      	cmp	r0, r5
   1598e:	f73f af5e 	bgt.w	1584e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d6>
      return __a;
   15992:	aa2b      	add	r2, sp, #172	; 0xac
   15994:	6812      	ldr	r2, [r2, #0]
   15996:	9201      	str	r2, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   15998:	9a05      	ldr	r2, [sp, #20]
   1599a:	4410      	add	r0, r2
   1599c:	9029      	str	r0, [sp, #164]	; 0xa4
      if (__b < __a)
   1599e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   159a0:	4290      	cmp	r0, r2
   159a2:	f6ff af56 	blt.w	15852 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1da>
      return __a;
   159a6:	aa14      	add	r2, sp, #80	; 0x50
   159a8:	6812      	ldr	r2, [r2, #0]
   159aa:	9202      	str	r2, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   159ac:	2200      	movs	r2, #0
   159ae:	9228      	str	r2, [sp, #160]	; 0xa0
   159b0:	1b0a      	subs	r2, r1, r4
   159b2:	9227      	str	r2, [sp, #156]	; 0x9c
      if (__a < __b)
   159b4:	2a00      	cmp	r2, #0
   159b6:	f73f af4e 	bgt.w	15856 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1de>
      return __a;
   159ba:	a928      	add	r1, sp, #160	; 0xa0
   159bc:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   159be:	9806      	ldr	r0, [sp, #24]
   159c0:	4402      	add	r2, r0
   159c2:	9226      	str	r2, [sp, #152]	; 0x98
      if (__b < __a)
   159c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   159c6:	4282      	cmp	r2, r0
   159c8:	f6ff af47 	blt.w	1585a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e2>
      return __a;
   159cc:	aa13      	add	r2, sp, #76	; 0x4c
   159ce:	6812      	ldr	r2, [r2, #0]
   159d0:	9203      	str	r2, [sp, #12]
          int8_t max = std::numeric_limits<int8_t>::lowest();
   159d2:	2280      	movs	r2, #128	; 0x80
   159d4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   159d8:	e782      	b.n	158e0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x268>
	return __b;
   159da:	f10d 0297 	add.w	r2, sp, #151	; 0x97
   159de:	e78e      	b.n	158fe <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x286>
	return __b;
   159e0:	f10d 0296 	add.w	r2, sp, #150	; 0x96
   159e4:	e797      	b.n	15916 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x29e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   159e6:	f000 faed 	bl	15fc4 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   159ea:	f000 faeb 	bl	15fc4 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   159ee:	f000 fae9 	bl	15fc4 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   159f2:	f000 fae7 	bl	15fc4 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   159f6:	f000 fae5 	bl	15fc4 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   159fa:	3601      	adds	r6, #1
   159fc:	e6e3      	b.n	157c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   159fe:	f108 0801 	add.w	r8, r8, #1
   15a02:	e6db      	b.n	157bc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x144>
   15a04:	46f0      	mov	r8, lr
  for (int batch = 0; batch < batches; ++batch) {
   15a06:	f109 0901 	add.w	r9, r9, #1
   15a0a:	e6d0      	b.n	157ae <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
    if (size_ > kMaxSmallSize) {
   15a0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15a0e:	2b05      	cmp	r3, #5
   15a10:	dd03      	ble.n	15a1a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
      delete[] dims_pointer_;
   15a12:	9820      	ldr	r0, [sp, #128]	; 0x80
   15a14:	b108      	cbz	r0, 15a1a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
   15a16:	f000 fac0 	bl	15f9a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   15a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15a1c:	2b05      	cmp	r3, #5
   15a1e:	dd03      	ble.n	15a28 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
      delete[] dims_pointer_;
   15a20:	981a      	ldr	r0, [sp, #104]	; 0x68
   15a22:	b108      	cbz	r0, 15a28 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
   15a24:	f000 fab9 	bl	15f9a <_ZdaPv>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
   15a28:	b031      	add	sp, #196	; 0xc4
   15a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015a2e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   15a2e:	b570      	push	{r4, r5, r6, lr}
   15a30:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
   15a32:	b1c0      	cbz	r0, 15a66 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   15a34:	460d      	mov	r5, r1
   15a36:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   15a38:	b1b9      	cbz	r1, 15a6a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   15a3a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   15a3c:	680a      	ldr	r2, [r1, #0]
   15a3e:	6851      	ldr	r1, [r2, #4]
   15a40:	4798      	blx	r3
   15a42:	4604      	mov	r4, r0
  TFLITE_DCHECK(context != nullptr);
   15a44:	b19e      	cbz	r6, 15a6e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK(node != nullptr);
   15a46:	b1a5      	cbz	r5, 15a72 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x44>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   15a48:	6d73      	ldr	r3, [r6, #84]	; 0x54
   15a4a:	686a      	ldr	r2, [r5, #4]
   15a4c:	6851      	ldr	r1, [r2, #4]
   15a4e:	4630      	mov	r0, r6
   15a50:	4798      	blx	r3
   15a52:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   15a54:	a901      	add	r1, sp, #4
   15a56:	7a20      	ldrb	r0, [r4, #8]
   15a58:	f7fd fae7 	bl	1302a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   15a5c:	4606      	mov	r6, r0
   15a5e:	b150      	cbz	r0, 15a76 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   15a60:	4630      	mov	r0, r6
   15a62:	b002      	add	sp, #8
   15a64:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
   15a66:	f000 faad 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
   15a6a:	f000 faab 	bl	15fc4 <abort>
  TFLITE_DCHECK(context != nullptr);
   15a6e:	f000 faa9 	bl	15fc4 <abort>
  TFLITE_DCHECK(node != nullptr);
   15a72:	f000 faa7 	bl	15fc4 <abort>
  input_bytes *= ElementCount(*input->dims);
   15a76:	6860      	ldr	r0, [r4, #4]
   15a78:	f7fd fbe3 	bl	13242 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   15a7c:	9b01      	ldr	r3, [sp, #4]
   15a7e:	fb00 f003 	mul.w	r0, r0, r3
   15a82:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   15a84:	6822      	ldr	r2, [r4, #0]
   15a86:	682b      	ldr	r3, [r5, #0]
   15a88:	429a      	cmp	r2, r3
   15a8a:	d0e9      	beq.n	15a60 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
   15a8c:	2300      	movs	r3, #0
   15a8e:	e004      	b.n	15a9a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
      output->data.raw[i] = input->data.raw[i];
   15a90:	6821      	ldr	r1, [r4, #0]
   15a92:	682a      	ldr	r2, [r5, #0]
   15a94:	5cc9      	ldrb	r1, [r1, r3]
   15a96:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   15a98:	3301      	adds	r3, #1
   15a9a:	9a01      	ldr	r2, [sp, #4]
   15a9c:	429a      	cmp	r2, r3
   15a9e:	d8f7      	bhi.n	15a90 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   15aa0:	e7de      	b.n	15a60 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>

00015aa2 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   15aa2:	b508      	push	{r3, lr}
   15aa4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15aa8:	f7eb f84e 	bl	b48 <__addsf3>
   15aac:	4601      	mov	r1, r0
   15aae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   15ab2:	f7eb fa05 	bl	ec0 <__aeabi_fdiv>
   15ab6:	bd08      	pop	{r3, pc}

00015ab8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   15ab8:	b508      	push	{r3, lr}
   15aba:	f7fa fce7 	bl	1048c <expf>
   15abe:	bd08      	pop	{r3, pc}

00015ac0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   15ac0:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15ac2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15ac4:	b113      	cbz	r3, 15acc <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   15ac6:	2138      	movs	r1, #56	; 0x38
   15ac8:	4798      	blx	r3
}
   15aca:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15acc:	f000 fa7a 	bl	15fc4 <abort>

00015ad0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   15ad0:	b148      	cbz	r0, 15ae6 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   15ad2:	68c3      	ldr	r3, [r0, #12]
   15ad4:	8818      	ldrh	r0, [r3, #0]
   15ad6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15ada:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   15ade:	bf14      	ite	ne
   15ae0:	2000      	movne	r0, #0
   15ae2:	2001      	moveq	r0, #1
   15ae4:	4770      	bx	lr
		return false;
   15ae6:	2000      	movs	r0, #0
}
   15ae8:	4770      	bx	lr

00015aea <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15aec:	4605      	mov	r5, r0
   15aee:	460e      	mov	r6, r1
	__asm__ volatile(
   15af0:	f04f 0320 	mov.w	r3, #32
   15af4:	f3ef 8711 	mrs	r7, BASEPRI
   15af8:	f383 8812 	msr	BASEPRI_MAX, r3
   15afc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15b00:	f7fa f87e 	bl	fc00 <z_impl_z_current_get>
   15b04:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   15b06:	4631      	mov	r1, r6
   15b08:	4628      	mov	r0, r5
   15b0a:	f7fd fa0c 	bl	12f26 <k_sys_fatal_error_handler>
	__asm__ volatile(
   15b0e:	f387 8811 	msr	BASEPRI, r7
   15b12:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15b16:	4620      	mov	r0, r4
   15b18:	f7ee fdc4 	bl	46a4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015b1e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15b1e:	6902      	ldr	r2, [r0, #16]
   15b20:	6943      	ldr	r3, [r0, #20]
   15b22:	431a      	orrs	r2, r3
   15b24:	f012 0203 	ands.w	r2, r2, #3
   15b28:	d10d      	bne.n	15b46 <create_free_list+0x28>
	slab->free_list = NULL;
   15b2a:	2100      	movs	r1, #0
   15b2c:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15b2e:	e005      	b.n	15b3c <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   15b30:	6981      	ldr	r1, [r0, #24]
   15b32:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   15b34:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   15b36:	6901      	ldr	r1, [r0, #16]
   15b38:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   15b3a:	3201      	adds	r2, #1
   15b3c:	68c1      	ldr	r1, [r0, #12]
   15b3e:	4291      	cmp	r1, r2
   15b40:	d8f6      	bhi.n	15b30 <create_free_list+0x12>
	return 0;
   15b42:	2000      	movs	r0, #0
   15b44:	4770      	bx	lr
		return -EINVAL;
   15b46:	f06f 0015 	mvn.w	r0, #21
}
   15b4a:	4770      	bx	lr

00015b4c <k_mem_slab_init>:
{
   15b4c:	b510      	push	{r4, lr}
   15b4e:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   15b50:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   15b52:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   15b54:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   15b56:	2300      	movs	r3, #0
   15b58:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   15b5a:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
   15b5c:	f7ff ffdf 	bl	15b1e <create_free_list>
	if (rc < 0) {
   15b60:	2800      	cmp	r0, #0
   15b62:	db01      	blt.n	15b68 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   15b64:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   15b66:	6064      	str	r4, [r4, #4]
}
   15b68:	bd10      	pop	{r4, pc}

00015b6a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b6c:	4604      	mov	r4, r0
   15b6e:	460d      	mov	r5, r1
	__asm__ volatile(
   15b70:	f04f 0320 	mov.w	r3, #32
   15b74:	f3ef 8611 	mrs	r6, BASEPRI
   15b78:	f383 8812 	msr	BASEPRI_MAX, r3
   15b7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   15b80:	6983      	ldr	r3, [r0, #24]
   15b82:	b163      	cbz	r3, 15b9e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   15b84:	682b      	ldr	r3, [r5, #0]
   15b86:	69a2      	ldr	r2, [r4, #24]
   15b88:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   15b8a:	682b      	ldr	r3, [r5, #0]
   15b8c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   15b8e:	69e3      	ldr	r3, [r4, #28]
   15b90:	3b01      	subs	r3, #1
   15b92:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15b94:	f386 8811 	msr	BASEPRI, r6
   15b98:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   15b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b9e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15ba2:	f000 f940 	bl	15e26 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   15ba6:	2800      	cmp	r0, #0
   15ba8:	d0ec      	beq.n	15b84 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   15baa:	682a      	ldr	r2, [r5, #0]
   15bac:	2100      	movs	r1, #0
   15bae:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15bb2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   15bb4:	f000 f89c 	bl	15cf0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   15bb8:	4631      	mov	r1, r6
   15bba:	4638      	mov	r0, r7
   15bbc:	f7f9 fcc4 	bl	f548 <z_reschedule>
			return;
   15bc0:	e7ec      	b.n	15b9c <k_mem_slab_free+0x32>

00015bc2 <setup_thread_stack>:
{
   15bc2:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15bc4:	3207      	adds	r2, #7
   15bc6:	f022 0207 	bic.w	r2, r2, #7
   15bca:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   15bce:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   15bd2:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   15bd6:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   15bda:	2200      	movs	r2, #0
   15bdc:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   15be0:	18c8      	adds	r0, r1, r3
   15be2:	bc10      	pop	{r4}
   15be4:	4770      	bx	lr

00015be6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15be6:	f3ef 8005 	mrs	r0, IPSR
}
   15bea:	3800      	subs	r0, #0
   15bec:	bf18      	it	ne
   15bee:	2001      	movne	r0, #1
   15bf0:	4770      	bx	lr

00015bf2 <z_impl_k_thread_start>:
{
   15bf2:	b508      	push	{r3, lr}
	z_sched_start(thread);
   15bf4:	f7f9 fdd2 	bl	f79c <z_sched_start>
}
   15bf8:	bd08      	pop	{r3, pc}

00015bfa <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   15bfa:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   15bfc:	2400      	movs	r4, #0
   15bfe:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   15c00:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15c02:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   15c04:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   15c06:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   15c08:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   15c0a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   15c0c:	bc10      	pop	{r4}
   15c0e:	4770      	bx	lr

00015c10 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   15c10:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   15c12:	f7ee f8cb 	bl	3dac <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   15c16:	f7fd f90f 	bl	12e38 <sys_clock_idle_exit>
}
   15c1a:	bd08      	pop	{r3, pc}

00015c1c <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   15c1c:	b508      	push	{r3, lr}
	__asm__ volatile(
   15c1e:	f04f 0220 	mov.w	r2, #32
   15c22:	f3ef 8311 	mrs	r3, BASEPRI
   15c26:	f382 8812 	msr	BASEPRI_MAX, r2
   15c2a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   15c2e:	f7f9 faff 	bl	f230 <pm_save_idle>
   15c32:	e7f4      	b.n	15c1e <idle+0x2>

00015c34 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   15c34:	4288      	cmp	r0, r1
   15c36:	da00      	bge.n	15c3a <new_prio_for_inheritance+0x6>
   15c38:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15c3a:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   15c3e:	db01      	blt.n	15c44 <new_prio_for_inheritance+0x10>
   15c40:	4608      	mov	r0, r1
   15c42:	4770      	bx	lr
   15c44:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   15c48:	4770      	bx	lr

00015c4a <adjust_owner_prio>:
{
   15c4a:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   15c4c:	6880      	ldr	r0, [r0, #8]
   15c4e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15c52:	428b      	cmp	r3, r1
   15c54:	d101      	bne.n	15c5a <adjust_owner_prio+0x10>
	return false;
   15c56:	2000      	movs	r0, #0
}
   15c58:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   15c5a:	f7f9 fded 	bl	f838 <z_set_prio>
   15c5e:	e7fb      	b.n	15c58 <adjust_owner_prio+0xe>

00015c60 <z_impl_k_mutex_init>:
{
   15c60:	4603      	mov	r3, r0
	mutex->owner = NULL;
   15c62:	2000      	movs	r0, #0
   15c64:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   15c66:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   15c68:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   15c6a:	605b      	str	r3, [r3, #4]
}
   15c6c:	4770      	bx	lr

00015c6e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   15c6e:	b13a      	cbz	r2, 15c80 <z_impl_k_sem_init+0x12>
   15c70:	428a      	cmp	r2, r1
   15c72:	d308      	bcc.n	15c86 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   15c74:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   15c76:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   15c78:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   15c7a:	6040      	str	r0, [r0, #4]
	return 0;
   15c7c:	2000      	movs	r0, #0
   15c7e:	4770      	bx	lr
		return -EINVAL;
   15c80:	f06f 0015 	mvn.w	r0, #21
   15c84:	4770      	bx	lr
   15c86:	f06f 0015 	mvn.w	r0, #21
}
   15c8a:	4770      	bx	lr

00015c8c <thread_active_elsewhere>:
}
   15c8c:	2000      	movs	r0, #0
   15c8e:	4770      	bx	lr

00015c90 <pended_on_thread>:
}
   15c90:	6880      	ldr	r0, [r0, #8]
   15c92:	4770      	bx	lr

00015c94 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   15c94:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15c98:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   15c9c:	4283      	cmp	r3, r0
   15c9e:	d001      	beq.n	15ca4 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   15ca0:	1ac0      	subs	r0, r0, r3
   15ca2:	4770      	bx	lr
	return 0;
   15ca4:	2000      	movs	r0, #0
}
   15ca6:	4770      	bx	lr

00015ca8 <z_reschedule_irqlock>:
{
   15ca8:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15caa:	4603      	mov	r3, r0
   15cac:	b920      	cbnz	r0, 15cb8 <z_reschedule_irqlock+0x10>
   15cae:	f3ef 8205 	mrs	r2, IPSR
   15cb2:	b942      	cbnz	r2, 15cc6 <z_reschedule_irqlock+0x1e>
   15cb4:	2201      	movs	r2, #1
   15cb6:	e000      	b.n	15cba <z_reschedule_irqlock+0x12>
   15cb8:	2200      	movs	r2, #0
	if (resched(key)) {
   15cba:	b932      	cbnz	r2, 15cca <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   15cbc:	f383 8811 	msr	BASEPRI, r3
   15cc0:	f3bf 8f6f 	isb	sy
}
   15cc4:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15cc6:	2200      	movs	r2, #0
   15cc8:	e7f7      	b.n	15cba <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   15cca:	4618      	mov	r0, r3
   15ccc:	f7ee fa5a 	bl	4184 <arch_swap>
	return ret;
   15cd0:	e7f8      	b.n	15cc4 <z_reschedule_irqlock+0x1c>

00015cd2 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   15cd2:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   15cd4:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   15cd6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15cd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15cda:	2300      	movs	r3, #0
   15cdc:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   15cde:	604b      	str	r3, [r1, #4]
}
   15ce0:	4770      	bx	lr

00015ce2 <z_priq_dumb_best>:
{
   15ce2:	4603      	mov	r3, r0
	return list->head == list;
   15ce4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15ce6:	4283      	cmp	r3, r0
   15ce8:	d000      	beq.n	15cec <z_priq_dumb_best+0xa>
}
   15cea:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15cec:	2000      	movs	r0, #0
	return thread;
   15cee:	e7fc      	b.n	15cea <z_priq_dumb_best+0x8>

00015cf0 <z_ready_thread>:
{
   15cf0:	b538      	push	{r3, r4, r5, lr}
   15cf2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15cf4:	2300      	movs	r3, #0
	__asm__ volatile(
   15cf6:	f04f 0220 	mov.w	r2, #32
   15cfa:	f3ef 8511 	mrs	r5, BASEPRI
   15cfe:	f382 8812 	msr	BASEPRI_MAX, r2
   15d02:	f3bf 8f6f 	isb	sy
   15d06:	e007      	b.n	15d18 <z_ready_thread+0x28>
			ready_thread(thread);
   15d08:	4620      	mov	r0, r4
   15d0a:	f7f9 fd07 	bl	f71c <ready_thread>
	__asm__ volatile(
   15d0e:	f385 8811 	msr	BASEPRI, r5
   15d12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15d16:	2301      	movs	r3, #1
   15d18:	b92b      	cbnz	r3, 15d26 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   15d1a:	4620      	mov	r0, r4
   15d1c:	f7ff ffb6 	bl	15c8c <thread_active_elsewhere>
   15d20:	2800      	cmp	r0, #0
   15d22:	d1f4      	bne.n	15d0e <z_ready_thread+0x1e>
   15d24:	e7f0      	b.n	15d08 <z_ready_thread+0x18>
}
   15d26:	bd38      	pop	{r3, r4, r5, pc}

00015d28 <z_thread_timeout>:
{
   15d28:	b570      	push	{r4, r5, r6, lr}
   15d2a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   15d2c:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   15d30:	2300      	movs	r3, #0
	__asm__ volatile(
   15d32:	f04f 0220 	mov.w	r2, #32
   15d36:	f3ef 8611 	mrs	r6, BASEPRI
   15d3a:	f382 8812 	msr	BASEPRI_MAX, r2
   15d3e:	f3bf 8f6f 	isb	sy
   15d42:	e019      	b.n	15d78 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15d44:	4628      	mov	r0, r5
   15d46:	f7ff ffa3 	bl	15c90 <pended_on_thread>
   15d4a:	4629      	mov	r1, r5
   15d4c:	f7ff ffc1 	bl	15cd2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15d50:	7b6b      	ldrb	r3, [r5, #13]
   15d52:	f023 0302 	bic.w	r3, r3, #2
   15d56:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   15d58:	2300      	movs	r3, #0
   15d5a:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15d5c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15d60:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   15d64:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   15d68:	4628      	mov	r0, r5
   15d6a:	f7f9 fcd7 	bl	f71c <ready_thread>
	__asm__ volatile(
   15d6e:	f386 8811 	msr	BASEPRI, r6
   15d72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15d76:	2301      	movs	r3, #1
   15d78:	b94b      	cbnz	r3, 15d8e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   15d7a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   15d7e:	f013 0f28 	tst.w	r3, #40	; 0x28
   15d82:	d1f4      	bne.n	15d6e <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   15d84:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15d88:	2b00      	cmp	r3, #0
   15d8a:	d1db      	bne.n	15d44 <z_thread_timeout+0x1c>
   15d8c:	e7e6      	b.n	15d5c <z_thread_timeout+0x34>
}
   15d8e:	bd70      	pop	{r4, r5, r6, pc}

00015d90 <add_to_waitq_locked>:
{
   15d90:	b570      	push	{r4, r5, r6, lr}
   15d92:	4605      	mov	r5, r0
   15d94:	460e      	mov	r6, r1
	unready_thread(thread);
   15d96:	f7f9 fd1f 	bl	f7d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   15d9a:	7b6b      	ldrb	r3, [r5, #13]
   15d9c:	f043 0302 	orr.w	r3, r3, #2
   15da0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   15da2:	b1b6      	cbz	r6, 15dd2 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   15da4:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   15da6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15da8:	42a6      	cmp	r6, r4
   15daa:	d019      	beq.n	15de0 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15dac:	b164      	cbz	r4, 15dc8 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15dae:	4621      	mov	r1, r4
   15db0:	4628      	mov	r0, r5
   15db2:	f7ff ff6f 	bl	15c94 <z_sched_prio_cmp>
   15db6:	2800      	cmp	r0, #0
   15db8:	dc0c      	bgt.n	15dd4 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15dba:	b12c      	cbz	r4, 15dc8 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   15dbc:	6873      	ldr	r3, [r6, #4]
   15dbe:	429c      	cmp	r4, r3
   15dc0:	d002      	beq.n	15dc8 <add_to_waitq_locked+0x38>
   15dc2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15dc4:	2c00      	cmp	r4, #0
   15dc6:	d1f1      	bne.n	15dac <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   15dc8:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   15dca:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   15dcc:	606b      	str	r3, [r5, #4]
	tail->next = node;
   15dce:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15dd0:	6075      	str	r5, [r6, #4]
}
   15dd2:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   15dd4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15dd6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15dd8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15dda:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15ddc:	6065      	str	r5, [r4, #4]
}
   15dde:	e7f8      	b.n	15dd2 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15de0:	2400      	movs	r4, #0
   15de2:	e7e3      	b.n	15dac <add_to_waitq_locked+0x1c>

00015de4 <pend>:
{
   15de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15de8:	4605      	mov	r5, r0
   15dea:	460f      	mov	r7, r1
   15dec:	4691      	mov	r9, r2
   15dee:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   15df0:	2400      	movs	r4, #0
	__asm__ volatile(
   15df2:	f04f 0320 	mov.w	r3, #32
   15df6:	f3ef 8611 	mrs	r6, BASEPRI
   15dfa:	f383 8812 	msr	BASEPRI_MAX, r3
   15dfe:	f3bf 8f6f 	isb	sy
   15e02:	b94c      	cbnz	r4, 15e18 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   15e04:	4639      	mov	r1, r7
   15e06:	4628      	mov	r0, r5
   15e08:	f7ff ffc2 	bl	15d90 <add_to_waitq_locked>
	__asm__ volatile(
   15e0c:	f386 8811 	msr	BASEPRI, r6
   15e10:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15e14:	2401      	movs	r4, #1
   15e16:	e7f4      	b.n	15e02 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   15e18:	464a      	mov	r2, r9
   15e1a:	4643      	mov	r3, r8
   15e1c:	4628      	mov	r0, r5
   15e1e:	f7f9 fb31 	bl	f484 <add_thread_timeout>
}
   15e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015e26 <z_unpend_first_thread>:
{
   15e26:	b570      	push	{r4, r5, r6, lr}
   15e28:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   15e2a:	2300      	movs	r3, #0
	__asm__ volatile(
   15e2c:	f04f 0220 	mov.w	r2, #32
   15e30:	f3ef 8511 	mrs	r5, BASEPRI
   15e34:	f382 8812 	msr	BASEPRI_MAX, r2
   15e38:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   15e3c:	461c      	mov	r4, r3
   15e3e:	e013      	b.n	15e68 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15e40:	f7ff ff26 	bl	15c90 <pended_on_thread>
   15e44:	4621      	mov	r1, r4
   15e46:	f7ff ff44 	bl	15cd2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15e4a:	7b63      	ldrb	r3, [r4, #13]
   15e4c:	f023 0302 	bic.w	r3, r3, #2
   15e50:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   15e52:	2300      	movs	r3, #0
   15e54:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   15e56:	f104 0018 	add.w	r0, r4, #24
   15e5a:	f000 f826 	bl	15eaa <z_abort_timeout>
	__asm__ volatile(
   15e5e:	f385 8811 	msr	BASEPRI, r5
   15e62:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15e66:	2301      	movs	r3, #1
   15e68:	b933      	cbnz	r3, 15e78 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   15e6a:	4630      	mov	r0, r6
   15e6c:	f7ff ff39 	bl	15ce2 <z_priq_dumb_best>
		if (thread != NULL) {
   15e70:	4604      	mov	r4, r0
   15e72:	2800      	cmp	r0, #0
   15e74:	d1e4      	bne.n	15e40 <z_unpend_first_thread+0x1a>
   15e76:	e7f2      	b.n	15e5e <z_unpend_first_thread+0x38>
}
   15e78:	4620      	mov	r0, r4
   15e7a:	bd70      	pop	{r4, r5, r6, pc}

00015e7c <remove_timeout>:
{
   15e7c:	b538      	push	{r3, r4, r5, lr}
   15e7e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   15e80:	f7f9 ff10 	bl	fca4 <next>
   15e84:	b148      	cbz	r0, 15e9a <remove_timeout+0x1e>
   15e86:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   15e88:	6920      	ldr	r0, [r4, #16]
   15e8a:	6965      	ldr	r5, [r4, #20]
   15e8c:	6913      	ldr	r3, [r2, #16]
   15e8e:	6951      	ldr	r1, [r2, #20]
   15e90:	181b      	adds	r3, r3, r0
   15e92:	eb45 0101 	adc.w	r1, r5, r1
   15e96:	6113      	str	r3, [r2, #16]
   15e98:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   15e9a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   15e9c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   15e9e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15ea0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15ea2:	2300      	movs	r3, #0
   15ea4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   15ea6:	6063      	str	r3, [r4, #4]
}
   15ea8:	bd38      	pop	{r3, r4, r5, pc}

00015eaa <z_abort_timeout>:
{
   15eaa:	b570      	push	{r4, r5, r6, lr}
   15eac:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   15eae:	2300      	movs	r3, #0
	__asm__ volatile(
   15eb0:	f04f 0220 	mov.w	r2, #32
   15eb4:	f3ef 8611 	mrs	r6, BASEPRI
   15eb8:	f382 8812 	msr	BASEPRI_MAX, r2
   15ebc:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   15ec0:	f06f 0015 	mvn.w	r0, #21
   15ec4:	e008      	b.n	15ed8 <z_abort_timeout+0x2e>
			remove_timeout(to);
   15ec6:	4620      	mov	r0, r4
   15ec8:	f7ff ffd8 	bl	15e7c <remove_timeout>
			ret = 0;
   15ecc:	4628      	mov	r0, r5
	__asm__ volatile(
   15ece:	f386 8811 	msr	BASEPRI, r6
   15ed2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15ed6:	2301      	movs	r3, #1
   15ed8:	461d      	mov	r5, r3
   15eda:	b91b      	cbnz	r3, 15ee4 <z_abort_timeout+0x3a>
	return node->next != NULL;
   15edc:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   15ede:	2b00      	cmp	r3, #0
   15ee0:	d1f1      	bne.n	15ec6 <z_abort_timeout+0x1c>
   15ee2:	e7f4      	b.n	15ece <z_abort_timeout+0x24>
}
   15ee4:	bd70      	pop	{r4, r5, r6, pc}

00015ee6 <z_get_next_timeout_expiry>:
{
   15ee6:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   15ee8:	2300      	movs	r3, #0
	__asm__ volatile(
   15eea:	f04f 0220 	mov.w	r2, #32
   15eee:	f3ef 8411 	mrs	r4, BASEPRI
   15ef2:	f382 8812 	msr	BASEPRI_MAX, r2
   15ef6:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   15efa:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   15efe:	b93b      	cbnz	r3, 15f10 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   15f00:	f7f9 fee8 	bl	fcd4 <next_timeout>
	__asm__ volatile(
   15f04:	f384 8811 	msr	BASEPRI, r4
   15f08:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15f0c:	2301      	movs	r3, #1
   15f0e:	e7f6      	b.n	15efe <z_get_next_timeout_expiry+0x18>
}
   15f10:	bd10      	pop	{r4, pc}

00015f12 <z_set_timeout_expiry>:
{
   15f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f14:	4606      	mov	r6, r0
   15f16:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   15f18:	2300      	movs	r3, #0
	__asm__ volatile(
   15f1a:	f04f 0220 	mov.w	r2, #32
   15f1e:	f3ef 8511 	mrs	r5, BASEPRI
   15f22:	f382 8812 	msr	BASEPRI_MAX, r2
   15f26:	f3bf 8f6f 	isb	sy
   15f2a:	e00a      	b.n	15f42 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   15f2c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   15f2e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   15f32:	2801      	cmp	r0, #1
   15f34:	dd00      	ble.n	15f38 <z_set_timeout_expiry+0x26>
   15f36:	b97c      	cbnz	r4, 15f58 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   15f38:	f385 8811 	msr	BASEPRI, r5
   15f3c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15f40:	2301      	movs	r3, #1
   15f42:	461c      	mov	r4, r3
   15f44:	b97b      	cbnz	r3, 15f66 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   15f46:	f7f9 fec5 	bl	fcd4 <next_timeout>
			      || (ticks <= next_to);
   15f4a:	f1b0 3fff 	cmp.w	r0, #4294967295
   15f4e:	d0ed      	beq.n	15f2c <z_set_timeout_expiry+0x1a>
   15f50:	42b0      	cmp	r0, r6
   15f52:	dbec      	blt.n	15f2e <z_set_timeout_expiry+0x1c>
   15f54:	2401      	movs	r4, #1
   15f56:	e7ea      	b.n	15f2e <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   15f58:	4639      	mov	r1, r7
   15f5a:	42b0      	cmp	r0, r6
   15f5c:	bfa8      	it	ge
   15f5e:	4630      	movge	r0, r6
   15f60:	f7ef fd4c 	bl	59fc <sys_clock_set_timeout>
   15f64:	e7e8      	b.n	15f38 <z_set_timeout_expiry+0x26>
}
   15f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015f68 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   15f68:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   15f6a:	f7f9 ffe5 	bl	ff38 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15f6e:	bd08      	pop	{r3, pc}

00015f70 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   15f70:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   15f72:	f7f9 ffe1 	bl	ff38 <sys_clock_tick_get>
}
   15f76:	bd08      	pop	{r3, pc}

00015f78 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15f78:	b900      	cbnz	r0, 15f7c <z_impl_k_busy_wait+0x4>
   15f7a:	4770      	bx	lr
{
   15f7c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   15f7e:	f7ee fcb1 	bl	48e4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15f82:	bd08      	pop	{r3, pc}

00015f84 <k_heap_init>:
{
   15f84:	b510      	push	{r4, lr}
   15f86:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   15f8a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   15f8c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   15f8e:	f7fc f89f 	bl	120d0 <sys_heap_init>
}
   15f92:	bd10      	pop	{r4, pc}

00015f94 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   15f94:	4770      	bx	lr

00015f96 <_ZdlPv>:
   15f96:	f7fa bc4b 	b.w	10830 <free>

00015f9a <_ZdaPv>:
   15f9a:	f7ff bffc 	b.w	15f96 <_ZdlPv>

00015f9e <_Znwj>:
   15f9e:	2801      	cmp	r0, #1
   15fa0:	bf38      	it	cc
   15fa2:	2001      	movcc	r0, #1
   15fa4:	b510      	push	{r4, lr}
   15fa6:	4604      	mov	r4, r0
   15fa8:	4620      	mov	r0, r4
   15faa:	f7fa fc39 	bl	10820 <malloc>
   15fae:	b930      	cbnz	r0, 15fbe <_Znwj+0x20>
   15fb0:	f7fa f9e2 	bl	10378 <_ZSt15get_new_handlerv>
   15fb4:	b908      	cbnz	r0, 15fba <_Znwj+0x1c>
   15fb6:	f000 f805 	bl	15fc4 <abort>
   15fba:	4780      	blx	r0
   15fbc:	e7f4      	b.n	15fa8 <_Znwj+0xa>
   15fbe:	bd10      	pop	{r4, pc}

00015fc0 <_Znaj>:
   15fc0:	f7ff bfed 	b.w	15f9e <_Znwj>

00015fc4 <abort>:
   15fc4:	b508      	push	{r3, lr}
   15fc6:	2006      	movs	r0, #6
   15fc8:	f7fb f972 	bl	112b0 <raise>
   15fcc:	2001      	movs	r0, #1
   15fce:	f7ee fc3b 	bl	4848 <_exit>

00015fd2 <atoi>:
   15fd2:	220a      	movs	r2, #10
   15fd4:	2100      	movs	r1, #0
   15fd6:	f7fb ba29 	b.w	1142c <strtol>

00015fda <memcpy>:
   15fda:	440a      	add	r2, r1
   15fdc:	4291      	cmp	r1, r2
   15fde:	f100 33ff 	add.w	r3, r0, #4294967295
   15fe2:	d100      	bne.n	15fe6 <memcpy+0xc>
   15fe4:	4770      	bx	lr
   15fe6:	b510      	push	{r4, lr}
   15fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
   15fec:	f803 4f01 	strb.w	r4, [r3, #1]!
   15ff0:	4291      	cmp	r1, r2
   15ff2:	d1f9      	bne.n	15fe8 <memcpy+0xe>
   15ff4:	bd10      	pop	{r4, pc}

00015ff6 <memset>:
   15ff6:	4402      	add	r2, r0
   15ff8:	4603      	mov	r3, r0
   15ffa:	4293      	cmp	r3, r2
   15ffc:	d100      	bne.n	16000 <memset+0xa>
   15ffe:	4770      	bx	lr
   16000:	f803 1b01 	strb.w	r1, [r3], #1
   16004:	e7f9      	b.n	15ffa <memset+0x4>

00016006 <__sfputc_r>:
   16006:	6893      	ldr	r3, [r2, #8]
   16008:	3b01      	subs	r3, #1
   1600a:	2b00      	cmp	r3, #0
   1600c:	b410      	push	{r4}
   1600e:	6093      	str	r3, [r2, #8]
   16010:	da07      	bge.n	16022 <__sfputc_r+0x1c>
   16012:	6994      	ldr	r4, [r2, #24]
   16014:	42a3      	cmp	r3, r4
   16016:	db01      	blt.n	1601c <__sfputc_r+0x16>
   16018:	290a      	cmp	r1, #10
   1601a:	d102      	bne.n	16022 <__sfputc_r+0x1c>
   1601c:	bc10      	pop	{r4}
   1601e:	f7fb ba25 	b.w	1146c <__swbuf_r>
   16022:	6813      	ldr	r3, [r2, #0]
   16024:	1c58      	adds	r0, r3, #1
   16026:	6010      	str	r0, [r2, #0]
   16028:	7019      	strb	r1, [r3, #0]
   1602a:	4608      	mov	r0, r1
   1602c:	bc10      	pop	{r4}
   1602e:	4770      	bx	lr

00016030 <__sfputs_r>:
   16030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16032:	4606      	mov	r6, r0
   16034:	460f      	mov	r7, r1
   16036:	4614      	mov	r4, r2
   16038:	18d5      	adds	r5, r2, r3
   1603a:	42ac      	cmp	r4, r5
   1603c:	d101      	bne.n	16042 <__sfputs_r+0x12>
   1603e:	2000      	movs	r0, #0
   16040:	e007      	b.n	16052 <__sfputs_r+0x22>
   16042:	f814 1b01 	ldrb.w	r1, [r4], #1
   16046:	463a      	mov	r2, r7
   16048:	4630      	mov	r0, r6
   1604a:	f7ff ffdc 	bl	16006 <__sfputc_r>
   1604e:	1c43      	adds	r3, r0, #1
   16050:	d1f3      	bne.n	1603a <__sfputs_r+0xa>
   16052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016054 <__cvt>:
   16054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16058:	b088      	sub	sp, #32
   1605a:	2b00      	cmp	r3, #0
   1605c:	461f      	mov	r7, r3
   1605e:	4614      	mov	r4, r2
   16060:	bfb8      	it	lt
   16062:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   16066:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16068:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1606a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1606e:	bfb6      	itet	lt
   16070:	461f      	movlt	r7, r3
   16072:	2300      	movge	r3, #0
   16074:	232d      	movlt	r3, #45	; 0x2d
   16076:	7013      	strb	r3, [r2, #0]
   16078:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1607a:	f023 0820 	bic.w	r8, r3, #32
   1607e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   16082:	d005      	beq.n	16090 <__cvt+0x3c>
   16084:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   16088:	d100      	bne.n	1608c <__cvt+0x38>
   1608a:	3501      	adds	r5, #1
   1608c:	2302      	movs	r3, #2
   1608e:	e000      	b.n	16092 <__cvt+0x3e>
   16090:	2303      	movs	r3, #3
   16092:	aa07      	add	r2, sp, #28
   16094:	9204      	str	r2, [sp, #16]
   16096:	aa06      	add	r2, sp, #24
   16098:	e9cd a202 	strd	sl, r2, [sp, #8]
   1609c:	e9cd 3500 	strd	r3, r5, [sp]
   160a0:	4622      	mov	r2, r4
   160a2:	463b      	mov	r3, r7
   160a4:	f7eb fcdc 	bl	1a60 <_dtoa_r>
   160a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   160ac:	4606      	mov	r6, r0
   160ae:	d102      	bne.n	160b6 <__cvt+0x62>
   160b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   160b2:	07db      	lsls	r3, r3, #31
   160b4:	d522      	bpl.n	160fc <__cvt+0xa8>
   160b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   160ba:	eb06 0905 	add.w	r9, r6, r5
   160be:	d110      	bne.n	160e2 <__cvt+0x8e>
   160c0:	7833      	ldrb	r3, [r6, #0]
   160c2:	2b30      	cmp	r3, #48	; 0x30
   160c4:	d10a      	bne.n	160dc <__cvt+0x88>
   160c6:	2200      	movs	r2, #0
   160c8:	2300      	movs	r3, #0
   160ca:	4620      	mov	r0, r4
   160cc:	4639      	mov	r1, r7
   160ce:	f7ea fc8b 	bl	9e8 <__aeabi_dcmpeq>
   160d2:	b918      	cbnz	r0, 160dc <__cvt+0x88>
   160d4:	f1c5 0501 	rsb	r5, r5, #1
   160d8:	f8ca 5000 	str.w	r5, [sl]
   160dc:	f8da 3000 	ldr.w	r3, [sl]
   160e0:	4499      	add	r9, r3
   160e2:	2200      	movs	r2, #0
   160e4:	2300      	movs	r3, #0
   160e6:	4620      	mov	r0, r4
   160e8:	4639      	mov	r1, r7
   160ea:	f7ea fc7d 	bl	9e8 <__aeabi_dcmpeq>
   160ee:	b108      	cbz	r0, 160f4 <__cvt+0xa0>
   160f0:	f8cd 901c 	str.w	r9, [sp, #28]
   160f4:	2230      	movs	r2, #48	; 0x30
   160f6:	9b07      	ldr	r3, [sp, #28]
   160f8:	454b      	cmp	r3, r9
   160fa:	d307      	bcc.n	1610c <__cvt+0xb8>
   160fc:	9b07      	ldr	r3, [sp, #28]
   160fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   16100:	1b9b      	subs	r3, r3, r6
   16102:	4630      	mov	r0, r6
   16104:	6013      	str	r3, [r2, #0]
   16106:	b008      	add	sp, #32
   16108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1610c:	1c59      	adds	r1, r3, #1
   1610e:	9107      	str	r1, [sp, #28]
   16110:	701a      	strb	r2, [r3, #0]
   16112:	e7f0      	b.n	160f6 <__cvt+0xa2>

00016114 <__exponent>:
   16114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16116:	4603      	mov	r3, r0
   16118:	2900      	cmp	r1, #0
   1611a:	bfb8      	it	lt
   1611c:	4249      	neglt	r1, r1
   1611e:	f803 2b02 	strb.w	r2, [r3], #2
   16122:	bfb4      	ite	lt
   16124:	222d      	movlt	r2, #45	; 0x2d
   16126:	222b      	movge	r2, #43	; 0x2b
   16128:	2909      	cmp	r1, #9
   1612a:	7042      	strb	r2, [r0, #1]
   1612c:	dd2a      	ble.n	16184 <__exponent+0x70>
   1612e:	f10d 0407 	add.w	r4, sp, #7
   16132:	46a4      	mov	ip, r4
   16134:	270a      	movs	r7, #10
   16136:	46a6      	mov	lr, r4
   16138:	460a      	mov	r2, r1
   1613a:	fb91 f6f7 	sdiv	r6, r1, r7
   1613e:	fb07 1516 	mls	r5, r7, r6, r1
   16142:	3530      	adds	r5, #48	; 0x30
   16144:	2a63      	cmp	r2, #99	; 0x63
   16146:	f104 34ff 	add.w	r4, r4, #4294967295
   1614a:	f80e 5c01 	strb.w	r5, [lr, #-1]
   1614e:	4631      	mov	r1, r6
   16150:	dcf1      	bgt.n	16136 <__exponent+0x22>
   16152:	3130      	adds	r1, #48	; 0x30
   16154:	f1ae 0502 	sub.w	r5, lr, #2
   16158:	f804 1c01 	strb.w	r1, [r4, #-1]
   1615c:	1c44      	adds	r4, r0, #1
   1615e:	4629      	mov	r1, r5
   16160:	4561      	cmp	r1, ip
   16162:	d30a      	bcc.n	1617a <__exponent+0x66>
   16164:	f10d 0209 	add.w	r2, sp, #9
   16168:	eba2 020e 	sub.w	r2, r2, lr
   1616c:	4565      	cmp	r5, ip
   1616e:	bf88      	it	hi
   16170:	2200      	movhi	r2, #0
   16172:	4413      	add	r3, r2
   16174:	1a18      	subs	r0, r3, r0
   16176:	b003      	add	sp, #12
   16178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1617a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1617e:	f804 2f01 	strb.w	r2, [r4, #1]!
   16182:	e7ed      	b.n	16160 <__exponent+0x4c>
   16184:	2330      	movs	r3, #48	; 0x30
   16186:	3130      	adds	r1, #48	; 0x30
   16188:	7083      	strb	r3, [r0, #2]
   1618a:	70c1      	strb	r1, [r0, #3]
   1618c:	1d03      	adds	r3, r0, #4
   1618e:	e7f1      	b.n	16174 <__exponent+0x60>

00016190 <_printf_common>:
   16190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16194:	4616      	mov	r6, r2
   16196:	4699      	mov	r9, r3
   16198:	688a      	ldr	r2, [r1, #8]
   1619a:	690b      	ldr	r3, [r1, #16]
   1619c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   161a0:	4293      	cmp	r3, r2
   161a2:	bfb8      	it	lt
   161a4:	4613      	movlt	r3, r2
   161a6:	6033      	str	r3, [r6, #0]
   161a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   161ac:	4607      	mov	r7, r0
   161ae:	460c      	mov	r4, r1
   161b0:	b10a      	cbz	r2, 161b6 <_printf_common+0x26>
   161b2:	3301      	adds	r3, #1
   161b4:	6033      	str	r3, [r6, #0]
   161b6:	6823      	ldr	r3, [r4, #0]
   161b8:	0699      	lsls	r1, r3, #26
   161ba:	bf42      	ittt	mi
   161bc:	6833      	ldrmi	r3, [r6, #0]
   161be:	3302      	addmi	r3, #2
   161c0:	6033      	strmi	r3, [r6, #0]
   161c2:	6825      	ldr	r5, [r4, #0]
   161c4:	f015 0506 	ands.w	r5, r5, #6
   161c8:	d106      	bne.n	161d8 <_printf_common+0x48>
   161ca:	f104 0a19 	add.w	sl, r4, #25
   161ce:	68e3      	ldr	r3, [r4, #12]
   161d0:	6832      	ldr	r2, [r6, #0]
   161d2:	1a9b      	subs	r3, r3, r2
   161d4:	42ab      	cmp	r3, r5
   161d6:	dc26      	bgt.n	16226 <_printf_common+0x96>
   161d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   161dc:	1e13      	subs	r3, r2, #0
   161de:	6822      	ldr	r2, [r4, #0]
   161e0:	bf18      	it	ne
   161e2:	2301      	movne	r3, #1
   161e4:	0692      	lsls	r2, r2, #26
   161e6:	d42b      	bmi.n	16240 <_printf_common+0xb0>
   161e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   161ec:	4649      	mov	r1, r9
   161ee:	4638      	mov	r0, r7
   161f0:	47c0      	blx	r8
   161f2:	3001      	adds	r0, #1
   161f4:	d01e      	beq.n	16234 <_printf_common+0xa4>
   161f6:	6823      	ldr	r3, [r4, #0]
   161f8:	68e5      	ldr	r5, [r4, #12]
   161fa:	6832      	ldr	r2, [r6, #0]
   161fc:	f003 0306 	and.w	r3, r3, #6
   16200:	2b04      	cmp	r3, #4
   16202:	bf08      	it	eq
   16204:	1aad      	subeq	r5, r5, r2
   16206:	68a3      	ldr	r3, [r4, #8]
   16208:	6922      	ldr	r2, [r4, #16]
   1620a:	bf0c      	ite	eq
   1620c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   16210:	2500      	movne	r5, #0
   16212:	4293      	cmp	r3, r2
   16214:	bfc4      	itt	gt
   16216:	1a9b      	subgt	r3, r3, r2
   16218:	18ed      	addgt	r5, r5, r3
   1621a:	2600      	movs	r6, #0
   1621c:	341a      	adds	r4, #26
   1621e:	42b5      	cmp	r5, r6
   16220:	d11a      	bne.n	16258 <_printf_common+0xc8>
   16222:	2000      	movs	r0, #0
   16224:	e008      	b.n	16238 <_printf_common+0xa8>
   16226:	2301      	movs	r3, #1
   16228:	4652      	mov	r2, sl
   1622a:	4649      	mov	r1, r9
   1622c:	4638      	mov	r0, r7
   1622e:	47c0      	blx	r8
   16230:	3001      	adds	r0, #1
   16232:	d103      	bne.n	1623c <_printf_common+0xac>
   16234:	f04f 30ff 	mov.w	r0, #4294967295
   16238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1623c:	3501      	adds	r5, #1
   1623e:	e7c6      	b.n	161ce <_printf_common+0x3e>
   16240:	18e1      	adds	r1, r4, r3
   16242:	1c5a      	adds	r2, r3, #1
   16244:	2030      	movs	r0, #48	; 0x30
   16246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1624a:	4422      	add	r2, r4
   1624c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   16250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   16254:	3302      	adds	r3, #2
   16256:	e7c7      	b.n	161e8 <_printf_common+0x58>
   16258:	2301      	movs	r3, #1
   1625a:	4622      	mov	r2, r4
   1625c:	4649      	mov	r1, r9
   1625e:	4638      	mov	r0, r7
   16260:	47c0      	blx	r8
   16262:	3001      	adds	r0, #1
   16264:	d0e6      	beq.n	16234 <_printf_common+0xa4>
   16266:	3601      	adds	r6, #1
   16268:	e7d9      	b.n	1621e <_printf_common+0x8e>

0001626a <_raise_r>:
   1626a:	291f      	cmp	r1, #31
   1626c:	b538      	push	{r3, r4, r5, lr}
   1626e:	4604      	mov	r4, r0
   16270:	460d      	mov	r5, r1
   16272:	d904      	bls.n	1627e <_raise_r+0x14>
   16274:	2316      	movs	r3, #22
   16276:	6003      	str	r3, [r0, #0]
   16278:	f04f 30ff 	mov.w	r0, #4294967295
   1627c:	bd38      	pop	{r3, r4, r5, pc}
   1627e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16280:	b112      	cbz	r2, 16288 <_raise_r+0x1e>
   16282:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   16286:	b94b      	cbnz	r3, 1629c <_raise_r+0x32>
   16288:	4620      	mov	r0, r4
   1628a:	f000 f816 	bl	162ba <_getpid_r>
   1628e:	462a      	mov	r2, r5
   16290:	4601      	mov	r1, r0
   16292:	4620      	mov	r0, r4
   16294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16298:	f7fb b812 	b.w	112c0 <_kill_r>
   1629c:	2b01      	cmp	r3, #1
   1629e:	d00a      	beq.n	162b6 <_raise_r+0x4c>
   162a0:	1c59      	adds	r1, r3, #1
   162a2:	d103      	bne.n	162ac <_raise_r+0x42>
   162a4:	2316      	movs	r3, #22
   162a6:	6003      	str	r3, [r0, #0]
   162a8:	2001      	movs	r0, #1
   162aa:	e7e7      	b.n	1627c <_raise_r+0x12>
   162ac:	2400      	movs	r4, #0
   162ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   162b2:	4628      	mov	r0, r5
   162b4:	4798      	blx	r3
   162b6:	2000      	movs	r0, #0
   162b8:	e7e0      	b.n	1627c <_raise_r+0x12>

000162ba <_getpid_r>:
   162ba:	f7fc ba12 	b.w	126e2 <_getpid>

000162be <strncmp>:
   162be:	b510      	push	{r4, lr}
   162c0:	b16a      	cbz	r2, 162de <strncmp+0x20>
   162c2:	3901      	subs	r1, #1
   162c4:	1884      	adds	r4, r0, r2
   162c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   162ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   162ce:	4293      	cmp	r3, r2
   162d0:	d103      	bne.n	162da <strncmp+0x1c>
   162d2:	42a0      	cmp	r0, r4
   162d4:	d001      	beq.n	162da <strncmp+0x1c>
   162d6:	2b00      	cmp	r3, #0
   162d8:	d1f5      	bne.n	162c6 <strncmp+0x8>
   162da:	1a98      	subs	r0, r3, r2
   162dc:	bd10      	pop	{r4, pc}
   162de:	4610      	mov	r0, r2
   162e0:	e7fc      	b.n	162dc <strncmp+0x1e>

000162e2 <strncpy>:
   162e2:	b510      	push	{r4, lr}
   162e4:	3901      	subs	r1, #1
   162e6:	4603      	mov	r3, r0
   162e8:	b132      	cbz	r2, 162f8 <strncpy+0x16>
   162ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   162ee:	f803 4b01 	strb.w	r4, [r3], #1
   162f2:	3a01      	subs	r2, #1
   162f4:	2c00      	cmp	r4, #0
   162f6:	d1f7      	bne.n	162e8 <strncpy+0x6>
   162f8:	441a      	add	r2, r3
   162fa:	2100      	movs	r1, #0
   162fc:	4293      	cmp	r3, r2
   162fe:	d100      	bne.n	16302 <strncpy+0x20>
   16300:	bd10      	pop	{r4, pc}
   16302:	f803 1b01 	strb.w	r1, [r3], #1
   16306:	e7f9      	b.n	162fc <strncpy+0x1a>

00016308 <strnlen>:
   16308:	b510      	push	{r4, lr}
   1630a:	4602      	mov	r2, r0
   1630c:	4401      	add	r1, r0
   1630e:	428a      	cmp	r2, r1
   16310:	4613      	mov	r3, r2
   16312:	d101      	bne.n	16318 <strnlen+0x10>
   16314:	1a18      	subs	r0, r3, r0
   16316:	bd10      	pop	{r4, pc}
   16318:	781c      	ldrb	r4, [r3, #0]
   1631a:	3201      	adds	r2, #1
   1631c:	2c00      	cmp	r4, #0
   1631e:	d1f6      	bne.n	1630e <strnlen+0x6>
   16320:	e7f8      	b.n	16314 <strnlen+0xc>

00016322 <__strtok_r>:
   16322:	b5f0      	push	{r4, r5, r6, r7, lr}
   16324:	b908      	cbnz	r0, 1632a <__strtok_r+0x8>
   16326:	6810      	ldr	r0, [r2, #0]
   16328:	b188      	cbz	r0, 1634e <__strtok_r+0x2c>
   1632a:	4604      	mov	r4, r0
   1632c:	4620      	mov	r0, r4
   1632e:	f814 5b01 	ldrb.w	r5, [r4], #1
   16332:	460f      	mov	r7, r1
   16334:	f817 6b01 	ldrb.w	r6, [r7], #1
   16338:	b91e      	cbnz	r6, 16342 <__strtok_r+0x20>
   1633a:	b965      	cbnz	r5, 16356 <__strtok_r+0x34>
   1633c:	6015      	str	r5, [r2, #0]
   1633e:	4628      	mov	r0, r5
   16340:	e005      	b.n	1634e <__strtok_r+0x2c>
   16342:	42b5      	cmp	r5, r6
   16344:	d1f6      	bne.n	16334 <__strtok_r+0x12>
   16346:	2b00      	cmp	r3, #0
   16348:	d1f0      	bne.n	1632c <__strtok_r+0xa>
   1634a:	6014      	str	r4, [r2, #0]
   1634c:	7003      	strb	r3, [r0, #0]
   1634e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16350:	461c      	mov	r4, r3
   16352:	e00c      	b.n	1636e <__strtok_r+0x4c>
   16354:	b915      	cbnz	r5, 1635c <__strtok_r+0x3a>
   16356:	f814 3b01 	ldrb.w	r3, [r4], #1
   1635a:	460e      	mov	r6, r1
   1635c:	f816 5b01 	ldrb.w	r5, [r6], #1
   16360:	42ab      	cmp	r3, r5
   16362:	d1f7      	bne.n	16354 <__strtok_r+0x32>
   16364:	2b00      	cmp	r3, #0
   16366:	d0f3      	beq.n	16350 <__strtok_r+0x2e>
   16368:	2300      	movs	r3, #0
   1636a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1636e:	6014      	str	r4, [r2, #0]
   16370:	e7ed      	b.n	1634e <__strtok_r+0x2c>

00016372 <quorem>:
   16372:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16376:	6903      	ldr	r3, [r0, #16]
   16378:	690c      	ldr	r4, [r1, #16]
   1637a:	42a3      	cmp	r3, r4
   1637c:	4607      	mov	r7, r0
   1637e:	f2c0 8081 	blt.w	16484 <quorem+0x112>
   16382:	3c01      	subs	r4, #1
   16384:	f101 0814 	add.w	r8, r1, #20
   16388:	f100 0514 	add.w	r5, r0, #20
   1638c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16390:	9301      	str	r3, [sp, #4]
   16392:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   16396:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1639a:	3301      	adds	r3, #1
   1639c:	429a      	cmp	r2, r3
   1639e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   163a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   163a6:	fbb2 f6f3 	udiv	r6, r2, r3
   163aa:	d331      	bcc.n	16410 <quorem+0x9e>
   163ac:	f04f 0e00 	mov.w	lr, #0
   163b0:	4640      	mov	r0, r8
   163b2:	46ac      	mov	ip, r5
   163b4:	46f2      	mov	sl, lr
   163b6:	f850 2b04 	ldr.w	r2, [r0], #4
   163ba:	b293      	uxth	r3, r2
   163bc:	fb06 e303 	mla	r3, r6, r3, lr
   163c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   163c4:	b29b      	uxth	r3, r3
   163c6:	ebaa 0303 	sub.w	r3, sl, r3
   163ca:	0c12      	lsrs	r2, r2, #16
   163cc:	f8dc a000 	ldr.w	sl, [ip]
   163d0:	fb06 e202 	mla	r2, r6, r2, lr
   163d4:	fa13 f38a 	uxtah	r3, r3, sl
   163d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   163dc:	fa1f fa82 	uxth.w	sl, r2
   163e0:	f8dc 2000 	ldr.w	r2, [ip]
   163e4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   163e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   163ec:	b29b      	uxth	r3, r3
   163ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   163f2:	4581      	cmp	r9, r0
   163f4:	f84c 3b04 	str.w	r3, [ip], #4
   163f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
   163fc:	d2db      	bcs.n	163b6 <quorem+0x44>
   163fe:	f855 300b 	ldr.w	r3, [r5, fp]
   16402:	b92b      	cbnz	r3, 16410 <quorem+0x9e>
   16404:	9b01      	ldr	r3, [sp, #4]
   16406:	3b04      	subs	r3, #4
   16408:	429d      	cmp	r5, r3
   1640a:	461a      	mov	r2, r3
   1640c:	d32e      	bcc.n	1646c <quorem+0xfa>
   1640e:	613c      	str	r4, [r7, #16]
   16410:	4638      	mov	r0, r7
   16412:	f000 fa6d 	bl	168f0 <__mcmp>
   16416:	2800      	cmp	r0, #0
   16418:	db24      	blt.n	16464 <quorem+0xf2>
   1641a:	3601      	adds	r6, #1
   1641c:	4628      	mov	r0, r5
   1641e:	f04f 0c00 	mov.w	ip, #0
   16422:	f858 2b04 	ldr.w	r2, [r8], #4
   16426:	f8d0 e000 	ldr.w	lr, [r0]
   1642a:	b293      	uxth	r3, r2
   1642c:	ebac 0303 	sub.w	r3, ip, r3
   16430:	0c12      	lsrs	r2, r2, #16
   16432:	fa13 f38e 	uxtah	r3, r3, lr
   16436:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   1643a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1643e:	b29b      	uxth	r3, r3
   16440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16444:	45c1      	cmp	r9, r8
   16446:	f840 3b04 	str.w	r3, [r0], #4
   1644a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1644e:	d2e8      	bcs.n	16422 <quorem+0xb0>
   16450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   16454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16458:	b922      	cbnz	r2, 16464 <quorem+0xf2>
   1645a:	3b04      	subs	r3, #4
   1645c:	429d      	cmp	r5, r3
   1645e:	461a      	mov	r2, r3
   16460:	d30a      	bcc.n	16478 <quorem+0x106>
   16462:	613c      	str	r4, [r7, #16]
   16464:	4630      	mov	r0, r6
   16466:	b003      	add	sp, #12
   16468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1646c:	6812      	ldr	r2, [r2, #0]
   1646e:	3b04      	subs	r3, #4
   16470:	2a00      	cmp	r2, #0
   16472:	d1cc      	bne.n	1640e <quorem+0x9c>
   16474:	3c01      	subs	r4, #1
   16476:	e7c7      	b.n	16408 <quorem+0x96>
   16478:	6812      	ldr	r2, [r2, #0]
   1647a:	3b04      	subs	r3, #4
   1647c:	2a00      	cmp	r2, #0
   1647e:	d1f0      	bne.n	16462 <quorem+0xf0>
   16480:	3c01      	subs	r4, #1
   16482:	e7eb      	b.n	1645c <quorem+0xea>
   16484:	2000      	movs	r0, #0
   16486:	e7ee      	b.n	16466 <quorem+0xf4>

00016488 <__sfmoreglue>:
   16488:	b570      	push	{r4, r5, r6, lr}
   1648a:	1e4a      	subs	r2, r1, #1
   1648c:	2568      	movs	r5, #104	; 0x68
   1648e:	4355      	muls	r5, r2
   16490:	460e      	mov	r6, r1
   16492:	f105 0174 	add.w	r1, r5, #116	; 0x74
   16496:	f7fa fa21 	bl	108dc <_malloc_r>
   1649a:	4604      	mov	r4, r0
   1649c:	b140      	cbz	r0, 164b0 <__sfmoreglue+0x28>
   1649e:	2100      	movs	r1, #0
   164a0:	e9c0 1600 	strd	r1, r6, [r0]
   164a4:	300c      	adds	r0, #12
   164a6:	60a0      	str	r0, [r4, #8]
   164a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
   164ac:	f7ff fda3 	bl	15ff6 <memset>
   164b0:	4620      	mov	r0, r4
   164b2:	bd70      	pop	{r4, r5, r6, pc}

000164b4 <_fwalk_reent>:
   164b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   164b8:	4606      	mov	r6, r0
   164ba:	4688      	mov	r8, r1
   164bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
   164c0:	2700      	movs	r7, #0
   164c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   164c6:	f1b9 0901 	subs.w	r9, r9, #1
   164ca:	d505      	bpl.n	164d8 <_fwalk_reent+0x24>
   164cc:	6824      	ldr	r4, [r4, #0]
   164ce:	2c00      	cmp	r4, #0
   164d0:	d1f7      	bne.n	164c2 <_fwalk_reent+0xe>
   164d2:	4638      	mov	r0, r7
   164d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   164d8:	89ab      	ldrh	r3, [r5, #12]
   164da:	2b01      	cmp	r3, #1
   164dc:	d907      	bls.n	164ee <_fwalk_reent+0x3a>
   164de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   164e2:	3301      	adds	r3, #1
   164e4:	d003      	beq.n	164ee <_fwalk_reent+0x3a>
   164e6:	4629      	mov	r1, r5
   164e8:	4630      	mov	r0, r6
   164ea:	47c0      	blx	r8
   164ec:	4307      	orrs	r7, r0
   164ee:	3568      	adds	r5, #104	; 0x68
   164f0:	e7e9      	b.n	164c6 <_fwalk_reent+0x12>

000164f2 <__swhatbuf_r>:
   164f2:	b570      	push	{r4, r5, r6, lr}
   164f4:	460e      	mov	r6, r1
   164f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   164fa:	2900      	cmp	r1, #0
   164fc:	b096      	sub	sp, #88	; 0x58
   164fe:	4614      	mov	r4, r2
   16500:	461d      	mov	r5, r3
   16502:	da07      	bge.n	16514 <__swhatbuf_r+0x22>
   16504:	2300      	movs	r3, #0
   16506:	602b      	str	r3, [r5, #0]
   16508:	89b3      	ldrh	r3, [r6, #12]
   1650a:	061a      	lsls	r2, r3, #24
   1650c:	d410      	bmi.n	16530 <__swhatbuf_r+0x3e>
   1650e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16512:	e00e      	b.n	16532 <__swhatbuf_r+0x40>
   16514:	466a      	mov	r2, sp
   16516:	f7fb faab 	bl	11a70 <_fstat_r>
   1651a:	2800      	cmp	r0, #0
   1651c:	dbf2      	blt.n	16504 <__swhatbuf_r+0x12>
   1651e:	9a01      	ldr	r2, [sp, #4]
   16520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   16524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   16528:	425a      	negs	r2, r3
   1652a:	415a      	adcs	r2, r3
   1652c:	602a      	str	r2, [r5, #0]
   1652e:	e7ee      	b.n	1650e <__swhatbuf_r+0x1c>
   16530:	2340      	movs	r3, #64	; 0x40
   16532:	2000      	movs	r0, #0
   16534:	6023      	str	r3, [r4, #0]
   16536:	b016      	add	sp, #88	; 0x58
   16538:	bd70      	pop	{r4, r5, r6, pc}

0001653a <_Balloc>:
   1653a:	b570      	push	{r4, r5, r6, lr}
   1653c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1653e:	4604      	mov	r4, r0
   16540:	460d      	mov	r5, r1
   16542:	b93e      	cbnz	r6, 16554 <_Balloc+0x1a>
   16544:	2010      	movs	r0, #16
   16546:	f7fa f96b 	bl	10820 <malloc>
   1654a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1654e:	6260      	str	r0, [r4, #36]	; 0x24
   16550:	6006      	str	r6, [r0, #0]
   16552:	60c6      	str	r6, [r0, #12]
   16554:	6a66      	ldr	r6, [r4, #36]	; 0x24
   16556:	68f3      	ldr	r3, [r6, #12]
   16558:	b183      	cbz	r3, 1657c <_Balloc+0x42>
   1655a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1655c:	68db      	ldr	r3, [r3, #12]
   1655e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   16562:	b9b8      	cbnz	r0, 16594 <_Balloc+0x5a>
   16564:	2101      	movs	r1, #1
   16566:	fa01 f605 	lsl.w	r6, r1, r5
   1656a:	1d72      	adds	r2, r6, #5
   1656c:	0092      	lsls	r2, r2, #2
   1656e:	4620      	mov	r0, r4
   16570:	f000 fa9e 	bl	16ab0 <_calloc_r>
   16574:	b160      	cbz	r0, 16590 <_Balloc+0x56>
   16576:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1657a:	e00e      	b.n	1659a <_Balloc+0x60>
   1657c:	2221      	movs	r2, #33	; 0x21
   1657e:	2104      	movs	r1, #4
   16580:	4620      	mov	r0, r4
   16582:	f000 fa95 	bl	16ab0 <_calloc_r>
   16586:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16588:	60f0      	str	r0, [r6, #12]
   1658a:	68db      	ldr	r3, [r3, #12]
   1658c:	2b00      	cmp	r3, #0
   1658e:	d1e4      	bne.n	1655a <_Balloc+0x20>
   16590:	2000      	movs	r0, #0
   16592:	bd70      	pop	{r4, r5, r6, pc}
   16594:	6802      	ldr	r2, [r0, #0]
   16596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   1659a:	2300      	movs	r3, #0
   1659c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   165a0:	e7f7      	b.n	16592 <_Balloc+0x58>

000165a2 <_Bfree>:
   165a2:	b570      	push	{r4, r5, r6, lr}
   165a4:	6a46      	ldr	r6, [r0, #36]	; 0x24
   165a6:	4605      	mov	r5, r0
   165a8:	460c      	mov	r4, r1
   165aa:	b93e      	cbnz	r6, 165bc <_Bfree+0x1a>
   165ac:	2010      	movs	r0, #16
   165ae:	f7fa f937 	bl	10820 <malloc>
   165b2:	e9c0 6601 	strd	r6, r6, [r0, #4]
   165b6:	6268      	str	r0, [r5, #36]	; 0x24
   165b8:	6006      	str	r6, [r0, #0]
   165ba:	60c6      	str	r6, [r0, #12]
   165bc:	b13c      	cbz	r4, 165ce <_Bfree+0x2c>
   165be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   165c0:	6862      	ldr	r2, [r4, #4]
   165c2:	68db      	ldr	r3, [r3, #12]
   165c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   165c8:	6021      	str	r1, [r4, #0]
   165ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   165ce:	bd70      	pop	{r4, r5, r6, pc}

000165d0 <__multadd>:
   165d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165d4:	690e      	ldr	r6, [r1, #16]
   165d6:	4607      	mov	r7, r0
   165d8:	4698      	mov	r8, r3
   165da:	460c      	mov	r4, r1
   165dc:	f101 0014 	add.w	r0, r1, #20
   165e0:	2300      	movs	r3, #0
   165e2:	6805      	ldr	r5, [r0, #0]
   165e4:	b2a9      	uxth	r1, r5
   165e6:	fb02 8101 	mla	r1, r2, r1, r8
   165ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   165ee:	0c2d      	lsrs	r5, r5, #16
   165f0:	fb02 c505 	mla	r5, r2, r5, ip
   165f4:	b289      	uxth	r1, r1
   165f6:	3301      	adds	r3, #1
   165f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   165fc:	429e      	cmp	r6, r3
   165fe:	f840 1b04 	str.w	r1, [r0], #4
   16602:	ea4f 4815 	mov.w	r8, r5, lsr #16
   16606:	dcec      	bgt.n	165e2 <__multadd+0x12>
   16608:	f1b8 0f00 	cmp.w	r8, #0
   1660c:	d01b      	beq.n	16646 <__multadd+0x76>
   1660e:	68a3      	ldr	r3, [r4, #8]
   16610:	42b3      	cmp	r3, r6
   16612:	dc12      	bgt.n	1663a <__multadd+0x6a>
   16614:	6861      	ldr	r1, [r4, #4]
   16616:	4638      	mov	r0, r7
   16618:	3101      	adds	r1, #1
   1661a:	f7ff ff8e 	bl	1653a <_Balloc>
   1661e:	6922      	ldr	r2, [r4, #16]
   16620:	3202      	adds	r2, #2
   16622:	f104 010c 	add.w	r1, r4, #12
   16626:	4605      	mov	r5, r0
   16628:	0092      	lsls	r2, r2, #2
   1662a:	300c      	adds	r0, #12
   1662c:	f7ff fcd5 	bl	15fda <memcpy>
   16630:	4621      	mov	r1, r4
   16632:	4638      	mov	r0, r7
   16634:	f7ff ffb5 	bl	165a2 <_Bfree>
   16638:	462c      	mov	r4, r5
   1663a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   1663e:	3601      	adds	r6, #1
   16640:	f8c3 8014 	str.w	r8, [r3, #20]
   16644:	6126      	str	r6, [r4, #16]
   16646:	4620      	mov	r0, r4
   16648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001664c <__hi0bits>:
   1664c:	0c02      	lsrs	r2, r0, #16
   1664e:	0412      	lsls	r2, r2, #16
   16650:	4603      	mov	r3, r0
   16652:	b9ca      	cbnz	r2, 16688 <__hi0bits+0x3c>
   16654:	0403      	lsls	r3, r0, #16
   16656:	2010      	movs	r0, #16
   16658:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1665c:	bf04      	itt	eq
   1665e:	021b      	lsleq	r3, r3, #8
   16660:	3008      	addeq	r0, #8
   16662:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   16666:	bf04      	itt	eq
   16668:	011b      	lsleq	r3, r3, #4
   1666a:	3004      	addeq	r0, #4
   1666c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   16670:	bf04      	itt	eq
   16672:	009b      	lsleq	r3, r3, #2
   16674:	3002      	addeq	r0, #2
   16676:	2b00      	cmp	r3, #0
   16678:	db05      	blt.n	16686 <__hi0bits+0x3a>
   1667a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1667e:	f100 0001 	add.w	r0, r0, #1
   16682:	bf08      	it	eq
   16684:	2020      	moveq	r0, #32
   16686:	4770      	bx	lr
   16688:	2000      	movs	r0, #0
   1668a:	e7e5      	b.n	16658 <__hi0bits+0xc>

0001668c <__lo0bits>:
   1668c:	6803      	ldr	r3, [r0, #0]
   1668e:	4602      	mov	r2, r0
   16690:	f013 0007 	ands.w	r0, r3, #7
   16694:	d00b      	beq.n	166ae <__lo0bits+0x22>
   16696:	07d9      	lsls	r1, r3, #31
   16698:	d422      	bmi.n	166e0 <__lo0bits+0x54>
   1669a:	0798      	lsls	r0, r3, #30
   1669c:	bf49      	itett	mi
   1669e:	085b      	lsrmi	r3, r3, #1
   166a0:	089b      	lsrpl	r3, r3, #2
   166a2:	2001      	movmi	r0, #1
   166a4:	6013      	strmi	r3, [r2, #0]
   166a6:	bf5c      	itt	pl
   166a8:	6013      	strpl	r3, [r2, #0]
   166aa:	2002      	movpl	r0, #2
   166ac:	4770      	bx	lr
   166ae:	b299      	uxth	r1, r3
   166b0:	b909      	cbnz	r1, 166b6 <__lo0bits+0x2a>
   166b2:	0c1b      	lsrs	r3, r3, #16
   166b4:	2010      	movs	r0, #16
   166b6:	f013 0fff 	tst.w	r3, #255	; 0xff
   166ba:	bf04      	itt	eq
   166bc:	0a1b      	lsreq	r3, r3, #8
   166be:	3008      	addeq	r0, #8
   166c0:	0719      	lsls	r1, r3, #28
   166c2:	bf04      	itt	eq
   166c4:	091b      	lsreq	r3, r3, #4
   166c6:	3004      	addeq	r0, #4
   166c8:	0799      	lsls	r1, r3, #30
   166ca:	bf04      	itt	eq
   166cc:	089b      	lsreq	r3, r3, #2
   166ce:	3002      	addeq	r0, #2
   166d0:	07d9      	lsls	r1, r3, #31
   166d2:	d403      	bmi.n	166dc <__lo0bits+0x50>
   166d4:	085b      	lsrs	r3, r3, #1
   166d6:	f100 0001 	add.w	r0, r0, #1
   166da:	d003      	beq.n	166e4 <__lo0bits+0x58>
   166dc:	6013      	str	r3, [r2, #0]
   166de:	4770      	bx	lr
   166e0:	2000      	movs	r0, #0
   166e2:	4770      	bx	lr
   166e4:	2020      	movs	r0, #32
   166e6:	4770      	bx	lr

000166e8 <__i2b>:
   166e8:	b510      	push	{r4, lr}
   166ea:	460c      	mov	r4, r1
   166ec:	2101      	movs	r1, #1
   166ee:	f7ff ff24 	bl	1653a <_Balloc>
   166f2:	2201      	movs	r2, #1
   166f4:	6144      	str	r4, [r0, #20]
   166f6:	6102      	str	r2, [r0, #16]
   166f8:	bd10      	pop	{r4, pc}

000166fa <__multiply>:
   166fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166fe:	4615      	mov	r5, r2
   16700:	690a      	ldr	r2, [r1, #16]
   16702:	692b      	ldr	r3, [r5, #16]
   16704:	429a      	cmp	r2, r3
   16706:	bfb8      	it	lt
   16708:	460b      	movlt	r3, r1
   1670a:	460c      	mov	r4, r1
   1670c:	bfbc      	itt	lt
   1670e:	462c      	movlt	r4, r5
   16710:	461d      	movlt	r5, r3
   16712:	6927      	ldr	r7, [r4, #16]
   16714:	f8d5 9010 	ldr.w	r9, [r5, #16]
   16718:	68a3      	ldr	r3, [r4, #8]
   1671a:	6861      	ldr	r1, [r4, #4]
   1671c:	eb07 0609 	add.w	r6, r7, r9
   16720:	42b3      	cmp	r3, r6
   16722:	bfb8      	it	lt
   16724:	3101      	addlt	r1, #1
   16726:	b085      	sub	sp, #20
   16728:	f7ff ff07 	bl	1653a <_Balloc>
   1672c:	f100 0114 	add.w	r1, r0, #20
   16730:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   16734:	460b      	mov	r3, r1
   16736:	2200      	movs	r2, #0
   16738:	4543      	cmp	r3, r8
   1673a:	d31d      	bcc.n	16778 <__multiply+0x7e>
   1673c:	f104 0314 	add.w	r3, r4, #20
   16740:	f105 0214 	add.w	r2, r5, #20
   16744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   16748:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   1674c:	9302      	str	r3, [sp, #8]
   1674e:	1b3b      	subs	r3, r7, r4
   16750:	3b15      	subs	r3, #21
   16752:	f023 0303 	bic.w	r3, r3, #3
   16756:	3304      	adds	r3, #4
   16758:	f104 0515 	add.w	r5, r4, #21
   1675c:	42af      	cmp	r7, r5
   1675e:	bf38      	it	cc
   16760:	2304      	movcc	r3, #4
   16762:	9301      	str	r3, [sp, #4]
   16764:	9b02      	ldr	r3, [sp, #8]
   16766:	9203      	str	r2, [sp, #12]
   16768:	4293      	cmp	r3, r2
   1676a:	d808      	bhi.n	1677e <__multiply+0x84>
   1676c:	2e00      	cmp	r6, #0
   1676e:	dc5a      	bgt.n	16826 <__multiply+0x12c>
   16770:	6106      	str	r6, [r0, #16]
   16772:	b005      	add	sp, #20
   16774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16778:	f843 2b04 	str.w	r2, [r3], #4
   1677c:	e7dc      	b.n	16738 <__multiply+0x3e>
   1677e:	f8b2 a000 	ldrh.w	sl, [r2]
   16782:	f1ba 0f00 	cmp.w	sl, #0
   16786:	d024      	beq.n	167d2 <__multiply+0xd8>
   16788:	f104 0e14 	add.w	lr, r4, #20
   1678c:	4689      	mov	r9, r1
   1678e:	f04f 0c00 	mov.w	ip, #0
   16792:	f85e 5b04 	ldr.w	r5, [lr], #4
   16796:	f8d9 b000 	ldr.w	fp, [r9]
   1679a:	b2ab      	uxth	r3, r5
   1679c:	fa1f fb8b 	uxth.w	fp, fp
   167a0:	fb0a b303 	mla	r3, sl, r3, fp
   167a4:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   167a8:	f8d9 5000 	ldr.w	r5, [r9]
   167ac:	4463      	add	r3, ip
   167ae:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   167b2:	fb0a c50b 	mla	r5, sl, fp, ip
   167b6:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   167ba:	b29b      	uxth	r3, r3
   167bc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   167c0:	4577      	cmp	r7, lr
   167c2:	f849 3b04 	str.w	r3, [r9], #4
   167c6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   167ca:	d8e2      	bhi.n	16792 <__multiply+0x98>
   167cc:	9b01      	ldr	r3, [sp, #4]
   167ce:	f841 c003 	str.w	ip, [r1, r3]
   167d2:	9b03      	ldr	r3, [sp, #12]
   167d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   167d8:	3204      	adds	r2, #4
   167da:	f1b9 0f00 	cmp.w	r9, #0
   167de:	d020      	beq.n	16822 <__multiply+0x128>
   167e0:	680b      	ldr	r3, [r1, #0]
   167e2:	f104 0c14 	add.w	ip, r4, #20
   167e6:	468e      	mov	lr, r1
   167e8:	f04f 0a00 	mov.w	sl, #0
   167ec:	f8bc 5000 	ldrh.w	r5, [ip]
   167f0:	f8be b002 	ldrh.w	fp, [lr, #2]
   167f4:	fb09 b505 	mla	r5, r9, r5, fp
   167f8:	44aa      	add	sl, r5
   167fa:	b29b      	uxth	r3, r3
   167fc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   16800:	f84e 3b04 	str.w	r3, [lr], #4
   16804:	f85c 3b04 	ldr.w	r3, [ip], #4
   16808:	f8be 5000 	ldrh.w	r5, [lr]
   1680c:	0c1b      	lsrs	r3, r3, #16
   1680e:	fb09 5303 	mla	r3, r9, r3, r5
   16812:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   16816:	4567      	cmp	r7, ip
   16818:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1681c:	d8e6      	bhi.n	167ec <__multiply+0xf2>
   1681e:	9d01      	ldr	r5, [sp, #4]
   16820:	514b      	str	r3, [r1, r5]
   16822:	3104      	adds	r1, #4
   16824:	e79e      	b.n	16764 <__multiply+0x6a>
   16826:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1682a:	2b00      	cmp	r3, #0
   1682c:	d1a0      	bne.n	16770 <__multiply+0x76>
   1682e:	3e01      	subs	r6, #1
   16830:	e79c      	b.n	1676c <__multiply+0x72>

00016832 <__lshift>:
   16832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16836:	460c      	mov	r4, r1
   16838:	6849      	ldr	r1, [r1, #4]
   1683a:	6923      	ldr	r3, [r4, #16]
   1683c:	eb03 1862 	add.w	r8, r3, r2, asr #5
   16840:	68a3      	ldr	r3, [r4, #8]
   16842:	4607      	mov	r7, r0
   16844:	4691      	mov	r9, r2
   16846:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1684a:	f108 0601 	add.w	r6, r8, #1
   1684e:	42b3      	cmp	r3, r6
   16850:	db3f      	blt.n	168d2 <__lshift+0xa0>
   16852:	4638      	mov	r0, r7
   16854:	f7ff fe71 	bl	1653a <_Balloc>
   16858:	2300      	movs	r3, #0
   1685a:	4605      	mov	r5, r0
   1685c:	f100 0114 	add.w	r1, r0, #20
   16860:	f100 0210 	add.w	r2, r0, #16
   16864:	4618      	mov	r0, r3
   16866:	4553      	cmp	r3, sl
   16868:	db36      	blt.n	168d8 <__lshift+0xa6>
   1686a:	6920      	ldr	r0, [r4, #16]
   1686c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   16870:	f104 0314 	add.w	r3, r4, #20
   16874:	f019 091f 	ands.w	r9, r9, #31
   16878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1687c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   16880:	d02e      	beq.n	168e0 <__lshift+0xae>
   16882:	f1c9 0e20 	rsb	lr, r9, #32
   16886:	468a      	mov	sl, r1
   16888:	2200      	movs	r2, #0
   1688a:	6818      	ldr	r0, [r3, #0]
   1688c:	fa00 f009 	lsl.w	r0, r0, r9
   16890:	4302      	orrs	r2, r0
   16892:	f84a 2b04 	str.w	r2, [sl], #4
   16896:	f853 2b04 	ldr.w	r2, [r3], #4
   1689a:	459c      	cmp	ip, r3
   1689c:	fa22 f20e 	lsr.w	r2, r2, lr
   168a0:	d8f3      	bhi.n	1688a <__lshift+0x58>
   168a2:	ebac 0304 	sub.w	r3, ip, r4
   168a6:	3b15      	subs	r3, #21
   168a8:	f023 0303 	bic.w	r3, r3, #3
   168ac:	3304      	adds	r3, #4
   168ae:	f104 0015 	add.w	r0, r4, #21
   168b2:	4560      	cmp	r0, ip
   168b4:	bf88      	it	hi
   168b6:	2304      	movhi	r3, #4
   168b8:	50ca      	str	r2, [r1, r3]
   168ba:	b10a      	cbz	r2, 168c0 <__lshift+0x8e>
   168bc:	f108 0602 	add.w	r6, r8, #2
   168c0:	3e01      	subs	r6, #1
   168c2:	4638      	mov	r0, r7
   168c4:	612e      	str	r6, [r5, #16]
   168c6:	4621      	mov	r1, r4
   168c8:	f7ff fe6b 	bl	165a2 <_Bfree>
   168cc:	4628      	mov	r0, r5
   168ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   168d2:	3101      	adds	r1, #1
   168d4:	005b      	lsls	r3, r3, #1
   168d6:	e7ba      	b.n	1684e <__lshift+0x1c>
   168d8:	f842 0f04 	str.w	r0, [r2, #4]!
   168dc:	3301      	adds	r3, #1
   168de:	e7c2      	b.n	16866 <__lshift+0x34>
   168e0:	3904      	subs	r1, #4
   168e2:	f853 2b04 	ldr.w	r2, [r3], #4
   168e6:	f841 2f04 	str.w	r2, [r1, #4]!
   168ea:	459c      	cmp	ip, r3
   168ec:	d8f9      	bhi.n	168e2 <__lshift+0xb0>
   168ee:	e7e7      	b.n	168c0 <__lshift+0x8e>

000168f0 <__mcmp>:
   168f0:	690a      	ldr	r2, [r1, #16]
   168f2:	4603      	mov	r3, r0
   168f4:	6900      	ldr	r0, [r0, #16]
   168f6:	1a80      	subs	r0, r0, r2
   168f8:	b530      	push	{r4, r5, lr}
   168fa:	d10d      	bne.n	16918 <__mcmp+0x28>
   168fc:	3314      	adds	r3, #20
   168fe:	3114      	adds	r1, #20
   16900:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   16904:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   16908:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   1690c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   16910:	4295      	cmp	r5, r2
   16912:	d002      	beq.n	1691a <__mcmp+0x2a>
   16914:	d304      	bcc.n	16920 <__mcmp+0x30>
   16916:	2001      	movs	r0, #1
   16918:	bd30      	pop	{r4, r5, pc}
   1691a:	42a3      	cmp	r3, r4
   1691c:	d3f4      	bcc.n	16908 <__mcmp+0x18>
   1691e:	e7fb      	b.n	16918 <__mcmp+0x28>
   16920:	f04f 30ff 	mov.w	r0, #4294967295
   16924:	e7f8      	b.n	16918 <__mcmp+0x28>

00016926 <__mdiff>:
   16926:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1692a:	460c      	mov	r4, r1
   1692c:	4606      	mov	r6, r0
   1692e:	4611      	mov	r1, r2
   16930:	4620      	mov	r0, r4
   16932:	4617      	mov	r7, r2
   16934:	f7ff ffdc 	bl	168f0 <__mcmp>
   16938:	1e05      	subs	r5, r0, #0
   1693a:	d108      	bne.n	1694e <__mdiff+0x28>
   1693c:	4629      	mov	r1, r5
   1693e:	4630      	mov	r0, r6
   16940:	f7ff fdfb 	bl	1653a <_Balloc>
   16944:	2301      	movs	r3, #1
   16946:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1694a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1694e:	bfa4      	itt	ge
   16950:	463b      	movge	r3, r7
   16952:	4627      	movge	r7, r4
   16954:	4630      	mov	r0, r6
   16956:	6879      	ldr	r1, [r7, #4]
   16958:	bfa6      	itte	ge
   1695a:	461c      	movge	r4, r3
   1695c:	2500      	movge	r5, #0
   1695e:	2501      	movlt	r5, #1
   16960:	f7ff fdeb 	bl	1653a <_Balloc>
   16964:	693e      	ldr	r6, [r7, #16]
   16966:	60c5      	str	r5, [r0, #12]
   16968:	6925      	ldr	r5, [r4, #16]
   1696a:	f107 0114 	add.w	r1, r7, #20
   1696e:	f104 0914 	add.w	r9, r4, #20
   16972:	f100 0e14 	add.w	lr, r0, #20
   16976:	f107 0210 	add.w	r2, r7, #16
   1697a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   1697e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   16982:	46f2      	mov	sl, lr
   16984:	2700      	movs	r7, #0
   16986:	f859 3b04 	ldr.w	r3, [r9], #4
   1698a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   1698e:	fa1f f883 	uxth.w	r8, r3
   16992:	fa17 f78b 	uxtah	r7, r7, fp
   16996:	0c1b      	lsrs	r3, r3, #16
   16998:	eba7 0808 	sub.w	r8, r7, r8
   1699c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   169a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   169a4:	fa1f f888 	uxth.w	r8, r8
   169a8:	141f      	asrs	r7, r3, #16
   169aa:	454d      	cmp	r5, r9
   169ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   169b0:	f84a 3b04 	str.w	r3, [sl], #4
   169b4:	d8e7      	bhi.n	16986 <__mdiff+0x60>
   169b6:	1b2b      	subs	r3, r5, r4
   169b8:	3b15      	subs	r3, #21
   169ba:	f023 0303 	bic.w	r3, r3, #3
   169be:	3304      	adds	r3, #4
   169c0:	3415      	adds	r4, #21
   169c2:	42a5      	cmp	r5, r4
   169c4:	bf38      	it	cc
   169c6:	2304      	movcc	r3, #4
   169c8:	4419      	add	r1, r3
   169ca:	4473      	add	r3, lr
   169cc:	469e      	mov	lr, r3
   169ce:	460d      	mov	r5, r1
   169d0:	4565      	cmp	r5, ip
   169d2:	d30e      	bcc.n	169f2 <__mdiff+0xcc>
   169d4:	f10c 0203 	add.w	r2, ip, #3
   169d8:	1a52      	subs	r2, r2, r1
   169da:	f022 0203 	bic.w	r2, r2, #3
   169de:	3903      	subs	r1, #3
   169e0:	458c      	cmp	ip, r1
   169e2:	bf38      	it	cc
   169e4:	2200      	movcc	r2, #0
   169e6:	441a      	add	r2, r3
   169e8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   169ec:	b17b      	cbz	r3, 16a0e <__mdiff+0xe8>
   169ee:	6106      	str	r6, [r0, #16]
   169f0:	e7ab      	b.n	1694a <__mdiff+0x24>
   169f2:	f855 8b04 	ldr.w	r8, [r5], #4
   169f6:	fa17 f488 	uxtah	r4, r7, r8
   169fa:	1422      	asrs	r2, r4, #16
   169fc:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   16a00:	b2a4      	uxth	r4, r4
   16a02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   16a06:	f84e 4b04 	str.w	r4, [lr], #4
   16a0a:	1417      	asrs	r7, r2, #16
   16a0c:	e7e0      	b.n	169d0 <__mdiff+0xaa>
   16a0e:	3e01      	subs	r6, #1
   16a10:	e7ea      	b.n	169e8 <__mdiff+0xc2>

00016a12 <__d2b>:
   16a12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16a16:	2101      	movs	r1, #1
   16a18:	461c      	mov	r4, r3
   16a1a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   16a1e:	4690      	mov	r8, r2
   16a20:	f7ff fd8b 	bl	1653a <_Balloc>
   16a24:	f3c4 0313 	ubfx	r3, r4, #0, #20
   16a28:	f3c4 540a 	ubfx	r4, r4, #20, #11
   16a2c:	4607      	mov	r7, r0
   16a2e:	bb2c      	cbnz	r4, 16a7c <__d2b+0x6a>
   16a30:	9301      	str	r3, [sp, #4]
   16a32:	f1b8 0300 	subs.w	r3, r8, #0
   16a36:	d026      	beq.n	16a86 <__d2b+0x74>
   16a38:	4668      	mov	r0, sp
   16a3a:	9300      	str	r3, [sp, #0]
   16a3c:	f7ff fe26 	bl	1668c <__lo0bits>
   16a40:	9900      	ldr	r1, [sp, #0]
   16a42:	b1f0      	cbz	r0, 16a82 <__d2b+0x70>
   16a44:	9a01      	ldr	r2, [sp, #4]
   16a46:	f1c0 0320 	rsb	r3, r0, #32
   16a4a:	fa02 f303 	lsl.w	r3, r2, r3
   16a4e:	430b      	orrs	r3, r1
   16a50:	40c2      	lsrs	r2, r0
   16a52:	617b      	str	r3, [r7, #20]
   16a54:	9201      	str	r2, [sp, #4]
   16a56:	9b01      	ldr	r3, [sp, #4]
   16a58:	61bb      	str	r3, [r7, #24]
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	bf14      	ite	ne
   16a5e:	2102      	movne	r1, #2
   16a60:	2101      	moveq	r1, #1
   16a62:	6139      	str	r1, [r7, #16]
   16a64:	b1c4      	cbz	r4, 16a98 <__d2b+0x86>
   16a66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   16a6a:	4404      	add	r4, r0
   16a6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   16a70:	6034      	str	r4, [r6, #0]
   16a72:	6028      	str	r0, [r5, #0]
   16a74:	4638      	mov	r0, r7
   16a76:	b002      	add	sp, #8
   16a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16a80:	e7d6      	b.n	16a30 <__d2b+0x1e>
   16a82:	6179      	str	r1, [r7, #20]
   16a84:	e7e7      	b.n	16a56 <__d2b+0x44>
   16a86:	a801      	add	r0, sp, #4
   16a88:	f7ff fe00 	bl	1668c <__lo0bits>
   16a8c:	9b01      	ldr	r3, [sp, #4]
   16a8e:	617b      	str	r3, [r7, #20]
   16a90:	2101      	movs	r1, #1
   16a92:	6139      	str	r1, [r7, #16]
   16a94:	3020      	adds	r0, #32
   16a96:	e7e5      	b.n	16a64 <__d2b+0x52>
   16a98:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   16a9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   16aa0:	6030      	str	r0, [r6, #0]
   16aa2:	6918      	ldr	r0, [r3, #16]
   16aa4:	f7ff fdd2 	bl	1664c <__hi0bits>
   16aa8:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   16aac:	6029      	str	r1, [r5, #0]
   16aae:	e7e1      	b.n	16a74 <__d2b+0x62>

00016ab0 <_calloc_r>:
   16ab0:	b538      	push	{r3, r4, r5, lr}
   16ab2:	fb02 f501 	mul.w	r5, r2, r1
   16ab6:	4629      	mov	r1, r5
   16ab8:	f7f9 ff10 	bl	108dc <_malloc_r>
   16abc:	4604      	mov	r4, r0
   16abe:	b118      	cbz	r0, 16ac8 <_calloc_r+0x18>
   16ac0:	462a      	mov	r2, r5
   16ac2:	2100      	movs	r1, #0
   16ac4:	f7ff fa97 	bl	15ff6 <memset>
   16ac8:	4620      	mov	r0, r4
   16aca:	bd38      	pop	{r3, r4, r5, pc}

00016acc <__sread>:
   16acc:	b510      	push	{r4, lr}
   16ace:	460c      	mov	r4, r1
   16ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16ad4:	f7fb f800 	bl	11ad8 <_read_r>
   16ad8:	2800      	cmp	r0, #0
   16ada:	bfab      	itete	ge
   16adc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   16ade:	89a3      	ldrhlt	r3, [r4, #12]
   16ae0:	181b      	addge	r3, r3, r0
   16ae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   16ae6:	bfac      	ite	ge
   16ae8:	6563      	strge	r3, [r4, #84]	; 0x54
   16aea:	81a3      	strhlt	r3, [r4, #12]
   16aec:	bd10      	pop	{r4, pc}

00016aee <__swrite>:
   16aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16af2:	461f      	mov	r7, r3
   16af4:	898b      	ldrh	r3, [r1, #12]
   16af6:	05db      	lsls	r3, r3, #23
   16af8:	4605      	mov	r5, r0
   16afa:	460c      	mov	r4, r1
   16afc:	4616      	mov	r6, r2
   16afe:	d505      	bpl.n	16b0c <__swrite+0x1e>
   16b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16b04:	2302      	movs	r3, #2
   16b06:	2200      	movs	r2, #0
   16b08:	f7fa ffd4 	bl	11ab4 <_lseek_r>
   16b0c:	89a3      	ldrh	r3, [r4, #12]
   16b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16b16:	81a3      	strh	r3, [r4, #12]
   16b18:	4632      	mov	r2, r6
   16b1a:	463b      	mov	r3, r7
   16b1c:	4628      	mov	r0, r5
   16b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16b22:	f7fa bf83 	b.w	11a2c <_write_r>

00016b26 <__sseek>:
   16b26:	b510      	push	{r4, lr}
   16b28:	460c      	mov	r4, r1
   16b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16b2e:	f7fa ffc1 	bl	11ab4 <_lseek_r>
   16b32:	1c43      	adds	r3, r0, #1
   16b34:	89a3      	ldrh	r3, [r4, #12]
   16b36:	bf15      	itete	ne
   16b38:	6560      	strne	r0, [r4, #84]	; 0x54
   16b3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   16b3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   16b42:	81a3      	strheq	r3, [r4, #12]
   16b44:	bf18      	it	ne
   16b46:	81a3      	strhne	r3, [r4, #12]
   16b48:	bd10      	pop	{r4, pc}

00016b4a <__sclose>:
   16b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16b4e:	f7fa bf7f 	b.w	11a50 <_close_r>

00016b52 <__ascii_mbtowc>:
   16b52:	b082      	sub	sp, #8
   16b54:	b901      	cbnz	r1, 16b58 <__ascii_mbtowc+0x6>
   16b56:	a901      	add	r1, sp, #4
   16b58:	b142      	cbz	r2, 16b6c <__ascii_mbtowc+0x1a>
   16b5a:	b14b      	cbz	r3, 16b70 <__ascii_mbtowc+0x1e>
   16b5c:	7813      	ldrb	r3, [r2, #0]
   16b5e:	600b      	str	r3, [r1, #0]
   16b60:	7812      	ldrb	r2, [r2, #0]
   16b62:	1e10      	subs	r0, r2, #0
   16b64:	bf18      	it	ne
   16b66:	2001      	movne	r0, #1
   16b68:	b002      	add	sp, #8
   16b6a:	4770      	bx	lr
   16b6c:	4610      	mov	r0, r2
   16b6e:	e7fb      	b.n	16b68 <__ascii_mbtowc+0x16>
   16b70:	f06f 0001 	mvn.w	r0, #1
   16b74:	e7f8      	b.n	16b68 <__ascii_mbtowc+0x16>

00016b76 <__ascii_wctomb>:
   16b76:	4603      	mov	r3, r0
   16b78:	4608      	mov	r0, r1
   16b7a:	b141      	cbz	r1, 16b8e <__ascii_wctomb+0x18>
   16b7c:	2aff      	cmp	r2, #255	; 0xff
   16b7e:	d904      	bls.n	16b8a <__ascii_wctomb+0x14>
   16b80:	228a      	movs	r2, #138	; 0x8a
   16b82:	601a      	str	r2, [r3, #0]
   16b84:	f04f 30ff 	mov.w	r0, #4294967295
   16b88:	4770      	bx	lr
   16b8a:	700a      	strb	r2, [r1, #0]
   16b8c:	2001      	movs	r0, #1
   16b8e:	4770      	bx	lr

00016b90 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   16b90:	f7ef b80c 	b.w	5bac <SystemInit>
