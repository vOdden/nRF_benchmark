
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	200303d8 	.word	0x200303d8
   4:	00004171 	.word	0x00004171
   8:	0000d547 	.word	0x0000d547
   c:	00004145 	.word	0x00004145
  10:	00004145 	.word	0x00004145
  14:	00004145 	.word	0x00004145
  18:	00004145 	.word	0x00004145
  1c:	00004145 	.word	0x00004145
	...
  2c:	00003e95 	.word	0x00003e95
  30:	00004145 	.word	0x00004145
  34:	00000000 	.word	0x00000000
  38:	00003e3d 	.word	0x00003e3d
  3c:	0000db5d 	.word	0x0000db5d

00000040 <_irq_vector_table>:
  40:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  50:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  60:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  70:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  80:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  90:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  a0:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  b0:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  c0:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  d0:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  e0:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
  f0:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
 100:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
 110:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
 120:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
 130:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
 140:	00003f15 00003f15 00003f15 00003f15     .?...?...?...?..
 150:	00003f15                                .?..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <__data_size+0xb5>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <__adddf3+0x52>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <__adddf3+0x70>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <__adddf3+0x84>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <__data_size+0xa1>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_SRAM_SIZE+0x16>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_SRAM_SIZE+0x34>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_SRAM_SIZE+0x4a>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_SRAM_SIZE+0x70>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <__data_size+0x107>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_SRAM_SIZE+0x70>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <__data_size+0x35>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <__data_size+0x31>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <__data_size+0x4b>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <__data_size+0x99>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <__data_size+0x81>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <__adddf3+0x8c>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <__data_size+0x115>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <__data_size+0xd9>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <__data_size+0xf7>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_SRAM_SIZE+0x4a>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_SRAM_SIZE+0x4a>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1aa>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18e>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ae>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ee>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20a>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8f2:	e712      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>

000008f4 <__gedf2>:
     8f4:	f04f 3cff 	mov.w	ip, #4294967295
     8f8:	e006      	b.n	908 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__ledf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	e002      	b.n	908 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__cmpdf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	f84d cd04 	str.w	ip, [sp, #-4]!
     90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     918:	bf18      	it	ne
     91a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     91e:	d01b      	beq.n	958 <__cmpdf2+0x54>
     920:	b001      	add	sp, #4
     922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     926:	bf0c      	ite	eq
     928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     92c:	ea91 0f03 	teqne	r1, r3
     930:	bf02      	ittt	eq
     932:	ea90 0f02 	teqeq	r0, r2
     936:	2000      	moveq	r0, #0
     938:	4770      	bxeq	lr
     93a:	f110 0f00 	cmn.w	r0, #0
     93e:	ea91 0f03 	teq	r1, r3
     942:	bf58      	it	pl
     944:	4299      	cmppl	r1, r3
     946:	bf08      	it	eq
     948:	4290      	cmpeq	r0, r2
     94a:	bf2c      	ite	cs
     94c:	17d8      	asrcs	r0, r3, #31
     94e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     952:	f040 0001 	orr.w	r0, r0, #1
     956:	4770      	bx	lr
     958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     960:	d102      	bne.n	968 <__cmpdf2+0x64>
     962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     966:	d107      	bne.n	978 <__cmpdf2+0x74>
     968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     970:	d1d6      	bne.n	920 <__cmpdf2+0x1c>
     972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     976:	d0d3      	beq.n	920 <__cmpdf2+0x1c>
     978:	f85d 0b04 	ldr.w	r0, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <__aeabi_cdrcmple>:
     980:	4684      	mov	ip, r0
     982:	4610      	mov	r0, r2
     984:	4662      	mov	r2, ip
     986:	468c      	mov	ip, r1
     988:	4619      	mov	r1, r3
     98a:	4663      	mov	r3, ip
     98c:	e000      	b.n	990 <__aeabi_cdcmpeq>
     98e:	bf00      	nop

00000990 <__aeabi_cdcmpeq>:
     990:	b501      	push	{r0, lr}
     992:	f7ff ffb7 	bl	904 <__cmpdf2>
     996:	2800      	cmp	r0, #0
     998:	bf48      	it	mi
     99a:	f110 0f00 	cmnmi.w	r0, #0
     99e:	bd01      	pop	{r0, pc}

000009a0 <__aeabi_dcmpeq>:
     9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9a4:	f7ff fff4 	bl	990 <__aeabi_cdcmpeq>
     9a8:	bf0c      	ite	eq
     9aa:	2001      	moveq	r0, #1
     9ac:	2000      	movne	r0, #0
     9ae:	f85d fb08 	ldr.w	pc, [sp], #8
     9b2:	bf00      	nop

000009b4 <__aeabi_dcmplt>:
     9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b8:	f7ff ffea 	bl	990 <__aeabi_cdcmpeq>
     9bc:	bf34      	ite	cc
     9be:	2001      	movcc	r0, #1
     9c0:	2000      	movcs	r0, #0
     9c2:	f85d fb08 	ldr.w	pc, [sp], #8
     9c6:	bf00      	nop

000009c8 <__aeabi_dcmple>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff ffe0 	bl	990 <__aeabi_cdcmpeq>
     9d0:	bf94      	ite	ls
     9d2:	2001      	movls	r0, #1
     9d4:	2000      	movhi	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmpge>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffce 	bl	980 <__aeabi_cdrcmple>
     9e4:	bf94      	ite	ls
     9e6:	2001      	movls	r0, #1
     9e8:	2000      	movhi	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmpgt>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffc4 	bl	980 <__aeabi_cdrcmple>
     9f8:	bf34      	ite	cc
     9fa:	2001      	movcc	r0, #1
     9fc:	2000      	movcs	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_d2iz>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a0c:	d215      	bcs.n	a3a <__aeabi_d2iz+0x36>
     a0e:	d511      	bpl.n	a34 <__aeabi_d2iz+0x30>
     a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a18:	d912      	bls.n	a40 <__aeabi_d2iz+0x3c>
     a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a2a:	fa23 f002 	lsr.w	r0, r3, r2
     a2e:	bf18      	it	ne
     a30:	4240      	negne	r0, r0
     a32:	4770      	bx	lr
     a34:	f04f 0000 	mov.w	r0, #0
     a38:	4770      	bx	lr
     a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a3e:	d105      	bne.n	a4c <__aeabi_d2iz+0x48>
     a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a44:	bf08      	it	eq
     a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a4a:	4770      	bx	lr
     a4c:	f04f 0000 	mov.w	r0, #0
     a50:	4770      	bx	lr
     a52:	bf00      	nop

00000a54 <__aeabi_d2f>:
     a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a5c:	bf24      	itt	cs
     a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a66:	d90d      	bls.n	a84 <__aeabi_d2f+0x30>
     a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a7c:	bf08      	it	eq
     a7e:	f020 0001 	biceq.w	r0, r0, #1
     a82:	4770      	bx	lr
     a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a88:	d121      	bne.n	ace <__aeabi_d2f+0x7a>
     a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a8e:	bfbc      	itt	lt
     a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a94:	4770      	bxlt	lr
     a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a9e:	f1c2 0218 	rsb	r2, r2, #24
     aa2:	f1c2 0c20 	rsb	ip, r2, #32
     aa6:	fa10 f30c 	lsls.w	r3, r0, ip
     aaa:	fa20 f002 	lsr.w	r0, r0, r2
     aae:	bf18      	it	ne
     ab0:	f040 0001 	orrne.w	r0, r0, #1
     ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     abc:	fa03 fc0c 	lsl.w	ip, r3, ip
     ac0:	ea40 000c 	orr.w	r0, r0, ip
     ac4:	fa23 f302 	lsr.w	r3, r3, r2
     ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     acc:	e7cc      	b.n	a68 <__aeabi_d2f+0x14>
     ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
     ad2:	d107      	bne.n	ae4 <__aeabi_d2f+0x90>
     ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ad8:	bf1e      	ittt	ne
     ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ae2:	4770      	bxne	lr
     ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <__aeabi_frsub>:
     af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     af8:	e002      	b.n	b00 <__addsf3>
     afa:	bf00      	nop

00000afc <__aeabi_fsub>:
     afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b00 <__addsf3>:
     b00:	0042      	lsls	r2, r0, #1
     b02:	bf1f      	itttt	ne
     b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b08:	ea92 0f03 	teqne	r2, r3
     b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b14:	d06a      	beq.n	bec <__addsf3+0xec>
     b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b1e:	bfc1      	itttt	gt
     b20:	18d2      	addgt	r2, r2, r3
     b22:	4041      	eorgt	r1, r0
     b24:	4048      	eorgt	r0, r1
     b26:	4041      	eorgt	r1, r0
     b28:	bfb8      	it	lt
     b2a:	425b      	neglt	r3, r3
     b2c:	2b19      	cmp	r3, #25
     b2e:	bf88      	it	hi
     b30:	4770      	bxhi	lr
     b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3e:	bf18      	it	ne
     b40:	4240      	negne	r0, r0
     b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b4e:	bf18      	it	ne
     b50:	4249      	negne	r1, r1
     b52:	ea92 0f03 	teq	r2, r3
     b56:	d03f      	beq.n	bd8 <__addsf3+0xd8>
     b58:	f1a2 0201 	sub.w	r2, r2, #1
     b5c:	fa41 fc03 	asr.w	ip, r1, r3
     b60:	eb10 000c 	adds.w	r0, r0, ip
     b64:	f1c3 0320 	rsb	r3, r3, #32
     b68:	fa01 f103 	lsl.w	r1, r1, r3
     b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b70:	d502      	bpl.n	b78 <__addsf3+0x78>
     b72:	4249      	negs	r1, r1
     b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b7c:	d313      	bcc.n	ba6 <__addsf3+0xa6>
     b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b82:	d306      	bcc.n	b92 <__addsf3+0x92>
     b84:	0840      	lsrs	r0, r0, #1
     b86:	ea4f 0131 	mov.w	r1, r1, rrx
     b8a:	f102 0201 	add.w	r2, r2, #1
     b8e:	2afe      	cmp	r2, #254	; 0xfe
     b90:	d251      	bcs.n	c36 <__addsf3+0x136>
     b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b9a:	bf08      	it	eq
     b9c:	f020 0001 	biceq.w	r0, r0, #1
     ba0:	ea40 0003 	orr.w	r0, r0, r3
     ba4:	4770      	bx	lr
     ba6:	0049      	lsls	r1, r1, #1
     ba8:	eb40 0000 	adc.w	r0, r0, r0
     bac:	3a01      	subs	r2, #1
     bae:	bf28      	it	cs
     bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bb4:	d2ed      	bcs.n	b92 <__addsf3+0x92>
     bb6:	fab0 fc80 	clz	ip, r0
     bba:	f1ac 0c08 	sub.w	ip, ip, #8
     bbe:	ebb2 020c 	subs.w	r2, r2, ip
     bc2:	fa00 f00c 	lsl.w	r0, r0, ip
     bc6:	bfaa      	itet	ge
     bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bcc:	4252      	neglt	r2, r2
     bce:	4318      	orrge	r0, r3
     bd0:	bfbc      	itt	lt
     bd2:	40d0      	lsrlt	r0, r2
     bd4:	4318      	orrlt	r0, r3
     bd6:	4770      	bx	lr
     bd8:	f092 0f00 	teq	r2, #0
     bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     be0:	bf06      	itte	eq
     be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     be6:	3201      	addeq	r2, #1
     be8:	3b01      	subne	r3, #1
     bea:	e7b5      	b.n	b58 <__addsf3+0x58>
     bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bf4:	bf18      	it	ne
     bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bfa:	d021      	beq.n	c40 <__addsf3+0x140>
     bfc:	ea92 0f03 	teq	r2, r3
     c00:	d004      	beq.n	c0c <__addsf3+0x10c>
     c02:	f092 0f00 	teq	r2, #0
     c06:	bf08      	it	eq
     c08:	4608      	moveq	r0, r1
     c0a:	4770      	bx	lr
     c0c:	ea90 0f01 	teq	r0, r1
     c10:	bf1c      	itt	ne
     c12:	2000      	movne	r0, #0
     c14:	4770      	bxne	lr
     c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c1a:	d104      	bne.n	c26 <__addsf3+0x126>
     c1c:	0040      	lsls	r0, r0, #1
     c1e:	bf28      	it	cs
     c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c24:	4770      	bx	lr
     c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c2a:	bf3c      	itt	cc
     c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c30:	4770      	bxcc	lr
     c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c3e:	4770      	bx	lr
     c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c44:	bf16      	itet	ne
     c46:	4608      	movne	r0, r1
     c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c4c:	4601      	movne	r1, r0
     c4e:	0242      	lsls	r2, r0, #9
     c50:	bf06      	itte	eq
     c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c56:	ea90 0f01 	teqeq	r0, r1
     c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c5e:	4770      	bx	lr

00000c60 <__aeabi_ui2f>:
     c60:	f04f 0300 	mov.w	r3, #0
     c64:	e004      	b.n	c70 <__aeabi_i2f+0x8>
     c66:	bf00      	nop

00000c68 <__aeabi_i2f>:
     c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c6c:	bf48      	it	mi
     c6e:	4240      	negmi	r0, r0
     c70:	ea5f 0c00 	movs.w	ip, r0
     c74:	bf08      	it	eq
     c76:	4770      	bxeq	lr
     c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c7c:	4601      	mov	r1, r0
     c7e:	f04f 0000 	mov.w	r0, #0
     c82:	e01c      	b.n	cbe <__aeabi_l2f+0x2a>

00000c84 <__aeabi_ul2f>:
     c84:	ea50 0201 	orrs.w	r2, r0, r1
     c88:	bf08      	it	eq
     c8a:	4770      	bxeq	lr
     c8c:	f04f 0300 	mov.w	r3, #0
     c90:	e00a      	b.n	ca8 <__aeabi_l2f+0x14>
     c92:	bf00      	nop

00000c94 <__aeabi_l2f>:
     c94:	ea50 0201 	orrs.w	r2, r0, r1
     c98:	bf08      	it	eq
     c9a:	4770      	bxeq	lr
     c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ca0:	d502      	bpl.n	ca8 <__aeabi_l2f+0x14>
     ca2:	4240      	negs	r0, r0
     ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ca8:	ea5f 0c01 	movs.w	ip, r1
     cac:	bf02      	ittt	eq
     cae:	4684      	moveq	ip, r0
     cb0:	4601      	moveq	r1, r0
     cb2:	2000      	moveq	r0, #0
     cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     cb8:	bf08      	it	eq
     cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     cc2:	fabc f28c 	clz	r2, ip
     cc6:	3a08      	subs	r2, #8
     cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ccc:	db10      	blt.n	cf0 <__aeabi_l2f+0x5c>
     cce:	fa01 fc02 	lsl.w	ip, r1, r2
     cd2:	4463      	add	r3, ip
     cd4:	fa00 fc02 	lsl.w	ip, r0, r2
     cd8:	f1c2 0220 	rsb	r2, r2, #32
     cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ce0:	fa20 f202 	lsr.w	r2, r0, r2
     ce4:	eb43 0002 	adc.w	r0, r3, r2
     ce8:	bf08      	it	eq
     cea:	f020 0001 	biceq.w	r0, r0, #1
     cee:	4770      	bx	lr
     cf0:	f102 0220 	add.w	r2, r2, #32
     cf4:	fa01 fc02 	lsl.w	ip, r1, r2
     cf8:	f1c2 0220 	rsb	r2, r2, #32
     cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d00:	fa21 f202 	lsr.w	r2, r1, r2
     d04:	eb43 0002 	adc.w	r0, r3, r2
     d08:	bf08      	it	eq
     d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fmul>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d06f      	beq.n	e08 <__aeabi_fmul+0xf8>
     d28:	441a      	add	r2, r3
     d2a:	ea80 0c01 	eor.w	ip, r0, r1
     d2e:	0240      	lsls	r0, r0, #9
     d30:	bf18      	it	ne
     d32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d36:	d01e      	beq.n	d76 <__aeabi_fmul+0x66>
     d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d44:	fba0 3101 	umull	r3, r1, r0, r1
     d48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d50:	bf3e      	ittt	cc
     d52:	0049      	lslcc	r1, r1, #1
     d54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d58:	005b      	lslcc	r3, r3, #1
     d5a:	ea40 0001 	orr.w	r0, r0, r1
     d5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d62:	2afd      	cmp	r2, #253	; 0xfd
     d64:	d81d      	bhi.n	da2 <__aeabi_fmul+0x92>
     d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d6e:	bf08      	it	eq
     d70:	f020 0001 	biceq.w	r0, r0, #1
     d74:	4770      	bx	lr
     d76:	f090 0f00 	teq	r0, #0
     d7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d7e:	bf08      	it	eq
     d80:	0249      	lsleq	r1, r1, #9
     d82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d8a:	3a7f      	subs	r2, #127	; 0x7f
     d8c:	bfc2      	ittt	gt
     d8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d96:	4770      	bxgt	lr
     d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d9c:	f04f 0300 	mov.w	r3, #0
     da0:	3a01      	subs	r2, #1
     da2:	dc5d      	bgt.n	e60 <__aeabi_fmul+0x150>
     da4:	f112 0f19 	cmn.w	r2, #25
     da8:	bfdc      	itt	le
     daa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     dae:	4770      	bxle	lr
     db0:	f1c2 0200 	rsb	r2, r2, #0
     db4:	0041      	lsls	r1, r0, #1
     db6:	fa21 f102 	lsr.w	r1, r1, r2
     dba:	f1c2 0220 	rsb	r2, r2, #32
     dbe:	fa00 fc02 	lsl.w	ip, r0, r2
     dc2:	ea5f 0031 	movs.w	r0, r1, rrx
     dc6:	f140 0000 	adc.w	r0, r0, #0
     dca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     dce:	bf08      	it	eq
     dd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dd4:	4770      	bx	lr
     dd6:	f092 0f00 	teq	r2, #0
     dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0040      	lsleq	r0, r0, #1
     de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     de6:	3a01      	subeq	r2, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xce>
     dea:	ea40 000c 	orr.w	r0, r0, ip
     dee:	f093 0f00 	teq	r3, #0
     df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     df6:	bf02      	ittt	eq
     df8:	0049      	lsleq	r1, r1, #1
     dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dfe:	3b01      	subeq	r3, #1
     e00:	d0f9      	beq.n	df6 <__aeabi_fmul+0xe6>
     e02:	ea41 010c 	orr.w	r1, r1, ip
     e06:	e78f      	b.n	d28 <__aeabi_fmul+0x18>
     e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e0c:	ea92 0f0c 	teq	r2, ip
     e10:	bf18      	it	ne
     e12:	ea93 0f0c 	teqne	r3, ip
     e16:	d00a      	beq.n	e2e <__aeabi_fmul+0x11e>
     e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e1c:	bf18      	it	ne
     e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e22:	d1d8      	bne.n	dd6 <__aeabi_fmul+0xc6>
     e24:	ea80 0001 	eor.w	r0, r0, r1
     e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e2c:	4770      	bx	lr
     e2e:	f090 0f00 	teq	r0, #0
     e32:	bf17      	itett	ne
     e34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e38:	4608      	moveq	r0, r1
     e3a:	f091 0f00 	teqne	r1, #0
     e3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e42:	d014      	beq.n	e6e <__aeabi_fmul+0x15e>
     e44:	ea92 0f0c 	teq	r2, ip
     e48:	d101      	bne.n	e4e <__aeabi_fmul+0x13e>
     e4a:	0242      	lsls	r2, r0, #9
     e4c:	d10f      	bne.n	e6e <__aeabi_fmul+0x15e>
     e4e:	ea93 0f0c 	teq	r3, ip
     e52:	d103      	bne.n	e5c <__aeabi_fmul+0x14c>
     e54:	024b      	lsls	r3, r1, #9
     e56:	bf18      	it	ne
     e58:	4608      	movne	r0, r1
     e5a:	d108      	bne.n	e6e <__aeabi_fmul+0x15e>
     e5c:	ea80 0001 	eor.w	r0, r0, r1
     e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e6c:	4770      	bx	lr
     e6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e76:	4770      	bx	lr

00000e78 <__aeabi_fdiv>:
     e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e80:	bf1e      	ittt	ne
     e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e86:	ea92 0f0c 	teqne	r2, ip
     e8a:	ea93 0f0c 	teqne	r3, ip
     e8e:	d069      	beq.n	f64 <__aeabi_fdiv+0xec>
     e90:	eba2 0203 	sub.w	r2, r2, r3
     e94:	ea80 0c01 	eor.w	ip, r0, r1
     e98:	0249      	lsls	r1, r1, #9
     e9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e9e:	d037      	beq.n	f10 <__aeabi_fdiv+0x98>
     ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ea4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ea8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     eac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     eb0:	428b      	cmp	r3, r1
     eb2:	bf38      	it	cc
     eb4:	005b      	lslcc	r3, r3, #1
     eb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     eba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ebe:	428b      	cmp	r3, r1
     ec0:	bf24      	itt	cs
     ec2:	1a5b      	subcs	r3, r3, r1
     ec4:	ea40 000c 	orrcs.w	r0, r0, ip
     ec8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     ecc:	bf24      	itt	cs
     ece:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     ed2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ed6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     eda:	bf24      	itt	cs
     edc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ee4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ee8:	bf24      	itt	cs
     eea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     eee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     ef2:	011b      	lsls	r3, r3, #4
     ef4:	bf18      	it	ne
     ef6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     efa:	d1e0      	bne.n	ebe <__aeabi_fdiv+0x46>
     efc:	2afd      	cmp	r2, #253	; 0xfd
     efe:	f63f af50 	bhi.w	da2 <__aeabi_fmul+0x92>
     f02:	428b      	cmp	r3, r1
     f04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f08:	bf08      	it	eq
     f0a:	f020 0001 	biceq.w	r0, r0, #1
     f0e:	4770      	bx	lr
     f10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f18:	327f      	adds	r2, #127	; 0x7f
     f1a:	bfc2      	ittt	gt
     f1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f24:	4770      	bxgt	lr
     f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f2a:	f04f 0300 	mov.w	r3, #0
     f2e:	3a01      	subs	r2, #1
     f30:	e737      	b.n	da2 <__aeabi_fmul+0x92>
     f32:	f092 0f00 	teq	r2, #0
     f36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0040      	lsleq	r0, r0, #1
     f3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f42:	3a01      	subeq	r2, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xc2>
     f46:	ea40 000c 	orr.w	r0, r0, ip
     f4a:	f093 0f00 	teq	r3, #0
     f4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f52:	bf02      	ittt	eq
     f54:	0049      	lsleq	r1, r1, #1
     f56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f5a:	3b01      	subeq	r3, #1
     f5c:	d0f9      	beq.n	f52 <__aeabi_fdiv+0xda>
     f5e:	ea41 010c 	orr.w	r1, r1, ip
     f62:	e795      	b.n	e90 <__aeabi_fdiv+0x18>
     f64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f68:	ea92 0f0c 	teq	r2, ip
     f6c:	d108      	bne.n	f80 <__aeabi_fdiv+0x108>
     f6e:	0242      	lsls	r2, r0, #9
     f70:	f47f af7d 	bne.w	e6e <__aeabi_fmul+0x15e>
     f74:	ea93 0f0c 	teq	r3, ip
     f78:	f47f af70 	bne.w	e5c <__aeabi_fmul+0x14c>
     f7c:	4608      	mov	r0, r1
     f7e:	e776      	b.n	e6e <__aeabi_fmul+0x15e>
     f80:	ea93 0f0c 	teq	r3, ip
     f84:	d104      	bne.n	f90 <__aeabi_fdiv+0x118>
     f86:	024b      	lsls	r3, r1, #9
     f88:	f43f af4c 	beq.w	e24 <__aeabi_fmul+0x114>
     f8c:	4608      	mov	r0, r1
     f8e:	e76e      	b.n	e6e <__aeabi_fmul+0x15e>
     f90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f94:	bf18      	it	ne
     f96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f9a:	d1ca      	bne.n	f32 <__aeabi_fdiv+0xba>
     f9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fa0:	f47f af5c 	bne.w	e5c <__aeabi_fmul+0x14c>
     fa4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     fa8:	f47f af3c 	bne.w	e24 <__aeabi_fmul+0x114>
     fac:	e75f      	b.n	e6e <__aeabi_fmul+0x15e>
     fae:	bf00      	nop

00000fb0 <__gesf2>:
     fb0:	f04f 3cff 	mov.w	ip, #4294967295
     fb4:	e006      	b.n	fc4 <__cmpsf2+0x4>
     fb6:	bf00      	nop

00000fb8 <__lesf2>:
     fb8:	f04f 0c01 	mov.w	ip, #1
     fbc:	e002      	b.n	fc4 <__cmpsf2+0x4>
     fbe:	bf00      	nop

00000fc0 <__cmpsf2>:
     fc0:	f04f 0c01 	mov.w	ip, #1
     fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
     fc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fd4:	bf18      	it	ne
     fd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fda:	d011      	beq.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
     fdc:	b001      	add	sp, #4
     fde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fe2:	bf18      	it	ne
     fe4:	ea90 0f01 	teqne	r0, r1
     fe8:	bf58      	it	pl
     fea:	ebb2 0003 	subspl.w	r0, r2, r3
     fee:	bf88      	it	hi
     ff0:	17c8      	asrhi	r0, r1, #31
     ff2:	bf38      	it	cc
     ff4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     ff8:	bf18      	it	ne
     ffa:	f040 0001 	orrne.w	r0, r0, #1
     ffe:	4770      	bx	lr
    1000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1004:	d102      	bne.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    1006:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    100a:	d105      	bne.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    100c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1010:	d1e4      	bne.n	fdc <__cmpsf2+0x1c>
    1012:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    1016:	d0e1      	beq.n	fdc <__cmpsf2+0x1c>
    1018:	f85d 0b04 	ldr.w	r0, [sp], #4
    101c:	4770      	bx	lr
    101e:	bf00      	nop

00001020 <__aeabi_cfrcmple>:
    1020:	4684      	mov	ip, r0
    1022:	4608      	mov	r0, r1
    1024:	4661      	mov	r1, ip
    1026:	e7ff      	b.n	1028 <__aeabi_cfcmpeq>

00001028 <__aeabi_cfcmpeq>:
    1028:	b50f      	push	{r0, r1, r2, r3, lr}
    102a:	f7ff ffc9 	bl	fc0 <__cmpsf2>
    102e:	2800      	cmp	r0, #0
    1030:	bf48      	it	mi
    1032:	f110 0f00 	cmnmi.w	r0, #0
    1036:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001038 <__aeabi_fcmpeq>:
    1038:	f84d ed08 	str.w	lr, [sp, #-8]!
    103c:	f7ff fff4 	bl	1028 <__aeabi_cfcmpeq>
    1040:	bf0c      	ite	eq
    1042:	2001      	moveq	r0, #1
    1044:	2000      	movne	r0, #0
    1046:	f85d fb08 	ldr.w	pc, [sp], #8
    104a:	bf00      	nop

0000104c <__aeabi_fcmplt>:
    104c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1050:	f7ff ffea 	bl	1028 <__aeabi_cfcmpeq>
    1054:	bf34      	ite	cc
    1056:	2001      	movcc	r0, #1
    1058:	2000      	movcs	r0, #0
    105a:	f85d fb08 	ldr.w	pc, [sp], #8
    105e:	bf00      	nop

00001060 <__aeabi_fcmple>:
    1060:	f84d ed08 	str.w	lr, [sp, #-8]!
    1064:	f7ff ffe0 	bl	1028 <__aeabi_cfcmpeq>
    1068:	bf94      	ite	ls
    106a:	2001      	movls	r0, #1
    106c:	2000      	movhi	r0, #0
    106e:	f85d fb08 	ldr.w	pc, [sp], #8
    1072:	bf00      	nop

00001074 <__aeabi_fcmpge>:
    1074:	f84d ed08 	str.w	lr, [sp, #-8]!
    1078:	f7ff ffd2 	bl	1020 <__aeabi_cfrcmple>
    107c:	bf94      	ite	ls
    107e:	2001      	movls	r0, #1
    1080:	2000      	movhi	r0, #0
    1082:	f85d fb08 	ldr.w	pc, [sp], #8
    1086:	bf00      	nop

00001088 <__aeabi_fcmpgt>:
    1088:	f84d ed08 	str.w	lr, [sp, #-8]!
    108c:	f7ff ffc8 	bl	1020 <__aeabi_cfrcmple>
    1090:	bf34      	ite	cc
    1092:	2001      	movcc	r0, #1
    1094:	2000      	movcs	r0, #0
    1096:	f85d fb08 	ldr.w	pc, [sp], #8
    109a:	bf00      	nop

0000109c <__aeabi_f2iz>:
    109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10a4:	d30f      	bcc.n	10c6 <__aeabi_f2iz+0x2a>
    10a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10ae:	d90d      	bls.n	10cc <__aeabi_f2iz+0x30>
    10b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    10bc:	fa23 f002 	lsr.w	r0, r3, r2
    10c0:	bf18      	it	ne
    10c2:	4240      	negne	r0, r0
    10c4:	4770      	bx	lr
    10c6:	f04f 0000 	mov.w	r0, #0
    10ca:	4770      	bx	lr
    10cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    10d0:	d101      	bne.n	10d6 <__aeabi_f2iz+0x3a>
    10d2:	0242      	lsls	r2, r0, #9
    10d4:	d105      	bne.n	10e2 <__aeabi_f2iz+0x46>
    10d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    10da:	bf08      	it	eq
    10dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10e0:	4770      	bx	lr
    10e2:	f04f 0000 	mov.w	r0, #0
    10e6:	4770      	bx	lr

000010e8 <__aeabi_uldivmod>:
    10e8:	b953      	cbnz	r3, 1100 <__aeabi_uldivmod+0x18>
    10ea:	b94a      	cbnz	r2, 1100 <__aeabi_uldivmod+0x18>
    10ec:	2900      	cmp	r1, #0
    10ee:	bf08      	it	eq
    10f0:	2800      	cmpeq	r0, #0
    10f2:	bf1c      	itt	ne
    10f4:	f04f 31ff 	movne.w	r1, #4294967295
    10f8:	f04f 30ff 	movne.w	r0, #4294967295
    10fc:	f000 b9a8 	b.w	1450 <__aeabi_idiv0>
    1100:	f1ad 0c08 	sub.w	ip, sp, #8
    1104:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1108:	f000 f83e 	bl	1188 <__udivmoddi4>
    110c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1114:	b004      	add	sp, #16
    1116:	4770      	bx	lr

00001118 <__aeabi_d2lz>:
    1118:	b538      	push	{r3, r4, r5, lr}
    111a:	4605      	mov	r5, r0
    111c:	460c      	mov	r4, r1
    111e:	2200      	movs	r2, #0
    1120:	2300      	movs	r3, #0
    1122:	4628      	mov	r0, r5
    1124:	4621      	mov	r1, r4
    1126:	f7ff fc45 	bl	9b4 <__aeabi_dcmplt>
    112a:	b928      	cbnz	r0, 1138 <__aeabi_d2lz+0x20>
    112c:	4628      	mov	r0, r5
    112e:	4621      	mov	r1, r4
    1130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1134:	f000 b80a 	b.w	114c <__aeabi_d2ulz>
    1138:	4628      	mov	r0, r5
    113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    113e:	f000 f805 	bl	114c <__aeabi_d2ulz>
    1142:	4240      	negs	r0, r0
    1144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1148:	bd38      	pop	{r3, r4, r5, pc}
    114a:	bf00      	nop

0000114c <__aeabi_d2ulz>:
    114c:	b5d0      	push	{r4, r6, r7, lr}
    114e:	2200      	movs	r2, #0
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <__aeabi_d2ulz+0x34>)
    1152:	4606      	mov	r6, r0
    1154:	460f      	mov	r7, r1
    1156:	f7ff f9bb 	bl	4d0 <__aeabi_dmul>
    115a:	f000 f97b 	bl	1454 <__aeabi_d2uiz>
    115e:	4604      	mov	r4, r0
    1160:	f7ff f93c 	bl	3dc <__aeabi_ui2d>
    1164:	2200      	movs	r2, #0
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <__aeabi_d2ulz+0x38>)
    1168:	f7ff f9b2 	bl	4d0 <__aeabi_dmul>
    116c:	4602      	mov	r2, r0
    116e:	460b      	mov	r3, r1
    1170:	4630      	mov	r0, r6
    1172:	4639      	mov	r1, r7
    1174:	f7fe fff4 	bl	160 <__aeabi_dsub>
    1178:	f000 f96c 	bl	1454 <__aeabi_d2uiz>
    117c:	4621      	mov	r1, r4
    117e:	bdd0      	pop	{r4, r6, r7, pc}
    1180:	3df00000 	.word	0x3df00000
    1184:	41f00000 	.word	0x41f00000

00001188 <__udivmoddi4>:
    1188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    118c:	9e08      	ldr	r6, [sp, #32]
    118e:	460d      	mov	r5, r1
    1190:	4604      	mov	r4, r0
    1192:	468a      	mov	sl, r1
    1194:	2b00      	cmp	r3, #0
    1196:	d17f      	bne.n	1298 <__udivmoddi4+0x110>
    1198:	428a      	cmp	r2, r1
    119a:	4617      	mov	r7, r2
    119c:	d941      	bls.n	1222 <__udivmoddi4+0x9a>
    119e:	fab2 f282 	clz	r2, r2
    11a2:	b14a      	cbz	r2, 11b8 <__udivmoddi4+0x30>
    11a4:	f1c2 0120 	rsb	r1, r2, #32
    11a8:	fa05 f302 	lsl.w	r3, r5, r2
    11ac:	4097      	lsls	r7, r2
    11ae:	4094      	lsls	r4, r2
    11b0:	fa20 f101 	lsr.w	r1, r0, r1
    11b4:	ea41 0a03 	orr.w	sl, r1, r3
    11b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    11bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    11c0:	fa1f f987 	uxth.w	r9, r7
    11c4:	fbba fef8 	udiv	lr, sl, r8
    11c8:	fb08 a31e 	mls	r3, r8, lr, sl
    11cc:	fb0e f109 	mul.w	r1, lr, r9
    11d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    11d4:	4299      	cmp	r1, r3
    11d6:	d906      	bls.n	11e6 <__udivmoddi4+0x5e>
    11d8:	18fb      	adds	r3, r7, r3
    11da:	d202      	bcs.n	11e2 <__udivmoddi4+0x5a>
    11dc:	4299      	cmp	r1, r3
    11de:	f200 8124 	bhi.w	142a <__udivmoddi4+0x2a2>
    11e2:	f10e 3eff 	add.w	lr, lr, #4294967295
    11e6:	1a59      	subs	r1, r3, r1
    11e8:	b2a3      	uxth	r3, r4
    11ea:	fbb1 f0f8 	udiv	r0, r1, r8
    11ee:	fb08 1110 	mls	r1, r8, r0, r1
    11f2:	fb00 f909 	mul.w	r9, r0, r9
    11f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    11fa:	45a1      	cmp	r9, r4
    11fc:	d905      	bls.n	120a <__udivmoddi4+0x82>
    11fe:	193c      	adds	r4, r7, r4
    1200:	d202      	bcs.n	1208 <__udivmoddi4+0x80>
    1202:	45a1      	cmp	r9, r4
    1204:	f200 810e 	bhi.w	1424 <__udivmoddi4+0x29c>
    1208:	3801      	subs	r0, #1
    120a:	eba4 0409 	sub.w	r4, r4, r9
    120e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1212:	2100      	movs	r1, #0
    1214:	b11e      	cbz	r6, 121e <__udivmoddi4+0x96>
    1216:	40d4      	lsrs	r4, r2
    1218:	2300      	movs	r3, #0
    121a:	e9c6 4300 	strd	r4, r3, [r6]
    121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1222:	b902      	cbnz	r2, 1226 <__udivmoddi4+0x9e>
    1224:	deff      	udf	#255	; 0xff
    1226:	fab2 f282 	clz	r2, r2
    122a:	2a00      	cmp	r2, #0
    122c:	d14f      	bne.n	12ce <__udivmoddi4+0x146>
    122e:	1bcb      	subs	r3, r1, r7
    1230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1234:	fa1f f887 	uxth.w	r8, r7
    1238:	2101      	movs	r1, #1
    123a:	0c25      	lsrs	r5, r4, #16
    123c:	fbb3 fcfe 	udiv	ip, r3, lr
    1240:	fb0e 301c 	mls	r0, lr, ip, r3
    1244:	462b      	mov	r3, r5
    1246:	fb08 f90c 	mul.w	r9, r8, ip
    124a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    124e:	45a9      	cmp	r9, r5
    1250:	d90a      	bls.n	1268 <__udivmoddi4+0xe0>
    1252:	197d      	adds	r5, r7, r5
    1254:	bf2c      	ite	cs
    1256:	2301      	movcs	r3, #1
    1258:	2300      	movcc	r3, #0
    125a:	45a9      	cmp	r9, r5
    125c:	d902      	bls.n	1264 <__udivmoddi4+0xdc>
    125e:	2b00      	cmp	r3, #0
    1260:	f000 80d9 	beq.w	1416 <__udivmoddi4+0x28e>
    1264:	f10c 3cff 	add.w	ip, ip, #4294967295
    1268:	eba5 0509 	sub.w	r5, r5, r9
    126c:	b2a3      	uxth	r3, r4
    126e:	fbb5 f0fe 	udiv	r0, r5, lr
    1272:	fb0e 5510 	mls	r5, lr, r0, r5
    1276:	fb08 f800 	mul.w	r8, r8, r0
    127a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    127e:	45a0      	cmp	r8, r4
    1280:	d905      	bls.n	128e <__udivmoddi4+0x106>
    1282:	193c      	adds	r4, r7, r4
    1284:	d202      	bcs.n	128c <__udivmoddi4+0x104>
    1286:	45a0      	cmp	r8, r4
    1288:	f200 80c9 	bhi.w	141e <__udivmoddi4+0x296>
    128c:	3801      	subs	r0, #1
    128e:	eba4 0408 	sub.w	r4, r4, r8
    1292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1296:	e7bd      	b.n	1214 <__udivmoddi4+0x8c>
    1298:	428b      	cmp	r3, r1
    129a:	d908      	bls.n	12ae <__udivmoddi4+0x126>
    129c:	2e00      	cmp	r6, #0
    129e:	f000 80b1 	beq.w	1404 <__udivmoddi4+0x27c>
    12a2:	2100      	movs	r1, #0
    12a4:	e9c6 0500 	strd	r0, r5, [r6]
    12a8:	4608      	mov	r0, r1
    12aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ae:	fab3 f183 	clz	r1, r3
    12b2:	2900      	cmp	r1, #0
    12b4:	d146      	bne.n	1344 <__udivmoddi4+0x1bc>
    12b6:	42ab      	cmp	r3, r5
    12b8:	f0c0 80a7 	bcc.w	140a <__udivmoddi4+0x282>
    12bc:	4282      	cmp	r2, r0
    12be:	f240 80a4 	bls.w	140a <__udivmoddi4+0x282>
    12c2:	4608      	mov	r0, r1
    12c4:	2e00      	cmp	r6, #0
    12c6:	d0aa      	beq.n	121e <__udivmoddi4+0x96>
    12c8:	e9c6 4a00 	strd	r4, sl, [r6]
    12cc:	e7a7      	b.n	121e <__udivmoddi4+0x96>
    12ce:	f1c2 0020 	rsb	r0, r2, #32
    12d2:	4097      	lsls	r7, r2
    12d4:	fa01 f302 	lsl.w	r3, r1, r2
    12d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    12dc:	40c1      	lsrs	r1, r0
    12de:	fa24 f500 	lsr.w	r5, r4, r0
    12e2:	fa1f f887 	uxth.w	r8, r7
    12e6:	4094      	lsls	r4, r2
    12e8:	431d      	orrs	r5, r3
    12ea:	fbb1 f0fe 	udiv	r0, r1, lr
    12ee:	0c2b      	lsrs	r3, r5, #16
    12f0:	fb0e 1110 	mls	r1, lr, r0, r1
    12f4:	fb00 fc08 	mul.w	ip, r0, r8
    12f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12fc:	459c      	cmp	ip, r3
    12fe:	d909      	bls.n	1314 <__udivmoddi4+0x18c>
    1300:	18fb      	adds	r3, r7, r3
    1302:	bf2c      	ite	cs
    1304:	2101      	movcs	r1, #1
    1306:	2100      	movcc	r1, #0
    1308:	459c      	cmp	ip, r3
    130a:	d902      	bls.n	1312 <__udivmoddi4+0x18a>
    130c:	2900      	cmp	r1, #0
    130e:	f000 8095 	beq.w	143c <__udivmoddi4+0x2b4>
    1312:	3801      	subs	r0, #1
    1314:	eba3 030c 	sub.w	r3, r3, ip
    1318:	b2ad      	uxth	r5, r5
    131a:	fbb3 f1fe 	udiv	r1, r3, lr
    131e:	fb0e 3311 	mls	r3, lr, r1, r3
    1322:	fb01 fc08 	mul.w	ip, r1, r8
    1326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    132a:	45ac      	cmp	ip, r5
    132c:	d905      	bls.n	133a <__udivmoddi4+0x1b2>
    132e:	197d      	adds	r5, r7, r5
    1330:	d202      	bcs.n	1338 <__udivmoddi4+0x1b0>
    1332:	45ac      	cmp	ip, r5
    1334:	f200 8089 	bhi.w	144a <__udivmoddi4+0x2c2>
    1338:	3901      	subs	r1, #1
    133a:	eba5 030c 	sub.w	r3, r5, ip
    133e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1342:	e77a      	b.n	123a <__udivmoddi4+0xb2>
    1344:	f1c1 0420 	rsb	r4, r1, #32
    1348:	408b      	lsls	r3, r1
    134a:	fa02 f701 	lsl.w	r7, r2, r1
    134e:	fa05 fc01 	lsl.w	ip, r5, r1
    1352:	40e2      	lsrs	r2, r4
    1354:	fa20 f804 	lsr.w	r8, r0, r4
    1358:	40e5      	lsrs	r5, r4
    135a:	fa00 fe01 	lsl.w	lr, r0, r1
    135e:	4313      	orrs	r3, r2
    1360:	ea48 020c 	orr.w	r2, r8, ip
    1364:	ea4f 4813 	mov.w	r8, r3, lsr #16
    1368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    136c:	fa1f f983 	uxth.w	r9, r3
    1370:	fbb5 faf8 	udiv	sl, r5, r8
    1374:	fb08 551a 	mls	r5, r8, sl, r5
    1378:	fb0a f009 	mul.w	r0, sl, r9
    137c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    1380:	4560      	cmp	r0, ip
    1382:	d90a      	bls.n	139a <__udivmoddi4+0x212>
    1384:	eb13 0c0c 	adds.w	ip, r3, ip
    1388:	bf2c      	ite	cs
    138a:	2501      	movcs	r5, #1
    138c:	2500      	movcc	r5, #0
    138e:	4560      	cmp	r0, ip
    1390:	d901      	bls.n	1396 <__udivmoddi4+0x20e>
    1392:	2d00      	cmp	r5, #0
    1394:	d055      	beq.n	1442 <__udivmoddi4+0x2ba>
    1396:	f10a 3aff 	add.w	sl, sl, #4294967295
    139a:	ebac 0c00 	sub.w	ip, ip, r0
    139e:	b292      	uxth	r2, r2
    13a0:	fbbc f0f8 	udiv	r0, ip, r8
    13a4:	fb08 cc10 	mls	ip, r8, r0, ip
    13a8:	fb00 f909 	mul.w	r9, r0, r9
    13ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    13b0:	45e1      	cmp	r9, ip
    13b2:	d905      	bls.n	13c0 <__udivmoddi4+0x238>
    13b4:	eb13 0c0c 	adds.w	ip, r3, ip
    13b8:	d201      	bcs.n	13be <__udivmoddi4+0x236>
    13ba:	45e1      	cmp	r9, ip
    13bc:	d83b      	bhi.n	1436 <__udivmoddi4+0x2ae>
    13be:	3801      	subs	r0, #1
    13c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    13c4:	ebac 0c09 	sub.w	ip, ip, r9
    13c8:	fba0 8907 	umull	r8, r9, r0, r7
    13cc:	45cc      	cmp	ip, r9
    13ce:	4645      	mov	r5, r8
    13d0:	464a      	mov	r2, r9
    13d2:	d302      	bcc.n	13da <__udivmoddi4+0x252>
    13d4:	d106      	bne.n	13e4 <__udivmoddi4+0x25c>
    13d6:	45c6      	cmp	lr, r8
    13d8:	d204      	bcs.n	13e4 <__udivmoddi4+0x25c>
    13da:	3801      	subs	r0, #1
    13dc:	ebb8 0507 	subs.w	r5, r8, r7
    13e0:	eb69 0203 	sbc.w	r2, r9, r3
    13e4:	b32e      	cbz	r6, 1432 <__udivmoddi4+0x2aa>
    13e6:	ebbe 0305 	subs.w	r3, lr, r5
    13ea:	eb6c 0c02 	sbc.w	ip, ip, r2
    13ee:	fa23 f201 	lsr.w	r2, r3, r1
    13f2:	fa0c f404 	lsl.w	r4, ip, r4
    13f6:	fa2c f301 	lsr.w	r3, ip, r1
    13fa:	2100      	movs	r1, #0
    13fc:	4314      	orrs	r4, r2
    13fe:	e9c6 4300 	strd	r4, r3, [r6]
    1402:	e70c      	b.n	121e <__udivmoddi4+0x96>
    1404:	4631      	mov	r1, r6
    1406:	4630      	mov	r0, r6
    1408:	e709      	b.n	121e <__udivmoddi4+0x96>
    140a:	1a84      	subs	r4, r0, r2
    140c:	eb65 0303 	sbc.w	r3, r5, r3
    1410:	2001      	movs	r0, #1
    1412:	469a      	mov	sl, r3
    1414:	e756      	b.n	12c4 <__udivmoddi4+0x13c>
    1416:	f1ac 0c02 	sub.w	ip, ip, #2
    141a:	443d      	add	r5, r7
    141c:	e724      	b.n	1268 <__udivmoddi4+0xe0>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e734      	b.n	128e <__udivmoddi4+0x106>
    1424:	3802      	subs	r0, #2
    1426:	443c      	add	r4, r7
    1428:	e6ef      	b.n	120a <__udivmoddi4+0x82>
    142a:	f1ae 0e02 	sub.w	lr, lr, #2
    142e:	443b      	add	r3, r7
    1430:	e6d9      	b.n	11e6 <__udivmoddi4+0x5e>
    1432:	4631      	mov	r1, r6
    1434:	e6f3      	b.n	121e <__udivmoddi4+0x96>
    1436:	3802      	subs	r0, #2
    1438:	449c      	add	ip, r3
    143a:	e7c1      	b.n	13c0 <__udivmoddi4+0x238>
    143c:	3802      	subs	r0, #2
    143e:	443b      	add	r3, r7
    1440:	e768      	b.n	1314 <__udivmoddi4+0x18c>
    1442:	f1aa 0a02 	sub.w	sl, sl, #2
    1446:	449c      	add	ip, r3
    1448:	e7a7      	b.n	139a <__udivmoddi4+0x212>
    144a:	3902      	subs	r1, #2
    144c:	443d      	add	r5, r7
    144e:	e774      	b.n	133a <__udivmoddi4+0x1b2>

00001450 <__aeabi_idiv0>:
    1450:	4770      	bx	lr
    1452:	bf00      	nop

00001454 <__aeabi_d2uiz>:
    1454:	004a      	lsls	r2, r1, #1
    1456:	d211      	bcs.n	147c <__aeabi_d2uiz+0x28>
    1458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    145c:	d211      	bcs.n	1482 <__aeabi_d2uiz+0x2e>
    145e:	d50d      	bpl.n	147c <__aeabi_d2uiz+0x28>
    1460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1468:	d40e      	bmi.n	1488 <__aeabi_d2uiz+0x34>
    146a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    146e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1476:	fa23 f002 	lsr.w	r0, r3, r2
    147a:	4770      	bx	lr
    147c:	f04f 0000 	mov.w	r0, #0
    1480:	4770      	bx	lr
    1482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1486:	d102      	bne.n	148e <__aeabi_d2uiz+0x3a>
    1488:	f04f 30ff 	mov.w	r0, #4294967295
    148c:	4770      	bx	lr
    148e:	f04f 0000 	mov.w	r0, #0
    1492:	4770      	bx	lr

00001494 <__aeabi_dcmpun>:
    1494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    149c:	d102      	bne.n	14a4 <__aeabi_dcmpun+0x10>
    149e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14a2:	d10a      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ac:	d102      	bne.n	14b4 <__aeabi_dcmpun+0x20>
    14ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14b2:	d102      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14b4:	f04f 0000 	mov.w	r0, #0
    14b8:	4770      	bx	lr
    14ba:	f04f 0001 	mov.w	r0, #1
    14be:	4770      	bx	lr

000014c0 <strcmp>:
    14c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    14c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    14c8:	2a01      	cmp	r2, #1
    14ca:	bf28      	it	cs
    14cc:	429a      	cmpcs	r2, r3
    14ce:	d0f7      	beq.n	14c0 <strcmp>
    14d0:	1ad0      	subs	r0, r2, r3
    14d2:	4770      	bx	lr

000014d4 <strlen>:
    14d4:	4603      	mov	r3, r0
    14d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    14da:	2a00      	cmp	r2, #0
    14dc:	d1fb      	bne.n	14d6 <strlen+0x2>
    14de:	1a18      	subs	r0, r3, r0
    14e0:	3801      	subs	r0, #1
    14e2:	4770      	bx	lr
    14e4:	0000      	movs	r0, r0
	...

000014e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    14e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14ec:	4606      	mov	r6, r0
    14ee:	e9dd 890b 	ldrd	r8, r9, [sp, #44]	; 0x2c
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    14f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
    14f6:	469b      	mov	fp, r3
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    14f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                              int32_t* quantized_multiplier, int* left_shift) {
    14fa:	460f      	mov	r7, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    14fc:	40d8      	lsrs	r0, r3
                              int32_t* quantized_multiplier, int* left_shift) {
    14fe:	4692      	mov	sl, r2
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1500:	f7fe ff7c 	bl	3fc <__aeabi_i2d>
    1504:	4652      	mov	r2, sl
    1506:	4604      	mov	r4, r0
    1508:	460d      	mov	r5, r1
    150a:	465b      	mov	r3, fp
    150c:	4630      	mov	r0, r6
    150e:	4639      	mov	r1, r7
    1510:	f7fe ffde 	bl	4d0 <__aeabi_dmul>
    1514:	4602      	mov	r2, r0
    1516:	460b      	mov	r3, r1
    1518:	4620      	mov	r0, r4
    151a:	4629      	mov	r1, r5
    151c:	f7fe ffd8 	bl	4d0 <__aeabi_dmul>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    1520:	a309      	add	r3, pc, #36	; (adr r3, 1548 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
    1522:	e9d3 2300 	ldrd	r2, r3, [r3]
    1526:	4604      	mov	r4, r0
    1528:	460d      	mov	r5, r1
    152a:	f7ff fa61 	bl	9f0 <__aeabi_dcmpgt>
    152e:	b110      	cbz	r0, 1536 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4e>
	return __b;
    1530:	a505      	add	r5, pc, #20	; (adr r5, 1548 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
    1532:	e9d5 4500 	ldrd	r4, r5, [r5]
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1536:	464b      	mov	r3, r9
    1538:	4642      	mov	r2, r8
    153a:	4620      	mov	r0, r4
    153c:	4629      	mov	r1, r5
                                   quantized_multiplier, left_shift);
}
    153e:	b001      	add	sp, #4
    1540:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1544:	f005 beca 	b.w	72dc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
    1548:	ffc00000 	.word	0xffc00000
    154c:	41dfffff 	.word	0x41dfffff

00001550 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1554:	4604      	mov	r4, r0
    1556:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
    155a:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
    155c:	4616      	mov	r6, r2
    155e:	469a      	mov	sl, r3
    1560:	460d      	mov	r5, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1562:	f7fe ff5d 	bl	420 <__aeabi_f2d>
    1566:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
    1568:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
    156a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    156c:	f7fe ff58 	bl	420 <__aeabi_f2d>
    1570:	4602      	mov	r2, r0
    1572:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1574:	4640      	mov	r0, r8
    1576:	4649      	mov	r1, r9
    1578:	f7fe ffaa 	bl	4d0 <__aeabi_dmul>
    157c:	4680      	mov	r8, r0
    157e:	4689      	mov	r9, r1
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    1580:	f1ba 0f00 	cmp.w	sl, #0
    1584:	d01b      	beq.n	15be <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6e>
    const double bias_scale = static_cast<double>(bias->params.scale);
    1586:	f8da 000c 	ldr.w	r0, [sl, #12]
    158a:	f7fe ff49 	bl	420 <__aeabi_f2d>
    158e:	4602      	mov	r2, r0
    1590:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    1592:	4640      	mov	r0, r8
    1594:	4649      	mov	r1, r9
    1596:	f7fe fde3 	bl	160 <__aeabi_dsub>
    159a:	4681      	mov	r9, r0
    const double output_scale = static_cast<double>(output->params.scale);
    159c:	68f8      	ldr	r0, [r7, #12]
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    159e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    15a2:	f7fe ff3d 	bl	420 <__aeabi_f2d>
    15a6:	4602      	mov	r2, r0
    15a8:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15aa:	4648      	mov	r0, r9
    15ac:	4641      	mov	r1, r8
    15ae:	f7ff f8b9 	bl	724 <__aeabi_ddiv>
    15b2:	a30f      	add	r3, pc, #60	; (adr r3, 15f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    15b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b8:	f7ff fa06 	bl	9c8 <__aeabi_dcmple>
    15bc:	b150      	cbz	r0, 15d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x84>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15be:	463b      	mov	r3, r7
    15c0:	4632      	mov	r2, r6
    15c2:	4629      	mov	r1, r5
    15c4:	4620      	mov	r0, r4
    15c6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
    15ca:	b003      	add	sp, #12
    15cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15d0:	f005 bece 	b.w	7370 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15d4:	4b08      	ldr	r3, [pc, #32]	; (15f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    15d6:	4620      	mov	r0, r4
    15d8:	9300      	str	r3, [sp, #0]
    15da:	6965      	ldr	r5, [r4, #20]
    15dc:	f44f 739f 	mov.w	r3, #318	; 0x13e
    15e0:	4a06      	ldr	r2, [pc, #24]	; (15fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xac>)
    15e2:	4907      	ldr	r1, [pc, #28]	; (1600 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb0>)
    15e4:	47a8      	blx	r5
}
    15e6:	2001      	movs	r0, #1
    15e8:	b003      	add	sp, #12
    15ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ee:	bf00      	nop
    15f0:	47ae147b 	.word	0x47ae147b
    15f4:	3f947ae1 	.word	0x3f947ae1
    15f8:	0006471f 	.word	0x0006471f
    15fc:	00064694 	.word	0x00064694
    1600:	00064540 	.word	0x00064540
    1604:	00000000 	.word	0x00000000

00001608 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    1608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    160c:	680b      	ldr	r3, [r1, #0]
    160e:	4604      	mov	r4, r0
    1610:	681e      	ldr	r6, [r3, #0]
    1612:	4688      	mov	r8, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    1614:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    1616:	b089      	sub	sp, #36	; 0x24
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    1618:	d00f      	beq.n	163a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32>
    161a:	2501      	movs	r5, #1
    161c:	4b9d      	ldr	r3, [pc, #628]	; (1894 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    161e:	e9cd 6502 	strd	r6, r5, [sp, #8]
    1622:	9301      	str	r3, [sp, #4]
    1624:	4b9c      	ldr	r3, [pc, #624]	; (1898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
    1626:	4a9d      	ldr	r2, [pc, #628]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1628:	9300      	str	r3, [sp, #0]
    162a:	6944      	ldr	r4, [r0, #20]
    162c:	235d      	movs	r3, #93	; 0x5d
    162e:	499c      	ldr	r1, [pc, #624]	; (18a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    1630:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    1632:	4628      	mov	r0, r5
    1634:	b009      	add	sp, #36	; 0x24
    1636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    163a:	684b      	ldr	r3, [r1, #4]
    163c:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    163e:	2d01      	cmp	r5, #1
    1640:	d00c      	beq.n	165c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x54>
    1642:	4b94      	ldr	r3, [pc, #592]	; (1894 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    1644:	e9cd 5602 	strd	r5, r6, [sp, #8]
    1648:	9301      	str	r3, [sp, #4]
    164a:	4b96      	ldr	r3, [pc, #600]	; (18a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    164c:	4a93      	ldr	r2, [pc, #588]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    164e:	9300      	str	r3, [sp, #0]
    1650:	6944      	ldr	r4, [r0, #20]
    1652:	235e      	movs	r3, #94	; 0x5e
    1654:	4992      	ldr	r1, [pc, #584]	; (18a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    1656:	47a0      	blx	r4
    TF_LITE_ENSURE(context,
    1658:	2501      	movs	r5, #1
    165a:	e7ea      	b.n	1632 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  const TfLiteTensor* input = GetInput(context, node, 0);
    165c:	2200      	movs	r2, #0
    165e:	f00c ff83 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    1662:	4607      	mov	r7, r0
    1664:	b940      	cbnz	r0, 1678 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>
    1666:	4b90      	ldr	r3, [pc, #576]	; (18a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    1668:	9300      	str	r3, [sp, #0]
    166a:	2360      	movs	r3, #96	; 0x60
    166c:	6966      	ldr	r6, [r4, #20]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    166e:	4620      	mov	r0, r4
    1670:	4a8a      	ldr	r2, [pc, #552]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1672:	498e      	ldr	r1, [pc, #568]	; (18ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    1674:	47b0      	blx	r6
    1676:	e7dc      	b.n	1632 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    1678:	6883      	ldr	r3, [r0, #8]
    167a:	681b      	ldr	r3, [r3, #0]
    167c:	2b00      	cmp	r3, #0
    167e:	dc04      	bgt.n	168a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x82>
    1680:	4b8b      	ldr	r3, [pc, #556]	; (18b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    1682:	9300      	str	r3, [sp, #0]
    1684:	6966      	ldr	r6, [r4, #20]
    1686:	2361      	movs	r3, #97	; 0x61
    1688:	e7f1      	b.n	166e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, 0);
    168a:	2200      	movs	r2, #0
    168c:	4641      	mov	r1, r8
    168e:	4620      	mov	r0, r4
    1690:	f00c ff7b 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    1694:	4681      	mov	r9, r0
    1696:	b920      	cbnz	r0, 16a2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x9a>
    1698:	4b86      	ldr	r3, [pc, #536]	; (18b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
    169a:	9300      	str	r3, [sp, #0]
    169c:	6966      	ldr	r6, [r4, #20]
    169e:	2363      	movs	r3, #99	; 0x63
    16a0:	e7e5      	b.n	166e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    16a2:	f8d8 6010 	ldr.w	r6, [r8, #16]
    16a6:	b926      	cbnz	r6, 16b2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    16a8:	4b83      	ldr	r3, [pc, #524]	; (18b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
    16aa:	9300      	str	r3, [sp, #0]
    16ac:	6966      	ldr	r6, [r4, #20]
    16ae:	2365      	movs	r3, #101	; 0x65
    16b0:	e7dd      	b.n	166e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  if (input->type == kTfLiteInt16) {
    16b2:	783b      	ldrb	r3, [r7, #0]
    16b4:	2b07      	cmp	r3, #7
    16b6:	d117      	bne.n	16e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    16b8:	f240 4102 	movw	r1, #1026	; 0x402
    16bc:	4620      	mov	r0, r4
    16be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    16c0:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    16c2:	b920      	cbnz	r0, 16ce <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
    16c4:	4b7d      	ldr	r3, [pc, #500]	; (18bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
    16c6:	9300      	str	r3, [sp, #0]
    16c8:	6966      	ldr	r6, [r4, #20]
    16ca:	236b      	movs	r3, #107	; 0x6b
    16cc:	e7cf      	b.n	166e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x66>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    16ce:	62b0      	str	r0, [r6, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    16d0:	f240 4102 	movw	r1, #1026	; 0x402
    16d4:	4620      	mov	r0, r4
    16d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    16d8:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    16da:	b920      	cbnz	r0, 16e6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xde>
    16dc:	4b78      	ldr	r3, [pc, #480]	; (18c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
    16de:	9300      	str	r3, [sp, #0]
    16e0:	6966      	ldr	r6, [r4, #20]
    16e2:	236f      	movs	r3, #111	; 0x6f
    16e4:	e7c3      	b.n	166e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x66>
    op_data->one_over_one_plus_x_lut =
    16e6:	62f0      	str	r0, [r6, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
    16e8:	f899 2000 	ldrb.w	r2, [r9]
    16ec:	783b      	ldrb	r3, [r7, #0]
    16ee:	2a07      	cmp	r2, #7
    16f0:	d10c      	bne.n	170c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x104>
    TF_LITE_ENSURE(context,
    16f2:	2b09      	cmp	r3, #9
    16f4:	d03d      	beq.n	1772 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    16f6:	2b07      	cmp	r3, #7
    16f8:	d017      	beq.n	172a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
    16fa:	4b72      	ldr	r3, [pc, #456]	; (18c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
    16fc:	9300      	str	r3, [sp, #0]
    16fe:	2375      	movs	r3, #117	; 0x75
    1700:	6965      	ldr	r5, [r4, #20]
    1702:	4620      	mov	r0, r4
    1704:	4a65      	ldr	r2, [pc, #404]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1706:	4969      	ldr	r1, [pc, #420]	; (18ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    1708:	47a8      	blx	r5
    170a:	e7a5      	b.n	1658 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x50>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    170c:	429a      	cmp	r2, r3
    170e:	d030      	beq.n	1772 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    1710:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1714:	4b6c      	ldr	r3, [pc, #432]	; (18c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    1716:	9301      	str	r3, [sp, #4]
    1718:	4b6c      	ldr	r3, [pc, #432]	; (18cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    171a:	9300      	str	r3, [sp, #0]
    171c:	2378      	movs	r3, #120	; 0x78
    171e:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1720:	4620      	mov	r0, r4
    1722:	4a5e      	ldr	r2, [pc, #376]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1724:	495e      	ldr	r1, [pc, #376]	; (18a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    1726:	47a8      	blx	r5
    1728:	e796      	b.n	1658 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x50>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    172a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    172e:	b14b      	cbz	r3, 1744 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    1730:	2200      	movs	r2, #0
    1732:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1736:	4b66      	ldr	r3, [pc, #408]	; (18d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    1738:	9301      	str	r3, [sp, #4]
    173a:	4b66      	ldr	r3, [pc, #408]	; (18d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    173c:	9300      	str	r3, [sp, #0]
    173e:	6965      	ldr	r5, [r4, #20]
    1740:	237d      	movs	r3, #125	; 0x7d
    1742:	e7ed      	b.n	1720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x118>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    1744:	f240 2501 	movw	r5, #513	; 0x201
    1748:	9500      	str	r5, [sp, #0]
    174a:	2200      	movs	r2, #0
    174c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    174e:	4962      	ldr	r1, [pc, #392]	; (18d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
    1750:	4862      	ldr	r0, [pc, #392]	; (18dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    1752:	f008 fd17 	bl	a184 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    1756:	9500      	str	r5, [sp, #0]
    1758:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    175a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    175e:	2100      	movs	r1, #0
    1760:	485f      	ldr	r0, [pc, #380]	; (18e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    1762:	f008 fd0f 	bl	a184 <_ZN6tflite7gen_lutEPFffEffPsi>
    op_data->zero_point = output->params.zero_point;
    1766:	f8d9 3010 	ldr.w	r3, [r9, #16]
    176a:	61f3      	str	r3, [r6, #28]
    op_data->scale = output->params.scale;
    176c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    1770:	6233      	str	r3, [r6, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    1772:	783d      	ldrb	r5, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    1774:	f8d8 8014 	ldr.w	r8, [r8, #20]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    1778:	2d09      	cmp	r5, #9
    177a:	d03c      	beq.n	17f6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
    177c:	2d07      	cmp	r5, #7
    177e:	f040 8124 	bne.w	19ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3c2>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    1782:	f8d9 3010 	ldr.w	r3, [r9, #16]
    1786:	b14b      	cbz	r3, 179c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x194>
    1788:	2200      	movs	r2, #0
    178a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    178e:	4b50      	ldr	r3, [pc, #320]	; (18d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    1790:	9301      	str	r3, [sp, #4]
    1792:	4b50      	ldr	r3, [pc, #320]	; (18d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1794:	9300      	str	r3, [sp, #0]
    1796:	6965      	ldr	r5, [r4, #20]
    1798:	2325      	movs	r3, #37	; 0x25
    179a:	e7c1      	b.n	1720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x118>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    179c:	f8d9 900c 	ldr.w	r9, [r9, #12]
    17a0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    17a4:	4648      	mov	r0, r9
    17a6:	f7ff fc6f 	bl	1088 <__aeabi_fcmpgt>
    17aa:	b300      	cbz	r0, 17ee <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1e6>
    17ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    17b0:	4648      	mov	r0, r9
    17b2:	f7ff f9a3 	bl	afc <__aeabi_fsub>
    17b6:	494b      	ldr	r1, [pc, #300]	; (18e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
    17b8:	f7ff fc66 	bl	1088 <__aeabi_fcmpgt>
    17bc:	4605      	mov	r5, r0
    17be:	2800      	cmp	r0, #0
    17c0:	f000 80c2 	beq.w	1948 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x340>
    17c4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    17c8:	2200      	movs	r2, #0
    17ca:	4648      	mov	r0, r9
    17cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    17d0:	f7fe fe26 	bl	420 <__aeabi_f2d>
    17d4:	4b44      	ldr	r3, [pc, #272]	; (18e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    17d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    17da:	9301      	str	r3, [sp, #4]
    17dc:	4b43      	ldr	r3, [pc, #268]	; (18ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    17de:	9300      	str	r3, [sp, #0]
    17e0:	2326      	movs	r3, #38	; 0x26
    17e2:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    17e4:	4620      	mov	r0, r4
    17e6:	4a2d      	ldr	r2, [pc, #180]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    17e8:	4941      	ldr	r1, [pc, #260]	; (18f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    17ea:	47a8      	blx	r5
    17ec:	e734      	b.n	1658 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x50>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    17ee:	4649      	mov	r1, r9
    17f0:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
    17f4:	e7dd      	b.n	17b2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1aa>
      if (output->type == kTfLiteInt16) {
    17f6:	f899 0000 	ldrb.w	r0, [r9]
    17fa:	2807      	cmp	r0, #7
    17fc:	d135      	bne.n	186a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x262>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    17fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
    1802:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    1806:	d009      	beq.n	181c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x214>
    1808:	4a3a      	ldr	r2, [pc, #232]	; (18f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    180a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    180e:	4b3a      	ldr	r3, [pc, #232]	; (18f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    1810:	9301      	str	r3, [sp, #4]
    1812:	4b30      	ldr	r3, [pc, #192]	; (18d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1814:	9300      	str	r3, [sp, #0]
    1816:	6965      	ldr	r5, [r4, #20]
    1818:	232b      	movs	r3, #43	; 0x2b
    181a:	e781      	b.n	1720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x118>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    181c:	f8d9 500c 	ldr.w	r5, [r9, #12]
    1820:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    1824:	4628      	mov	r0, r5
    1826:	f7ff fc2f 	bl	1088 <__aeabi_fcmpgt>
    182a:	b1d0      	cbz	r0, 1862 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25a>
    182c:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    1830:	4628      	mov	r0, r5
    1832:	f7ff f963 	bl	afc <__aeabi_fsub>
    1836:	4931      	ldr	r1, [pc, #196]	; (18fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    1838:	f7ff fc26 	bl	1088 <__aeabi_fcmpgt>
    183c:	2800      	cmp	r0, #0
    183e:	f000 80a0 	beq.w	1982 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37a>
    1842:	2200      	movs	r2, #0
    1844:	4b2e      	ldr	r3, [pc, #184]	; (1900 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
    1846:	4628      	mov	r0, r5
    1848:	e9cd 2304 	strd	r2, r3, [sp, #16]
    184c:	f7fe fde8 	bl	420 <__aeabi_f2d>
    1850:	4b2c      	ldr	r3, [pc, #176]	; (1904 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
    1852:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1856:	9301      	str	r3, [sp, #4]
    1858:	4b24      	ldr	r3, [pc, #144]	; (18ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    185a:	9300      	str	r3, [sp, #0]
    185c:	6965      	ldr	r5, [r4, #20]
    185e:	232c      	movs	r3, #44	; 0x2c
    1860:	e7c0      	b.n	17e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1dc>
    1862:	4629      	mov	r1, r5
    1864:	f04f 505e 	mov.w	r0, #931135488	; 0x37800000
    1868:	e7e3      	b.n	1832 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    186a:	2809      	cmp	r0, #9
    186c:	d050      	beq.n	1910 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>
    186e:	6967      	ldr	r7, [r4, #20]
    1870:	f005 fcee 	bl	7250 <TfLiteTypeGetName>
    1874:	4606      	mov	r6, r0
    1876:	4628      	mov	r0, r5
    1878:	f005 fcea 	bl	7250 <TfLiteTypeGetName>
    187c:	4b22      	ldr	r3, [pc, #136]	; (1908 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    187e:	e9cd 6002 	strd	r6, r0, [sp, #8]
    1882:	9301      	str	r3, [sp, #4]
    1884:	4b10      	ldr	r3, [pc, #64]	; (18c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    1886:	4620      	mov	r0, r4
    1888:	9300      	str	r3, [sp, #0]
    188a:	4a04      	ldr	r2, [pc, #16]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    188c:	232f      	movs	r3, #47	; 0x2f
    188e:	491f      	ldr	r1, [pc, #124]	; (190c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    1890:	47b8      	blx	r7
    1892:	e6e1      	b.n	1658 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x50>
    1894:	0006530b 	.word	0x0006530b
    1898:	000652e3 	.word	0x000652e3
    189c:	0006528e 	.word	0x0006528e
    18a0:	00064747 	.word	0x00064747
    18a4:	00065256 	.word	0x00065256
    18a8:	00064e5d 	.word	0x00064e5d
    18ac:	00064540 	.word	0x00064540
    18b0:	000652f3 	.word	0x000652f3
    18b4:	00064e80 	.word	0x00064e80
    18b8:	0006530d 	.word	0x0006530d
    18bc:	00065328 	.word	0x00065328
    18c0:	0006533f 	.word	0x0006533f
    18c4:	000647dd 	.word	0x000647dd
    18c8:	00064d22 	.word	0x00064d22
    18cc:	00064d2f 	.word	0x00064d2f
    18d0:	0006471d 	.word	0x0006471d
    18d4:	00065362 	.word	0x00065362
    18d8:	c1200000 	.word	0xc1200000
    18dc:	0000faf1 	.word	0x0000faf1
    18e0:	0000fadb 	.word	0x0000fadb
    18e4:	3303126f 	.word	0x3303126f
    18e8:	0006539c 	.word	0x0006539c
    18ec:	000653a8 	.word	0x000653a8
    18f0:	0006537c 	.word	0x0006537c
    18f4:	ffff8000 	.word	0xffff8000
    18f8:	000653bd 	.word	0x000653bd
    18fc:	3283126f 	.word	0x3283126f
    1900:	3ef00000 	.word	0x3ef00000
    1904:	000653c4 	.word	0x000653c4
    1908:	00064817 	.word	0x00064817
    190c:	00065065 	.word	0x00065065
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1910:	f8d9 3010 	ldr.w	r3, [r9, #16]
    1914:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1918:	d00a      	beq.n	1930 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x328>
    191a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    191e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1922:	4b47      	ldr	r3, [pc, #284]	; (1a40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x438>)
    1924:	9301      	str	r3, [sp, #4]
    1926:	4b47      	ldr	r3, [pc, #284]	; (1a44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x43c>)
    1928:	9300      	str	r3, [sp, #0]
    192a:	6965      	ldr	r5, [r4, #20]
    192c:	2330      	movs	r3, #48	; 0x30
    192e:	e6f7      	b.n	1720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x118>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1930:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    1934:	f8d9 000c 	ldr.w	r0, [r9, #12]
    1938:	f7ff fb7e 	bl	1038 <__aeabi_fcmpeq>
    193c:	bb08      	cbnz	r0, 1982 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37a>
    193e:	4b42      	ldr	r3, [pc, #264]	; (1a48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x440>)
    1940:	9300      	str	r3, [sp, #0]
    1942:	6965      	ldr	r5, [r4, #20]
    1944:	2331      	movs	r3, #49	; 0x31
    1946:	e6dc      	b.n	1702 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
          static_cast<double>(input->params.scale) *
    1948:	68f8      	ldr	r0, [r7, #12]
    194a:	f7fe fd69 	bl	420 <__aeabi_f2d>
    194e:	4682      	mov	sl, r0
          static_cast<double>(params->beta) /
    1950:	f8d8 0000 	ldr.w	r0, [r8]
          static_cast<double>(input->params.scale) *
    1954:	468b      	mov	fp, r1
          static_cast<double>(params->beta) /
    1956:	f7fe fd63 	bl	420 <__aeabi_f2d>
    195a:	4602      	mov	r2, r0
    195c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    195e:	4650      	mov	r0, sl
    1960:	4659      	mov	r1, fp
    1962:	f7fe fdb5 	bl	4d0 <__aeabi_dmul>
      double input_scale_beta_rescale =
    1966:	a334      	add	r3, pc, #208	; (adr r3, 1a38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x430>)
    1968:	e9d3 2300 	ldrd	r2, r3, [r3]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    196c:	f106 0408 	add.w	r4, r6, #8
      double input_scale_beta_rescale =
    1970:	f7fe fed8 	bl	724 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    1974:	ab07      	add	r3, sp, #28
    1976:	4622      	mov	r2, r4
    1978:	f005 fc76 	bl	7268 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    197c:	9b07      	ldr	r3, [sp, #28]
    197e:	60f3      	str	r3, [r6, #12]
    1980:	e657      	b.n	1632 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
      tflite::PreprocessSoftmaxScaling(
    1982:	68f8      	ldr	r0, [r7, #12]
    1984:	f7fe fd4c 	bl	420 <__aeabi_f2d>
    1988:	2705      	movs	r7, #5
    198a:	4604      	mov	r4, r0
    198c:	460d      	mov	r5, r1
    198e:	f8d8 0000 	ldr.w	r0, [r8]
    1992:	f7fe fd45 	bl	420 <__aeabi_f2d>
    1996:	ab07      	add	r3, sp, #28
    1998:	9302      	str	r3, [sp, #8]
    199a:	f106 0308 	add.w	r3, r6, #8
    199e:	4622      	mov	r2, r4
    19a0:	9301      	str	r3, [sp, #4]
    19a2:	9700      	str	r7, [sp, #0]
    19a4:	462b      	mov	r3, r5
    19a6:	f7ff fd9f 	bl	14e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    19aa:	9907      	ldr	r1, [sp, #28]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    19ac:	221f      	movs	r2, #31
      op_data->input_left_shift = input_left_shift;
    19ae:	60f1      	str	r1, [r6, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    19b0:	4638      	mov	r0, r7
    19b2:	f00c fd88 	bl	e4c6 <_ZN6tflite20CalculateInputRadiusEiii>
    19b6:	f7fe fd21 	bl	3fc <__aeabi_i2d>
      op_data->diff_min =
    19ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    19be:	4619      	mov	r1, r3
    19c0:	f7ff f820 	bl	a04 <__aeabi_d2iz>
    19c4:	61b0      	str	r0, [r6, #24]
  return kTfLiteOk;
    19c6:	2500      	movs	r5, #0
    19c8:	e633      	b.n	1632 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    19ca:	2d01      	cmp	r5, #1
    19cc:	d013      	beq.n	19f6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3ee>
    19ce:	4628      	mov	r0, r5
    19d0:	6966      	ldr	r6, [r4, #20]
    19d2:	f005 fc3d 	bl	7250 <TfLiteTypeGetName>
    19d6:	4605      	mov	r5, r0
    19d8:	2001      	movs	r0, #1
    19da:	f005 fc39 	bl	7250 <TfLiteTypeGetName>
    19de:	4b1b      	ldr	r3, [pc, #108]	; (1a4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x444>)
    19e0:	e9cd 5002 	strd	r5, r0, [sp, #8]
    19e4:	9301      	str	r3, [sp, #4]
    19e6:	4b1a      	ldr	r3, [pc, #104]	; (1a50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x448>)
    19e8:	4620      	mov	r0, r4
    19ea:	9300      	str	r3, [sp, #0]
    19ec:	4a19      	ldr	r2, [pc, #100]	; (1a54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
    19ee:	234e      	movs	r3, #78	; 0x4e
    19f0:	4919      	ldr	r1, [pc, #100]	; (1a58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x450>)
    19f2:	47b0      	blx	r6
    19f4:	e630      	b.n	1658 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x50>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    19f6:	f899 0000 	ldrb.w	r0, [r9]
    19fa:	2801      	cmp	r0, #1
    19fc:	d012      	beq.n	1a24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x41c>
    19fe:	6967      	ldr	r7, [r4, #20]
    1a00:	f005 fc26 	bl	7250 <TfLiteTypeGetName>
    1a04:	4606      	mov	r6, r0
    1a06:	4628      	mov	r0, r5
    1a08:	f005 fc22 	bl	7250 <TfLiteTypeGetName>
    1a0c:	4b0f      	ldr	r3, [pc, #60]	; (1a4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x444>)
    1a0e:	e9cd 6002 	strd	r6, r0, [sp, #8]
    1a12:	9301      	str	r3, [sp, #4]
    1a14:	4b11      	ldr	r3, [pc, #68]	; (1a5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x454>)
    1a16:	4620      	mov	r0, r4
    1a18:	9300      	str	r3, [sp, #0]
    1a1a:	4a0e      	ldr	r2, [pc, #56]	; (1a54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
    1a1c:	234f      	movs	r3, #79	; 0x4f
    1a1e:	490e      	ldr	r1, [pc, #56]	; (1a58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x450>)
    1a20:	47b8      	blx	r7
    1a22:	e606      	b.n	1632 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    op_data->beta = static_cast<double>(params->beta);
    1a24:	f8d8 0000 	ldr.w	r0, [r8]
    1a28:	f7fe fcfa 	bl	420 <__aeabi_f2d>
    1a2c:	e9c6 0100 	strd	r0, r1, [r6]
    1a30:	e7c9      	b.n	19c6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3be>
    1a32:	bf00      	nop
    1a34:	f3af 8000 	nop.w
    1a38:	00140014 	.word	0x00140014
    1a3c:	3f240014 	.word	0x3f240014
    1a40:	000653d0 	.word	0x000653d0
    1a44:	00065362 	.word	0x00065362
    1a48:	000653d5 	.word	0x000653d5
    1a4c:	000653f7 	.word	0x000653f7
    1a50:	00064d2f 	.word	0x00064d2f
    1a54:	0006528e 	.word	0x0006528e
    1a58:	00065065 	.word	0x00065065
    1a5c:	00064d22 	.word	0x00064d22

00001a60 <floor>:
    1a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a62:	f3c1 570a 	ubfx	r7, r1, #20, #11
    1a66:	460b      	mov	r3, r1
    1a68:	4602      	mov	r2, r0
    1a6a:	460c      	mov	r4, r1
    1a6c:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    1a70:	4606      	mov	r6, r0
    1a72:	2d13      	cmp	r5, #19
    1a74:	dc20      	bgt.n	1ab8 <floor+0x58>
    1a76:	2d00      	cmp	r5, #0
    1a78:	db40      	blt.n	1afc <floor+0x9c>
    1a7a:	4f35      	ldr	r7, [pc, #212]	; (1b50 <floor+0xf0>)
    1a7c:	412f      	asrs	r7, r5
    1a7e:	ea01 0c07 	and.w	ip, r1, r7
    1a82:	ea5c 0c00 	orrs.w	ip, ip, r0
    1a86:	d014      	beq.n	1ab2 <floor+0x52>
    1a88:	a32f      	add	r3, pc, #188	; (adr r3, 1b48 <floor+0xe8>)
    1a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a8e:	f7fe fb69 	bl	164 <__adddf3>
    1a92:	2200      	movs	r2, #0
    1a94:	2300      	movs	r3, #0
    1a96:	f7fe ffab 	bl	9f0 <__aeabi_dcmpgt>
    1a9a:	b140      	cbz	r0, 1aae <floor+0x4e>
    1a9c:	2c00      	cmp	r4, #0
    1a9e:	da03      	bge.n	1aa8 <floor+0x48>
    1aa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    1aa4:	412b      	asrs	r3, r5
    1aa6:	441c      	add	r4, r3
    1aa8:	ea24 0407 	bic.w	r4, r4, r7
    1aac:	2600      	movs	r6, #0
    1aae:	4632      	mov	r2, r6
    1ab0:	4623      	mov	r3, r4
    1ab2:	4610      	mov	r0, r2
    1ab4:	4619      	mov	r1, r3
    1ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ab8:	2d33      	cmp	r5, #51	; 0x33
    1aba:	dd07      	ble.n	1acc <floor+0x6c>
    1abc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    1ac0:	d1f7      	bne.n	1ab2 <floor+0x52>
    1ac2:	f7fe fb4f 	bl	164 <__adddf3>
    1ac6:	4602      	mov	r2, r0
    1ac8:	460b      	mov	r3, r1
    1aca:	e7f2      	b.n	1ab2 <floor+0x52>
    1acc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    1ad0:	f04f 3cff 	mov.w	ip, #4294967295
    1ad4:	fa2c f707 	lsr.w	r7, ip, r7
    1ad8:	4207      	tst	r7, r0
    1ada:	d0ea      	beq.n	1ab2 <floor+0x52>
    1adc:	a31a      	add	r3, pc, #104	; (adr r3, 1b48 <floor+0xe8>)
    1ade:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ae2:	f7fe fb3f 	bl	164 <__adddf3>
    1ae6:	2200      	movs	r2, #0
    1ae8:	2300      	movs	r3, #0
    1aea:	f7fe ff81 	bl	9f0 <__aeabi_dcmpgt>
    1aee:	2800      	cmp	r0, #0
    1af0:	d0dd      	beq.n	1aae <floor+0x4e>
    1af2:	2c00      	cmp	r4, #0
    1af4:	db1b      	blt.n	1b2e <floor+0xce>
    1af6:	ea26 0607 	bic.w	r6, r6, r7
    1afa:	e7d8      	b.n	1aae <floor+0x4e>
    1afc:	a312      	add	r3, pc, #72	; (adr r3, 1b48 <floor+0xe8>)
    1afe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b02:	f7fe fb2f 	bl	164 <__adddf3>
    1b06:	2200      	movs	r2, #0
    1b08:	2300      	movs	r3, #0
    1b0a:	f7fe ff71 	bl	9f0 <__aeabi_dcmpgt>
    1b0e:	2800      	cmp	r0, #0
    1b10:	d0cd      	beq.n	1aae <floor+0x4e>
    1b12:	2c00      	cmp	r4, #0
    1b14:	db02      	blt.n	1b1c <floor+0xbc>
    1b16:	2600      	movs	r6, #0
    1b18:	4634      	mov	r4, r6
    1b1a:	e7c8      	b.n	1aae <floor+0x4e>
    1b1c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    1b20:	4a0c      	ldr	r2, [pc, #48]	; (1b54 <floor+0xf4>)
    1b22:	4333      	orrs	r3, r6
    1b24:	2600      	movs	r6, #0
    1b26:	42b3      	cmp	r3, r6
    1b28:	bf18      	it	ne
    1b2a:	4614      	movne	r4, r2
    1b2c:	e7bf      	b.n	1aae <floor+0x4e>
    1b2e:	2d14      	cmp	r5, #20
    1b30:	d008      	beq.n	1b44 <floor+0xe4>
    1b32:	2201      	movs	r2, #1
    1b34:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    1b38:	fa02 f303 	lsl.w	r3, r2, r3
    1b3c:	199e      	adds	r6, r3, r6
    1b3e:	bf28      	it	cs
    1b40:	18a4      	addcs	r4, r4, r2
    1b42:	e7d8      	b.n	1af6 <floor+0x96>
    1b44:	3401      	adds	r4, #1
    1b46:	e7d6      	b.n	1af6 <floor+0x96>
    1b48:	8800759c 	.word	0x8800759c
    1b4c:	7e37e43c 	.word	0x7e37e43c
    1b50:	000fffff 	.word	0x000fffff
    1b54:	bff00000 	.word	0xbff00000

00001b58 <_dtoa_r>:
    1b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b5c:	4616      	mov	r6, r2
    1b5e:	b099      	sub	sp, #100	; 0x64
    1b60:	461f      	mov	r7, r3
    1b62:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1b64:	4605      	mov	r5, r0
    1b66:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1b6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1b6e:	b93c      	cbnz	r4, 1b80 <_dtoa_r+0x28>
    1b70:	2010      	movs	r0, #16
    1b72:	f009 ff61 	bl	ba38 <malloc>
    1b76:	6268      	str	r0, [r5, #36]	; 0x24
    1b78:	6004      	str	r4, [r0, #0]
    1b7a:	60c4      	str	r4, [r0, #12]
    1b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1b80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b82:	6819      	ldr	r1, [r3, #0]
    1b84:	b151      	cbz	r1, 1b9c <_dtoa_r+0x44>
    1b86:	685a      	ldr	r2, [r3, #4]
    1b88:	2301      	movs	r3, #1
    1b8a:	4628      	mov	r0, r5
    1b8c:	4093      	lsls	r3, r2
    1b8e:	604a      	str	r2, [r1, #4]
    1b90:	608b      	str	r3, [r1, #8]
    1b92:	f00e fc4c 	bl	1042e <_Bfree>
    1b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b98:	2200      	movs	r2, #0
    1b9a:	601a      	str	r2, [r3, #0]
    1b9c:	1e3b      	subs	r3, r7, #0
    1b9e:	bfb7      	itett	lt
    1ba0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1ba4:	2300      	movge	r3, #0
    1ba6:	2201      	movlt	r2, #1
    1ba8:	9305      	strlt	r3, [sp, #20]
    1baa:	bfa8      	it	ge
    1bac:	f8c8 3000 	strge.w	r3, [r8]
    1bb0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1bb4:	4bac      	ldr	r3, [pc, #688]	; (1e68 <_dtoa_r+0x310>)
    1bb6:	bfb8      	it	lt
    1bb8:	f8c8 2000 	strlt.w	r2, [r8]
    1bbc:	ea33 0309 	bics.w	r3, r3, r9
    1bc0:	d119      	bne.n	1bf6 <_dtoa_r+0x9e>
    1bc2:	f242 730f 	movw	r3, #9999	; 0x270f
    1bc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1bc8:	6013      	str	r3, [r2, #0]
    1bca:	f3c9 0313 	ubfx	r3, r9, #0, #20
    1bce:	4333      	orrs	r3, r6
    1bd0:	f000 856a 	beq.w	26a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a8>
    1bd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1bd6:	b953      	cbnz	r3, 1bee <_dtoa_r+0x96>
    1bd8:	4ba4      	ldr	r3, [pc, #656]	; (1e6c <_dtoa_r+0x314>)
    1bda:	e023      	b.n	1c24 <_dtoa_r+0xcc>
    1bdc:	4ba4      	ldr	r3, [pc, #656]	; (1e70 <_dtoa_r+0x318>)
    1bde:	9303      	str	r3, [sp, #12]
    1be0:	3308      	adds	r3, #8
    1be2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1be4:	6013      	str	r3, [r2, #0]
    1be6:	9803      	ldr	r0, [sp, #12]
    1be8:	b019      	add	sp, #100	; 0x64
    1bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bee:	4b9f      	ldr	r3, [pc, #636]	; (1e6c <_dtoa_r+0x314>)
    1bf0:	9303      	str	r3, [sp, #12]
    1bf2:	3303      	adds	r3, #3
    1bf4:	e7f5      	b.n	1be2 <_dtoa_r+0x8a>
    1bf6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1bfa:	2200      	movs	r2, #0
    1bfc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1c04:	2300      	movs	r3, #0
    1c06:	f7fe fecb 	bl	9a0 <__aeabi_dcmpeq>
    1c0a:	4680      	mov	r8, r0
    1c0c:	b160      	cbz	r0, 1c28 <_dtoa_r+0xd0>
    1c0e:	2301      	movs	r3, #1
    1c10:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1c12:	6013      	str	r3, [r2, #0]
    1c14:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1c16:	2b00      	cmp	r3, #0
    1c18:	f000 8543 	beq.w	26a2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a2>
    1c1c:	4b95      	ldr	r3, [pc, #596]	; (1e74 <_dtoa_r+0x31c>)
    1c1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1c20:	6013      	str	r3, [r2, #0]
    1c22:	3b01      	subs	r3, #1
    1c24:	9303      	str	r3, [sp, #12]
    1c26:	e7de      	b.n	1be6 <_dtoa_r+0x8e>
    1c28:	ab16      	add	r3, sp, #88	; 0x58
    1c2a:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1c2e:	4628      	mov	r0, r5
    1c30:	9301      	str	r3, [sp, #4]
    1c32:	ab17      	add	r3, sp, #92	; 0x5c
    1c34:	9300      	str	r3, [sp, #0]
    1c36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1c3a:	f00e fe37 	bl	108ac <__d2b>
    1c3e:	4683      	mov	fp, r0
    1c40:	2c00      	cmp	r4, #0
    1c42:	d07c      	beq.n	1d3e <_dtoa_r+0x1e6>
    1c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c46:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1c4a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1c52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1c56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1c5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1c5e:	2200      	movs	r2, #0
    1c60:	4b85      	ldr	r3, [pc, #532]	; (1e78 <_dtoa_r+0x320>)
    1c62:	f7fe fa7d 	bl	160 <__aeabi_dsub>
    1c66:	a37a      	add	r3, pc, #488	; (adr r3, 1e50 <_dtoa_r+0x2f8>)
    1c68:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c6c:	f7fe fc30 	bl	4d0 <__aeabi_dmul>
    1c70:	a379      	add	r3, pc, #484	; (adr r3, 1e58 <_dtoa_r+0x300>)
    1c72:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c76:	f7fe fa75 	bl	164 <__adddf3>
    1c7a:	4606      	mov	r6, r0
    1c7c:	460f      	mov	r7, r1
    1c7e:	4620      	mov	r0, r4
    1c80:	f7fe fbbc 	bl	3fc <__aeabi_i2d>
    1c84:	a376      	add	r3, pc, #472	; (adr r3, 1e60 <_dtoa_r+0x308>)
    1c86:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c8a:	f7fe fc21 	bl	4d0 <__aeabi_dmul>
    1c8e:	4602      	mov	r2, r0
    1c90:	460b      	mov	r3, r1
    1c92:	4630      	mov	r0, r6
    1c94:	4639      	mov	r1, r7
    1c96:	f7fe fa65 	bl	164 <__adddf3>
    1c9a:	4606      	mov	r6, r0
    1c9c:	460f      	mov	r7, r1
    1c9e:	f7fe feb1 	bl	a04 <__aeabi_d2iz>
    1ca2:	2200      	movs	r2, #0
    1ca4:	4682      	mov	sl, r0
    1ca6:	2300      	movs	r3, #0
    1ca8:	4630      	mov	r0, r6
    1caa:	4639      	mov	r1, r7
    1cac:	f7fe fe82 	bl	9b4 <__aeabi_dcmplt>
    1cb0:	b148      	cbz	r0, 1cc6 <_dtoa_r+0x16e>
    1cb2:	4650      	mov	r0, sl
    1cb4:	f7fe fba2 	bl	3fc <__aeabi_i2d>
    1cb8:	4632      	mov	r2, r6
    1cba:	463b      	mov	r3, r7
    1cbc:	f7fe fe70 	bl	9a0 <__aeabi_dcmpeq>
    1cc0:	b908      	cbnz	r0, 1cc6 <_dtoa_r+0x16e>
    1cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
    1cc6:	f1ba 0f16 	cmp.w	sl, #22
    1cca:	d856      	bhi.n	1d7a <_dtoa_r+0x222>
    1ccc:	4b6b      	ldr	r3, [pc, #428]	; (1e7c <_dtoa_r+0x324>)
    1cce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1cd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cda:	f7fe fe6b 	bl	9b4 <__aeabi_dcmplt>
    1cde:	2800      	cmp	r0, #0
    1ce0:	d04d      	beq.n	1d7e <_dtoa_r+0x226>
    1ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
    1ce6:	2300      	movs	r3, #0
    1ce8:	930f      	str	r3, [sp, #60]	; 0x3c
    1cea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1cec:	1b1c      	subs	r4, r3, r4
    1cee:	1e63      	subs	r3, r4, #1
    1cf0:	9309      	str	r3, [sp, #36]	; 0x24
    1cf2:	bf49      	itett	mi
    1cf4:	f1c4 0301 	rsbmi	r3, r4, #1
    1cf8:	2300      	movpl	r3, #0
    1cfa:	9306      	strmi	r3, [sp, #24]
    1cfc:	2300      	movmi	r3, #0
    1cfe:	bf54      	ite	pl
    1d00:	9306      	strpl	r3, [sp, #24]
    1d02:	9309      	strmi	r3, [sp, #36]	; 0x24
    1d04:	f1ba 0f00 	cmp.w	sl, #0
    1d08:	db3b      	blt.n	1d82 <_dtoa_r+0x22a>
    1d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d0c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1d10:	4453      	add	r3, sl
    1d12:	9309      	str	r3, [sp, #36]	; 0x24
    1d14:	2300      	movs	r3, #0
    1d16:	930a      	str	r3, [sp, #40]	; 0x28
    1d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1d1a:	2b09      	cmp	r3, #9
    1d1c:	f200 80b4 	bhi.w	1e88 <_dtoa_r+0x330>
    1d20:	2b05      	cmp	r3, #5
    1d22:	bfc5      	ittet	gt
    1d24:	3b04      	subgt	r3, #4
    1d26:	2400      	movgt	r4, #0
    1d28:	2401      	movle	r4, #1
    1d2a:	9322      	strgt	r3, [sp, #136]	; 0x88
    1d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1d2e:	3b02      	subs	r3, #2
    1d30:	2b03      	cmp	r3, #3
    1d32:	f200 80b5 	bhi.w	1ea0 <_dtoa_r+0x348>
    1d36:	e8df f003 	tbb	[pc, r3]
    1d3a:	7d2e      	.short	0x7d2e
    1d3c:	a57b      	.short	0xa57b
    1d3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1d42:	441c      	add	r4, r3
    1d44:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1d48:	2b20      	cmp	r3, #32
    1d4a:	bfc6      	itte	gt
    1d4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1d50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1d54:	f1c3 0320 	rsble	r3, r3, #32
    1d58:	f104 34ff 	add.w	r4, r4, #4294967295
    1d5c:	bfc5      	ittet	gt
    1d5e:	fa09 f303 	lslgt.w	r3, r9, r3
    1d62:	fa26 f000 	lsrgt.w	r0, r6, r0
    1d66:	fa06 f003 	lslle.w	r0, r6, r3
    1d6a:	4318      	orrgt	r0, r3
    1d6c:	f7fe fb36 	bl	3dc <__aeabi_ui2d>
    1d70:	2301      	movs	r3, #1
    1d72:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1d76:	9313      	str	r3, [sp, #76]	; 0x4c
    1d78:	e771      	b.n	1c5e <_dtoa_r+0x106>
    1d7a:	2301      	movs	r3, #1
    1d7c:	e7b4      	b.n	1ce8 <_dtoa_r+0x190>
    1d7e:	900f      	str	r0, [sp, #60]	; 0x3c
    1d80:	e7b3      	b.n	1cea <_dtoa_r+0x192>
    1d82:	9b06      	ldr	r3, [sp, #24]
    1d84:	eba3 030a 	sub.w	r3, r3, sl
    1d88:	9306      	str	r3, [sp, #24]
    1d8a:	f1ca 0300 	rsb	r3, sl, #0
    1d8e:	930a      	str	r3, [sp, #40]	; 0x28
    1d90:	2300      	movs	r3, #0
    1d92:	930e      	str	r3, [sp, #56]	; 0x38
    1d94:	e7c0      	b.n	1d18 <_dtoa_r+0x1c0>
    1d96:	2300      	movs	r3, #0
    1d98:	930b      	str	r3, [sp, #44]	; 0x2c
    1d9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	f300 8082 	bgt.w	1ea6 <_dtoa_r+0x34e>
    1da2:	f04f 0901 	mov.w	r9, #1
    1da6:	464b      	mov	r3, r9
    1da8:	f8cd 9020 	str.w	r9, [sp, #32]
    1dac:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1db0:	2200      	movs	r2, #0
    1db2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1db4:	6072      	str	r2, [r6, #4]
    1db6:	2204      	movs	r2, #4
    1db8:	f102 0014 	add.w	r0, r2, #20
    1dbc:	6871      	ldr	r1, [r6, #4]
    1dbe:	4298      	cmp	r0, r3
    1dc0:	d977      	bls.n	1eb2 <_dtoa_r+0x35a>
    1dc2:	4628      	mov	r0, r5
    1dc4:	f00e faff 	bl	103c6 <_Balloc>
    1dc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1dca:	6030      	str	r0, [r6, #0]
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	9303      	str	r3, [sp, #12]
    1dd0:	9b08      	ldr	r3, [sp, #32]
    1dd2:	2b0e      	cmp	r3, #14
    1dd4:	f200 80ee 	bhi.w	1fb4 <_dtoa_r+0x45c>
    1dd8:	2c00      	cmp	r4, #0
    1dda:	f000 80eb 	beq.w	1fb4 <_dtoa_r+0x45c>
    1dde:	f1ba 0f00 	cmp.w	sl, #0
    1de2:	dd7a      	ble.n	1eda <_dtoa_r+0x382>
    1de4:	f00a 030f 	and.w	r3, sl, #15
    1de8:	4a24      	ldr	r2, [pc, #144]	; (1e7c <_dtoa_r+0x324>)
    1dea:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1dee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1df2:	e9d3 3400 	ldrd	r3, r4, [r3]
    1df6:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1dfa:	ea4f 142a 	mov.w	r4, sl, asr #4
    1dfe:	d05c      	beq.n	1eba <_dtoa_r+0x362>
    1e00:	4b1f      	ldr	r3, [pc, #124]	; (1e80 <_dtoa_r+0x328>)
    1e02:	f004 040f 	and.w	r4, r4, #15
    1e06:	2703      	movs	r7, #3
    1e08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1e10:	f7fe fc88 	bl	724 <__aeabi_ddiv>
    1e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e18:	4e19      	ldr	r6, [pc, #100]	; (1e80 <_dtoa_r+0x328>)
    1e1a:	2c00      	cmp	r4, #0
    1e1c:	d14f      	bne.n	1ebe <_dtoa_r+0x366>
    1e1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e26:	f7fe fc7d 	bl	724 <__aeabi_ddiv>
    1e2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e2e:	e06e      	b.n	1f0e <_dtoa_r+0x3b6>
    1e30:	2301      	movs	r3, #1
    1e32:	e7b1      	b.n	1d98 <_dtoa_r+0x240>
    1e34:	2300      	movs	r3, #0
    1e36:	930b      	str	r3, [sp, #44]	; 0x2c
    1e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1e3a:	eb0a 0903 	add.w	r9, sl, r3
    1e3e:	f109 0301 	add.w	r3, r9, #1
    1e42:	2b01      	cmp	r3, #1
    1e44:	9308      	str	r3, [sp, #32]
    1e46:	bfb8      	it	lt
    1e48:	2301      	movlt	r3, #1
    1e4a:	e7b1      	b.n	1db0 <_dtoa_r+0x258>
    1e4c:	f3af 8000 	nop.w
    1e50:	636f4361 	.word	0x636f4361
    1e54:	3fd287a7 	.word	0x3fd287a7
    1e58:	8b60c8b3 	.word	0x8b60c8b3
    1e5c:	3fc68a28 	.word	0x3fc68a28
    1e60:	509f79fb 	.word	0x509f79fb
    1e64:	3fd34413 	.word	0x3fd34413
    1e68:	7ff00000 	.word	0x7ff00000
    1e6c:	00063473 	.word	0x00063473
    1e70:	000655ce 	.word	0x000655ce
    1e74:	0006471e 	.word	0x0006471e
    1e78:	3ff80000 	.word	0x3ff80000
    1e7c:	00062458 	.word	0x00062458
    1e80:	00062430 	.word	0x00062430
    1e84:	2301      	movs	r3, #1
    1e86:	e7d6      	b.n	1e36 <_dtoa_r+0x2de>
    1e88:	2401      	movs	r4, #1
    1e8a:	2300      	movs	r3, #0
    1e8c:	940b      	str	r4, [sp, #44]	; 0x2c
    1e8e:	9322      	str	r3, [sp, #136]	; 0x88
    1e90:	f04f 39ff 	mov.w	r9, #4294967295
    1e94:	2200      	movs	r2, #0
    1e96:	2312      	movs	r3, #18
    1e98:	f8cd 9020 	str.w	r9, [sp, #32]
    1e9c:	9223      	str	r2, [sp, #140]	; 0x8c
    1e9e:	e787      	b.n	1db0 <_dtoa_r+0x258>
    1ea0:	2301      	movs	r3, #1
    1ea2:	930b      	str	r3, [sp, #44]	; 0x2c
    1ea4:	e7f4      	b.n	1e90 <_dtoa_r+0x338>
    1ea6:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1eaa:	464b      	mov	r3, r9
    1eac:	f8cd 9020 	str.w	r9, [sp, #32]
    1eb0:	e77e      	b.n	1db0 <_dtoa_r+0x258>
    1eb2:	3101      	adds	r1, #1
    1eb4:	0052      	lsls	r2, r2, #1
    1eb6:	6071      	str	r1, [r6, #4]
    1eb8:	e77e      	b.n	1db8 <_dtoa_r+0x260>
    1eba:	2702      	movs	r7, #2
    1ebc:	e7ac      	b.n	1e18 <_dtoa_r+0x2c0>
    1ebe:	07e1      	lsls	r1, r4, #31
    1ec0:	d508      	bpl.n	1ed4 <_dtoa_r+0x37c>
    1ec2:	3701      	adds	r7, #1
    1ec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1ec8:	e9d6 2300 	ldrd	r2, r3, [r6]
    1ecc:	f7fe fb00 	bl	4d0 <__aeabi_dmul>
    1ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1ed4:	1064      	asrs	r4, r4, #1
    1ed6:	3608      	adds	r6, #8
    1ed8:	e79f      	b.n	1e1a <_dtoa_r+0x2c2>
    1eda:	f000 80a5 	beq.w	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    1ede:	f1ca 0400 	rsb	r4, sl, #0
    1ee2:	4ba3      	ldr	r3, [pc, #652]	; (2170 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x170>)
    1ee4:	4ea3      	ldr	r6, [pc, #652]	; (2174 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x174>)
    1ee6:	2702      	movs	r7, #2
    1ee8:	f004 020f 	and.w	r2, r4, #15
    1eec:	1124      	asrs	r4, r4, #4
    1eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1ef2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1efa:	f7fe fae9 	bl	4d0 <__aeabi_dmul>
    1efe:	2300      	movs	r3, #0
    1f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1f04:	2c00      	cmp	r4, #0
    1f06:	f040 8084 	bne.w	2012 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12>
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d18d      	bne.n	1e2a <_dtoa_r+0x2d2>
    1f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1f10:	2b00      	cmp	r3, #0
    1f12:	f000 808b 	beq.w	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1f16:	2200      	movs	r2, #0
    1f18:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1f1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1f20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1f24:	4b94      	ldr	r3, [pc, #592]	; (2178 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x178>)
    1f26:	f7fe fd45 	bl	9b4 <__aeabi_dcmplt>
    1f2a:	2800      	cmp	r0, #0
    1f2c:	d07e      	beq.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1f2e:	9b08      	ldr	r3, [sp, #32]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d07b      	beq.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1f34:	f1b9 0f00 	cmp.w	r9, #0
    1f38:	dd38      	ble.n	1fac <_dtoa_r+0x454>
    1f3a:	f10a 38ff 	add.w	r8, sl, #4294967295
    1f3e:	3701      	adds	r7, #1
    1f40:	464c      	mov	r4, r9
    1f42:	2200      	movs	r2, #0
    1f44:	4b8d      	ldr	r3, [pc, #564]	; (217c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x17c>)
    1f46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1f4a:	f7fe fac1 	bl	4d0 <__aeabi_dmul>
    1f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1f52:	4638      	mov	r0, r7
    1f54:	f7fe fa52 	bl	3fc <__aeabi_i2d>
    1f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1f5c:	f7fe fab8 	bl	4d0 <__aeabi_dmul>
    1f60:	2200      	movs	r2, #0
    1f62:	4b87      	ldr	r3, [pc, #540]	; (2180 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x180>)
    1f64:	f7fe f8fe 	bl	164 <__adddf3>
    1f68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    1f6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f70:	9611      	str	r6, [sp, #68]	; 0x44
    1f72:	2c00      	cmp	r4, #0
    1f74:	d15d      	bne.n	2032 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32>
    1f76:	2200      	movs	r2, #0
    1f78:	4b82      	ldr	r3, [pc, #520]	; (2184 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x184>)
    1f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f7e:	f7fe f8ef 	bl	160 <__aeabi_dsub>
    1f82:	4602      	mov	r2, r0
    1f84:	460b      	mov	r3, r1
    1f86:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1f8c:	4633      	mov	r3, r6
    1f8e:	f7fe fd2f 	bl	9f0 <__aeabi_dcmpgt>
    1f92:	2800      	cmp	r0, #0
    1f94:	f040 8294 	bne.w	24c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c0>
    1f98:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1f9a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fa2:	f7fe fd07 	bl	9b4 <__aeabi_dcmplt>
    1fa6:	2800      	cmp	r0, #0
    1fa8:	f040 8288 	bne.w	24bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4bc>
    1fac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1fb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1fb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	f2c0 814f 	blt.w	225a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x25a>
    1fbc:	f1ba 0f0e 	cmp.w	sl, #14
    1fc0:	f300 814b 	bgt.w	225a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x25a>
    1fc4:	4b6a      	ldr	r3, [pc, #424]	; (2170 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x170>)
    1fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1fca:	e9d3 3400 	ldrd	r3, r4, [r3]
    1fce:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1fd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	f280 80d9 	bge.w	218c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18c>
    1fda:	9b08      	ldr	r3, [sp, #32]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	f300 80d5 	bgt.w	218c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18c>
    1fe2:	f040 826a 	bne.w	24ba <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ba>
    1fe6:	2200      	movs	r2, #0
    1fe8:	4b66      	ldr	r3, [pc, #408]	; (2184 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x184>)
    1fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1fee:	f7fe fa6f 	bl	4d0 <__aeabi_dmul>
    1ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1ff6:	f7fe fcf1 	bl	9dc <__aeabi_dcmpge>
    1ffa:	9c08      	ldr	r4, [sp, #32]
    1ffc:	4626      	mov	r6, r4
    1ffe:	2800      	cmp	r0, #0
    2000:	f040 8240 	bne.w	2484 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x484>
    2004:	9f03      	ldr	r7, [sp, #12]
    2006:	2331      	movs	r3, #49	; 0x31
    2008:	f10a 0a01 	add.w	sl, sl, #1
    200c:	f807 3b01 	strb.w	r3, [r7], #1
    2010:	e23c      	b.n	248c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48c>
    2012:	07e2      	lsls	r2, r4, #31
    2014:	d505      	bpl.n	2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
    2016:	3701      	adds	r7, #1
    2018:	e9d6 2300 	ldrd	r2, r3, [r6]
    201c:	f7fe fa58 	bl	4d0 <__aeabi_dmul>
    2020:	2301      	movs	r3, #1
    2022:	1064      	asrs	r4, r4, #1
    2024:	3608      	adds	r6, #8
    2026:	e76d      	b.n	1f04 <_dtoa_r+0x3ac>
    2028:	2702      	movs	r7, #2
    202a:	e770      	b.n	1f0e <_dtoa_r+0x3b6>
    202c:	46d0      	mov	r8, sl
    202e:	9c08      	ldr	r4, [sp, #32]
    2030:	e78f      	b.n	1f52 <_dtoa_r+0x3fa>
    2032:	9903      	ldr	r1, [sp, #12]
    2034:	4b4e      	ldr	r3, [pc, #312]	; (2170 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x170>)
    2036:	4421      	add	r1, r4
    2038:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    203c:	9112      	str	r1, [sp, #72]	; 0x48
    203e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2040:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    2044:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    2048:	2900      	cmp	r1, #0
    204a:	d046      	beq.n	20da <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xda>
    204c:	2000      	movs	r0, #0
    204e:	494e      	ldr	r1, [pc, #312]	; (2188 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x188>)
    2050:	f7fe fb68 	bl	724 <__aeabi_ddiv>
    2054:	463b      	mov	r3, r7
    2056:	4632      	mov	r2, r6
    2058:	f7fe f882 	bl	160 <__aeabi_dsub>
    205c:	9f03      	ldr	r7, [sp, #12]
    205e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2066:	f7fe fccd 	bl	a04 <__aeabi_d2iz>
    206a:	4604      	mov	r4, r0
    206c:	f7fe f9c6 	bl	3fc <__aeabi_i2d>
    2070:	4602      	mov	r2, r0
    2072:	460b      	mov	r3, r1
    2074:	3430      	adds	r4, #48	; 0x30
    2076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    207a:	f7fe f871 	bl	160 <__aeabi_dsub>
    207e:	4602      	mov	r2, r0
    2080:	460b      	mov	r3, r1
    2082:	f807 4b01 	strb.w	r4, [r7], #1
    2086:	e9cd 2304 	strd	r2, r3, [sp, #16]
    208a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    208e:	f7fe fc91 	bl	9b4 <__aeabi_dcmplt>
    2092:	2800      	cmp	r0, #0
    2094:	d164      	bne.n	2160 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x160>
    2096:	2000      	movs	r0, #0
    2098:	4937      	ldr	r1, [pc, #220]	; (2178 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x178>)
    209a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    209e:	f7fe f85f 	bl	160 <__aeabi_dsub>
    20a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    20a6:	f7fe fc85 	bl	9b4 <__aeabi_dcmplt>
    20aa:	2800      	cmp	r0, #0
    20ac:	f040 80b4 	bne.w	2218 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x218>
    20b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    20b2:	429f      	cmp	r7, r3
    20b4:	f43f af7a 	beq.w	1fac <_dtoa_r+0x454>
    20b8:	2200      	movs	r2, #0
    20ba:	4b30      	ldr	r3, [pc, #192]	; (217c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x17c>)
    20bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    20c0:	f7fe fa06 	bl	4d0 <__aeabi_dmul>
    20c4:	2200      	movs	r2, #0
    20c6:	4b2d      	ldr	r3, [pc, #180]	; (217c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x17c>)
    20c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    20cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    20d0:	f7fe f9fe 	bl	4d0 <__aeabi_dmul>
    20d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    20d8:	e7c3      	b.n	2062 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x62>
    20da:	4630      	mov	r0, r6
    20dc:	4639      	mov	r1, r7
    20de:	f7fe f9f7 	bl	4d0 <__aeabi_dmul>
    20e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    20e4:	9c03      	ldr	r4, [sp, #12]
    20e6:	9314      	str	r3, [sp, #80]	; 0x50
    20e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    20ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    20f0:	f7fe fc88 	bl	a04 <__aeabi_d2iz>
    20f4:	9015      	str	r0, [sp, #84]	; 0x54
    20f6:	f7fe f981 	bl	3fc <__aeabi_i2d>
    20fa:	4602      	mov	r2, r0
    20fc:	460b      	mov	r3, r1
    20fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2102:	f7fe f82d 	bl	160 <__aeabi_dsub>
    2106:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2108:	4606      	mov	r6, r0
    210a:	460f      	mov	r7, r1
    210c:	3330      	adds	r3, #48	; 0x30
    210e:	2200      	movs	r2, #0
    2110:	f804 3b01 	strb.w	r3, [r4], #1
    2114:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2116:	429c      	cmp	r4, r3
    2118:	d124      	bne.n	2164 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x164>
    211a:	4b1b      	ldr	r3, [pc, #108]	; (2188 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x188>)
    211c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2120:	f7fe f820 	bl	164 <__adddf3>
    2124:	4602      	mov	r2, r0
    2126:	460b      	mov	r3, r1
    2128:	4630      	mov	r0, r6
    212a:	4639      	mov	r1, r7
    212c:	f7fe fc60 	bl	9f0 <__aeabi_dcmpgt>
    2130:	2800      	cmp	r0, #0
    2132:	d170      	bne.n	2216 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x216>
    2134:	2000      	movs	r0, #0
    2136:	4914      	ldr	r1, [pc, #80]	; (2188 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x188>)
    2138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    213c:	f7fe f810 	bl	160 <__aeabi_dsub>
    2140:	4602      	mov	r2, r0
    2142:	460b      	mov	r3, r1
    2144:	4630      	mov	r0, r6
    2146:	4639      	mov	r1, r7
    2148:	f7fe fc34 	bl	9b4 <__aeabi_dcmplt>
    214c:	2800      	cmp	r0, #0
    214e:	f43f af2d 	beq.w	1fac <_dtoa_r+0x454>
    2152:	9f14      	ldr	r7, [sp, #80]	; 0x50
    2154:	1e7b      	subs	r3, r7, #1
    2156:	9314      	str	r3, [sp, #80]	; 0x50
    2158:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    215c:	2b30      	cmp	r3, #48	; 0x30
    215e:	d0f8      	beq.n	2152 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x152>
    2160:	46c2      	mov	sl, r8
    2162:	e048      	b.n	21f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f6>
    2164:	4b05      	ldr	r3, [pc, #20]	; (217c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x17c>)
    2166:	f7fe f9b3 	bl	4d0 <__aeabi_dmul>
    216a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    216e:	e7bd      	b.n	20ec <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xec>
    2170:	00062458 	.word	0x00062458
    2174:	00062430 	.word	0x00062430
    2178:	3ff00000 	.word	0x3ff00000
    217c:	40240000 	.word	0x40240000
    2180:	401c0000 	.word	0x401c0000
    2184:	40140000 	.word	0x40140000
    2188:	3fe00000 	.word	0x3fe00000
    218c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    2190:	9f03      	ldr	r7, [sp, #12]
    2192:	4640      	mov	r0, r8
    2194:	4649      	mov	r1, r9
    2196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    219a:	f7fe fac3 	bl	724 <__aeabi_ddiv>
    219e:	f7fe fc31 	bl	a04 <__aeabi_d2iz>
    21a2:	4604      	mov	r4, r0
    21a4:	f7fe f92a 	bl	3fc <__aeabi_i2d>
    21a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    21ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    21b0:	f7fe f98e 	bl	4d0 <__aeabi_dmul>
    21b4:	460b      	mov	r3, r1
    21b6:	4602      	mov	r2, r0
    21b8:	4649      	mov	r1, r9
    21ba:	4640      	mov	r0, r8
    21bc:	f7fd ffd0 	bl	160 <__aeabi_dsub>
    21c0:	f807 6b01 	strb.w	r6, [r7], #1
    21c4:	9e03      	ldr	r6, [sp, #12]
    21c6:	9b08      	ldr	r3, [sp, #32]
    21c8:	1bbe      	subs	r6, r7, r6
    21ca:	42b3      	cmp	r3, r6
    21cc:	d138      	bne.n	2240 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x240>
    21ce:	4602      	mov	r2, r0
    21d0:	460b      	mov	r3, r1
    21d2:	f7fd ffc7 	bl	164 <__adddf3>
    21d6:	4680      	mov	r8, r0
    21d8:	4689      	mov	r9, r1
    21da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    21de:	f7fe fc07 	bl	9f0 <__aeabi_dcmpgt>
    21e2:	bb58      	cbnz	r0, 223c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23c>
    21e4:	4640      	mov	r0, r8
    21e6:	4649      	mov	r1, r9
    21e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    21ec:	f7fe fbd8 	bl	9a0 <__aeabi_dcmpeq>
    21f0:	b108      	cbz	r0, 21f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f6>
    21f2:	07e1      	lsls	r1, r4, #31
    21f4:	d422      	bmi.n	223c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23c>
    21f6:	4628      	mov	r0, r5
    21f8:	4659      	mov	r1, fp
    21fa:	f00e f918 	bl	1042e <_Bfree>
    21fe:	2300      	movs	r3, #0
    2200:	f10a 0001 	add.w	r0, sl, #1
    2204:	703b      	strb	r3, [r7, #0]
    2206:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2208:	6018      	str	r0, [r3, #0]
    220a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    220c:	2b00      	cmp	r3, #0
    220e:	f43f acea 	beq.w	1be6 <_dtoa_r+0x8e>
    2212:	601f      	str	r7, [r3, #0]
    2214:	e4e7      	b.n	1be6 <_dtoa_r+0x8e>
    2216:	4627      	mov	r7, r4
    2218:	463b      	mov	r3, r7
    221a:	461f      	mov	r7, r3
    221c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2220:	2a39      	cmp	r2, #57	; 0x39
    2222:	d107      	bne.n	2234 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x234>
    2224:	9a03      	ldr	r2, [sp, #12]
    2226:	429a      	cmp	r2, r3
    2228:	d1f7      	bne.n	221a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x21a>
    222a:	2230      	movs	r2, #48	; 0x30
    222c:	9903      	ldr	r1, [sp, #12]
    222e:	f108 0801 	add.w	r8, r8, #1
    2232:	700a      	strb	r2, [r1, #0]
    2234:	781a      	ldrb	r2, [r3, #0]
    2236:	3201      	adds	r2, #1
    2238:	701a      	strb	r2, [r3, #0]
    223a:	e791      	b.n	2160 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x160>
    223c:	46d0      	mov	r8, sl
    223e:	e7eb      	b.n	2218 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x218>
    2240:	2200      	movs	r2, #0
    2242:	4ba1      	ldr	r3, [pc, #644]	; (24c8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c8>)
    2244:	f7fe f944 	bl	4d0 <__aeabi_dmul>
    2248:	2200      	movs	r2, #0
    224a:	2300      	movs	r3, #0
    224c:	4680      	mov	r8, r0
    224e:	4689      	mov	r9, r1
    2250:	f7fe fba6 	bl	9a0 <__aeabi_dcmpeq>
    2254:	2800      	cmp	r0, #0
    2256:	d09c      	beq.n	2192 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x192>
    2258:	e7cd      	b.n	21f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f6>
    225a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    225c:	2a00      	cmp	r2, #0
    225e:	f000 80cc 	beq.w	23fa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3fa>
    2262:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2264:	2a01      	cmp	r2, #1
    2266:	f300 80af 	bgt.w	23c8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c8>
    226a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    226c:	2a00      	cmp	r2, #0
    226e:	f000 80a7 	beq.w	23c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c0>
    2272:	f203 4333 	addw	r3, r3, #1075	; 0x433
    2276:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2278:	9f06      	ldr	r7, [sp, #24]
    227a:	9a06      	ldr	r2, [sp, #24]
    227c:	2101      	movs	r1, #1
    227e:	4628      	mov	r0, r5
    2280:	441a      	add	r2, r3
    2282:	9206      	str	r2, [sp, #24]
    2284:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2286:	441a      	add	r2, r3
    2288:	9209      	str	r2, [sp, #36]	; 0x24
    228a:	f00e f974 	bl	10576 <__i2b>
    228e:	4606      	mov	r6, r0
    2290:	2f00      	cmp	r7, #0
    2292:	dd0c      	ble.n	22ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ae>
    2294:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2296:	2b00      	cmp	r3, #0
    2298:	dd09      	ble.n	22ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ae>
    229a:	42bb      	cmp	r3, r7
    229c:	9a06      	ldr	r2, [sp, #24]
    229e:	bfa8      	it	ge
    22a0:	463b      	movge	r3, r7
    22a2:	1ad2      	subs	r2, r2, r3
    22a4:	1aff      	subs	r7, r7, r3
    22a6:	9206      	str	r2, [sp, #24]
    22a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    22aa:	1ad3      	subs	r3, r2, r3
    22ac:	9309      	str	r3, [sp, #36]	; 0x24
    22ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22b0:	b1f3      	cbz	r3, 22f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2f0>
    22b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    22b4:	2b00      	cmp	r3, #0
    22b6:	f000 80a4 	beq.w	2402 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x402>
    22ba:	2c00      	cmp	r4, #0
    22bc:	dd10      	ble.n	22e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e0>
    22be:	4631      	mov	r1, r6
    22c0:	4622      	mov	r2, r4
    22c2:	4628      	mov	r0, r5
    22c4:	f00a fc6c 	bl	cba0 <__pow5mult>
    22c8:	465a      	mov	r2, fp
    22ca:	4601      	mov	r1, r0
    22cc:	4606      	mov	r6, r0
    22ce:	4628      	mov	r0, r5
    22d0:	f00e f95a 	bl	10588 <__multiply>
    22d4:	4680      	mov	r8, r0
    22d6:	4659      	mov	r1, fp
    22d8:	4628      	mov	r0, r5
    22da:	46c3      	mov	fp, r8
    22dc:	f00e f8a7 	bl	1042e <_Bfree>
    22e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22e2:	1b1a      	subs	r2, r3, r4
    22e4:	d004      	beq.n	22f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2f0>
    22e6:	4659      	mov	r1, fp
    22e8:	4628      	mov	r0, r5
    22ea:	f00a fc59 	bl	cba0 <__pow5mult>
    22ee:	4683      	mov	fp, r0
    22f0:	2101      	movs	r1, #1
    22f2:	4628      	mov	r0, r5
    22f4:	f00e f93f 	bl	10576 <__i2b>
    22f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    22fa:	4604      	mov	r4, r0
    22fc:	2b00      	cmp	r3, #0
    22fe:	f340 8082 	ble.w	2406 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x406>
    2302:	461a      	mov	r2, r3
    2304:	4601      	mov	r1, r0
    2306:	4628      	mov	r0, r5
    2308:	f00a fc4a 	bl	cba0 <__pow5mult>
    230c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    230e:	4604      	mov	r4, r0
    2310:	2b01      	cmp	r3, #1
    2312:	dd7b      	ble.n	240c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40c>
    2314:	f04f 0800 	mov.w	r8, #0
    2318:	6923      	ldr	r3, [r4, #16]
    231a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    231e:	6918      	ldr	r0, [r3, #16]
    2320:	f00e f8db 	bl	104da <__hi0bits>
    2324:	f1c0 0020 	rsb	r0, r0, #32
    2328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    232a:	4418      	add	r0, r3
    232c:	f010 001f 	ands.w	r0, r0, #31
    2330:	f000 808d 	beq.w	244e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44e>
    2334:	f1c0 0320 	rsb	r3, r0, #32
    2338:	2b04      	cmp	r3, #4
    233a:	f340 8086 	ble.w	244a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44a>
    233e:	f1c0 001c 	rsb	r0, r0, #28
    2342:	9b06      	ldr	r3, [sp, #24]
    2344:	4407      	add	r7, r0
    2346:	4403      	add	r3, r0
    2348:	9306      	str	r3, [sp, #24]
    234a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    234c:	4403      	add	r3, r0
    234e:	9309      	str	r3, [sp, #36]	; 0x24
    2350:	9b06      	ldr	r3, [sp, #24]
    2352:	2b00      	cmp	r3, #0
    2354:	dd05      	ble.n	2362 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x362>
    2356:	4659      	mov	r1, fp
    2358:	461a      	mov	r2, r3
    235a:	4628      	mov	r0, r5
    235c:	f00e f9af 	bl	106be <__lshift>
    2360:	4683      	mov	fp, r0
    2362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2364:	2b00      	cmp	r3, #0
    2366:	dd05      	ble.n	2374 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x374>
    2368:	4621      	mov	r1, r4
    236a:	461a      	mov	r2, r3
    236c:	4628      	mov	r0, r5
    236e:	f00e f9a6 	bl	106be <__lshift>
    2372:	4604      	mov	r4, r0
    2374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2376:	2b00      	cmp	r3, #0
    2378:	d06b      	beq.n	2452 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x452>
    237a:	4621      	mov	r1, r4
    237c:	4658      	mov	r0, fp
    237e:	f00e f9fd 	bl	1077c <__mcmp>
    2382:	2800      	cmp	r0, #0
    2384:	da65      	bge.n	2452 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x452>
    2386:	2300      	movs	r3, #0
    2388:	4659      	mov	r1, fp
    238a:	220a      	movs	r2, #10
    238c:	4628      	mov	r0, r5
    238e:	f00e f865 	bl	1045c <__multadd>
    2392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2394:	f10a 3aff 	add.w	sl, sl, #4294967295
    2398:	4683      	mov	fp, r0
    239a:	2b00      	cmp	r3, #0
    239c:	f000 818b 	beq.w	26b6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6b6>
    23a0:	4631      	mov	r1, r6
    23a2:	2300      	movs	r3, #0
    23a4:	220a      	movs	r2, #10
    23a6:	4628      	mov	r0, r5
    23a8:	f00e f858 	bl	1045c <__multadd>
    23ac:	f1b9 0f00 	cmp.w	r9, #0
    23b0:	4606      	mov	r6, r0
    23b2:	f300 8091 	bgt.w	24d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4d8>
    23b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    23b8:	2b02      	cmp	r3, #2
    23ba:	f340 808d 	ble.w	24d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4d8>
    23be:	e050      	b.n	2462 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x462>
    23c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    23c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    23c6:	e756      	b.n	2276 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x276>
    23c8:	9b08      	ldr	r3, [sp, #32]
    23ca:	1e5c      	subs	r4, r3, #1
    23cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23ce:	42a3      	cmp	r3, r4
    23d0:	bfb7      	itett	lt
    23d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    23d4:	1b1c      	subge	r4, r3, r4
    23d6:	940a      	strlt	r4, [sp, #40]	; 0x28
    23d8:	1ae2      	sublt	r2, r4, r3
    23da:	bfbf      	itttt	lt
    23dc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    23de:	2400      	movlt	r4, #0
    23e0:	189b      	addlt	r3, r3, r2
    23e2:	930e      	strlt	r3, [sp, #56]	; 0x38
    23e4:	9b08      	ldr	r3, [sp, #32]
    23e6:	2b00      	cmp	r3, #0
    23e8:	bfbb      	ittet	lt
    23ea:	9b06      	ldrlt	r3, [sp, #24]
    23ec:	9a08      	ldrlt	r2, [sp, #32]
    23ee:	9f06      	ldrge	r7, [sp, #24]
    23f0:	1a9f      	sublt	r7, r3, r2
    23f2:	bfac      	ite	ge
    23f4:	9b08      	ldrge	r3, [sp, #32]
    23f6:	2300      	movlt	r3, #0
    23f8:	e73f      	b.n	227a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x27a>
    23fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    23fc:	9f06      	ldr	r7, [sp, #24]
    23fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2400:	e746      	b.n	2290 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x290>
    2402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2404:	e76f      	b.n	22e6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e6>
    2406:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2408:	2b01      	cmp	r3, #1
    240a:	dc19      	bgt.n	2440 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x440>
    240c:	9b04      	ldr	r3, [sp, #16]
    240e:	b9bb      	cbnz	r3, 2440 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x440>
    2410:	9b05      	ldr	r3, [sp, #20]
    2412:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2416:	b99b      	cbnz	r3, 2440 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x440>
    2418:	9b05      	ldr	r3, [sp, #20]
    241a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    241e:	0d1b      	lsrs	r3, r3, #20
    2420:	051b      	lsls	r3, r3, #20
    2422:	b183      	cbz	r3, 2446 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x446>
    2424:	9b06      	ldr	r3, [sp, #24]
    2426:	f04f 0801 	mov.w	r8, #1
    242a:	3301      	adds	r3, #1
    242c:	9306      	str	r3, [sp, #24]
    242e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2430:	3301      	adds	r3, #1
    2432:	9309      	str	r3, [sp, #36]	; 0x24
    2434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2436:	2b00      	cmp	r3, #0
    2438:	f47f af6e 	bne.w	2318 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x318>
    243c:	2001      	movs	r0, #1
    243e:	e773      	b.n	2328 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x328>
    2440:	f04f 0800 	mov.w	r8, #0
    2444:	e7f6      	b.n	2434 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x434>
    2446:	4698      	mov	r8, r3
    2448:	e7f4      	b.n	2434 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x434>
    244a:	d081      	beq.n	2350 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x350>
    244c:	4618      	mov	r0, r3
    244e:	301c      	adds	r0, #28
    2450:	e777      	b.n	2342 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x342>
    2452:	9b08      	ldr	r3, [sp, #32]
    2454:	2b00      	cmp	r3, #0
    2456:	dc39      	bgt.n	24cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4cc>
    2458:	9b22      	ldr	r3, [sp, #136]	; 0x88
    245a:	2b02      	cmp	r3, #2
    245c:	dd36      	ble.n	24cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4cc>
    245e:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2462:	f1b9 0f00 	cmp.w	r9, #0
    2466:	d10d      	bne.n	2484 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x484>
    2468:	4621      	mov	r1, r4
    246a:	464b      	mov	r3, r9
    246c:	2205      	movs	r2, #5
    246e:	4628      	mov	r0, r5
    2470:	f00d fff4 	bl	1045c <__multadd>
    2474:	4601      	mov	r1, r0
    2476:	4604      	mov	r4, r0
    2478:	4658      	mov	r0, fp
    247a:	f00e f97f 	bl	1077c <__mcmp>
    247e:	2800      	cmp	r0, #0
    2480:	f73f adc0 	bgt.w	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    2484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2486:	9f03      	ldr	r7, [sp, #12]
    2488:	ea6f 0a03 	mvn.w	sl, r3
    248c:	f04f 0800 	mov.w	r8, #0
    2490:	4621      	mov	r1, r4
    2492:	4628      	mov	r0, r5
    2494:	f00d ffcb 	bl	1042e <_Bfree>
    2498:	2e00      	cmp	r6, #0
    249a:	f43f aeac 	beq.w	21f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f6>
    249e:	f1b8 0f00 	cmp.w	r8, #0
    24a2:	d005      	beq.n	24b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4b0>
    24a4:	45b0      	cmp	r8, r6
    24a6:	d003      	beq.n	24b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4b0>
    24a8:	4641      	mov	r1, r8
    24aa:	4628      	mov	r0, r5
    24ac:	f00d ffbf 	bl	1042e <_Bfree>
    24b0:	4631      	mov	r1, r6
    24b2:	4628      	mov	r0, r5
    24b4:	f00d ffbb 	bl	1042e <_Bfree>
    24b8:	e69d      	b.n	21f6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f6>
    24ba:	2400      	movs	r4, #0
    24bc:	4626      	mov	r6, r4
    24be:	e7e1      	b.n	2484 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x484>
    24c0:	46c2      	mov	sl, r8
    24c2:	4626      	mov	r6, r4
    24c4:	e59e      	b.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    24c6:	bf00      	nop
    24c8:	40240000 	.word	0x40240000
    24cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    24ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
    24d2:	2b00      	cmp	r3, #0
    24d4:	f000 80f6 	beq.w	26c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c4>
    24d8:	2f00      	cmp	r7, #0
    24da:	dd05      	ble.n	24e8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e8>
    24dc:	4631      	mov	r1, r6
    24de:	463a      	mov	r2, r7
    24e0:	4628      	mov	r0, r5
    24e2:	f00e f8ec 	bl	106be <__lshift>
    24e6:	4606      	mov	r6, r0
    24e8:	f1b8 0f00 	cmp.w	r8, #0
    24ec:	d055      	beq.n	259a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x59a>
    24ee:	6871      	ldr	r1, [r6, #4]
    24f0:	4628      	mov	r0, r5
    24f2:	f00d ff68 	bl	103c6 <_Balloc>
    24f6:	6932      	ldr	r2, [r6, #16]
    24f8:	4607      	mov	r7, r0
    24fa:	f106 010c 	add.w	r1, r6, #12
    24fe:	3202      	adds	r2, #2
    2500:	300c      	adds	r0, #12
    2502:	0092      	lsls	r2, r2, #2
    2504:	f00d fcbc 	bl	fe80 <memcpy>
    2508:	2201      	movs	r2, #1
    250a:	4639      	mov	r1, r7
    250c:	4628      	mov	r0, r5
    250e:	f00e f8d6 	bl	106be <__lshift>
    2512:	9b03      	ldr	r3, [sp, #12]
    2514:	46b0      	mov	r8, r6
    2516:	4606      	mov	r6, r0
    2518:	3301      	adds	r3, #1
    251a:	9308      	str	r3, [sp, #32]
    251c:	9b03      	ldr	r3, [sp, #12]
    251e:	444b      	add	r3, r9
    2520:	930a      	str	r3, [sp, #40]	; 0x28
    2522:	9b04      	ldr	r3, [sp, #16]
    2524:	f003 0301 	and.w	r3, r3, #1
    2528:	9309      	str	r3, [sp, #36]	; 0x24
    252a:	9b08      	ldr	r3, [sp, #32]
    252c:	4621      	mov	r1, r4
    252e:	4658      	mov	r0, fp
    2530:	3b01      	subs	r3, #1
    2532:	9304      	str	r3, [sp, #16]
    2534:	f00d fe5f 	bl	101f6 <quorem>
    2538:	4603      	mov	r3, r0
    253a:	4641      	mov	r1, r8
    253c:	9006      	str	r0, [sp, #24]
    253e:	4658      	mov	r0, fp
    2540:	3330      	adds	r3, #48	; 0x30
    2542:	930b      	str	r3, [sp, #44]	; 0x2c
    2544:	f00e f91a 	bl	1077c <__mcmp>
    2548:	4632      	mov	r2, r6
    254a:	4681      	mov	r9, r0
    254c:	4621      	mov	r1, r4
    254e:	4628      	mov	r0, r5
    2550:	f00e f92f 	bl	107b2 <__mdiff>
    2554:	68c2      	ldr	r2, [r0, #12]
    2556:	4607      	mov	r7, r0
    2558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    255a:	bb02      	cbnz	r2, 259e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x59e>
    255c:	4601      	mov	r1, r0
    255e:	4658      	mov	r0, fp
    2560:	f00e f90c 	bl	1077c <__mcmp>
    2564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2566:	4602      	mov	r2, r0
    2568:	4639      	mov	r1, r7
    256a:	4628      	mov	r0, r5
    256c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2570:	f00d ff5d 	bl	1042e <_Bfree>
    2574:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2578:	9f08      	ldr	r7, [sp, #32]
    257a:	ea43 0102 	orr.w	r1, r3, r2
    257e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2580:	430b      	orrs	r3, r1
    2582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2584:	d10d      	bne.n	25a2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5a2>
    2586:	2b39      	cmp	r3, #57	; 0x39
    2588:	d029      	beq.n	25de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5de>
    258a:	f1b9 0f00 	cmp.w	r9, #0
    258e:	dd01      	ble.n	2594 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x594>
    2590:	9b06      	ldr	r3, [sp, #24]
    2592:	3331      	adds	r3, #49	; 0x31
    2594:	9a04      	ldr	r2, [sp, #16]
    2596:	7013      	strb	r3, [r2, #0]
    2598:	e77a      	b.n	2490 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x490>
    259a:	4630      	mov	r0, r6
    259c:	e7b9      	b.n	2512 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x512>
    259e:	2201      	movs	r2, #1
    25a0:	e7e2      	b.n	2568 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x568>
    25a2:	f1b9 0f00 	cmp.w	r9, #0
    25a6:	db06      	blt.n	25b6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5b6>
    25a8:	9922      	ldr	r1, [sp, #136]	; 0x88
    25aa:	ea41 0909 	orr.w	r9, r1, r9
    25ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    25b0:	ea59 0101 	orrs.w	r1, r9, r1
    25b4:	d120      	bne.n	25f8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5f8>
    25b6:	2a00      	cmp	r2, #0
    25b8:	ddec      	ble.n	2594 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x594>
    25ba:	4659      	mov	r1, fp
    25bc:	2201      	movs	r2, #1
    25be:	4628      	mov	r0, r5
    25c0:	9308      	str	r3, [sp, #32]
    25c2:	f00e f87c 	bl	106be <__lshift>
    25c6:	4621      	mov	r1, r4
    25c8:	4683      	mov	fp, r0
    25ca:	f00e f8d7 	bl	1077c <__mcmp>
    25ce:	2800      	cmp	r0, #0
    25d0:	9b08      	ldr	r3, [sp, #32]
    25d2:	dc02      	bgt.n	25da <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5da>
    25d4:	d1de      	bne.n	2594 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x594>
    25d6:	07da      	lsls	r2, r3, #31
    25d8:	d5dc      	bpl.n	2594 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x594>
    25da:	2b39      	cmp	r3, #57	; 0x39
    25dc:	d1d8      	bne.n	2590 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x590>
    25de:	2339      	movs	r3, #57	; 0x39
    25e0:	9a04      	ldr	r2, [sp, #16]
    25e2:	7013      	strb	r3, [r2, #0]
    25e4:	463b      	mov	r3, r7
    25e6:	461f      	mov	r7, r3
    25e8:	3b01      	subs	r3, #1
    25ea:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    25ee:	2a39      	cmp	r2, #57	; 0x39
    25f0:	d050      	beq.n	2694 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x694>
    25f2:	3201      	adds	r2, #1
    25f4:	701a      	strb	r2, [r3, #0]
    25f6:	e74b      	b.n	2490 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x490>
    25f8:	2a00      	cmp	r2, #0
    25fa:	dd03      	ble.n	2604 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x604>
    25fc:	2b39      	cmp	r3, #57	; 0x39
    25fe:	d0ee      	beq.n	25de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5de>
    2600:	3301      	adds	r3, #1
    2602:	e7c7      	b.n	2594 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x594>
    2604:	9a08      	ldr	r2, [sp, #32]
    2606:	990a      	ldr	r1, [sp, #40]	; 0x28
    2608:	f802 3c01 	strb.w	r3, [r2, #-1]
    260c:	428a      	cmp	r2, r1
    260e:	d02a      	beq.n	2666 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x666>
    2610:	4659      	mov	r1, fp
    2612:	2300      	movs	r3, #0
    2614:	220a      	movs	r2, #10
    2616:	4628      	mov	r0, r5
    2618:	f00d ff20 	bl	1045c <__multadd>
    261c:	45b0      	cmp	r8, r6
    261e:	4683      	mov	fp, r0
    2620:	f04f 0300 	mov.w	r3, #0
    2624:	f04f 020a 	mov.w	r2, #10
    2628:	4641      	mov	r1, r8
    262a:	4628      	mov	r0, r5
    262c:	d107      	bne.n	263e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x63e>
    262e:	f00d ff15 	bl	1045c <__multadd>
    2632:	4680      	mov	r8, r0
    2634:	4606      	mov	r6, r0
    2636:	9b08      	ldr	r3, [sp, #32]
    2638:	3301      	adds	r3, #1
    263a:	9308      	str	r3, [sp, #32]
    263c:	e775      	b.n	252a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x52a>
    263e:	f00d ff0d 	bl	1045c <__multadd>
    2642:	4631      	mov	r1, r6
    2644:	4680      	mov	r8, r0
    2646:	2300      	movs	r3, #0
    2648:	220a      	movs	r2, #10
    264a:	4628      	mov	r0, r5
    264c:	f00d ff06 	bl	1045c <__multadd>
    2650:	4606      	mov	r6, r0
    2652:	e7f0      	b.n	2636 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x636>
    2654:	f1b9 0f00 	cmp.w	r9, #0
    2658:	9a03      	ldr	r2, [sp, #12]
    265a:	f04f 0800 	mov.w	r8, #0
    265e:	bfcc      	ite	gt
    2660:	464f      	movgt	r7, r9
    2662:	2701      	movle	r7, #1
    2664:	4417      	add	r7, r2
    2666:	4659      	mov	r1, fp
    2668:	2201      	movs	r2, #1
    266a:	4628      	mov	r0, r5
    266c:	9308      	str	r3, [sp, #32]
    266e:	f00e f826 	bl	106be <__lshift>
    2672:	4621      	mov	r1, r4
    2674:	4683      	mov	fp, r0
    2676:	f00e f881 	bl	1077c <__mcmp>
    267a:	2800      	cmp	r0, #0
    267c:	dcb2      	bgt.n	25e4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e4>
    267e:	d102      	bne.n	2686 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x686>
    2680:	9b08      	ldr	r3, [sp, #32]
    2682:	07db      	lsls	r3, r3, #31
    2684:	d4ae      	bmi.n	25e4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e4>
    2686:	463b      	mov	r3, r7
    2688:	461f      	mov	r7, r3
    268a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    268e:	2a30      	cmp	r2, #48	; 0x30
    2690:	d0fa      	beq.n	2688 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x688>
    2692:	e6fd      	b.n	2490 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x490>
    2694:	9a03      	ldr	r2, [sp, #12]
    2696:	429a      	cmp	r2, r3
    2698:	d1a5      	bne.n	25e6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e6>
    269a:	f10a 0a01 	add.w	sl, sl, #1
    269e:	2331      	movs	r3, #49	; 0x31
    26a0:	e779      	b.n	2596 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x596>
    26a2:	4b13      	ldr	r3, [pc, #76]	; (26f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6f0>)
    26a4:	f7ff babe 	b.w	1c24 <_dtoa_r+0xcc>
    26a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    26aa:	2b00      	cmp	r3, #0
    26ac:	f47f aa96 	bne.w	1bdc <_dtoa_r+0x84>
    26b0:	4b10      	ldr	r3, [pc, #64]	; (26f4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6f4>)
    26b2:	f7ff bab7 	b.w	1c24 <_dtoa_r+0xcc>
    26b6:	f1b9 0f00 	cmp.w	r9, #0
    26ba:	dc03      	bgt.n	26c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c4>
    26bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    26be:	2b02      	cmp	r3, #2
    26c0:	f73f aecf 	bgt.w	2462 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x462>
    26c4:	9f03      	ldr	r7, [sp, #12]
    26c6:	4621      	mov	r1, r4
    26c8:	4658      	mov	r0, fp
    26ca:	f00d fd94 	bl	101f6 <quorem>
    26ce:	9a03      	ldr	r2, [sp, #12]
    26d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
    26d4:	f807 3b01 	strb.w	r3, [r7], #1
    26d8:	1aba      	subs	r2, r7, r2
    26da:	4591      	cmp	r9, r2
    26dc:	ddba      	ble.n	2654 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x654>
    26de:	4659      	mov	r1, fp
    26e0:	2300      	movs	r3, #0
    26e2:	220a      	movs	r2, #10
    26e4:	4628      	mov	r0, r5
    26e6:	f00d feb9 	bl	1045c <__multadd>
    26ea:	4683      	mov	fp, r0
    26ec:	e7eb      	b.n	26c6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c6>
    26ee:	bf00      	nop
    26f0:	0006471d 	.word	0x0006471d
    26f4:	000655ce 	.word	0x000655ce

000026f8 <_Z18ee_serial_callbackc>:
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
  if (c == EE_CMD_TERMINATOR) {
    26f8:	2825      	cmp	r0, #37	; 0x25
void ee_serial_callback(char c) {
    26fa:	b538      	push	{r3, r4, r5, lr}
    26fc:	4603      	mov	r3, r0
    26fe:	4c0a      	ldr	r4, [pc, #40]	; (2728 <_Z18ee_serial_callbackc+0x30>)
    2700:	480a      	ldr	r0, [pc, #40]	; (272c <_Z18ee_serial_callbackc+0x34>)
  if (c == EE_CMD_TERMINATOR) {
    2702:	d106      	bne.n	2712 <_Z18ee_serial_callbackc+0x1a>
    g_cmd_buf[g_cmd_pos] = (char)0;
    2704:	2500      	movs	r5, #0
    2706:	6823      	ldr	r3, [r4, #0]
    2708:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    270a:	f00a fb84 	bl	ce16 <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    270e:	6025      	str	r5, [r4, #0]
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
  }
}
    2710:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = c;
    2712:	6822      	ldr	r2, [r4, #0]
    2714:	5483      	strb	r3, [r0, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    2716:	6823      	ldr	r3, [r4, #0]
    2718:	2b4f      	cmp	r3, #79	; 0x4f
    271a:	bf8e      	itee	hi
    271c:	2350      	movhi	r3, #80	; 0x50
    271e:	6823      	ldrls	r3, [r4, #0]
    2720:	3301      	addls	r3, #1
    2722:	6023      	str	r3, [r4, #0]
}
    2724:	e7f4      	b.n	2710 <_Z18ee_serial_callbackc+0x18>
    2726:	bf00      	nop
    2728:	20000470 	.word	0x20000470
    272c:	20000d80 	.word	0x20000d80

00002730 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2730:	b508      	push	{r3, lr}
  th_serialport_initialize();
    2732:	f00a fb83 	bl	ce3c <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    2736:	f000 fa9f 	bl	2c78 <_Z23th_timestamp_initializev>
  th_final_initialize();
    273a:	f000 fafb 	bl	2d34 <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    273e:	4805      	ldr	r0, [pc, #20]	; (2754 <_Z23ee_benchmark_initializev+0x24>)
    2740:	f00a fb6f 	bl	ce22 <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    2744:	2201      	movs	r2, #1
    2746:	4b04      	ldr	r3, [pc, #16]	; (2758 <_Z23ee_benchmark_initializev+0x28>)
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    2748:	4804      	ldr	r0, [pc, #16]	; (275c <_Z23ee_benchmark_initializev+0x2c>)
  g_state_parser_enabled = true;
    274a:	701a      	strb	r2, [r3, #0]
}
    274c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  th_printf(EE_MSG_READY);
    2750:	f00a bb67 	b.w	ce22 <_Z9th_printfPKcz>
    2754:	00062b70 	.word	0x00062b70
    2758:	20000dd1 	.word	0x20000dd1
    275c:	00062b7e 	.word	0x00062b7e

00002760 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    2760:	b538      	push	{r3, r4, r5, lr}
    2762:	460d      	mov	r5, r1
    2764:	4604      	mov	r4, r0
  th_load_tensor(); /* if necessary */
    2766:	f000 f9ef 	bl	2b48 <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    276a:	4629      	mov	r1, r5
    276c:	4811      	ldr	r0, [pc, #68]	; (27b4 <_Z8ee_inferjj+0x54>)
    276e:	f00a fb58 	bl	ce22 <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    2772:	3d01      	subs	r5, #1
    2774:	d302      	bcc.n	277c <_Z8ee_inferjj+0x1c>
    th_infer(); /* call the API inference function */
    2776:	f000 f9d3 	bl	2b20 <_Z8th_inferv>
  while (n_warmup-- > 0) {
    277a:	e7fa      	b.n	2772 <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    277c:	480e      	ldr	r0, [pc, #56]	; (27b8 <_Z8ee_inferjj+0x58>)
    277e:	f00a fb50 	bl	ce22 <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2782:	4621      	mov	r1, r4
    2784:	480d      	ldr	r0, [pc, #52]	; (27bc <_Z8ee_inferjj+0x5c>)
    2786:	f00a fb4c 	bl	ce22 <_Z9th_printfPKcz>
  th_timestamp();
    278a:	f000 fa63 	bl	2c54 <_Z12th_timestampv>
  th_pre();
    278e:	f00a fb40 	bl	ce12 <_Z6th_prev>
  while (n-- > 0) {
    2792:	3c01      	subs	r4, #1
    2794:	d302      	bcc.n	279c <_Z8ee_inferjj+0x3c>
    th_infer(); /* call the API inference function */
    2796:	f000 f9c3 	bl	2b20 <_Z8th_inferv>
  while (n-- > 0) {
    279a:	e7fa      	b.n	2792 <_Z8ee_inferjj+0x32>
  }
  th_post();
    279c:	f00a fb3a 	bl	ce14 <_Z7th_postv>
  th_timestamp();
    27a0:	f000 fa58 	bl	2c54 <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    27a4:	4806      	ldr	r0, [pc, #24]	; (27c0 <_Z8ee_inferjj+0x60>)
    27a6:	f00a fb3c 	bl	ce22 <_Z9th_printfPKcz>
  th_results();
}
    27aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  th_results();
    27ae:	f000 ba05 	b.w	2bbc <_Z10th_resultsv>
    27b2:	bf00      	nop
    27b4:	00062b88 	.word	0x00062b88
    27b8:	00062b9c 	.word	0x00062b9c
    27bc:	00062bac 	.word	0x00062bac
    27c0:	00062bbf 	.word	0x00062bbf

000027c4 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    27c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    27c8:	2250      	movs	r2, #80	; 0x50
    27ca:	4948      	ldr	r1, [pc, #288]	; (28ec <_Z15ee_buffer_parsePc+0x128>)
    27cc:	f00d fccc 	bl	10168 <strncmp>
    27d0:	2800      	cmp	r0, #0
    27d2:	f040 8088 	bne.w	28e6 <_Z15ee_buffer_parsePc+0x122>
    return EE_ARG_UNCLAIMED;
  }

  p_next = strtok(NULL, EE_CMD_DELIMITER);
    27d6:	4946      	ldr	r1, [pc, #280]	; (28f0 <_Z15ee_buffer_parsePc+0x12c>)
    27d8:	f009 fe90 	bl	c4fc <strtok>

  if (p_next == NULL) {
    27dc:	4605      	mov	r5, r0
    27de:	b918      	cbnz	r0, 27e8 <_Z15ee_buffer_parsePc+0x24>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    27e0:	4844      	ldr	r0, [pc, #272]	; (28f4 <_Z15ee_buffer_parsePc+0x130>)
        return EE_ARG_CLAIMED;
      } else {
        gp_buff[g_buff_pos] = (uint8_t)res;
        g_buff_pos++;
        if (g_buff_pos == g_buff_size) {
          th_printf("m-load-done\r\n");
    27e2:	f00a fb1e 	bl	ce22 <_Z9th_printfPKcz>
          /* Disregard the remainder of the digits when done. */
          return EE_ARG_CLAIMED;
    27e6:	e01d      	b.n	2824 <_Z15ee_buffer_parsePc+0x60>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    27e8:	2250      	movs	r2, #80	; 0x50
    27ea:	4943      	ldr	r1, [pc, #268]	; (28f8 <_Z15ee_buffer_parsePc+0x134>)
    27ec:	f00d fcbc 	bl	10168 <strncmp>
    27f0:	4604      	mov	r4, r0
    27f2:	bb00      	cbnz	r0, 2836 <_Z15ee_buffer_parsePc+0x72>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    27f4:	493e      	ldr	r1, [pc, #248]	; (28f0 <_Z15ee_buffer_parsePc+0x12c>)
    27f6:	f009 fe81 	bl	c4fc <strtok>
    if (p_next == NULL) {
    27fa:	b908      	cbnz	r0, 2800 <_Z15ee_buffer_parsePc+0x3c>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    27fc:	483f      	ldr	r0, [pc, #252]	; (28fc <_Z15ee_buffer_parsePc+0x138>)
    27fe:	e7f0      	b.n	27e2 <_Z15ee_buffer_parsePc+0x1e>
      g_buff_size = (size_t)atoi(p_next);
    2800:	f00d fb2c 	bl	fe5c <atoi>
    2804:	4b3e      	ldr	r3, [pc, #248]	; (2900 <_Z15ee_buffer_parsePc+0x13c>)
    2806:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    2808:	b908      	cbnz	r0, 280e <_Z15ee_buffer_parsePc+0x4a>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    280a:	483e      	ldr	r0, [pc, #248]	; (2904 <_Z15ee_buffer_parsePc+0x140>)
    280c:	e7e9      	b.n	27e2 <_Z15ee_buffer_parsePc+0x1e>
        g_buff_pos = 0;
    280e:	4b3e      	ldr	r3, [pc, #248]	; (2908 <_Z15ee_buffer_parsePc+0x144>)
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    2810:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
        g_buff_pos = 0;
    2814:	601c      	str	r4, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    2816:	d909      	bls.n	282c <_Z15ee_buffer_parsePc+0x68>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    2818:	4601      	mov	r1, r0
    281a:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    281e:	483b      	ldr	r0, [pc, #236]	; (290c <_Z15ee_buffer_parsePc+0x148>)
    2820:	f00a faff 	bl	ce22 <_Z9th_printfPKcz>
    2824:	2000      	movs	r0, #0
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    2826:	b003      	add	sp, #12
    2828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    282c:	4601      	mov	r1, r0
    282e:	4838      	ldr	r0, [pc, #224]	; (2910 <_Z15ee_buffer_parsePc+0x14c>)
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    2830:	f00a faf7 	bl	ce22 <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    2834:	e7f6      	b.n	2824 <_Z15ee_buffer_parsePc+0x60>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    2836:	2250      	movs	r2, #80	; 0x50
    2838:	4628      	mov	r0, r5
    283a:	4936      	ldr	r1, [pc, #216]	; (2914 <_Z15ee_buffer_parsePc+0x150>)
    283c:	f00d fc94 	bl	10168 <strncmp>
    2840:	4604      	mov	r4, r0
    2842:	bb10      	cbnz	r0, 288a <_Z15ee_buffer_parsePc+0xc6>
    for (; i < g_buff_size; ++i) {
    2844:	4e2e      	ldr	r6, [pc, #184]	; (2900 <_Z15ee_buffer_parsePc+0x13c>)
    2846:	4d34      	ldr	r5, [pc, #208]	; (2918 <_Z15ee_buffer_parsePc+0x154>)
    2848:	4637      	mov	r7, r6
        th_printf("m-buffer-");
    284a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 2934 <_Z15ee_buffer_parsePc+0x170>
    for (; i < g_buff_size; ++i) {
    284e:	6833      	ldr	r3, [r6, #0]
    2850:	f004 0007 	and.w	r0, r4, #7
    2854:	42a3      	cmp	r3, r4
    2856:	d914      	bls.n	2882 <_Z15ee_buffer_parsePc+0xbe>
    if ((i + max) % max == 0 || i == 0) {
    2858:	b910      	cbnz	r0, 2860 <_Z15ee_buffer_parsePc+0x9c>
        th_printf("m-buffer-");
    285a:	4640      	mov	r0, r8
    285c:	f00a fae1 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    2860:	f815 1b01 	ldrb.w	r1, [r5], #1
    2864:	482d      	ldr	r0, [pc, #180]	; (291c <_Z15ee_buffer_parsePc+0x158>)
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    2866:	3401      	adds	r4, #1
    th_printf("%02x", gp_buff[i]);
    2868:	f00a fadb 	bl	ce22 <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    286c:	0763      	lsls	r3, r4, #29
    286e:	d002      	beq.n	2876 <_Z15ee_buffer_parsePc+0xb2>
    2870:	683b      	ldr	r3, [r7, #0]
    2872:	429c      	cmp	r4, r3
    2874:	d103      	bne.n	287e <_Z15ee_buffer_parsePc+0xba>
        th_printf("\r\n");
    2876:	482a      	ldr	r0, [pc, #168]	; (2920 <_Z15ee_buffer_parsePc+0x15c>)
        th_printf("-");
    2878:	f00a fad3 	bl	ce22 <_Z9th_printfPKcz>
    287c:	e7e7      	b.n	284e <_Z15ee_buffer_parsePc+0x8a>
    287e:	4829      	ldr	r0, [pc, #164]	; (2924 <_Z15ee_buffer_parsePc+0x160>)
    2880:	e7fa      	b.n	2878 <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    2882:	2800      	cmp	r0, #0
    2884:	d0cf      	beq.n	2826 <_Z15ee_buffer_parsePc+0x62>
    th_printf("\r\n");
    2886:	4826      	ldr	r0, [pc, #152]	; (2920 <_Z15ee_buffer_parsePc+0x15c>)
    2888:	e7ab      	b.n	27e2 <_Z15ee_buffer_parsePc+0x1e>
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    288a:	2150      	movs	r1, #80	; 0x50
    288c:	4628      	mov	r0, r5
    288e:	f00a fac4 	bl	ce1a <_Z10th_strnlenPKcj>
    if ((numbytes & 1) != 0) {
    2892:	f010 0301 	ands.w	r3, r0, #1
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    2896:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    2898:	d001      	beq.n	289e <_Z15ee_buffer_parsePc+0xda>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    289a:	4823      	ldr	r0, [pc, #140]	; (2928 <_Z15ee_buffer_parsePc+0x164>)
    289c:	e7a1      	b.n	27e2 <_Z15ee_buffer_parsePc+0x1e>
        if (g_buff_pos == g_buff_size) {
    289e:	462c      	mov	r4, r5
    test[2] = 0;
    28a0:	f88d 3006 	strb.w	r3, [sp, #6]
        if (g_buff_pos == g_buff_size) {
    28a4:	4b16      	ldr	r3, [pc, #88]	; (2900 <_Z15ee_buffer_parsePc+0x13c>)
        gp_buff[g_buff_pos] = (uint8_t)res;
    28a6:	4f18      	ldr	r7, [pc, #96]	; (2908 <_Z15ee_buffer_parsePc+0x144>)
        if (g_buff_pos == g_buff_size) {
    28a8:	f8d3 8000 	ldr.w	r8, [r3]
        gp_buff[g_buff_pos] = (uint8_t)res;
    28ac:	f8df 9068 	ldr.w	r9, [pc, #104]	; 2918 <_Z15ee_buffer_parsePc+0x154>
    for (size_t i = 0; i < numbytes;) {
    28b0:	1b63      	subs	r3, r4, r5
    28b2:	429e      	cmp	r6, r3
    28b4:	d9b6      	bls.n	2824 <_Z15ee_buffer_parsePc+0x60>
      test[0] = p_next[i++];
    28b6:	7823      	ldrb	r3, [r4, #0]
      res = ee_hexdec(test);
    28b8:	a801      	add	r0, sp, #4
      test[0] = p_next[i++];
    28ba:	f88d 3004 	strb.w	r3, [sp, #4]
      test[1] = p_next[i++];
    28be:	7863      	ldrb	r3, [r4, #1]
    28c0:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    28c4:	f00a fa22 	bl	cd0c <_Z9ee_hexdecPc>
      if (res < 0) {
    28c8:	2800      	cmp	r0, #0
    28ca:	da02      	bge.n	28d2 <_Z15ee_buffer_parsePc+0x10e>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    28cc:	4817      	ldr	r0, [pc, #92]	; (292c <_Z15ee_buffer_parsePc+0x168>)
    28ce:	a901      	add	r1, sp, #4
    28d0:	e7ae      	b.n	2830 <_Z15ee_buffer_parsePc+0x6c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    28d2:	683b      	ldr	r3, [r7, #0]
    28d4:	3402      	adds	r4, #2
    28d6:	f809 0003 	strb.w	r0, [r9, r3]
        g_buff_pos++;
    28da:	3301      	adds	r3, #1
        if (g_buff_pos == g_buff_size) {
    28dc:	4543      	cmp	r3, r8
        g_buff_pos++;
    28de:	603b      	str	r3, [r7, #0]
        if (g_buff_pos == g_buff_size) {
    28e0:	d1e6      	bne.n	28b0 <_Z15ee_buffer_parsePc+0xec>
          th_printf("m-load-done\r\n");
    28e2:	4813      	ldr	r0, [pc, #76]	; (2930 <_Z15ee_buffer_parsePc+0x16c>)
    28e4:	e77d      	b.n	27e2 <_Z15ee_buffer_parsePc+0x1e>
    return EE_ARG_UNCLAIMED;
    28e6:	2001      	movs	r0, #1
    28e8:	e79d      	b.n	2826 <_Z15ee_buffer_parsePc+0x62>
    28ea:	bf00      	nop
    28ec:	00062bce 	.word	0x00062bce
    28f0:	00063e18 	.word	0x00063e18
    28f4:	00062bd1 	.word	0x00062bd1
    28f8:	00062bfa 	.word	0x00062bfa
    28fc:	00062bff 	.word	0x00062bff
    2900:	2000046c 	.word	0x2000046c
    2904:	00062c2f 	.word	0x00062c2f
    2908:	20000468 	.word	0x20000468
    290c:	00062c58 	.word	0x00062c58
    2910:	00062c87 	.word	0x00062c87
    2914:	00062ca0 	.word	0x00062ca0
    2918:	20000dd2 	.word	0x20000dd2
    291c:	00062cb0 	.word	0x00062cb0
    2920:	00062cf6 	.word	0x00062cf6
    2924:	00062cae 	.word	0x00062cae
    2928:	00062cb5 	.word	0x00062cb5
    292c:	00062cdc 	.word	0x00062cdc
    2930:	00062cf9 	.word	0x00062cf9
    2934:	00062ca6 	.word	0x00062ca6

00002938 <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    2938:	b538      	push	{r3, r4, r5, lr}
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    293a:	2250      	movs	r2, #80	; 0x50
    293c:	4939      	ldr	r1, [pc, #228]	; (2a24 <_Z16ee_profile_parsePc+0xec>)
arg_claimed_t ee_profile_parse(char *command) {
    293e:	4605      	mov	r5, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    2940:	f00d fc12 	bl	10168 <strncmp>
    2944:	4604      	mov	r4, r0
    2946:	b948      	cbnz	r0, 295c <_Z16ee_profile_parsePc+0x24>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    2948:	4937      	ldr	r1, [pc, #220]	; (2a28 <_Z16ee_profile_parsePc+0xf0>)
    294a:	4838      	ldr	r0, [pc, #224]	; (2a2c <_Z16ee_profile_parsePc+0xf4>)
    294c:	f00a fa69 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    2950:	4937      	ldr	r1, [pc, #220]	; (2a30 <_Z16ee_profile_parsePc+0xf8>)
    2952:	4838      	ldr	r0, [pc, #224]	; (2a34 <_Z16ee_profile_parsePc+0xfc>)
    2954:	f00a fa65 	bl	ce22 <_Z9th_printfPKcz>
}
    2958:	4620      	mov	r0, r4
    295a:	bd38      	pop	{r3, r4, r5, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    295c:	2250      	movs	r2, #80	; 0x50
    295e:	4628      	mov	r0, r5
    2960:	4935      	ldr	r1, [pc, #212]	; (2a38 <_Z16ee_profile_parsePc+0x100>)
    2962:	f00d fc01 	bl	10168 <strncmp>
    2966:	4604      	mov	r4, r0
    2968:	bb28      	cbnz	r0, 29b6 <_Z16ee_profile_parsePc+0x7e>
    th_printf("%s\r\n", EE_FW_VERSION);
    296a:	492f      	ldr	r1, [pc, #188]	; (2a28 <_Z16ee_profile_parsePc+0xf0>)
    296c:	4833      	ldr	r0, [pc, #204]	; (2a3c <_Z16ee_profile_parsePc+0x104>)
    296e:	f00a fa58 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("\r\n");
    2972:	4833      	ldr	r0, [pc, #204]	; (2a40 <_Z16ee_profile_parsePc+0x108>)
    2974:	f00a fa55 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    2978:	4832      	ldr	r0, [pc, #200]	; (2a44 <_Z16ee_profile_parsePc+0x10c>)
    297a:	f00a fa52 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    297e:	4832      	ldr	r0, [pc, #200]	; (2a48 <_Z16ee_profile_parsePc+0x110>)
    2980:	f00a fa4f 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    2984:	4831      	ldr	r0, [pc, #196]	; (2a4c <_Z16ee_profile_parsePc+0x114>)
    2986:	f00a fa4c 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    298a:	4831      	ldr	r0, [pc, #196]	; (2a50 <_Z16ee_profile_parsePc+0x118>)
    298c:	f00a fa49 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    2990:	4830      	ldr	r0, [pc, #192]	; (2a54 <_Z16ee_profile_parsePc+0x11c>)
    2992:	f00a fa46 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    2996:	4830      	ldr	r0, [pc, #192]	; (2a58 <_Z16ee_profile_parsePc+0x120>)
    2998:	f00a fa43 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    299c:	482f      	ldr	r0, [pc, #188]	; (2a5c <_Z16ee_profile_parsePc+0x124>)
    299e:	f00a fa40 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    29a2:	482f      	ldr	r0, [pc, #188]	; (2a60 <_Z16ee_profile_parsePc+0x128>)
    29a4:	f00a fa3d 	bl	ce22 <_Z9th_printfPKcz>
    th_printf(
    29a8:	482e      	ldr	r0, [pc, #184]	; (2a64 <_Z16ee_profile_parsePc+0x12c>)
    29aa:	f00a fa3a 	bl	ce22 <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    29ae:	482e      	ldr	r0, [pc, #184]	; (2a68 <_Z16ee_profile_parsePc+0x130>)
          th_printf("e-[Inference warmup must be >=0]\r\n");
    29b0:	f00a fa37 	bl	ce22 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    29b4:	e7d0      	b.n	2958 <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    29b6:	4628      	mov	r0, r5
    29b8:	f7ff ff04 	bl	27c4 <_Z15ee_buffer_parsePc>
    29bc:	4604      	mov	r4, r0
    29be:	2800      	cmp	r0, #0
    29c0:	d0ca      	beq.n	2958 <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    29c2:	2250      	movs	r2, #80	; 0x50
    29c4:	4628      	mov	r0, r5
    29c6:	4929      	ldr	r1, [pc, #164]	; (2a6c <_Z16ee_profile_parsePc+0x134>)
    29c8:	f00d fbce 	bl	10168 <strncmp>
    29cc:	4604      	mov	r4, r0
    29ce:	b9e8      	cbnz	r0, 2a0c <_Z16ee_profile_parsePc+0xd4>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    29d0:	4927      	ldr	r1, [pc, #156]	; (2a70 <_Z16ee_profile_parsePc+0x138>)
    29d2:	f009 fd93 	bl	c4fc <strtok>
    if (p_next) {
    29d6:	b180      	cbz	r0, 29fa <_Z16ee_profile_parsePc+0xc2>
      i = atoi(p_next);
    29d8:	f00d fa40 	bl	fe5c <atoi>
      if (i <= 0) {
    29dc:	1e05      	subs	r5, r0, #0
    29de:	dc01      	bgt.n	29e4 <_Z16ee_profile_parsePc+0xac>
        th_printf("e-[Inference iterations must be >0]\r\n");
    29e0:	4824      	ldr	r0, [pc, #144]	; (2a74 <_Z16ee_profile_parsePc+0x13c>)
    29e2:	e7e5      	b.n	29b0 <_Z16ee_profile_parsePc+0x78>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    29e4:	4620      	mov	r0, r4
    29e6:	4922      	ldr	r1, [pc, #136]	; (2a70 <_Z16ee_profile_parsePc+0x138>)
    29e8:	f009 fd88 	bl	c4fc <strtok>
      if (p_next) {
    29ec:	b160      	cbz	r0, 2a08 <_Z16ee_profile_parsePc+0xd0>
        i = atoi(p_next);
    29ee:	f00d fa35 	bl	fe5c <atoi>
        if (i < 0) {
    29f2:	1e01      	subs	r1, r0, #0
    29f4:	da03      	bge.n	29fe <_Z16ee_profile_parsePc+0xc6>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    29f6:	4820      	ldr	r0, [pc, #128]	; (2a78 <_Z16ee_profile_parsePc+0x140>)
    29f8:	e7da      	b.n	29b0 <_Z16ee_profile_parsePc+0x78>
    size_t w = 10;
    29fa:	210a      	movs	r1, #10
    size_t n = 1;
    29fc:	2501      	movs	r5, #1
    ee_infer(n, w);
    29fe:	4628      	mov	r0, r5
    2a00:	f7ff feae 	bl	2760 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    2a04:	2400      	movs	r4, #0
    2a06:	e7a7      	b.n	2958 <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2a08:	210a      	movs	r1, #10
    2a0a:	e7f8      	b.n	29fe <_Z16ee_profile_parsePc+0xc6>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    2a0c:	2250      	movs	r2, #80	; 0x50
    2a0e:	4628      	mov	r0, r5
    2a10:	491a      	ldr	r1, [pc, #104]	; (2a7c <_Z16ee_profile_parsePc+0x144>)
    2a12:	f00d fba9 	bl	10168 <strncmp>
    2a16:	4604      	mov	r4, r0
    2a18:	b910      	cbnz	r0, 2a20 <_Z16ee_profile_parsePc+0xe8>
    th_results();
    2a1a:	f000 f8cf 	bl	2bbc <_Z10th_resultsv>
    2a1e:	e79b      	b.n	2958 <_Z16ee_profile_parsePc+0x20>
    return EE_ARG_UNCLAIMED;
    2a20:	2401      	movs	r4, #1
    2a22:	e799      	b.n	2958 <_Z16ee_profile_parsePc+0x20>
    2a24:	00062d07 	.word	0x00062d07
    2a28:	00062d0f 	.word	0x00062d0f
    2a2c:	00062d32 	.word	0x00062d32
    2a30:	00062d43 	.word	0x00062d43
    2a34:	00062d49 	.word	0x00062d49
    2a38:	00062d58 	.word	0x00062d58
    2a3c:	00062d5d 	.word	0x00062d5d
    2a40:	00062cf6 	.word	0x00062cf6
    2a44:	00062d62 	.word	0x00062d62
    2a48:	00062d8a 	.word	0x00062d8a
    2a4c:	00062db8 	.word	0x00062db8
    2a50:	00062dde 	.word	0x00062dde
    2a54:	00062e10 	.word	0x00062e10
    2a58:	00062e47 	.word	0x00062e47
    2a5c:	00062e7d 	.word	0x00062e7d
    2a60:	00062e99 	.word	0x00062e99
    2a64:	00062ec9 	.word	0x00062ec9
    2a68:	00062f10 	.word	0x00062f10
    2a6c:	00062f3f 	.word	0x00062f3f
    2a70:	00063e18 	.word	0x00063e18
    2a74:	00062f45 	.word	0x00062f45
    2a78:	00062f6b 	.word	0x00062f6b
    2a7c:	00062f8e 	.word	0x00062f8e

00002a80 <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    2a80:	4b15      	ldr	r3, [pc, #84]	; (2ad8 <_Z33ee_serial_command_parser_callbackPc+0x58>)
void ee_serial_command_parser_callback(char *p_command) {
    2a82:	b510      	push	{r4, lr}
  if (g_state_parser_enabled != true) {
    2a84:	781b      	ldrb	r3, [r3, #0]
    2a86:	b32b      	cbz	r3, 2ad4 <_Z33ee_serial_command_parser_callbackPc+0x54>
  tok = strtok(p_command, EE_CMD_DELIMITER);
    2a88:	4914      	ldr	r1, [pc, #80]	; (2adc <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    2a8a:	f009 fd37 	bl	c4fc <strtok>
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    2a8e:	2250      	movs	r2, #80	; 0x50
    2a90:	4913      	ldr	r1, [pc, #76]	; (2ae0 <_Z33ee_serial_command_parser_callbackPc+0x60>)
  tok = strtok(p_command, EE_CMD_DELIMITER);
    2a92:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    2a94:	f00d fb68 	bl	10168 <strncmp>
    2a98:	b948      	cbnz	r0, 2aae <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    2a9a:	4a12      	ldr	r2, [pc, #72]	; (2ae4 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    2a9c:	4912      	ldr	r1, [pc, #72]	; (2ae8 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    2a9e:	4813      	ldr	r0, [pc, #76]	; (2aec <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    2aa0:	f00a f9bf 	bl	ce22 <_Z9th_printfPKcz>
}
    2aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  th_printf(EE_MSG_READY);
    2aa8:	4811      	ldr	r0, [pc, #68]	; (2af0 <_Z33ee_serial_command_parser_callbackPc+0x70>)
    2aaa:	f00a b9ba 	b.w	ce22 <_Z9th_printfPKcz>
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    2aae:	2250      	movs	r2, #80	; 0x50
    2ab0:	4620      	mov	r0, r4
    2ab2:	4910      	ldr	r1, [pc, #64]	; (2af4 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    2ab4:	f00d fb58 	bl	10168 <strncmp>
    2ab8:	b910      	cbnz	r0, 2ac0 <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    2aba:	f000 f8cb 	bl	2c54 <_Z12th_timestampv>
    2abe:	e7f1      	b.n	2aa4 <_Z33ee_serial_command_parser_callbackPc+0x24>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    2ac0:	4620      	mov	r0, r4
    2ac2:	f7ff ff39 	bl	2938 <_Z16ee_profile_parsePc>
    2ac6:	2800      	cmp	r0, #0
    2ac8:	d0ec      	beq.n	2aa4 <_Z33ee_serial_command_parser_callbackPc+0x24>
    th_printf(EE_ERR_CMD, tok);
    2aca:	4621      	mov	r1, r4
    2acc:	480a      	ldr	r0, [pc, #40]	; (2af8 <_Z33ee_serial_command_parser_callbackPc+0x78>)
    2ace:	f00a f9a8 	bl	ce22 <_Z9th_printfPKcz>
    2ad2:	e7e7      	b.n	2aa4 <_Z33ee_serial_command_parser_callbackPc+0x24>
}
    2ad4:	bd10      	pop	{r4, pc}
    2ad6:	bf00      	nop
    2ad8:	20000dd1 	.word	0x20000dd1
    2adc:	00063e18 	.word	0x00063e18
    2ae0:	00062f96 	.word	0x00062f96
    2ae4:	00062f9b 	.word	0x00062f9b
    2ae8:	00062fa7 	.word	0x00062fa7
    2aec:	00062fab 	.word	0x00062fab
    2af0:	00062b7e 	.word	0x00062b7e
    2af4:	00062fbc 	.word	0x00062fbc
    2af8:	00062fc6 	.word	0x00062fc6

00002afc <_Z13ee_get_bufferPhj>:
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    2afc:	4b06      	ldr	r3, [pc, #24]	; (2b18 <_Z13ee_get_bufferPhj+0x1c>)
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    2afe:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    2b00:	681c      	ldr	r4, [r3, #0]
    2b02:	428c      	cmp	r4, r1
    2b04:	bf28      	it	cs
    2b06:	460c      	movcs	r4, r1
  if (buffer != nullptr) {
    2b08:	b118      	cbz	r0, 2b12 <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    2b0a:	4622      	mov	r2, r4
    2b0c:	4903      	ldr	r1, [pc, #12]	; (2b1c <_Z13ee_get_bufferPhj+0x20>)
    2b0e:	f00d f9b7 	bl	fe80 <memcpy>
  }
  return len;
}
    2b12:	4620      	mov	r0, r4
    2b14:	bd10      	pop	{r4, pc}
    2b16:	bf00      	nop
    2b18:	20000468 	.word	0x20000468
    2b1c:	20000dd2 	.word	0x20000dd2

00002b20 <_Z8th_inferv>:
  }
  th_printf("]\r\n");
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() { runner->Invoke(); }
    2b20:	4b07      	ldr	r3, [pc, #28]	; (2b40 <_Z8th_inferv+0x20>)
    2b22:	b510      	push	{r4, lr}
    2b24:	681c      	ldr	r4, [r3, #0]
    interpreter_.AllocateTensors();
  }

  void Invoke() {
    // Run the model on this input and make sure it succeeds.
    TfLiteStatus invoke_status = interpreter_.Invoke();
    2b26:	f104 000c 	add.w	r0, r4, #12
    2b2a:	f003 fdb5 	bl	6698 <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
    2b2e:	b128      	cbz	r0, 2b3c <_Z8th_inferv+0x1c>
      TF_LITE_REPORT_ERROR(reporter_, "Invoke failed.");
    2b30:	68a0      	ldr	r0, [r4, #8]
    2b32:	4904      	ldr	r1, [pc, #16]	; (2b44 <_Z8th_inferv+0x24>)
    2b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2b38:	f00b bd84 	b.w	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2b3c:	bd10      	pop	{r4, pc}
    2b3e:	bf00      	nop
    2b40:	20000610 	.word	0x20000610
    2b44:	00062fe0 	.word	0x00062fe0

00002b48 <_Z14th_load_tensorv>:
void th_load_tensor() {
    2b48:	b500      	push	{lr}
    2b4a:	f5ad 4dd8 	sub.w	sp, sp, #27648	; 0x6c00
    2b4e:	b081      	sub	sp, #4
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input),
    2b50:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    2b54:	4668      	mov	r0, sp
    2b56:	f7ff ffd1 	bl	2afc <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(int8_t) != kVwwInputSize) {
    2b5a:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input),
    2b5e:	4601      	mov	r1, r0
  if (bytes / sizeof(int8_t) != kVwwInputSize) {
    2b60:	d009      	beq.n	2b76 <_Z14th_load_tensorv+0x2e>
    th_printf("Input db has %d elemented, expected %d\n",
    2b62:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    2b66:	4813      	ldr	r0, [pc, #76]	; (2bb4 <_Z14th_load_tensorv+0x6c>)
    2b68:	f00a f95b 	bl	ce22 <_Z9th_printfPKcz>
}
    2b6c:	f50d 4dd8 	add.w	sp, sp, #27648	; 0x6c00
    2b70:	b001      	add	sp, #4
    2b72:	f85d fb04 	ldr.w	pc, [sp], #4
    2b76:	466a      	mov	r2, sp
  for (int i = 0; i < bytes; i++) {
    2b78:	2300      	movs	r3, #0
    input[i] -= 128;
    2b7a:	f992 1000 	ldrsb.w	r1, [r2]
  for (int i = 0; i < bytes; i++) {
    2b7e:	3301      	adds	r3, #1
    input[i] -= 128;
    2b80:	3980      	subs	r1, #128	; 0x80
  for (int i = 0; i < bytes; i++) {
    2b82:	f5b3 4fd8 	cmp.w	r3, #27648	; 0x6c00
    input[i] -= 128;
    2b86:	f802 1b01 	strb.w	r1, [r2], #1
  for (int i = 0; i < bytes; i++) {
    2b8a:	d1f6      	bne.n	2b7a <_Z14th_load_tensorv+0x32>
  runner->SetInput(input);
    2b8c:	4b0a      	ldr	r3, [pc, #40]	; (2bb8 <_Z14th_load_tensorv+0x70>)
    }
  }

  void SetInput(const inputT* custom_input) {
    // Populate input tensor with an image with no person.
    TfLiteTensor* input = interpreter_.input(0);
    2b8e:	2100      	movs	r1, #0
    2b90:	6818      	ldr	r0, [r3, #0]
    2b92:	300c      	adds	r0, #12
    2b94:	f003 fb68 	bl	6268 <_ZN6tflite16MicroInterpreter5inputEj>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2b98:	b148      	cbz	r0, 2bae <_Z14th_load_tensorv+0x66>
    2b9a:	6842      	ldr	r2, [r0, #4]
    inputT* input_buffer = tflite::GetTensorData<inputT>(input);
    int input_length = input->bytes / sizeof(inputT);
    for (int i = 0; i < input_length; i++) {
    2b9c:	2300      	movs	r3, #0
    int input_length = input->bytes / sizeof(inputT);
    2b9e:	6980      	ldr	r0, [r0, #24]
    for (int i = 0; i < input_length; i++) {
    2ba0:	4298      	cmp	r0, r3
    2ba2:	dde3      	ble.n	2b6c <_Z14th_load_tensorv+0x24>
      input_buffer[i] = custom_input[i];
    2ba4:	f91d 1003 	ldrsb.w	r1, [sp, r3]
    2ba8:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < input_length; i++) {
    2baa:	3301      	adds	r3, #1
    2bac:	e7f8      	b.n	2ba0 <_Z14th_load_tensorv+0x58>
    2bae:	4602      	mov	r2, r0
    2bb0:	e7f4      	b.n	2b9c <_Z14th_load_tensorv+0x54>
    2bb2:	bf00      	nop
    2bb4:	00062fef 	.word	0x00062fef
    2bb8:	20000610 	.word	0x20000610

00002bbc <_Z10th_resultsv>:
void th_results() {
    2bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2bc0:	4e19      	ldr	r6, [pc, #100]	; (2c28 <_Z10th_resultsv+0x6c>)
  th_printf("m-results-[");
    2bc2:	481a      	ldr	r0, [pc, #104]	; (2c2c <_Z10th_resultsv+0x70>)
    2bc4:	f00a f92d 	bl	ce22 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2bc8:	2400      	movs	r4, #0
    2bca:	4635      	mov	r5, r6
    }
  }

  outputT* GetOutput() {
    return tflite::GetTensorData<outputT>(interpreter_.output(0));
    2bcc:	6830      	ldr	r0, [r6, #0]
    2bce:	2100      	movs	r1, #0
    2bd0:	300c      	adds	r0, #12
    2bd2:	f003 fb31 	bl	6238 <_ZN6tflite16MicroInterpreter6outputEj>
    2bd6:	b100      	cbz	r0, 2bda <_Z10th_resultsv+0x1e>
    2bd8:	6840      	ldr	r0, [r0, #4]
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2bda:	f910 8004 	ldrsb.w	r8, [r0, r4]

  int input_size() { return interpreter_.input(0)->bytes / sizeof(inputT); }

  int output_size() { return interpreter_.output(0)->bytes / sizeof(outputT); }

  float output_scale() { return interpreter_.output(0)->params.scale; }
    2bde:	6828      	ldr	r0, [r5, #0]
    2be0:	2100      	movs	r1, #0
    2be2:	300c      	adds	r0, #12
    2be4:	f003 fb28 	bl	6238 <_ZN6tflite16MicroInterpreter6outputEj>
    2be8:	68c7      	ldr	r7, [r0, #12]

  int output_zero_point() { return interpreter_.output(0)->params.zero_point; }
    2bea:	6828      	ldr	r0, [r5, #0]
    2bec:	2100      	movs	r1, #0
    2bee:	300c      	adds	r0, #12
    2bf0:	f003 fb22 	bl	6238 <_ZN6tflite16MicroInterpreter6outputEj>

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2bf4:	6900      	ldr	r0, [r0, #16]
    2bf6:	eba8 0000 	sub.w	r0, r8, r0
    2bfa:	f7fe f835 	bl	c68 <__aeabi_i2f>
    2bfe:	4639      	mov	r1, r7
    2c00:	f7fe f886 	bl	d10 <__aeabi_fmul>
    th_printf("%0.3f", converted);
    2c04:	f7fd fc0c 	bl	420 <__aeabi_f2d>
    2c08:	4602      	mov	r2, r0
    2c0a:	460b      	mov	r3, r1
    2c0c:	4808      	ldr	r0, [pc, #32]	; (2c30 <_Z10th_resultsv+0x74>)
    2c0e:	f00a f908 	bl	ce22 <_Z9th_printfPKcz>
      th_printf(",");
    2c12:	4808      	ldr	r0, [pc, #32]	; (2c34 <_Z10th_resultsv+0x78>)
    2c14:	f00a f905 	bl	ce22 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2c18:	b124      	cbz	r4, 2c24 <_Z10th_resultsv+0x68>
}
    2c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  th_printf("]\r\n");
    2c1e:	4806      	ldr	r0, [pc, #24]	; (2c38 <_Z10th_resultsv+0x7c>)
    2c20:	f00a b8ff 	b.w	ce22 <_Z9th_printfPKcz>
    2c24:	2401      	movs	r4, #1
    2c26:	e7d1      	b.n	2bcc <_Z10th_resultsv+0x10>
    2c28:	20000610 	.word	0x20000610
    2c2c:	00063017 	.word	0x00063017
    2c30:	00063023 	.word	0x00063023
    2c34:	00063029 	.word	0x00063029
    2c38:	00062cf5 	.word	0x00062cf5

00002c3c <_Z12PIN_functionv>:
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
    /* Preserve MCUSEL setting. */
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2c3c:	4a04      	ldr	r2, [pc, #16]	; (2c50 <_Z12PIN_functionv+0x14>)
    2c3e:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
    2c42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
#else
    uint32_t cnf = 0;
#endif
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2c46:	f043 0303 	orr.w	r3, r3, #3
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
    2c4a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}

#define PIN7(port, bit) ((port)*32 + (bit))
void PIN_function() {
  nrf_gpio_cfg_output(PIN7(1,7));
}
    2c4e:	4770      	bx	lr
    2c50:	50842800 	.word	0x50842800

00002c54 <_Z12th_timestampv>:


void th_timestamp(void) {
    2c54:	b508      	push	{r3, lr}
#if EE_CFG_ENERGY_MODE == 1
/* USER CODE 1 BEGIN */
/* Step 1. Pull pin low */
       // 100000
       PIN_function();
    2c56:	f7ff fff1 	bl	2c3c <_Z12PIN_functionv>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    2c5a:	2280      	movs	r2, #128	; 0x80
    2c5c:	4b04      	ldr	r3, [pc, #16]	; (2c70 <_Z12th_timestampv+0x1c>)
    2c5e:	60da      	str	r2, [r3, #12]
    2c60:	4a04      	ldr	r2, [pc, #16]	; (2c74 <_Z12th_timestampv+0x20>)
       nrf_gpio_pin_clear(PIN7(1,7));
      // th_printf("start --------------");
       for (int i=0; i<20000000; ++i) {
                asm("nop");
    2c62:	bf00      	nop
       for (int i=0; i<20000000; ++i) {
    2c64:	3a01      	subs	r2, #1
    2c66:	d1fc      	bne.n	2c62 <_Z12th_timestampv+0xe>
    p_reg->OUTSET = set_mask;
    2c68:	2280      	movs	r2, #128	; 0x80
    2c6a:	609a      	str	r2, [r3, #8]
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
#endif
}
    2c6c:	bd08      	pop	{r3, pc}
    2c6e:	bf00      	nop
    2c70:	50842800 	.word	0x50842800
    2c74:	01312d00 	.word	0x01312d00

00002c78 <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2c78:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2c7a:	4803      	ldr	r0, [pc, #12]	; (2c88 <_Z23th_timestamp_initializev+0x10>)
    2c7c:	f00a f8d1 	bl	ce22 <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
}
    2c80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  th_timestamp();
    2c84:	f7ff bfe6 	b.w	2c54 <_Z12th_timestampv>
    2c88:	0006302b 	.word	0x0006302b

00002c8c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
    2c8c:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
    2c8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2c92:	4605      	mov	r5, r0
    2c94:	4688      	mov	r8, r1
    2c96:	4614      	mov	r4, r2
    2c98:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
    2c9a:	d109      	bne.n	2cb0 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x24>
      if (error_reporter_ != nullptr) {
    2c9c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    2ca0:	b910      	cbnz	r0, 2ca8 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1c>
        TF_LITE_REPORT_ERROR(error_reporter_,
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    2ca2:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
    2ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ca8:	491f      	ldr	r1, [pc, #124]	; (2d28 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x9c>)
    2caa:	f00b fccb 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2cae:	e7f8      	b.n	2ca2 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
    if (FindOp(op) != nullptr) {
    2cb0:	6803      	ldr	r3, [r0, #0]
    2cb2:	699b      	ldr	r3, [r3, #24]
    2cb4:	4798      	blx	r3
    2cb6:	4607      	mov	r7, r0
    2cb8:	b140      	cbz	r0, 2ccc <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x40>
      if (error_reporter_ != nullptr) {
    2cba:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    2cbe:	2800      	cmp	r0, #0
    2cc0:	d0ef      	beq.n	2ca2 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cc2:	4642      	mov	r2, r8
    2cc4:	4919      	ldr	r1, [pc, #100]	; (2d2c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa0>)
    2cc6:	f00b fcbd 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2cca:	e7ea      	b.n	2ca2 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
    if (registrations_len_ >= tOpCount) {
    2ccc:	f8d5 c0c4 	ldr.w	ip, [r5, #196]	; 0xc4
    2cd0:	f1bc 0f05 	cmp.w	ip, #5
    2cd4:	d909      	bls.n	2cea <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x5e>
      if (error_reporter_) {
    2cd6:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    2cda:	2800      	cmp	r0, #0
    2cdc:	d0e1      	beq.n	2ca2 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cde:	2306      	movs	r3, #6
    2ce0:	4642      	mov	r2, r8
    2ce2:	4913      	ldr	r1, [pc, #76]	; (2d30 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa4>)
    2ce4:	f00b fcae 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2ce8:	e7db      	b.n	2ca2 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
    registrations_[registrations_len_] = registration;
    2cea:	eb05 1e4c 	add.w	lr, r5, ip, lsl #5
    2cee:	f10e 0604 	add.w	r6, lr, #4
    2cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2cf4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    2cfa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    builtin_codes_[num_buitin_ops_] = op;
    2cfe:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
    registrations_len_++;
    2d02:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_].builtin_code = op;
    2d06:	f8ce 8018 	str.w	r8, [lr, #24]
    registrations_len_++;
    2d0a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2d0e:	18ab      	adds	r3, r5, r2
    2d10:	f883 80c8 	strb.w	r8, [r3, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d14:	f102 0334 	add.w	r3, r2, #52	; 0x34
    num_buitin_ops_++;
    2d18:	3201      	adds	r2, #1
    builtin_parsers_[num_buitin_ops_] = parser;
    2d1a:	f845 9023 	str.w	r9, [r5, r3, lsl #2]
    return kTfLiteOk;
    2d1e:	4638      	mov	r0, r7
    num_buitin_ops_++;
    2d20:	f8c5 20e8 	str.w	r2, [r5, #232]	; 0xe8
    return kTfLiteOk;
    2d24:	e7be      	b.n	2ca4 <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    2d26:	bf00      	nop
    2d28:	00063045 	.word	0x00063045
    2d2c:	0006308a 	.word	0x0006308a
    2d30:	000630d9 	.word	0x000630d9

00002d34 <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2d34:	b530      	push	{r4, r5, lr}
  static tflite::MicroMutableOpResolver<6> resolver;
    2d36:	4a39      	ldr	r2, [pc, #228]	; (2e1c <_Z19th_final_initializev+0xe8>)
    2d38:	4839      	ldr	r0, [pc, #228]	; (2e20 <_Z19th_final_initializev+0xec>)
    2d3a:	6813      	ldr	r3, [r2, #0]
void th_final_initialize(void) {
    2d3c:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroMutableOpResolver<6> resolver;
    2d3e:	f013 0301 	ands.w	r3, r3, #1
    2d42:	d10b      	bne.n	2d5c <_Z19th_final_initializev+0x28>
      : error_reporter_(error_reporter) {}
    2d44:	e9c0 333a 	strd	r3, r3, [r0, #232]	; 0xe8
    2d48:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
    2d4c:	2301      	movs	r3, #1
    2d4e:	4935      	ldr	r1, [pc, #212]	; (2e24 <_Z19th_final_initializev+0xf0>)
    2d50:	6013      	str	r3, [r2, #0]
    2d52:	6001      	str	r1, [r0, #0]
    2d54:	4a34      	ldr	r2, [pc, #208]	; (2e28 <_Z19th_final_initializev+0xf4>)
    2d56:	4935      	ldr	r1, [pc, #212]	; (2e2c <_Z19th_final_initializev+0xf8>)
    2d58:	f00a fc00 	bl	d55c <__aeabi_atexit>
  resolver.AddFullyConnected();
    2d5c:	a804      	add	r0, sp, #16
    2d5e:	f006 fc01 	bl	9564 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
    2d62:	2109      	movs	r1, #9
    2d64:	4b32      	ldr	r3, [pc, #200]	; (2e30 <_Z19th_final_initializev+0xfc>)
    2d66:	aa04      	add	r2, sp, #16
    2d68:	482d      	ldr	r0, [pc, #180]	; (2e20 <_Z19th_final_initializev+0xec>)
    2d6a:	f7ff ff8f 	bl	2c8c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  resolver.AddConv2D();
    2d6e:	a804      	add	r0, sp, #16
    2d70:	f005 fbc8 	bl	8504 <_ZN6tflite16Register_CONV_2DEv>
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
    2d74:	2103      	movs	r1, #3
    2d76:	4b2f      	ldr	r3, [pc, #188]	; (2e34 <_Z19th_final_initializev+0x100>)
    2d78:	aa04      	add	r2, sp, #16
    2d7a:	4829      	ldr	r0, [pc, #164]	; (2e20 <_Z19th_final_initializev+0xec>)
    2d7c:	f7ff ff86 	bl	2c8c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    2d80:	a804      	add	r0, sp, #16
    2d82:	f005 ffdf 	bl	8d44 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    2d86:	2104      	movs	r1, #4
    2d88:	4b2b      	ldr	r3, [pc, #172]	; (2e38 <_Z19th_final_initializev+0x104>)
    2d8a:	aa04      	add	r2, sp, #16
    2d8c:	4824      	ldr	r0, [pc, #144]	; (2e20 <_Z19th_final_initializev+0xec>)
    2d8e:	f7ff ff7d 	bl	2c8c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    2d92:	a804      	add	r0, sp, #16
    2d94:	f006 ffbc 	bl	9d10 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    2d98:	2116      	movs	r1, #22
    2d9a:	4b28      	ldr	r3, [pc, #160]	; (2e3c <_Z19th_final_initializev+0x108>)
    2d9c:	aa04      	add	r2, sp, #16
    2d9e:	4820      	ldr	r0, [pc, #128]	; (2e20 <_Z19th_final_initializev+0xec>)
    2da0:	f7ff ff74 	bl	2c8c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  resolver.AddSoftmax();
    2da4:	a804      	add	r0, sp, #16
    2da6:	f006 ffc1 	bl	9d2c <_ZN6tflite16Register_SOFTMAXEv>
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
    2daa:	2119      	movs	r1, #25
    2dac:	4b24      	ldr	r3, [pc, #144]	; (2e40 <_Z19th_final_initializev+0x10c>)
    2dae:	aa04      	add	r2, sp, #16
    2db0:	481b      	ldr	r0, [pc, #108]	; (2e20 <_Z19th_final_initializev+0xec>)
    2db2:	f7ff ff6b 	bl	2c8c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
      g_person_detect_model_data, resolver, tensor_arena, kTensorArenaSize);
    2db6:	4d23      	ldr	r5, [pc, #140]	; (2e44 <_Z19th_final_initializev+0x110>)
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    2db8:	a804      	add	r0, sp, #16
    2dba:	f006 fe33 	bl	9a24 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    2dbe:	4b22      	ldr	r3, [pc, #136]	; (2e48 <_Z19th_final_initializev+0x114>)
    2dc0:	aa04      	add	r2, sp, #16
    2dc2:	2101      	movs	r1, #1
    2dc4:	4816      	ldr	r0, [pc, #88]	; (2e20 <_Z19th_final_initializev+0xec>)
    2dc6:	f7ff ff61 	bl	2c8c <_ZN6tflite22MicroMutableOpResolverILj6EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    2dca:	682b      	ldr	r3, [r5, #0]
    2dcc:	4c1f      	ldr	r4, [pc, #124]	; (2e4c <_Z19th_final_initializev+0x118>)
    2dce:	f013 0201 	ands.w	r2, r3, #1
    2dd2:	d11e      	bne.n	2e12 <_Z19th_final_initializev+0xde>
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
    2dd4:	4b1e      	ldr	r3, [pc, #120]	; (2e50 <_Z19th_final_initializev+0x11c>)
namespace tflite {

// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
    2dd6:	481f      	ldr	r0, [pc, #124]	; (2e54 <_Z19th_final_initializev+0x120>)
    2dd8:	6819      	ldr	r1, [r3, #0]
    2dda:	4419      	add	r1, r3
    2ddc:	4623      	mov	r3, r4
    2dde:	f843 0f04 	str.w	r0, [r3, #4]!
                     reporter_) {
    2de2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2de6:	60a3      	str	r3, [r4, #8]
    2de8:	f44f 3302 	mov.w	r3, #133120	; 0x20800
    2dec:	4a0c      	ldr	r2, [pc, #48]	; (2e20 <_Z19th_final_initializev+0xec>)
    2dee:	9300      	str	r3, [sp, #0]
    2df0:	f104 000c 	add.w	r0, r4, #12
    2df4:	4b18      	ldr	r3, [pc, #96]	; (2e58 <_Z19th_final_initializev+0x124>)
    2df6:	6021      	str	r1, [r4, #0]
    2df8:	f003 f9e6 	bl	61c8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    interpreter_.AllocateTensors();
    2dfc:	f104 000c 	add.w	r0, r4, #12
    2e00:	f003 fb6c 	bl	64dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    2e04:	2301      	movs	r3, #1
    2e06:	4620      	mov	r0, r4
    2e08:	4a07      	ldr	r2, [pc, #28]	; (2e28 <_Z19th_final_initializev+0xf4>)
    2e0a:	4914      	ldr	r1, [pc, #80]	; (2e5c <_Z19th_final_initializev+0x128>)
    2e0c:	602b      	str	r3, [r5, #0]
    2e0e:	f00a fba5 	bl	d55c <__aeabi_atexit>
  runner = &model_runner;
    2e12:	4b13      	ldr	r3, [pc, #76]	; (2e60 <_Z19th_final_initializev+0x12c>)
    2e14:	601c      	str	r4, [r3, #0]
}
    2e16:	b00d      	add	sp, #52	; 0x34
    2e18:	bd30      	pop	{r4, r5, pc}
    2e1a:	bf00      	nop
    2e1c:	20000478 	.word	0x20000478
    2e20:	20000520 	.word	0x20000520
    2e24:	00062528 	.word	0x00062528
    2e28:	20000658 	.word	0x20000658
    2e2c:	0000cd91 	.word	0x0000cd91
    2e30:	00007a09 	.word	0x00007a09
    2e34:	00007879 	.word	0x00007879
    2e38:	0000793d 	.word	0x0000793d
    2e3c:	000077d1 	.word	0x000077d1
    2e40:	00007ba1 	.word	0x00007ba1
    2e44:	20000474 	.word	0x20000474
    2e48:	00007ae1 	.word	0x00007ae1
    2e4c:	2000047c 	.word	0x2000047c
    2e50:	00010e48 	.word	0x00010e48
    2e54:	000626b8 	.word	0x000626b8
    2e58:	200079d2 	.word	0x200079d2
    2e5c:	0000cd93 	.word	0x0000cd93
    2e60:	20000610 	.word	0x20000610

00002e64 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2e64:	680b      	ldr	r3, [r1, #0]
    2e66:	3301      	adds	r3, #1
    2e68:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2e6a:	4b01      	ldr	r3, [pc, #4]	; (2e70 <char_out+0xc>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	4718      	bx	r3
    2e70:	20000000 	.word	0x20000000

00002e74 <__printk_hook_install>:
	_char_out = fn;
    2e74:	4b01      	ldr	r3, [pc, #4]	; (2e7c <__printk_hook_install+0x8>)
    2e76:	6018      	str	r0, [r3, #0]
}
    2e78:	4770      	bx	lr
    2e7a:	bf00      	nop
    2e7c:	20000000 	.word	0x20000000

00002e80 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2e80:	b507      	push	{r0, r1, r2, lr}
    2e82:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2e84:	2100      	movs	r1, #0
{
    2e86:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2e88:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2e8a:	4803      	ldr	r0, [pc, #12]	; (2e98 <vprintk+0x18>)
    2e8c:	a901      	add	r1, sp, #4
    2e8e:	f000 f951 	bl	3134 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2e92:	b003      	add	sp, #12
    2e94:	f85d fb04 	ldr.w	pc, [sp], #4
    2e98:	00002e65 	.word	0x00002e65

00002e9c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2ea0:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    2ea4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2ea6:	f019 0808 	ands.w	r8, r9, #8
{
    2eaa:	4693      	mov	fp, r2
	if (processing) {
    2eac:	d00d      	beq.n	2eca <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    2eae:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2eb0:	bf0c      	ite	eq
    2eb2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2eb6:	f049 0920 	orrne.w	r9, r9, #32
    2eba:	f8a0 901c 	strh.w	r9, [r0, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2ebe:	f38b 8811 	msr	BASEPRI, fp
    2ec2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2eca:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    2ece:	2902      	cmp	r1, #2
    2ed0:	d107      	bne.n	2ee2 <process_event+0x46>
			evt = process_recheck(mgr);
    2ed2:	4620      	mov	r0, r4
    2ed4:	f009 fffc 	bl	ced0 <process_recheck>
		if (evt == EVT_NOP) {
    2ed8:	2800      	cmp	r0, #0
    2eda:	d0f0      	beq.n	2ebe <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2edc:	2801      	cmp	r0, #1
    2ede:	8ba3      	ldrh	r3, [r4, #28]
    2ee0:	d150      	bne.n	2f84 <process_event+0xe8>
			res = mgr->last_res;
    2ee2:	69a7      	ldr	r7, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2ee4:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
    2ee6:	2f00      	cmp	r7, #0
    2ee8:	da15      	bge.n	2f16 <process_event+0x7a>
		*clients = mgr->clients;
    2eea:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2eec:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    2ef0:	e9c4 8800 	strd	r8, r8, [r4]
    2ef4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2ef8:	83a1      	strh	r1, [r4, #28]
		onoff_transition_fn transit = NULL;
    2efa:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2efc:	8ba1      	ldrh	r1, [r4, #28]
    2efe:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2f02:	45ca      	cmp	sl, r9
    2f04:	d002      	beq.n	2f0c <process_event+0x70>
		if (do_monitors
    2f06:	68a3      	ldr	r3, [r4, #8]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d15c      	bne.n	2fc6 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    2f0c:	b90d      	cbnz	r5, 2f12 <process_event+0x76>
		    || (transit != NULL)) {
    2f0e:	2e00      	cmp	r6, #0
    2f10:	d074      	beq.n	2ffc <process_event+0x160>
    2f12:	2300      	movs	r3, #0
    2f14:	e058      	b.n	2fc8 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2f16:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2f1a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2f1c:	2a01      	cmp	r2, #1
    2f1e:	d820      	bhi.n	2f62 <process_event+0xc6>
		*clients = mgr->clients;
    2f20:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2f24:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2f26:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    2f28:	b289      	uxth	r1, r1
	list->tail = NULL;
    2f2a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2f2e:	d10c      	bne.n	2f4a <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2f30:	2d00      	cmp	r5, #0
    2f32:	462b      	mov	r3, r5
    2f34:	bf38      	it	cc
    2f36:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2f38:	b12b      	cbz	r3, 2f46 <process_event+0xaa>
				mgr->refs += 1U;
    2f3a:	8be2      	ldrh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	3201      	adds	r2, #1
    2f40:	83e2      	strh	r2, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2f42:	2b00      	cmp	r3, #0
    2f44:	d1f8      	bne.n	2f38 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2f46:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    2f4a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    2f4c:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2f4e:	f009 ffbf 	bl	ced0 <process_recheck>
    2f52:	4606      	mov	r6, r0
    2f54:	2800      	cmp	r0, #0
    2f56:	d0d1      	beq.n	2efc <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2f58:	8ba3      	ldrh	r3, [r4, #28]
    2f5a:	f043 0320 	orr.w	r3, r3, #32
    2f5e:	83a3      	strh	r3, [r4, #28]
    2f60:	e7cb      	b.n	2efa <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2f62:	2b04      	cmp	r3, #4
    2f64:	d10c      	bne.n	2f80 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2f66:	f021 0107 	bic.w	r1, r1, #7
    2f6a:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    2f6c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    2f6e:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2f70:	f009 ffae 	bl	ced0 <process_recheck>
    2f74:	4605      	mov	r5, r0
    2f76:	2800      	cmp	r0, #0
    2f78:	d0bf      	beq.n	2efa <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2f7a:	f041 0120 	orr.w	r1, r1, #32
    2f7e:	83a1      	strh	r1, [r4, #28]
    2f80:	2500      	movs	r5, #0
    2f82:	e7ba      	b.n	2efa <process_event+0x5e>
		} else if (evt == EVT_START) {
    2f84:	2803      	cmp	r0, #3
    2f86:	d109      	bne.n	2f9c <process_event+0x100>
			transit = mgr->transitions->start;
    2f88:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2f8a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    2f8e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2f90:	f043 0306 	orr.w	r3, r3, #6
}
    2f94:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    2f96:	83a3      	strh	r3, [r4, #28]
		res = 0;
    2f98:	462f      	mov	r7, r5
    2f9a:	e7af      	b.n	2efc <process_event+0x60>
		} else if (evt == EVT_STOP) {
    2f9c:	2804      	cmp	r0, #4
    2f9e:	d106      	bne.n	2fae <process_event+0x112>
			transit = mgr->transitions->stop;
    2fa0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2fa2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    2fa6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2fa8:	f043 0304 	orr.w	r3, r3, #4
    2fac:	e7f2      	b.n	2f94 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    2fae:	2805      	cmp	r0, #5
    2fb0:	d106      	bne.n	2fc0 <process_event+0x124>
			transit = mgr->transitions->reset;
    2fb2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2fb4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    2fb8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2fba:	f043 0305 	orr.w	r3, r3, #5
    2fbe:	e7e9      	b.n	2f94 <process_event+0xf8>
    2fc0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    2fc2:	462e      	mov	r6, r5
    2fc4:	e7e8      	b.n	2f98 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    2fc6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2fc8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2fcc:	83a1      	strh	r1, [r4, #28]
    2fce:	f38b 8811 	msr	BASEPRI, fp
    2fd2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2fd6:	bb03      	cbnz	r3, 301a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    2fd8:	2d00      	cmp	r5, #0
    2fda:	d133      	bne.n	3044 <process_event+0x1a8>
			if (transit != NULL) {
    2fdc:	b116      	cbz	r6, 2fe4 <process_event+0x148>
				transit(mgr, transition_complete);
    2fde:	4620      	mov	r0, r4
    2fe0:	4920      	ldr	r1, [pc, #128]	; (3064 <process_event+0x1c8>)
    2fe2:	47b0      	blx	r6
	__asm__ volatile(
    2fe4:	f04f 0320 	mov.w	r3, #32
    2fe8:	f3ef 8b11 	mrs	fp, BASEPRI
    2fec:	f383 8812 	msr	BASEPRI_MAX, r3
    2ff0:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2ff4:	8ba3      	ldrh	r3, [r4, #28]
    2ff6:	f023 0308 	bic.w	r3, r3, #8
    2ffa:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2ffc:	8ba3      	ldrh	r3, [r4, #28]
    2ffe:	06da      	lsls	r2, r3, #27
    3000:	d528      	bpl.n	3054 <process_event+0x1b8>
			evt = EVT_COMPLETE;
    3002:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3004:	f023 0310 	bic.w	r3, r3, #16
    3008:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    300a:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    300e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    3012:	2900      	cmp	r1, #0
    3014:	f47f af5b 	bne.w	2ece <process_event+0x32>
out:
    3018:	e751      	b.n	2ebe <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    301a:	68a1      	ldr	r1, [r4, #8]
    301c:	2900      	cmp	r1, #0
    301e:	d0db      	beq.n	2fd8 <process_event+0x13c>
	return node->next;
    3020:	680b      	ldr	r3, [r1, #0]
    3022:	2b00      	cmp	r3, #0
    3024:	bf38      	it	cc
    3026:	2300      	movcc	r3, #0
    3028:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    302a:	4652      	mov	r2, sl
    302c:	463b      	mov	r3, r7
    302e:	4620      	mov	r0, r4
    3030:	f8d1 b004 	ldr.w	fp, [r1, #4]
    3034:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3036:	f1b9 0f00 	cmp.w	r9, #0
    303a:	d0cd      	beq.n	2fd8 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    303c:	4649      	mov	r1, r9
    303e:	f8d9 3000 	ldr.w	r3, [r9]
    3042:	e7ee      	b.n	3022 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3044:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    3046:	463b      	mov	r3, r7
    3048:	4652      	mov	r2, sl
    304a:	4620      	mov	r0, r4
    304c:	682d      	ldr	r5, [r5, #0]
    304e:	f009 ff5b 	bl	cf08 <notify_one>
    3052:	e7c1      	b.n	2fd8 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3054:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3058:	bf1e      	ittt	ne
    305a:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    305e:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3060:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    3062:	e7d2      	b.n	300a <process_event+0x16e>
    3064:	0000cf35 	.word	0x0000cf35

00003068 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3068:	b5f0      	push	{r4, r5, r6, r7, lr}
    306a:	4602      	mov	r2, r0
    306c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    306e:	270a      	movs	r7, #10
	size_t val = 0;
    3070:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    3072:	4e07      	ldr	r6, [pc, #28]	; (3090 <extract_decimal+0x28>)
    3074:	460c      	mov	r4, r1
    3076:	7823      	ldrb	r3, [r4, #0]
    3078:	3101      	adds	r1, #1
    307a:	5d9d      	ldrb	r5, [r3, r6]
    307c:	076d      	lsls	r5, r5, #29
    307e:	d401      	bmi.n	3084 <extract_decimal+0x1c>
	}
	*str = sp;
    3080:	6014      	str	r4, [r2, #0]
	return val;
}
    3082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    3084:	fb07 3300 	mla	r3, r7, r0, r3
    3088:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    308c:	e7f2      	b.n	3074 <extract_decimal+0xc>
    308e:	bf00      	nop
    3090:	0006548b 	.word	0x0006548b

00003094 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3098:	4614      	mov	r4, r2
    309a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    309c:	78d3      	ldrb	r3, [r2, #3]
    309e:	4a24      	ldr	r2, [pc, #144]	; (3130 <encode_uint+0x9c>)
	switch (specifier) {
    30a0:	2b6f      	cmp	r3, #111	; 0x6f
    30a2:	f813 a002 	ldrb.w	sl, [r3, r2]
{
    30a6:	4606      	mov	r6, r0
    30a8:	f00a 0203 	and.w	r2, sl, #3
    30ac:	460f      	mov	r7, r1
    30ae:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    30b0:	d02d      	beq.n	310e <encode_uint+0x7a>
    30b2:	d828      	bhi.n	3106 <encode_uint+0x72>
		return 16;
    30b4:	2b58      	cmp	r3, #88	; 0x58
    30b6:	bf14      	ite	ne
    30b8:	250a      	movne	r5, #10
    30ba:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    30bc:	46aa      	mov	sl, r5
    30be:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    30c2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    30c6:	4652      	mov	r2, sl
    30c8:	465b      	mov	r3, fp
    30ca:	4630      	mov	r0, r6
    30cc:	4639      	mov	r1, r7
    30ce:	f7fe f80b 	bl	10e8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    30d2:	2a09      	cmp	r2, #9
    30d4:	b2d3      	uxtb	r3, r2
    30d6:	d81f      	bhi.n	3118 <encode_uint+0x84>
    30d8:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    30da:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    30dc:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    30de:	bf08      	it	eq
    30e0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    30e2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    30e6:	d301      	bcc.n	30ec <encode_uint+0x58>
    30e8:	45c8      	cmp	r8, r9
    30ea:	d812      	bhi.n	3112 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    30ec:	7823      	ldrb	r3, [r4, #0]
    30ee:	069b      	lsls	r3, r3, #26
    30f0:	d505      	bpl.n	30fe <encode_uint+0x6a>
		if (radix == 8) {
    30f2:	2d08      	cmp	r5, #8
    30f4:	d116      	bne.n	3124 <encode_uint+0x90>
			conv->altform_0 = true;
    30f6:	78a3      	ldrb	r3, [r4, #2]
    30f8:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    30fc:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
    30fe:	4640      	mov	r0, r8
    3100:	b003      	add	sp, #12
    3102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    3106:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    310a:	2b70      	cmp	r3, #112	; 0x70
    310c:	e7d3      	b.n	30b6 <encode_uint+0x22>
	switch (specifier) {
    310e:	2508      	movs	r5, #8
    3110:	e7d4      	b.n	30bc <encode_uint+0x28>
		value /= radix;
    3112:	4606      	mov	r6, r0
    3114:	460f      	mov	r7, r1
    3116:	e7d6      	b.n	30c6 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3118:	9a01      	ldr	r2, [sp, #4]
    311a:	2a01      	cmp	r2, #1
    311c:	bf0c      	ite	eq
    311e:	3337      	addeq	r3, #55	; 0x37
    3120:	3357      	addne	r3, #87	; 0x57
    3122:	e7da      	b.n	30da <encode_uint+0x46>
		} else if (radix == 16) {
    3124:	2d10      	cmp	r5, #16
    3126:	d1ea      	bne.n	30fe <encode_uint+0x6a>
			conv->altform_0c = true;
    3128:	78a3      	ldrb	r3, [r4, #2]
    312a:	f043 0310 	orr.w	r3, r3, #16
    312e:	e7e5      	b.n	30fc <encode_uint+0x68>
    3130:	0006548b 	.word	0x0006548b

00003134 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3138:	4682      	mov	sl, r0
    313a:	468b      	mov	fp, r1
    313c:	4691      	mov	r9, r2
    313e:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3140:	2500      	movs	r5, #0
{
    3142:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3144:	f899 0000 	ldrb.w	r0, [r9]
    3148:	b908      	cbnz	r0, 314e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    314a:	4628      	mov	r0, r5
    314c:	e33a      	b.n	37c4 <cbvprintf+0x690>
		if (*fp != '%') {
    314e:	f109 0301 	add.w	r3, r9, #1
    3152:	2825      	cmp	r0, #37	; 0x25
    3154:	9302      	str	r3, [sp, #8]
    3156:	d006      	beq.n	3166 <cbvprintf+0x32>
			OUTC('%');
    3158:	4659      	mov	r1, fp
    315a:	47d0      	blx	sl
    315c:	2800      	cmp	r0, #0
    315e:	f2c0 8331 	blt.w	37c4 <cbvprintf+0x690>
    3162:	3501      	adds	r5, #1
			break;
    3164:	e1f1      	b.n	354a <cbvprintf+0x416>
		} state = {
    3166:	2218      	movs	r2, #24
    3168:	2100      	movs	r1, #0
    316a:	a80c      	add	r0, sp, #48	; 0x30
    316c:	f00c fe95 	bl	fe9a <memset>
	if (*sp == '%') {
    3170:	f899 3001 	ldrb.w	r3, [r9, #1]
    3174:	2b25      	cmp	r3, #37	; 0x25
    3176:	d059      	beq.n	322c <cbvprintf+0xf8>
    3178:	9a02      	ldr	r2, [sp, #8]
    317a:	4616      	mov	r6, r2
		switch (*sp) {
    317c:	f812 3b01 	ldrb.w	r3, [r2], #1
    3180:	2b2b      	cmp	r3, #43	; 0x2b
    3182:	f000 808b 	beq.w	329c <cbvprintf+0x168>
    3186:	d879      	bhi.n	327c <cbvprintf+0x148>
    3188:	2b20      	cmp	r3, #32
    318a:	f000 808c 	beq.w	32a6 <cbvprintf+0x172>
    318e:	2b23      	cmp	r3, #35	; 0x23
    3190:	f000 808e 	beq.w	32b0 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    3194:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3198:	f003 0244 	and.w	r2, r3, #68	; 0x44
    319c:	2a44      	cmp	r2, #68	; 0x44
    319e:	d103      	bne.n	31a8 <cbvprintf+0x74>
		conv->flag_zero = false;
    31a0:	f36f 1386 	bfc	r3, #6, #1
    31a4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    31a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    31ac:	9605      	str	r6, [sp, #20]
    31ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    31b2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    31b6:	7833      	ldrb	r3, [r6, #0]
    31b8:	2b2a      	cmp	r3, #42	; 0x2a
    31ba:	d17e      	bne.n	32ba <cbvprintf+0x186>
		conv->width_star = true;
    31bc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    31c0:	f043 0301 	orr.w	r3, r3, #1
    31c4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    31c8:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    31ca:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    31cc:	781a      	ldrb	r2, [r3, #0]
    31ce:	2a2e      	cmp	r2, #46	; 0x2e
    31d0:	bf0c      	ite	eq
    31d2:	2101      	moveq	r1, #1
    31d4:	2100      	movne	r1, #0
    31d6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    31da:	f361 0241 	bfi	r2, r1, #1, #1
    31de:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    31e2:	d10b      	bne.n	31fc <cbvprintf+0xc8>
	++sp;
    31e4:	1c5a      	adds	r2, r3, #1
    31e6:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    31e8:	785a      	ldrb	r2, [r3, #1]
    31ea:	2a2a      	cmp	r2, #42	; 0x2a
    31ec:	d17b      	bne.n	32e6 <cbvprintf+0x1b2>
		conv->prec_star = true;
    31ee:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    31f2:	3302      	adds	r3, #2
		conv->prec_star = true;
    31f4:	f042 0204 	orr.w	r2, r2, #4
    31f8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
    31fc:	4619      	mov	r1, r3
    31fe:	f811 0b01 	ldrb.w	r0, [r1], #1
    3202:	286c      	cmp	r0, #108	; 0x6c
    3204:	f000 80b6 	beq.w	3374 <cbvprintf+0x240>
    3208:	d87d      	bhi.n	3306 <cbvprintf+0x1d2>
    320a:	2868      	cmp	r0, #104	; 0x68
    320c:	f000 8084 	beq.w	3318 <cbvprintf+0x1e4>
    3210:	286a      	cmp	r0, #106	; 0x6a
    3212:	f000 80b9 	beq.w	3388 <cbvprintf+0x254>
    3216:	284c      	cmp	r0, #76	; 0x4c
    3218:	f000 80bd 	beq.w	3396 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    321c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
    3220:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
    3222:	f36f 02c6 	bfc	r2, #3, #4
    3226:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    322a:	e080      	b.n	332e <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    322c:	f109 0202 	add.w	r2, r9, #2
    3230:	9202      	str	r2, [sp, #8]
    3232:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    3236:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    323a:	07d9      	lsls	r1, r3, #31
    323c:	f140 8149 	bpl.w	34d2 <cbvprintf+0x39e>
			width = va_arg(ap, int);
    3240:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    3244:	f1b8 0f00 	cmp.w	r8, #0
    3248:	da07      	bge.n	325a <cbvprintf+0x126>
				conv->flag_dash = true;
    324a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
    324e:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    3252:	f042 0204 	orr.w	r2, r2, #4
    3256:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
    325a:	075a      	lsls	r2, r3, #29
    325c:	f140 8142 	bpl.w	34e4 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    3260:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    3264:	2f00      	cmp	r7, #0
    3266:	f280 8141 	bge.w	34ec <cbvprintf+0x3b8>
				conv->prec_present = false;
    326a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    326e:	f36f 0341 	bfc	r3, #1, #1
    3272:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    3276:	f04f 37ff 	mov.w	r7, #4294967295
    327a:	e137      	b.n	34ec <cbvprintf+0x3b8>
		switch (*sp) {
    327c:	2b2d      	cmp	r3, #45	; 0x2d
    327e:	d006      	beq.n	328e <cbvprintf+0x15a>
    3280:	2b30      	cmp	r3, #48	; 0x30
    3282:	d187      	bne.n	3194 <cbvprintf+0x60>
			conv->flag_zero = true;
    3284:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    328c:	e003      	b.n	3296 <cbvprintf+0x162>
			conv->flag_dash = true;
    328e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3292:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    3296:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    329a:	e76e      	b.n	317a <cbvprintf+0x46>
			conv->flag_plus = true;
    329c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    32a0:	f043 0308 	orr.w	r3, r3, #8
    32a4:	e7f7      	b.n	3296 <cbvprintf+0x162>
			conv->flag_space = true;
    32a6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    32aa:	f043 0310 	orr.w	r3, r3, #16
    32ae:	e7f2      	b.n	3296 <cbvprintf+0x162>
			conv->flag_hash = true;
    32b0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    32b4:	f043 0320 	orr.w	r3, r3, #32
    32b8:	e7ed      	b.n	3296 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    32ba:	a805      	add	r0, sp, #20
    32bc:	f7ff fed4 	bl	3068 <extract_decimal>
	if (sp != wp) {
    32c0:	9b05      	ldr	r3, [sp, #20]
    32c2:	42b3      	cmp	r3, r6
    32c4:	d081      	beq.n	31ca <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    32c6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    32ca:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    32cc:	f3c1 0240 	ubfx	r2, r1, #1, #1
    32d0:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    32d4:	0052      	lsls	r2, r2, #1
    32d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    32da:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    32de:	430a      	orrs	r2, r1
    32e0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    32e4:	e771      	b.n	31ca <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    32e6:	a805      	add	r0, sp, #20
    32e8:	f7ff febe 	bl	3068 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    32ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    32f0:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    32f2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    32f6:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    32fa:	f360 0341 	bfi	r3, r0, #1, #1
    32fe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    3302:	9b05      	ldr	r3, [sp, #20]
    3304:	e77a      	b.n	31fc <cbvprintf+0xc8>
	switch (*sp) {
    3306:	2874      	cmp	r0, #116	; 0x74
    3308:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    330c:	d040      	beq.n	3390 <cbvprintf+0x25c>
    330e:	287a      	cmp	r0, #122	; 0x7a
    3310:	d184      	bne.n	321c <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    3312:	4613      	mov	r3, r2
    3314:	2206      	movs	r2, #6
    3316:	e028      	b.n	336a <cbvprintf+0x236>
		if (*++sp == 'h') {
    3318:	785a      	ldrb	r2, [r3, #1]
    331a:	2a68      	cmp	r2, #104	; 0x68
    331c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    3320:	d121      	bne.n	3366 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    3322:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    3324:	f361 02c6 	bfi	r2, r1, #3, #4
    3328:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    332c:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    332e:	460b      	mov	r3, r1
    3330:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    3334:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    3336:	9302      	str	r3, [sp, #8]
    3338:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    333c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    3340:	f200 80bf 	bhi.w	34c2 <cbvprintf+0x38e>
    3344:	2a57      	cmp	r2, #87	; 0x57
    3346:	d833      	bhi.n	33b0 <cbvprintf+0x27c>
    3348:	2a41      	cmp	r2, #65	; 0x41
    334a:	d003      	beq.n	3354 <cbvprintf+0x220>
    334c:	3a45      	subs	r2, #69	; 0x45
    334e:	2a02      	cmp	r2, #2
    3350:	f200 80b7 	bhi.w	34c2 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    3354:	2204      	movs	r2, #4
    3356:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    335a:	f362 0302 	bfi	r3, r2, #0, #3
    335e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    3362:	2301      	movs	r3, #1
			break;
    3364:	e084      	b.n	3470 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    3366:	4613      	mov	r3, r2
    3368:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    336a:	f362 03c6 	bfi	r3, r2, #3, #4
    336e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    3372:	e7dc      	b.n	332e <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    3374:	785a      	ldrb	r2, [r3, #1]
    3376:	2a6c      	cmp	r2, #108	; 0x6c
    3378:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    337c:	d101      	bne.n	3382 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    337e:	2104      	movs	r1, #4
    3380:	e7d0      	b.n	3324 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    3382:	4613      	mov	r3, r2
    3384:	2203      	movs	r2, #3
    3386:	e7f0      	b.n	336a <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    3388:	2205      	movs	r2, #5
    338a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    338e:	e7ec      	b.n	336a <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    3390:	4613      	mov	r3, r2
    3392:	2207      	movs	r2, #7
    3394:	e7e9      	b.n	336a <cbvprintf+0x236>
		conv->unsupported = true;
    3396:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    339a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    339e:	f023 0302 	bic.w	r3, r3, #2
    33a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    33a6:	f043 0302 	orr.w	r3, r3, #2
    33aa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    33ae:	e7be      	b.n	332e <cbvprintf+0x1fa>
    33b0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    33b4:	2920      	cmp	r1, #32
    33b6:	f200 8084 	bhi.w	34c2 <cbvprintf+0x38e>
    33ba:	a001      	add	r0, pc, #4	; (adr r0, 33c0 <cbvprintf+0x28c>)
    33bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    33c0:	00003485 	.word	0x00003485
    33c4:	000034c3 	.word	0x000034c3
    33c8:	000034c3 	.word	0x000034c3
    33cc:	000034c3 	.word	0x000034c3
    33d0:	000034c3 	.word	0x000034c3
    33d4:	000034c3 	.word	0x000034c3
    33d8:	000034c3 	.word	0x000034c3
    33dc:	000034c3 	.word	0x000034c3
    33e0:	000034c3 	.word	0x000034c3
    33e4:	00003355 	.word	0x00003355
    33e8:	000034c3 	.word	0x000034c3
    33ec:	00003485 	.word	0x00003485
    33f0:	00003445 	.word	0x00003445
    33f4:	00003355 	.word	0x00003355
    33f8:	00003355 	.word	0x00003355
    33fc:	00003355 	.word	0x00003355
    3400:	000034c3 	.word	0x000034c3
    3404:	00003445 	.word	0x00003445
    3408:	000034c3 	.word	0x000034c3
    340c:	000034c3 	.word	0x000034c3
    3410:	000034c3 	.word	0x000034c3
    3414:	000034c3 	.word	0x000034c3
    3418:	0000348d 	.word	0x0000348d
    341c:	00003485 	.word	0x00003485
    3420:	000034a9 	.word	0x000034a9
    3424:	000034c3 	.word	0x000034c3
    3428:	000034c3 	.word	0x000034c3
    342c:	000034a9 	.word	0x000034a9
    3430:	000034c3 	.word	0x000034c3
    3434:	00003485 	.word	0x00003485
    3438:	000034c3 	.word	0x000034c3
    343c:	000034c3 	.word	0x000034c3
    3440:	00003485 	.word	0x00003485
		conv->specifier_cat = SPECIFIER_SINT;
    3444:	2001      	movs	r0, #1
    3446:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    344a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    344e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3452:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    3454:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    3458:	bf02      	ittt	eq
    345a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    345e:	f041 0101 	orreq.w	r1, r1, #1
    3462:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    3466:	2a63      	cmp	r2, #99	; 0x63
    3468:	d131      	bne.n	34ce <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    346a:	3b00      	subs	r3, #0
    346c:	bf18      	it	ne
    346e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3470:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    3474:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3478:	430b      	orrs	r3, r1
    347a:	f363 0241 	bfi	r2, r3, #1, #1
    347e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    3482:	e6d8      	b.n	3236 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    3484:	2002      	movs	r0, #2
    3486:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    348a:	e7de      	b.n	344a <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    348c:	2103      	movs	r1, #3
    348e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3492:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3496:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    349a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    349e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    34a0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    34a4:	4143      	adcs	r3, r0
    34a6:	e7e3      	b.n	3470 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    34a8:	2103      	movs	r1, #3
    34aa:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    34ae:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    34b2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    34b6:	bf14      	ite	ne
    34b8:	2301      	movne	r3, #1
    34ba:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    34bc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    34c0:	e7d6      	b.n	3470 <cbvprintf+0x33c>
		conv->invalid = true;
    34c2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    34c6:	f043 0301 	orr.w	r3, r3, #1
    34ca:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    34ce:	2300      	movs	r3, #0
    34d0:	e7ce      	b.n	3470 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    34d2:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    34d6:	2a00      	cmp	r2, #0
		int width = -1;
    34d8:	bfac      	ite	ge
    34da:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    34de:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
    34e2:	e6ba      	b.n	325a <cbvprintf+0x126>
		} else if (conv->prec_present) {
    34e4:	079f      	lsls	r7, r3, #30
    34e6:	f57f aec6 	bpl.w	3276 <cbvprintf+0x142>
			precision = conv->prec_value;
    34ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    34ec:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    34ee:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    34f2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
    34f6:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
    34fa:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    34fe:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3500:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3504:	d137      	bne.n	3576 <cbvprintf+0x442>
			switch (length_mod) {
    3506:	1ecb      	subs	r3, r1, #3
    3508:	2b04      	cmp	r3, #4
    350a:	d821      	bhi.n	3550 <cbvprintf+0x41c>
    350c:	e8df f003 	tbb	[pc, r3]
    3510:	20070703 	.word	0x20070703
    3514:	20          	.byte	0x20
    3515:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    3516:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    351a:	17d3      	asrs	r3, r2, #31
    351c:	e004      	b.n	3528 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    351e:	3407      	adds	r4, #7
    3520:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    3524:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    3528:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    352c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3530:	f013 0603 	ands.w	r6, r3, #3
    3534:	d055      	beq.n	35e2 <cbvprintf+0x4ae>
			OUTS(sp, fp);
    3536:	464a      	mov	r2, r9
    3538:	4659      	mov	r1, fp
    353a:	4650      	mov	r0, sl
    353c:	9b02      	ldr	r3, [sp, #8]
    353e:	f009 fe5a 	bl	d1f6 <outs>
    3542:	2800      	cmp	r0, #0
    3544:	f2c0 813e 	blt.w	37c4 <cbvprintf+0x690>
    3548:	4405      	add	r5, r0
			OUTS(bps, bpe);
    354a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    354e:	e5f9      	b.n	3144 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3550:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    3554:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3556:	ea4f 73e2 	mov.w	r3, r2, asr #31
    355a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    355e:	d105      	bne.n	356c <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    3560:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    3564:	930c      	str	r3, [sp, #48]	; 0x30
    3566:	2300      	movs	r3, #0
    3568:	930d      	str	r3, [sp, #52]	; 0x34
    356a:	e7df      	b.n	352c <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    356c:	2902      	cmp	r1, #2
    356e:	d1dd      	bne.n	352c <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    3570:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    3574:	e7d1      	b.n	351a <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3576:	2b02      	cmp	r3, #2
    3578:	d123      	bne.n	35c2 <cbvprintf+0x48e>
			switch (length_mod) {
    357a:	1ecb      	subs	r3, r1, #3
    357c:	2b04      	cmp	r3, #4
    357e:	d813      	bhi.n	35a8 <cbvprintf+0x474>
    3580:	e8df f003 	tbb	[pc, r3]
    3584:	120a0a03 	.word	0x120a0a03
    3588:	12          	.byte	0x12
    3589:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    358a:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    358c:	6822      	ldr	r2, [r4, #0]
    358e:	1d20      	adds	r0, r4, #4
    3590:	920c      	str	r2, [sp, #48]	; 0x30
    3592:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    3594:	4604      	mov	r4, r0
    3596:	e7c9      	b.n	352c <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    3598:	3407      	adds	r4, #7
    359a:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    359e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    35a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    35a6:	e7f5      	b.n	3594 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    35a8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    35ac:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    35ae:	930c      	str	r3, [sp, #48]	; 0x30
    35b0:	f04f 0300 	mov.w	r3, #0
    35b4:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    35b6:	d0d3      	beq.n	3560 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    35b8:	2902      	cmp	r1, #2
    35ba:	d1b7      	bne.n	352c <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    35bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    35c0:	e7d0      	b.n	3564 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    35c2:	2b04      	cmp	r3, #4
    35c4:	d107      	bne.n	35d6 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    35c6:	3407      	adds	r4, #7
    35c8:	f024 0407 	bic.w	r4, r4, #7
    35cc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    35d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    35d4:	e7aa      	b.n	352c <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    35d6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    35d8:	bf04      	itt	eq
    35da:	f854 3b04 	ldreq.w	r3, [r4], #4
    35de:	930c      	streq	r3, [sp, #48]	; 0x30
    35e0:	e7a4      	b.n	352c <cbvprintf+0x3f8>
		switch (conv->specifier) {
    35e2:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    35e6:	2878      	cmp	r0, #120	; 0x78
    35e8:	d8af      	bhi.n	354a <cbvprintf+0x416>
    35ea:	2862      	cmp	r0, #98	; 0x62
    35ec:	d820      	bhi.n	3630 <cbvprintf+0x4fc>
    35ee:	2825      	cmp	r0, #37	; 0x25
    35f0:	f43f adb2 	beq.w	3158 <cbvprintf+0x24>
    35f4:	2858      	cmp	r0, #88	; 0x58
    35f6:	d1a8      	bne.n	354a <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    35f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    35fc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3600:	9300      	str	r3, [sp, #0]
    3602:	aa0e      	add	r2, sp, #56	; 0x38
    3604:	ab06      	add	r3, sp, #24
    3606:	f7ff fd45 	bl	3094 <encode_uint>
    360a:	4681      	mov	r9, r0
			if (precision >= 0) {
    360c:	2f00      	cmp	r7, #0
    360e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    3612:	db0b      	blt.n	362c <cbvprintf+0x4f8>
				conv->flag_zero = false;
    3614:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    3618:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    361c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3620:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    3622:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    3626:	d901      	bls.n	362c <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    3628:	1aff      	subs	r7, r7, r3
    362a:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    362c:	4607      	mov	r7, r0
    362e:	e03c      	b.n	36aa <cbvprintf+0x576>
    3630:	3863      	subs	r0, #99	; 0x63
    3632:	2815      	cmp	r0, #21
    3634:	d889      	bhi.n	354a <cbvprintf+0x416>
    3636:	a201      	add	r2, pc, #4	; (adr r2, 363c <cbvprintf+0x508>)
    3638:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    363c:	000036bb 	.word	0x000036bb
    3640:	0000371d 	.word	0x0000371d
    3644:	0000354b 	.word	0x0000354b
    3648:	0000354b 	.word	0x0000354b
    364c:	0000354b 	.word	0x0000354b
    3650:	0000354b 	.word	0x0000354b
    3654:	0000371d 	.word	0x0000371d
    3658:	0000354b 	.word	0x0000354b
    365c:	0000354b 	.word	0x0000354b
    3660:	0000354b 	.word	0x0000354b
    3664:	0000354b 	.word	0x0000354b
    3668:	0000377b 	.word	0x0000377b
    366c:	00003749 	.word	0x00003749
    3670:	0000374d 	.word	0x0000374d
    3674:	0000354b 	.word	0x0000354b
    3678:	0000354b 	.word	0x0000354b
    367c:	00003695 	.word	0x00003695
    3680:	0000354b 	.word	0x0000354b
    3684:	00003749 	.word	0x00003749
    3688:	0000354b 	.word	0x0000354b
    368c:	0000354b 	.word	0x0000354b
    3690:	00003749 	.word	0x00003749
			if (precision >= 0) {
    3694:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    3696:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    369a:	db0a      	blt.n	36b2 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    369c:	4639      	mov	r1, r7
    369e:	4648      	mov	r0, r9
    36a0:	f00c fd74 	bl	1018c <strnlen>
		char sign = 0;
    36a4:	2600      	movs	r6, #0
			bpe = bps + len;
    36a6:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
    36aa:	f1b9 0f00 	cmp.w	r9, #0
    36ae:	d10c      	bne.n	36ca <cbvprintf+0x596>
    36b0:	e74b      	b.n	354a <cbvprintf+0x416>
				len = strlen(bps);
    36b2:	4648      	mov	r0, r9
    36b4:	f7fd ff0e 	bl	14d4 <strlen>
    36b8:	e7f4      	b.n	36a4 <cbvprintf+0x570>
			break;
    36ba:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    36bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
    36be:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    36c2:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
    36c6:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    36ca:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    36ce:	b106      	cbz	r6, 36d2 <cbvprintf+0x59e>
			nj_len += 1U;
    36d0:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    36d2:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    36d6:	06d0      	lsls	r0, r2, #27
    36d8:	d569      	bpl.n	37ae <cbvprintf+0x67a>
			nj_len += 2U;
    36da:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    36dc:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    36de:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    36e0:	bf48      	it	mi
    36e2:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    36e4:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    36e6:	bf48      	it	mi
    36e8:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    36ea:	f1b8 0f00 	cmp.w	r8, #0
    36ee:	dd76      	ble.n	37de <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    36f0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    36f4:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    36f8:	f3c2 0380 	ubfx	r3, r2, #2, #1
    36fc:	9303      	str	r3, [sp, #12]
    36fe:	0753      	lsls	r3, r2, #29
    3700:	d46d      	bmi.n	37de <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    3702:	0650      	lsls	r0, r2, #25
    3704:	d561      	bpl.n	37ca <cbvprintf+0x696>
					if (sign != 0) {
    3706:	b13e      	cbz	r6, 3718 <cbvprintf+0x5e4>
						OUTC(sign);
    3708:	4659      	mov	r1, fp
    370a:	4630      	mov	r0, r6
    370c:	47d0      	blx	sl
    370e:	2800      	cmp	r0, #0
    3710:	db58      	blt.n	37c4 <cbvprintf+0x690>
						sign = 0;
    3712:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3714:	3501      	adds	r5, #1
						sign = 0;
    3716:	461e      	mov	r6, r3
					pad = '0';
    3718:	2330      	movs	r3, #48	; 0x30
    371a:	e057      	b.n	37cc <cbvprintf+0x698>
			if (conv->flag_plus) {
    371c:	071e      	lsls	r6, r3, #28
    371e:	d411      	bmi.n	3744 <cbvprintf+0x610>
				sign = ' ';
    3720:	f013 0610 	ands.w	r6, r3, #16
    3724:	bf18      	it	ne
    3726:	2620      	movne	r6, #32
			sint = value->sint;
    3728:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    372c:	2a00      	cmp	r2, #0
    372e:	f173 0100 	sbcs.w	r1, r3, #0
    3732:	f6bf af61 	bge.w	35f8 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    3736:	4252      	negs	r2, r2
    3738:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    373c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    373e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    3742:	e759      	b.n	35f8 <cbvprintf+0x4c4>
				sign = '+';
    3744:	262b      	movs	r6, #43	; 0x2b
    3746:	e7ef      	b.n	3728 <cbvprintf+0x5f4>
		switch (conv->specifier) {
    3748:	2600      	movs	r6, #0
    374a:	e755      	b.n	35f8 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    374c:	980c      	ldr	r0, [sp, #48]	; 0x30
    374e:	b348      	cbz	r0, 37a4 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3750:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    3754:	9300      	str	r3, [sp, #0]
    3756:	2100      	movs	r1, #0
    3758:	ab06      	add	r3, sp, #24
    375a:	aa0e      	add	r2, sp, #56	; 0x38
    375c:	f7ff fc9a 	bl	3094 <encode_uint>
				conv->altform_0c = true;
    3760:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3764:	4681      	mov	r9, r0
				conv->altform_0c = true;
    3766:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    376a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    376e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    3772:	2600      	movs	r6, #0
				conv->altform_0c = true;
    3774:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    3778:	e748      	b.n	360c <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    377a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    377c:	2907      	cmp	r1, #7
    377e:	f63f aee4 	bhi.w	354a <cbvprintf+0x416>
    3782:	e8df f001 	tbb	[pc, r1]
    3786:	040d      	.short	0x040d
    3788:	08080d06 	.word	0x08080d06
    378c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    378e:	701d      	strb	r5, [r3, #0]
		break;
    3790:	e6db      	b.n	354a <cbvprintf+0x416>
		*(short *)dp = (short)count;
    3792:	801d      	strh	r5, [r3, #0]
		break;
    3794:	e6d9      	b.n	354a <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    3796:	4628      	mov	r0, r5
    3798:	17e9      	asrs	r1, r5, #31
    379a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    379e:	e6d4      	b.n	354a <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    37a0:	601d      	str	r5, [r3, #0]
		break;
    37a2:	e6d2      	b.n	354a <cbvprintf+0x416>
			bpe = bps + 5;
    37a4:	4f2e      	ldr	r7, [pc, #184]	; (3860 <cbvprintf+0x72c>)
    37a6:	4606      	mov	r6, r0
			bps = "(nil)";
    37a8:	f1a7 0905 	sub.w	r9, r7, #5
    37ac:	e78d      	b.n	36ca <cbvprintf+0x596>
		} else if (conv->altform_0) {
    37ae:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    37b0:	bf48      	it	mi
    37b2:	3301      	addmi	r3, #1
    37b4:	e792      	b.n	36dc <cbvprintf+0x5a8>
					OUTC(pad);
    37b6:	4618      	mov	r0, r3
    37b8:	4659      	mov	r1, fp
    37ba:	9303      	str	r3, [sp, #12]
    37bc:	47d0      	blx	sl
    37be:	2800      	cmp	r0, #0
    37c0:	9b03      	ldr	r3, [sp, #12]
    37c2:	da04      	bge.n	37ce <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    37c4:	b013      	add	sp, #76	; 0x4c
    37c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    37ca:	2320      	movs	r3, #32
    37cc:	4445      	add	r5, r8
    37ce:	4642      	mov	r2, r8
				while (width-- > 0) {
    37d0:	2a00      	cmp	r2, #0
    37d2:	eba5 0108 	sub.w	r1, r5, r8
    37d6:	f108 38ff 	add.w	r8, r8, #4294967295
    37da:	dcec      	bgt.n	37b6 <cbvprintf+0x682>
    37dc:	460d      	mov	r5, r1
		if (sign != 0) {
    37de:	b12e      	cbz	r6, 37ec <cbvprintf+0x6b8>
			OUTC(sign);
    37e0:	4659      	mov	r1, fp
    37e2:	4630      	mov	r0, r6
    37e4:	47d0      	blx	sl
    37e6:	2800      	cmp	r0, #0
    37e8:	dbec      	blt.n	37c4 <cbvprintf+0x690>
    37ea:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    37ec:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    37f0:	06d9      	lsls	r1, r3, #27
    37f2:	d401      	bmi.n	37f8 <cbvprintf+0x6c4>
    37f4:	071a      	lsls	r2, r3, #28
    37f6:	d505      	bpl.n	3804 <cbvprintf+0x6d0>
				OUTC('0');
    37f8:	4659      	mov	r1, fp
    37fa:	2030      	movs	r0, #48	; 0x30
    37fc:	47d0      	blx	sl
    37fe:	2800      	cmp	r0, #0
    3800:	dbe0      	blt.n	37c4 <cbvprintf+0x690>
    3802:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3804:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    3808:	06db      	lsls	r3, r3, #27
    380a:	d506      	bpl.n	381a <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    380c:	4659      	mov	r1, fp
    380e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    3812:	47d0      	blx	sl
    3814:	2800      	cmp	r0, #0
    3816:	dbd5      	blt.n	37c4 <cbvprintf+0x690>
    3818:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    381a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    381c:	442e      	add	r6, r5
    381e:	1b73      	subs	r3, r6, r5
    3820:	2b00      	cmp	r3, #0
    3822:	dc15      	bgt.n	3850 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    3824:	463b      	mov	r3, r7
    3826:	464a      	mov	r2, r9
    3828:	4659      	mov	r1, fp
    382a:	4650      	mov	r0, sl
    382c:	f009 fce3 	bl	d1f6 <outs>
    3830:	2800      	cmp	r0, #0
    3832:	dbc7      	blt.n	37c4 <cbvprintf+0x690>
    3834:	4405      	add	r5, r0
		while (width > 0) {
    3836:	44a8      	add	r8, r5
    3838:	eba8 0305 	sub.w	r3, r8, r5
    383c:	2b00      	cmp	r3, #0
    383e:	f77f ae84 	ble.w	354a <cbvprintf+0x416>
			OUTC(' ');
    3842:	4659      	mov	r1, fp
    3844:	2020      	movs	r0, #32
    3846:	47d0      	blx	sl
    3848:	2800      	cmp	r0, #0
    384a:	dbbb      	blt.n	37c4 <cbvprintf+0x690>
    384c:	3501      	adds	r5, #1
			--width;
    384e:	e7f3      	b.n	3838 <cbvprintf+0x704>
				OUTC('0');
    3850:	4659      	mov	r1, fp
    3852:	2030      	movs	r0, #48	; 0x30
    3854:	47d0      	blx	sl
    3856:	2800      	cmp	r0, #0
    3858:	dbb4      	blt.n	37c4 <cbvprintf+0x690>
    385a:	3501      	adds	r5, #1
    385c:	e7df      	b.n	381e <cbvprintf+0x6ea>
    385e:	bf00      	nop
    3860:	00063121 	.word	0x00063121

00003864 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    3864:	4604      	mov	r4, r0
    3866:	b508      	push	{r3, lr}
    3868:	f04f 0220 	mov.w	r2, #32
    386c:	f3ef 8311 	mrs	r3, BASEPRI
    3870:	f382 8812 	msr	BASEPRI_MAX, r2
    3874:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3878:	f00a f972 	bl	db60 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    387c:	4620      	mov	r0, r4
    387e:	f000 fca7 	bl	41d0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3882:	4803      	ldr	r0, [pc, #12]	; (3890 <sys_reboot+0x2c>)
    3884:	f009 fb17 	bl	ceb6 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3888:	f000 fa52 	bl	3d30 <arch_cpu_idle>
    388c:	e7fc      	b.n	3888 <sys_reboot+0x24>
    388e:	bf00      	nop
    3890:	00063122 	.word	0x00063122

00003894 <nrf_gpio_pin_mcu_select.constprop.0>:
        case 1: return NRF_P1;
    3894:	4b09      	ldr	r3, [pc, #36]	; (38bc <nrf_gpio_pin_mcu_select.constprop.0+0x28>)
    3896:	490a      	ldr	r1, [pc, #40]	; (38c0 <nrf_gpio_pin_mcu_select.constprop.0+0x2c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3898:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
    389c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    389e:	2801      	cmp	r0, #1
    38a0:	bf08      	it	eq
    38a2:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    38a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    38a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    38ac:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    38b0:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    38b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    38b8:	4770      	bx	lr
    38ba:	bf00      	nop
    38bc:	50842500 	.word	0x50842500
    38c0:	50842800 	.word	0x50842800

000038c4 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    38c4:	b570      	push	{r4, r5, r6, lr}
    38c6:	f04f 0320 	mov.w	r3, #32
    38ca:	f3ef 8611 	mrs	r6, BASEPRI
    38ce:	f383 8812 	msr	BASEPRI_MAX, r3
    38d2:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    38d6:	2401      	movs	r4, #1
    38d8:	4b0c      	ldr	r3, [pc, #48]	; (390c <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    38da:	4d0d      	ldr	r5, [pc, #52]	; (3910 <nordicsemi_nrf53_init+0x4c>)
    38dc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    38e0:	2302      	movs	r3, #2
			NRF_OSCILLATORS_LFXO_CAP_7PF :
		IS_ENABLED(CONFIG_SOC_LFXO_CAP_INT_9PF) ?
			NRF_OSCILLATORS_LFXO_CAP_9PF :
			NRF_OSCILLATORS_LFXO_CAP_EXTERNAL);
	/* This can only be done from secure code. */
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    38e2:	2000      	movs	r0, #0
    38e4:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
    38e8:	f7ff ffd4 	bl	3894 <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    38ec:	4620      	mov	r0, r4
    38ee:	f7ff ffd1 	bl	3894 <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    38f2:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    38f6:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    38fa:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    38fe:	f386 8811 	msr	BASEPRI, r6
    3902:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3906:	2000      	movs	r0, #0
    3908:	bd70      	pop	{r4, r5, r6, pc}
    390a:	bf00      	nop
    390c:	50001000 	.word	0x50001000
    3910:	50004000 	.word	0x50004000

00003914 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3914:	b148      	cbz	r0, 392a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    3916:	4b05      	ldr	r3, [pc, #20]	; (392c <arch_busy_wait+0x18>)
    3918:	681a      	ldr	r2, [r3, #0]
    391a:	4b05      	ldr	r3, [pc, #20]	; (3930 <arch_busy_wait+0x1c>)
    391c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3920:	4b04      	ldr	r3, [pc, #16]	; (3934 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    3922:	4350      	muls	r0, r2
    3924:	f043 0301 	orr.w	r3, r3, #1
    3928:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    392a:	4770      	bx	lr
    392c:	20000060 	.word	0x20000060
    3930:	000f4240 	.word	0x000f4240
    3934:	00010e40 	.word	0x00010e40

00003938 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3938:	b084      	sub	sp, #16
    393a:	ab04      	add	r3, sp, #16
    393c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3940:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3944:	2b06      	cmp	r3, #6
    3946:	d107      	bne.n	3958 <pm_power_state_set+0x20>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    3948:	2201      	movs	r2, #1
    394a:	4b04      	ldr	r3, [pc, #16]	; (395c <pm_power_state_set+0x24>)
    394c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3950:	f3bf 8f4f 	dsb	sy
        __WFE();
    3954:	bf20      	wfe
    while (true)
    3956:	e7fd      	b.n	3954 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3958:	b004      	add	sp, #16
    395a:	4770      	bx	lr
    395c:	50004000 	.word	0x50004000

00003960 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
    3960:	4602      	mov	r2, r0
    3962:	b510      	push	{r4, lr}
	if (!uart_dev) {
    3964:	4608      	mov	r0, r1
    3966:	b199      	cbz	r1, 3990 <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    3968:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
    396a:	f04f 33ff 	mov.w	r3, #4294967295
	tty->tx_timeout = SYS_FOREVER_MS;
    396e:	e9c2 430f 	strd	r4, r3, [r2, #60]	; 0x3c
	tty->rx_timeout = SYS_FOREVER_MS;
    3972:	6213      	str	r3, [r2, #32]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3974:	688b      	ldr	r3, [r1, #8]
	tty->rx_ringbuf_sz = 0U;
    3976:	e9c2 4405 	strd	r4, r4, [r2, #20]
	tty->tx_ringbuf_sz = 0U;
    397a:	e9c2 440d 	strd	r4, r4, [r2, #52]	; 0x34
	tty->uart_dev = uart_dev;
    397e:	6011      	str	r1, [r2, #0]
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3980:	61d4      	str	r4, [r2, #28]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3982:	b143      	cbz	r3, 3996 <tty_init+0x36>
    3984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3986:	b133      	cbz	r3, 3996 <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    3988:	4904      	ldr	r1, [pc, #16]	; (399c <tty_init+0x3c>)
    398a:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    398c:	4620      	mov	r0, r4
}
    398e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    3990:	f06f 0012 	mvn.w	r0, #18
    3994:	e7fb      	b.n	398e <tty_init+0x2e>
	return 0;
    3996:	4618      	mov	r0, r3
    3998:	e7f9      	b.n	398e <tty_init+0x2e>
    399a:	bf00      	nop
    399c:	0000d2eb 	.word	0x0000d2eb

000039a0 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    39a0:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    39a2:	2201      	movs	r2, #1
    39a4:	f10d 0107 	add.w	r1, sp, #7
    39a8:	4804      	ldr	r0, [pc, #16]	; (39bc <console_getchar+0x1c>)
    39aa:	f009 fcf5 	bl	d398 <tty_read>
	if (res < 0) {
    39ae:	2800      	cmp	r0, #0
		return res;
	}

	return c;
    39b0:	bfa8      	it	ge
    39b2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
}
    39b6:	b003      	add	sp, #12
    39b8:	f85d fb04 	ldr.w	pc, [sp], #4
    39bc:	20000614 	.word	0x20000614

000039c0 <console_init>:

int console_init(void)
{
    39c0:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    39c2:	4d10      	ldr	r5, [pc, #64]	; (3a04 <console_init+0x44>)
    39c4:	4628      	mov	r0, r5
    39c6:	f00c f8a7 	bl	fb18 <z_device_ready>
    39ca:	b1a0      	cbz	r0, 39f6 <console_init+0x36>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    39cc:	4629      	mov	r1, r5
    39ce:	480e      	ldr	r0, [pc, #56]	; (3a08 <console_init+0x48>)
    39d0:	f7ff ffc6 	bl	3960 <tty_init>

	if (ret) {
    39d4:	4604      	mov	r4, r0
    39d6:	b960      	cbnz	r0, 39f2 <console_init+0x32>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    39d8:	68ab      	ldr	r3, [r5, #8]
    39da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    39dc:	b173      	cbz	r3, 39fc <console_init+0x3c>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    39de:	2210      	movs	r2, #16
    39e0:	490a      	ldr	r1, [pc, #40]	; (3a0c <console_init+0x4c>)
    39e2:	4809      	ldr	r0, [pc, #36]	; (3a08 <console_init+0x48>)
    39e4:	f009 fd81 	bl	d4ea <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    39e8:	2210      	movs	r2, #16
    39ea:	4909      	ldr	r1, [pc, #36]	; (3a10 <console_init+0x50>)
    39ec:	4806      	ldr	r0, [pc, #24]	; (3a08 <console_init+0x48>)
    39ee:	f009 fd63 	bl	d4b8 <tty_set_rx_buf>

	return 0;
}
    39f2:	4620      	mov	r0, r4
    39f4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    39f6:	f06f 0412 	mvn.w	r4, #18
    39fa:	e7fa      	b.n	39f2 <console_init+0x32>
			return -ENOTSUP;
    39fc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3a00:	e7f7      	b.n	39f2 <console_init+0x32>
    3a02:	bf00      	nop
    3a04:	00010ab0 	.word	0x00010ab0
    3a08:	20000614 	.word	0x20000614
    3a0c:	200281e2 	.word	0x200281e2
    3a10:	200281d2 	.word	0x200281d2

00003a14 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3a14:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    3a16:	4c04      	ldr	r4, [pc, #16]	; (3a28 <__do_init_array_aux+0x14>)
    3a18:	4d04      	ldr	r5, [pc, #16]	; (3a2c <__do_init_array_aux+0x18>)
    3a1a:	42ac      	cmp	r4, r5
    3a1c:	d300      	bcc.n	3a20 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    3a1e:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    3a20:	f854 3b04 	ldr.w	r3, [r4], #4
    3a24:	4798      	blx	r3
		func++) {
    3a26:	e7f8      	b.n	3a1a <__do_init_array_aux+0x6>
    3a28:	00010d40 	.word	0x00010d40
    3a2c:	00010d40 	.word	0x00010d40

00003a30 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    3a30:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    3a32:	4c05      	ldr	r4, [pc, #20]	; (3a48 <__do_global_ctors_aux+0x18>)
    3a34:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    3a36:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    3a3a:	b905      	cbnz	r5, 3a3e <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    3a3c:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    3a3e:	f854 3904 	ldr.w	r3, [r4], #-4
    3a42:	3d01      	subs	r5, #1
    3a44:	4798      	blx	r3
    3a46:	e7f8      	b.n	3a3a <__do_global_ctors_aux+0xa>
    3a48:	00010d38 	.word	0x00010d38

00003a4c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a4e:	4605      	mov	r5, r0
	__asm__ volatile(
    3a50:	f04f 0320 	mov.w	r3, #32
    3a54:	f3ef 8611 	mrs	r6, BASEPRI
    3a58:	f383 8812 	msr	BASEPRI_MAX, r3
    3a5c:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3a60:	4b0b      	ldr	r3, [pc, #44]	; (3a90 <pm_state_notify+0x44>)
    3a62:	681c      	ldr	r4, [r3, #0]
    3a64:	2c00      	cmp	r4, #0
    3a66:	bf38      	it	cc
    3a68:	2400      	movcc	r4, #0
    3a6a:	b15c      	cbz	r4, 3a84 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    3a6c:	4f09      	ldr	r7, [pc, #36]	; (3a94 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    3a6e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3a72:	2d00      	cmp	r5, #0
    3a74:	bf08      	it	eq
    3a76:	4613      	moveq	r3, r2
		if (callback) {
    3a78:	b10b      	cbz	r3, 3a7e <pm_state_notify+0x32>
			callback(z_power_state.state);
    3a7a:	7838      	ldrb	r0, [r7, #0]
    3a7c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3a7e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3a80:	2c00      	cmp	r4, #0
    3a82:	d1f4      	bne.n	3a6e <pm_state_notify+0x22>
	__asm__ volatile(
    3a84:	f386 8811 	msr	BASEPRI, r6
    3a88:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a8e:	bf00      	nop
    3a90:	2000065c 	.word	0x2000065c
    3a94:	20000664 	.word	0x20000664

00003a98 <pm_system_resume>:

void pm_system_resume(void)
{
    3a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3a9a:	4b0f      	ldr	r3, [pc, #60]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a9c:	681a      	ldr	r2, [r3, #0]
    3a9e:	b9ba      	cbnz	r2, 3ad0 <pm_system_resume+0x38>
		post_ops_done = 1;
    3aa0:	2201      	movs	r2, #1
    3aa2:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3aa4:	4a0d      	ldr	r2, [pc, #52]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3aa6:	ab01      	add	r3, sp, #4
    3aa8:	ca07      	ldmia	r2, {r0, r1, r2}
    3aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3aae:	4a0c      	ldr	r2, [pc, #48]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3ab0:	b14a      	cbz	r2, 3ac6 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    3ab2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ab6:	f009 fbb5 	bl	d224 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    3aba:	2000      	movs	r0, #0
	}
}
    3abc:	b005      	add	sp, #20
    3abe:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    3ac2:	f7ff bfc3 	b.w	3a4c <pm_state_notify>
    3ac6:	f382 8811 	msr	BASEPRI, r2
    3aca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3ace:	e7f4      	b.n	3aba <pm_system_resume+0x22>
}
    3ad0:	b005      	add	sp, #20
    3ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ad6:	bf00      	nop
    3ad8:	20000004 	.word	0x20000004
    3adc:	20000664 	.word	0x20000664
    3ae0:	0000d225 	.word	0x0000d225

00003ae4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae6:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3ae8:	466e      	mov	r6, sp
    3aea:	4c1b      	ldr	r4, [pc, #108]	; (3b58 <pm_system_suspend+0x74>)
    3aec:	4601      	mov	r1, r0
{
    3aee:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    3af0:	4630      	mov	r0, r6
    3af2:	f009 fd15 	bl	d520 <pm_policy_next_state>
    3af6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3afa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3afe:	7820      	ldrb	r0, [r4, #0]
    3b00:	b340      	cbz	r0, 3b54 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3b02:	2100      	movs	r1, #0
    3b04:	4b15      	ldr	r3, [pc, #84]	; (3b5c <pm_system_suspend+0x78>)
    3b06:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3b08:	1c6b      	adds	r3, r5, #1
    3b0a:	d00e      	beq.n	3b2a <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3b0c:	4617      	mov	r7, r2
    3b0e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3b12:	2100      	movs	r1, #0
    3b14:	4812      	ldr	r0, [pc, #72]	; (3b60 <pm_system_suspend+0x7c>)
    3b16:	2300      	movs	r3, #0
    3b18:	fbe6 0107 	umlal	r0, r1, r6, r7
    3b1c:	4a11      	ldr	r2, [pc, #68]	; (3b64 <pm_system_suspend+0x80>)
    3b1e:	f7fd fae3 	bl	10e8 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    3b22:	2101      	movs	r1, #1
    3b24:	1a28      	subs	r0, r5, r0
    3b26:	f00c f950 	bl	fdca <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3b2a:	f006 ff31 	bl	a990 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    3b2e:	2001      	movs	r0, #1
    3b30:	f7ff ff8c 	bl	3a4c <pm_state_notify>
	pm_state_set(z_power_state);
    3b34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    3b38:	ab05      	add	r3, sp, #20
    3b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3b3e:	4a0a      	ldr	r2, [pc, #40]	; (3b68 <pm_system_suspend+0x84>)
    3b40:	b11a      	cbz	r2, 3b4a <pm_system_suspend+0x66>
		pm_power_state_set(info);
    3b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3b46:	f7ff fef7 	bl	3938 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3b4a:	f7ff ffa5 	bl	3a98 <pm_system_resume>
	k_sched_unlock();
    3b4e:	f007 f8f9 	bl	ad44 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3b52:	7820      	ldrb	r0, [r4, #0]
}
    3b54:	b009      	add	sp, #36	; 0x24
    3b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b58:	20000664 	.word	0x20000664
    3b5c:	20000004 	.word	0x20000004
    3b60:	000f423f 	.word	0x000f423f
    3b64:	000f4240 	.word	0x000f4240
    3b68:	00003939 	.word	0x00003939

00003b6c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3b6c:	4801      	ldr	r0, [pc, #4]	; (3b74 <nrf_cc3xx_platform_abort_init+0x8>)
    3b6e:	f007 bbf3 	b.w	b358 <nrf_cc3xx_platform_set_abort>
    3b72:	bf00      	nop
    3b74:	0006254c 	.word	0x0006254c

00003b78 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b78:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3b7a:	b308      	cbz	r0, 3bc0 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3b7c:	6843      	ldr	r3, [r0, #4]
    3b7e:	2b04      	cmp	r3, #4
    3b80:	d007      	beq.n	3b92 <mutex_unlock_platform+0x1a>
    3b82:	2b08      	cmp	r3, #8
    3b84:	d013      	beq.n	3bae <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3b86:	b1f3      	cbz	r3, 3bc6 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3b88:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3b8a:	f006 fe17 	bl	a7bc <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3b8e:	2000      	movs	r0, #0
    3b90:	e00c      	b.n	3bac <mutex_unlock_platform+0x34>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3b92:	2200      	movs	r2, #0
    3b94:	6803      	ldr	r3, [r0, #0]
    3b96:	e8d3 1fef 	ldaex	r1, [r3]
    3b9a:	2901      	cmp	r1, #1
    3b9c:	d103      	bne.n	3ba6 <mutex_unlock_platform+0x2e>
    3b9e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3ba2:	2800      	cmp	r0, #0
    3ba4:	d1f7      	bne.n	3b96 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3ba6:	4809      	ldr	r0, [pc, #36]	; (3bcc <mutex_unlock_platform+0x54>)
    3ba8:	bf08      	it	eq
    3baa:	4610      	moveq	r0, r2
    }
}
    3bac:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3bae:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3bb0:	2000      	movs	r0, #0
    3bb2:	781b      	ldrb	r3, [r3, #0]
    3bb4:	4a06      	ldr	r2, [pc, #24]	; (3bd0 <mutex_unlock_platform+0x58>)
    3bb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3bba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3bbe:	e7f5      	b.n	3bac <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3bc0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3bc4:	e7f2      	b.n	3bac <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3bc6:	4803      	ldr	r0, [pc, #12]	; (3bd4 <mutex_unlock_platform+0x5c>)
    3bc8:	e7f0      	b.n	3bac <mutex_unlock_platform+0x34>
    3bca:	bf00      	nop
    3bcc:	ffff8fe9 	.word	0xffff8fe9
    3bd0:	50030000 	.word	0x50030000
    3bd4:	ffff8fea 	.word	0xffff8fea

00003bd8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3bd8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3bda:	4604      	mov	r4, r0
    3bdc:	b918      	cbnz	r0, 3be6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3bde:	4b0d      	ldr	r3, [pc, #52]	; (3c14 <mutex_free_platform+0x3c>)
    3be0:	480d      	ldr	r0, [pc, #52]	; (3c18 <mutex_free_platform+0x40>)
    3be2:	685b      	ldr	r3, [r3, #4]
    3be4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3be6:	6861      	ldr	r1, [r4, #4]
    3be8:	2908      	cmp	r1, #8
    3bea:	d00d      	beq.n	3c08 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3bec:	f031 0304 	bics.w	r3, r1, #4
    3bf0:	d00a      	beq.n	3c08 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3bf2:	f011 0102 	ands.w	r1, r1, #2
    3bf6:	d008      	beq.n	3c0a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3bf8:	4621      	mov	r1, r4
    3bfa:	4808      	ldr	r0, [pc, #32]	; (3c1c <mutex_free_platform+0x44>)
    3bfc:	f00b ffcd 	bl	fb9a <k_mem_slab_free>
        mutex->mutex = NULL;
    3c00:	2300      	movs	r3, #0
    3c02:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3c04:	2300      	movs	r3, #0
    3c06:	6063      	str	r3, [r4, #4]
}
    3c08:	bd10      	pop	{r4, pc}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3c0a:	2214      	movs	r2, #20
    3c0c:	6820      	ldr	r0, [r4, #0]
    3c0e:	f00c f944 	bl	fe9a <memset>
    3c12:	e7f7      	b.n	3c04 <mutex_free_platform+0x2c>
    3c14:	2000006c 	.word	0x2000006c
    3c18:	0006314b 	.word	0x0006314b
    3c1c:	20000670 	.word	0x20000670

00003c20 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3c20:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3c22:	4604      	mov	r4, r0
    3c24:	b918      	cbnz	r0, 3c2e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3c26:	4b16      	ldr	r3, [pc, #88]	; (3c80 <mutex_init_platform+0x60>)
    3c28:	4816      	ldr	r0, [pc, #88]	; (3c84 <mutex_init_platform+0x64>)
    3c2a:	685b      	ldr	r3, [r3, #4]
    3c2c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3c2e:	6863      	ldr	r3, [r4, #4]
    3c30:	2b04      	cmp	r3, #4
    3c32:	d023      	beq.n	3c7c <mutex_init_platform+0x5c>
    3c34:	2b08      	cmp	r3, #8
    3c36:	d021      	beq.n	3c7c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3c38:	b9cb      	cbnz	r3, 3c6e <mutex_init_platform+0x4e>
    3c3a:	6823      	ldr	r3, [r4, #0]
    3c3c:	b9bb      	cbnz	r3, 3c6e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3c3e:	f04f 32ff 	mov.w	r2, #4294967295
    3c42:	f04f 33ff 	mov.w	r3, #4294967295
    3c46:	4621      	mov	r1, r4
    3c48:	480f      	ldr	r0, [pc, #60]	; (3c88 <mutex_init_platform+0x68>)
    3c4a:	f006 fc65 	bl	a518 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3c4e:	b908      	cbnz	r0, 3c54 <mutex_init_platform+0x34>
    3c50:	6823      	ldr	r3, [r4, #0]
    3c52:	b91b      	cbnz	r3, 3c5c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3c54:	4b0a      	ldr	r3, [pc, #40]	; (3c80 <mutex_init_platform+0x60>)
    3c56:	480d      	ldr	r0, [pc, #52]	; (3c8c <mutex_init_platform+0x6c>)
    3c58:	685b      	ldr	r3, [r3, #4]
    3c5a:	4798      	blx	r3
    3c5c:	2214      	movs	r2, #20
    3c5e:	2100      	movs	r1, #0
    3c60:	6820      	ldr	r0, [r4, #0]
    3c62:	f00c f91a 	bl	fe9a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3c66:	6863      	ldr	r3, [r4, #4]
    3c68:	f043 0302 	orr.w	r3, r3, #2
    3c6c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3c6e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3c70:	f00b ffc9 	bl	fc06 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3c74:	6863      	ldr	r3, [r4, #4]
    3c76:	f043 0301 	orr.w	r3, r3, #1
    3c7a:	6063      	str	r3, [r4, #4]
}
    3c7c:	bd10      	pop	{r4, pc}
    3c7e:	bf00      	nop
    3c80:	2000006c 	.word	0x2000006c
    3c84:	0006314b 	.word	0x0006314b
    3c88:	20000670 	.word	0x20000670
    3c8c:	00063171 	.word	0x00063171

00003c90 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3c90:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    3c92:	b340      	cbz	r0, 3ce6 <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    3c94:	6843      	ldr	r3, [r0, #4]
    3c96:	2b04      	cmp	r3, #4
    3c98:	d00b      	beq.n	3cb2 <mutex_lock_platform+0x22>
    3c9a:	2b08      	cmp	r3, #8
    3c9c:	d016      	beq.n	3ccc <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3c9e:	b303      	cbz	r3, 3ce2 <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3ca0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3ca2:	f04f 32ff 	mov.w	r2, #4294967295
    3ca6:	f04f 33ff 	mov.w	r3, #4294967295
    3caa:	f006 fd09 	bl	a6c0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3cae:	b158      	cbz	r0, 3cc8 <mutex_lock_platform+0x38>
    3cb0:	e015      	b.n	3cde <mutex_lock_platform+0x4e>
    3cb2:	2201      	movs	r2, #1
    3cb4:	6803      	ldr	r3, [r0, #0]
    3cb6:	e8d3 1fef 	ldaex	r1, [r3]
    3cba:	2900      	cmp	r1, #0
    3cbc:	d103      	bne.n	3cc6 <mutex_lock_platform+0x36>
    3cbe:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d1f7      	bne.n	3cb6 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3cc6:	d10a      	bne.n	3cde <mutex_lock_platform+0x4e>
    3cc8:	2000      	movs	r0, #0
}
    3cca:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    3ccc:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    3cce:	4a07      	ldr	r2, [pc, #28]	; (3cec <mutex_lock_platform+0x5c>)
    3cd0:	781b      	ldrb	r3, [r3, #0]
    3cd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d0f4      	beq.n	3cc8 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3cde:	4804      	ldr	r0, [pc, #16]	; (3cf0 <mutex_lock_platform+0x60>)
    3ce0:	e7f3      	b.n	3cca <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3ce2:	4804      	ldr	r0, [pc, #16]	; (3cf4 <mutex_lock_platform+0x64>)
    3ce4:	e7f1      	b.n	3cca <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3ce6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3cea:	e7ee      	b.n	3cca <mutex_lock_platform+0x3a>
    3cec:	50030000 	.word	0x50030000
    3cf0:	ffff8fe9 	.word	0xffff8fe9
    3cf4:	ffff8fea 	.word	0xffff8fea

00003cf8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3cf8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3cfa:	4906      	ldr	r1, [pc, #24]	; (3d14 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3cfc:	2340      	movs	r3, #64	; 0x40
    3cfe:	2214      	movs	r2, #20
    3d00:	4805      	ldr	r0, [pc, #20]	; (3d18 <nrf_cc3xx_platform_mutex_init+0x20>)
    3d02:	f00b ff2e 	bl	fb62 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3d0a:	4904      	ldr	r1, [pc, #16]	; (3d1c <nrf_cc3xx_platform_mutex_init+0x24>)
    3d0c:	4804      	ldr	r0, [pc, #16]	; (3d20 <nrf_cc3xx_platform_mutex_init+0x28>)
    3d0e:	f007 bb81 	b.w	b414 <nrf_cc3xx_platform_set_mutexes>
    3d12:	bf00      	nop
    3d14:	20000690 	.word	0x20000690
    3d18:	20000670 	.word	0x20000670
    3d1c:	00062564 	.word	0x00062564
    3d20:	00062554 	.word	0x00062554

00003d24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3d24:	4901      	ldr	r1, [pc, #4]	; (3d2c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3d26:	2210      	movs	r2, #16
	str	r2, [r1]
    3d28:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3d2a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3d2c:	e000ed10 	.word	0xe000ed10

00003d30 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3d30:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3d32:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3d34:	f380 8811 	msr	BASEPRI, r0
	isb
    3d38:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3d3c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3d40:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3d42:	b662      	cpsie	i
	isb
    3d44:	f3bf 8f6f 	isb	sy

	bx	lr
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop

00003d4c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3d4c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3d4e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3d50:	f381 8811 	msr	BASEPRI, r1

	wfe
    3d54:	bf20      	wfe

	msr	BASEPRI, r0
    3d56:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3d5a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3d5c:	4770      	bx	lr
    3d5e:	bf00      	nop

00003d60 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3d60:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3d62:	2b00      	cmp	r3, #0
    3d64:	db08      	blt.n	3d78 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d66:	2201      	movs	r2, #1
    3d68:	f000 001f 	and.w	r0, r0, #31
    3d6c:	fa02 f000 	lsl.w	r0, r2, r0
    3d70:	4a02      	ldr	r2, [pc, #8]	; (3d7c <arch_irq_enable+0x1c>)
    3d72:	095b      	lsrs	r3, r3, #5
    3d74:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3d78:	4770      	bx	lr
    3d7a:	bf00      	nop
    3d7c:	e000e100 	.word	0xe000e100

00003d80 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3d80:	4b05      	ldr	r3, [pc, #20]	; (3d98 <arch_irq_is_enabled+0x18>)
    3d82:	0942      	lsrs	r2, r0, #5
    3d84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3d88:	2301      	movs	r3, #1
    3d8a:	f000 001f 	and.w	r0, r0, #31
    3d8e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3d92:	4010      	ands	r0, r2
    3d94:	4770      	bx	lr
    3d96:	bf00      	nop
    3d98:	e000e100 	.word	0xe000e100

00003d9c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3d9c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3d9e:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    3da0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3da4:	bfac      	ite	ge
    3da6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3daa:	4b06      	ldrlt	r3, [pc, #24]	; (3dc4 <z_arm_irq_priority_set+0x28>)
    3dac:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3db0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3db2:	bfab      	itete	ge
    3db4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3db8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3dbc:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3dc0:	5419      	strblt	r1, [r3, r0]
}
    3dc2:	4770      	bx	lr
    3dc4:	e000ed14 	.word	0xe000ed14

00003dc8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3dc8:	bf30      	wfi
    b z_SysNmiOnReset
    3dca:	f7ff bffd 	b.w	3dc8 <z_SysNmiOnReset>
    3dce:	bf00      	nop

00003dd0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3dd0:	4a0b      	ldr	r2, [pc, #44]	; (3e00 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3dd2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3dd4:	4b0b      	ldr	r3, [pc, #44]	; (3e04 <z_arm_prep_c+0x34>)
    3dd6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3dda:	609a      	str	r2, [r3, #8]
    3ddc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3de0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3de4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3de8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3df0:	f006 faf4 	bl	a3dc <z_bss_zero>
	z_data_copy();
    3df4:	f007 f8ce 	bl	af94 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3df8:	f000 f9ae 	bl	4158 <z_arm_interrupt_init>
	z_cstart();
    3dfc:	f006 faf8 	bl	a3f0 <z_cstart>
    3e00:	00000000 	.word	0x00000000
    3e04:	e000ed00 	.word	0xe000ed00

00003e08 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3e08:	4a09      	ldr	r2, [pc, #36]	; (3e30 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3e0a:	490a      	ldr	r1, [pc, #40]	; (3e34 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3e0c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3e0e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    3e10:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    3e12:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3e14:	4908      	ldr	r1, [pc, #32]	; (3e38 <arch_swap+0x30>)
    3e16:	684b      	ldr	r3, [r1, #4]
    3e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3e1c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3e1e:	2300      	movs	r3, #0
    3e20:	f383 8811 	msr	BASEPRI, r3
    3e24:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3e28:	6893      	ldr	r3, [r2, #8]
}
    3e2a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop
    3e30:	20000d24 	.word	0x20000d24
    3e34:	00062a50 	.word	0x00062a50
    3e38:	e000ed00 	.word	0xe000ed00

00003e3c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3e3c:	4913      	ldr	r1, [pc, #76]	; (3e8c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3e3e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3e40:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3e44:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3e46:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3e4a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3e4e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3e50:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3e54:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3e58:	4f0d      	ldr	r7, [pc, #52]	; (3e90 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3e5a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3e5e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3e60:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3e62:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3e64:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3e66:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3e68:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3e6a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3e6e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3e72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3e76:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3e7a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3e7e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3e80:	f009 fb68 	bl	d554 <configure_builtin_stack_guard>
    pop {r2, lr}
    3e84:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3e88:	4770      	bx	lr
    3e8a:	0000      	.short	0x0000
    ldr r1, =_kernel
    3e8c:	20000d24 	.word	0x20000d24
    ldr v4, =_SCS_ICSR
    3e90:	e000ed04 	.word	0xe000ed04

00003e94 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3e94:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3e98:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3e9a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3e9e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3ea2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3ea4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3ea8:	2902      	cmp	r1, #2
    beq _oops
    3eaa:	d0ff      	beq.n	3eac <_oops>

00003eac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3eac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3eae:	f009 fb42 	bl	d536 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3eb2:	bd01      	pop	{r0, pc}

00003eb4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3eb4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3eb8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    3eba:	490b      	ldr	r1, [pc, #44]	; (3ee8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    3ebc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3ec0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    3ec2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    3ec6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3eca:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    3ecc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    3ed0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3ed8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3edc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3ede:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3ee0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3ee2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3ee4:	4770      	bx	lr
    3ee6:	bf00      	nop
    3ee8:	0000d027 	.word	0x0000d027

00003eec <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3eec:	4b08      	ldr	r3, [pc, #32]	; (3f10 <arch_switch_to_main_thread+0x24>)
    3eee:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    3ef0:	6e43      	ldr	r3, [r0, #100]	; 0x64
    3ef2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3ef6:	4610      	mov	r0, r2
    3ef8:	f381 8809 	msr	PSP, r1
    3efc:	2100      	movs	r1, #0
    3efe:	b663      	cpsie	if
    3f00:	f381 8811 	msr	BASEPRI, r1
    3f04:	f3bf 8f6f 	isb	sy
    3f08:	2200      	movs	r2, #0
    3f0a:	2300      	movs	r3, #0
    3f0c:	f009 f88b 	bl	d026 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3f10:	20000d24 	.word	0x20000d24

00003f14 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3f14:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3f16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3f18:	4a0b      	ldr	r2, [pc, #44]	; (3f48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3f1a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3f1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3f1e:	bf1e      	ittt	ne
	movne	r1, #0
    3f20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3f22:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3f24:	f00b fe68 	blne	fbf8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3f28:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3f2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3f2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3f32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3f36:	4905      	ldr	r1, [pc, #20]	; (3f4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3f38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3f3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3f3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3f3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3f42:	4903      	ldr	r1, [pc, #12]	; (3f50 <_isr_wrapper+0x3c>)
	bx r1
    3f44:	4708      	bx	r1
    3f46:	0000      	.short	0x0000
	ldr r2, =_kernel
    3f48:	20000d24 	.word	0x20000d24
	ldr r1, =_sw_isr_table
    3f4c:	00010b10 	.word	0x00010b10
	ldr r1, =z_arm_int_exit
    3f50:	00003f55 	.word	0x00003f55

00003f54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3f54:	4b04      	ldr	r3, [pc, #16]	; (3f68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3f56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3f58:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3f5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3f5c:	d003      	beq.n	3f66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3f5e:	4903      	ldr	r1, [pc, #12]	; (3f6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3f64:	600a      	str	r2, [r1, #0]

00003f66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3f66:	4770      	bx	lr
	ldr r3, =_kernel
    3f68:	20000d24 	.word	0x20000d24
	ldr r1, =_SCS_ICSR
    3f6c:	e000ed04 	.word	0xe000ed04

00003f70 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3f70:	4b0e      	ldr	r3, [pc, #56]	; (3fac <mem_manage_fault.isra.0+0x3c>)
    3f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f78:	0792      	lsls	r2, r2, #30
    3f7a:	d508      	bpl.n	3f8e <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f80:	0612      	lsls	r2, r2, #24
    3f82:	d504      	bpl.n	3f8e <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    3f84:	b118      	cbz	r0, 3f8e <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3f8c:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3f8e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3f90:	4b06      	ldr	r3, [pc, #24]	; (3fac <mem_manage_fault.isra.0+0x3c>)
    3f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f98:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3f9a:	bf58      	it	pl
    3f9c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fa0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3fa4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3fa6:	7008      	strb	r0, [r1, #0]

	return reason;
}
    3fa8:	4770      	bx	lr
    3faa:	bf00      	nop
    3fac:	e000ed00 	.word	0xe000ed00

00003fb0 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3fb0:	4b0d      	ldr	r3, [pc, #52]	; (3fe8 <bus_fault.isra.0+0x38>)
    3fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fb8:	0592      	lsls	r2, r2, #22
    3fba:	d508      	bpl.n	3fce <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fc0:	0412      	lsls	r2, r2, #16
    3fc2:	d504      	bpl.n	3fce <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3fc4:	b118      	cbz	r0, 3fce <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    3fce:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3fd0:	4b05      	ldr	r3, [pc, #20]	; (3fe8 <bus_fault.isra.0+0x38>)
    3fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fd6:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3fd8:	bf58      	it	pl
    3fda:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fde:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    3fe2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3fe4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    3fe6:	4770      	bx	lr
    3fe8:	e000ed00 	.word	0xe000ed00

00003fec <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3fec:	4b09      	ldr	r3, [pc, #36]	; (4014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
    3fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3ff2:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3ffe:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4002:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4006:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    400a:	bf18      	it	ne
    400c:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    400e:	629a      	str	r2, [r3, #40]	; 0x28
}
    4010:	4770      	bx	lr
    4012:	bf00      	nop
    4014:	e000ed00 	.word	0xe000ed00

00004018 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4018:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    401a:	4b41      	ldr	r3, [pc, #260]	; (4120 <z_arm_fault+0x108>)
{
    401c:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    401e:	685b      	ldr	r3, [r3, #4]
    4020:	2500      	movs	r5, #0
{
    4022:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4024:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4028:	f385 8811 	msr	BASEPRI, r5
    402c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4030:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    4034:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    4038:	d111      	bne.n	405e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    403a:	f002 010c 	and.w	r1, r2, #12
    403e:	2908      	cmp	r1, #8
    4040:	d00d      	beq.n	405e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4042:	0711      	lsls	r1, r2, #28
    4044:	d401      	bmi.n	404a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4046:	4604      	mov	r4, r0
			*nested_exc = true;
    4048:	2501      	movs	r5, #1
	*recoverable = false;
    404a:	2200      	movs	r2, #0
    404c:	3b03      	subs	r3, #3
    404e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    4052:	2b03      	cmp	r3, #3
    4054:	d85c      	bhi.n	4110 <z_arm_fault+0xf8>
    4056:	e8df f003 	tbb	[pc, r3]
    405a:	5304      	.short	0x5304
    405c:	5057      	.short	0x5057
		return NULL;
    405e:	462c      	mov	r4, r5
    4060:	e7f3      	b.n	404a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4062:	4a2f      	ldr	r2, [pc, #188]	; (4120 <z_arm_fault+0x108>)
    4064:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4066:	f013 0302 	ands.w	r3, r3, #2
    406a:	d151      	bne.n	4110 <z_arm_fault+0xf8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    406c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    406e:	2900      	cmp	r1, #0
    4070:	db17      	blt.n	40a2 <z_arm_fault+0x8a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4072:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4074:	0052      	lsls	r2, r2, #1
    4076:	d514      	bpl.n	40a2 <z_arm_fault+0x8a>
	uint16_t fault_insn = *(ret_addr - 1);
    4078:	69a2      	ldr	r2, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    407a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    407e:	f64d 7202 	movw	r2, #57090	; 0xdf02
    4082:	4291      	cmp	r1, r2
    4084:	d00c      	beq.n	40a0 <z_arm_fault+0x88>
		} else if (SCB_MMFSR != 0) {
    4086:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
    408a:	f602 6226 	addw	r2, r2, #3622	; 0xe26
    408e:	7812      	ldrb	r2, [r2, #0]
    4090:	b32a      	cbz	r2, 40de <z_arm_fault+0xc6>
			reason = mem_manage_fault(esf, 1, recoverable);
    4092:	2001      	movs	r0, #1
    4094:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    4098:	f7ff ff6a 	bl	3f70 <mem_manage_fault.isra.0>
    409c:	4603      	mov	r3, r0
		break;
    409e:	e000      	b.n	40a2 <z_arm_fault+0x8a>
			reason = esf->basic.r0;
    40a0:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    40a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    40a6:	b9c2      	cbnz	r2, 40da <z_arm_fault+0xc2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    40a8:	ae02      	add	r6, sp, #8
    40aa:	f104 0720 	add.w	r7, r4, #32
    40ae:	4632      	mov	r2, r6
    40b0:	6820      	ldr	r0, [r4, #0]
    40b2:	6861      	ldr	r1, [r4, #4]
    40b4:	3408      	adds	r4, #8
    40b6:	c203      	stmia	r2!, {r0, r1}
    40b8:	42bc      	cmp	r4, r7
    40ba:	4616      	mov	r6, r2
    40bc:	d1f7      	bne.n	40ae <z_arm_fault+0x96>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    40be:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40c0:	b345      	cbz	r5, 4114 <z_arm_fault+0xfc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    40c2:	f3c2 0108 	ubfx	r1, r2, #0, #9
    40c6:	b921      	cbnz	r1, 40d2 <z_arm_fault+0xba>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    40c8:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    40cc:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    40d0:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    40d2:	4618      	mov	r0, r3
    40d4:	a902      	add	r1, sp, #8
    40d6:	f009 fa2c 	bl	d532 <z_arm_fatal_error>
}
    40da:	b00b      	add	sp, #44	; 0x2c
    40dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    40de:	4a11      	ldr	r2, [pc, #68]	; (4124 <z_arm_fault+0x10c>)
    40e0:	7812      	ldrb	r2, [r2, #0]
    40e2:	b12a      	cbz	r2, 40f0 <z_arm_fault+0xd8>
			reason = bus_fault(esf, 1, recoverable);
    40e4:	2001      	movs	r0, #1
    40e6:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    40ea:	f7ff ff61 	bl	3fb0 <bus_fault.isra.0>
    40ee:	e7d5      	b.n	409c <z_arm_fault+0x84>
		} else if (SCB_UFSR != 0) {
    40f0:	4a0d      	ldr	r2, [pc, #52]	; (4128 <z_arm_fault+0x110>)
    40f2:	8812      	ldrh	r2, [r2, #0]
    40f4:	b292      	uxth	r2, r2
    40f6:	2a00      	cmp	r2, #0
    40f8:	d0d3      	beq.n	40a2 <z_arm_fault+0x8a>
		reason = usage_fault(esf);
    40fa:	f7ff ff77 	bl	3fec <usage_fault.isra.0>
    40fe:	e7cd      	b.n	409c <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    4100:	2000      	movs	r0, #0
    4102:	f10d 0107 	add.w	r1, sp, #7
    4106:	e7c7      	b.n	4098 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
    4108:	2000      	movs	r0, #0
    410a:	f10d 0107 	add.w	r1, sp, #7
    410e:	e7ec      	b.n	40ea <z_arm_fault+0xd2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4110:	2300      	movs	r3, #0
    4112:	e7c6      	b.n	40a2 <z_arm_fault+0x8a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4114:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    4118:	f022 0201 	bic.w	r2, r2, #1
    411c:	e7d8      	b.n	40d0 <z_arm_fault+0xb8>
    411e:	bf00      	nop
    4120:	e000ed00 	.word	0xe000ed00
    4124:	e000ed29 	.word	0xe000ed29
    4128:	e000ed2a 	.word	0xe000ed2a

0000412c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    412c:	4b04      	ldr	r3, [pc, #16]	; (4140 <z_arm_fault_init+0x14>)
    412e:	695a      	ldr	r2, [r3, #20]
    4130:	f042 0210 	orr.w	r2, r2, #16
    4134:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4136:	695a      	ldr	r2, [r3, #20]
    4138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    413c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    413e:	4770      	bx	lr
    4140:	e000ed00 	.word	0xe000ed00

00004144 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4144:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4148:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    414c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    414e:	4672      	mov	r2, lr
	bl z_arm_fault
    4150:	f7ff ff62 	bl	4018 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4154:	bd01      	pop	{r0, pc}
    4156:	bf00      	nop

00004158 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4158:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    415a:	2120      	movs	r1, #32
    415c:	4803      	ldr	r0, [pc, #12]	; (416c <z_arm_interrupt_init+0x14>)
    415e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4160:	3301      	adds	r3, #1
    4162:	2b45      	cmp	r3, #69	; 0x45
    4164:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4168:	d1f9      	bne.n	415e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    416a:	4770      	bx	lr
    416c:	e000e100 	.word	0xe000e100

00004170 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4170:	2000      	movs	r0, #0
    msr CONTROL, r0
    4172:	f380 8814 	msr	CONTROL, r0
    isb
    4176:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    417a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    417c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    4180:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4184:	f00c fc52 	bl	10a2c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4188:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    418a:	490e      	ldr	r1, [pc, #56]	; (41c4 <__start+0x54>)
    str r0, [r1]
    418c:	6008      	str	r0, [r1, #0]
    dsb
    418e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4192:	480d      	ldr	r0, [pc, #52]	; (41c8 <__start+0x58>)
    msr msp, r0
    4194:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4198:	f000 f83c 	bl	4214 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    419c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    419e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    41a2:	480a      	ldr	r0, [pc, #40]	; (41cc <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    41a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    41a8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    41aa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    41ae:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    41b2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    41b4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    41b6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    41ba:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    41be:	f7ff fe07 	bl	3dd0 <z_arm_prep_c>
    41c2:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    41c4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    41c8:	200303d8 	.word	0x200303d8
    ldr r0, =z_interrupt_stacks
    41cc:	20030518 	.word	0x20030518

000041d0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    41d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    41d4:	4905      	ldr	r1, [pc, #20]	; (41ec <sys_arch_reboot+0x1c>)
    41d6:	4b06      	ldr	r3, [pc, #24]	; (41f0 <sys_arch_reboot+0x20>)
    41d8:	68ca      	ldr	r2, [r1, #12]
    41da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    41de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    41e0:	60cb      	str	r3, [r1, #12]
    41e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    41e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    41e8:	e7fd      	b.n	41e6 <sys_arch_reboot+0x16>
    41ea:	bf00      	nop
    41ec:	e000ed00 	.word	0xe000ed00
    41f0:	05fa0004 	.word	0x05fa0004

000041f4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    41f4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    41f6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    41f8:	4a05      	ldr	r2, [pc, #20]	; (4210 <z_arm_clear_arm_mpu_config+0x1c>)
    41fa:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    41fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    4200:	428b      	cmp	r3, r1
    4202:	d100      	bne.n	4206 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    4204:	4770      	bx	lr
  mpu->RNR = rnr;
    4206:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    4208:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    420a:	3301      	adds	r3, #1
    420c:	e7f8      	b.n	4200 <z_arm_clear_arm_mpu_config+0xc>
    420e:	bf00      	nop
    4210:	e000ed90 	.word	0xe000ed90

00004214 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4214:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4216:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4218:	2400      	movs	r4, #0
    421a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    421e:	f7ff ffe9 	bl	41f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    4222:	4a0e      	ldr	r2, [pc, #56]	; (425c <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    4224:	4623      	mov	r3, r4
    4226:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    4228:	f04f 34ff 	mov.w	r4, #4294967295
    422c:	f103 0020 	add.w	r0, r3, #32
    4230:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4232:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    4234:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4238:	d1f8      	bne.n	422c <z_arm_init_arch_hw_at_boot+0x18>
    423a:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    423c:	f04f 30ff 	mov.w	r0, #4294967295
    4240:	f103 0260 	add.w	r2, r3, #96	; 0x60
    4244:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4246:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4248:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    424c:	d1f8      	bne.n	4240 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    424e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4254:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4258:	bd10      	pop	{r4, pc}
    425a:	bf00      	nop
    425c:	e000e100 	.word	0xe000e100

00004260 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4260:	4b06      	ldr	r3, [pc, #24]	; (427c <z_impl_k_thread_abort+0x1c>)
    4262:	689b      	ldr	r3, [r3, #8]
    4264:	4283      	cmp	r3, r0
    4266:	d107      	bne.n	4278 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4268:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    426c:	b123      	cbz	r3, 4278 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    426e:	4a04      	ldr	r2, [pc, #16]	; (4280 <z_impl_k_thread_abort+0x20>)
    4270:	6853      	ldr	r3, [r2, #4]
    4272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4276:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4278:	f006 be3a 	b.w	aef0 <z_thread_abort>
    427c:	20000d24 	.word	0x20000d24
    4280:	e000ed00 	.word	0xe000ed00

00004284 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4286:	4c09      	ldr	r4, [pc, #36]	; (42ac <z_arm_configure_static_mpu_regions+0x28>)
    4288:	4a09      	ldr	r2, [pc, #36]	; (42b0 <z_arm_configure_static_mpu_regions+0x2c>)
    428a:	4623      	mov	r3, r4
    428c:	2101      	movs	r1, #1
    428e:	4809      	ldr	r0, [pc, #36]	; (42b4 <z_arm_configure_static_mpu_regions+0x30>)
    4290:	f000 f8dc 	bl	444c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4294:	2300      	movs	r3, #0
    4296:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    4298:	4b07      	ldr	r3, [pc, #28]	; (42b8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    429a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    429c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    429e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    42a0:	9301      	str	r3, [sp, #4]
    42a2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    42a4:	f000 f8dc 	bl	4460 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    42a8:	b004      	add	sp, #16
    42aa:	bd10      	pop	{r4, pc}
    42ac:	20080000 	.word	0x20080000
    42b0:	20000000 	.word	0x20000000
    42b4:	00062578 	.word	0x00062578
    42b8:	20000340 	.word	0x20000340

000042bc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    42bc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    42be:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    42c0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    42c2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    42c6:	f004 031f 	and.w	r3, r4, #31
    42ca:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    42cc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    42ce:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    42d0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    42d4:	4904      	ldr	r1, [pc, #16]	; (42e8 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    42d6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    42da:	f043 0301 	orr.w	r3, r3, #1
    42de:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    42e0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    42e2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    42e4:	bd10      	pop	{r4, pc}
    42e6:	bf00      	nop
    42e8:	e000ed90 	.word	0xe000ed90

000042ec <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    42ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42f0:	4688      	mov	r8, r1
    42f2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    42f4:	4606      	mov	r6, r0
    42f6:	f04f 0900 	mov.w	r9, #0
	MPU->RNR = index;
    42fa:	4d4a      	ldr	r5, [pc, #296]	; (4424 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    42fc:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    42fe:	45c1      	cmp	r9, r8
    4300:	da05      	bge.n	430e <mpu_configure_regions_and_partition.constprop.0+0x22>
		if (regions[i].size == 0U) {
    4302:	6877      	ldr	r7, [r6, #4]
    4304:	b3bf      	cbz	r7, 4376 <mpu_configure_regions_and_partition.constprop.0+0x8a>
		&&
    4306:	2f1f      	cmp	r7, #31
    4308:	d805      	bhi.n	4316 <mpu_configure_regions_and_partition.constprop.0+0x2a>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    430a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    430e:	4620      	mov	r0, r4
    4310:	b005      	add	sp, #20
    4312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    4316:	06fb      	lsls	r3, r7, #27
    4318:	d1f7      	bne.n	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
		((part->start &
    431a:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    431e:	f01a 0f1f 	tst.w	sl, #31
    4322:	d1f2      	bne.n	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4324:	4650      	mov	r0, sl
    4326:	f009 f91e 	bl	d566 <arm_cmse_mpu_region_get>
    432a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    432c:	eb07 000a 	add.w	r0, r7, sl
    4330:	3801      	subs	r0, #1
    4332:	f009 f918 	bl	d566 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4336:	4583      	cmp	fp, r0
    4338:	d1e7      	bne.n	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
		if ((u_reg_index == -EINVAL) ||
    433a:	f11b 0f16 	cmn.w	fp, #22
    433e:	d0e4      	beq.n	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
			(u_reg_index > (reg_index - 1))) {
    4340:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4342:	455b      	cmp	r3, fp
    4344:	dbe1      	blt.n	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    4346:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    434a:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    434c:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4350:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    4352:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4356:	e9d6 3200 	ldrd	r3, r2, [r6]
    435a:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    435c:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    435e:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4362:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    4366:	d11c      	bne.n	43a2 <mpu_configure_regions_and_partition.constprop.0+0xb6>
    4368:	4557      	cmp	r7, sl
    436a:	d108      	bne.n	437e <mpu_configure_regions_and_partition.constprop.0+0x92>
			mpu_configure_region(u_reg_index, &regions[i]);
    436c:	4631      	mov	r1, r6
    436e:	fa5f f08b 	uxtb.w	r0, fp
    4372:	f009 f901 	bl	d578 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    4376:	f109 0901 	add.w	r9, r9, #1
    437a:	360c      	adds	r6, #12
    437c:	e7bf      	b.n	42fe <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    437e:	4631      	mov	r1, r6
	MPU->RNR = index;
    4380:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4384:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    4386:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    438a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    438e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4390:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    4392:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    4394:	f009 f8f0 	bl	d578 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    4398:	f110 0f16 	cmn.w	r0, #22
    439c:	d0b5      	beq.n	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
			reg_index++;
    439e:	1c44      	adds	r4, r0, #1
    43a0:	e7e9      	b.n	4376 <mpu_configure_regions_and_partition.constprop.0+0x8a>
		} else if (reg_last == u_reg_last) {
    43a2:	3b01      	subs	r3, #1
    43a4:	4557      	cmp	r7, sl
    43a6:	b2e0      	uxtb	r0, r4
    43a8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    43ac:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    43b0:	d106      	bne.n	43c0 <mpu_configure_regions_and_partition.constprop.0+0xd4>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    43b2:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    43b4:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    43b6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    43ba:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    43bc:	612b      	str	r3, [r5, #16]
			reg_index =
    43be:	e7e9      	b.n	4394 <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    43c0:	6929      	ldr	r1, [r5, #16]
    43c2:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    43c6:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    43c8:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    43ca:	4631      	mov	r1, r6
    43cc:	f009 f8d4 	bl	d578 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    43d0:	f110 0f16 	cmn.w	r0, #22
    43d4:	d099      	beq.n	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
    43d6:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    43da:	68ea      	ldr	r2, [r5, #12]
    43dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    43e0:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    43e2:	f362 0304 	bfi	r3, r2, #0, #5
    43e6:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    43ea:	692b      	ldr	r3, [r5, #16]
    43ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
    43f0:	085b      	lsrs	r3, r3, #1
    43f2:	f363 1247 	bfi	r2, r3, #5, #3
    43f6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    43fa:	e9d6 3200 	ldrd	r3, r2, [r6]
    43fe:	4413      	add	r3, r2
    4400:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    4402:	f023 031f 	bic.w	r3, r3, #31
    4406:	443b      	add	r3, r7
			reg_index++;
    4408:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    440a:	eba3 0a0a 	sub.w	sl, r3, sl
    440e:	b2e0      	uxtb	r0, r4
    4410:	f02a 031f 	bic.w	r3, sl, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4414:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    4416:	9303      	str	r3, [sp, #12]
    4418:	f63f af77 	bhi.w	430a <mpu_configure_regions_and_partition.constprop.0+0x1e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    441c:	4669      	mov	r1, sp
    441e:	f7ff ff4d 	bl	42bc <region_init>
    4422:	e7bc      	b.n	439e <mpu_configure_regions_and_partition.constprop.0+0xb2>
    4424:	e000ed90 	.word	0xe000ed90

00004428 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4428:	2205      	movs	r2, #5
    442a:	4b03      	ldr	r3, [pc, #12]	; (4438 <arm_core_mpu_enable+0x10>)
    442c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    442e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4432:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4436:	4770      	bx	lr
    4438:	e000ed90 	.word	0xe000ed90

0000443c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    443c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4440:	2200      	movs	r2, #0
    4442:	4b01      	ldr	r3, [pc, #4]	; (4448 <arm_core_mpu_disable+0xc>)
    4444:	605a      	str	r2, [r3, #4]
}
    4446:	4770      	bx	lr
    4448:	e000ed90 	.word	0xe000ed90

0000444c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    444c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    444e:	4c03      	ldr	r4, [pc, #12]	; (445c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4450:	7822      	ldrb	r2, [r4, #0]
    4452:	f7ff ff4b 	bl	42ec <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4456:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4458:	bd10      	pop	{r4, pc}
    445a:	bf00      	nop
    445c:	200281f2 	.word	0x200281f2

00004460 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    4460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4464:	4d26      	ldr	r5, [pc, #152]	; (4500 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    4466:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4468:	4606      	mov	r6, r0
    446a:	f04f 0800 	mov.w	r8, #0
    446e:	46ab      	mov	fp, r5
	MPU->RNR = index;
    4470:	4f24      	ldr	r7, [pc, #144]	; (4504 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4472:	45d0      	cmp	r8, sl
    4474:	da1b      	bge.n	44ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    4476:	f8d6 9004 	ldr.w	r9, [r6, #4]
    447a:	f1b9 0f00 	cmp.w	r9, #0
    447e:	d039      	beq.n	44f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4480:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4482:	4608      	mov	r0, r1
    4484:	9101      	str	r1, [sp, #4]
    4486:	f009 f86e 	bl	d566 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    448a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    448c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    448e:	eb09 0001 	add.w	r0, r9, r1
    4492:	3801      	subs	r0, #1
    4494:	f009 f867 	bl	d566 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4498:	4284      	cmp	r4, r0
    449a:	f04f 0214 	mov.w	r2, #20
    449e:	4b1a      	ldr	r3, [pc, #104]	; (4508 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    44a0:	d008      	beq.n	44b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    44a2:	f06f 0315 	mvn.w	r3, #21
    44a6:	fb02 f808 	mul.w	r8, r2, r8
    44aa:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    44ae:	b003      	add	sp, #12
    44b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    44b4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    44b8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    44ba:	d0f8      	beq.n	44ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    44bc:	7819      	ldrb	r1, [r3, #0]
    44be:	42a1      	cmp	r1, r4
    44c0:	ddf5      	ble.n	44ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    44c2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    44c6:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    44c8:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    44ca:	68fc      	ldr	r4, [r7, #12]
    44cc:	f100 0108 	add.w	r1, r0, #8
    44d0:	7b00      	ldrb	r0, [r0, #12]
    44d2:	f364 0004 	bfi	r0, r4, #0, #5
    44d6:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    44d8:	6938      	ldr	r0, [r7, #16]
    44da:	790c      	ldrb	r4, [r1, #4]
    44dc:	0840      	lsrs	r0, r0, #1
    44de:	f360 1447 	bfi	r4, r0, #5, #3
    44e2:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    44e4:	68f9      	ldr	r1, [r7, #12]
    44e6:	f021 011f 	bic.w	r1, r1, #31
    44ea:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    44ec:	6939      	ldr	r1, [r7, #16]
    44ee:	f021 011f 	bic.w	r1, r1, #31
    44f2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    44f4:	f108 0801 	add.w	r8, r8, #1
    44f8:	3514      	adds	r5, #20
    44fa:	360c      	adds	r6, #12
    44fc:	e7b9      	b.n	4472 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    44fe:	bf00      	nop
    4500:	20000b90 	.word	0x20000b90
    4504:	e000ed90 	.word	0xe000ed90
    4508:	200281f2 	.word	0x200281f2

0000450c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    450c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    450e:	4c0e      	ldr	r4, [pc, #56]	; (4548 <z_arm_mpu_init+0x3c>)
    4510:	6825      	ldr	r5, [r4, #0]
    4512:	2d08      	cmp	r5, #8
    4514:	d814      	bhi.n	4540 <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4516:	f7ff ff91 	bl	443c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    451a:	2000      	movs	r0, #0
	MPU->MAIR0 =
    451c:	4b0b      	ldr	r3, [pc, #44]	; (454c <z_arm_mpu_init+0x40>)
    451e:	4a0c      	ldr	r2, [pc, #48]	; (4550 <z_arm_mpu_init+0x44>)
    4520:	631a      	str	r2, [r3, #48]	; 0x30
    4522:	4285      	cmp	r5, r0
    4524:	d105      	bne.n	4532 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4526:	4b0b      	ldr	r3, [pc, #44]	; (4554 <z_arm_mpu_init+0x48>)
    4528:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    452a:	f7ff ff7d 	bl	4428 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    452e:	2000      	movs	r0, #0
}
    4530:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4532:	6861      	ldr	r1, [r4, #4]
    4534:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    4538:	f7ff fec0 	bl	42bc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    453c:	3001      	adds	r0, #1
    453e:	e7f0      	b.n	4522 <z_arm_mpu_init+0x16>
		return -1;
    4540:	f04f 30ff 	mov.w	r0, #4294967295
    4544:	e7f4      	b.n	4530 <z_arm_mpu_init+0x24>
    4546:	bf00      	nop
    4548:	00062584 	.word	0x00062584
    454c:	e000ed90 	.word	0xe000ed90
    4550:	0044ffaa 	.word	0x0044ffaa
    4554:	200281f2 	.word	0x200281f2

00004558 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4558:	4b01      	ldr	r3, [pc, #4]	; (4560 <__stdout_hook_install+0x8>)
    455a:	6018      	str	r0, [r3, #0]
}
    455c:	4770      	bx	lr
    455e:	bf00      	nop
    4560:	2000002c 	.word	0x2000002c

00004564 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4566:	4606      	mov	r6, r0
    4568:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    456a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
    456c:	4f06      	ldr	r7, [pc, #24]	; (4588 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
    456e:	42ac      	cmp	r4, r5
    4570:	da08      	bge.n	4584 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    4572:	683b      	ldr	r3, [r7, #0]
    4574:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4576:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    4578:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    457a:	f104 0401 	add.w	r4, r4, #1
    457e:	d001      	beq.n	4584 <z_impl_zephyr_read_stdin+0x20>
    4580:	280d      	cmp	r0, #13
    4582:	d1f4      	bne.n	456e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    4584:	4620      	mov	r0, r4
    4586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4588:	20000028 	.word	0x20000028

0000458c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    458e:	460d      	mov	r5, r1
    4590:	4f09      	ldr	r7, [pc, #36]	; (45b8 <z_impl_zephyr_write_stdout+0x2c>)
    4592:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4594:	f1c0 0401 	rsb	r4, r0, #1
    4598:	19a3      	adds	r3, r4, r6
    459a:	429d      	cmp	r5, r3
    459c:	dc01      	bgt.n	45a2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    459e:	4628      	mov	r0, r5
    45a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    45a2:	7873      	ldrb	r3, [r6, #1]
    45a4:	2b0a      	cmp	r3, #10
    45a6:	d102      	bne.n	45ae <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    45a8:	200d      	movs	r0, #13
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    45ae:	683b      	ldr	r3, [r7, #0]
    45b0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    45b4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    45b6:	e7ef      	b.n	4598 <z_impl_zephyr_write_stdout+0xc>
    45b8:	2000002c 	.word	0x2000002c

000045bc <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    45bc:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    45be:	2105      	movs	r1, #5
    45c0:	4801      	ldr	r0, [pc, #4]	; (45c8 <_exit+0xc>)
    45c2:	f7ff ffe3 	bl	458c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    45c6:	e7fe      	b.n	45c6 <_exit+0xa>
    45c8:	0006319e 	.word	0x0006319e

000045cc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    45cc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    45ce:	4c07      	ldr	r4, [pc, #28]	; (45ec <_sbrk+0x20>)
    45d0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    45d2:	18c2      	adds	r2, r0, r3
    45d4:	4806      	ldr	r0, [pc, #24]	; (45f0 <_sbrk+0x24>)
    45d6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    45da:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
    45de:	428a      	cmp	r2, r1
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
    45e0:	bf2e      	itee	cs
    45e2:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
    45e6:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    45e8:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
    45ea:	bd10      	pop	{r4, pc}
    45ec:	20000ba4 	.word	0x20000ba4
    45f0:	20030d18 	.word	0x20030d18

000045f4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    45f4:	4b0d      	ldr	r3, [pc, #52]	; (462c <onoff_stop+0x38>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    45f6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    45f8:	1ac5      	subs	r5, r0, r3
{
    45fa:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    45fc:	200c      	movs	r0, #12
    45fe:	f3c5 1547 	ubfx	r5, r5, #5, #8
    4602:	fb00 3005 	mla	r0, r0, r5, r3
{
    4606:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    4608:	3088      	adds	r0, #136	; 0x88
    460a:	2140      	movs	r1, #64	; 0x40
    460c:	f009 f811 	bl	d632 <set_off_state>
	if (err < 0) {
    4610:	1e01      	subs	r1, r0, #0
    4612:	db05      	blt.n	4620 <onoff_stop+0x2c>
	get_sub_config(dev, type)->stop();
    4614:	4b06      	ldr	r3, [pc, #24]	; (4630 <onoff_stop+0x3c>)
    4616:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    461a:	686b      	ldr	r3, [r5, #4]
    461c:	4798      	blx	r3
	return 0;
    461e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    4620:	4620      	mov	r0, r4
    4622:	4633      	mov	r3, r6
}
    4624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4628:	4718      	bx	r3
    462a:	bf00      	nop
    462c:	20000bb8 	.word	0x20000bb8
    4630:	000625c0 	.word	0x000625c0

00004634 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    4638:	f04f 080c 	mov.w	r8, #12
	size_t offset = (size_t)(mgr - data->mgr);
    463c:	4c0f      	ldr	r4, [pc, #60]	; (467c <onoff_start+0x48>)
{
    463e:	4606      	mov	r6, r0
	size_t offset = (size_t)(mgr - data->mgr);
    4640:	1b07      	subs	r7, r0, r4
    4642:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    4646:	fb08 f807 	mul.w	r8, r8, r7
    464a:	f108 0088 	add.w	r0, r8, #136	; 0x88
{
    464e:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    4650:	4420      	add	r0, r4
    4652:	2140      	movs	r1, #64	; 0x40
    4654:	f009 f806 	bl	d664 <set_starting_state>
	if (err < 0) {
    4658:	1e01      	subs	r1, r0, #0
    465a:	db09      	blt.n	4670 <onoff_start+0x3c>
	subdata->cb = cb;
    465c:	4b08      	ldr	r3, [pc, #32]	; (4680 <onoff_start+0x4c>)
    465e:	4444      	add	r4, r8
	subdata->user_data = user_data;
    4660:	e9c4 3520 	strd	r3, r5, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
    4664:	4b07      	ldr	r3, [pc, #28]	; (4684 <onoff_start+0x50>)
    4666:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    466a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    466e:	4718      	bx	r3
		notify(mgr, err);
    4670:	4630      	mov	r0, r6
    4672:	462b      	mov	r3, r5
}
    4674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    4678:	4718      	bx	r3
    467a:	bf00      	nop
    467c:	20000bb8 	.word	0x20000bb8
    4680:	0000d6c7 	.word	0x0000d6c7
    4684:	000625c0 	.word	0x000625c0

00004688 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    468c:	2200      	movs	r2, #0
    468e:	2101      	movs	r1, #1
{
    4690:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4692:	2005      	movs	r0, #5
    4694:	f7ff fb82 	bl	3d9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4698:	2005      	movs	r0, #5
    469a:	f7ff fb61 	bl	3d60 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    469e:	4811      	ldr	r0, [pc, #68]	; (46e4 <clk_init+0x5c>)
    46a0:	f001 f844 	bl	572c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    46a4:	4b10      	ldr	r3, [pc, #64]	; (46e8 <clk_init+0x60>)
    46a6:	4298      	cmp	r0, r3
    46a8:	d119      	bne.n	46de <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    46aa:	f009 fa6c 	bl	db86 <nrfx_clock_enable>
    46ae:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    46b0:	f04f 080c 	mov.w	r8, #12
    46b4:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    46b6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 46ec <clk_init+0x64>
						get_sub_data(dev, i);
    46ba:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    46bc:	4649      	mov	r1, r9
    46be:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    46c2:	f008 fc54 	bl	cf6e <onoff_manager_init>
		if (err < 0) {
    46c6:	2800      	cmp	r0, #0
    46c8:	db07      	blt.n	46da <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    46ca:	fb08 5504 	mla	r5, r8, r4, r5
    46ce:	3401      	adds	r4, #1
	for (enum clock_control_nrf_type i = 0;
    46d0:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    46d2:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    46d6:	d1f0      	bne.n	46ba <clk_init+0x32>
	}

	return 0;
    46d8:	2000      	movs	r0, #0
}
    46da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    46de:	f06f 0004 	mvn.w	r0, #4
    46e2:	e7fa      	b.n	46da <clk_init+0x52>
    46e4:	00004729 	.word	0x00004729
    46e8:	0bad0000 	.word	0x0bad0000
    46ec:	000625e0 	.word	0x000625e0

000046f0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    46f0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    46f2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    46f4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    46f6:	434b      	muls	r3, r1
    46f8:	4809      	ldr	r0, [pc, #36]	; (4720 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    46fa:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    46fc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    46fe:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    4700:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    4704:	4418      	add	r0, r3
	sub_data->cb = NULL;
    4706:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    470a:	f008 ffc9 	bl	d6a0 <set_on_state>
	if (callback) {
    470e:	b12d      	cbz	r5, 471c <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4710:	4632      	mov	r2, r6
    4712:	462b      	mov	r3, r5
}
    4714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4718:	4802      	ldr	r0, [pc, #8]	; (4724 <clkstarted_handle.constprop.0+0x34>)
    471a:	4718      	bx	r3
}
    471c:	bd70      	pop	{r4, r5, r6, pc}
    471e:	bf00      	nop
    4720:	20000bb8 	.word	0x20000bb8
    4724:	00010a98 	.word	0x00010a98

00004728 <clock_event_handler>:
	switch (event) {
    4728:	2805      	cmp	r0, #5
    472a:	d812      	bhi.n	4752 <clock_event_handler+0x2a>
    472c:	e8df f000 	tbb	[pc, r0]
    4730:	11110f03 	.word	0x11110f03
    4734:	0b0d      	.short	0x0b0d
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4736:	4b07      	ldr	r3, [pc, #28]	; (4754 <clock_event_handler+0x2c>)
    4738:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    473c:	f010 0007 	ands.w	r0, r0, #7
    4740:	d107      	bne.n	4752 <clock_event_handler+0x2a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4742:	f7ff bfd5 	b.w	46f0 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    4746:	2002      	movs	r0, #2
    4748:	e7fb      	b.n	4742 <clock_event_handler+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    474a:	2003      	movs	r0, #3
    474c:	e7f9      	b.n	4742 <clock_event_handler+0x1a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    474e:	2001      	movs	r0, #1
    4750:	e7f7      	b.n	4742 <clock_event_handler+0x1a>
}
    4752:	4770      	bx	lr
    4754:	20000bb8 	.word	0x20000bb8

00004758 <generic_hfclk_start>:
{
    4758:	b508      	push	{r3, lr}
	__asm__ volatile(
    475a:	f04f 0320 	mov.w	r3, #32
    475e:	f3ef 8111 	mrs	r1, BASEPRI
    4762:	f383 8812 	msr	BASEPRI_MAX, r3
    4766:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    476a:	4a12      	ldr	r2, [pc, #72]	; (47b4 <generic_hfclk_start+0x5c>)
    476c:	6813      	ldr	r3, [r2, #0]
    476e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4772:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4776:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4778:	d00c      	beq.n	4794 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    477a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    477e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4782:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4786:	f013 0301 	ands.w	r3, r3, #1
    478a:	d003      	beq.n	4794 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    478c:	480a      	ldr	r0, [pc, #40]	; (47b8 <generic_hfclk_start+0x60>)
    478e:	f008 ff87 	bl	d6a0 <set_on_state>
			already_started = true;
    4792:	2301      	movs	r3, #1
	__asm__ volatile(
    4794:	f381 8811 	msr	BASEPRI, r1
    4798:	f3bf 8f6f 	isb	sy
	if (already_started) {
    479c:	b123      	cbz	r3, 47a8 <generic_hfclk_start+0x50>
}
    479e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    47a2:	2000      	movs	r0, #0
    47a4:	f7ff bfa4 	b.w	46f0 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    47a8:	2001      	movs	r0, #1
}
    47aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    47ae:	f000 bfcd 	b.w	574c <nrfx_clock_start>
    47b2:	bf00      	nop
    47b4:	20000c68 	.word	0x20000c68
    47b8:	20000c40 	.word	0x20000c40

000047bc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47bc:	4b07      	ldr	r3, [pc, #28]	; (47dc <generic_hfclk_stop+0x20>)
    47be:	e8d3 2fef 	ldaex	r2, [r3]
    47c2:	f022 0102 	bic.w	r1, r2, #2
    47c6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    47ca:	2800      	cmp	r0, #0
    47cc:	d1f7      	bne.n	47be <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    47ce:	07d3      	lsls	r3, r2, #31
    47d0:	d402      	bmi.n	47d8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    47d2:	2001      	movs	r0, #1
    47d4:	f001 b80e 	b.w	57f4 <nrfx_clock_stop>
}
    47d8:	4770      	bx	lr
    47da:	bf00      	nop
    47dc:	20000c68 	.word	0x20000c68

000047e0 <api_blocking_start>:
{
    47e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    47e2:	2200      	movs	r2, #0
    47e4:	2301      	movs	r3, #1
    47e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    47ea:	466b      	mov	r3, sp
    47ec:	4a08      	ldr	r2, [pc, #32]	; (4810 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    47ee:	f8cd d000 	str.w	sp, [sp]
    47f2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    47f6:	f008 ff95 	bl	d724 <api_start>
	if (err < 0) {
    47fa:	2800      	cmp	r0, #0
    47fc:	db05      	blt.n	480a <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    47fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4802:	2300      	movs	r3, #0
    4804:	4668      	mov	r0, sp
    4806:	f006 f83f 	bl	a888 <z_impl_k_sem_take>
}
    480a:	b005      	add	sp, #20
    480c:	f85d fb04 	ldr.w	pc, [sp], #4
    4810:	0000d6f7 	.word	0x0000d6f7

00004814 <z_nrf_clock_control_lf_on>:
{
    4814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4818:	2201      	movs	r2, #1
    481a:	4606      	mov	r6, r0
    481c:	4939      	ldr	r1, [pc, #228]	; (4904 <z_nrf_clock_control_lf_on+0xf0>)
    481e:	e8d1 3fef 	ldaex	r3, [r1]
    4822:	e8c1 2fe0 	stlex	r0, r2, [r1]
    4826:	2800      	cmp	r0, #0
    4828:	d1f9      	bne.n	481e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    482a:	b933      	cbnz	r3, 483a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    482c:	4936      	ldr	r1, [pc, #216]	; (4908 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    482e:	4837      	ldr	r0, [pc, #220]	; (490c <z_nrf_clock_control_lf_on+0xf8>)
    4830:	604b      	str	r3, [r1, #4]
    4832:	60cb      	str	r3, [r1, #12]
    4834:	608a      	str	r2, [r1, #8]
    4836:	f008 fbad 	bl	cf94 <onoff_request>
	switch (start_mode) {
    483a:	1e73      	subs	r3, r6, #1
    483c:	2b01      	cmp	r3, #1
    483e:	d832      	bhi.n	48a6 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4840:	2e01      	cmp	r6, #1
    4842:	d107      	bne.n	4854 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4844:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4848:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    484c:	f003 0303 	and.w	r3, r3, #3
    4850:	2b02      	cmp	r3, #2
    4852:	d028      	beq.n	48a6 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4854:	f00b f9ca 	bl	fbec <k_is_in_isr>
    4858:	4604      	mov	r4, r0
    485a:	b918      	cbnz	r0, 4864 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    485c:	4b2c      	ldr	r3, [pc, #176]	; (4910 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    485e:	781b      	ldrb	r3, [r3, #0]
    4860:	2b00      	cmp	r3, #0
    4862:	d147      	bne.n	48f4 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    4864:	f04f 0320 	mov.w	r3, #32
    4868:	f3ef 8511 	mrs	r5, BASEPRI
    486c:	f383 8812 	msr	BASEPRI_MAX, r3
    4870:	f3bf 8f6f 	isb	sy
    4874:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4876:	4f27      	ldr	r7, [pc, #156]	; (4914 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4878:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4918 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    487c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 491c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4880:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4884:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4888:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    488c:	03d2      	lsls	r2, r2, #15
    488e:	d50c      	bpl.n	48aa <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4890:	f003 0303 	and.w	r3, r3, #3
    4894:	2b02      	cmp	r3, #2
    4896:	d001      	beq.n	489c <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4898:	2e01      	cmp	r6, #1
    489a:	d106      	bne.n	48aa <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    489c:	b324      	cbz	r4, 48e8 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    489e:	f385 8811 	msr	BASEPRI, r5
    48a2:	f3bf 8f6f 	isb	sy
}
    48a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    48aa:	b1c4      	cbz	r4, 48de <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    48ac:	4628      	mov	r0, r5
    48ae:	f7ff fa4d 	bl	3d4c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    48b2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    48b6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    48ba:	b2db      	uxtb	r3, r3
    48bc:	2b01      	cmp	r3, #1
    48be:	d1df      	bne.n	4880 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48c0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    48c2:	2900      	cmp	r1, #0
    48c4:	d0dc      	beq.n	4880 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48c6:	2100      	movs	r1, #0
    48c8:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    48ca:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    48cc:	2102      	movs	r1, #2
    48ce:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    48d2:	2220      	movs	r2, #32
    48d4:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48d8:	f8c9 3000 	str.w	r3, [r9]
}
    48dc:	e7d0      	b.n	4880 <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
    48de:	2100      	movs	r1, #0
    48e0:	2021      	movs	r0, #33	; 0x21
    48e2:	f006 fae5 	bl	aeb0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    48e6:	e7e4      	b.n	48b2 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    48e8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    48ec:	2202      	movs	r2, #2
    48ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    48f2:	e7d8      	b.n	48a6 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    48f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    48f8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    48fa:	4605      	mov	r5, r0
    48fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4900:	e7b9      	b.n	4876 <z_nrf_clock_control_lf_on+0x62>
    4902:	bf00      	nop
    4904:	20000c6c 	.word	0x20000c6c
    4908:	20000ba8 	.word	0x20000ba8
    490c:	20000bd8 	.word	0x20000bd8
    4910:	20028214 	.word	0x20028214
    4914:	50005104 	.word	0x50005104
    4918:	e000e100 	.word	0xe000e100
    491c:	50005008 	.word	0x50005008

00004920 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4920:	4b0a      	ldr	r3, [pc, #40]	; (494c <console_out+0x2c>)
{
    4922:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4924:	b2c6      	uxtb	r6, r0
{
    4926:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4928:	681b      	ldr	r3, [r3, #0]
    492a:	4630      	mov	r0, r6
    492c:	4798      	blx	r3

	if (handled_by_debug_server) {
    492e:	2801      	cmp	r0, #1
    4930:	d00a      	beq.n	4948 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4932:	2c0a      	cmp	r4, #10
    4934:	4d06      	ldr	r5, [pc, #24]	; (4950 <console_out+0x30>)
    4936:	d103      	bne.n	4940 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    4938:	210d      	movs	r1, #13
    493a:	6828      	ldr	r0, [r5, #0]
    493c:	f008 ff0d 	bl	d75a <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    4940:	4631      	mov	r1, r6
    4942:	6828      	ldr	r0, [r5, #0]
    4944:	f008 ff09 	bl	d75a <uart_poll_out>

	return c;
}
    4948:	4620      	mov	r0, r4
    494a:	bd70      	pop	{r4, r5, r6, pc}
    494c:	20000030 	.word	0x20000030
    4950:	20000c70 	.word	0x20000c70

00004954 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4954:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4956:	4808      	ldr	r0, [pc, #32]	; (4978 <uart_console_init+0x24>)
    4958:	4b08      	ldr	r3, [pc, #32]	; (497c <uart_console_init+0x28>)
    495a:	6018      	str	r0, [r3, #0]
    495c:	f00b f8dc 	bl	fb18 <z_device_ready>
    4960:	b138      	cbz	r0, 4972 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4962:	4807      	ldr	r0, [pc, #28]	; (4980 <uart_console_init+0x2c>)
    4964:	f7ff fdf8 	bl	4558 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4968:	4805      	ldr	r0, [pc, #20]	; (4980 <uart_console_init+0x2c>)
    496a:	f7fe fa83 	bl	2e74 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    496e:	2000      	movs	r0, #0
}
    4970:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4972:	f06f 0012 	mvn.w	r0, #18
    4976:	e7fb      	b.n	4970 <uart_console_init+0x1c>
    4978:	00010ab0 	.word	0x00010ab0
    497c:	20000c70 	.word	0x20000c70
    4980:	00004921 	.word	0x00004921

00004984 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4984:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    4986:	4b09      	ldr	r3, [pc, #36]	; (49ac <gpio_nrfx_init+0x28>)
    4988:	781a      	ldrb	r2, [r3, #0]
    498a:	b96a      	cbnz	r2, 49a8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    498c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    498e:	200d      	movs	r0, #13
		gpio_initialized = true;
    4990:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4992:	2105      	movs	r1, #5
    4994:	f7ff fa02 	bl	3d9c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    4998:	200d      	movs	r0, #13
    499a:	f7ff f9e1 	bl	3d60 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    499e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    49a2:	4b03      	ldr	r3, [pc, #12]	; (49b0 <gpio_nrfx_init+0x2c>)
    49a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    49a8:	2000      	movs	r0, #0
    49aa:	bd08      	pop	{r3, pc}
    49ac:	200281f3 	.word	0x200281f3
    49b0:	5000d000 	.word	0x5000d000

000049b4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    49b4:	4b2d      	ldr	r3, [pc, #180]	; (4a6c <gpio_nrfx_config+0xb8>)
{
    49b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49b8:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    49ba:	482d      	ldr	r0, [pc, #180]	; (4a70 <gpio_nrfx_config+0xbc>)
    49bc:	4013      	ands	r3, r2
    49be:	4283      	cmp	r3, r0
    49c0:	d045      	beq.n	4a4e <gpio_nrfx_config+0x9a>
    49c2:	d80d      	bhi.n	49e0 <gpio_nrfx_config+0x2c>
    49c4:	2b06      	cmp	r3, #6
    49c6:	d015      	beq.n	49f4 <gpio_nrfx_config+0x40>
    49c8:	d805      	bhi.n	49d6 <gpio_nrfx_config+0x22>
    49ca:	b19b      	cbz	r3, 49f4 <gpio_nrfx_config+0x40>
    49cc:	2b02      	cmp	r3, #2
    49ce:	d040      	beq.n	4a52 <gpio_nrfx_config+0x9e>
    49d0:	f06f 0015 	mvn.w	r0, #21
    49d4:	e03a      	b.n	4a4c <gpio_nrfx_config+0x98>
    49d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    49da:	d1f9      	bne.n	49d0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    49dc:	2301      	movs	r3, #1
    49de:	e009      	b.n	49f4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    49e0:	4824      	ldr	r0, [pc, #144]	; (4a74 <gpio_nrfx_config+0xc0>)
    49e2:	4283      	cmp	r3, r0
    49e4:	d037      	beq.n	4a56 <gpio_nrfx_config+0xa2>
    49e6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    49ea:	d036      	beq.n	4a5a <gpio_nrfx_config+0xa6>
    49ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    49f0:	d1ee      	bne.n	49d0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    49f2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    49f4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    49f6:	bf4c      	ite	mi
    49f8:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    49fa:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    49fe:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    4a02:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    4a04:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4a08:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    4a0c:	d506      	bpl.n	4a1c <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4a0e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a12:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4a14:	d023      	beq.n	4a5e <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4a16:	2201      	movs	r2, #1
    4a18:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    4a1a:	60ba      	str	r2, [r7, #8]
    return pin_number >> 5;
    4a1c:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
    4a1e:	4a16      	ldr	r2, [pc, #88]	; (4a78 <gpio_nrfx_config+0xc4>)
    4a20:	4c16      	ldr	r4, [pc, #88]	; (4a7c <gpio_nrfx_config+0xc8>)
    *p_pin = pin_number & 0x1F;
    4a22:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
    4a26:	2f01      	cmp	r7, #1
    4a28:	bf08      	it	eq
    4a2a:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a2c:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
    4a30:	2000      	movs	r0, #0
    4a32:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4a36:	f8d1 4200 	ldr.w	r4, [r1, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a3a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4a3e:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a42:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4a46:	4323      	orrs	r3, r4
    reg->PIN_CNF[pin_number] = cnf;
    4a48:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    4a4e:	2307      	movs	r3, #7
    4a50:	e7d0      	b.n	49f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    4a52:	2304      	movs	r3, #4
    4a54:	e7ce      	b.n	49f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    4a56:	2305      	movs	r3, #5
    4a58:	e7cc      	b.n	49f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    4a5a:	2303      	movs	r3, #3
    4a5c:	e7ca      	b.n	49f4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    4a5e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4a60:	bf42      	ittt	mi
    4a62:	2201      	movmi	r2, #1
    4a64:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    4a66:	60fa      	strmi	r2, [r7, #12]
}
    4a68:	e7d8      	b.n	4a1c <gpio_nrfx_config+0x68>
    4a6a:	bf00      	nop
    4a6c:	00f00006 	.word	0x00f00006
    4a70:	00100006 	.word	0x00100006
    4a74:	00400002 	.word	0x00400002
    4a78:	50842800 	.word	0x50842800
    4a7c:	50842500 	.word	0x50842500

00004a80 <nrf_gpio_cfg_sense_set>:
{
    4a80:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    4a82:	4b09      	ldr	r3, [pc, #36]	; (4aa8 <nrf_gpio_cfg_sense_set+0x28>)
    4a84:	4c09      	ldr	r4, [pc, #36]	; (4aac <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
    4a86:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    4a8a:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    4a8c:	2801      	cmp	r0, #1
    4a8e:	bf08      	it	eq
    4a90:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4a92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4a9a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4a9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    4aa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    4aa6:	bd10      	pop	{r4, pc}
    4aa8:	50842500 	.word	0x50842500
    4aac:	50842800 	.word	0x50842800

00004ab0 <check_level_trigger_pins>:
{
    4ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    4ab4:	6903      	ldr	r3, [r0, #16]
{
    4ab6:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    4ab8:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    4abc:	68de      	ldr	r6, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4abe:	430a      	orrs	r2, r1
    4ac0:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t check_pins = level_pins;
    4ac4:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    4ac6:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    4ac8:	f04f 0900 	mov.w	r9, #0
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    4acc:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4ad0:	691b      	ldr	r3, [r3, #16]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    4ad2:	f8da 2004 	ldr.w	r2, [sl, #4]
        case 1: return NRF_P1;
    4ad6:	f8df b068 	ldr.w	fp, [pc, #104]	; 4b40 <check_level_trigger_pins+0x90>
    return p_reg->IN;
    4ada:	6915      	ldr	r5, [r2, #16]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4adc:	405d      	eors	r5, r3
        case 1: return NRF_P1;
    4ade:	4b17      	ldr	r3, [pc, #92]	; (4b3c <check_level_trigger_pins+0x8c>)
	uint32_t out = pin_states & level_pins;
    4ae0:	ea26 0505 	bic.w	r5, r6, r5
	while (check_pins) {
    4ae4:	b917      	cbnz	r7, 4aec <check_level_trigger_pins+0x3c>
}
    4ae6:	4628      	mov	r0, r5
    4ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    4aec:	423c      	tst	r4, r7
    4aee:	d020      	beq.n	4b32 <check_level_trigger_pins+0x82>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4af0:	f89a 2008 	ldrb.w	r2, [sl, #8]
    4af4:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    4af8:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4afa:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
			if (!(level_pins & bit)) {
    4afe:	d112      	bne.n	4b26 <check_level_trigger_pins+0x76>
    return pin_number >> 5;
    4b00:	0941      	lsrs	r1, r0, #5
        case 1: return NRF_P1;
    4b02:	2901      	cmp	r1, #1
    4b04:	bf14      	ite	ne
    4b06:	4659      	movne	r1, fp
    4b08:	4619      	moveq	r1, r3
    *p_pin = pin_number & 0x1F;
    4b0a:	f000 021f 	and.w	r2, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4b0e:	3280      	adds	r2, #128	; 0x80
    4b10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4b14:	f3c2 4201 	ubfx	r2, r2, #16, #2
				if (high) {
    4b18:	2a02      	cmp	r2, #2
					*sense_levels |= bit;
    4b1a:	bf02      	ittt	eq
    4b1c:	f8d8 2000 	ldreq.w	r2, [r8]
    4b20:	4322      	orreq	r2, r4
    4b22:	f8c8 2000 	streq.w	r2, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    4b26:	2100      	movs	r1, #0
    4b28:	f7ff ffaa 	bl	4a80 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    4b2c:	4b03      	ldr	r3, [pc, #12]	; (4b3c <check_level_trigger_pins+0x8c>)
    4b2e:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    4b32:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    4b36:	0064      	lsls	r4, r4, #1
    4b38:	e7d4      	b.n	4ae4 <check_level_trigger_pins+0x34>
    4b3a:	bf00      	nop
    4b3c:	50842800 	.word	0x50842800
    4b40:	50842500 	.word	0x50842500

00004b44 <gpio_nrfx_pin_interrupt_configure>:
{
    4b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b46:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4b48:	6841      	ldr	r1, [r0, #4]
    4b4a:	f006 051f 	and.w	r5, r6, #31
    4b4e:	7a09      	ldrb	r1, [r1, #8]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    4b50:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    4b54:	6907      	ldr	r7, [r0, #16]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    4b56:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    4b5a:	d111      	bne.n	4b80 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    4b5c:	4c5f      	ldr	r4, [pc, #380]	; (4cdc <gpio_nrfx_pin_interrupt_configure+0x198>)
    4b5e:	f8df c188 	ldr.w	ip, [pc, #392]	; 4ce8 <gpio_nrfx_pin_interrupt_configure+0x1a4>
    return pin_number >> 5;
    4b62:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    4b64:	2801      	cmp	r0, #1
    4b66:	bf14      	ite	ne
    4b68:	4620      	movne	r0, r4
    4b6a:	4660      	moveq	r0, ip
    *p_pin = pin_number & 0x1F;
    4b6c:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4b70:	3180      	adds	r1, #128	; 0x80
    4b72:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4b76:	07c8      	lsls	r0, r1, #31
    4b78:	d507      	bpl.n	4b8a <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    4b7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4b7e:	e093      	b.n	4ca8 <gpio_nrfx_pin_interrupt_configure+0x164>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4b80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    4b84:	68f9      	ldr	r1, [r7, #12]
    4b86:	f000 8091 	beq.w	4cac <gpio_nrfx_pin_interrupt_configure+0x168>
    4b8a:	2101      	movs	r1, #1
    4b8c:	68f8      	ldr	r0, [r7, #12]
    4b8e:	40b1      	lsls	r1, r6
    4b90:	4301      	orrs	r1, r0
    4b92:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4b94:	2101      	movs	r1, #1
    4b96:	6978      	ldr	r0, [r7, #20]
    4b98:	40b1      	lsls	r1, r6
    4b9a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    4b9e:	bf0c      	ite	eq
    4ba0:	4308      	orreq	r0, r1
    4ba2:	4388      	bicne	r0, r1
    4ba4:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4ba6:	2000      	movs	r0, #0
    4ba8:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    4baa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4bae:	bf0c      	ite	eq
    4bb0:	430a      	orreq	r2, r1
    4bb2:	438a      	bicne	r2, r1
    4bb4:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    4bb6:	693a      	ldr	r2, [r7, #16]
    4bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    4bbc:	bf0c      	ite	eq
    4bbe:	4311      	orreq	r1, r2
    4bc0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    4bc4:	4a46      	ldr	r2, [pc, #280]	; (4ce0 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    4bc6:	6139      	str	r1, [r7, #16]
    4bc8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    4bcc:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4bce:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    4bd2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    4bd6:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    4bda:	428d      	cmp	r5, r1
    4bdc:	d16b      	bne.n	4cb6 <gpio_nrfx_pin_interrupt_configure+0x172>
		    && (intenset & BIT(i))) {
    4bde:	fa23 f100 	lsr.w	r1, r3, r0
    4be2:	07c9      	lsls	r1, r1, #31
    4be4:	d567      	bpl.n	4cb6 <gpio_nrfx_pin_interrupt_configure+0x172>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    4be6:	0083      	lsls	r3, r0, #2
    4be8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4bec:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4bf0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    4bf4:	f021 0101 	bic.w	r1, r1, #1
    4bf8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    4bfc:	2301      	movs	r3, #1
    4bfe:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    4c00:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    4c04:	b2c0      	uxtb	r0, r0
    4c06:	f000 fee3 	bl	59d0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    4c0a:	4628      	mov	r0, r5
    4c0c:	2100      	movs	r1, #0
    4c0e:	f7ff ff37 	bl	4a80 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    4c12:	68f8      	ldr	r0, [r7, #12]
    4c14:	40f0      	lsrs	r0, r6
    4c16:	f010 0001 	ands.w	r0, r0, #1
    4c1a:	d045      	beq.n	4ca8 <gpio_nrfx_pin_interrupt_configure+0x164>
		if (data->trig_edge & BIT(pin)) {
    4c1c:	6978      	ldr	r0, [r7, #20]
    4c1e:	40f0      	lsrs	r0, r6
    4c20:	f010 0401 	ands.w	r4, r0, #1
    4c24:	d04e      	beq.n	4cc4 <gpio_nrfx_pin_interrupt_configure+0x180>
				if (data->double_edge & BIT(pin)) {
    4c26:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4c28:	f10d 0007 	add.w	r0, sp, #7
				if (data->double_edge & BIT(pin)) {
    4c2c:	40f3      	lsrs	r3, r6
    4c2e:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4c30:	bf57      	itett	pl
    4c32:	6939      	ldrpl	r1, [r7, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    4c34:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4c36:	fa21 f606 	lsrpl.w	r6, r1, r6
    4c3a:	f006 0601 	andpl.w	r6, r6, #1
    4c3e:	bf5c      	itt	pl
    4c40:	f1c6 0602 	rsbpl	r6, r6, #2
    4c44:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4c46:	f000 fee5 	bl	5a14 <nrfx_gpiote_channel_alloc>
    4c4a:	4b26      	ldr	r3, [pc, #152]	; (4ce4 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    4c4c:	4298      	cmp	r0, r3
    4c4e:	d136      	bne.n	4cbe <gpio_nrfx_pin_interrupt_configure+0x17a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4c50:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    4c52:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c56:	022d      	lsls	r5, r5, #8
    4c58:	008b      	lsls	r3, r1, #2
    4c5a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4c5e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c62:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c66:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c6a:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    4c6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    4c72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c76:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4c7a:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    4c7c:	008a      	lsls	r2, r1, #2
    4c7e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4c82:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c86:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    4c8a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4c8e:	6010      	str	r0, [r2, #0]
    4c90:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4c92:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4c96:	f042 0201 	orr.w	r2, r2, #1
    4c9a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    4c9e:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    4ca0:	4a0f      	ldr	r2, [pc, #60]	; (4ce0 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    4ca2:	408b      	lsls	r3, r1
    4ca4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4ca8:	b003      	add	sp, #12
    4caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4cac:	2001      	movs	r0, #1
    4cae:	40b0      	lsls	r0, r6
    4cb0:	ea21 0100 	bic.w	r1, r1, r0
    4cb4:	e76d      	b.n	4b92 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4cb6:	3001      	adds	r0, #1
    4cb8:	2808      	cmp	r0, #8
    4cba:	d188      	bne.n	4bce <gpio_nrfx_pin_interrupt_configure+0x8a>
    4cbc:	e7a5      	b.n	4c0a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    4cbe:	f06f 0012 	mvn.w	r0, #18
    4cc2:	e7f1      	b.n	4ca8 <gpio_nrfx_pin_interrupt_configure+0x164>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4cc4:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    4cc6:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4cc8:	40f1      	lsrs	r1, r6
    4cca:	f001 0101 	and.w	r1, r1, #1
    4cce:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    4cd2:	b2c9      	uxtb	r1, r1
    4cd4:	f7ff fed4 	bl	4a80 <nrf_gpio_cfg_sense_set>
	int res = 0;
    4cd8:	4620      	mov	r0, r4
    4cda:	e7e5      	b.n	4ca8 <gpio_nrfx_pin_interrupt_configure+0x164>
    4cdc:	50842500 	.word	0x50842500
    4ce0:	5000d000 	.word	0x5000d000
    4ce4:	0bad0000 	.word	0x0bad0000
    4ce8:	50842800 	.word	0x50842800

00004cec <gpiote_event_handler>:
{
    4cec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    4cee:	2400      	movs	r4, #0
{
    4cf0:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    4cf2:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    4cf6:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4cfa:	4e26      	ldr	r6, [pc, #152]	; (4d94 <gpiote_event_handler+0xa8>)
    4cfc:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    4cfe:	b15d      	cbz	r5, 4d18 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    4d00:	a902      	add	r1, sp, #8
    4d02:	4825      	ldr	r0, [pc, #148]	; (4d98 <gpiote_event_handler+0xac>)
    4d04:	f7ff fed4 	bl	4ab0 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4d08:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    4d0a:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4d0c:	4823      	ldr	r0, [pc, #140]	; (4d9c <gpiote_event_handler+0xb0>)
    4d0e:	f7ff fecf 	bl	4ab0 <check_level_trigger_pins>
		fired_triggers[1] =
    4d12:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d14:	6034      	str	r4, [r6, #0]
    4d16:	6833      	ldr	r3, [r6, #0]
{
    4d18:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    4d1a:	2601      	movs	r6, #1
    4d1c:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    4d1e:	4c20      	ldr	r4, [pc, #128]	; (4da0 <gpiote_event_handler+0xb4>)
    4d20:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    4d24:	fa06 f102 	lsl.w	r1, r6, r2
    4d28:	4219      	tst	r1, r3
    4d2a:	d01b      	beq.n	4d64 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d2c:	0091      	lsls	r1, r2, #2
    4d2e:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4d32:	f501 4151 	add.w	r1, r1, #53504	; 0xd100
    4d36:	680b      	ldr	r3, [r1, #0]
    4d38:	b1a3      	cbz	r3, 4d64 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4d3a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    4d3e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    4d42:	af04      	add	r7, sp, #16
    4d44:	f3c3 3040 	ubfx	r0, r3, #13, #1
    4d48:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    4d4c:	f850 7c10 	ldr.w	r7, [r0, #-16]
    4d50:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4d54:	fa06 f303 	lsl.w	r3, r6, r3
    4d58:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d5a:	f8c1 c000 	str.w	ip, [r1]
    4d5e:	f840 3c10 	str.w	r3, [r0, #-16]
    4d62:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4d64:	3201      	adds	r2, #1
    4d66:	2a08      	cmp	r2, #8
    4d68:	d1da      	bne.n	4d20 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    4d6a:	9a00      	ldr	r2, [sp, #0]
    4d6c:	b11a      	cbz	r2, 4d76 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    4d6e:	490a      	ldr	r1, [pc, #40]	; (4d98 <gpiote_event_handler+0xac>)
    4d70:	480c      	ldr	r0, [pc, #48]	; (4da4 <gpiote_event_handler+0xb8>)
    4d72:	f008 fcf7 	bl	d764 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    4d76:	9a01      	ldr	r2, [sp, #4]
    4d78:	b11a      	cbz	r2, 4d82 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    4d7a:	4908      	ldr	r1, [pc, #32]	; (4d9c <gpiote_event_handler+0xb0>)
    4d7c:	480a      	ldr	r0, [pc, #40]	; (4da8 <gpiote_event_handler+0xbc>)
    4d7e:	f008 fcf1 	bl	d764 <gpio_fire_callbacks>
	if (port_event) {
    4d82:	b12d      	cbz	r5, 4d90 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    4d84:	4804      	ldr	r0, [pc, #16]	; (4d98 <gpiote_event_handler+0xac>)
    4d86:	f008 fd50 	bl	d82a <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    4d8a:	4804      	ldr	r0, [pc, #16]	; (4d9c <gpiote_event_handler+0xb0>)
    4d8c:	f008 fd4d 	bl	d82a <cfg_level_pins>
}
    4d90:	b005      	add	sp, #20
    4d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d94:	5000d17c 	.word	0x5000d17c
    4d98:	00010ae0 	.word	0x00010ae0
    4d9c:	00010af8 	.word	0x00010af8
    4da0:	5000d000 	.word	0x5000d000
    4da4:	20000c78 	.word	0x20000c78
    4da8:	20000c94 	.word	0x20000c94

00004dac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    4dac:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    4dae:	794b      	ldrb	r3, [r1, #5]
    4db0:	2b01      	cmp	r3, #1
    4db2:	d02c      	beq.n	4e0e <uarte_nrfx_configure+0x62>
    4db4:	2b03      	cmp	r3, #3
    4db6:	d127      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4db8:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4dba:	798b      	ldrb	r3, [r1, #6]
    4dbc:	2b03      	cmp	r3, #3
    4dbe:	d123      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4dc0:	79cd      	ldrb	r5, [r1, #7]
    4dc2:	b12d      	cbz	r5, 4dd0 <uarte_nrfx_configure+0x24>
    4dc4:	2d01      	cmp	r5, #1
    4dc6:	d11f      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    4dc8:	6843      	ldr	r3, [r0, #4]
    4dca:	685b      	ldr	r3, [r3, #4]
    4dcc:	079b      	lsls	r3, r3, #30
    4dce:	d01b      	beq.n	4e08 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4dd0:	790a      	ldrb	r2, [r1, #4]
    4dd2:	2a01      	cmp	r2, #1
    4dd4:	d01d      	beq.n	4e12 <uarte_nrfx_configure+0x66>
    4dd6:	2a02      	cmp	r2, #2
    4dd8:	d01f      	beq.n	4e1a <uarte_nrfx_configure+0x6e>
    4dda:	b9aa      	cbnz	r2, 4e08 <uarte_nrfx_configure+0x5c>
    4ddc:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4dde:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4de0:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    4de2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4de6:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    4de8:	d06e      	beq.n	4ec8 <uarte_nrfx_configure+0x11c>
    4dea:	d833      	bhi.n	4e54 <uarte_nrfx_configure+0xa8>
    4dec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4df0:	d06d      	beq.n	4ece <uarte_nrfx_configure+0x122>
    4df2:	d81c      	bhi.n	4e2e <uarte_nrfx_configure+0x82>
    4df4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4df8:	d06b      	beq.n	4ed2 <uarte_nrfx_configure+0x126>
    4dfa:	d810      	bhi.n	4e1e <uarte_nrfx_configure+0x72>
    4dfc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4e00:	d06a      	beq.n	4ed8 <uarte_nrfx_configure+0x12c>
    4e02:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4e06:	d06a      	beq.n	4ede <uarte_nrfx_configure+0x132>
    4e08:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4e0c:	e05b      	b.n	4ec6 <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
    4e0e:	2700      	movs	r7, #0
    4e10:	e7d3      	b.n	4dba <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    4e12:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4e16:	220e      	movs	r2, #14
    4e18:	e7e1      	b.n	4dde <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    4e1a:	2400      	movs	r4, #0
    4e1c:	e7fb      	b.n	4e16 <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
    4e1e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4e22:	d05f      	beq.n	4ee4 <uarte_nrfx_configure+0x138>
    4e24:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4e28:	d1ee      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4e2a:	4b39      	ldr	r3, [pc, #228]	; (4f10 <uarte_nrfx_configure+0x164>)
    4e2c:	e03e      	b.n	4eac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    4e2e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4e32:	d05a      	beq.n	4eea <uarte_nrfx_configure+0x13e>
    4e34:	d807      	bhi.n	4e46 <uarte_nrfx_configure+0x9a>
    4e36:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4e3a:	d058      	beq.n	4eee <uarte_nrfx_configure+0x142>
    4e3c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4e40:	d1e2      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4e42:	4b34      	ldr	r3, [pc, #208]	; (4f14 <uarte_nrfx_configure+0x168>)
    4e44:	e032      	b.n	4eac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    4e46:	f647 2c12 	movw	ip, #31250	; 0x7a12
    4e4a:	4563      	cmp	r3, ip
    4e4c:	d1dc      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4e4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4e52:	e02b      	b.n	4eac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    4e54:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4e58:	d04b      	beq.n	4ef2 <uarte_nrfx_configure+0x146>
    4e5a:	d813      	bhi.n	4e84 <uarte_nrfx_configure+0xd8>
    4e5c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4e60:	d04a      	beq.n	4ef8 <uarte_nrfx_configure+0x14c>
    4e62:	d809      	bhi.n	4e78 <uarte_nrfx_configure+0xcc>
    4e64:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    4e68:	4563      	cmp	r3, ip
    4e6a:	d047      	beq.n	4efc <uarte_nrfx_configure+0x150>
    4e6c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4e70:	d1ca      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4e72:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4e76:	e019      	b.n	4eac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    4e78:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    4e7c:	d1c4      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4e7e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4e82:	e013      	b.n	4eac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    4e84:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4e88:	d03b      	beq.n	4f02 <uarte_nrfx_configure+0x156>
    4e8a:	d809      	bhi.n	4ea0 <uarte_nrfx_configure+0xf4>
    4e8c:	f8df c098 	ldr.w	ip, [pc, #152]	; 4f28 <uarte_nrfx_configure+0x17c>
    4e90:	4563      	cmp	r3, ip
    4e92:	d039      	beq.n	4f08 <uarte_nrfx_configure+0x15c>
    4e94:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4e98:	d1b6      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4e9a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4e9e:	e005      	b.n	4eac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    4ea0:	f8df c088 	ldr.w	ip, [pc, #136]	; 4f2c <uarte_nrfx_configure+0x180>
    4ea4:	4563      	cmp	r3, ip
    4ea6:	d1af      	bne.n	4e08 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4eac:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    4eb0:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    4eb2:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    4eb4:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    4eb6:	4322      	orrs	r2, r4
    4eb8:	3304      	adds	r3, #4
    4eba:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4ebc:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    4ec0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4ec4:	2000      	movs	r0, #0
}
    4ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4ec8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4ecc:	e7ee      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4ece:	4b12      	ldr	r3, [pc, #72]	; (4f18 <uarte_nrfx_configure+0x16c>)
    4ed0:	e7ec      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4ed2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4ed6:	e7e9      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
    4ed8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4edc:	e7e6      	b.n	4eac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    4ede:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4ee2:	e7e3      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4ee4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4ee8:	e7e0      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4eea:	4b0c      	ldr	r3, [pc, #48]	; (4f1c <uarte_nrfx_configure+0x170>)
    4eec:	e7de      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4eee:	4b0c      	ldr	r3, [pc, #48]	; (4f20 <uarte_nrfx_configure+0x174>)
    4ef0:	e7dc      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4ef2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4ef6:	e7d9      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4ef8:	4b0a      	ldr	r3, [pc, #40]	; (4f24 <uarte_nrfx_configure+0x178>)
    4efa:	e7d7      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4efc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4f00:	e7d4      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4f02:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4f06:	e7d1      	b.n	4eac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4f08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4f0c:	e7ce      	b.n	4eac <uarte_nrfx_configure+0x100>
    4f0e:	bf00      	nop
    4f10:	0013b000 	.word	0x0013b000
    4f14:	004ea000 	.word	0x004ea000
    4f18:	00275000 	.word	0x00275000
    4f1c:	0075c000 	.word	0x0075c000
    4f20:	003af000 	.word	0x003af000
    4f24:	013a9000 	.word	0x013a9000
    4f28:	0003d090 	.word	0x0003d090
    4f2c:	000f4240 	.word	0x000f4240

00004f30 <nrf_gpio_cfg_input>:
{
    4f30:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    4f32:	4b09      	ldr	r3, [pc, #36]	; (4f58 <nrf_gpio_cfg_input+0x28>)
    4f34:	4c09      	ldr	r4, [pc, #36]	; (4f5c <nrf_gpio_cfg_input+0x2c>)
    *p_pin = pin_number & 0x1F;
    4f36:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    4f3a:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    4f3c:	2801      	cmp	r0, #1
    4f3e:	bf08      	it	eq
    4f40:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4f42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4f46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4f4a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4f4e:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4f52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    4f56:	bd10      	pop	{r4, pc}
    4f58:	50842500 	.word	0x50842500
    4f5c:	50842800 	.word	0x50842800

00004f60 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f62:	4605      	mov	r5, r0
    4f64:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4f66:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4f68:	f00a fe40 	bl	fbec <k_is_in_isr>
    4f6c:	b910      	cbnz	r0, 4f74 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4f6e:	4b20      	ldr	r3, [pc, #128]	; (4ff0 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    4f70:	781b      	ldrb	r3, [r3, #0]
    4f72:	b983      	cbnz	r3, 4f96 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4f74:	f04f 0320 	mov.w	r3, #32
    4f78:	f3ef 8411 	mrs	r4, BASEPRI
    4f7c:	f383 8812 	msr	BASEPRI_MAX, r3
    4f80:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    4f84:	4628      	mov	r0, r5
    4f86:	f008 fce3 	bl	d950 <is_tx_ready>
    4f8a:	bb28      	cbnz	r0, 4fd8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    4f8c:	f384 8811 	msr	BASEPRI, r4
    4f90:	f3bf 8f6f 	isb	sy
}
    4f94:	e7ee      	b.n	4f74 <uarte_nrfx_poll_out+0x14>
{
    4f96:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4f98:	4628      	mov	r0, r5
    4f9a:	f008 fcd9 	bl	d950 <is_tx_ready>
    4f9e:	b970      	cbnz	r0, 4fbe <uarte_nrfx_poll_out+0x5e>
    4fa0:	2001      	movs	r0, #1
    4fa2:	f008 fdee 	bl	db82 <nrfx_busy_wait>
    4fa6:	3c01      	subs	r4, #1
    4fa8:	d1f6      	bne.n	4f98 <uarte_nrfx_poll_out+0x38>
    4faa:	2100      	movs	r1, #0
    4fac:	2021      	movs	r0, #33	; 0x21
    4fae:	f005 ff7f 	bl	aeb0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4fb2:	e7f0      	b.n	4f96 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4fb4:	f384 8811 	msr	BASEPRI, r4
    4fb8:	f3bf 8f6f 	isb	sy
}
    4fbc:	e7f5      	b.n	4faa <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    4fbe:	f04f 0320 	mov.w	r3, #32
    4fc2:	f3ef 8411 	mrs	r4, BASEPRI
    4fc6:	f383 8812 	msr	BASEPRI_MAX, r3
    4fca:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4fce:	4628      	mov	r0, r5
    4fd0:	f008 fcbe 	bl	d950 <is_tx_ready>
    4fd4:	2800      	cmp	r0, #0
    4fd6:	d0ed      	beq.n	4fb4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    4fd8:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    4fda:	2201      	movs	r2, #1
    4fdc:	4628      	mov	r0, r5
	data->char_out = c;
    4fde:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    4fe2:	f008 fd48 	bl	da76 <tx_start>
	__asm__ volatile(
    4fe6:	f384 8811 	msr	BASEPRI, r4
    4fea:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ff0:	20028214 	.word	0x20028214

00004ff4 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
    4ff4:	4b06      	ldr	r3, [pc, #24]	; (5010 <nrf_gpio_pin_set+0x1c>)
    4ff6:	4907      	ldr	r1, [pc, #28]	; (5014 <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
    4ff8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    4ffc:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    4ffe:	2801      	cmp	r0, #1
    5000:	bf14      	ite	ne
    5002:	4618      	movne	r0, r3
    5004:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5006:	2301      	movs	r3, #1
    5008:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    500a:	6083      	str	r3, [r0, #8]
}
    500c:	4770      	bx	lr
    500e:	bf00      	nop
    5010:	50842500 	.word	0x50842500
    5014:	50842800 	.word	0x50842800

00005018 <nrf_gpio_cfg_output>:
        case 1: return NRF_P1;
    5018:	4b09      	ldr	r3, [pc, #36]	; (5040 <nrf_gpio_cfg_output+0x28>)
    501a:	490a      	ldr	r1, [pc, #40]	; (5044 <nrf_gpio_cfg_output+0x2c>)
    *p_pin = pin_number & 0x1F;
    501c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    5020:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    5022:	2801      	cmp	r0, #1
    5024:	bf08      	it	eq
    5026:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5028:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    502c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5030:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5034:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
    5038:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    503c:	4770      	bx	lr
    503e:	bf00      	nop
    5040:	50842500 	.word	0x50842500
    5044:	50842800 	.word	0x50842800

00005048 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504a:	4607      	mov	r7, r0
    504c:	2101      	movs	r1, #1
    504e:	2200      	movs	r2, #0
    5050:	2008      	movs	r0, #8
    5052:	f7fe fea3 	bl	3d9c <z_arm_irq_priority_set>
    5056:	2008      	movs	r0, #8
    5058:	f7fe fe82 	bl	3d60 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    505c:	2300      	movs	r3, #0
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    505e:	687d      	ldr	r5, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    5060:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    5062:	682c      	ldr	r4, [r5, #0]
        nrf_gpio_pin_set(pin_number);
    5064:	68a8      	ldr	r0, [r5, #8]
    5066:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    506a:	6037      	str	r7, [r6, #0]
    506c:	f7ff ffc2 	bl	4ff4 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(cfg->pseltxd);
    5070:	68a8      	ldr	r0, [r5, #8]
    5072:	f7ff ffd1 	bl	5018 <nrf_gpio_cfg_output>
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    5076:	68e8      	ldr	r0, [r5, #12]
    5078:	1c41      	adds	r1, r0, #1
    507a:	d002      	beq.n	5082 <uarte_0_init+0x3a>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    507c:	7e29      	ldrb	r1, [r5, #24]
    507e:	f7ff ff57 	bl	4f30 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    5082:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    5086:	6928      	ldr	r0, [r5, #16]
    p_reg->PSEL.TXD = pseltxd;
    5088:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    508c:	1c42      	adds	r2, r0, #1
    p_reg->PSEL.RXD = pselrxd;
    508e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    5092:	d002      	beq.n	509a <uarte_0_init+0x52>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    5094:	7e69      	ldrb	r1, [r5, #25]
    5096:	f7ff ff4b 	bl	4f30 <nrf_gpio_cfg_input>
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    509a:	6968      	ldr	r0, [r5, #20]
    509c:	1c43      	adds	r3, r0, #1
    509e:	d004      	beq.n	50aa <uarte_0_init+0x62>
    50a0:	f7ff ffa8 	bl	4ff4 <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(cfg->pselrts);
    50a4:	6968      	ldr	r0, [r5, #20]
    50a6:	f7ff ffb7 	bl	5018 <nrf_gpio_cfg_output>
	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    50aa:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    50ae:	6939      	ldr	r1, [r7, #16]
    50b0:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
    50b2:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    50b6:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    50b8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    50bc:	f7ff fe76 	bl	4dac <uarte_nrfx_configure>
	if (err) {
    50c0:	4607      	mov	r7, r0
    50c2:	2800      	cmp	r0, #0
    50c4:	d13f      	bne.n	5146 <uarte_0_init+0xfe>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    50c6:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    50c8:	0719      	lsls	r1, r3, #28
    50ca:	d513      	bpl.n	50f4 <uarte_0_init+0xac>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    50cc:	f106 0016 	add.w	r0, r6, #22
    50d0:	f000 fc56 	bl	5980 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    50d4:	4b1e      	ldr	r3, [pc, #120]	; (5150 <uarte_0_init+0x108>)
    50d6:	4298      	cmp	r0, r3
    50d8:	d137      	bne.n	514a <uarte_0_init+0x102>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    50da:	7db3      	ldrb	r3, [r6, #22]
    50dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    50e0:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    50e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    50e8:	2301      	movs	r3, #1
    50ea:	7db2      	ldrb	r2, [r6, #22]
    50ec:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    50ee:	4a19      	ldr	r2, [pc, #100]	; (5154 <uarte_0_init+0x10c>)
    50f0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    50f4:	2308      	movs	r3, #8
    50f6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    50fa:	68eb      	ldr	r3, [r5, #12]
    50fc:	3301      	adds	r3, #1
    50fe:	d00c      	beq.n	511a <uarte_0_init+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5100:	2300      	movs	r3, #0
    5102:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    5106:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    510a:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    510e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5112:	2301      	movs	r3, #1
    5114:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5118:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    511a:	686b      	ldr	r3, [r5, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    511c:	3614      	adds	r6, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    511e:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    5120:	bf5c      	itt	pl
    5122:	f44f 7280 	movpl.w	r2, #256	; 0x100
    5126:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    512a:	06db      	lsls	r3, r3, #27
    512c:	bf44      	itt	mi
    512e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    5132:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    5136:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5138:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    513c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5140:	2301      	movs	r3, #1
    5142:	60a3      	str	r3, [r4, #8]
    5144:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    5146:	4638      	mov	r0, r7
    5148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
    514a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    514e:	e7fa      	b.n	5146 <uarte_0_init+0xfe>
    5150:	0bad0000 	.word	0x0bad0000
    5154:	50017000 	.word	0x50017000

00005158 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5158:	4919      	ldr	r1, [pc, #100]	; (51c0 <sys_clock_timeout_handler+0x68>)
{
    515a:	b570      	push	{r4, r5, r6, lr}
    515c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    515e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5162:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5164:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5168:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    516c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    516e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5172:	f04f 0500 	mov.w	r5, #0
    5176:	d20a      	bcs.n	518e <sys_clock_timeout_handler+0x36>
		return true;
    5178:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    517a:	4b12      	ldr	r3, [pc, #72]	; (51c4 <sys_clock_timeout_handler+0x6c>)
    517c:	6819      	ldr	r1, [r3, #0]
    517e:	060a      	lsls	r2, r1, #24
    5180:	0a0b      	lsrs	r3, r1, #8
    5182:	1992      	adds	r2, r2, r6
    5184:	4910      	ldr	r1, [pc, #64]	; (51c8 <sys_clock_timeout_handler+0x70>)
    5186:	f143 0300 	adc.w	r3, r3, #0
    518a:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    518e:	f005 fff3 	bl	b178 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5192:	00a3      	lsls	r3, r4, #2
    5194:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5198:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    519c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    51a0:	42b2      	cmp	r2, r6
    51a2:	d10b      	bne.n	51bc <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    51a4:	b91d      	cbnz	r5, 51ae <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    51a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    51aa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    51ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    51b2:	4b06      	ldr	r3, [pc, #24]	; (51cc <sys_clock_timeout_handler+0x74>)
    51b4:	fa00 f404 	lsl.w	r4, r0, r4
    51b8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    51bc:	bd70      	pop	{r4, r5, r6, pc}
    51be:	bf00      	nop
    51c0:	20000358 	.word	0x20000358
    51c4:	20000cb4 	.word	0x20000cb4
    51c8:	20000340 	.word	0x20000340
    51cc:	50015000 	.word	0x50015000

000051d0 <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    51d0:	2301      	movs	r3, #1
    51d2:	4083      	lsls	r3, r0
{
    51d4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    51d6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    51d8:	4a0d      	ldr	r2, [pc, #52]	; (5210 <compare_int_lock+0x40>)
    51da:	e8d2 1fef 	ldaex	r1, [r2]
    51de:	ea01 0c04 	and.w	ip, r1, r4
    51e2:	e8c2 cfee 	stlex	lr, ip, [r2]
    51e6:	f1be 0f00 	cmp.w	lr, #0
    51ea:	d1f6      	bne.n	51da <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    51ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    51f0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    51f4:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    51f8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    51fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5200:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    5204:	420b      	tst	r3, r1
}
    5206:	bf14      	ite	ne
    5208:	2001      	movne	r0, #1
    520a:	2000      	moveq	r0, #0
    520c:	bd10      	pop	{r4, pc}
    520e:	bf00      	nop
    5210:	20000cb0 	.word	0x20000cb0

00005214 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    5214:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5216:	4a0e      	ldr	r2, [pc, #56]	; (5250 <compare_int_unlock.part.0+0x3c>)
    5218:	4083      	lsls	r3, r0
    521a:	e8d2 1fef 	ldaex	r1, [r2]
    521e:	4319      	orrs	r1, r3
    5220:	e8c2 1fec 	stlex	ip, r1, [r2]
    5224:	f1bc 0f00 	cmp.w	ip, #0
    5228:	d1f7      	bne.n	521a <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    522a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    522e:	4a09      	ldr	r2, [pc, #36]	; (5254 <compare_int_unlock.part.0+0x40>)
    5230:	4083      	lsls	r3, r0
    5232:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5236:	4b08      	ldr	r3, [pc, #32]	; (5258 <compare_int_unlock.part.0+0x44>)
    5238:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    523c:	fa23 f000 	lsr.w	r0, r3, r0
    5240:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5242:	bf42      	ittt	mi
    5244:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    5248:	4b04      	ldrmi	r3, [pc, #16]	; (525c <compare_int_unlock.part.0+0x48>)
    524a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    524e:	4770      	bx	lr
    5250:	20000cb0 	.word	0x20000cb0
    5254:	50015000 	.word	0x50015000
    5258:	20000cac 	.word	0x20000cac
    525c:	e000e100 	.word	0xe000e100

00005260 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5260:	4b0d      	ldr	r3, [pc, #52]	; (5298 <z_nrf_rtc_timer_read+0x38>)
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	0a19      	lsrs	r1, r3, #8
    5266:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5268:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    526c:	4b0b      	ldr	r3, [pc, #44]	; (529c <z_nrf_rtc_timer_read+0x3c>)
    526e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5272:	18c0      	adds	r0, r0, r3
    5274:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    527c:	d20a      	bcs.n	5294 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    527e:	4b08      	ldr	r3, [pc, #32]	; (52a0 <z_nrf_rtc_timer_read+0x40>)
    5280:	e9d3 2300 	ldrd	r2, r3, [r3]
    5284:	4299      	cmp	r1, r3
    5286:	bf08      	it	eq
    5288:	4290      	cmpeq	r0, r2
    528a:	d203      	bcs.n	5294 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    528c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5290:	f141 0100 	adc.w	r1, r1, #0
}
    5294:	4770      	bx	lr
    5296:	bf00      	nop
    5298:	20000cb4 	.word	0x20000cb4
    529c:	50015000 	.word	0x50015000
    52a0:	20000340 	.word	0x20000340

000052a4 <compare_set>:
{
    52a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52a8:	4616      	mov	r6, r2
    52aa:	461f      	mov	r7, r3
    52ac:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    52ae:	f7ff ff8f 	bl	51d0 <compare_int_lock>
    52b2:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    52b4:	f7ff ffd4 	bl	5260 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    52b8:	42b9      	cmp	r1, r7
    52ba:	bf08      	it	eq
    52bc:	42b0      	cmpeq	r0, r6
    52be:	d27b      	bcs.n	53b8 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
    52c0:	2300      	movs	r3, #0
    52c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    52c6:	ebb6 0800 	subs.w	r8, r6, r0
    52ca:	eb67 0901 	sbc.w	r9, r7, r1
    52ce:	454b      	cmp	r3, r9
    52d0:	bf08      	it	eq
    52d2:	4542      	cmpeq	r2, r8
    52d4:	d37d      	bcc.n	53d2 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
    52d6:	4b40      	ldr	r3, [pc, #256]	; (53d8 <compare_set+0x134>)
    52d8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    52dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    52e0:	429f      	cmp	r7, r3
    52e2:	bf08      	it	eq
    52e4:	4296      	cmpeq	r6, r2
    52e6:	d051      	beq.n	538c <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    52e8:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    52ec:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    52f0:	4614      	mov	r4, r2
    52f2:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    52f6:	f105 0850 	add.w	r8, r5, #80	; 0x50
    52fa:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    52fe:	ea4f 0888 	mov.w	r8, r8, lsl #2
    5302:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5306:	fa1f f888 	uxth.w	r8, r8
    530a:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    530e:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    5312:	4b32      	ldr	r3, [pc, #200]	; (53dc <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5314:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5318:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
    531c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5320:	eba0 000a 	sub.w	r0, r0, sl
    5324:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5328:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    532c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    532e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    5332:	d105      	bne.n	5340 <compare_set+0x9c>
    5334:	9201      	str	r2, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    5336:	2013      	movs	r0, #19
    5338:	f00a fd65 	bl	fe06 <z_impl_k_busy_wait>
    533c:	4b27      	ldr	r3, [pc, #156]	; (53dc <compare_set+0x138>)
    533e:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5340:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    5344:	eba4 000c 	sub.w	r0, r4, ip
    5348:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    534c:	2100      	movs	r1, #0
			cc_val = now + 2;
    534e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5352:	bf88      	it	hi
    5354:	4664      	movhi	r4, ip
    5356:	f8c8 1000 	str.w	r1, [r8]
    535a:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    535e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    5362:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    5366:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    536a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    536e:	4582      	cmp	sl, r0
    5370:	d006      	beq.n	5380 <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
    5372:	1a20      	subs	r0, r4, r0
    5374:	3802      	subs	r0, #2
    5376:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    537a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    537e:	d819      	bhi.n	53b4 <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
    5380:	1aa4      	subs	r4, r4, r2
    5382:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5386:	1932      	adds	r2, r6, r4
    5388:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    538c:	4c12      	ldr	r4, [pc, #72]	; (53d8 <compare_set+0x134>)
    538e:	0129      	lsls	r1, r5, #4
    5390:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    5394:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    5398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
    539a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
    539c:	5062      	str	r2, [r4, r1]
	return ret;
    539e:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
    53a0:	6043      	str	r3, [r0, #4]
	if (key) {
    53a2:	9b00      	ldr	r3, [sp, #0]
    53a4:	b113      	cbz	r3, 53ac <compare_set+0x108>
    53a6:	4628      	mov	r0, r5
    53a8:	f7ff ff34 	bl	5214 <compare_int_unlock.part.0>
}
    53ac:	4620      	mov	r0, r4
    53ae:	b003      	add	sp, #12
    53b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53b4:	4620      	mov	r0, r4
    53b6:	e7b1      	b.n	531c <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
    53b8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    53ba:	4a09      	ldr	r2, [pc, #36]	; (53e0 <compare_set+0x13c>)
    53bc:	40ab      	lsls	r3, r5
    53be:	e8d2 1fef 	ldaex	r1, [r2]
    53c2:	4319      	orrs	r1, r3
    53c4:	e8c2 1fe0 	stlex	r0, r1, [r2]
    53c8:	2800      	cmp	r0, #0
    53ca:	d1f8      	bne.n	53be <compare_set+0x11a>
    53cc:	4632      	mov	r2, r6
    53ce:	463b      	mov	r3, r7
    53d0:	e7dc      	b.n	538c <compare_set+0xe8>
			return -EINVAL;
    53d2:	f06f 0415 	mvn.w	r4, #21
    53d6:	e7e4      	b.n	53a2 <compare_set+0xfe>
    53d8:	20000348 	.word	0x20000348
    53dc:	50015000 	.word	0x50015000
    53e0:	20000cac 	.word	0x20000cac

000053e4 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    53e4:	4b33      	ldr	r3, [pc, #204]	; (54b4 <rtc_nrf_isr+0xd0>)
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    53e6:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    53ea:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    53ee:	079a      	lsls	r2, r3, #30
    53f0:	d509      	bpl.n	5406 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    53f2:	4b31      	ldr	r3, [pc, #196]	; (54b8 <rtc_nrf_isr+0xd4>)
    53f4:	681a      	ldr	r2, [r3, #0]
    53f6:	b132      	cbz	r2, 5406 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    53f8:	2200      	movs	r2, #0
    53fa:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    53fc:	4a2f      	ldr	r2, [pc, #188]	; (54bc <rtc_nrf_isr+0xd8>)
    53fe:	681b      	ldr	r3, [r3, #0]
    5400:	6813      	ldr	r3, [r2, #0]
    5402:	3301      	adds	r3, #1
    5404:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5406:	f04f 0320 	mov.w	r3, #32
    540a:	f3ef 8211 	mrs	r2, BASEPRI
    540e:	f383 8812 	msr	BASEPRI_MAX, r3
    5412:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5416:	4b27      	ldr	r3, [pc, #156]	; (54b4 <rtc_nrf_isr+0xd0>)
    5418:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    541c:	03db      	lsls	r3, r3, #15
    541e:	d50e      	bpl.n	543e <rtc_nrf_isr+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5420:	4b27      	ldr	r3, [pc, #156]	; (54c0 <rtc_nrf_isr+0xdc>)
    5422:	e8d3 1fef 	ldaex	r1, [r3]
    5426:	f021 0001 	bic.w	r0, r1, #1
    542a:	e8c3 0fe4 	stlex	r4, r0, [r3]
    542e:	2c00      	cmp	r4, #0
    5430:	d1f7      	bne.n	5422 <rtc_nrf_isr+0x3e>
    5432:	4b24      	ldr	r3, [pc, #144]	; (54c4 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5434:	2900      	cmp	r1, #0
    5436:	d136      	bne.n	54a6 <rtc_nrf_isr+0xc2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5438:	6819      	ldr	r1, [r3, #0]
		if (result) {
    543a:	2900      	cmp	r1, #0
    543c:	d133      	bne.n	54a6 <rtc_nrf_isr+0xc2>
{
    543e:	2300      	movs	r3, #0
	__asm__ volatile(
    5440:	f382 8811 	msr	BASEPRI, r2
    5444:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    5448:	b353      	cbz	r3, 54a0 <rtc_nrf_isr+0xbc>
		curr_time = z_nrf_rtc_timer_read();
    544a:	f7ff ff09 	bl	5260 <z_nrf_rtc_timer_read>
    544e:	4604      	mov	r4, r0
	__asm__ volatile(
    5450:	f04f 0320 	mov.w	r3, #32
    5454:	f3ef 8011 	mrs	r0, BASEPRI
    5458:	f383 8812 	msr	BASEPRI_MAX, r3
    545c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5460:	4b19      	ldr	r3, [pc, #100]	; (54c8 <rtc_nrf_isr+0xe4>)
    5462:	2200      	movs	r2, #0
    5464:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5468:	4549      	cmp	r1, r9
    546a:	bf08      	it	eq
    546c:	4544      	cmpeq	r4, r8
    546e:	d31f      	bcc.n	54b0 <rtc_nrf_isr+0xcc>
			user_context = cc_data[chan].user_context;
    5470:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5474:	f04f 34ff 	mov.w	r4, #4294967295
    5478:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
    547c:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    547e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5482:	e9c3 4502 	strd	r4, r5, [r3, #8]
    5486:	4b0b      	ldr	r3, [pc, #44]	; (54b4 <rtc_nrf_isr+0xd0>)
    5488:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    548c:	f380 8811 	msr	BASEPRI, r0
    5490:	f3bf 8f6f 	isb	sy
		if (handler) {
    5494:	b121      	cbz	r1, 54a0 <rtc_nrf_isr+0xbc>
			handler(chan, expire_time, user_context);
    5496:	4642      	mov	r2, r8
    5498:	464b      	mov	r3, r9
    549a:	2000      	movs	r0, #0
    549c:	9600      	str	r6, [sp, #0]
    549e:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    54a0:	b002      	add	sp, #8
    54a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    54a6:	2100      	movs	r1, #0
    54a8:	6019      	str	r1, [r3, #0]
    54aa:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    54ac:	2301      	movs	r3, #1
}
    54ae:	e7c7      	b.n	5440 <rtc_nrf_isr+0x5c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    54b0:	4611      	mov	r1, r2
    54b2:	e7eb      	b.n	548c <rtc_nrf_isr+0xa8>
    54b4:	50015000 	.word	0x50015000
    54b8:	50015104 	.word	0x50015104
    54bc:	20000cb4 	.word	0x20000cb4
    54c0:	20000cac 	.word	0x20000cac
    54c4:	50015140 	.word	0x50015140
    54c8:	20000348 	.word	0x20000348

000054cc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    54cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    54ce:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    54d0:	f04f 30ff 	mov.w	r0, #4294967295
    54d4:	f04f 31ff 	mov.w	r1, #4294967295
    54d8:	4d17      	ldr	r5, [pc, #92]	; (5538 <sys_clock_driver_init+0x6c>)
    54da:	4b18      	ldr	r3, [pc, #96]	; (553c <sys_clock_driver_init+0x70>)
    54dc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    54e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    54e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    54e8:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    54ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    54ee:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    54f2:	4b13      	ldr	r3, [pc, #76]	; (5540 <sys_clock_driver_init+0x74>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    54f4:	2101      	movs	r1, #1
    54f6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    54fa:	2015      	movs	r0, #21
    54fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5500:	4622      	mov	r2, r4
    5502:	f7fe fc4b 	bl	3d9c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5506:	2015      	movs	r0, #21
    5508:	f7fe fc2a 	bl	3d60 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    550c:	2301      	movs	r3, #1
    550e:	4a0d      	ldr	r2, [pc, #52]	; (5544 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
    5510:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5514:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5516:	4a0c      	ldr	r2, [pc, #48]	; (5548 <sys_clock_driver_init+0x7c>)
    5518:	602b      	str	r3, [r5, #0]
    551a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    551c:	4b0b      	ldr	r3, [pc, #44]	; (554c <sys_clock_driver_init+0x80>)
    551e:	4a0c      	ldr	r2, [pc, #48]	; (5550 <sys_clock_driver_init+0x84>)
    5520:	9300      	str	r3, [sp, #0]
    5522:	4620      	mov	r0, r4
    5524:	2300      	movs	r3, #0
    5526:	9401      	str	r4, [sp, #4]
    5528:	f7ff febc 	bl	52a4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    552c:	4630      	mov	r0, r6
    552e:	f7ff f971 	bl	4814 <z_nrf_clock_control_lf_on>

	return 0;
}
    5532:	4620      	mov	r0, r4
    5534:	b002      	add	sp, #8
    5536:	bd70      	pop	{r4, r5, r6, pc}
    5538:	50015000 	.word	0x50015000
    553c:	20000348 	.word	0x20000348
    5540:	e000e100 	.word	0xe000e100
    5544:	50015008 	.word	0x50015008
    5548:	20000cb0 	.word	0x20000cb0
    554c:	00005159 	.word	0x00005159
    5550:	007fffff 	.word	0x007fffff

00005554 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5554:	4b14      	ldr	r3, [pc, #80]	; (55a8 <sys_clock_set_timeout+0x54>)
{
    5556:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5558:	f1b0 3fff 	cmp.w	r0, #4294967295
    555c:	bf08      	it	eq
    555e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5560:	1e44      	subs	r4, r0, #1
    5562:	2c00      	cmp	r4, #0
    5564:	dd1d      	ble.n	55a2 <sys_clock_set_timeout+0x4e>
    5566:	429c      	cmp	r4, r3
    5568:	bfa8      	it	ge
    556a:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    556c:	f7ff fe78 	bl	5260 <z_nrf_rtc_timer_read>
    5570:	4b0e      	ldr	r3, [pc, #56]	; (55ac <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5572:	490f      	ldr	r1, [pc, #60]	; (55b0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5574:	e9d3 2300 	ldrd	r2, r3, [r3]
    5578:	1a80      	subs	r0, r0, r2
		ticks = 0;
    557a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    557e:	bf28      	it	cs
    5580:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5582:	3001      	adds	r0, #1
    5584:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    5586:	4808      	ldr	r0, [pc, #32]	; (55a8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5588:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    558a:	4284      	cmp	r4, r0
    558c:	bf28      	it	cs
    558e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5590:	2000      	movs	r0, #0
    5592:	1912      	adds	r2, r2, r4
    5594:	9001      	str	r0, [sp, #4]
    5596:	f143 0300 	adc.w	r3, r3, #0
    559a:	f7ff fe83 	bl	52a4 <compare_set>
}
    559e:	b002      	add	sp, #8
    55a0:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    55a2:	2400      	movs	r4, #0
    55a4:	e7e2      	b.n	556c <sys_clock_set_timeout+0x18>
    55a6:	bf00      	nop
    55a8:	007fffff 	.word	0x007fffff
    55ac:	20000358 	.word	0x20000358
    55b0:	00005159 	.word	0x00005159

000055b4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    55b4:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    55b6:	f7ff fe53 	bl	5260 <z_nrf_rtc_timer_read>
    55ba:	4b02      	ldr	r3, [pc, #8]	; (55c4 <sys_clock_elapsed+0x10>)
    55bc:	681b      	ldr	r3, [r3, #0]
}
    55be:	1ac0      	subs	r0, r0, r3
    55c0:	bd08      	pop	{r3, pc}
    55c2:	bf00      	nop
    55c4:	20000358 	.word	0x20000358

000055c8 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    55c8:	4b06      	ldr	r3, [pc, #24]	; (55e4 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	2b07      	cmp	r3, #7
    55ce:	d107      	bne.n	55e0 <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    55d0:	4b05      	ldr	r3, [pc, #20]	; (55e8 <nrf53_errata_42+0x20>)
    55d2:	681b      	ldr	r3, [r3, #0]
    55d4:	3b02      	subs	r3, #2
    55d6:	2b03      	cmp	r3, #3
    55d8:	d802      	bhi.n	55e0 <nrf53_errata_42+0x18>
    55da:	4a04      	ldr	r2, [pc, #16]	; (55ec <nrf53_errata_42+0x24>)
    55dc:	5cd0      	ldrb	r0, [r2, r3]
    55de:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    55e0:	2000      	movs	r0, #0
    #endif
}
    55e2:	4770      	bx	lr
    55e4:	00ff0130 	.word	0x00ff0130
    55e8:	00ff0134 	.word	0x00ff0134
    55ec:	000631d8 	.word	0x000631d8

000055f0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    55f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    55f4:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    55f8:	4b03      	ldr	r3, [pc, #12]	; (5608 <SystemCoreClockUpdate+0x18>)
    55fa:	f002 0203 	and.w	r2, r2, #3
    55fe:	40d3      	lsrs	r3, r2
    5600:	4a02      	ldr	r2, [pc, #8]	; (560c <SystemCoreClockUpdate+0x1c>)
    5602:	6013      	str	r3, [r2, #0]
#endif
}
    5604:	4770      	bx	lr
    5606:	bf00      	nop
    5608:	07a12000 	.word	0x07a12000
    560c:	20000060 	.word	0x20000060

00005610 <SystemInit>:

void SystemInit(void)
{
    5610:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    5612:	f7ff ffd9 	bl	55c8 <nrf53_errata_42>
    5616:	b148      	cbz	r0, 562c <SystemInit+0x1c>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    5618:	4b39      	ldr	r3, [pc, #228]	; (5700 <SystemInit+0xf0>)
    561a:	681a      	ldr	r2, [r3, #0]
    561c:	b932      	cbnz	r2, 562c <SystemInit+0x1c>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    561e:	210d      	movs	r1, #13
    5620:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    5622:	2101      	movs	r1, #1
    5624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    5628:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    562a:	601a      	str	r2, [r3, #0]
{
    562c:	2200      	movs	r2, #0
    562e:	00d3      	lsls	r3, r2, #3
    5630:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5634:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    5638:	3101      	adds	r1, #1
    563a:	d007      	beq.n	564c <SystemInit+0x3c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    563c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5640:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    5642:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5646:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    5648:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    564a:	d1f0      	bne.n	562e <SystemInit+0x1e>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    564c:	f7ff ffbc 	bl	55c8 <nrf53_errata_42>
    5650:	2800      	cmp	r0, #0
    5652:	d14e      	bne.n	56f2 <SystemInit+0xe2>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    5654:	f7ff ffb8 	bl	55c8 <nrf53_errata_42>
    5658:	b138      	cbz	r0, 566a <SystemInit+0x5a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    565a:	4b2a      	ldr	r3, [pc, #168]	; (5704 <SystemInit+0xf4>)
    565c:	4a2a      	ldr	r2, [pc, #168]	; (5708 <SystemInit+0xf8>)
    565e:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    5660:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5664:	2201      	movs	r2, #1
    5666:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    566a:	4b28      	ldr	r3, [pc, #160]	; (570c <SystemInit+0xfc>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    566c:	681b      	ldr	r3, [r3, #0]
    566e:	2b07      	cmp	r3, #7
    5670:	d10a      	bne.n	5688 <SystemInit+0x78>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5672:	4b27      	ldr	r3, [pc, #156]	; (5710 <SystemInit+0x100>)
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	3b02      	subs	r3, #2
    5678:	2b03      	cmp	r3, #3
    567a:	d805      	bhi.n	5688 <SystemInit+0x78>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    567c:	4a25      	ldr	r2, [pc, #148]	; (5714 <SystemInit+0x104>)
    567e:	5cd3      	ldrb	r3, [r2, r3]
    5680:	b113      	cbz	r3, 5688 <SystemInit+0x78>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    5682:	2200      	movs	r2, #0
    5684:	4b24      	ldr	r3, [pc, #144]	; (5718 <SystemInit+0x108>)
    5686:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    5688:	f7ff ff9e 	bl	55c8 <nrf53_errata_42>
    568c:	b150      	cbz	r0, 56a4 <SystemInit+0x94>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    568e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5692:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5696:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    5698:	bf42      	ittt	mi
    569a:	2200      	movmi	r2, #0
    569c:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    56a0:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    56a4:	4b19      	ldr	r3, [pc, #100]	; (570c <SystemInit+0xfc>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	2b07      	cmp	r3, #7
    56aa:	d109      	bne.n	56c0 <SystemInit+0xb0>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    56ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    56b4:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    56b6:	bf44      	itt	mi
    56b8:	f06f 0201 	mvnmi.w	r2, #1
    56bc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    56c0:	f7ff ff82 	bl	55c8 <nrf53_errata_42>
    56c4:	b110      	cbz	r0, 56cc <SystemInit+0xbc>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    56c6:	2265      	movs	r2, #101	; 0x65
    56c8:	4b14      	ldr	r3, [pc, #80]	; (571c <SystemInit+0x10c>)
    56ca:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    56cc:	4a14      	ldr	r2, [pc, #80]	; (5720 <SystemInit+0x110>)
    56ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    56d2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    56d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    56da:	4a12      	ldr	r2, [pc, #72]	; (5724 <SystemInit+0x114>)
    56dc:	4b12      	ldr	r3, [pc, #72]	; (5728 <SystemInit+0x118>)
    56de:	6811      	ldr	r1, [r2, #0]
    56e0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    56e4:	69d2      	ldr	r2, [r2, #28]
    56e6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    56ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    56ee:	f7ff bf7f 	b.w	55f0 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    56f2:	2229      	movs	r2, #41	; 0x29
    56f4:	4b09      	ldr	r3, [pc, #36]	; (571c <SystemInit+0x10c>)
    56f6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    56f8:	2203      	movs	r2, #3
    56fa:	631a      	str	r2, [r3, #48]	; 0x30
    56fc:	e7aa      	b.n	5654 <SystemInit+0x44>
    56fe:	bf00      	nop
    5700:	50004a20 	.word	0x50004a20
    5704:	50039530 	.word	0x50039530
    5708:	beef0044 	.word	0xbeef0044
    570c:	00ff0130 	.word	0x00ff0130
    5710:	00ff0134 	.word	0x00ff0134
    5714:	000631dc 	.word	0x000631dc
    5718:	5003254c 	.word	0x5003254c
    571c:	5000470c 	.word	0x5000470c
    5720:	e000ed00 	.word	0xe000ed00
    5724:	00ff8000 	.word	0x00ff8000
    5728:	50006000 	.word	0x50006000

0000572c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    572c:	4b04      	ldr	r3, [pc, #16]	; (5740 <nrfx_clock_init+0x14>)
    572e:	791a      	ldrb	r2, [r3, #4]
    5730:	b922      	cbnz	r2, 573c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    5732:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    5734:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5736:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5738:	4802      	ldr	r0, [pc, #8]	; (5744 <nrfx_clock_init+0x18>)
    573a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    573c:	4802      	ldr	r0, [pc, #8]	; (5748 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    573e:	4770      	bx	lr
    5740:	20000cb8 	.word	0x20000cb8
    5744:	0bad0000 	.word	0x0bad0000
    5748:	0bad000c 	.word	0x0bad000c

0000574c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    574c:	2803      	cmp	r0, #3
    574e:	d847      	bhi.n	57e0 <nrfx_clock_start+0x94>
    5750:	e8df f000 	tbb	[pc, r0]
    5754:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5758:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    575c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5760:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5764:	03c9      	lsls	r1, r1, #15
    5766:	d511      	bpl.n	578c <nrfx_clock_start+0x40>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5768:	f003 0303 	and.w	r3, r3, #3
    576c:	2b02      	cmp	r3, #2
    576e:	d10d      	bne.n	578c <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5770:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5774:	2200      	movs	r2, #0
    5776:	4b1b      	ldr	r3, [pc, #108]	; (57e4 <nrfx_clock_start+0x98>)
    5778:	601a      	str	r2, [r3, #0]
    577a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    577c:	2202      	movs	r2, #2
    577e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5782:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5786:	2201      	movs	r2, #1
    5788:	609a      	str	r2, [r3, #8]
}
    578a:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    578c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5790:	2201      	movs	r2, #1
    5792:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5796:	e7ed      	b.n	5774 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5798:	2200      	movs	r2, #0
    579a:	4b13      	ldr	r3, [pc, #76]	; (57e8 <nrfx_clock_start+0x9c>)
    579c:	601a      	str	r2, [r3, #0]
    579e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    57a0:	2201      	movs	r2, #1
    57a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    57a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57aa:	601a      	str	r2, [r3, #0]
}
    57ac:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57ae:	2200      	movs	r2, #0
    57b0:	4b0e      	ldr	r3, [pc, #56]	; (57ec <nrfx_clock_start+0xa0>)
    57b2:	601a      	str	r2, [r3, #0]
    57b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    57b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    57ba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    57be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57c2:	2201      	movs	r2, #1
    57c4:	621a      	str	r2, [r3, #32]
}
    57c6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57c8:	2200      	movs	r2, #0
    57ca:	4b09      	ldr	r3, [pc, #36]	; (57f0 <nrfx_clock_start+0xa4>)
    57cc:	601a      	str	r2, [r3, #0]
    57ce:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    57d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    57d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    57d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57dc:	2201      	movs	r2, #1
    57de:	619a      	str	r2, [r3, #24]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    57e0:	4770      	bx	lr
    57e2:	bf00      	nop
    57e4:	50005104 	.word	0x50005104
    57e8:	50005100 	.word	0x50005100
    57ec:	50005124 	.word	0x50005124
    57f0:	50005120 	.word	0x50005120

000057f4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    57f4:	b570      	push	{r4, r5, r6, lr}
    57f6:	4604      	mov	r4, r0
    57f8:	2803      	cmp	r0, #3
    57fa:	d83e      	bhi.n	587a <nrfx_clock_stop+0x86>
    57fc:	e8df f000 	tbb	[pc, r0]
    5800:	4b3e2202 	.word	0x4b3e2202
    p_reg->INTENCLR = mask;
    5804:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5808:	2202      	movs	r2, #2
    580a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    580e:	2200      	movs	r2, #0
    5810:	f503 7382 	add.w	r3, r3, #260	; 0x104
    5814:	601a      	str	r2, [r3, #0]
    5816:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5818:	4b28      	ldr	r3, [pc, #160]	; (58bc <nrfx_clock_stop+0xc8>)
    581a:	2201      	movs	r2, #1
    581c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    5820:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5824:	601a      	str	r2, [r3, #0]
    switch (domain)
    5826:	2c02      	cmp	r4, #2
    5828:	d042      	beq.n	58b0 <nrfx_clock_stop+0xbc>
    582a:	2c03      	cmp	r4, #3
    582c:	d043      	beq.n	58b6 <nrfx_clock_stop+0xc2>
    582e:	bb24      	cbnz	r4, 587a <nrfx_clock_stop+0x86>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5830:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5834:	03db      	lsls	r3, r3, #15
    5836:	d520      	bpl.n	587a <nrfx_clock_stop+0x86>
    5838:	2001      	movs	r0, #1
    583a:	f008 f9a2 	bl	db82 <nrfx_busy_wait>
    583e:	3d01      	subs	r5, #1
    5840:	d1f1      	bne.n	5826 <nrfx_clock_stop+0x32>
    5842:	e01a      	b.n	587a <nrfx_clock_stop+0x86>
    p_reg->INTENCLR = mask;
    5844:	2301      	movs	r3, #1
    5846:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    584a:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    584c:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5850:	4a1b      	ldr	r2, [pc, #108]	; (58c0 <nrfx_clock_stop+0xcc>)
    p_reg->INTENCLR = mask;
    5852:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5856:	6011      	str	r1, [r2, #0]
    5858:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    585a:	4a1a      	ldr	r2, [pc, #104]	; (58c4 <nrfx_clock_stop+0xd0>)
    585c:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    585e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5862:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5866:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    586a:	03d2      	lsls	r2, r2, #15
    586c:	d505      	bpl.n	587a <nrfx_clock_stop+0x86>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    586e:	b123      	cbz	r3, 587a <nrfx_clock_stop+0x86>
    5870:	2001      	movs	r0, #1
    5872:	f008 f986 	bl	db82 <nrfx_busy_wait>
    5876:	3d01      	subs	r5, #1
    5878:	d1f1      	bne.n	585e <nrfx_clock_stop+0x6a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    587a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    587c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5880:	f44f 7200 	mov.w	r2, #512	; 0x200
    5884:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5888:	2200      	movs	r2, #0
    588a:	f503 7392 	add.w	r3, r3, #292	; 0x124
    588e:	601a      	str	r2, [r3, #0]
    5890:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5892:	4b0d      	ldr	r3, [pc, #52]	; (58c8 <nrfx_clock_stop+0xd4>)
    5894:	e7c1      	b.n	581a <nrfx_clock_stop+0x26>
    p_reg->INTENCLR = mask;
    5896:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    589a:	f44f 7280 	mov.w	r2, #256	; 0x100
    589e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58a2:	2200      	movs	r2, #0
    58a4:	f503 7390 	add.w	r3, r3, #288	; 0x120
    58a8:	601a      	str	r2, [r3, #0]
    58aa:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58ac:	4b07      	ldr	r3, [pc, #28]	; (58cc <nrfx_clock_stop+0xd8>)
    58ae:	e7b4      	b.n	581a <nrfx_clock_stop+0x26>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    58b0:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    58b4:	e7be      	b.n	5834 <nrfx_clock_stop+0x40>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    58b6:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    58ba:	e7bb      	b.n	5834 <nrfx_clock_stop+0x40>
    58bc:	5000500c 	.word	0x5000500c
    58c0:	50005100 	.word	0x50005100
    58c4:	50005004 	.word	0x50005004
    58c8:	50005024 	.word	0x50005024
    58cc:	5000501c 	.word	0x5000501c

000058d0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    58d0:	4b26      	ldr	r3, [pc, #152]	; (596c <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    58d2:	b510      	push	{r4, lr}
    58d4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    58d6:	b152      	cbz	r2, 58ee <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58d8:	2000      	movs	r0, #0
    58da:	6018      	str	r0, [r3, #0]
    58dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    58de:	2201      	movs	r2, #1
    58e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    58e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    58e8:	4b21      	ldr	r3, [pc, #132]	; (5970 <nrfx_power_clock_irq_handler+0xa0>)
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    58ee:	4b21      	ldr	r3, [pc, #132]	; (5974 <nrfx_power_clock_irq_handler+0xa4>)
    58f0:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    58f2:	b18a      	cbz	r2, 5918 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58f4:	2200      	movs	r2, #0
    58f6:	601a      	str	r2, [r3, #0]
    58f8:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    58fa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    58fe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5902:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5906:	f002 0203 	and.w	r2, r2, #3
    590a:	2a01      	cmp	r2, #1
    590c:	f04f 0102 	mov.w	r1, #2
    5910:	d124      	bne.n	595c <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5912:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5916:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5918:	4b17      	ldr	r3, [pc, #92]	; (5978 <nrfx_power_clock_irq_handler+0xa8>)
    591a:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    591c:	b162      	cbz	r2, 5938 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    591e:	2200      	movs	r2, #0
    5920:	601a      	str	r2, [r3, #0]
    5922:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5924:	f44f 7280 	mov.w	r2, #256	; 0x100
    5928:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    592c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    5930:	4b0f      	ldr	r3, [pc, #60]	; (5970 <nrfx_power_clock_irq_handler+0xa0>)
    5932:	2004      	movs	r0, #4
    5934:	681b      	ldr	r3, [r3, #0]
    5936:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5938:	4b10      	ldr	r3, [pc, #64]	; (597c <nrfx_power_clock_irq_handler+0xac>)
    593a:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    593c:	b1aa      	cbz	r2, 596a <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    593e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5942:	2200      	movs	r2, #0
    5944:	601a      	str	r2, [r3, #0]
    5946:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5948:	f44f 7200 	mov.w	r2, #512	; 0x200
    594c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5950:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    5954:	4b06      	ldr	r3, [pc, #24]	; (5970 <nrfx_power_clock_irq_handler+0xa0>)
    5956:	2005      	movs	r0, #5
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	4718      	bx	r3
    595c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5960:	4b03      	ldr	r3, [pc, #12]	; (5970 <nrfx_power_clock_irq_handler+0xa0>)
    5962:	2001      	movs	r0, #1
    5964:	681b      	ldr	r3, [r3, #0]
    5966:	4798      	blx	r3
    5968:	e7d6      	b.n	5918 <nrfx_power_clock_irq_handler+0x48>
}
    596a:	bd10      	pop	{r4, pc}
    596c:	50005100 	.word	0x50005100
    5970:	20000cb8 	.word	0x20000cb8
    5974:	50005104 	.word	0x50005104
    5978:	50005120 	.word	0x50005120
    597c:	50005124 	.word	0x50005124

00005980 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    5980:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    5982:	f04f 0320 	mov.w	r3, #32
    5986:	f3ef 8511 	mrs	r5, BASEPRI
    598a:	f383 8812 	msr	BASEPRI_MAX, r3
    598e:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    5992:	4a0c      	ldr	r2, [pc, #48]	; (59c4 <nrfx_dppi_channel_alloc+0x44>)
    5994:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    5996:	43e7      	mvns	r7, r4
    5998:	d012      	beq.n	59c0 <nrfx_dppi_channel_alloc+0x40>
    599a:	2300      	movs	r3, #0
    599c:	b2d9      	uxtb	r1, r3
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    599e:	fa27 f601 	lsr.w	r6, r7, r1
    59a2:	07f6      	lsls	r6, r6, #31
    59a4:	f103 0301 	add.w	r3, r3, #1
    59a8:	d5f8      	bpl.n	599c <nrfx_dppi_channel_alloc+0x1c>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    59aa:	2301      	movs	r3, #1
    59ac:	408b      	lsls	r3, r1
    59ae:	4323      	orrs	r3, r4
        *p_channel = channel;
    59b0:	7001      	strb	r1, [r0, #0]

        err_code = NRFX_SUCCESS;
    59b2:	4805      	ldr	r0, [pc, #20]	; (59c8 <nrfx_dppi_channel_alloc+0x48>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
    59b4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    59b6:	f385 8811 	msr	BASEPRI, r5
    59ba:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    59be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
    59c0:	4802      	ldr	r0, [pc, #8]	; (59cc <nrfx_dppi_channel_alloc+0x4c>)
    59c2:	e7f8      	b.n	59b6 <nrfx_dppi_channel_alloc+0x36>
    59c4:	20000cc0 	.word	0x20000cc0
    59c8:	0bad0000 	.word	0x0bad0000
    59cc:	0bad0002 	.word	0x0bad0002

000059d0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    59d0:	2301      	movs	r3, #1
    59d2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    59d6:	f010 0fff 	tst.w	r0, #255	; 0xff
    59da:	d012      	beq.n	5a02 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    59dc:	f04f 0320 	mov.w	r3, #32
    59e0:	f3ef 8111 	mrs	r1, BASEPRI
    59e4:	f383 8812 	msr	BASEPRI_MAX, r3
    59e8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    59ec:	4a06      	ldr	r2, [pc, #24]	; (5a08 <nrfx_gpiote_channel_free+0x38>)
    59ee:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    59f0:	ea23 0000 	bic.w	r0, r3, r0
    59f4:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    59f6:	f381 8811 	msr	BASEPRI, r1
    59fa:	f3bf 8f6f 	isb	sy
    59fe:	4803      	ldr	r0, [pc, #12]	; (5a0c <nrfx_gpiote_channel_free+0x3c>)
    5a00:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    5a02:	4803      	ldr	r0, [pc, #12]	; (5a10 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5a04:	4770      	bx	lr
    5a06:	bf00      	nop
    5a08:	20000cc4 	.word	0x20000cc4
    5a0c:	0bad0000 	.word	0x0bad0000
    5a10:	0bad0004 	.word	0x0bad0004

00005a14 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    5a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    5a18:	22ff      	movs	r2, #255	; 0xff
{
    5a1a:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    5a1c:	2601      	movs	r6, #1
{
    5a1e:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    5a20:	f8df e058 	ldr.w	lr, [pc, #88]	; 5a7c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    5a24:	4814      	ldr	r0, [pc, #80]	; (5a78 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    5a26:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5a80 <nrfx_gpiote_channel_alloc+0x6c>
    5a2a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    5a2c:	f04f 0120 	mov.w	r1, #32
    5a30:	f3ef 8c11 	mrs	ip, BASEPRI
    5a34:	f381 8812 	msr	BASEPRI_MAX, r1
    5a38:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    5a3c:	fa22 f103 	lsr.w	r1, r2, r3
    5a40:	07c9      	lsls	r1, r1, #31
    5a42:	d50a      	bpl.n	5a5a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    5a44:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    5a48:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    5a4c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    5a4e:	bf01      	itttt	eq
    5a50:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    5a52:	4339      	orreq	r1, r7
    5a54:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
    5a58:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    5a5a:	f38c 8811 	msr	BASEPRI, ip
    5a5e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    5a62:	4540      	cmp	r0, r8
    5a64:	d005      	beq.n	5a72 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    5a66:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5a6a:	439a      	bics	r2, r3
    5a6c:	f104 0401 	add.w	r4, r4, #1
    5a70:	d1db      	bne.n	5a2a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a76:	bf00      	nop
    5a78:	0bad0002 	.word	0x0bad0002
    5a7c:	20000cc4 	.word	0x20000cc4
    5a80:	0bad0000 	.word	0x0bad0000

00005a84 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    5a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5a86:	4605      	mov	r5, r0
    5a88:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    5a8a:	6980      	ldr	r0, [r0, #24]
    5a8c:	4611      	mov	r1, r2
    5a8e:	f008 f8b7 	bl	dc00 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    5a92:	696b      	ldr	r3, [r5, #20]
    5a94:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    5a96:	42a3      	cmp	r3, r4
    5a98:	d209      	bcs.n	5aae <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
    5a9a:	1ae2      	subs	r2, r4, r3
    5a9c:	9200      	str	r2, [sp, #0]
    5a9e:	4905      	ldr	r1, [pc, #20]	; (5ab4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x30>)
    5aa0:	4622      	mov	r2, r4
    5aa2:	6868      	ldr	r0, [r5, #4]
    5aa4:	f008 fdce 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
    5aa8:	2000      	movs	r0, #0
  }
  temp_ = aligned_result + size;
  return aligned_result;
}
    5aaa:	b003      	add	sp, #12
    5aac:	bd30      	pop	{r4, r5, pc}
  temp_ = aligned_result + size;
    5aae:	4404      	add	r4, r0
    5ab0:	61ac      	str	r4, [r5, #24]
  return aligned_result;
    5ab2:	e7fa      	b.n	5aaa <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x26>
    5ab4:	000631e0 	.word	0x000631e0

00005ab8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    5ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5aba:	460d      	mov	r5, r1
    5abc:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    5abe:	6940      	ldr	r0, [r0, #20]
    5ac0:	4611      	mov	r1, r2
    5ac2:	1b40      	subs	r0, r0, r5
    5ac4:	f008 f8a2 	bl	dc0c <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    5ac8:	6923      	ldr	r3, [r4, #16]
    5aca:	4283      	cmp	r3, r0
    5acc:	d90a      	bls.n	5ae4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x2c>
    const size_t missing_memory = head_ - aligned_result;
    5ace:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    5ad0:	9300      	str	r3, [sp, #0]
    5ad2:	462a      	mov	r2, r5
    5ad4:	4904      	ldr	r1, [pc, #16]	; (5ae8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x30>)
    5ad6:	6860      	ldr	r0, [r4, #4]
    5ad8:	1aeb      	subs	r3, r5, r3
    5ada:	f008 fdb3 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    5ade:	2000      	movs	r0, #0
}
    5ae0:	b003      	add	sp, #12
    5ae2:	bd30      	pop	{r4, r5, pc}
  tail_ = aligned_result;
    5ae4:	6160      	str	r0, [r4, #20]
  return aligned_result;
    5ae6:	e7fb      	b.n	5ae0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x28>
    5ae8:	00063229 	.word	0x00063229

00005aec <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
                                                      size_t alignment) {
    5aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (head_ != temp_) {
    5aee:	6983      	ldr	r3, [r0, #24]
                                                      size_t alignment) {
    5af0:	460d      	mov	r5, r1
    5af2:	4611      	mov	r1, r2
  if (head_ != temp_) {
    5af4:	6902      	ldr	r2, [r0, #16]
                                                      size_t alignment) {
    5af6:	4604      	mov	r4, r0
  if (head_ != temp_) {
    5af8:	429a      	cmp	r2, r3
    5afa:	d006      	beq.n	5b0a <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1e>
    TF_LITE_REPORT_ERROR(
    5afc:	490d      	ldr	r1, [pc, #52]	; (5b34 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x48>)
    5afe:	6840      	ldr	r0, [r0, #4]
    5b00:	f008 fda0 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    5b04:	2001      	movs	r0, #1
}
    5b06:	b003      	add	sp, #12
    5b08:	bd30      	pop	{r4, r5, pc}
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    5b0a:	6880      	ldr	r0, [r0, #8]
    5b0c:	f008 f878 	bl	dc00 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    5b10:	6963      	ldr	r3, [r4, #20]
    5b12:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    5b14:	429d      	cmp	r5, r3
    5b16:	d907      	bls.n	5b28 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x3c>
    TF_LITE_REPORT_ERROR(
    5b18:	1aea      	subs	r2, r5, r3
    5b1a:	9200      	str	r2, [sp, #0]
    5b1c:	4906      	ldr	r1, [pc, #24]	; (5b38 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    5b1e:	462a      	mov	r2, r5
    5b20:	6860      	ldr	r0, [r4, #4]
    5b22:	f008 fd8f 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    5b26:	e7ed      	b.n	5b04 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
  head_ = aligned_result + size;
    5b28:	4428      	add	r0, r5
    5b2a:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    5b2c:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    5b2e:	2000      	movs	r0, #0
    5b30:	e7e9      	b.n	5b06 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1a>
    5b32:	bf00      	nop
    5b34:	00063272 	.word	0x00063272
    5b38:	000632c7 	.word	0x000632c7

00005b3c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    5b3c:	b510      	push	{r4, lr}
    5b3e:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    5b40:	b908      	cbnz	r0, 5b46 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0xa>
    5b42:	f00a f984 	bl	fe4e <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    5b46:	2900      	cmp	r1, #0
    5b48:	d0fb      	beq.n	5b42 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x6>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
    5b4a:	440a      	add	r2, r1
      temp_(buffer_head_) {}
    5b4c:	e9cd 1203 	strd	r1, r2, [sp, #12]
    5b50:	e9cd 1205 	strd	r1, r2, [sp, #20]
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    5b54:	2204      	movs	r2, #4
      temp_(buffer_head_) {}
    5b56:	4c0c      	ldr	r4, [pc, #48]	; (5b88 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>)
    5b58:	9107      	str	r1, [sp, #28]
    5b5a:	e9cd 4001 	strd	r4, r0, [sp, #4]
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    5b5e:	211c      	movs	r1, #28
    5b60:	eb0d 0002 	add.w	r0, sp, r2
    5b64:	f7ff ffa8 	bl	5ab8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    5b68:	b160      	cbz	r0, 5b84 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    5b6a:	9b02      	ldr	r3, [sp, #8]
    5b6c:	6004      	str	r4, [r0, #0]
    5b6e:	6043      	str	r3, [r0, #4]
    5b70:	9b03      	ldr	r3, [sp, #12]
    5b72:	6083      	str	r3, [r0, #8]
    5b74:	9b04      	ldr	r3, [sp, #16]
    5b76:	60c3      	str	r3, [r0, #12]
    5b78:	9b05      	ldr	r3, [sp, #20]
    5b7a:	6103      	str	r3, [r0, #16]
    5b7c:	9b06      	ldr	r3, [sp, #24]
    5b7e:	6143      	str	r3, [r0, #20]
    5b80:	9b07      	ldr	r3, [sp, #28]
    5b82:	6183      	str	r3, [r0, #24]
}
    5b84:	b008      	add	sp, #32
    5b86:	bd10      	pop	{r4, pc}
    5b88:	00062698 	.word	0x00062698

00005b8c <DebugLog>:
extern "C" void DebugLog(const char* s) {
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    5b8c:	4b03      	ldr	r3, [pc, #12]	; (5b9c <DebugLog+0x10>)
extern "C" void DebugLog(const char* s) {
    5b8e:	4602      	mov	r2, r0
  fprintf(stderr, "%s", s);
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	4903      	ldr	r1, [pc, #12]	; (5ba0 <DebugLog+0x14>)
    5b94:	68d8      	ldr	r0, [r3, #12]
    5b96:	f005 bf3d 	b.w	ba14 <fiprintf>
    5b9a:	bf00      	nop
    5b9c:	200000cc 	.word	0x200000cc
    5ba0:	00063e9b 	.word	0x00063e9b

00005ba4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    5ba4:	b500      	push	{lr}
    5ba6:	b0c1      	sub	sp, #260	; 0x104
    5ba8:	4602      	mov	r2, r0
    5baa:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    5bac:	4668      	mov	r0, sp
    5bae:	f44f 7180 	mov.w	r1, #256	; 0x100
    5bb2:	f000 f839 	bl	5c28 <MicroVsnprintf>
  DebugLog(log_buffer);
    5bb6:	4668      	mov	r0, sp
    5bb8:	f7ff ffe8 	bl	5b8c <DebugLog>
  DebugLog("\r\n");
    5bbc:	4802      	ldr	r0, [pc, #8]	; (5bc8 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    5bbe:	f7ff ffe5 	bl	5b8c <DebugLog>
#endif
}
    5bc2:	b041      	add	sp, #260	; 0x104
    5bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    5bc8:	00062cf6 	.word	0x00062cf6

00005bcc <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
    5bcc:	b500      	push	{lr}
    5bce:	b0c1      	sub	sp, #260	; 0x104
    5bd0:	4613      	mov	r3, r2
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    5bd2:	4668      	mov	r0, sp
    5bd4:	460a      	mov	r2, r1
    5bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
    5bda:	f000 f825 	bl	5c28 <MicroVsnprintf>
  DebugLog(log_buffer);
    5bde:	4668      	mov	r0, sp
    5be0:	f7ff ffd4 	bl	5b8c <DebugLog>
  DebugLog("\r\n");
    5be4:	4803      	ldr	r0, [pc, #12]	; (5bf4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
    5be6:	f7ff ffd1 	bl	5b8c <DebugLog>
  Log(format, args);
  return 0;
}
    5bea:	2000      	movs	r0, #0
    5bec:	b041      	add	sp, #260	; 0x104
    5bee:	f85d fb04 	ldr.w	pc, [sp], #4
    5bf2:	bf00      	nop
    5bf4:	00062cf6 	.word	0x00062cf6

00005bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    5bf8:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    5bfa:	6803      	ldr	r3, [r0, #0]
    5bfc:	4299      	cmp	r1, r3
    5bfe:	d306      	bcc.n	5c0e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj+0x16>
    5c00:	f44f 7183 	mov.w	r1, #262	; 0x106
    5c04:	4b05      	ldr	r3, [pc, #20]	; (5c1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj+0x24>)
    5c06:	4a06      	ldr	r2, [pc, #24]	; (5c20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj+0x28>)
    5c08:	4806      	ldr	r0, [pc, #24]	; (5c24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj+0x2c>)
    5c0a:	f005 fee5 	bl	b9d8 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    5c0e:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    5c10:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    5c14:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    5c18:	4410      	add	r0, r2
    5c1a:	bd08      	pop	{r3, pc}
    5c1c:	00063309 	.word	0x00063309
    5c20:	00063314 	.word	0x00063314
    5c24:	00063409 	.word	0x00063409

00005c28 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    5c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c2c:	4690      	mov	r8, r2
    5c2e:	461d      	mov	r5, r3
  int output_index = 0;
    5c30:	2400      	movs	r4, #0
                              va_list args) {
    5c32:	b097      	sub	sp, #92	; 0x5c
    5c34:	9002      	str	r0, [sp, #8]
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    5c36:	f101 39ff 	add.w	r9, r1, #4294967295
  while (*current != '\0' && output_index < usable_length) {
    5c3a:	9a02      	ldr	r2, [sp, #8]
    5c3c:	f898 3000 	ldrb.w	r3, [r8]
    5c40:	4621      	mov	r1, r4
    5c42:	1916      	adds	r6, r2, r4
    5c44:	b36b      	cbz	r3, 5ca2 <MicroVsnprintf+0x7a>
    5c46:	454c      	cmp	r4, r9
    5c48:	da2b      	bge.n	5ca2 <MicroVsnprintf+0x7a>
    if (*current == '%') {
    5c4a:	2b25      	cmp	r3, #37	; 0x25
    5c4c:	f108 0201 	add.w	r2, r8, #1
    5c50:	f040 811b 	bne.w	5e8a <MicroVsnprintf+0x262>
      current++;
      switch (*current) {
    5c54:	f898 3001 	ldrb.w	r3, [r8, #1]
    5c58:	2b66      	cmp	r3, #102	; 0x66
    5c5a:	d05c      	beq.n	5d16 <MicroVsnprintf+0xee>
    5c5c:	d809      	bhi.n	5c72 <MicroVsnprintf+0x4a>
    5c5e:	2b63      	cmp	r3, #99	; 0x63
    5c60:	f000 8116 	beq.w	5e90 <MicroVsnprintf+0x268>
    5c64:	2b64      	cmp	r3, #100	; 0x64
    5c66:	d018      	beq.n	5c9a <MicroVsnprintf+0x72>
    5c68:	2b25      	cmp	r3, #37	; 0x25
    5c6a:	f000 810c 	beq.w	5e86 <MicroVsnprintf+0x25e>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    5c6e:	4690      	mov	r8, r2
    5c70:	e7e3      	b.n	5c3a <MicroVsnprintf+0x12>
      switch (*current) {
    5c72:	2b75      	cmp	r3, #117	; 0x75
    5c74:	d02a      	beq.n	5ccc <MicroVsnprintf+0xa4>
    5c76:	2b78      	cmp	r3, #120	; 0x78
    5c78:	d031      	beq.n	5cde <MicroVsnprintf+0xb6>
    5c7a:	2b73      	cmp	r3, #115	; 0x73
    5c7c:	d1f7      	bne.n	5c6e <MicroVsnprintf+0x46>
          current++;
          break;
        case 's':
          char* string = va_arg(args, char*);
          int string_idx = 0;
          while (string_idx + output_index < usable_length &&
    5c7e:	f855 2b04 	ldr.w	r2, [r5], #4
    5c82:	3a01      	subs	r2, #1
                 string[string_idx] != '\0') {
    5c84:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
    5c88:	b1eb      	cbz	r3, 5cc6 <MicroVsnprintf+0x9e>
            output[output_index++] = string[string_idx++];
    5c8a:	3102      	adds	r1, #2
          while (string_idx + output_index < usable_length &&
    5c8c:	4549      	cmp	r1, r9
            output[output_index++] = string[string_idx++];
    5c8e:	f104 0401 	add.w	r4, r4, #1
    5c92:	f806 3b01 	strb.w	r3, [r6], #1
          while (string_idx + output_index < usable_length &&
    5c96:	dbf5      	blt.n	5c84 <MicroVsnprintf+0x5c>
    5c98:	e015      	b.n	5cc6 <MicroVsnprintf+0x9e>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    5c9a:	eba9 0304 	sub.w	r3, r9, r4
    5c9e:	2b0a      	cmp	r3, #10
    5ca0:	dc01      	bgt.n	5ca6 <MicroVsnprintf+0x7e>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
    5ca2:	3401      	adds	r4, #1
    5ca4:	e0fa      	b.n	5e9c <MicroVsnprintf+0x274>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    5ca6:	f855 0b04 	ldr.w	r0, [r5], #4
    *buffer++ = '-';
    5caa:	4631      	mov	r1, r6
  if (i < 0) {
    5cac:	2800      	cmp	r0, #0
    *buffer++ = '-';
    5cae:	bfb8      	it	lt
    5cb0:	232d      	movlt	r3, #45	; 0x2d
  return FastUInt32ToBufferLeft(u, buffer, 10);
    5cb2:	f04f 020a 	mov.w	r2, #10
    *buffer++ = '-';
    5cb6:	bfbc      	itt	lt
    5cb8:	f801 3b01 	strblt.w	r3, [r1], #1
    u = -u;
    5cbc:	4240      	neglt	r0, r0
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    5cbe:	f008 f849 	bl	dd54 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
    5cc2:	1b86      	subs	r6, r0, r6
          output_index +=
    5cc4:	4434      	add	r4, r6
          current++;
    5cc6:	f108 0202 	add.w	r2, r8, #2
    5cca:	e7d0      	b.n	5c6e <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    5ccc:	eba9 0304 	sub.w	r3, r9, r4
    5cd0:	2b0a      	cmp	r3, #10
    5cd2:	dde6      	ble.n	5ca2 <MicroVsnprintf+0x7a>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
    5cd4:	220a      	movs	r2, #10
    5cd6:	4631      	mov	r1, r6
    5cd8:	f855 0b04 	ldr.w	r0, [r5], #4
    5cdc:	e7ef      	b.n	5cbe <MicroVsnprintf+0x96>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    5cde:	eba9 0104 	sub.w	r1, r9, r4
    5ce2:	2909      	cmp	r1, #9
    5ce4:	f104 0201 	add.w	r2, r4, #1
    5ce8:	dc06      	bgt.n	5cf8 <MicroVsnprintf+0xd0>
            output[output_index++] = '\0';
    5cea:	2300      	movs	r3, #0
            return output_index;
    5cec:	4614      	mov	r4, r2
            output[output_index++] = '\0';
    5cee:	7033      	strb	r3, [r6, #0]
  return output_index;
}
    5cf0:	4620      	mov	r0, r4
    5cf2:	b017      	add	sp, #92	; 0x5c
    5cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          output[output_index++] = '0';
    5cf8:	2130      	movs	r1, #48	; 0x30
    5cfa:	7031      	strb	r1, [r6, #0]
          output[output_index++] = 'x';
    5cfc:	9902      	ldr	r1, [sp, #8]
    5cfe:	3402      	adds	r4, #2
    5d00:	548b      	strb	r3, [r1, r2]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    5d02:	190e      	adds	r6, r1, r4
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
    5d04:	2210      	movs	r2, #16
    5d06:	4631      	mov	r1, r6
    5d08:	f855 0b04 	ldr.w	r0, [r5], #4
    5d0c:	f008 f822 	bl	dd54 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
    5d10:	1b80      	subs	r0, r0, r6
          output_index +=
    5d12:	4404      	add	r4, r0
          current++;
    5d14:	e7d7      	b.n	5cc6 <MicroVsnprintf+0x9e>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    5d16:	eba9 0004 	sub.w	r0, r9, r4
    5d1a:	f7fa ffa5 	bl	c68 <__aeabi_i2f>
    5d1e:	4963      	ldr	r1, [pc, #396]	; (5eac <MicroVsnprintf+0x284>)
    5d20:	f7fb f994 	bl	104c <__aeabi_fcmplt>
    5d24:	2800      	cmp	r0, #0
    5d26:	d1bc      	bne.n	5ca2 <MicroVsnprintf+0x7a>
              FormatFloat(&output[output_index], va_arg(args, double));
    5d28:	3507      	adds	r5, #7
    5d2a:	f025 0507 	bic.w	r5, r5, #7
    5d2e:	e8f5 0102 	ldrd	r0, r1, [r5], #8
    5d32:	f7fa fe8f 	bl	a54 <__aeabi_d2f>
  char* current_end = buffer + (kFastToBufferSize - 1);
    5d36:	f106 032f 	add.w	r3, r6, #47	; 0x2f
  memcpy(&u, &f, sizeof(int32_t));
    5d3a:	2204      	movs	r2, #4
              FormatFloat(&output[output_index], va_arg(args, double));
    5d3c:	9004      	str	r0, [sp, #16]
  memcpy(&u, &f, sizeof(int32_t));
    5d3e:	a904      	add	r1, sp, #16
    5d40:	a805      	add	r0, sp, #20
  char* current_end = buffer + (kFastToBufferSize - 1);
    5d42:	9301      	str	r3, [sp, #4]
  memcpy(&u, &f, sizeof(int32_t));
    5d44:	f00a f89c 	bl	fe80 <memcpy>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    5d48:	9b05      	ldr	r3, [sp, #20]
    5d4a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  if (u & sign_mask) {
    5d4e:	2b00      	cmp	r3, #0
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    5d50:	f1a2 0a7f 	sub.w	sl, r2, #127	; 0x7f
    5d54:	9203      	str	r2, [sp, #12]
  const uint32_t fraction = (u & fraction_mask);
    5d56:	f3c3 0e16 	ubfx	lr, r3, #0, #23
    *current = '-';
    5d5a:	bfb8      	it	lt
    5d5c:	222d      	movlt	r2, #45	; 0x2d
    5d5e:	4633      	mov	r3, r6
    5d60:	bfb8      	it	lt
    5d62:	f803 2b01 	strblt.w	r2, [r3], #1
  *current = 0;
    5d66:	2200      	movs	r2, #0
  if (exponent == 128) {
    5d68:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
  *current = 0;
    5d6c:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
    5d6e:	d10d      	bne.n	5d8c <MicroVsnprintf+0x164>
    if (fraction == 0) {
    5d70:	9a01      	ldr	r2, [sp, #4]
    5d72:	1ad1      	subs	r1, r2, r3
    5d74:	f1be 0f00 	cmp.w	lr, #0
    5d78:	d106      	bne.n	5d88 <MicroVsnprintf+0x160>
      current = StrCatStr(current, (current_end - current), "Inf");
    5d7a:	4a4d      	ldr	r2, [pc, #308]	; (5eb0 <MicroVsnprintf+0x288>)
      current = StrCatStr(current, (current_end - current), "NaN");
    5d7c:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
    5d7e:	f007 ffd3 	bl	dd28 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    5d82:	4607      	mov	r7, r0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
    5d84:	1bbe      	subs	r6, r7, r6
    5d86:	e79d      	b.n	5cc4 <MicroVsnprintf+0x9c>
      current = StrCatStr(current, (current_end - current), "NaN");
    5d88:	4a4a      	ldr	r2, [pc, #296]	; (5eb4 <MicroVsnprintf+0x28c>)
    5d8a:	e7f7      	b.n	5d7c <MicroVsnprintf+0x154>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    5d8c:	4a4a      	ldr	r2, [pc, #296]	; (5eb8 <MicroVsnprintf+0x290>)
    5d8e:	af06      	add	r7, sp, #24
    5d90:	f102 0b08 	add.w	fp, r2, #8
    5d94:	46bc      	mov	ip, r7
    5d96:	6810      	ldr	r0, [r2, #0]
    5d98:	6851      	ldr	r1, [r2, #4]
    5d9a:	3208      	adds	r2, #8
    5d9c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    5da0:	455a      	cmp	r2, fp
    5da2:	4667      	mov	r7, ip
    5da4:	d1f6      	bne.n	5d94 <MicroVsnprintf+0x16c>
    5da6:	6810      	ldr	r0, [r2, #0]
    5da8:	7912      	ldrb	r2, [r2, #4]
    5daa:	f8cc 0000 	str.w	r0, [ip]
    5dae:	f88c 2004 	strb.w	r2, [ip, #4]
  uint32_t scaled_fraction = fraction;
    5db2:	4670      	mov	r0, lr
  for (int i = 0; i < scale_shifts_size; ++i) {
    5db4:	2200      	movs	r2, #0
    5db6:	af06      	add	r7, sp, #24
    scaled_fraction += (fraction >> scale_shifts[i]);
    5db8:	f917 1b01 	ldrsb.w	r1, [r7], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
    5dbc:	3201      	adds	r2, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
    5dbe:	fa2e f101 	lsr.w	r1, lr, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
    5dc2:	2a0d      	cmp	r2, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
    5dc4:	4408      	add	r0, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
    5dc6:	d1f7      	bne.n	5db8 <MicroVsnprintf+0x190>
  *current = '1';
    5dc8:	2231      	movs	r2, #49	; 0x31
    5dca:	701a      	strb	r2, [r3, #0]
  *current = '.';
    5dcc:	222e      	movs	r2, #46	; 0x2e
    5dce:	705a      	strb	r2, [r3, #1]
  *current = 0;
    5dd0:	2200      	movs	r2, #0
    5dd2:	709a      	strb	r2, [r3, #2]
  if (current_end - current <= kMaxFractionalDigits) {
    5dd4:	9a01      	ldr	r2, [sp, #4]
  current += 1;
    5dd6:	1c9f      	adds	r7, r3, #2
  if (current_end - current <= kMaxFractionalDigits) {
    5dd8:	eba2 0b07 	sub.w	fp, r2, r7
    5ddc:	f1bb 0f07 	cmp.w	fp, #7
    5de0:	ddd0      	ble.n	5d84 <MicroVsnprintf+0x15c>
    5de2:	f103 0208 	add.w	r2, r3, #8
    5de6:	4639      	mov	r1, r7
    *(current + i) = '0';
    5de8:	2330      	movs	r3, #48	; 0x30
    5dea:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    5dee:	428a      	cmp	r2, r1
    5df0:	d1fb      	bne.n	5dea <MicroVsnprintf+0x1c2>
  FastUInt32ToBufferLeft(number, number_string, base);
    5df2:	220a      	movs	r2, #10
    5df4:	a90a      	add	r1, sp, #40	; 0x28
    5df6:	f007 ffad 	bl	dd54 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    5dfa:	aa0a      	add	r2, sp, #40	; 0x28
    5dfc:	4659      	mov	r1, fp
    5dfe:	4638      	mov	r0, r7
    5e00:	f007 ff92 	bl	dd28 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  *current = '0';
    5e04:	2330      	movs	r3, #48	; 0x30
  int fraction_digits = current - previous;
    5e06:	1bc2      	subs	r2, r0, r7
  if (leading_zeros != 0) {
    5e08:	f1d2 0c07 	rsbs	ip, r2, #7
  *current = '0';
    5e0c:	7003      	strb	r3, [r0, #0]
  if (leading_zeros != 0) {
    5e0e:	d010      	beq.n	5e32 <MicroVsnprintf+0x20a>
    5e10:	4603      	mov	r3, r0
      *current = '0';
    5e12:	2130      	movs	r1, #48	; 0x30
    for (int i = 0; i < fraction_digits; i++) {
    5e14:	eba0 0e03 	sub.w	lr, r0, r3
    5e18:	4572      	cmp	r2, lr
    5e1a:	dd05      	ble.n	5e28 <MicroVsnprintf+0x200>
      *(current + leading_zeros) = *current;
    5e1c:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
    5e20:	f803 e00c 	strb.w	lr, [r3, ip]
      *current = '0';
    5e24:	7019      	strb	r1, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
    5e26:	e7f5      	b.n	5e14 <MicroVsnprintf+0x1ec>
    current += kMaxFractionalDigits;
    5e28:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    5e2c:	f1c2 0207 	rsb	r2, r2, #7
    5e30:	4410      	add	r0, r2
    5e32:	4603      	mov	r3, r0
    5e34:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    5e36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    5e3a:	2a30      	cmp	r2, #48	; 0x30
    5e3c:	d101      	bne.n	5e42 <MicroVsnprintf+0x21a>
    5e3e:	429f      	cmp	r7, r3
    5e40:	d3f8      	bcc.n	5e34 <MicroVsnprintf+0x20c>
  *current = 0;
    5e42:	2300      	movs	r3, #0
    5e44:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    5e46:	9b01      	ldr	r3, [sp, #4]
    5e48:	4a1c      	ldr	r2, [pc, #112]	; (5ebc <MicroVsnprintf+0x294>)
    5e4a:	1a19      	subs	r1, r3, r0
    5e4c:	f007 ff6c 	bl	dd28 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    5e50:	9b01      	ldr	r3, [sp, #4]
  if (i < 0) {
    5e52:	f1ba 0f00 	cmp.w	sl, #0
  current = StrCatInt32(current, (current_end - current), exponent);
    5e56:	eba3 0b00 	sub.w	fp, r3, r0
    *buffer++ = '-';
    5e5a:	bfb8      	it	lt
    5e5c:	232d      	movlt	r3, #45	; 0x2d
  current = StrCatStr(current, (current_end - current), "*2^");
    5e5e:	4607      	mov	r7, r0
    *buffer++ = '-';
    5e60:	bfbc      	itt	lt
    5e62:	f88d 3028 	strblt.w	r3, [sp, #40]	; 0x28
    u = -u;
    5e66:	9b03      	ldrlt	r3, [sp, #12]
  return FastUInt32ToBufferLeft(u, buffer, 10);
    5e68:	f04f 020a 	mov.w	r2, #10
    u = -u;
    5e6c:	bfba      	itte	lt
    5e6e:	f1c3 0a7f 	rsblt	sl, r3, #127	; 0x7f
    *buffer++ = '-';
    5e72:	f10d 0129 	addlt.w	r1, sp, #41	; 0x29
    5e76:	a90a      	addge	r1, sp, #40	; 0x28
  return FastUInt32ToBufferLeft(u, buffer, 10);
    5e78:	4650      	mov	r0, sl
    5e7a:	f007 ff6b 	bl	dd54 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
    5e7e:	4659      	mov	r1, fp
    5e80:	4638      	mov	r0, r7
    5e82:	aa0a      	add	r2, sp, #40	; 0x28
    5e84:	e77b      	b.n	5d7e <MicroVsnprintf+0x156>
          output[output_index++] = *current++;
    5e86:	f108 0202 	add.w	r2, r8, #2
      output[output_index++] = *current++;
    5e8a:	3401      	adds	r4, #1
    5e8c:	7033      	strb	r3, [r6, #0]
    5e8e:	e6ee      	b.n	5c6e <MicroVsnprintf+0x46>
          if (usable_length - output_index < 1) {
    5e90:	eba9 0304 	sub.w	r3, r9, r4
    5e94:	2b00      	cmp	r3, #0
    5e96:	f104 0401 	add.w	r4, r4, #1
    5e9a:	dc02      	bgt.n	5ea2 <MicroVsnprintf+0x27a>
  output[output_index++] = '\0';
    5e9c:	2300      	movs	r3, #0
    5e9e:	7033      	strb	r3, [r6, #0]
  return output_index;
    5ea0:	e726      	b.n	5cf0 <MicroVsnprintf+0xc8>
          output[output_index++] = va_arg(args, int32_t);
    5ea2:	f855 3b04 	ldr.w	r3, [r5], #4
    5ea6:	7033      	strb	r3, [r6, #0]
          current++;
    5ea8:	e70d      	b.n	5cc6 <MicroVsnprintf+0x9e>
    5eaa:	bf00      	nop
    5eac:	41600000 	.word	0x41600000
    5eb0:	0006346f 	.word	0x0006346f
    5eb4:	00063473 	.word	0x00063473
    5eb8:	0006347b 	.word	0x0006347b
    5ebc:	00063477 	.word	0x00063477

00005ec0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    5ec0:	6803      	ldr	r3, [r0, #0]
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    5ec2:	b510      	push	{r4, lr}
    5ec4:	1ac3      	subs	r3, r0, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    5ec6:	881a      	ldrh	r2, [r3, #0]
    5ec8:	2a08      	cmp	r2, #8
    5eca:	d918      	bls.n	5efe <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3e>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
    5ecc:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    5ece:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    5ed0:	b1ab      	cbz	r3, 5efe <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3e>
    5ed2:	58c2      	ldr	r2, [r0, r3]
    5ed4:	18a3      	adds	r3, r4, r2
    FLATBUFFERS_ASSERT(i < size());
    5ed6:	58a2      	ldr	r2, [r4, r2]
    5ed8:	4291      	cmp	r1, r2
    5eda:	d306      	bcc.n	5eea <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    5edc:	f44f 7183 	mov.w	r1, #262	; 0x106
    5ee0:	4b08      	ldr	r3, [pc, #32]	; (5f04 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x44>)
    5ee2:	4a09      	ldr	r2, [pc, #36]	; (5f08 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>)
    5ee4:	4809      	ldr	r0, [pc, #36]	; (5f0c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>)
    5ee6:	f005 fd77 	bl	b9d8 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    5eea:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    5eec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    5ef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
}
    5ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return NumSubgraphOperators(subgraph);
    5ef8:	4418      	add	r0, r3
    5efa:	f007 bf5a 	b.w	ddb2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    FLATBUFFERS_ASSERT(i < size());
    5efe:	2300      	movs	r3, #0
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	deff      	udf	#255	; 0xff
    5f04:	00063309 	.word	0x00063309
    5f08:	00063314 	.word	0x00063314
    5f0c:	00063409 	.word	0x00063409

00005f10 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    5f10:	6943      	ldr	r3, [r0, #20]
    5f12:	2b20      	cmp	r3, #32
    5f14:	d101      	bne.n	5f1a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xa>
    return registration->custom_name;
    5f16:	6980      	ldr	r0, [r0, #24]
    5f18:	4770      	bx	lr
  return (v < low) || (high < v);
    5f1a:	b2db      	uxtb	r3, r3
    5f1c:	2b91      	cmp	r3, #145	; 0x91
}

inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBuiltinOperator()[index];
    5f1e:	bf9a      	itte	ls
    5f20:	4a02      	ldrls	r2, [pc, #8]	; (5f2c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
    5f22:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    5f26:	4802      	ldrhi	r0, [pc, #8]	; (5f30 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
    5f28:	4770      	bx	lr
    5f2a:	bf00      	nop
    5f2c:	000626c4 	.word	0x000626c4
    5f30:	00062cf8 	.word	0x00062cf8

00005f34 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    5f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f38:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    5f3a:	2500      	movs	r5, #0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    5f3c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
  int previous_subgraph_idx = current_subgraph_index_;
    5f40:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    5f44:	69a3      	ldr	r3, [r4, #24]
    5f46:	681b      	ldr	r3, [r3, #0]
    5f48:	429d      	cmp	r5, r3
    5f4a:	d22d      	bcs.n	5fa8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    5f4c:	4629      	mov	r1, r5
    5f4e:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
    5f50:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    5f52:	f7ff ffb5 	bl	5ec0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
    5f56:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    5f58:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
    5f5a:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
    5f5e:	4546      	cmp	r6, r8
    5f60:	d020      	beq.n	5fa4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x70>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    5f62:	6923      	ldr	r3, [r4, #16]
    5f64:	f853 100b 	ldr.w	r1, [r3, fp]
    5f68:	fb0a 1106 	mla	r1, sl, r6, r1
      const TfLiteRegistration* registration =
    5f6c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
          subgraph_allocations_[subgraph_idx]
              .node_and_registrations[i]
              .registration;
      if (registration->prepare != nullptr) {
    5f6e:	689a      	ldr	r2, [r3, #8]
    5f70:	9301      	str	r3, [sp, #4]
    5f72:	b18a      	cbz	r2, 5f98 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x64>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    5f74:	6860      	ldr	r0, [r4, #4]
    5f76:	4790      	blx	r2
        if (prepare_status != kTfLiteOk) {
    5f78:	9b01      	ldr	r3, [sp, #4]
    5f7a:	4607      	mov	r7, r0
    5f7c:	b160      	cbz	r0, 5f98 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x64>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    5f7e:	4618      	mov	r0, r3
    5f80:	f7ff ffc6 	bl	5f10 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    5f84:	463b      	mov	r3, r7
    5f86:	4601      	mov	r1, r0
    5f88:	4632      	mov	r2, r6
    5f8a:	4809      	ldr	r0, [pc, #36]	; (5fb0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    5f8c:	f007 fe2b 	bl	dbe6 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
    5f90:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    5f92:	b003      	add	sp, #12
    5f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    5f98:	4631      	mov	r1, r6
    5f9a:	68e0      	ldr	r0, [r4, #12]
    5f9c:	f008 f8df 	bl	e15e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    5fa0:	3601      	adds	r6, #1
    5fa2:	e7dc      	b.n	5f5e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x2a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    5fa4:	3501      	adds	r5, #1
    5fa6:	e7cd      	b.n	5f44 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x10>
  return kTfLiteOk;
    5fa8:	2000      	movs	r0, #0
  current_subgraph_index_ = previous_subgraph_idx;
    5faa:	f8c4 9014 	str.w	r9, [r4, #20]
  return kTfLiteOk;
    5fae:	e7f0      	b.n	5f92 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x5e>
    5fb0:	00063489 	.word	0x00063489

00005fb4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    5fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int previous_subgraph_idx = current_subgraph_index_;
  current_subgraph_index_ = subgraph_idx;

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    5fb8:	6982      	ldr	r2, [r0, #24]
  int previous_subgraph_idx = current_subgraph_index_;
    5fba:	6943      	ldr	r3, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    5fbc:	6141      	str	r1, [r0, #20]
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    5fbe:	6812      	ldr	r2, [r2, #0]
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    5fc0:	b085      	sub	sp, #20
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    5fc2:	4291      	cmp	r1, r2
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    5fc4:	4681      	mov	r9, r0
    5fc6:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    5fc8:	9301      	str	r3, [sp, #4]
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    5fca:	d307      	bcc.n	5fdc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x28>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    5fcc:	4828      	ldr	r0, [pc, #160]	; (6070 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbc>)
    5fce:	f007 fe0a 	bl	dbe6 <_Z11MicroPrintfPKcz>
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
    5fd2:	2601      	movs	r6, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    5fd4:	4630      	mov	r0, r6
    5fd6:	b005      	add	sp, #20
    5fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    5fdc:	6880      	ldr	r0, [r0, #8]
    5fde:	f7ff ff6f 	bl	5ec0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  for (size_t i = 0; i < operators_size; ++i) {
    5fe2:	2500      	movs	r5, #0
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    5fe4:	4607      	mov	r7, r0
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    5fe6:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
      : profiler_(profiler) {
    5fea:	46ab      	mov	fp, r5
    5fec:	00e4      	lsls	r4, r4, #3
  for (size_t i = 0; i < operators_size; ++i) {
    5fee:	42bd      	cmp	r5, r7
    5ff0:	d039      	beq.n	6066 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xb2>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    5ff2:	f8d9 2010 	ldr.w	r2, [r9, #16]
    5ff6:	5916      	ldr	r6, [r2, r4]
    5ff8:	fb0a 6605 	mla	r6, sl, r5, r6
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    5ffc:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6000:	4640      	mov	r0, r8
    6002:	f7ff ff85 	bl	5f10 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6006:	f8d9 2004 	ldr.w	r2, [r9, #4]
    600a:	4601      	mov	r1, r0
    600c:	6b50      	ldr	r0, [r2, #52]	; 0x34
    600e:	e9cd b002 	strd	fp, r0, [sp, #8]
    if (profiler_ != nullptr) {
    6012:	b118      	cbz	r0, 601c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
      event_handle_ = profiler_->BeginEvent(tag);
    6014:	6802      	ldr	r2, [r0, #0]
    6016:	6892      	ldr	r2, [r2, #8]
    6018:	4790      	blx	r2
    601a:	9002      	str	r0, [sp, #8]
    TFLITE_DCHECK(registration->invoke);
    601c:	f8d8 200c 	ldr.w	r2, [r8, #12]
    6020:	b90a      	cbnz	r2, 6026 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x72>
    6022:	f009 ff14 	bl	fe4e <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    6026:	4631      	mov	r1, r6
    6028:	f8d9 0004 	ldr.w	r0, [r9, #4]
    602c:	4790      	blx	r2
    602e:	4606      	mov	r6, r0
    allocator_->ResetTempAllocations();
    6030:	f8d9 000c 	ldr.w	r0, [r9, #12]
    6034:	6802      	ldr	r2, [r0, #0]
    6036:	6892      	ldr	r2, [r2, #8]
    6038:	4790      	blx	r2
    if (invoke_status == kTfLiteError) {
    603a:	2e01      	cmp	r6, #1
    603c:	d10c      	bne.n	6058 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xa4>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    603e:	4640      	mov	r0, r8
    6040:	f7ff ff66 	bl	5f10 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6044:	4633      	mov	r3, r6
    6046:	4601      	mov	r1, r0
    6048:	462a      	mov	r2, r5
    604a:	480a      	ldr	r0, [pc, #40]	; (6074 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc0>)
    604c:	f007 fdcb 	bl	dbe6 <_Z11MicroPrintfPKcz>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6050:	a802      	add	r0, sp, #8
    6052:	f007 ff23 	bl	de9c <_ZN6tflite19ScopedMicroProfilerD1Ev>
    6056:	e7bd      	b.n	5fd4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x20>
    } else if (invoke_status != kTfLiteOk) {
    6058:	2e00      	cmp	r6, #0
    605a:	d1f9      	bne.n	6050 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x9c>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    605c:	a802      	add	r0, sp, #8
    605e:	f007 ff1d 	bl	de9c <_ZN6tflite19ScopedMicroProfilerD1Ev>
  for (size_t i = 0; i < operators_size; ++i) {
    6062:	3501      	adds	r5, #1
    6064:	e7c3      	b.n	5fee <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x3a>
  current_subgraph_index_ = previous_subgraph_idx;
    6066:	9b01      	ldr	r3, [sp, #4]
  return kTfLiteOk;
    6068:	2600      	movs	r6, #0
  current_subgraph_index_ = previous_subgraph_idx;
    606a:	f8c9 3014 	str.w	r3, [r9, #20]
  return kTfLiteOk;
    606e:	e7b1      	b.n	5fd4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x20>
    6070:	000634bf 	.word	0x000634bf
    6074:	000634f1 	.word	0x000634f1

00006078 <_ZNK11flatbuffers6VectorIiE3GetEj>:
  return_type Get(uoffset_t i) const {
    6078:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    607a:	6803      	ldr	r3, [r0, #0]
    607c:	4299      	cmp	r1, r3
    607e:	d306      	bcc.n	608e <_ZNK11flatbuffers6VectorIiE3GetEj+0x16>
    6080:	f44f 7183 	mov.w	r1, #262	; 0x106
    6084:	4b04      	ldr	r3, [pc, #16]	; (6098 <_ZNK11flatbuffers6VectorIiE3GetEj+0x20>)
    6086:	4a05      	ldr	r2, [pc, #20]	; (609c <_ZNK11flatbuffers6VectorIiE3GetEj+0x24>)
    6088:	4805      	ldr	r0, [pc, #20]	; (60a0 <_ZNK11flatbuffers6VectorIiE3GetEj+0x28>)
    608a:	f005 fca5 	bl	b9d8 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    608e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
    6092:	6840      	ldr	r0, [r0, #4]
    6094:	bd08      	pop	{r3, pc}
    6096:	bf00      	nop
    6098:	00063309 	.word	0x00063309
    609c:	00063525 	.word	0x00063525
    60a0:	00063409 	.word	0x00063409

000060a4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
    60a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60a8:	4607      	mov	r7, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    60aa:	2600      	movs	r6, #0
    60ac:	f04f 0b0c 	mov.w	fp, #12
TfLiteStatus MicroGraph::ResetVariableTensors() {
    60b0:	b085      	sub	sp, #20
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    60b2:	69b8      	ldr	r0, [r7, #24]
    60b4:	6803      	ldr	r3, [r0, #0]
    60b6:	429e      	cmp	r6, r3
    60b8:	d264      	bcs.n	6184 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe0>
  return_type operator[](uoffset_t i) const { return Get(i); }
    60ba:	4631      	mov	r1, r6
    60bc:	f7ff fd9c 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    60c0:	2500      	movs	r5, #0
    60c2:	4680      	mov	r8, r0
    60c4:	ea4f 09c6 	mov.w	r9, r6, lsl #3
    auto field_offset = GetOptionalFieldOffset(field);
    60c8:	2104      	movs	r1, #4
    60ca:	4640      	mov	r0, r8
    60cc:	f007 fe1b 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    60d0:	2800      	cmp	r0, #0
    60d2:	d05c      	beq.n	618e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xea>
    60d4:	f858 2000 	ldr.w	r2, [r8, r0]
    auto p = data_ + field_offset;
    60d8:	eb08 0100 	add.w	r1, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    60dc:	188b      	adds	r3, r1, r2
    60de:	588a      	ldr	r2, [r1, r2]
    60e0:	4295      	cmp	r5, r2
    60e2:	d24d      	bcs.n	6180 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xdc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    60e4:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    60e6:	eb03 0485 	add.w	r4, r3, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    60ea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
    60ee:	210e      	movs	r1, #14
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    60f0:	441c      	add	r4, r3
    auto field_offset = GetOptionalFieldOffset(field);
    60f2:	4620      	mov	r0, r4
    60f4:	f007 fe07 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    60f8:	2800      	cmp	r0, #0
    60fa:	d03d      	beq.n	6178 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd4>
      auto* tensor = subgraph->tensors()->Get(i);
      if (tensor->is_variable()) {
    60fc:	5c23      	ldrb	r3, [r4, r0]
    60fe:	2b00      	cmp	r3, #0
    6100:	d03a      	beq.n	6178 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd4>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    6102:	693b      	ldr	r3, [r7, #16]
    6104:	fb0b fa05 	mul.w	sl, fp, r5
    6108:	444b      	add	r3, r9
    610a:	6858      	ldr	r0, [r3, #4]
    610c:	a903      	add	r1, sp, #12
    610e:	4450      	add	r0, sl
    6110:	f007 fddc 	bl	dccc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6114:	4603      	mov	r3, r0
    6116:	2800      	cmp	r0, #0
    6118:	d135      	bne.n	6186 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe2>
    auto field_offset = GetOptionalFieldOffset(field);
    611a:	2106      	movs	r1, #6
    611c:	9001      	str	r0, [sp, #4]
    611e:	4620      	mov	r0, r4
    6120:	f007 fdf1 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6124:	4601      	mov	r1, r0
    6126:	b1f8      	cbz	r0, 6168 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc4>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
        if (tensor->type() == tflite::TensorType_INT8) {
    6128:	5622      	ldrsb	r2, [r4, r0]
    612a:	9b01      	ldr	r3, [sp, #4]
    612c:	2a09      	cmp	r2, #9
    612e:	d125      	bne.n	617c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd8>
    auto field_offset = GetOptionalFieldOffset(field);
    6130:	210c      	movs	r1, #12
    6132:	4620      	mov	r0, r4
    6134:	f007 fde7 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6138:	b198      	cbz	r0, 6162 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xbe>
    auto p = data_ + field_offset;
    613a:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    613c:	5824      	ldr	r4, [r4, r0]
    613e:	441c      	add	r4, r3
    auto field_offset = GetOptionalFieldOffset(field);
    6140:	210a      	movs	r1, #10
    6142:	4620      	mov	r0, r4
    6144:	f007 fddf 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6148:	b308      	cbz	r0, 618e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xea>
    614a:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
    614c:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    614e:	18d1      	adds	r1, r2, r3
    FLATBUFFERS_ASSERT(i < size());
    6150:	58d3      	ldr	r3, [r2, r3]
    6152:	b943      	cbnz	r3, 6166 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc2>
    6154:	f44f 7183 	mov.w	r1, #262	; 0x106
    6158:	4b0e      	ldr	r3, [pc, #56]	; (6194 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf0>)
    615a:	4a0f      	ldr	r2, [pc, #60]	; (6198 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>)
    615c:	480f      	ldr	r0, [pc, #60]	; (619c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf8>)
    615e:	f005 fc3b 	bl	b9d8 <__assert_func>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6162:	4604      	mov	r4, r0
    6164:	e7ec      	b.n	6140 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x9c>
          value = tensor->quantization()->zero_point()->Get(0);
    6166:	6849      	ldr	r1, [r1, #4]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    6168:	693b      	ldr	r3, [r7, #16]
    616a:	9a03      	ldr	r2, [sp, #12]
    616c:	444b      	add	r3, r9
    616e:	685b      	ldr	r3, [r3, #4]
    6170:	f853 000a 	ldr.w	r0, [r3, sl]
    6174:	f009 fe91 	bl	fe9a <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6178:	3501      	adds	r5, #1
    617a:	e7a5      	b.n	60c8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x24>
        int value = 0;
    617c:	4619      	mov	r1, r3
    617e:	e7f3      	b.n	6168 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc4>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6180:	3601      	adds	r6, #1
    6182:	e796      	b.n	60b2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
    6184:	2300      	movs	r3, #0
}
    6186:	4618      	mov	r0, r3
    6188:	b005      	add	sp, #20
    618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    618e:	6803      	ldr	r3, [r0, #0]
    6190:	deff      	udf	#255	; 0xff
    6192:	bf00      	nop
    6194:	00063309 	.word	0x00063309
    6198:	000635e4 	.word	0x000635e4
    619c:	00063409 	.word	0x00063409

000061a0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    61a0:	b510      	push	{r4, lr}
    61a2:	4604      	mov	r4, r0
    61a4:	4610      	mov	r0, r2
      current_subgraph_index_(0) {
    61a6:	e9c4 0302 	strd	r0, r3, [r4, #8]
    61aa:	2300      	movs	r3, #0
    61ac:	4a05      	ldr	r2, [pc, #20]	; (61c4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x24>)
    61ae:	e9c4 3304 	strd	r3, r3, [r4, #16]
    61b2:	e9c4 2100 	strd	r2, r1, [r4]
  if (model != nullptr) {
    61b6:	b118      	cbz	r0, 61c0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x20>
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
    61b8:	2108      	movs	r1, #8
    61ba:	f007 fdac 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    subgraphs_ = model->subgraphs();
    61be:	61a0      	str	r0, [r4, #24]
}
    61c0:	4620      	mov	r0, r4
    61c2:	bd10      	pop	{r4, pc}
    61c4:	00062918 	.word	0x00062918

000061c8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
    61c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61cc:	461e      	mov	r6, r3
    61ce:	f8dd 801c 	ldr.w	r8, [sp, #28]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
    61d2:	f100 070c 	add.w	r7, r0, #12
MicroInterpreter::MicroInterpreter(const Model* model,
    61d6:	4604      	mov	r4, r0
      output_tensors_(nullptr) {
    61d8:	e9c0 1200 	strd	r1, r2, [r0]
MicroInterpreter::MicroInterpreter(const Model* model,
    61dc:	460d      	mov	r5, r1
      output_tensors_(nullptr) {
    61de:	f8c0 8008 	str.w	r8, [r0, #8]
    61e2:	225c      	movs	r2, #92	; 0x5c
    61e4:	2100      	movs	r1, #0
    61e6:	4638      	mov	r0, r7
    61e8:	f009 fe57 	bl	fe9a <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    61ec:	4642      	mov	r2, r8
    61ee:	9906      	ldr	r1, [sp, #24]
    61f0:	4630      	mov	r0, r6
    61f2:	f007 ff91 	bl	e118 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      output_tensors_(nullptr) {
    61f6:	462a      	mov	r2, r5
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
    61f8:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
    61fa:	66a0      	str	r0, [r4, #104]	; 0x68
    61fc:	4639      	mov	r1, r7
    61fe:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    6202:	f7ff ffcd 	bl	61a0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
    6206:	2300      	movs	r3, #0
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
  context_.ReportError = ReportOpError;
    6208:	4a08      	ldr	r2, [pc, #32]	; (622c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE+0x64>)
}
    620a:	4620      	mov	r0, r4
  context_.ReportError = ReportOpError;
    620c:	6222      	str	r2, [r4, #32]
  context_.GetTensor = GetTensor;
    620e:	4a08      	ldr	r2, [pc, #32]	; (6230 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE+0x68>)
      output_tensors_(nullptr) {
    6210:	e9c4 3323 	strd	r3, r3, [r4, #140]	; 0x8c
  context_.GetTensor = GetTensor;
    6214:	65e2      	str	r2, [r4, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    6216:	4a07      	ldr	r2, [pc, #28]	; (6234 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE+0x6c>)
      output_tensors_(nullptr) {
    6218:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  context_.GetEvalTensor = GetEvalTensor;
    621c:	6622      	str	r2, [r4, #96]	; 0x60
  context_.profiler = profiler;
    621e:	9a08      	ldr	r2, [sp, #32]
  context_.impl_ = static_cast<void*>(this);
    6220:	61a4      	str	r4, [r4, #24]
  context_.profiler = profiler;
    6222:	6422      	str	r2, [r4, #64]	; 0x40
      output_tensors_(nullptr) {
    6224:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
}
    6228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    622c:	0000dfcf 	.word	0x0000dfcf
    6230:	0000df87 	.word	0x0000df87
    6234:	0000dfa3 	.word	0x0000dfa3

00006238 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    6238:	b538      	push	{r3, r4, r5, lr}
    623a:	4605      	mov	r5, r0
  const size_t length = outputs_size();
    623c:	6800      	ldr	r0, [r0, #0]
TfLiteTensor* MicroInterpreter::output(size_t index) {
    623e:	460c      	mov	r4, r1
  const size_t length = outputs_size();
    6240:	f007 fed5 	bl	dfee <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
  if (index >= length) {
    6244:	42a0      	cmp	r0, r4
  const size_t length = outputs_size();
    6246:	4603      	mov	r3, r0
  if (index >= length) {
    6248:	d806      	bhi.n	6258 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
    624a:	4622      	mov	r2, r4
    624c:	4905      	ldr	r1, [pc, #20]	; (6264 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>)
    624e:	68a8      	ldr	r0, [r5, #8]
    6250:	f008 f9f8 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
    6254:	2000      	movs	r0, #0
  }
  return output_tensors_[index];
}
    6256:	bd38      	pop	{r3, r4, r5, pc}
  return output_tensors_[index];
    6258:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    625c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6260:	e7f9      	b.n	6256 <_ZN6tflite16MicroInterpreter6outputEj+0x1e>
    6262:	bf00      	nop
    6264:	00063c77 	.word	0x00063c77

00006268 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    6268:	b538      	push	{r3, r4, r5, lr}
    626a:	4605      	mov	r5, r0
  const size_t length = inputs_size();
    626c:	6800      	ldr	r0, [r0, #0]
TfLiteTensor* MicroInterpreter::input(size_t index) {
    626e:	460c      	mov	r4, r1
  const size_t length = inputs_size();
    6270:	f007 fec9 	bl	e006 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
  if (index >= length) {
    6274:	42a0      	cmp	r0, r4
  const size_t length = inputs_size();
    6276:	4603      	mov	r3, r0
  if (index >= length) {
    6278:	d806      	bhi.n	6288 <_ZN6tflite16MicroInterpreter5inputEj+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
    627a:	4622      	mov	r2, r4
    627c:	4905      	ldr	r1, [pc, #20]	; (6294 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>)
    627e:	68a8      	ldr	r0, [r5, #8]
    6280:	f008 f9e0 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6284:	2000      	movs	r0, #0
}
    6286:	bd38      	pop	{r3, r4, r5, pc}
  return input_tensors_[index];
    6288:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    628c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6290:	e7f9      	b.n	6286 <_ZN6tflite16MicroInterpreter5inputEj+0x1e>
    6292:	bf00      	nop
    6294:	00063ca3 	.word	0x00063ca3

00006298 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    6298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    629c:	4604      	mov	r4, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    629e:	f04f 0a00 	mov.w	sl, #0
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    62a2:	b08b      	sub	sp, #44	; 0x2c
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    62a4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    62a8:	f007 fe26 	bl	def8 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    62ac:	4550      	cmp	r0, sl
    62ae:	f340 80fc 	ble.w	64aa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x212>
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    62b2:	6825      	ldr	r5, [r4, #0]
    62b4:	2108      	movs	r1, #8
    62b6:	4628      	mov	r0, r5
    62b8:	f007 fd2d 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    62bc:	4651      	mov	r1, sl
    62be:	f7ff fc9b 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    TFLITE_DCHECK(subgraph != nullptr);
    62c2:	4681      	mov	r9, r0
    62c4:	b908      	cbnz	r0, 62ca <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x32>
    62c6:	f009 fdc2 	bl	fe4e <abort>
    auto field_offset = GetOptionalFieldOffset(field);
    62ca:	2106      	movs	r1, #6
    62cc:	4628      	mov	r0, r5
    62ce:	f007 fd1a 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    62d2:	4606      	mov	r6, r0
    62d4:	b110      	cbz	r0, 62dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x44>
    62d6:	59ae      	ldr	r6, [r5, r6]
    auto p = data_ + field_offset;
    62d8:	1828      	adds	r0, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    62da:	4406      	add	r6, r0
        allocator_.GetBuiltinDataAllocator();
    62dc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    62de:	f007 ff67 	bl	e1b0 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    62e2:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    62e4:	4648      	mov	r0, r9
    62e6:	f007 fd64 	bl	ddb2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    for (size_t i = 0; i < operators_size; ++i) {
    62ea:	f04f 0800 	mov.w	r8, #0
    62ee:	ea4f 03ca 	mov.w	r3, sl, lsl #3
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    62f2:	9005      	str	r0, [sp, #20]
    for (size_t i = 0; i < operators_size; ++i) {
    62f4:	9302      	str	r3, [sp, #8]
    62f6:	9b05      	ldr	r3, [sp, #20]
    62f8:	4598      	cmp	r8, r3
    62fa:	f000 80d3 	beq.w	64a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20c>
    auto field_offset = GetOptionalFieldOffset(field);
    62fe:	210a      	movs	r1, #10
    6300:	4648      	mov	r0, r9
    6302:	f007 fd00 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6306:	2800      	cmp	r0, #0
    6308:	f000 80d1 	beq.w	64ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x216>
    630c:	f859 2000 	ldr.w	r2, [r9, r0]
    auto p = data_ + field_offset;
    6310:	eb09 0100 	add.w	r1, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6314:	188b      	adds	r3, r1, r2
    FLATBUFFERS_ASSERT(i < size());
    6316:	588a      	ldr	r2, [r1, r2]
    6318:	4590      	cmp	r8, r2
    631a:	d306      	bcc.n	632a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x92>
    631c:	f44f 7183 	mov.w	r1, #262	; 0x106
    6320:	4b64      	ldr	r3, [pc, #400]	; (64b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x21c>)
    6322:	4a65      	ldr	r2, [pc, #404]	; (64b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x220>)
    6324:	4865      	ldr	r0, [pc, #404]	; (64bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x224>)
    6326:	f005 fb57 	bl	b9d8 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    632a:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    632c:	eb03 0588 	add.w	r5, r3, r8, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6330:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
    6334:	2104      	movs	r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6336:	441d      	add	r5, r3
    auto field_offset = GetOptionalFieldOffset(field);
    6338:	4628      	mov	r0, r5
    633a:	f007 fce4 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    633e:	4607      	mov	r7, r0
    6340:	b100      	cbz	r0, 6344 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    6342:	582f      	ldr	r7, [r5, r0]
      if (index >= opcodes->size()) {
    6344:	6833      	ldr	r3, [r6, #0]
    6346:	42bb      	cmp	r3, r7
    6348:	d805      	bhi.n	6356 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xbe>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    634a:	4639      	mov	r1, r7
    634c:	485c      	ldr	r0, [pc, #368]	; (64c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x228>)
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    634e:	f007 fc4a 	bl	dbe6 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    6352:	2301      	movs	r3, #1
    6354:	e026      	b.n	63a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6356:	1d33      	adds	r3, r6, #4
    p += i * sizeof(uoffset_t);
    6358:	eb03 0b87 	add.w	fp, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    635c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
                                          .node_and_registrations[i]
    6360:	9a02      	ldr	r2, [sp, #8]
    6362:	449b      	add	fp, r3
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    6364:	232c      	movs	r3, #44	; 0x2c
    6366:	fb03 f308 	mul.w	r3, r3, r8
    636a:	9301      	str	r3, [sp, #4]
    636c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    636e:	4658      	mov	r0, fp
                                          .node_and_registrations[i]
    6370:	589b      	ldr	r3, [r3, r2]
    6372:	9a01      	ldr	r2, [sp, #4]
    6374:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    6376:	3328      	adds	r3, #40	; 0x28
    6378:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    637c:	f001 fc46 	bl	7c0c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    6380:	b1a0      	cbz	r0, 63ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x114>
    6382:	9001      	str	r0, [sp, #4]
        MicroPrintf("Failed to get registration from op code %s\n ",
    6384:	4658      	mov	r0, fp
    6386:	f008 f979 	bl	e67c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    638a:	2891      	cmp	r0, #145	; 0x91
  return EnumNamesBuiltinOperator()[index];
    638c:	bf98      	it	ls
    638e:	4a4d      	ldrls	r2, [pc, #308]	; (64c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>)
    6390:	9b01      	ldr	r3, [sp, #4]
    6392:	bf94      	ite	ls
    6394:	f852 1020 	ldrls.w	r1, [r2, r0, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6398:	494b      	ldrhi	r1, [pc, #300]	; (64c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x230>)
    639a:	484c      	ldr	r0, [pc, #304]	; (64cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>)
    639c:	9301      	str	r3, [sp, #4]
    639e:	f007 fc22 	bl	dbe6 <_Z11MicroPrintfPKcz>
        return status;
    63a2:	9b01      	ldr	r3, [sp, #4]
}
    63a4:	4618      	mov	r0, r3
    63a6:	b00b      	add	sp, #44	; 0x2c
    63a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     .registration;
    63ac:	9902      	ldr	r1, [sp, #8]
                                     .node_and_registrations[i]
    63ae:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
                                     .registration;
    63b0:	5852      	ldr	r2, [r2, r1]
    63b2:	9901      	ldr	r1, [sp, #4]
    63b4:	440a      	add	r2, r1
    63b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
      if (registration == nullptr) {
    63b8:	b912      	cbnz	r2, 63c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x128>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    63ba:	4639      	mov	r1, r7
    63bc:	4844      	ldr	r0, [pc, #272]	; (64d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x238>)
    63be:	e7c6      	b.n	634e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb6>
      BuiltinOperator op_type =
    63c0:	f892 b014 	ldrb.w	fp, [r2, #20]
      unsigned char* builtin_data = nullptr;
    63c4:	9007      	str	r0, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    63c6:	f1bb 0f20 	cmp.w	fp, #32
    auto field_offset = GetOptionalFieldOffset(field);
    63ca:	f04f 010e 	mov.w	r1, #14
    63ce:	4628      	mov	r0, r5
    63d0:	d13f      	bne.n	6452 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    63d2:	f007 fc98 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    63d6:	2800      	cmp	r0, #0
    63d8:	d133      	bne.n	6442 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
      size_t custom_data_size = 0;
    63da:	2700      	movs	r7, #0
      const char* custom_data = nullptr;
    63dc:	9703      	str	r7, [sp, #12]
    return const_cast<Table *>(this)->GetPointer<P>(field);
    63de:	2106      	movs	r1, #6
    63e0:	4628      	mov	r0, r5
    63e2:	f007 fd67 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    63e6:	aa08      	add	r2, sp, #32
    63e8:	4601      	mov	r1, r0
    63ea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    63ec:	f007 fed6 	bl	e19c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    63f0:	4603      	mov	r3, r0
    63f2:	2800      	cmp	r0, #0
    63f4:	d1d6      	bne.n	63a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10c>
    63f6:	2108      	movs	r1, #8
    63f8:	4628      	mov	r0, r5
    63fa:	f007 fd5b 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    63fe:	aa09      	add	r2, sp, #36	; 0x24
    6400:	4601      	mov	r1, r0
    6402:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6404:	f007 feca 	bl	e19c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    6408:	4603      	mov	r3, r0
    640a:	2800      	cmp	r0, #0
    640c:	d1ca      	bne.n	63a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10c>
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    640e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    6410:	9902      	ldr	r1, [sp, #8]
    for (size_t i = 0; i < operators_size; ++i) {
    6412:	f108 0801 	add.w	r8, r8, #1
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    6416:	f852 b001 	ldr.w	fp, [r2, r1]
    641a:	9a01      	ldr	r2, [sp, #4]
      *node = {};
    641c:	4601      	mov	r1, r0
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    641e:	eb0b 0502 	add.w	r5, fp, r2
      *node = {};
    6422:	4628      	mov	r0, r5
    6424:	2228      	movs	r2, #40	; 0x28
    6426:	f009 fd38 	bl	fe9a <memset>
      node->inputs = inputs_array;
    642a:	9b08      	ldr	r3, [sp, #32]
    642c:	9a01      	ldr	r2, [sp, #4]
    642e:	f84b 3002 	str.w	r3, [fp, r2]
      node->outputs = outputs_array;
    6432:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6434:	606b      	str	r3, [r5, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    6436:	9b07      	ldr	r3, [sp, #28]
    6438:	616b      	str	r3, [r5, #20]
      node->custom_initial_data = custom_data;
    643a:	9b03      	ldr	r3, [sp, #12]
      node->custom_initial_data_size = custom_data_size;
    643c:	e9c5 3706 	strd	r3, r7, [r5, #24]
    for (size_t i = 0; i < operators_size; ++i) {
    6440:	e759      	b.n	62f6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6442:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
    6444:	182a      	adds	r2, r5, r0
        if (op->custom_options() != nullptr) {
    6446:	18d1      	adds	r1, r2, r3
    6448:	d0c7      	beq.n	63da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x142>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    644a:	3104      	adds	r1, #4
          custom_data_size = op->custom_options()->size();
    644c:	58d7      	ldr	r7, [r2, r3]
    644e:	9103      	str	r1, [sp, #12]
    6450:	e7c5      	b.n	63de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x146>
    auto field_offset = GetOptionalFieldOffset(field);
    6452:	f007 fc58 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6456:	b160      	cbz	r0, 6472 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1da>
    6458:	582a      	ldr	r2, [r5, r0]
    auto p = data_ + field_offset;
    645a:	182b      	adds	r3, r5, r0
        if (op->custom_options() != nullptr) {
    645c:	42d3      	cmn	r3, r2
    645e:	d008      	beq.n	6472 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1da>
  return (v < low) || (high < v);
    6460:	f1bb 0f91 	cmp.w	fp, #145	; 0x91
  return EnumNamesBuiltinOperator()[index];
    6464:	bf96      	itet	ls
    6466:	4b17      	ldrls	r3, [pc, #92]	; (64c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6468:	4917      	ldrhi	r1, [pc, #92]	; (64c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x230>)
  return EnumNamesBuiltinOperator()[index];
    646a:	f853 102b 	ldrls.w	r1, [r3, fp, lsl #2]
          MicroPrintf(
    646e:	4819      	ldr	r0, [pc, #100]	; (64d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23c>)
    6470:	e76d      	b.n	634e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb6>
            op_resolver_.GetOpDataParser(op_type);
    6472:	6860      	ldr	r0, [r4, #4]
    6474:	4659      	mov	r1, fp
    6476:	6803      	ldr	r3, [r0, #0]
    6478:	6a1b      	ldr	r3, [r3, #32]
    647a:	4798      	blx	r3
        if (parser == nullptr) {
    647c:	4607      	mov	r7, r0
    647e:	b940      	cbnz	r0, 6492 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1fa>
    6480:	f1bb 0f91 	cmp.w	fp, #145	; 0x91
    6484:	bf96      	itet	ls
    6486:	4b0f      	ldrls	r3, [pc, #60]	; (64c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x22c>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6488:	490f      	ldrhi	r1, [pc, #60]	; (64c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x230>)
  return EnumNamesBuiltinOperator()[index];
    648a:	f853 102b 	ldrls.w	r1, [r3, fp, lsl #2]
          MicroPrintf("Did not find a parser for %s",
    648e:	4812      	ldr	r0, [pc, #72]	; (64d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x240>)
    6490:	e75d      	b.n	634e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb6>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    6492:	ab07      	add	r3, sp, #28
    6494:	4628      	mov	r0, r5
    6496:	9a04      	ldr	r2, [sp, #16]
    6498:	68a1      	ldr	r1, [r4, #8]
    649a:	47b8      	blx	r7
    649c:	4603      	mov	r3, r0
    649e:	2800      	cmp	r0, #0
    64a0:	d09b      	beq.n	63da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x142>
    64a2:	e77f      	b.n	63a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10c>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    64a4:	f10a 0a01 	add.w	sl, sl, #1
    64a8:	e6fc      	b.n	62a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    64aa:	2300      	movs	r3, #0
    64ac:	e77a      	b.n	63a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10c>
    FLATBUFFERS_ASSERT(i < size());
    64ae:	6803      	ldr	r3, [r0, #0]
    64b0:	deff      	udf	#255	; 0xff
    64b2:	bf00      	nop
    64b4:	00063309 	.word	0x00063309
    64b8:	00063cce 	.word	0x00063cce
    64bc:	00063409 	.word	0x00063409
    64c0:	00063dc3 	.word	0x00063dc3
    64c4:	000626c4 	.word	0x000626c4
    64c8:	00062cf8 	.word	0x00062cf8
    64cc:	00063ded 	.word	0x00063ded
    64d0:	00063e1a 	.word	0x00063e1a
    64d4:	00063e3b 	.word	0x00063e3b
    64d8:	00063e81 	.word	0x00063e81

000064dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    64dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    64e0:	6801      	ldr	r1, [r0, #0]
TfLiteStatus MicroInterpreter::AllocateTensors() {
    64e2:	4604      	mov	r4, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    64e4:	6e80      	ldr	r0, [r0, #104]	; 0x68
    64e6:	f000 f90d 	bl	6704 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    64ea:	4601      	mov	r1, r0
    64ec:	b950      	cbnz	r0, 6504 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    initialization_status_ = kTfLiteError;
    64ee:	2501      	movs	r5, #1
    TF_LITE_REPORT_ERROR(error_reporter_,
    64f0:	4960      	ldr	r1, [pc, #384]	; (6674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x198>)
    64f2:	68a0      	ldr	r0, [r4, #8]
    64f4:	f008 f8a6 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    64f8:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
}
    64fc:	4628      	mov	r0, r5
    64fe:	b003      	add	sp, #12
    6500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  graph_.SetSubgraphAllocations(allocations);
    6504:	f104 066c 	add.w	r6, r4, #108	; 0x6c
    6508:	4630      	mov	r0, r6
    650a:	f007 fcd1 	bl	deb0 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    650e:	4620      	mov	r0, r4
    6510:	f7ff fec2 	bl	6298 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    6514:	4605      	mov	r5, r0
    6516:	2800      	cmp	r0, #0
    6518:	d1f0      	bne.n	64fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    651a:	4b57      	ldr	r3, [pc, #348]	; (6678 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x19c>)
  context_.GetScratchBuffer = nullptr;
    651c:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    6520:	6463      	str	r3, [r4, #68]	; 0x44
  context_.GetExecutionPlan = GetGraph;
    6522:	4b56      	ldr	r3, [pc, #344]	; (667c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a0>)
  graph_.InitSubgraphs();
    6524:	4630      	mov	r0, r6
  context_.GetExecutionPlan = GetGraph;
    6526:	6123      	str	r3, [r4, #16]
  graph_.InitSubgraphs();
    6528:	f007 fc5a 	bl	dde0 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    652c:	4b54      	ldr	r3, [pc, #336]	; (6680 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a4>)
  graph_.PrepareSubgraphs();
    652e:	4630      	mov	r0, r6
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    6530:	64e3      	str	r3, [r4, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    6532:	f7ff fcff 	bl	5f34 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.GetScratchBuffer = GetScratchBuffer;
    6536:	4b53      	ldr	r3, [pc, #332]	; (6684 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>)
  context_.AllocatePersistentBuffer = nullptr;
    6538:	6465      	str	r5, [r4, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    653a:	64e5      	str	r5, [r4, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    653c:	6523      	str	r3, [r4, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    653e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    6540:	6821      	ldr	r1, [r4, #0]
    6542:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6544:	f104 038c 	add.w	r3, r4, #140	; 0x8c
    6548:	f000 f9b4 	bl	68b4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    654c:	4605      	mov	r5, r0
    654e:	2800      	cmp	r0, #0
    6550:	d1d4      	bne.n	64fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20>
          sizeof(TfLiteTensor*) * inputs_size()));
    6552:	6820      	ldr	r0, [r4, #0]
    6554:	f007 fd57 	bl	e006 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    6558:	6ea7      	ldr	r7, [r4, #104]	; 0x68
    655a:	0081      	lsls	r1, r0, #2
          sizeof(TfLiteTensor*) * inputs_size()));
    655c:	683b      	ldr	r3, [r7, #0]
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    655e:	4638      	mov	r0, r7
    6560:	68db      	ldr	r3, [r3, #12]
    6562:	4798      	blx	r3
  input_tensors_ =
    6564:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    6568:	b948      	cbnz	r0, 657e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xa2>
    TF_LITE_REPORT_ERROR(
    656a:	6820      	ldr	r0, [r4, #0]
    656c:	f007 fd4b 	bl	e006 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    6570:	4945      	ldr	r1, [pc, #276]	; (6688 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>)
    6572:	0082      	lsls	r2, r0, #2
      TF_LITE_REPORT_ERROR(error_reporter_,
    6574:	68a0      	ldr	r0, [r4, #8]
    6576:	f008 f865 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    657a:	2501      	movs	r5, #1
    657c:	e7be      	b.n	64fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20>
  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
    return model_->subgraphs()->Get(0)->inputs()->size();
  }
  const flatbuffers::Vector<int32_t>& inputs() const {
    return *model_->subgraphs()->Get(0)->inputs();
    657e:	46aa      	mov	sl, r5
  for (size_t i = 0; i < inputs_size(); ++i) {
    6580:	6827      	ldr	r7, [r4, #0]
    6582:	4638      	mov	r0, r7
    6584:	f007 fd3f 	bl	e006 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    6588:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    658c:	42a8      	cmp	r0, r5
    658e:	f8d8 9000 	ldr.w	r9, [r8]
    6592:	d923      	bls.n	65dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x100>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6594:	2108      	movs	r1, #8
    6596:	4638      	mov	r0, r7
    6598:	f007 fbbd 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    659c:	2100      	movs	r1, #0
    659e:	f7ff fb2b 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    65a2:	2106      	movs	r1, #6
    65a4:	f007 fc86 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    65a8:	4629      	mov	r1, r5
    65aa:	f7ff fd65 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
    65ae:	f8cd a000 	str.w	sl, [sp]
    65b2:	4603      	mov	r3, r0
    65b4:	4639      	mov	r1, r7
    65b6:	4640      	mov	r0, r8
    65b8:	f8d9 9000 	ldr.w	r9, [r9]
    65bc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    65be:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
    65c2:	47c8      	blx	r9
    if (input_tensors_[i] == nullptr) {
    65c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    65c8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
    if (input_tensors_[i] == nullptr) {
    65cc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    65d0:	b913      	cbnz	r3, 65d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfc>
      TF_LITE_REPORT_ERROR(error_reporter_,
    65d2:	462a      	mov	r2, r5
    65d4:	492d      	ldr	r1, [pc, #180]	; (668c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>)
    65d6:	e7cd      	b.n	6574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x98>
  for (size_t i = 0; i < inputs_size(); ++i) {
    65d8:	3501      	adds	r5, #1
    65da:	e7d1      	b.n	6580 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xa4>
          sizeof(TfLiteTensor*) * outputs_size()));
    65dc:	4638      	mov	r0, r7
    65de:	f007 fd06 	bl	dfee <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    65e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
    65e6:	0081      	lsls	r1, r0, #2
    65e8:	4640      	mov	r0, r8
    65ea:	4798      	blx	r3
  output_tensors_ =
    65ec:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    65f0:	b928      	cbnz	r0, 65fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x122>
    TF_LITE_REPORT_ERROR(
    65f2:	6820      	ldr	r0, [r4, #0]
    65f4:	f007 fcfb 	bl	dfee <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
    65f8:	4925      	ldr	r1, [pc, #148]	; (6690 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b4>)
    65fa:	0082      	lsls	r2, r0, #2
    65fc:	e7ba      	b.n	6574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x98>
  for (size_t i = 0; i < outputs_size(); ++i) {
    65fe:	2500      	movs	r5, #0
  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
  }
  const flatbuffers::Vector<int32_t>& outputs() const {
    return *model_->subgraphs()->Get(0)->outputs();
    6600:	46a9      	mov	r9, r5
    6602:	6827      	ldr	r7, [r4, #0]
    6604:	4638      	mov	r0, r7
    6606:	f007 fcf2 	bl	dfee <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
    660a:	42a8      	cmp	r0, r5
    660c:	d927      	bls.n	665e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
    660e:	2108      	movs	r1, #8
    6610:	4638      	mov	r0, r7
    6612:	f007 fb80 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    6616:	2100      	movs	r1, #0
    6618:	f7ff faee 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    661c:	2108      	movs	r1, #8
    661e:	f007 fc49 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    6622:	4629      	mov	r1, r5
    6624:	f7ff fd28 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
    6628:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    662c:	4603      	mov	r3, r0
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    662e:	f8d8 2000 	ldr.w	r2, [r8]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    6632:	f8cd 9000 	str.w	r9, [sp]
    6636:	f8d2 b000 	ldr.w	fp, [r2]
    663a:	4639      	mov	r1, r7
    663c:	4640      	mov	r0, r8
    663e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    6640:	f8d4 a094 	ldr.w	sl, [r4, #148]	; 0x94
    6644:	47d8      	blx	fp
    if (output_tensors_[i] == nullptr) {
    6646:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    664a:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
    if (output_tensors_[i] == nullptr) {
    664e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    6652:	b913      	cbnz	r3, 665a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x17e>
      TF_LITE_REPORT_ERROR(error_reporter_,
    6654:	462a      	mov	r2, r5
    6656:	490f      	ldr	r1, [pc, #60]	; (6694 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b8>)
    6658:	e78c      	b.n	6574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x98>
  for (size_t i = 0; i < outputs_size(); ++i) {
    665a:	3501      	adds	r5, #1
    665c:	e7d1      	b.n	6602 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x126>

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
    665e:	4630      	mov	r0, r6
    6660:	f7ff fd20 	bl	60a4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    6664:	4605      	mov	r5, r0
    6666:	2800      	cmp	r0, #0
    6668:	f47f af48 	bne.w	64fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20>
  tensors_allocated_ = true;
    666c:	2301      	movs	r3, #1
    666e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
  return kTfLiteOk;
    6672:	e743      	b.n	64fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20>
    6674:	00063e9e 	.word	0x00063e9e
    6678:	0000df71 	.word	0x0000df71
    667c:	0000dfb7 	.word	0x0000dfb7
    6680:	0000dfc1 	.word	0x0000dfc1
    6684:	0000df7b 	.word	0x0000df7b
    6688:	00063ec1 	.word	0x00063ec1
    668c:	00063f0a 	.word	0x00063f0a
    6690:	00063f2f 	.word	0x00063f2f
    6694:	00063f79 	.word	0x00063f79

00006698 <_ZN6tflite16MicroInterpreter6InvokeEv>:
  if (initialization_status_ != kTfLiteOk) {
    6698:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
TfLiteStatus MicroInterpreter::Invoke() {
    669c:	b510      	push	{r4, lr}
    669e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    66a0:	b12b      	cbz	r3, 66ae <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
    66a2:	490a      	ldr	r1, [pc, #40]	; (66cc <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>)
    66a4:	6880      	ldr	r0, [r0, #8]
    66a6:	f007 ffcd 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    66aa:	2001      	movs	r0, #1
}
    66ac:	bd10      	pop	{r4, pc}
  if (!tensors_allocated_) {
    66ae:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    66b2:	b133      	cbz	r3, 66c2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x2a>
  return graph_.InvokeSubgraph(0);
    66b4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    66b8:	2100      	movs	r1, #0
}
    66ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return graph_.InvokeSubgraph(0);
    66be:	f7ff bc79 	b.w	5fb4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    66c2:	f7ff ff0b 	bl	64dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    66c6:	2800      	cmp	r0, #0
    66c8:	d0f4      	beq.n	66b4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c>
    66ca:	e7ef      	b.n	66ac <_ZN6tflite16MicroInterpreter6InvokeEv+0x14>
    66cc:	00063f9f 	.word	0x00063f9f

000066d0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                              aligned_arena_size),
                error_reporter);
}

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
    66d0:	b538      	push	{r3, r4, r5, lr}
    66d2:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
    66d4:	4604      	mov	r4, r0
    66d6:	b908      	cbnz	r0, 66dc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xc>
    66d8:	f009 fbb9 	bl	fe4e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    66dc:	2900      	cmp	r1, #0
    66de:	d0fb      	beq.n	66d8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x8>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
    66e0:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
    66e2:	2204      	movs	r2, #4
    66e4:	211c      	movs	r1, #28
    66e6:	68db      	ldr	r3, [r3, #12]
    66e8:	4798      	blx	r3
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
    66ea:	b138      	cbz	r0, 66fc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
      model_is_allocating_(false) {}
    66ec:	4b04      	ldr	r3, [pc, #16]	; (6700 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>)
    66ee:	60c5      	str	r5, [r0, #12]
    66f0:	e9c0 3400 	strd	r3, r4, [r0]
    66f4:	2300      	movs	r3, #0
    66f6:	e9c0 3305 	strd	r3, r3, [r0, #20]
    66fa:	7403      	strb	r3, [r0, #16]
  return allocator;
}
    66fc:	bd38      	pop	{r3, r4, r5, pc}
    66fe:	bf00      	nop
    6700:	0006296c 	.word	0x0006296c

00006704 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    6704:	b570      	push	{r4, r5, r6, lr}
    6706:	4604      	mov	r4, r0
  TFLITE_DCHECK(model != nullptr);
    6708:	460e      	mov	r6, r1
    670a:	b909      	cbnz	r1, 6710 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc>
    670c:	f009 fb9f 	bl	fe4e <abort>

  if (model_is_allocating_) {
    6710:	7c03      	ldrb	r3, [r0, #16]
    6712:	b12b      	cbz	r3, 6720 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x1c>
    TF_LITE_REPORT_ERROR(error_reporter_,
    6714:	491d      	ldr	r1, [pc, #116]	; (678c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x88>)
    6716:	68c0      	ldr	r0, [r0, #12]
    6718:	f007 ff94 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    return nullptr;
    671c:	2500      	movs	r5, #0
    671e:	e022      	b.n	6766 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x62>
  model_is_allocating_ = true;
    6720:	2301      	movs	r3, #1
    6722:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    6724:	6840      	ldr	r0, [r0, #4]
    6726:	2204      	movs	r2, #4
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    6728:	6803      	ldr	r3, [r0, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    672a:	2108      	movs	r1, #8
    672c:	68db      	ldr	r3, [r3, #12]
    672e:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    6730:	b118      	cbz	r0, 673a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x36>
    6732:	6863      	ldr	r3, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    6734:	4a16      	ldr	r2, [pc, #88]	; (6790 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x8c>)
    6736:	e9c0 2300 	strd	r2, r3, [r0]
  builtin_data_allocator_ =
    673a:	60a0      	str	r0, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    673c:	4620      	mov	r0, r4
    673e:	f007 fcfd 	bl	e13c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    6742:	2800      	cmp	r0, #0
    6744:	d1ea      	bne.n	671c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x18>
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
    6746:	4630      	mov	r0, r6
    6748:	f007 fcdc 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
      memory_allocator_->AllocateFromTail(
    674c:	6865      	ldr	r5, [r4, #4]
    674e:	6801      	ldr	r1, [r0, #0]
          alignof(SubgraphAllocations)));
    6750:	682b      	ldr	r3, [r5, #0]
      memory_allocator_->AllocateFromTail(
    6752:	4628      	mov	r0, r5
    6754:	2204      	movs	r2, #4
    6756:	68db      	ldr	r3, [r3, #12]
    6758:	00c9      	lsls	r1, r1, #3
    675a:	4798      	blx	r3
  if (output == nullptr) {
    675c:	4605      	mov	r5, r0
    675e:	b920      	cbnz	r0, 676a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x66>
    MicroPrintf("Failed to allocate memory for model metadata.");
    6760:	480c      	ldr	r0, [pc, #48]	; (6794 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x90>)
    6762:	f007 fa40 	bl	dbe6 <_Z11MicroPrintfPKcz>
  }
  return output;
}
    6766:	4628      	mov	r0, r5
    6768:	bd70      	pop	{r4, r5, r6, pc}
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    676a:	6823      	ldr	r3, [r4, #0]
    676c:	4602      	mov	r2, r0
    676e:	4631      	mov	r1, r6
    6770:	4620      	mov	r0, r4
    6772:	69db      	ldr	r3, [r3, #28]
    6774:	4798      	blx	r3
    6776:	2800      	cmp	r0, #0
    6778:	d1d0      	bne.n	671c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x18>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    677a:	6823      	ldr	r3, [r4, #0]
    677c:	462a      	mov	r2, r5
    677e:	4631      	mov	r1, r6
    6780:	4620      	mov	r0, r4
    6782:	699b      	ldr	r3, [r3, #24]
    6784:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    6786:	2800      	cmp	r0, #0
    6788:	d0ed      	beq.n	6766 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x62>
    678a:	e7c7      	b.n	671c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x18>
    678c:	00063fcc 	.word	0x00063fcc
    6790:	00062954 	.word	0x00062954
    6794:	00064021 	.word	0x00064021

00006798 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    6798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    679a:	4604      	mov	r4, r0
    679c:	461e      	mov	r6, r3
    679e:	460f      	mov	r7, r1
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    67a0:	f007 fcd4 	bl	e14c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    67a4:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    67a6:	4613      	mov	r3, r2
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    67a8:	6965      	ldr	r5, [r4, #20]
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    67aa:	f100 0c04 	add.w	ip, r0, #4
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    67ae:	4295      	cmp	r5, r2
    67b0:	d006      	beq.n	67c0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x28>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    67b2:	f85c 1032 	ldr.w	r1, [ip, r2, lsl #3]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    67b6:	3201      	adds	r2, #1
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    67b8:	3101      	adds	r1, #1
      ++current_node_request_count;
    67ba:	bf08      	it	eq
    67bc:	3301      	addeq	r3, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    67be:	e7f6      	b.n	67ae <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x16>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    67c0:	2b0b      	cmp	r3, #11
    67c2:	d906      	bls.n	67d2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3a>
    TF_LITE_REPORT_ERROR(
    67c4:	220c      	movs	r2, #12
    67c6:	4909      	ldr	r1, [pc, #36]	; (67ec <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x54>)
    67c8:	68e0      	ldr	r0, [r4, #12]
    67ca:	f007 ff3b 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
    67ce:	2001      	movs	r0, #1
  *buffer_idx = scratch_buffer_request_count_;

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
  return kTfLiteOk;
}
    67d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    67d2:	f04f 32ff 	mov.w	r2, #4294967295
  internal::ScratchBufferRequest* current_request =
    67d6:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
  current_request->bytes = bytes;
    67da:	f840 7035 	str.w	r7, [r0, r5, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    67de:	605a      	str	r2, [r3, #4]
  *buffer_idx = scratch_buffer_request_count_;
    67e0:	6035      	str	r5, [r6, #0]
  ++scratch_buffer_request_count_;
    67e2:	6963      	ldr	r3, [r4, #20]
  return kTfLiteOk;
    67e4:	2000      	movs	r0, #0
  ++scratch_buffer_request_count_;
    67e6:	3301      	adds	r3, #1
    67e8:	6163      	str	r3, [r4, #20]
  return kTfLiteOk;
    67ea:	e7f1      	b.n	67d0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x38>
    67ec:	0006404f 	.word	0x0006404f

000067f0 <_ZNK11flatbuffers6VectorIxE3GetEj>:
  return_type Get(uoffset_t i) const {
    67f0:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    67f2:	6803      	ldr	r3, [r0, #0]
    67f4:	4299      	cmp	r1, r3
    67f6:	d306      	bcc.n	6806 <_ZNK11flatbuffers6VectorIxE3GetEj+0x16>
    67f8:	f44f 7183 	mov.w	r1, #262	; 0x106
    67fc:	4b04      	ldr	r3, [pc, #16]	; (6810 <_ZNK11flatbuffers6VectorIxE3GetEj+0x20>)
    67fe:	4a05      	ldr	r2, [pc, #20]	; (6814 <_ZNK11flatbuffers6VectorIxE3GetEj+0x24>)
    6800:	4805      	ldr	r0, [pc, #20]	; (6818 <_ZNK11flatbuffers6VectorIxE3GetEj+0x28>)
    6802:	f005 f8e9 	bl	b9d8 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6806:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  }
    680a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
    680e:	bd08      	pop	{r3, pc}
    6810:	00063309 	.word	0x00063309
    6814:	000635e4 	.word	0x000635e4
    6818:	00063409 	.word	0x00063409

0000681c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    681c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    681e:	6803      	ldr	r3, [r0, #0]
    6820:	4299      	cmp	r1, r3
    6822:	d306      	bcc.n	6832 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x16>
    6824:	f44f 7183 	mov.w	r1, #262	; 0x106
    6828:	4b05      	ldr	r3, [pc, #20]	; (6840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x24>)
    682a:	4a06      	ldr	r2, [pc, #24]	; (6844 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x28>)
    682c:	4806      	ldr	r0, [pc, #24]	; (6848 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x2c>)
    682e:	f005 f8d3 	bl	b9d8 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6832:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    6834:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6838:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    683c:	4410      	add	r0, r2
    683e:	bd08      	pop	{r3, pc}
    6840:	00063309 	.word	0x00063309
    6844:	00064085 	.word	0x00064085
    6848:	00063409 	.word	0x00063409

0000684c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    684c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6850:	4605      	mov	r5, r0
    6852:	460f      	mov	r7, r1
    6854:	4616      	mov	r6, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6856:	2400      	movs	r4, #0
    6858:	f04f 090c 	mov.w	r9, #12
    685c:	4638      	mov	r0, r7
    685e:	f007 fc47 	bl	e0f0 <_ZNK6tflite8SubGraph7tensorsEv>
    6862:	6803      	ldr	r3, [r0, #0]
    6864:	429c      	cmp	r4, r3
    6866:	d221      	bcs.n	68ac <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x60>
    auto* tensor = subgraph->tensors()->Get(i);
    6868:	4621      	mov	r1, r4
    686a:	f7ff ffd7 	bl	681c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    if (tensor->is_variable()) {
    686e:	f007 fc34 	bl	e0da <_ZNK6tflite6Tensor11is_variableEv>
    6872:	b1c8      	cbz	r0, 68a8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5c>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    6874:	fb09 f804 	mul.w	r8, r9, r4
    6878:	a901      	add	r1, sp, #4
    687a:	eb06 0008 	add.w	r0, r6, r8
    687e:	f007 fa25 	bl	dccc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6882:	b970      	cbnz	r0, 68a2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x56>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    6884:	6868      	ldr	r0, [r5, #4]
    6886:	2210      	movs	r2, #16
    6888:	6803      	ldr	r3, [r0, #0]
    688a:	9901      	ldr	r1, [sp, #4]
    688c:	68db      	ldr	r3, [r3, #12]
    688e:	4798      	blx	r3
      eval_tensors[i].data.data =
    6890:	f846 0008 	str.w	r0, [r6, r8]

      if (eval_tensors[i].data.data == nullptr) {
    6894:	b940      	cbnz	r0, 68a8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5c>
        TF_LITE_REPORT_ERROR(error_reporter_,
    6896:	9a01      	ldr	r2, [sp, #4]
    6898:	4905      	ldr	r1, [pc, #20]	; (68b0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>)
    689a:	68e8      	ldr	r0, [r5, #12]
    689c:	f007 fed2 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    68a0:	2001      	movs	r0, #1
      }
    }
  }
  return kTfLiteOk;
}
    68a2:	b003      	add	sp, #12
    68a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    68a8:	3401      	adds	r4, #1
    68aa:	e7d7      	b.n	685c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
  return kTfLiteOk;
    68ac:	2000      	movs	r0, #0
    68ae:	e7f8      	b.n	68a2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x56>
    68b0:	00064176 	.word	0x00064176

000068b4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    68b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    68b8:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    68ba:	7c03      	ldrb	r3, [r0, #16]
    ScratchBufferHandle** scratch_buffer_handles) {
    68bc:	4604      	mov	r4, r0
    68be:	460f      	mov	r7, r1
    68c0:	4615      	mov	r5, r2
  if (!model_is_allocating_) {
    68c2:	b16b      	cbz	r3, 68e0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    68c4:	2600      	movs	r6, #0
    68c6:	4638      	mov	r0, r7
    68c8:	f007 fc1c 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
    68cc:	6803      	ldr	r3, [r0, #0]
    68ce:	429e      	cmp	r6, r3
    68d0:	d22d      	bcs.n	692e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x7a>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    68d2:	4631      	mov	r1, r6
    68d4:	f7ff f990 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    TFLITE_DCHECK(subgraph != nullptr);
    68d8:	4681      	mov	r9, r0
    68da:	b948      	cbnz	r0, 68f0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x3c>
    68dc:	f009 fab7 	bl	fe4e <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    68e0:	4914      	ldr	r1, [pc, #80]	; (6934 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x80>)
    68e2:	68c0      	ldr	r0, [r0, #12]
    68e4:	f007 feae 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    68e8:	2001      	movs	r0, #1
}
    68ea:	b002      	add	sp, #8
    68ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    68f0:	6823      	ldr	r3, [r4, #0]
    68f2:	4641      	mov	r1, r8
    68f4:	4620      	mov	r0, r4
    68f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    68f8:	6962      	ldr	r2, [r4, #20]
    68fa:	4798      	blx	r3
    68fc:	2800      	cmp	r0, #0
    68fe:	d1f4      	bne.n	68ea <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x36>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    6900:	6823      	ldr	r3, [r4, #0]
    6902:	9600      	str	r6, [sp, #0]
    6904:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
    6908:	4639      	mov	r1, r7
    690a:	4620      	mov	r0, r4
    690c:	f8d8 3000 	ldr.w	r3, [r8]
    6910:	686a      	ldr	r2, [r5, #4]
    6912:	47d0      	blx	sl
    6914:	2800      	cmp	r0, #0
    6916:	d1e8      	bne.n	68ea <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x36>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    6918:	6823      	ldr	r3, [r4, #0]
    691a:	686a      	ldr	r2, [r5, #4]
    691c:	4649      	mov	r1, r9
    691e:	4620      	mov	r0, r4
    6920:	6a1b      	ldr	r3, [r3, #32]
    6922:	4798      	blx	r3
    6924:	3508      	adds	r5, #8
    6926:	2800      	cmp	r0, #0
    6928:	d1df      	bne.n	68ea <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x36>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    692a:	3601      	adds	r6, #1
    692c:	e7cb      	b.n	68c6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x12>
  model_is_allocating_ = false;
    692e:	2000      	movs	r0, #0
    6930:	7420      	strb	r0, [r4, #16]
  return kTfLiteOk;
    6932:	e7da      	b.n	68ea <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x36>
    6934:	000641a4 	.word	0x000641a4

00006938 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    6938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    693c:	4606      	mov	r6, r0
    693e:	460f      	mov	r7, r1
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    6940:	4615      	mov	r5, r2
    6942:	b90a      	cbnz	r2, 6948 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    6944:	f009 fa83 	bl	fe4e <abort>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    6948:	2400      	movs	r4, #0
        memory_allocator_->AllocateFromTail(
    694a:	f04f 082c 	mov.w	r8, #44	; 0x2c
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    694e:	4638      	mov	r0, r7
    6950:	f007 fbd8 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
    6954:	6803      	ldr	r3, [r0, #0]
    6956:	42a3      	cmp	r3, r4
    6958:	d91b      	bls.n	6992 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x5a>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    695a:	4621      	mov	r1, r4
    695c:	f7ff f94c 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    TFLITE_DCHECK(subgraph != nullptr);
    6960:	2800      	cmp	r0, #0
    6962:	d0ef      	beq.n	6944 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc>
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    6964:	f007 fa25 	bl	ddb2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
        memory_allocator_->AllocateFromTail(
    6968:	6873      	ldr	r3, [r6, #4]
    696a:	fb08 f100 	mul.w	r1, r8, r0
            alignof(NodeAndRegistration)));
    696e:	681a      	ldr	r2, [r3, #0]
        memory_allocator_->AllocateFromTail(
    6970:	4618      	mov	r0, r3
    6972:	f8d2 900c 	ldr.w	r9, [r2, #12]
    6976:	2204      	movs	r2, #4
    6978:	47c8      	blx	r9
    if (output == nullptr) {
    697a:	b930      	cbnz	r0, 698a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x52>
      TF_LITE_REPORT_ERROR(
    697c:	4906      	ldr	r1, [pc, #24]	; (6998 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x60>)
    697e:	68f0      	ldr	r0, [r6, #12]
    6980:	f007 fe60 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    6984:	2001      	movs	r0, #1
}
    6986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    698a:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    698e:	3401      	adds	r4, #1
    6990:	e7dd      	b.n	694e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
  return kTfLiteOk;
    6992:	2000      	movs	r0, #0
    6994:	e7f7      	b.n	6986 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x4e>
    6996:	bf00      	nop
    6998:	000641ef 	.word	0x000641ef

0000699c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
    699c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69a0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    69a4:	4605      	mov	r5, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    69a6:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
    69a8:	4688      	mov	r8, r1
    69aa:	4616      	mov	r6, r2
    69ac:	461f      	mov	r7, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    69ae:	f007 fba9 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
    69b2:	4649      	mov	r1, r9
    69b4:	f7ff f920 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  TFLITE_DCHECK(subgraph != nullptr);
    69b8:	b908      	cbnz	r0, 69be <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x22>
    69ba:	f009 fa48 	bl	fe4e <abort>
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    69be:	682b      	ldr	r3, [r5, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
    69c0:	f04f 0a00 	mov.w	sl, #0
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    69c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69c6:	4628      	mov	r0, r5
    69c8:	4798      	blx	r3
  if (PopulateTfLiteTensorFromFlatbuffer(
    69ca:	e9cd 9a00 	strd	r9, sl, [sp]
          /*allocate_temp=*/false) != kTfLiteOk) {
    69ce:	682b      	ldr	r3, [r5, #0]
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    69d0:	4604      	mov	r4, r0
  if (PopulateTfLiteTensorFromFlatbuffer(
    69d2:	4602      	mov	r2, r0
    69d4:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
    69d8:	4641      	mov	r1, r8
    69da:	463b      	mov	r3, r7
    69dc:	4628      	mov	r0, r5
    69de:	47d8      	blx	fp
    69e0:	b140      	cbz	r0, 69f4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x58>
    TF_LITE_REPORT_ERROR(error_reporter_,
    69e2:	490b      	ldr	r1, [pc, #44]	; (6a10 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>)
    69e4:	68e8      	ldr	r0, [r5, #12]
    69e6:	f007 fe2d 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    69ea:	4654      	mov	r4, sl
}
    69ec:	4620      	mov	r0, r4
    69ee:	b003      	add	sp, #12
    69f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (subgraph_allocations != nullptr) {
    69f4:	2e00      	cmp	r6, #0
    69f6:	d0f9      	beq.n	69ec <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x50>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    69f8:	200c      	movs	r0, #12
    69fa:	fb00 f307 	mul.w	r3, r0, r7
    69fe:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
    6a02:	6872      	ldr	r2, [r6, #4]
    6a04:	18d1      	adds	r1, r2, r3
    tensor->data.data =
    6a06:	58d3      	ldr	r3, [r2, r3]
    6a08:	6063      	str	r3, [r4, #4]
    tensor->dims =
    6a0a:	684b      	ldr	r3, [r1, #4]
    6a0c:	60a3      	str	r3, [r4, #8]
    6a0e:	e7ed      	b.n	69ec <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x50>
    6a10:	00064225 	.word	0x00064225

00006a14 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
    6a14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6a18:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    6a1c:	4606      	mov	r6, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    6a1e:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
    6a20:	4688      	mov	r8, r1
    6a22:	4615      	mov	r5, r2
    6a24:	461f      	mov	r7, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
    6a26:	f007 fb6d 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
    6a2a:	4649      	mov	r1, r9
    6a2c:	f7ff f8e4 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  TFLITE_DCHECK(subgraph != nullptr);
    6a30:	b908      	cbnz	r0, 6a36 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x22>
    6a32:	f009 fa0c 	bl	fe4e <abort>
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    6a36:	6870      	ldr	r0, [r6, #4]
    6a38:	2204      	movs	r2, #4
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    6a3a:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    6a3c:	2140      	movs	r1, #64	; 0x40
    6a3e:	691b      	ldr	r3, [r3, #16]
    6a40:	4798      	blx	r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    6a42:	2201      	movs	r2, #1
    6a44:	e9cd 9200 	strd	r9, r2, [sp]
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    6a48:	6833      	ldr	r3, [r6, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    6a4a:	4604      	mov	r4, r0
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    6a4c:	4602      	mov	r2, r0
    6a4e:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
    6a52:	4641      	mov	r1, r8
    6a54:	463b      	mov	r3, r7
    6a56:	4630      	mov	r0, r6
    6a58:	47d0      	blx	sl
    6a5a:	b140      	cbz	r0, 6a6e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x5a>
    TF_LITE_REPORT_ERROR(
    6a5c:	490b      	ldr	r1, [pc, #44]	; (6a8c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x78>)
    6a5e:	68f0      	ldr	r0, [r6, #12]
    6a60:	f007 fdf0 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6a64:	2400      	movs	r4, #0
}
    6a66:	4620      	mov	r0, r4
    6a68:	b002      	add	sp, #8
    6a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (subgraph_allocations != nullptr) {
    6a6e:	2d00      	cmp	r5, #0
    6a70:	d0f9      	beq.n	6a66 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x52>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    6a72:	200c      	movs	r0, #12
    6a74:	fb00 f307 	mul.w	r3, r0, r7
    6a78:	eb05 05c9 	add.w	r5, r5, r9, lsl #3
    6a7c:	686a      	ldr	r2, [r5, #4]
    6a7e:	18d1      	adds	r1, r2, r3
    tensor->data.data =
    6a80:	58d3      	ldr	r3, [r2, r3]
    6a82:	6063      	str	r3, [r4, #4]
    tensor->dims =
    6a84:	684b      	ldr	r3, [r1, #4]
    6a86:	60a3      	str	r3, [r4, #8]
    6a88:	e7ed      	b.n	6a66 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x52>
    6a8a:	bf00      	nop
    6a8c:	0006426f 	.word	0x0006426f

00006a90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
    6a90:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
    6a92:	6803      	ldr	r3, [r0, #0]
    6a94:	4299      	cmp	r1, r3
    6a96:	d306      	bcc.n	6aa6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x16>
    6a98:	f44f 7183 	mov.w	r1, #262	; 0x106
    6a9c:	4b05      	ldr	r3, [pc, #20]	; (6ab4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x24>)
    6a9e:	4a06      	ldr	r2, [pc, #24]	; (6ab8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x28>)
    6aa0:	4806      	ldr	r0, [pc, #24]	; (6abc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x2c>)
    6aa2:	f004 ff99 	bl	b9d8 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6aa6:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
    6aa8:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6aac:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
    6ab0:	4410      	add	r0, r2
    6ab2:	bd08      	pop	{r3, pc}
    6ab4:	00063309 	.word	0x00063309
    6ab8:	000642b3 	.word	0x000642b3
    6abc:	00063409 	.word	0x00063409

00006ac0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    6ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ac4:	4683      	mov	fp, r0
    6ac6:	e9dd a40c 	ldrd	sl, r4, [sp, #48]	; 0x30
    6aca:	460e      	mov	r6, r1
    6acc:	4615      	mov	r5, r2
    6ace:	461f      	mov	r7, r3
  TFLITE_DCHECK(result != nullptr);
    6ad0:	b90c      	cbnz	r4, 6ad6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16>
    6ad2:	f009 f9bc 	bl	fe4e <abort>
  *result = {};
    6ad6:	2240      	movs	r2, #64	; 0x40
    6ad8:	2100      	movs	r1, #0
    6ada:	4620      	mov	r0, r4
    6adc:	f009 f9dd 	bl	fe9a <memset>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6ae0:	4628      	mov	r0, r5
    6ae2:	f007 faf1 	bl	e0c8 <_ZNK6tflite6Tensor4typeEv>
    6ae6:	4652      	mov	r2, sl
    6ae8:	4621      	mov	r1, r4
    6aea:	f000 fe35 	bl	7758 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    6aee:	4680      	mov	r8, r0
    6af0:	2800      	cmp	r0, #0
    6af2:	d154      	bne.n	6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
  result->is_variable = flatbuffer_tensor.is_variable();
    6af4:	4628      	mov	r0, r5
    6af6:	f007 faf0 	bl	e0da <_ZNK6tflite6Tensor11is_variableEv>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    6afa:	4639      	mov	r1, r7
  result->is_variable = flatbuffer_tensor.is_variable();
    6afc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    6b00:	4628      	mov	r0, r5
    6b02:	f007 fb57 	bl	e1b4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    result->allocation_type = kTfLiteMmapRo;
    6b06:	2800      	cmp	r0, #0
    6b08:	bf0c      	ite	eq
    6b0a:	2302      	moveq	r3, #2
    6b0c:	2301      	movne	r3, #1
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    6b0e:	6060      	str	r0, [r4, #4]
  if (result->data.data == nullptr) {
    6b10:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    6b12:	4628      	mov	r0, r5
    6b14:	4653      	mov	r3, sl
    6b16:	aa01      	add	r2, sp, #4
    6b18:	f104 0118 	add.w	r1, r4, #24
    6b1c:	f007 f89b 	bl	dc56 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    6b20:	4680      	mov	r8, r0
    6b22:	2800      	cmp	r0, #0
    6b24:	d13b      	bne.n	6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6b26:	2104      	movs	r1, #4
    6b28:	4628      	mov	r0, r5
    6b2a:	f007 f9c3 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
    6b2e:	2800      	cmp	r0, #0
    6b30:	d139      	bne.n	6ba6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe6>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    6b32:	4b41      	ldr	r3, [pc, #260]	; (6c38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x178>)
    6b34:	60a3      	str	r3, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
    6b36:	210c      	movs	r1, #12
    6b38:	4628      	mov	r0, r5
    6b3a:	f007 f8e4 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b3e:	b370      	cbz	r0, 6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
    6b40:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
    6b42:	182f      	adds	r7, r5, r0
      src_quantization->zero_point() &&
    6b44:	18ff      	adds	r7, r7, r3
    6b46:	d02a      	beq.n	6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
  if (src_quantization && src_quantization->scale() &&
    6b48:	4638      	mov	r0, r7
    6b4a:	f007 faa9 	bl	e0a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
    6b4e:	4605      	mov	r5, r0
    6b50:	b328      	cbz	r0, 6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
    6b52:	6803      	ldr	r3, [r0, #0]
    6b54:	b31b      	cbz	r3, 6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
      src_quantization->zero_point() &&
    6b56:	4638      	mov	r0, r7
    6b58:	f007 faac 	bl	e0b4 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
    6b5c:	b1f8      	cbz	r0, 6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
      src_quantization->zero_point() &&
    6b5e:	6803      	ldr	r3, [r0, #0]
    6b60:	b1eb      	cbz	r3, 6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6b62:	686b      	ldr	r3, [r5, #4]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    6b64:	4638      	mov	r0, r7
    result->params.scale = src_quantization->scale()->Get(0);
    6b66:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
    6b68:	f007 faa4 	bl	e0b4 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    6b6c:	2100      	movs	r1, #0
    6b6e:	f7ff fe3f 	bl	67f0 <_ZNK11flatbuffers6VectorIxE3GetEj>
    result->params.zero_point =
    6b72:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
    6b74:	4638      	mov	r0, r7
    6b76:	f007 fa93 	bl	e0a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
    6b7a:	f8db 3000 	ldr.w	r3, [fp]
    6b7e:	f8d0 9000 	ldr.w	r9, [r0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    6b82:	b1ae      	cbz	r6, 6bb0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    6b84:	2204      	movs	r2, #4
    6b86:	210c      	movs	r1, #12
    6b88:	4658      	mov	r0, fp
    6b8a:	691b      	ldr	r3, [r3, #16]
    6b8c:	4798      	blx	r3
    if (quantization == nullptr) {
    6b8e:	4606      	mov	r6, r0
    6b90:	b9d0      	cbnz	r0, 6bc8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
      TF_LITE_REPORT_ERROR(error_reporter,
    6b92:	492a      	ldr	r1, [pc, #168]	; (6c3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>)
      TF_LITE_REPORT_ERROR(error_reporter,
    6b94:	4650      	mov	r0, sl
    6b96:	f007 fd55 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    6b9a:	f04f 0801 	mov.w	r8, #1
}
    6b9e:	4640      	mov	r0, r8
    6ba0:	b003      	add	sp, #12
    6ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6ba6:	f1ba 0f00 	cmp.w	sl, #0
    6baa:	d092      	beq.n	6ad2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x12>
    *result = const_cast<kTfLiteArrayType*>(
    6bac:	60a0      	str	r0, [r4, #8]
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    6bae:	e7c2      	b.n	6b36 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x76>
                  allocator->AllocateFromTail(
    6bb0:	2204      	movs	r2, #4
    6bb2:	210c      	movs	r1, #12
    6bb4:	4658      	mov	r0, fp
    6bb6:	68db      	ldr	r3, [r3, #12]
    6bb8:	4798      	blx	r3
    if (quantization == nullptr) {
    6bba:	4606      	mov	r6, r0
    6bbc:	2800      	cmp	r0, #0
    6bbe:	d0e8      	beq.n	6b92 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
                  alignof(TfLiteIntArray)));
    6bc0:	f8db 3000 	ldr.w	r3, [fp]
    6bc4:	68dd      	ldr	r5, [r3, #12]
    6bc6:	e002      	b.n	6bce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10e>
                  alignof(TfLiteIntArray)))
    6bc8:	f8db 3000 	ldr.w	r3, [fp]
    6bcc:	691d      	ldr	r5, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    6bce:	4648      	mov	r0, r9
    6bd0:	f007 fc76 	bl	e4c0 <TfLiteIntArrayGetSizeInBytes>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    6bd4:	2204      	movs	r2, #4
                  TfLiteIntArrayGetSizeInBytes(channels),
    6bd6:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    6bd8:	4658      	mov	r0, fp
    6bda:	47a8      	blx	r5
    6bdc:	4605      	mov	r5, r0
    quantization->zero_point =
    6bde:	6070      	str	r0, [r6, #4]
    if (quantization->zero_point == nullptr) {
    6be0:	b908      	cbnz	r0, 6be6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x126>
      TF_LITE_REPORT_ERROR(error_reporter,
    6be2:	4917      	ldr	r1, [pc, #92]	; (6c40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x180>)
    6be4:	e7d6      	b.n	6b94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd4>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    6be6:	4638      	mov	r0, r7
    6be8:	f007 fa5a 	bl	e0a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
    6bec:	f1ba 0f00 	cmp.w	sl, #0
    6bf0:	f43f af6f 	beq.w	6ad2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x12>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    6bf4:	2800      	cmp	r0, #0
    6bf6:	f43f af6c 	beq.w	6ad2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x12>
    for (int i = 0; i < channels; i++) {
    6bfa:	f04f 0a00 	mov.w	sl, #0
    *result = const_cast<kTfLiteArrayType*>(
    6bfe:	6030      	str	r0, [r6, #0]
    quantization->zero_point->size = channels;
    6c00:	f8c5 9000 	str.w	r9, [r5]
    for (int i = 0; i < channels; i++) {
    6c04:	45d1      	cmp	r9, sl
    6c06:	dd0a      	ble.n	6c1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    6c08:	4638      	mov	r0, r7
    6c0a:	f007 fa53 	bl	e0b4 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
    6c0e:	4651      	mov	r1, sl
    6c10:	f7ff fdee 	bl	67f0 <_ZNK11flatbuffers6VectorIxE3GetEj>
    for (int i = 0; i < channels; i++) {
    6c14:	f10a 0a01 	add.w	sl, sl, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    6c18:	f845 0f04 	str.w	r0, [r5, #4]!
    for (int i = 0; i < channels; i++) {
    6c1c:	e7f2      	b.n	6c04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
    auto field_offset = GetOptionalFieldOffset(field);
    6c1e:	2110      	movs	r1, #16
    6c20:	4638      	mov	r0, r7
    6c22:	f007 f870 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6c26:	b100      	cbz	r0, 6c2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16a>
    6c28:	5838      	ldr	r0, [r7, r0]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    6c2a:	2301      	movs	r3, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    6c2c:	60b0      	str	r0, [r6, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    6c2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    6c32:	6366      	str	r6, [r4, #52]	; 0x34
    6c34:	e7b3      	b.n	6b9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xde>
    6c36:	bf00      	nop
    6c38:	00062948 	.word	0x00062948
    6c3c:	000643a4 	.word	0x000643a4
    6c40:	000643d2 	.word	0x000643d2

00006c44 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    6c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c48:	9c06      	ldr	r4, [sp, #24]
    6c4a:	461f      	mov	r7, r3
  *result = {};
    6c4c:	4626      	mov	r6, r4
    6c4e:	2300      	movs	r3, #0
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6c50:	4608      	mov	r0, r1
  *result = {};
    6c52:	e9c4 3300 	strd	r3, r3, [r4]
    6c56:	f846 3f08 	str.w	r3, [r6, #8]!
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    6c5a:	460d      	mov	r5, r1
    6c5c:	4690      	mov	r8, r2
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6c5e:	f007 fa33 	bl	e0c8 <_ZNK6tflite6Tensor4typeEv>
    6c62:	4631      	mov	r1, r6
    6c64:	463a      	mov	r2, r7
    6c66:	f000 fd77 	bl	7758 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    6c6a:	4606      	mov	r6, r0
    6c6c:	b958      	cbnz	r0, 6c86 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x42>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    6c6e:	4641      	mov	r1, r8
    6c70:	4628      	mov	r0, r5
    6c72:	f007 fa9f 	bl	e1b4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6c76:	2104      	movs	r1, #4
    6c78:	6020      	str	r0, [r4, #0]
    6c7a:	4628      	mov	r0, r5
    6c7c:	f007 f91a 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
    6c80:	b920      	cbnz	r0, 6c8c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x48>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    6c82:	4b05      	ldr	r3, [pc, #20]	; (6c98 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>)
    6c84:	6063      	str	r3, [r4, #4]
}
    6c86:	4630      	mov	r0, r6
    6c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6c8c:	b90f      	cbnz	r7, 6c92 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4e>
    6c8e:	f009 f8de 	bl	fe4e <abort>
    *result = const_cast<kTfLiteArrayType*>(
    6c92:	6060      	str	r0, [r4, #4]
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    6c94:	e7f7      	b.n	6c86 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x42>
    6c96:	bf00      	nop
    6c98:	00062948 	.word	0x00062948

00006c9c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    6c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ca0:	4604      	mov	r4, r0
    6ca2:	4688      	mov	r8, r1
    6ca4:	b085      	sub	sp, #20
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    6ca6:	b90a      	cbnz	r2, 6cac <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    6ca8:	f009 f8d1 	bl	fe4e <abort>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    6cac:	2600      	movs	r6, #0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    6cae:	f04f 0a0c 	mov.w	sl, #12
    subgraph_allocations[subgraph_idx].tensors = tensors;
    6cb2:	1d13      	adds	r3, r2, #4
    6cb4:	9303      	str	r3, [sp, #12]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    6cb6:	4640      	mov	r0, r8
    6cb8:	f007 fa24 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
    6cbc:	6803      	ldr	r3, [r0, #0]
    6cbe:	42b3      	cmp	r3, r6
    6cc0:	d93e      	bls.n	6d40 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    6cc2:	4631      	mov	r1, r6
    6cc4:	f7fe ff98 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    TFLITE_DCHECK(subgraph != nullptr);
    6cc8:	4681      	mov	r9, r0
    6cca:	2800      	cmp	r0, #0
    6ccc:	d0ec      	beq.n	6ca8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc>
    size_t alloc_count = subgraph->tensors()->size();
    6cce:	f007 fa0f 	bl	e0f0 <_ZNK6tflite8SubGraph7tensorsEv>
    6cd2:	f8d0 b000 	ldr.w	fp, [r0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    6cd6:	6860      	ldr	r0, [r4, #4]
    6cd8:	fb0a f50b 	mul.w	r5, sl, fp
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    6cdc:	6803      	ldr	r3, [r0, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    6cde:	2204      	movs	r2, #4
    6ce0:	4629      	mov	r1, r5
    6ce2:	68db      	ldr	r3, [r3, #12]
    6ce4:	4798      	blx	r3
    if (tensors == nullptr) {
    6ce6:	4607      	mov	r7, r0
    6ce8:	b940      	cbnz	r0, 6cfc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x60>
      TF_LITE_REPORT_ERROR(
    6cea:	462a      	mov	r2, r5
    6cec:	4915      	ldr	r1, [pc, #84]	; (6d44 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    6cee:	68e0      	ldr	r0, [r4, #12]
    6cf0:	f007 fca8 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    6cf4:	2001      	movs	r0, #1
}
    6cf6:	b005      	add	sp, #20
    6cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (size_t i = 0; i < alloc_count; ++i) {
    6cfc:	2500      	movs	r5, #0
    6cfe:	45ab      	cmp	fp, r5
    6d00:	d019      	beq.n	6d36 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9a>
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
    6d02:	4648      	mov	r0, r9
    6d04:	f007 f9f4 	bl	e0f0 <_ZNK6tflite8SubGraph7tensorsEv>
    6d08:	4629      	mov	r1, r5
    6d0a:	f7ff fd87 	bl	681c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    6d0e:	210c      	movs	r1, #12
    6d10:	9002      	str	r0, [sp, #8]
    6d12:	4640      	mov	r0, r8
    6d14:	f007 fa6e 	bl	e1f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    6d18:	fb0a 7305 	mla	r3, sl, r5, r7
    6d1c:	4602      	mov	r2, r0
    6d1e:	9300      	str	r3, [sp, #0]
    6d20:	9902      	ldr	r1, [sp, #8]
    6d22:	68e3      	ldr	r3, [r4, #12]
    6d24:	6860      	ldr	r0, [r4, #4]
    6d26:	f7ff ff8d 	bl	6c44 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    6d2a:	b110      	cbz	r0, 6d32 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    6d2c:	462a      	mov	r2, r5
    6d2e:	4906      	ldr	r1, [pc, #24]	; (6d48 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    6d30:	e7dd      	b.n	6cee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x52>
    for (size_t i = 0; i < alloc_count; ++i) {
    6d32:	3501      	adds	r5, #1
    6d34:	e7e3      	b.n	6cfe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x62>
    subgraph_allocations[subgraph_idx].tensors = tensors;
    6d36:	9b03      	ldr	r3, [sp, #12]
    6d38:	f843 7036 	str.w	r7, [r3, r6, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    6d3c:	3601      	adds	r6, #1
    6d3e:	e7ba      	b.n	6cb6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  return kTfLiteOk;
    6d40:	2000      	movs	r0, #0
    6d42:	e7d8      	b.n	6cf6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x5a>
    6d44:	00064400 	.word	0x00064400
    6d48:	00064447 	.word	0x00064447

00006d4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    6d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d50:	4605      	mov	r5, r0
    6d52:	b097      	sub	sp, #92	; 0x5c
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    6d54:	4608      	mov	r0, r1
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    6d56:	9205      	str	r2, [sp, #20]
    6d58:	9308      	str	r3, [sp, #32]
    6d5a:	4688      	mov	r8, r1
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    6d5c:	f007 f9d2 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
    6d60:	9920      	ldr	r1, [sp, #128]	; 0x80
    6d62:	f7fe ff49 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    6d66:	4607      	mov	r7, r0
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    6d68:	f007 f9c2 	bl	e0f0 <_ZNK6tflite8SubGraph7tensorsEv>
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    6d6c:	2618      	movs	r6, #24
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    6d6e:	696a      	ldr	r2, [r5, #20]
    6d70:	6803      	ldr	r3, [r0, #0]

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    6d72:	6868      	ldr	r0, [r5, #4]
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    6d74:	18d3      	adds	r3, r2, r3
    6d76:	9304      	str	r3, [sp, #16]
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    6d78:	4373      	muls	r3, r6
    6d7a:	9302      	str	r3, [sp, #8]
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    6d7c:	6803      	ldr	r3, [r0, #0]
    6d7e:	2204      	movs	r2, #4
    6d80:	691b      	ldr	r3, [r3, #16]
    6d82:	9902      	ldr	r1, [sp, #8]
    6d84:	4798      	blx	r3
  if (allocation_info == nullptr) {
    6d86:	4606      	mov	r6, r0
    6d88:	b948      	cbnz	r0, 6d9e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x52>
    TF_LITE_REPORT_ERROR(
    6d8a:	9a02      	ldr	r2, [sp, #8]
    6d8c:	49bc      	ldr	r1, [pc, #752]	; (7080 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x334>)
    6d8e:	68e8      	ldr	r0, [r5, #12]
    6d90:	f007 fc58 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    6d94:	2301      	movs	r3, #1
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    6d96:	4618      	mov	r0, r3
    6d98:	b017      	add	sp, #92	; 0x5c
    6d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                scratch_buffer_request_count_, error_reporter_);
    6d9e:	4638      	mov	r0, r7
    6da0:	f007 f9a6 	bl	e0f0 <_ZNK6tflite8SubGraph7tensorsEv>
    6da4:	6803      	ldr	r3, [r0, #0]
    auto field_offset = GetOptionalFieldOffset(field);
    6da6:	2110      	movs	r1, #16
    6da8:	9303      	str	r3, [sp, #12]
    6daa:	696b      	ldr	r3, [r5, #20]
    6dac:	4640      	mov	r0, r8
    6dae:	9306      	str	r3, [sp, #24]
    6db0:	68eb      	ldr	r3, [r5, #12]
    6db2:	9307      	str	r3, [sp, #28]
    6db4:	f006 ffa7 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6db8:	4604      	mov	r4, r0
    6dba:	2800      	cmp	r0, #0
    6dbc:	d05d      	beq.n	6e7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x12e>
    6dbe:	f858 4004 	ldr.w	r4, [r8, r4]
    auto p = data_ + field_offset;
    6dc2:	4440      	add	r0, r8
  if (model->metadata()) {
    6dc4:	1904      	adds	r4, r0, r4
    6dc6:	d058      	beq.n	6e7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x12e>
  const int32_t* offline_planner_offsets = nullptr;
    6dc8:	2400      	movs	r4, #0
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    6dca:	46a2      	mov	sl, r4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    6dcc:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 70a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x354>
    auto field_offset = GetOptionalFieldOffset(field);
    6dd0:	2110      	movs	r1, #16
    6dd2:	4640      	mov	r0, r8
    6dd4:	f006 ff97 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dd8:	2800      	cmp	r0, #0
    6dda:	f000 81d8 	beq.w	718e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x442>
    6dde:	f858 2000 	ldr.w	r2, [r8, r0]
    auto p = data_ + field_offset;
    6de2:	eb08 0100 	add.w	r1, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6de6:	188b      	adds	r3, r1, r2
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    6de8:	588a      	ldr	r2, [r1, r2]
    6dea:	4552      	cmp	r2, sl
    6dec:	d945      	bls.n	6e7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x12e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6dee:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    6df0:	eb03 098a 	add.w	r9, r3, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6df4:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
    6df8:	2104      	movs	r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6dfa:	4499      	add	r9, r3
    auto field_offset = GetOptionalFieldOffset(field);
    6dfc:	4648      	mov	r0, r9
    6dfe:	f006 ff82 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e02:	b3a8      	cbz	r0, 6e70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x124>
    auto p = data_ + field_offset;
    6e04:	eb09 0300 	add.w	r3, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e08:	f859 0000 	ldr.w	r0, [r9, r0]
    6e0c:	4403      	add	r3, r0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    6e0e:	4658      	mov	r0, fp
    6e10:	9309      	str	r3, [sp, #36]	; 0x24
    6e12:	f7fa fb5f 	bl	14d4 <strlen>
    6e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6e18:	4602      	mov	r2, r0
    6e1a:	4659      	mov	r1, fp
    6e1c:	1d18      	adds	r0, r3, #4
    6e1e:	f009 f9a3 	bl	10168 <strncmp>
    6e22:	bb38      	cbnz	r0, 6e74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6e24:	210c      	movs	r1, #12
    6e26:	4640      	mov	r0, r8
    6e28:	f007 f9e4 	bl	e1f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
    auto field_offset = GetOptionalFieldOffset(field);
    6e2c:	2106      	movs	r1, #6
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6e2e:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
    6e30:	4648      	mov	r0, r9
    6e32:	f006 ff68 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6e36:	4601      	mov	r1, r0
    6e38:	b108      	cbz	r0, 6e3e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
    6e3a:	f859 1000 	ldr.w	r1, [r9, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
    6e3e:	4620      	mov	r0, r4
    6e40:	f7ff fe26 	bl	6a90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
    6e44:	2104      	movs	r1, #4
  return_type operator[](uoffset_t i) const { return Get(i); }
    6e46:	4681      	mov	r9, r0
    auto field_offset = GetOptionalFieldOffset(field);
    6e48:	f006 ff5d 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e4c:	2800      	cmp	r0, #0
    6e4e:	f000 819c 	beq.w	718a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x43e>
    auto p = data_ + field_offset;
    6e52:	eb09 0400 	add.w	r4, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e56:	f859 0000 	ldr.w	r0, [r9, r0]
        if (tensor_count_ != nbr_tensors) {
    6e5a:	9b03      	ldr	r3, [sp, #12]
    6e5c:	4404      	add	r4, r0
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    6e5e:	68e2      	ldr	r2, [r4, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    6e60:	3410      	adds	r4, #16
        if (tensor_count_ != nbr_tensors) {
    6e62:	4293      	cmp	r3, r2
    6e64:	d006      	beq.n	6e74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
          TF_LITE_REPORT_ERROR(reporter_,
    6e66:	4987      	ldr	r1, [pc, #540]	; (7084 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x338>)
    6e68:	9807      	ldr	r0, [sp, #28]
    6e6a:	f007 fbeb 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TF_LITE_ENSURE_STATUS(
    6e6e:	e791      	b.n	6d94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x48>
    6e70:	4603      	mov	r3, r0
    6e72:	e7cc      	b.n	6e0e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xc2>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    6e74:	f10a 0a01 	add.w	sl, sl, #1
    6e78:	e7aa      	b.n	6dd0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x84>
  TFLITE_DCHECK(eval_tensors != nullptr);
    6e7a:	9b05      	ldr	r3, [sp, #20]
    6e7c:	b38b      	cbz	r3, 6ee2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x196>
    6e7e:	46b1      	mov	r9, r6
    6e80:	469a      	mov	sl, r3
    6e82:	46b3      	mov	fp, r6
  for (size_t i = 0; i < tensor_count_; ++i) {
    6e84:	f04f 0800 	mov.w	r8, #0
    6e88:	9b03      	ldr	r3, [sp, #12]
    6e8a:	4543      	cmp	r3, r8
    6e8c:	d02e      	beq.n	6eec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1a0>
    TF_LITE_ENSURE_STATUS(
    6e8e:	4659      	mov	r1, fp
    6e90:	4650      	mov	r0, sl
    current->output_ptr = &(eval_tensors[i].data.data);
    6e92:	f8cb a004 	str.w	sl, [fp, #4]
    TF_LITE_ENSURE_STATUS(
    6e96:	f006 ff19 	bl	dccc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6e9a:	4603      	mov	r3, r0
    6e9c:	2800      	cmp	r0, #0
    6e9e:	f47f af7a 	bne.w	6d96 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x4a>
    current->first_created = -1;
    6ea2:	f04f 32ff 	mov.w	r2, #4294967295
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    6ea6:	f8da 1000 	ldr.w	r1, [sl]
    current->last_used = -1;
    6eaa:	e9cb 2202 	strd	r2, r2, [fp, #8]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    6eae:	b951      	cbnz	r1, 6ec6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x17a>
                                (!subgraph->tensors()->Get(i)->is_variable());
    6eb0:	4638      	mov	r0, r7
    6eb2:	f007 f91d 	bl	e0f0 <_ZNK6tflite8SubGraph7tensorsEv>
    6eb6:	4641      	mov	r1, r8
    6eb8:	f7ff fcb0 	bl	681c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    6ebc:	f007 f90d 	bl	e0da <_ZNK6tflite6Tensor11is_variableEv>
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    6ec0:	f080 0001 	eor.w	r0, r0, #1
    6ec4:	b2c0      	uxtb	r0, r0
    6ec6:	f88b 0014 	strb.w	r0, [fp, #20]
    if (offline_offsets) {
    6eca:	b164      	cbz	r4, 6ee6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
      current->offline_offset = offline_offsets[i];
    6ecc:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
    6ed0:	f8cb 3010 	str.w	r3, [fp, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    6ed4:	f108 0801 	add.w	r8, r8, #1
    6ed8:	f10b 0b18 	add.w	fp, fp, #24
    6edc:	f10a 0a0c 	add.w	sl, sl, #12
    6ee0:	e7d2      	b.n	6e88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x13c>
  TFLITE_DCHECK(eval_tensors != nullptr);
    6ee2:	f008 ffb4 	bl	fe4e <abort>
      current->offline_offset = kOnlinePlannedBuffer;
    6ee6:	f04f 33ff 	mov.w	r3, #4294967295
    6eea:	e7f1      	b.n	6ed0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x184>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    6eec:	2400      	movs	r4, #0
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    6eee:	4638      	mov	r0, r7
    6ef0:	f006 ff5f 	bl	ddb2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    current->first_created = 0;
    6ef4:	f04f 0b18 	mov.w	fp, #24
    6ef8:	46a2      	mov	sl, r4
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    6efa:	9003      	str	r0, [sp, #12]
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6efc:	2106      	movs	r1, #6
    6efe:	4638      	mov	r0, r7
    6f00:	f006 ffd8 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    6f04:	6802      	ldr	r2, [r0, #0]
    6f06:	42a2      	cmp	r2, r4
    6f08:	d908      	bls.n	6f1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1d0>
    const int tensor_index = subgraph->inputs()->Get(i);
    6f0a:	4621      	mov	r1, r4
    6f0c:	f7ff f8b4 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
    6f10:	fb0b 6000 	mla	r0, fp, r0, r6
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    6f14:	3401      	adds	r4, #1
    current->first_created = 0;
    6f16:	f8c0 a008 	str.w	sl, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    6f1a:	e7ef      	b.n	6efc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1b0>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    6f1c:	2400      	movs	r4, #0
    current->last_used = operators_size - 1;
    6f1e:	f04f 0a18 	mov.w	sl, #24
    6f22:	2108      	movs	r1, #8
    6f24:	4638      	mov	r0, r7
    6f26:	f006 ffc5 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    6f2a:	6802      	ldr	r2, [r0, #0]
    6f2c:	9b03      	ldr	r3, [sp, #12]
    6f2e:	42a2      	cmp	r2, r4
    6f30:	f103 3bff 	add.w	fp, r3, #4294967295
    6f34:	d942      	bls.n	6fbc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x270>
    const int tensor_index = subgraph->outputs()->Get(i);
    6f36:	4621      	mov	r1, r4
    6f38:	f7ff f89e 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = operators_size - 1;
    6f3c:	fb0a 6000 	mla	r0, sl, r0, r6
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    6f40:	3401      	adds	r4, #1
    current->last_used = operators_size - 1;
    6f42:	f8c0 b00c 	str.w	fp, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    6f46:	e7ec      	b.n	6f22 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1d6>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6f48:	f04f 0a00 	mov.w	sl, #0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f4c:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
    6f4e:	eb03 048b 	add.w	r4, r3, fp, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6f52:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    6f56:	441c      	add	r4, r3
    return const_cast<Table *>(this)->GetPointer<P>(field);
    6f58:	2106      	movs	r1, #6
    6f5a:	4620      	mov	r0, r4
    6f5c:	f006 ffaa 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    6f60:	6802      	ldr	r2, [r0, #0]
    6f62:	4552      	cmp	r2, sl
    6f64:	d90f      	bls.n	6f86 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x23a>
      const int tensor_index = op->inputs()->Get(n);
    6f66:	4651      	mov	r1, sl
    6f68:	f7ff f886 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    6f6c:	2318      	movs	r3, #24
    6f6e:	fb03 6000 	mla	r0, r3, r0, r6
      if (((current->last_used == -1) || (current->last_used < i))) {
    6f72:	68c2      	ldr	r2, [r0, #12]
    6f74:	1c51      	adds	r1, r2, #1
    6f76:	d001      	beq.n	6f7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>
    6f78:	4593      	cmp	fp, r2
    6f7a:	dd01      	ble.n	6f80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x234>
        current->last_used = i;
    6f7c:	f8c0 b00c 	str.w	fp, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    6f80:	f10a 0a01 	add.w	sl, sl, #1
    6f84:	e7e8      	b.n	6f58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20c>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    6f86:	f04f 0a00 	mov.w	sl, #0
    6f8a:	2108      	movs	r1, #8
    6f8c:	4620      	mov	r0, r4
    6f8e:	f006 ff91 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    6f92:	6802      	ldr	r2, [r0, #0]
    6f94:	4552      	cmp	r2, sl
    6f96:	d90f      	bls.n	6fb8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x26c>
      const int tensor_index = op->outputs()->Get(n);
    6f98:	4651      	mov	r1, sl
    6f9a:	f7ff f86d 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
    6f9e:	2318      	movs	r3, #24
    6fa0:	fb03 6000 	mla	r0, r3, r0, r6
      if ((current->first_created == -1) || (current->first_created > i)) {
    6fa4:	6882      	ldr	r2, [r0, #8]
    6fa6:	1c53      	adds	r3, r2, #1
    6fa8:	d001      	beq.n	6fae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x262>
    6faa:	4593      	cmp	fp, r2
    6fac:	da01      	bge.n	6fb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x266>
        current->first_created = i;
    6fae:	f8c0 b008 	str.w	fp, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    6fb2:	f10a 0a01 	add.w	sl, sl, #1
    6fb6:	e7e8      	b.n	6f8a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x23e>
  for (int i = (operators_size - 1); i >= 0; --i) {
    6fb8:	f10b 3bff 	add.w	fp, fp, #4294967295
    6fbc:	f1bb 0f00 	cmp.w	fp, #0
    6fc0:	f2c0 80bd 	blt.w	713e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3f2>
    auto field_offset = GetOptionalFieldOffset(field);
    6fc4:	210a      	movs	r1, #10
    6fc6:	4638      	mov	r0, r7
    6fc8:	f006 fe9d 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fcc:	2800      	cmp	r0, #0
    6fce:	f000 80de 	beq.w	718e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x442>
    6fd2:	583a      	ldr	r2, [r7, r0]
    auto p = data_ + field_offset;
    6fd4:	1839      	adds	r1, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fd6:	188b      	adds	r3, r1, r2
    FLATBUFFERS_ASSERT(i < size());
    6fd8:	588a      	ldr	r2, [r1, r2]
    6fda:	4593      	cmp	fp, r2
    6fdc:	d3b4      	bcc.n	6f48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1fc>
    6fde:	f44f 7183 	mov.w	r1, #262	; 0x106
    6fe2:	4b29      	ldr	r3, [pc, #164]	; (7088 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x33c>)
    6fe4:	4a29      	ldr	r2, [pc, #164]	; (708c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x340>)
    6fe6:	482a      	ldr	r0, [pc, #168]	; (7090 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x344>)
    6fe8:	f004 fcf6 	bl	b9d8 <__assert_func>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    6fec:	2110      	movs	r1, #16
    6fee:	6868      	ldr	r0, [r5, #4]
    6ff0:	f006 fde5 	bl	dbbe <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    6ff4:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    6ff6:	6868      	ldr	r0, [r5, #4]
    6ff8:	4621      	mov	r1, r4
    6ffa:	6803      	ldr	r3, [r0, #0]
    6ffc:	2210      	movs	r2, #16
    6ffe:	691b      	ldr	r3, [r3, #16]
    7000:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    7002:	4601      	mov	r1, r0
    7004:	b958      	cbnz	r0, 701e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2d2>
    7006:	4b23      	ldr	r3, [pc, #140]	; (7094 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x348>)
    7008:	68e9      	ldr	r1, [r5, #12]
    700a:	9301      	str	r3, [sp, #4]
    700c:	f240 33d2 	movw	r3, #978	; 0x3d2
    7010:	4608      	mov	r0, r1
    7012:	9300      	str	r3, [sp, #0]
    7014:	4a20      	ldr	r2, [pc, #128]	; (7098 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x34c>)
    7016:	4b21      	ldr	r3, [pc, #132]	; (709c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x350>)
    7018:	f007 fb22 	bl	e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    701c:	e6ba      	b.n	6d94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x48>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    701e:	4622      	mov	r2, r4
  for (size_t i = 0; i < allocation_info_size; ++i) {
    7020:	2700      	movs	r7, #0
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    7022:	4634      	mov	r4, r6
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    7024:	a80b      	add	r0, sp, #44	; 0x2c
    7026:	f000 f8d9 	bl	71dc <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    702a:	f8d5 800c 	ldr.w	r8, [r5, #12]
  for (size_t i = 0; i < allocation_info_size; ++i) {
    702e:	9b04      	ldr	r3, [sp, #16]
    7030:	42bb      	cmp	r3, r7
    7032:	d06a      	beq.n	710a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3be>
    if (current->needs_allocating) {
    7034:	7d23      	ldrb	r3, [r4, #20]
    7036:	b913      	cbnz	r3, 703e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2f2>
  for (size_t i = 0; i < allocation_info_size; ++i) {
    7038:	3701      	adds	r7, #1
    703a:	3418      	adds	r4, #24
    703c:	e7f7      	b.n	702e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2e2>
          AlignSizeUp(current->bytes, kBufferAlignment);
    703e:	2110      	movs	r1, #16
    7040:	6820      	ldr	r0, [r4, #0]
    7042:	f006 fde7 	bl	dc14 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
    7046:	6923      	ldr	r3, [r4, #16]
          AlignSizeUp(current->bytes, kBufferAlignment);
    7048:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
    704a:	1c59      	adds	r1, r3, #1
    704c:	d10f      	bne.n	706e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x322>
        TF_LITE_ENSURE_STATUS(
    704e:	68e3      	ldr	r3, [r4, #12]
    7050:	4641      	mov	r1, r8
    7052:	9300      	str	r3, [sp, #0]
    7054:	68a3      	ldr	r3, [r4, #8]
    7056:	a80b      	add	r0, sp, #44	; 0x2c
    7058:	f000 f89e 	bl	7198 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    705c:	4603      	mov	r3, r0
    705e:	2800      	cmp	r0, #0
    7060:	d0ea      	beq.n	7038 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2ec>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    7062:	a80b      	add	r0, sp, #44	; 0x2c
    7064:	9302      	str	r3, [sp, #8]
    7066:	f007 f8f1 	bl	e24c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    706a:	9b02      	ldr	r3, [sp, #8]
    706c:	e693      	b.n	6d96 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x4a>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
    706e:	9301      	str	r3, [sp, #4]
    7070:	68e3      	ldr	r3, [r4, #12]
    7072:	4641      	mov	r1, r8
    7074:	9300      	str	r3, [sp, #0]
    7076:	68a3      	ldr	r3, [r4, #8]
    7078:	a80b      	add	r0, sp, #44	; 0x2c
    707a:	f007 f90d 	bl	e298 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
    707e:	e7ed      	b.n	705c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x310>
    7080:	00064466 	.word	0x00064466
    7084:	000644a7 	.word	0x000644a7
    7088:	00063309 	.word	0x00063309
    708c:	00063cce 	.word	0x00063cce
    7090:	00063409 	.word	0x00063409
    7094:	00064557 	.word	0x00064557
    7098:	00064540 	.word	0x00064540
    709c:	000644f2 	.word	0x000644f2
    70a0:	000645be 	.word	0x000645be
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    70a4:	6868      	ldr	r0, [r5, #4]
    70a6:	f006 fd88 	bl	dbba <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
  int planner_index = 0;
    70aa:	f04f 0800 	mov.w	r8, #0
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    70ae:	4604      	mov	r4, r0
      int offset = -1;
    70b0:	f04f 3aff 	mov.w	sl, #4294967295
    70b4:	9b02      	ldr	r3, [sp, #8]
    70b6:	441e      	add	r6, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
    70b8:	45b1      	cmp	r9, r6
    70ba:	d017      	beq.n	70ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a0>
    if (current->needs_allocating) {
    70bc:	f899 3014 	ldrb.w	r3, [r9, #20]
    70c0:	b18b      	cbz	r3, 70e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x39a>
      TF_LITE_ENSURE_STATUS(
    70c2:	ab0a      	add	r3, sp, #40	; 0x28
    70c4:	4642      	mov	r2, r8
    70c6:	4639      	mov	r1, r7
    70c8:	a80b      	add	r0, sp, #44	; 0x2c
      int offset = -1;
    70ca:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
      TF_LITE_ENSURE_STATUS(
    70ce:	f000 f8a3 	bl	7218 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
    70d2:	4603      	mov	r3, r0
    70d4:	2800      	cmp	r0, #0
    70d6:	d1c4      	bne.n	7062 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x316>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
    70d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    70da:	f8d9 2004 	ldr.w	r2, [r9, #4]
    70de:	4423      	add	r3, r4
    70e0:	6013      	str	r3, [r2, #0]
      ++planner_index;
    70e2:	f108 0801 	add.w	r8, r8, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
    70e6:	f109 0918 	add.w	r9, r9, #24
    70ea:	e7e5      	b.n	70b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x36c>
  head_usage = planner.GetMaximumMemorySize();
    70ec:	a80b      	add	r0, sp, #44	; 0x2c
    70ee:	f007 f9ca 	bl	e486 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    70f2:	69ab      	ldr	r3, [r5, #24]
    70f4:	4283      	cmp	r3, r0
    70f6:	d200      	bcs.n	70fa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3ae>
    max_head_buffer_usage_ = head_usage;
    70f8:	61a8      	str	r0, [r5, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    70fa:	6868      	ldr	r0, [r5, #4]
    70fc:	2210      	movs	r2, #16
    70fe:	6803      	ldr	r3, [r0, #0]
    7100:	69a9      	ldr	r1, [r5, #24]
    7102:	689b      	ldr	r3, [r3, #8]
    7104:	4798      	blx	r3
    7106:	4603      	mov	r3, r0
    7108:	e7ab      	b.n	7062 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x316>
  memory_allocator_->ResetTempAllocations();
    710a:	6868      	ldr	r0, [r5, #4]
    710c:	6803      	ldr	r3, [r0, #0]
    710e:	695b      	ldr	r3, [r3, #20]
    7110:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    7112:	2110      	movs	r1, #16
    7114:	6868      	ldr	r0, [r5, #4]
    7116:	f006 fd52 	bl	dbbe <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    711a:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    711c:	a80b      	add	r0, sp, #44	; 0x2c
    711e:	f007 f9b2 	bl	e486 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    7122:	42a0      	cmp	r0, r4
    7124:	68ef      	ldr	r7, [r5, #12]
    7126:	d9bd      	bls.n	70a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x358>
    TF_LITE_REPORT_ERROR(
    7128:	a80b      	add	r0, sp, #44	; 0x2c
    712a:	f007 f9ac 	bl	e486 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    712e:	4623      	mov	r3, r4
    7130:	4602      	mov	r2, r0
    7132:	4918      	ldr	r1, [pc, #96]	; (7194 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x448>)
    7134:	4638      	mov	r0, r7
    7136:	f007 fa85 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    713a:	2301      	movs	r3, #1
    713c:	e791      	b.n	7062 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x316>
      GetScratchBufferRequests();
    713e:	4628      	mov	r0, r5
    7140:	f007 f804 	bl	e14c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    7144:	2218      	movs	r2, #24
    7146:	9906      	ldr	r1, [sp, #24]
    current->offline_offset = kOnlinePlannedBuffer;
    7148:	f04f 3cff 	mov.w	ip, #4294967295
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    714c:	4441      	add	r1, r8
    714e:	460c      	mov	r4, r1
    current->needs_allocating = true;
    7150:	2701      	movs	r7, #1
    7152:	fb02 6208 	mla	r2, r2, r8, r6
    7156:	9b08      	ldr	r3, [sp, #32]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    7158:	4544      	cmp	r4, r8
    715a:	f102 0218 	add.w	r2, r2, #24
    715e:	f100 0008 	add.w	r0, r0, #8
    7162:	f67f af43 	bls.w	6fec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2a0>
    current->bytes = current_request->bytes;
    7166:	f850 1c08 	ldr.w	r1, [r0, #-8]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
    716a:	f842 3c14 	str.w	r3, [r2, #-20]
    current->bytes = current_request->bytes;
    716e:	f842 1c18 	str.w	r1, [r2, #-24]
    current->first_created = current_request->node_idx;
    7172:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    7176:	f108 0801 	add.w	r8, r8, #1
    current->last_used = current_request->node_idx;
    717a:	e942 1104 	strd	r1, r1, [r2, #-16]
    current->offline_offset = kOnlinePlannedBuffer;
    717e:	f842 cc08 	str.w	ip, [r2, #-8]
    current->needs_allocating = true;
    7182:	f802 7c04 	strb.w	r7, [r2, #-4]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
    7186:	3304      	adds	r3, #4
    7188:	e7e6      	b.n	7158 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x40c>
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    718a:	68c3      	ldr	r3, [r0, #12]
    718c:	deff      	udf	#255	; 0xff
    718e:	6803      	ldr	r3, [r0, #0]
    7190:	e7fc      	b.n	718c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x440>
    7192:	bf00      	nop
    7194:	00064570 	.word	0x00064570

00007198 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    7198:	b570      	push	{r4, r5, r6, lr}
    719a:	4604      	mov	r4, r0
    719c:	4616      	mov	r6, r2
  if (buffer_count_ >= max_buffer_count_) {
    719e:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
    71a2:	4295      	cmp	r5, r2
    int last_time_used) {
    71a4:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    71a6:	db04      	blt.n	71b2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    71a8:	490b      	ldr	r1, [pc, #44]	; (71d8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    71aa:	f007 fa4b 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
    71ae:	2001      	movs	r0, #1
  current->last_time_used = last_time_used;
  current->offline_offset = kOnlinePlannedBuffer;
  ++buffer_count_;
  need_to_calculate_offsets_ = true;
  return kTfLiteOk;
}
    71b0:	bd70      	pop	{r4, r5, r6, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
    71b2:	68e2      	ldr	r2, [r4, #12]
    71b4:	0128      	lsls	r0, r5, #4
    71b6:	eb02 1105 	add.w	r1, r2, r5, lsl #4
  current->size = size;
    71ba:	5016      	str	r6, [r2, r0]
  current->first_time_used = first_time_used;
    71bc:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
    71be:	9b04      	ldr	r3, [sp, #16]
  ++buffer_count_;
    71c0:	3501      	adds	r5, #1
  current->last_time_used = last_time_used;
    71c2:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    71c4:	f04f 33ff 	mov.w	r3, #4294967295
    71c8:	604b      	str	r3, [r1, #4]
  need_to_calculate_offsets_ = true;
    71ca:	2301      	movs	r3, #1
  return kTfLiteOk;
    71cc:	2000      	movs	r0, #0
  ++buffer_count_;
    71ce:	60a5      	str	r5, [r4, #8]
  need_to_calculate_offsets_ = true;
    71d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    71d4:	e7ec      	b.n	71b0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
    71d6:	bf00      	nop
    71d8:	000645d6 	.word	0x000645d6

000071dc <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    71dc:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    71de:	4c0d      	ldr	r4, [pc, #52]	; (7214 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x38>)
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    71e0:	60c1      	str	r1, [r0, #12]
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    71e2:	6004      	str	r4, [r0, #0]
    71e4:	2400      	movs	r4, #0
    71e6:	6084      	str	r4, [r0, #8]
    71e8:	2401      	movs	r4, #1
    71ea:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    71ee:	2428      	movs	r4, #40	; 0x28
    71f0:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(ListEntry) * max_buffer_count_;
    71f4:	240c      	movs	r4, #12
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    71f6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    71fa:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    71fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    7200:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    7202:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    7206:	6042      	str	r2, [r0, #4]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    7208:	fb04 1202 	mla	r2, r4, r2, r1
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    720c:	6181      	str	r1, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    720e:	6242      	str	r2, [r0, #36]	; 0x24
}
    7210:	bd10      	pop	{r4, pc}
    7212:	bf00      	nop
    7214:	000629a8 	.word	0x000629a8

00007218 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    7218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    721a:	4614      	mov	r4, r2
    721c:	4605      	mov	r5, r0
    721e:	460f      	mov	r7, r1
    7220:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    7222:	f007 f877 	bl	e314 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    7226:	2c00      	cmp	r4, #0
    7228:	db02      	blt.n	7230 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
    722a:	68ab      	ldr	r3, [r5, #8]
    722c:	42a3      	cmp	r3, r4
    722e:	dc07      	bgt.n	7240 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter,
    7230:	4622      	mov	r2, r4
    7232:	4638      	mov	r0, r7
    7234:	68ab      	ldr	r3, [r5, #8]
    7236:	4905      	ldr	r1, [pc, #20]	; (724c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    7238:	f007 fa04 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    723c:	2001      	movs	r0, #1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
    723e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
    7240:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  return kTfLiteOk;
    7242:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
    7244:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7248:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    724a:	e7f8      	b.n	723e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
    724c:	000645f3 	.word	0x000645f3

00007250 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    7250:	2810      	cmp	r0, #16
    7252:	bf9a      	itte	ls
    7254:	4b02      	ldrls	r3, [pc, #8]	; (7260 <TfLiteTypeGetName+0x10>)
    7256:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
    725a:	4802      	ldrhi	r0, [pc, #8]	; (7264 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
    725c:	4770      	bx	lr
    725e:	bf00      	nop
    7260:	000629c0 	.word	0x000629c0
    7264:	0006461c 	.word	0x0006461c

00007268 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    7268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    726a:	4615      	mov	r5, r2
    726c:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    726e:	2200      	movs	r2, #0
    7270:	2300      	movs	r3, #0
                        int* shift) {
    7272:	4606      	mov	r6, r0
    7274:	460f      	mov	r7, r1
  if (double_multiplier == 0.) {
    7276:	f7f9 fb93 	bl	9a0 <__aeabi_dcmpeq>
    727a:	b118      	cbz	r0, 7284 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
    *quantized_multiplier = 0;
    727c:	2300      	movs	r3, #0
    727e:	602b      	str	r3, [r5, #0]
    *shift = 0;
    7280:	6023      	str	r3, [r4, #0]
}
    7282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const double q = std::frexp(double_multiplier, shift);
    7284:	4622      	mov	r2, r4
    7286:	4630      	mov	r0, r6
    7288:	4639      	mov	r1, r7
    728a:	f004 f98d 	bl	b5a8 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    728e:	2200      	movs	r2, #0
    7290:	4b11      	ldr	r3, [pc, #68]	; (72d8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>)
    7292:	f7f9 f91d 	bl	4d0 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    7296:	f004 f9bf 	bl	b618 <round>
    729a:	f7f9 ff3d 	bl	1118 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    729e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    72a2:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    72a4:	2300      	movs	r3, #0
    72a6:	4282      	cmp	r2, r0
    72a8:	eb73 0107 	sbcs.w	r1, r3, r7
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    72ac:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    72ae:	da01      	bge.n	72b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x4c>
    72b0:	f008 fdcd 	bl	fe4e <abort>
  if (q_fixed == (1ll << 31)) {
    72b4:	429f      	cmp	r7, r3
    72b6:	bf01      	itttt	eq
    72b8:	4296      	cmpeq	r6, r2
    ++*shift;
    72ba:	6823      	ldreq	r3, [r4, #0]
    q_fixed /= 2;
    72bc:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    ++*shift;
    72c0:	3301      	addeq	r3, #1
    72c2:	bf08      	it	eq
    72c4:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
    72c6:	6823      	ldr	r3, [r4, #0]
    72c8:	331f      	adds	r3, #31
    *shift = 0;
    72ca:	bfbe      	ittt	lt
    72cc:	2300      	movlt	r3, #0
    q_fixed = 0;
    72ce:	2600      	movlt	r6, #0
    *shift = 0;
    72d0:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    72d2:	602e      	str	r6, [r5, #0]
    72d4:	e7d5      	b.n	7282 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1a>
    72d6:	bf00      	nop
    72d8:	41e00000 	.word	0x41e00000

000072dc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    72dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72de:	4615      	mov	r5, r2
    72e0:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    72e2:	2200      	movs	r2, #0
    72e4:	4b08      	ldr	r3, [pc, #32]	; (7308 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>)
                                      int* left_shift) {
    72e6:	4606      	mov	r6, r0
    72e8:	460f      	mov	r7, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
    72ea:	f7f9 fb81 	bl	9f0 <__aeabi_dcmpgt>
    72ee:	b908      	cbnz	r0, 72f4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x18>
    72f0:	f008 fdad 	bl	fe4e <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    72f4:	4623      	mov	r3, r4
    72f6:	462a      	mov	r2, r5
    72f8:	4630      	mov	r0, r6
    72fa:	4639      	mov	r1, r7
    72fc:	f7ff ffb4 	bl	7268 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    7300:	6823      	ldr	r3, [r4, #0]
    7302:	2b00      	cmp	r3, #0
    7304:	dbf4      	blt.n	72f0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x14>
}
    7306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7308:	3ff00000 	.word	0x3ff00000

0000730c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>:
}

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
    730c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    730e:	4604      	mov	r4, r0
  const float tmp = TfLiteRound(f / scale);
    7310:	4618      	mov	r0, r3
                             int32_t zero_point, float f, int32_t& q) {
    7312:	4616      	mov	r6, r2
  const float tmp = TfLiteRound(f / scale);
    7314:	f7f9 fdb0 	bl	e78 <__aeabi_fdiv>
    7318:	f7f9 f882 	bl	420 <__aeabi_f2d>
    731c:	f004 f97c 	bl	b618 <round>
    7320:	f7f9 fb98 	bl	a54 <__aeabi_d2f>
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    7324:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    7328:	4605      	mov	r5, r0
    732a:	f7f9 fea3 	bl	1074 <__aeabi_fcmpge>
    732e:	b170      	cbz	r0, 734e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x42>
    7330:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    7334:	4628      	mov	r0, r5
    7336:	f7f9 fe93 	bl	1060 <__aeabi_fcmple>
    733a:	b140      	cbz	r0, 734e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x42>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
    733c:	4628      	mov	r0, r5
    733e:	f7f9 fead 	bl	109c <__aeabi_f2iz>
    7342:	9b06      	ldr	r3, [sp, #24]
    7344:	4430      	add	r0, r6
    7346:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
    7348:	2000      	movs	r0, #0
}
    734a:	b002      	add	sp, #8
    734c:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    734e:	4b05      	ldr	r3, [pc, #20]	; (7364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x58>)
    7350:	4620      	mov	r0, r4
    7352:	9300      	str	r3, [sp, #0]
    7354:	6965      	ldr	r5, [r4, #20]
    7356:	f240 1359 	movw	r3, #345	; 0x159
    735a:	4a03      	ldr	r2, [pc, #12]	; (7368 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x5c>)
    735c:	4903      	ldr	r1, [pc, #12]	; (736c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x60>)
    735e:	47a8      	blx	r5
    7360:	2001      	movs	r0, #1
    7362:	e7f2      	b.n	734a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x3e>
    7364:	000646e0 	.word	0x000646e0
    7368:	00064694 	.word	0x00064694
    736c:	00064540 	.word	0x00064540

00007370 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    7370:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7372:	4604      	mov	r4, r0
    7374:	4608      	mov	r0, r1
      static_cast<double>(input->params.scale * filter->params.scale);
    7376:	68d1      	ldr	r1, [r2, #12]
    7378:	68c0      	ldr	r0, [r0, #12]
                                              double* multiplier) {
    737a:	461e      	mov	r6, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    737c:	f7f9 fcc8 	bl	d10 <__aeabi_fmul>
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    7380:	2100      	movs	r1, #0
      static_cast<double>(input->params.scale * filter->params.scale);
    7382:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    7384:	f7f9 fe76 	bl	1074 <__aeabi_fcmpge>
    7388:	b958      	cbnz	r0, 73a2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x32>
    738a:	4b0f      	ldr	r3, [pc, #60]	; (73c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
    738c:	4620      	mov	r0, r4
    738e:	9300      	str	r3, [sp, #0]
    7390:	6965      	ldr	r5, [r4, #20]
    7392:	f240 134b 	movw	r3, #331	; 0x14b
    7396:	4a0d      	ldr	r2, [pc, #52]	; (73cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
    7398:	490d      	ldr	r1, [pc, #52]	; (73d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    739a:	47a8      	blx	r5
    739c:	2001      	movs	r0, #1
}
    739e:	b002      	add	sp, #8
    73a0:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
    73a2:	4628      	mov	r0, r5
    73a4:	f7f9 f83c 	bl	420 <__aeabi_f2d>
    73a8:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    73aa:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
    73ac:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    73ae:	f7f9 f837 	bl	420 <__aeabi_f2d>
    73b2:	460b      	mov	r3, r1
    73b4:	4602      	mov	r2, r0
    73b6:	4629      	mov	r1, r5
    73b8:	4620      	mov	r0, r4
    73ba:	f7f9 f9b3 	bl	724 <__aeabi_ddiv>
    73be:	9b06      	ldr	r3, [sp, #24]
    73c0:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    73c4:	2000      	movs	r0, #0
    73c6:	e7ea      	b.n	739e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
    73c8:	00064706 	.word	0x00064706
    73cc:	00064694 	.word	0x00064694
    73d0:	00064540 	.word	0x00064540

000073d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    73d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73d8:	461e      	mov	r6, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    73da:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
    73dc:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
    73de:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
    73e0:	4604      	mov	r4, r0
    73e2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  if (output->type == kTfLiteUInt8) {
    73e6:	d00f      	beq.n	7408 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x34>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    73e8:	2b09      	cmp	r3, #9
    73ea:	d029      	beq.n	7440 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x6c>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    73ec:	2b07      	cmp	r3, #7
    73ee:	d02b      	beq.n	7448 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x74>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    73f0:	4b37      	ldr	r3, [pc, #220]	; (74d0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xfc>)
    73f2:	4a38      	ldr	r2, [pc, #224]	; (74d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x100>)
    73f4:	9300      	str	r3, [sp, #0]
    73f6:	6944      	ldr	r4, [r0, #20]
    73f8:	f240 1391 	movw	r3, #401	; 0x191
    73fc:	4936      	ldr	r1, [pc, #216]	; (74d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x104>)
    73fe:	47a0      	blx	r4
    7400:	2001      	movs	r0, #1
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
    7402:	b005      	add	sp, #20
    7404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    qmax = std::numeric_limits<uint8_t>::max();
    7408:	25ff      	movs	r5, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    740a:	f04f 0800 	mov.w	r8, #0
  if (activation == kTfLiteActRelu) {
    740e:	2901      	cmp	r1, #1
  const auto scale = output->params.scale;
    7410:	f8d2 900c 	ldr.w	r9, [r2, #12]
  const auto zero_point = output->params.zero_point;
    7414:	f8d2 b010 	ldr.w	fp, [r2, #16]
  if (activation == kTfLiteActRelu) {
    7418:	d11b      	bne.n	7452 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7e>
    TF_LITE_ENSURE_OK(context,
    741a:	ab03      	add	r3, sp, #12
    741c:	9300      	str	r3, [sp, #0]
    741e:	465a      	mov	r2, fp
    7420:	2300      	movs	r3, #0
    7422:	4649      	mov	r1, r9
    7424:	4620      	mov	r0, r4
    7426:	f7ff ff71 	bl	730c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    742a:	2800      	cmp	r0, #0
    742c:	d1e9      	bne.n	7402 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
    742e:	9b03      	ldr	r3, [sp, #12]
    7430:	4543      	cmp	r3, r8
    7432:	bfac      	ite	ge
    7434:	6033      	strge	r3, [r6, #0]
    7436:	f8c6 8000 	strlt.w	r8, [r6]
    *act_max = qmax;
    743a:	f8ca 5000 	str.w	r5, [sl]
    743e:	e7e0      	b.n	7402 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    qmax = std::numeric_limits<int8_t>::max();
    7440:	257f      	movs	r5, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    7442:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    7446:	e7e2      	b.n	740e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x3a>
    qmax = std::numeric_limits<int16_t>::max();
    7448:	f647 75ff 	movw	r5, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    744c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 74e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x110>
    7450:	e7dd      	b.n	740e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x3a>
  } else if (activation == kTfLiteActRelu6) {
    7452:	2903      	cmp	r1, #3
    7454:	d120      	bne.n	7498 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xc4>
    TF_LITE_ENSURE_OK(context,
    7456:	af03      	add	r7, sp, #12
    7458:	2300      	movs	r3, #0
    745a:	465a      	mov	r2, fp
    745c:	4649      	mov	r1, r9
    745e:	4620      	mov	r0, r4
    7460:	9700      	str	r7, [sp, #0]
    7462:	f7ff ff53 	bl	730c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    7466:	2800      	cmp	r0, #0
    7468:	d1cb      	bne.n	7402 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
    746a:	9b03      	ldr	r3, [sp, #12]
    TF_LITE_ENSURE_OK(context,
    746c:	9700      	str	r7, [sp, #0]
    *act_min = std::max(qmin, tmp_q);
    746e:	4543      	cmp	r3, r8
    7470:	bfac      	ite	ge
    7472:	6033      	strge	r3, [r6, #0]
    7474:	f8c6 8000 	strlt.w	r8, [r6]
    TF_LITE_ENSURE_OK(context,
    7478:	4b18      	ldr	r3, [pc, #96]	; (74dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x108>)
    TF_LITE_ENSURE_OK(context,
    747a:	465a      	mov	r2, fp
    747c:	4649      	mov	r1, r9
    747e:	4620      	mov	r0, r4
    7480:	f7ff ff44 	bl	730c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    7484:	2800      	cmp	r0, #0
    7486:	d1bc      	bne.n	7402 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    *act_max = std::min(qmax, tmp_q);
    7488:	9b03      	ldr	r3, [sp, #12]
    748a:	42ab      	cmp	r3, r5
    748c:	bfd4      	ite	le
    748e:	f8ca 3000 	strle.w	r3, [sl]
    7492:	f8ca 5000 	strgt.w	r5, [sl]
    7496:	e7b4      	b.n	7402 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
  } else if (activation == kTfLiteActReluN1To1) {
    7498:	2902      	cmp	r1, #2
    749a:	d113      	bne.n	74c4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xf0>
    TF_LITE_ENSURE_OK(context,
    749c:	af03      	add	r7, sp, #12
    749e:	465a      	mov	r2, fp
    74a0:	4649      	mov	r1, r9
    74a2:	4620      	mov	r0, r4
    74a4:	4b0e      	ldr	r3, [pc, #56]	; (74e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x10c>)
    74a6:	9700      	str	r7, [sp, #0]
    74a8:	f7ff ff30 	bl	730c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
    74ac:	2800      	cmp	r0, #0
    74ae:	d1a8      	bne.n	7402 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
    74b0:	9b03      	ldr	r3, [sp, #12]
    TF_LITE_ENSURE_OK(context,
    74b2:	9700      	str	r7, [sp, #0]
    *act_min = std::max(qmin, tmp_q);
    74b4:	4543      	cmp	r3, r8
    74b6:	bfac      	ite	ge
    74b8:	6033      	strge	r3, [r6, #0]
    74ba:	f8c6 8000 	strlt.w	r8, [r6]
    TF_LITE_ENSURE_OK(context,
    74be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    74c2:	e7da      	b.n	747a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa6>
    *act_min = qmin;
    74c4:	f8c6 8000 	str.w	r8, [r6]
  return kTfLiteOk;
    74c8:	2000      	movs	r0, #0
    *act_max = qmax;
    74ca:	f8ca 5000 	str.w	r5, [sl]
                                               output, act_min, act_max);
    74ce:	e798      	b.n	7402 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    74d0:	00064741 	.word	0x00064741
    74d4:	00064694 	.word	0x00064694
    74d8:	00064540 	.word	0x00064540
    74dc:	40c00000 	.word	0x40c00000
    74e0:	bf800000 	.word	0xbf800000
    74e4:	ffff8000 	.word	0xffff8000

000074e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    74e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    74ec:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
    int num_channels) {
    74f0:	b08d      	sub	sp, #52	; 0x34
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    74f2:	f1b8 0f01 	cmp.w	r8, #1
    int num_channels) {
    74f6:	4604      	mov	r4, r0
    74f8:	460d      	mov	r5, r1
    74fa:	4616      	mov	r6, r2
    74fc:	9306      	str	r3, [sp, #24]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    74fe:	d00f      	beq.n	7520 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x38>
    7500:	2701      	movs	r7, #1
    7502:	4b6f      	ldr	r3, [pc, #444]	; (76c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d8>)
    7504:	e9cd 8702 	strd	r8, r7, [sp, #8]
    7508:	9301      	str	r3, [sp, #4]
    750a:	4b6e      	ldr	r3, [pc, #440]	; (76c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1dc>)
    750c:	4a6e      	ldr	r2, [pc, #440]	; (76c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e0>)
    750e:	9300      	str	r3, [sp, #0]
    7510:	6944      	ldr	r4, [r0, #20]
    7512:	23da      	movs	r3, #218	; 0xda
    7514:	496d      	ldr	r1, [pc, #436]	; (76cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e4>)
    7516:	47a0      	blx	r4
}
    7518:	4638      	mov	r0, r7
    751a:	b00d      	add	sp, #52	; 0x34
    751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    7520:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
    7524:	2f01      	cmp	r7, #1
    7526:	d00c      	beq.n	7542 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5a>
    7528:	4b65      	ldr	r3, [pc, #404]	; (76c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d8>)
    752a:	e9cd 7802 	strd	r7, r8, [sp, #8]
    752e:	9301      	str	r3, [sp, #4]
    7530:	4b67      	ldr	r3, [pc, #412]	; (76d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e8>)
    7532:	4a65      	ldr	r2, [pc, #404]	; (76c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e0>)
    7534:	9300      	str	r3, [sp, #0]
    7536:	6944      	ldr	r4, [r0, #20]
    7538:	23dc      	movs	r3, #220	; 0xdc
    753a:	4964      	ldr	r1, [pc, #400]	; (76cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e4>)
    753c:	47a0      	blx	r4
    753e:	4647      	mov	r7, r8
    7540:	e7ea      	b.n	7518 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x30>
  const auto* affine_quantization =
    7542:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    7544:	b93a      	cbnz	r2, 7556 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x6e>
    7546:	4b63      	ldr	r3, [pc, #396]	; (76d4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ec>)
    7548:	9300      	str	r3, [sp, #0]
    754a:	23e7      	movs	r3, #231	; 0xe7
    754c:	6944      	ldr	r4, [r0, #20]
    TF_LITE_ENSURE(context,
    754e:	4a5e      	ldr	r2, [pc, #376]	; (76c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e0>)
    7550:	4961      	ldr	r1, [pc, #388]	; (76d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f0>)
    7552:	47a0      	blx	r4
    7554:	e7e0      	b.n	7518 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x30>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    7556:	f8d2 a000 	ldr.w	sl, [r2]
    755a:	f1ba 0f00 	cmp.w	sl, #0
    755e:	d104      	bne.n	756a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x82>
    7560:	4b5e      	ldr	r3, [pc, #376]	; (76dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
    7562:	9300      	str	r3, [sp, #0]
    7564:	6944      	ldr	r4, [r0, #20]
    7566:	23e8      	movs	r3, #232	; 0xe8
    7568:	e7f1      	b.n	754e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x66>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    756a:	f8da b000 	ldr.w	fp, [sl]
  if (is_per_channel) {
    756e:	f1bb 0f01 	cmp.w	fp, #1
    7572:	dd37      	ble.n	75e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    TF_LITE_ENSURE(context,
    7574:	780b      	ldrb	r3, [r1, #0]
    7576:	2b09      	cmp	r3, #9
    7578:	d006      	beq.n	7588 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa0>
    757a:	2b07      	cmp	r3, #7
    757c:	d004      	beq.n	7588 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa0>
    757e:	4b58      	ldr	r3, [pc, #352]	; (76e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f8>)
    7580:	9300      	str	r3, [sp, #0]
    7582:	6944      	ldr	r4, [r0, #20]
    7584:	23ec      	movs	r3, #236	; 0xec
    7586:	e7e2      	b.n	754e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x66>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    7588:	7833      	ldrb	r3, [r6, #0]
    758a:	2b09      	cmp	r3, #9
    758c:	d00d      	beq.n	75aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
    758e:	2209      	movs	r2, #9
    7590:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7594:	4b53      	ldr	r3, [pc, #332]	; (76e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
    7596:	9301      	str	r3, [sp, #4]
    7598:	4b53      	ldr	r3, [pc, #332]	; (76e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
    759a:	9300      	str	r3, [sp, #0]
    759c:	23ee      	movs	r3, #238	; 0xee
    759e:	6965      	ldr	r5, [r4, #20]
    TF_LITE_ENSURE_EQ(
    75a0:	4620      	mov	r0, r4
    75a2:	4a49      	ldr	r2, [pc, #292]	; (76c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e0>)
    75a4:	4949      	ldr	r1, [pc, #292]	; (76cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1e4>)
    75a6:	47a8      	blx	r5
    75a8:	e7b6      	b.n	7518 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x30>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    75aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    75ac:	455b      	cmp	r3, fp
    75ae:	d008      	beq.n	75c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xda>
    75b0:	e9cd b302 	strd	fp, r3, [sp, #8]
    75b4:	4b4d      	ldr	r3, [pc, #308]	; (76ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
    75b6:	9301      	str	r3, [sp, #4]
    75b8:	4b4d      	ldr	r3, [pc, #308]	; (76f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x208>)
    75ba:	9300      	str	r3, [sp, #0]
    75bc:	6965      	ldr	r5, [r4, #20]
    75be:	23ef      	movs	r3, #239	; 0xef
    75c0:	e7ee      	b.n	75a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb8>
    TF_LITE_ENSURE_EQ(
    75c2:	6892      	ldr	r2, [r2, #8]
    75c4:	68b3      	ldr	r3, [r6, #8]
    75c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    75ca:	685b      	ldr	r3, [r3, #4]
    75cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    75ce:	429a      	cmp	r2, r3
    75d0:	d008      	beq.n	75e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    75d2:	9303      	str	r3, [sp, #12]
    75d4:	4b47      	ldr	r3, [pc, #284]	; (76f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x20c>)
    75d6:	9202      	str	r2, [sp, #8]
    75d8:	9301      	str	r3, [sp, #4]
    75da:	4b44      	ldr	r3, [pc, #272]	; (76ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
    75dc:	9300      	str	r3, [sp, #0]
    75de:	6965      	ldr	r5, [r4, #20]
    75e0:	23f0      	movs	r3, #240	; 0xf0
    75e2:	e7dd      	b.n	75a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb8>
  for (int i = 0; i < num_channels; ++i) {
    75e4:	2700      	movs	r7, #0
  const float input_scale = input->params.scale;
    75e6:	68eb      	ldr	r3, [r5, #12]
    75e8:	9304      	str	r3, [sp, #16]
  const float output_scale = output->params.scale;
    75ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    75ec:	68db      	ldr	r3, [r3, #12]
    75ee:	9305      	str	r3, [sp, #20]
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    75f0:	f10a 0304 	add.w	r3, sl, #4
    75f4:	9307      	str	r3, [sp, #28]
  for (int i = 0; i < num_channels; ++i) {
    75f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    75f8:	42bb      	cmp	r3, r7
    75fa:	dd2d      	ble.n	7658 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x170>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    75fc:	f1bb 0f01 	cmp.w	fp, #1
    7600:	bfca      	itet	gt
    7602:	9b07      	ldrgt	r3, [sp, #28]
    7604:	f8da 0004 	ldrle.w	r0, [sl, #4]
    7608:	f853 0027 	ldrgt.w	r0, [r3, r7, lsl #2]
    const double filter_scale = static_cast<double>(scale);
    760c:	f7f8 ff08 	bl	420 <__aeabi_f2d>
    7610:	4680      	mov	r8, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
    7612:	9804      	ldr	r0, [sp, #16]
    const double filter_scale = static_cast<double>(scale);
    7614:	4689      	mov	r9, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    7616:	f7f8 ff03 	bl	420 <__aeabi_f2d>
    761a:	4602      	mov	r2, r0
    761c:	460b      	mov	r3, r1
    761e:	4640      	mov	r0, r8
    7620:	4649      	mov	r1, r9
    7622:	f7f8 ff55 	bl	4d0 <__aeabi_dmul>
    7626:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
    7628:	9805      	ldr	r0, [sp, #20]
    const double effective_output_scale = static_cast<double>(input_scale) *
    762a:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
    762c:	f7f8 fef8 	bl	420 <__aeabi_f2d>
    7630:	4602      	mov	r2, r0
    7632:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    7634:	4640      	mov	r0, r8
    7636:	4649      	mov	r1, r9
    7638:	f7f9 f874 	bl	724 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    763c:	ab0a      	add	r3, sp, #40	; 0x28
    763e:	aa09      	add	r2, sp, #36	; 0x24
    7640:	f7ff fe12 	bl	7268 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    7644:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7646:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7648:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    per_channel_shift[i] = channel_shift;
    764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    764e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7650:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    7654:	3701      	adds	r7, #1
    7656:	e7ce      	b.n	75f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x10e>
  if (input->type == kTfLiteUInt8) {
    7658:	782b      	ldrb	r3, [r5, #0]
    765a:	2b03      	cmp	r3, #3
    765c:	d11b      	bne.n	7696 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ae>
    double real_multiplier = 0.0;
    765e:	2200      	movs	r2, #0
    7660:	2300      	movs	r3, #0
    7662:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    7666:	ab0a      	add	r3, sp, #40	; 0x28
    7668:	9301      	str	r3, [sp, #4]
    766a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    766c:	4632      	mov	r2, r6
    766e:	9300      	str	r3, [sp, #0]
    7670:	4629      	mov	r1, r5
    7672:	4620      	mov	r0, r4
    7674:	9b06      	ldr	r3, [sp, #24]
    7676:	f7f9 ff6b 	bl	1550 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    767a:	4607      	mov	r7, r0
    767c:	2800      	cmp	r0, #0
    767e:	f47f af4b 	bne.w	7518 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x30>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    7682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    7686:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7688:	ab09      	add	r3, sp, #36	; 0x24
    768a:	f7ff fded 	bl	7268 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7690:	9a19      	ldr	r2, [sp, #100]	; 0x64
    7692:	425b      	negs	r3, r3
    7694:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    7696:	782b      	ldrb	r3, [r5, #0]
    7698:	2b09      	cmp	r3, #9
    769a:	d003      	beq.n	76a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1bc>
    769c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    76a0:	2b03      	cmp	r3, #3
    76a2:	d10a      	bne.n	76ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d2>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    76a4:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
    76a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    76aa:	4620      	mov	r0, r4
    76ac:	9300      	str	r3, [sp, #0]
    76ae:	7809      	ldrb	r1, [r1, #0]
    76b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    76b2:	f7ff fe8f 	bl	73d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    76b6:	4607      	mov	r7, r0
    76b8:	e72e      	b.n	7518 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x30>
  return kTfLiteOk;
    76ba:	2700      	movs	r7, #0
    76bc:	e72c      	b.n	7518 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x30>
    76be:	bf00      	nop
    76c0:	00064761 	.word	0x00064761
    76c4:	0006477b 	.word	0x0006477b
    76c8:	00064694 	.word	0x00064694
    76cc:	00064747 	.word	0x00064747
    76d0:	00064794 	.word	0x00064794
    76d4:	000647ae 	.word	0x000647ae
    76d8:	00064540 	.word	0x00064540
    76dc:	000647c2 	.word	0x000647c2
    76e0:	000647dd 	.word	0x000647dd
    76e4:	00064817 	.word	0x00064817
    76e8:	00064823 	.word	0x00064823
    76ec:	00064830 	.word	0x00064830
    76f0:	0006483d 	.word	0x0006483d
    76f4:	0006485e 	.word	0x0006485e

000076f8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
}

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    76f8:	b538      	push	{r3, r4, r5, lr}
    76fa:	4604      	mov	r4, r0
    76fc:	4610      	mov	r0, r2
    76fe:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
    7700:	b924      	cbnz	r4, 770c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    TF_LITE_REPORT_ERROR(error_reporter,
    7702:	4910      	ldr	r1, [pc, #64]	; (7744 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
                         op_name);
    return kTfLiteError;
  } else {
    size_t num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      TF_LITE_REPORT_ERROR(
    7704:	f006 ff9e 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
    7708:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
    770a:	bd38      	pop	{r3, r4, r5, pc}
    size_t num_dimensions = flat_vector->size();
    770c:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    770e:	2d08      	cmp	r5, #8
    7710:	d80d      	bhi.n	772e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x36>
    7712:	4622      	mov	r2, r4
      for (size_t i = 0; i < num_dimensions; ++i) {
    7714:	2300      	movs	r3, #0
    7716:	429d      	cmp	r5, r3
    7718:	d011      	beq.n	773e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x46>
    771a:	6820      	ldr	r0, [r4, #0]
    771c:	4283      	cmp	r3, r0
    771e:	d308      	bcc.n	7732 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x3a>
    7720:	f44f 7183 	mov.w	r1, #262	; 0x106
    7724:	4b08      	ldr	r3, [pc, #32]	; (7748 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
    7726:	4a09      	ldr	r2, [pc, #36]	; (774c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
    7728:	4809      	ldr	r0, [pc, #36]	; (7750 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
    772a:	f004 f955 	bl	b9d8 <__assert_func>
      TF_LITE_REPORT_ERROR(
    772e:	4909      	ldr	r1, [pc, #36]	; (7754 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x5c>)
    7730:	e7e8      	b.n	7704 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7732:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
    7736:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
    773a:	3301      	adds	r3, #1
    773c:	e7eb      	b.n	7716 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
    773e:	2000      	movs	r0, #0
    7740:	e7e3      	b.n	770a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
    7742:	bf00      	nop
    7744:	0006489b 	.word	0x0006489b
    7748:	00063309 	.word	0x00063309
    774c:	00063525 	.word	0x00063525
    7750:	00063409 	.word	0x00063409
    7754:	000648c9 	.word	0x000648c9

00007758 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    7758:	b508      	push	{r3, lr}
    775a:	4613      	mov	r3, r2
    775c:	280f      	cmp	r0, #15
    775e:	d82c      	bhi.n	77ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x62>
    7760:	e8df f000 	tbb	[pc, r0]
    7764:	1713080c 	.word	0x1713080c
    7768:	11211f1b 	.word	0x11211f1b
    776c:	250f1923 	.word	0x250f1923
    7770:	1529271d 	.word	0x1529271d
  switch (tensor_type) {
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    7774:	230a      	movs	r3, #10
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
      return kTfLiteOk;
    7776:	2000      	movs	r0, #0
      *type = kTfLiteFloat64;
    7778:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    777a:	e001      	b.n	7780 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x28>
      *type = kTfLiteFloat32;
    777c:	2301      	movs	r3, #1
    777e:	700b      	strb	r3, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    7780:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
    7782:	230b      	movs	r3, #11
    7784:	e7f7      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteInt16;
    7786:	2307      	movs	r3, #7
    7788:	e7f5      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteInt32;
    778a:	2302      	movs	r3, #2
    778c:	e7f3      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteUInt32;
    778e:	2310      	movs	r3, #16
    7790:	e7f1      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteUInt8;
    7792:	2303      	movs	r3, #3
    7794:	e7ef      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteInt8;
    7796:	2309      	movs	r3, #9
    7798:	e7ed      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteInt64;
    779a:	2304      	movs	r3, #4
    779c:	e7eb      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteUInt64;
    779e:	230d      	movs	r3, #13
    77a0:	e7e9      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteString;
    77a2:	2305      	movs	r3, #5
    77a4:	e7e7      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteBool;
    77a6:	2306      	movs	r3, #6
    77a8:	e7e5      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteComplex64;
    77aa:	2308      	movs	r3, #8
    77ac:	e7e3      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteComplex128;
    77ae:	230c      	movs	r3, #12
    77b0:	e7e1      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteResource;
    77b2:	230e      	movs	r3, #14
    77b4:	e7df      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteVariant;
    77b6:	230f      	movs	r3, #15
    77b8:	e7dd      	b.n	7776 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1e>
      *type = kTfLiteNoType;
    77ba:	2200      	movs	r2, #0
    77bc:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    77be:	4602      	mov	r2, r0
    77c0:	4902      	ldr	r1, [pc, #8]	; (77cc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x74>)
    77c2:	4618      	mov	r0, r3
    77c4:	f006 ff3e 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    77c8:	2001      	movs	r0, #1
    77ca:	e7d9      	b.n	7780 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x28>
    77cc:	0006490a 	.word	0x0006490a

000077d0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    77d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    77d4:	4616      	mov	r6, r2
    77d6:	4605      	mov	r5, r0
    77d8:	4689      	mov	r9, r1
    77da:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    77dc:	f006 fef0 	bl	e5c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    77e0:	6833      	ldr	r3, [r6, #0]
    77e2:	2204      	movs	r2, #4
    77e4:	2124      	movs	r1, #36	; 0x24
    77e6:	4630      	mov	r0, r6
    77e8:	681b      	ldr	r3, [r3, #0]
    77ea:	4798      	blx	r3
    return new (allocated_memory) T();
    77ec:	4604      	mov	r4, r0
    77ee:	b368      	cbz	r0, 784c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    77f0:	2224      	movs	r2, #36	; 0x24
    77f2:	2100      	movs	r1, #0
    77f4:	f008 fb51 	bl	fe9a <memset>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    77f8:	4628      	mov	r0, r5
    77fa:	f006 ff02 	bl	e602 <_ZNK6tflite8Operator20builtin_options_typeEv>
    77fe:	2811      	cmp	r0, #17
    7800:	d119      	bne.n	7836 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
    7802:	4628      	mov	r0, r5
    7804:	f006 feea 	bl	e5dc <_ZNK6tflite8Operator15builtin_optionsEv>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    7808:	4605      	mov	r5, r0
    780a:	b1a0      	cbz	r0, 7836 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
    auto field_offset = GetOptionalFieldOffset(field);
    780c:	2104      	movs	r1, #4
    780e:	f006 fa7a 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7812:	b180      	cbz	r0, 7836 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
    7814:	f855 a000 	ldr.w	sl, [r5, r0]
    auto p = data_ + field_offset;
    7818:	eb05 0800 	add.w	r8, r5, r0
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
    781c:	eb18 000a 	adds.w	r0, r8, sl
    7820:	d009      	beq.n	7836 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
      TF_LITE_ENSURE_STATUS(
    7822:	464a      	mov	r2, r9
    7824:	4621      	mov	r1, r4
    7826:	4b10      	ldr	r3, [pc, #64]	; (7868 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
    7828:	f7ff ff66 	bl	76f8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
    782c:	4605      	mov	r5, r0
    782e:	b940      	cbnz	r0, 7842 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x72>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    7830:	f858 300a 	ldr.w	r3, [r8, sl]
    7834:	6223      	str	r3, [r4, #32]
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
    7836:	2500      	movs	r5, #0
  *builtin_data = params.release();
    7838:	603c      	str	r4, [r7, #0]
}
    783a:	4628      	mov	r0, r5
    783c:	b002      	add	sp, #8
    783e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
    7842:	4621      	mov	r1, r4
    7844:	4630      	mov	r0, r6
    7846:	f006 fec6 	bl	e5d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
    784a:	e7f6      	b.n	783a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    784c:	4b07      	ldr	r3, [pc, #28]	; (786c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
    784e:	4649      	mov	r1, r9
    7850:	9301      	str	r3, [sp, #4]
    7852:	f240 63c3 	movw	r3, #1731	; 0x6c3
    7856:	4648      	mov	r0, r9
    7858:	9300      	str	r3, [sp, #0]
    785a:	4a05      	ldr	r2, [pc, #20]	; (7870 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>)
    785c:	4b05      	ldr	r3, [pc, #20]	; (7874 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>)
    785e:	f006 feff 	bl	e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    7862:	2501      	movs	r5, #1
    7864:	e7e9      	b.n	783a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
    7866:	bf00      	nop
    7868:	0006492e 	.word	0x0006492e
    786c:	0006498e 	.word	0x0006498e
    7870:	00064540 	.word	0x00064540
    7874:	00064936 	.word	0x00064936

00007878 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    7878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    787a:	4614      	mov	r4, r2
    787c:	4605      	mov	r5, r0
    787e:	460e      	mov	r6, r1
    7880:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    7882:	f006 fe9d 	bl	e5c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    7886:	6823      	ldr	r3, [r4, #0]
    7888:	4620      	mov	r0, r4
    788a:	2204      	movs	r2, #4
    788c:	2118      	movs	r1, #24
    788e:	681b      	ldr	r3, [r3, #0]
    7890:	4798      	blx	r3
    return new (allocated_memory) T();
    7892:	4604      	mov	r4, r0
    7894:	2800      	cmp	r0, #0
    7896:	d03d      	beq.n	7914 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    7898:	2218      	movs	r2, #24
    789a:	2100      	movs	r1, #0
    789c:	f008 fafd 	bl	fe9a <memset>
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    78a0:	4628      	mov	r0, r5
    78a2:	f006 feae 	bl	e602 <_ZNK6tflite8Operator20builtin_options_typeEv>
    78a6:	2801      	cmp	r0, #1
    78a8:	4606      	mov	r6, r0
    78aa:	d12f      	bne.n	790c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    78ac:	4628      	mov	r0, r5
    78ae:	f006 fe95 	bl	e5dc <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
    78b2:	4605      	mov	r5, r0
    78b4:	b350      	cbz	r0, 790c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    78b6:	2200      	movs	r2, #0
    78b8:	2104      	movs	r1, #4
    78ba:	f006 feb1 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
    78be:	b2c0      	uxtb	r0, r0
    78c0:	f006 fe76 	bl	e5b0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
    78c4:	2200      	movs	r2, #0
    78c6:	2106      	movs	r1, #6
    78c8:	7020      	strb	r0, [r4, #0]
    78ca:	4628      	mov	r0, r5
    78cc:	f006 fe9f 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
    78d0:	2200      	movs	r2, #0
    78d2:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
    78d4:	6060      	str	r0, [r4, #4]
    78d6:	4628      	mov	r0, r5
    78d8:	f006 fe99 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    78dc:	2200      	movs	r2, #0
    78de:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
    78e0:	60a0      	str	r0, [r4, #8]
    78e2:	4628      	mov	r0, r5
    78e4:	f006 fe9c 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    78e8:	b2c2      	uxtb	r2, r0
  switch (activation) {
    78ea:	1e53      	subs	r3, r2, #1
    78ec:	2b04      	cmp	r3, #4
    78ee:	bf88      	it	hi
    78f0:	2200      	movhi	r2, #0
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
    78f2:	210c      	movs	r1, #12
    params->activation =
    78f4:	7322      	strb	r2, [r4, #12]
    78f6:	4628      	mov	r0, r5
    78f8:	4632      	mov	r2, r6
    78fa:	f006 fe88 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
    78fe:	4632      	mov	r2, r6
    params->dilation_width_factor = schema_params->dilation_w_factor();
    7900:	6120      	str	r0, [r4, #16]
    7902:	210e      	movs	r1, #14
    7904:	4628      	mov	r0, r5
    7906:	f006 fe82 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    790a:	6160      	str	r0, [r4, #20]
  return kTfLiteOk;
    790c:	2000      	movs	r0, #0
  *builtin_data = params.release();
    790e:	603c      	str	r4, [r7, #0]
}
    7910:	b003      	add	sp, #12
    7912:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    7914:	4b06      	ldr	r3, [pc, #24]	; (7930 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
    7916:	4631      	mov	r1, r6
    7918:	9301      	str	r3, [sp, #4]
    791a:	f240 434d 	movw	r3, #1101	; 0x44d
    791e:	4630      	mov	r0, r6
    7920:	9300      	str	r3, [sp, #0]
    7922:	4a04      	ldr	r2, [pc, #16]	; (7934 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
    7924:	4b04      	ldr	r3, [pc, #16]	; (7938 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
    7926:	f006 fe9b 	bl	e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    792a:	2001      	movs	r0, #1
    792c:	e7f0      	b.n	7910 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    792e:	bf00      	nop
    7930:	0006498e 	.word	0x0006498e
    7934:	00064540 	.word	0x00064540
    7938:	00064936 	.word	0x00064936

0000793c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    793c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    793e:	4614      	mov	r4, r2
    7940:	4605      	mov	r5, r0
    7942:	460e      	mov	r6, r1
    7944:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    7946:	f006 fe3b 	bl	e5c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    794a:	6823      	ldr	r3, [r4, #0]
    794c:	4620      	mov	r0, r4
    794e:	2204      	movs	r2, #4
    7950:	211c      	movs	r1, #28
    7952:	681b      	ldr	r3, [r3, #0]
    7954:	4798      	blx	r3
    return new (allocated_memory) T();
    7956:	4604      	mov	r4, r0
    7958:	2800      	cmp	r0, #0
    795a:	d042      	beq.n	79e2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    795c:	221c      	movs	r2, #28
    795e:	2100      	movs	r1, #0
    7960:	f008 fa9b 	bl	fe9a <memset>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    7964:	4628      	mov	r0, r5
    7966:	f006 fe4c 	bl	e602 <_ZNK6tflite8Operator20builtin_options_typeEv>
    796a:	2802      	cmp	r0, #2
    796c:	d135      	bne.n	79da <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    796e:	4628      	mov	r0, r5
    7970:	f006 fe34 	bl	e5dc <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
    7974:	4605      	mov	r5, r0
    7976:	b380      	cbz	r0, 79da <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    7978:	2200      	movs	r2, #0
    797a:	2104      	movs	r1, #4
    797c:	f006 fe50 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
    7980:	b2c0      	uxtb	r0, r0
    7982:	f006 fe15 	bl	e5b0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
    7986:	2200      	movs	r2, #0
    7988:	2106      	movs	r1, #6
    798a:	7020      	strb	r0, [r4, #0]
    798c:	4628      	mov	r0, r5
    798e:	f006 fe3e 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
    7992:	2200      	movs	r2, #0
    7994:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
    7996:	6060      	str	r0, [r4, #4]
    7998:	4628      	mov	r0, r5
    799a:	f006 fe38 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
    799e:	2200      	movs	r2, #0
    79a0:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
    79a2:	60a0      	str	r0, [r4, #8]
    79a4:	4628      	mov	r0, r5
    79a6:	f006 fe32 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    79aa:	2200      	movs	r2, #0
    79ac:	210c      	movs	r1, #12
    params->depth_multiplier = schema_params->depth_multiplier();
    79ae:	60e0      	str	r0, [r4, #12]
    79b0:	4628      	mov	r0, r5
    79b2:	f006 fe35 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    79b6:	b2c0      	uxtb	r0, r0
  switch (activation) {
    79b8:	1e43      	subs	r3, r0, #1
    79ba:	2b04      	cmp	r3, #4
    79bc:	bf88      	it	hi
    79be:	2000      	movhi	r0, #0
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
    79c0:	2201      	movs	r2, #1
    79c2:	210e      	movs	r1, #14
    params->activation =
    79c4:	7420      	strb	r0, [r4, #16]
    79c6:	4628      	mov	r0, r5
    79c8:	f006 fe21 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
    79cc:	2201      	movs	r2, #1
    params->dilation_width_factor = schema_params->dilation_w_factor();
    79ce:	6160      	str	r0, [r4, #20]
    79d0:	2110      	movs	r1, #16
    79d2:	4628      	mov	r0, r5
    79d4:	f006 fe1b 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    79d8:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    79da:	2000      	movs	r0, #0
  *builtin_data = params.release();
    79dc:	603c      	str	r4, [r7, #0]
}
    79de:	b003      	add	sp, #12
    79e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    79e2:	4b06      	ldr	r3, [pc, #24]	; (79fc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
    79e4:	4631      	mov	r1, r6
    79e6:	9301      	str	r3, [sp, #4]
    79e8:	f240 43a2 	movw	r3, #1186	; 0x4a2
    79ec:	4630      	mov	r0, r6
    79ee:	9300      	str	r3, [sp, #0]
    79f0:	4a03      	ldr	r2, [pc, #12]	; (7a00 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
    79f2:	4b04      	ldr	r3, [pc, #16]	; (7a04 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>)
    79f4:	f006 fe34 	bl	e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    79f8:	2001      	movs	r0, #1
    79fa:	e7f0      	b.n	79de <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    79fc:	0006498e 	.word	0x0006498e
    7a00:	00064540 	.word	0x00064540
    7a04:	00064936 	.word	0x00064936

00007a08 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
    7a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a0c:	4617      	mov	r7, r2
    7a0e:	4605      	mov	r5, r0
    7a10:	4688      	mov	r8, r1
    7a12:	4699      	mov	r9, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    7a14:	f006 fdd4 	bl	e5c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    7a18:	683b      	ldr	r3, [r7, #0]
    7a1a:	2201      	movs	r2, #1
    7a1c:	2104      	movs	r1, #4
    7a1e:	4638      	mov	r0, r7
    7a20:	681b      	ldr	r3, [r3, #0]
    7a22:	4798      	blx	r3
    return new (allocated_memory) T();
    7a24:	4604      	mov	r4, r0
    7a26:	2800      	cmp	r0, #0
    7a28:	d045      	beq.n	7ab6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    7a2a:	f04f 0b00 	mov.w	fp, #0
    7a2e:	f8c0 b000 	str.w	fp, [r0]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    7a32:	4628      	mov	r0, r5
    7a34:	f006 fde5 	bl	e602 <_ZNK6tflite8Operator20builtin_options_typeEv>
    7a38:	2808      	cmp	r0, #8
    7a3a:	4682      	mov	sl, r0
    7a3c:	d135      	bne.n	7aaa <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    7a3e:	4628      	mov	r0, r5
    7a40:	f006 fdcc 	bl	e5dc <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
    7a44:	4605      	mov	r5, r0
    7a46:	b380      	cbz	r0, 7aaa <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    7a48:	465a      	mov	r2, fp
    7a4a:	2104      	movs	r1, #4
    7a4c:	f006 fde8 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    7a50:	b2c6      	uxtb	r6, r0
  switch (activation) {
    7a52:	1e73      	subs	r3, r6, #1
    7a54:	2b04      	cmp	r3, #4
    7a56:	bf88      	it	hi
    7a58:	465e      	movhi	r6, fp
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    7a5a:	465a      	mov	r2, fp
    7a5c:	4651      	mov	r1, sl
    7a5e:	4628      	mov	r0, r5
    params->activation =
    7a60:	7026      	strb	r6, [r4, #0]
    7a62:	f006 fdc5 	bl	e5f0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
    7a66:	ebb0 000b 	subs.w	r0, r0, fp
    7a6a:	bf18      	it	ne
    7a6c:	2001      	movne	r0, #1
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    7a6e:	465a      	mov	r2, fp
    7a70:	210a      	movs	r1, #10
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    7a72:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    7a74:	4628      	mov	r0, r5
    7a76:	f006 fdbb 	bl	e5f0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
    7a7a:	ebb0 000b 	subs.w	r0, r0, fp
    7a7e:	bf18      	it	ne
    7a80:	2001      	movne	r0, #1
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
    7a82:	465a      	mov	r2, fp
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    7a84:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
    7a86:	2106      	movs	r1, #6
    7a88:	4628      	mov	r0, r5
    7a8a:	f006 fdc9 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
    7a8e:	b158      	cbz	r0, 7aa8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    7a90:	2801      	cmp	r0, #1
    7a92:	d009      	beq.n	7aa8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter,
    7a94:	490e      	ldr	r1, [pc, #56]	; (7ad0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>)
    7a96:	4640      	mov	r0, r8
    7a98:	f006 fdd4 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    7a9c:	4621      	mov	r1, r4
    7a9e:	4638      	mov	r0, r7
    7aa0:	f006 fd99 	bl	e5d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    7aa4:	2001      	movs	r0, #1
    7aa6:	e003      	b.n	7ab0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
        params->weights_format =
    7aa8:	7060      	strb	r0, [r4, #1]
  return kTfLiteOk;
    7aaa:	2000      	movs	r0, #0
  *builtin_data = params.release();
    7aac:	f8c9 4000 	str.w	r4, [r9]
}
    7ab0:	b003      	add	sp, #12
    7ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    7ab6:	4b07      	ldr	r3, [pc, #28]	; (7ad4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>)
    7ab8:	4641      	mov	r1, r8
    7aba:	9301      	str	r3, [sp, #4]
    7abc:	f240 531d 	movw	r3, #1309	; 0x51d
    7ac0:	4640      	mov	r0, r8
    7ac2:	9300      	str	r3, [sp, #0]
    7ac4:	4a04      	ldr	r2, [pc, #16]	; (7ad8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd0>)
    7ac6:	4b05      	ldr	r3, [pc, #20]	; (7adc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>)
    7ac8:	f006 fdca 	bl	e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    7acc:	e7ea      	b.n	7aa4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    7ace:	bf00      	nop
    7ad0:	000649a0 	.word	0x000649a0
    7ad4:	0006498e 	.word	0x0006498e
    7ad8:	00064540 	.word	0x00064540
    7adc:	00064936 	.word	0x00064936

00007ae0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    7ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7ae2:	4614      	mov	r4, r2
    7ae4:	4605      	mov	r5, r0
    7ae6:	460f      	mov	r7, r1
    7ae8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    7aea:	f006 fd69 	bl	e5c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    7aee:	6823      	ldr	r3, [r4, #0]
    7af0:	4620      	mov	r0, r4
    7af2:	2204      	movs	r2, #4
    7af4:	2128      	movs	r1, #40	; 0x28
    7af6:	681b      	ldr	r3, [r3, #0]
    7af8:	4798      	blx	r3
    return new (allocated_memory) T();
    7afa:	4604      	mov	r4, r0
    7afc:	2800      	cmp	r0, #0
    7afe:	d03c      	beq.n	7b7a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9a>
    7b00:	2228      	movs	r2, #40	; 0x28
    7b02:	2100      	movs	r1, #0
    7b04:	f008 f9c9 	bl	fe9a <memset>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    7b08:	4628      	mov	r0, r5
    7b0a:	f006 fd7a 	bl	e602 <_ZNK6tflite8Operator20builtin_options_typeEv>
    7b0e:	2805      	cmp	r0, #5
    7b10:	d12f      	bne.n	7b72 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    7b12:	4628      	mov	r0, r5
    7b14:	f006 fd62 	bl	e5dc <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
    7b18:	4605      	mov	r5, r0
    7b1a:	b350      	cbz	r0, 7b72 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    7b1c:	2200      	movs	r2, #0
    7b1e:	2104      	movs	r1, #4
    7b20:	f006 fd7e 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
    7b24:	b2c0      	uxtb	r0, r0
    7b26:	f006 fd43 	bl	e5b0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
    7b2a:	2200      	movs	r2, #0
    7b2c:	2106      	movs	r1, #6
    7b2e:	7020      	strb	r0, [r4, #0]
    7b30:	4628      	mov	r0, r5
    7b32:	f006 fd6c 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
    7b36:	2200      	movs	r2, #0
    7b38:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
    7b3a:	6060      	str	r0, [r4, #4]
    7b3c:	4628      	mov	r0, r5
    7b3e:	f006 fd66 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
    7b42:	2200      	movs	r2, #0
    7b44:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
    7b46:	60a0      	str	r0, [r4, #8]
    7b48:	4628      	mov	r0, r5
    7b4a:	f006 fd60 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
    7b4e:	2200      	movs	r2, #0
    7b50:	210c      	movs	r1, #12
    params->filter_width = schema_params->filter_width();
    7b52:	60e0      	str	r0, [r4, #12]
    7b54:	4628      	mov	r0, r5
    7b56:	f006 fd5a 	bl	e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    7b5a:	2200      	movs	r2, #0
    params->filter_height = schema_params->filter_height();
    7b5c:	6120      	str	r0, [r4, #16]
    7b5e:	210e      	movs	r1, #14
    7b60:	4628      	mov	r0, r5
    7b62:	f006 fd5d 	bl	e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    7b66:	b2c0      	uxtb	r0, r0
  switch (activation) {
    7b68:	1e43      	subs	r3, r0, #1
    7b6a:	2b04      	cmp	r3, #4
    7b6c:	bf88      	it	hi
    7b6e:	2000      	movhi	r0, #0
    params->activation =
    7b70:	7520      	strb	r0, [r4, #20]
  return kTfLiteOk;
    7b72:	2000      	movs	r0, #0
  *builtin_data = params.release();
    7b74:	6034      	str	r4, [r6, #0]
}
    7b76:	b003      	add	sp, #12
    7b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    7b7a:	4b06      	ldr	r3, [pc, #24]	; (7b94 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
    7b7c:	4639      	mov	r1, r7
    7b7e:	9301      	str	r3, [sp, #4]
    7b80:	f240 6361 	movw	r3, #1633	; 0x661
    7b84:	4638      	mov	r0, r7
    7b86:	9300      	str	r3, [sp, #0]
    7b88:	4a03      	ldr	r2, [pc, #12]	; (7b98 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
    7b8a:	4b04      	ldr	r3, [pc, #16]	; (7b9c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
    7b8c:	f006 fd68 	bl	e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    7b90:	2001      	movs	r0, #1
    7b92:	e7f0      	b.n	7b76 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    7b94:	0006498e 	.word	0x0006498e
    7b98:	00064540 	.word	0x00064540
    7b9c:	00064936 	.word	0x00064936

00007ba0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    7ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7ba2:	4614      	mov	r4, r2
    7ba4:	4605      	mov	r5, r0
    7ba6:	460e      	mov	r6, r1
    7ba8:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    7baa:	f006 fd09 	bl	e5c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    7bae:	2204      	movs	r2, #4
    7bb0:	6823      	ldr	r3, [r4, #0]
    7bb2:	4620      	mov	r0, r4
    7bb4:	4611      	mov	r1, r2
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	4798      	blx	r3
    return new (allocated_memory) T();
    7bba:	4604      	mov	r4, r0
    7bbc:	b198      	cbz	r0, 7be6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    7bbe:	2600      	movs	r6, #0
    7bc0:	6006      	str	r6, [r0, #0]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    7bc2:	4628      	mov	r0, r5
    7bc4:	f006 fd1d 	bl	e602 <_ZNK6tflite8Operator20builtin_options_typeEv>
    7bc8:	2809      	cmp	r0, #9
    7bca:	d108      	bne.n	7bde <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
    7bcc:	4628      	mov	r0, r5
    7bce:	f006 fd05 	bl	e5dc <_ZNK6tflite8Operator15builtin_optionsEv>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    7bd2:	b120      	cbz	r0, 7bde <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
    return GetField<float>(VT_BETA, 0.0f);
    7bd4:	4632      	mov	r2, r6
    7bd6:	2104      	movs	r1, #4
    7bd8:	f006 fd2b 	bl	e632 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
    7bdc:	6020      	str	r0, [r4, #0]
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
    7bde:	2000      	movs	r0, #0
  *builtin_data = params.release();
    7be0:	603c      	str	r4, [r7, #0]
}
    7be2:	b003      	add	sp, #12
    7be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    7be6:	4b06      	ldr	r3, [pc, #24]	; (7c00 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>)
    7be8:	4631      	mov	r1, r6
    7bea:	9301      	str	r3, [sp, #4]
    7bec:	f240 734c 	movw	r3, #1868	; 0x74c
    7bf0:	4630      	mov	r0, r6
    7bf2:	9300      	str	r3, [sp, #0]
    7bf4:	4a03      	ldr	r2, [pc, #12]	; (7c04 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
    7bf6:	4b04      	ldr	r3, [pc, #16]	; (7c08 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
    7bf8:	f006 fd32 	bl	e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    7bfc:	2001      	movs	r0, #1
    7bfe:	e7f0      	b.n	7be2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x42>
    7c00:	0006498e 	.word	0x0006498e
    7c04:	00064540 	.word	0x00064540
    7c08:	00064936 	.word	0x00064936

00007c0c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    7c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c10:	461f      	mov	r7, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    7c12:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    7c14:	4604      	mov	r4, r0
  *registration = nullptr;
    7c16:	603b      	str	r3, [r7, #0]
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    7c18:	4691      	mov	r9, r2
    7c1a:	460e      	mov	r6, r1
  auto builtin_code = GetBuiltinCode(opcode);
    7c1c:	f006 fd2e 	bl	e67c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    return data_ - ReadScalar<soffset_t>(data_);
    7c20:	6823      	ldr	r3, [r4, #0]
    7c22:	4605      	mov	r5, r0
    7c24:	1ae3      	subs	r3, r4, r3
    7c26:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c28:	2a08      	cmp	r2, #8
    7c2a:	d90d      	bls.n	7c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3c>
    7c2c:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7c2e:	b159      	cbz	r1, 7c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3c>
    7c30:	f854 8001 	ldr.w	r8, [r4, r1]
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    7c34:	2d91      	cmp	r5, #145	; 0x91
    7c36:	d90a      	bls.n	7c4e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
    7c38:	462a      	mov	r2, r5
    7c3a:	4648      	mov	r0, r9
    7c3c:	491a      	ldr	r1, [pc, #104]	; (7ca8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>)
    7c3e:	f006 fd01 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    }
  } else if (!opcode->custom_code()) {
    TF_LITE_REPORT_ERROR(
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
    7c42:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    7c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7c48:	f04f 0801 	mov.w	r8, #1
    7c4c:	e7f2      	b.n	7c34 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    7c4e:	2d20      	cmp	r5, #32
    7c50:	d010      	beq.n	7c74 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x68>
    *registration = op_resolver.FindOp(builtin_code, version);
    7c52:	6833      	ldr	r3, [r6, #0]
    7c54:	4642      	mov	r2, r8
    7c56:	4629      	mov	r1, r5
    7c58:	4630      	mov	r0, r6
    7c5a:	681b      	ldr	r3, [r3, #0]
    7c5c:	4798      	blx	r3
    7c5e:	6038      	str	r0, [r7, #0]
    if (*registration == nullptr) {
    7c60:	bb00      	cbnz	r0, 7ca4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x98>
      TF_LITE_REPORT_ERROR(
    7c62:	4a12      	ldr	r2, [pc, #72]	; (7cac <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa0>)
    7c64:	4643      	mov	r3, r8
    7c66:	4648      	mov	r0, r9
    7c68:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    7c6c:	4910      	ldr	r1, [pc, #64]	; (7cb0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
    7c6e:	f006 fce9 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    7c72:	e7e6      	b.n	7c42 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c74:	2a06      	cmp	r2, #6
    7c76:	d905      	bls.n	7c84 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x78>
    7c78:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
    7c7a:	18e1      	adds	r1, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c7c:	b113      	cbz	r3, 7c84 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x78>
    7c7e:	58e3      	ldr	r3, [r4, r3]
  } else if (!opcode->custom_code()) {
    7c80:	18c9      	adds	r1, r1, r3
    7c82:	d104      	bne.n	7c8e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x82>
    TF_LITE_REPORT_ERROR(
    7c84:	4648      	mov	r0, r9
    7c86:	490b      	ldr	r1, [pc, #44]	; (7cb4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
    7c88:	f006 fcdc 	bl	e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    7c8c:	e7d9      	b.n	7c42 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    *registration = op_resolver.FindOp(name, version);
    7c8e:	6833      	ldr	r3, [r6, #0]
    7c90:	4642      	mov	r2, r8
    7c92:	4630      	mov	r0, r6
    7c94:	685b      	ldr	r3, [r3, #4]
    7c96:	3104      	adds	r1, #4
    7c98:	4798      	blx	r3
    7c9a:	6038      	str	r0, [r7, #0]
    status = kTfLiteError;
    7c9c:	fab0 f080 	clz	r0, r0
    7ca0:	0940      	lsrs	r0, r0, #5
    7ca2:	e7cf      	b.n	7c44 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
  TfLiteStatus status = kTfLiteOk;
    7ca4:	2000      	movs	r0, #0
    7ca6:	e7cd      	b.n	7c44 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
    7ca8:	000649ca 	.word	0x000649ca
    7cac:	000626c4 	.word	0x000626c4
    7cb0:	00064a1e 	.word	0x00064a1e
    7cb4:	00064ac0 	.word	0x00064ac0

00007cb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    7cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cbc:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    7cbe:	6943      	ldr	r3, [r0, #20]
    int8_t* output_data) {
    7cc0:	b0a1      	sub	sp, #132	; 0x84
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    7cc2:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
    7cc4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8_t* output_data) {
    7cc8:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_width = params.stride_width;
    7ccc:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    7cce:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8_t* output_data) {
    7cd2:	9f2b      	ldr	r7, [sp, #172]	; 0xac
  const int stride_height = params.stride_height;
    7cd4:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    7cd6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8_t* output_data) {
    7cda:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
  const int dilation_width_factor = params.dilation_width_factor;
    7cde:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    7ce0:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    7ce4:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    7ce6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    7cea:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    7cec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    7cf0:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
    7cf2:	69c3      	ldr	r3, [r0, #28]
    7cf4:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    7cf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7cf8:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
    7cfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    7cfc:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    7cfe:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    7d02:	4293      	cmp	r3, r2
    7d04:	dd01      	ble.n	7d0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
    7d06:	f008 f8a2 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    7d0a:	f8d8 3000 	ldr.w	r3, [r8]
    7d0e:	2b04      	cmp	r3, #4
    7d10:	d1f9      	bne.n	7d06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    7d12:	683b      	ldr	r3, [r7, #0]
    7d14:	2b04      	cmp	r3, #4
    7d16:	d1f6      	bne.n	7d06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    7d18:	f8d9 3000 	ldr.w	r3, [r9]
    7d1c:	2b04      	cmp	r3, #4
    7d1e:	d1f2      	bne.n	7d06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    7d20:	2300      	movs	r3, #0
    7d22:	464a      	mov	r2, r9
    7d24:	4619      	mov	r1, r3
    7d26:	4640      	mov	r0, r8
    7d28:	f006 fd2e 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    7d2c:	2303      	movs	r3, #3
    7d2e:	463a      	mov	r2, r7
    7d30:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    7d32:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    7d34:	4640      	mov	r0, r8
    7d36:	f006 fd27 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    7d3a:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    7d3c:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    7d3e:	464a      	mov	r2, r9
    7d40:	2100      	movs	r1, #0
    7d42:	4638      	mov	r0, r7
    7d44:	f006 fd20 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    7d48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    7d4a:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
    7d4c:	b12b      	cbz	r3, 7d5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    7d4e:	982d      	ldr	r0, [sp, #180]	; 0xb4
    7d50:	f006 fce8 	bl	e724 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    7d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d56:	4298      	cmp	r0, r3
    7d58:	d1d5      	bne.n	7d06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
    7d5a:	2101      	movs	r1, #1
    7d5c:	4640      	mov	r0, r8
    7d5e:	f006 fcd0 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    7d62:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    7d64:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
    7d66:	4640      	mov	r0, r8
    7d68:	f006 fccb 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    7d6c:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    7d6e:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
    7d70:	4638      	mov	r0, r7
    7d72:	f006 fcc6 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    7d76:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    7d78:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
    7d7a:	4638      	mov	r0, r7
    7d7c:	f006 fcc1 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    7d80:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    7d82:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
    7d84:	4648      	mov	r0, r9
    7d86:	f006 fcbc 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    7d8a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    7d8c:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
    7d8e:	4648      	mov	r0, r9
    7d90:	f006 fcb7 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
    7d94:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
    7d98:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
    7d9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7d9c:	459b      	cmp	fp, r3
    7d9e:	f280 80e6 	bge.w	7f6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b6>
    7da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7da4:	425b      	negs	r3, r3
    7da6:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
    7da8:	2300      	movs	r3, #0
    7daa:	9304      	str	r3, [sp, #16]
    7dac:	9b04      	ldr	r3, [sp, #16]
    7dae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7db0:	4293      	cmp	r3, r2
    7db2:	f280 80d9 	bge.w	7f68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    7db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7db8:	425b      	negs	r3, r3
    7dba:	9308      	str	r3, [sp, #32]
    7dbc:	2300      	movs	r3, #0
    7dbe:	9305      	str	r3, [sp, #20]
    7dc0:	9b05      	ldr	r3, [sp, #20]
    7dc2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7dc4:	4293      	cmp	r3, r2
    7dc6:	f280 80c7 	bge.w	7f58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    7dca:	2500      	movs	r5, #0
    7dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7dce:	429d      	cmp	r5, r3
    7dd0:	f280 80ba 	bge.w	7f48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x290>
          int32_t acc = 0;
    7dd4:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    7dd6:	9e09      	ldr	r6, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    7dd8:	9406      	str	r4, [sp, #24]
    7dda:	9b06      	ldr	r3, [sp, #24]
    7ddc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    7dde:	4293      	cmp	r3, r2
    7de0:	da40      	bge.n	7e64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    7de2:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    7de4:	f8dd a020 	ldr.w	sl, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    7de8:	9307      	str	r3, [sp, #28]
    7dea:	9b07      	ldr	r3, [sp, #28]
    7dec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7dee:	4293      	cmp	r3, r2
    7df0:	da32      	bge.n	7e58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    7df2:	f1ba 0f00 	cmp.w	sl, #0
    7df6:	db29      	blt.n	7e4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    7df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7dfa:	4553      	cmp	r3, sl
    7dfc:	dd26      	ble.n	7e4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    7dfe:	2e00      	cmp	r6, #0
    7e00:	db24      	blt.n	7e4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    7e02:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7e04:	42b3      	cmp	r3, r6
    7e06:	dd21      	ble.n	7e4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    7e08:	2300      	movs	r3, #0
    7e0a:	9302      	str	r3, [sp, #8]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    7e0c:	9b02      	ldr	r3, [sp, #8]
    7e0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    7e10:	4293      	cmp	r3, r2
    7e12:	da1b      	bge.n	7e4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    7e14:	4632      	mov	r2, r6
    7e16:	4659      	mov	r1, fp
    7e18:	9300      	str	r3, [sp, #0]
    7e1a:	4640      	mov	r0, r8
    7e1c:	4653      	mov	r3, sl
    7e1e:	f006 fc91 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
    7e22:	9b02      	ldr	r3, [sp, #8]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    7e24:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
    7e26:	9300      	str	r3, [sp, #0]
    7e28:	4629      	mov	r1, r5
    7e2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7e2e:	4638      	mov	r0, r7
    7e30:	f006 fc88 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    7e34:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7e36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    7e38:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
    7e3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7e3c:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    7e3e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    7e40:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
    7e42:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    7e46:	9b02      	ldr	r3, [sp, #8]
    7e48:	3301      	adds	r3, #1
    7e4a:	e7de      	b.n	7e0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    7e4c:	9b07      	ldr	r3, [sp, #28]
    7e4e:	3301      	adds	r3, #1
    7e50:	9307      	str	r3, [sp, #28]
    7e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7e54:	449a      	add	sl, r3
    7e56:	e7c8      	b.n	7dea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x132>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    7e58:	9b06      	ldr	r3, [sp, #24]
    7e5a:	3301      	adds	r3, #1
    7e5c:	9306      	str	r3, [sp, #24]
    7e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7e60:	441e      	add	r6, r3
    7e62:	e7ba      	b.n	7dda <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
              }
            }
          }

          if (bias_data) {
    7e64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    7e66:	b113      	cbz	r3, 7e6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
    7e68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    7e6c:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
    7e6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    7e70:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    7e74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7e76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    7e7a:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    7e7e:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    7e80:	fa04 f202 	lsl.w	r2, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
    7e84:	bfcc      	ite	gt
    7e86:	2000      	movgt	r0, #0
    7e88:	4240      	negle	r0, r0
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7e8a:	4291      	cmp	r1, r2
    7e8c:	d12e      	bne.n	7eec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    7e8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    7e92:	425e      	negs	r6, r3
    7e94:	415e      	adcs	r6, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
    7e96:	fb82 2301 	smull	r2, r3, r2, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    7e9a:	2a00      	cmp	r2, #0
    7e9c:	f173 0100 	sbcs.w	r1, r3, #0
    7ea0:	4934      	ldr	r1, [pc, #208]	; (7f74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>)
    7ea2:	bfa8      	it	ge
    7ea4:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    7ea8:	bb16      	cbnz	r6, 7ef0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x238>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    7eaa:	1852      	adds	r2, r2, r1
    7eac:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    7eb0:	461c      	mov	r4, r3
    7eb2:	2a00      	cmp	r2, #0
    7eb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    7eb8:	f174 0300 	sbcs.w	r3, r4, #0
    7ebc:	da08      	bge.n	7ed0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
    7ebe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    7ec2:	9a02      	ldr	r2, [sp, #8]
    7ec4:	18d3      	adds	r3, r2, r3
    7ec6:	9302      	str	r3, [sp, #8]
    7ec8:	9b03      	ldr	r3, [sp, #12]
    7eca:	f143 0300 	adc.w	r3, r3, #0
    7ece:	9303      	str	r3, [sp, #12]
    7ed0:	9b02      	ldr	r3, [sp, #8]
    7ed2:	0fda      	lsrs	r2, r3, #31
    7ed4:	9b03      	ldr	r3, [sp, #12]
    7ed6:	ea42 0343 	orr.w	r3, r2, r3, lsl #1

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    7eda:	2800      	cmp	r0, #0
    7edc:	da0b      	bge.n	7ef6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23e>
    7ede:	f44f 71b3 	mov.w	r1, #358	; 0x166
    7ee2:	4b25      	ldr	r3, [pc, #148]	; (7f78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c0>)
    7ee4:	4a25      	ldr	r2, [pc, #148]	; (7f7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>)
  assert(exponent <= 31);
    7ee6:	4826      	ldr	r0, [pc, #152]	; (7f80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>)
    7ee8:	f003 fd76 	bl	b9d8 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    7eec:	2600      	movs	r6, #0
    7eee:	e7d2      	b.n	7e96 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
    7ef0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    7ef4:	e7f1      	b.n	7eda <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
  assert(exponent <= 31);
    7ef6:	281f      	cmp	r0, #31
    7ef8:	dd04      	ble.n	7f04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
    7efa:	f240 1167 	movw	r1, #359	; 0x167
    7efe:	4b21      	ldr	r3, [pc, #132]	; (7f84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2cc>)
    7f00:	4a1e      	ldr	r2, [pc, #120]	; (7f7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>)
    7f02:	e7f0      	b.n	7ee6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    7f04:	2201      	movs	r2, #1
    7f06:	4082      	lsls	r2, r0
    7f08:	3a01      	subs	r2, #1
  return a & b;
    7f0a:	ea02 0103 	and.w	r1, r2, r3
  return a >> offset;
    7f0e:	1052      	asrs	r2, r2, #1
  return a + b;
    7f10:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
    7f14:	fa43 f400 	asr.w	r4, r3, r0
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
    7f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    7f1a:	9500      	str	r5, [sp, #0]
          acc += output_offset;
    7f1c:	441c      	add	r4, r3
    7f1e:	4291      	cmp	r1, r2
    7f20:	bfc8      	it	gt
    7f22:	3401      	addgt	r4, #1
    7f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    7f26:	4659      	mov	r1, fp
    7f28:	429c      	cmp	r4, r3
    7f2a:	bfb8      	it	lt
    7f2c:	461c      	movlt	r4, r3
    7f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f30:	4648      	mov	r0, r9
    7f32:	429c      	cmp	r4, r3
    7f34:	bfa8      	it	ge
    7f36:	461c      	movge	r4, r3
    7f38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7f3c:	f006 fc02 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    7f40:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    7f42:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    7f44:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    7f46:	e741      	b.n	7dcc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x114>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    7f48:	9b05      	ldr	r3, [sp, #20]
    7f4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7f4c:	3301      	adds	r3, #1
    7f4e:	9305      	str	r3, [sp, #20]
    7f50:	9b08      	ldr	r3, [sp, #32]
    7f52:	4413      	add	r3, r2
    7f54:	9308      	str	r3, [sp, #32]
    7f56:	e733      	b.n	7dc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x108>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    7f58:	9b04      	ldr	r3, [sp, #16]
    7f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7f5c:	3301      	adds	r3, #1
    7f5e:	9304      	str	r3, [sp, #16]
    7f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f62:	4413      	add	r3, r2
    7f64:	9309      	str	r3, [sp, #36]	; 0x24
    7f66:	e721      	b.n	7dac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf4>
  for (int batch = 0; batch < batches; ++batch) {
    7f68:	f10b 0b01 	add.w	fp, fp, #1
    7f6c:	e715      	b.n	7d9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe2>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
    7f6e:	b021      	add	sp, #132	; 0x84
    7f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f74:	c0000001 	.word	0xc0000001
    7f78:	00064af7 	.word	0x00064af7
    7f7c:	00064b05 	.word	0x00064b05
    7f80:	00064b5a 	.word	0x00064b5a
    7f84:	00064bb3 	.word	0x00064bb3

00007f88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    7f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f8c:	461c      	mov	r4, r3
  // Get parameters.
  const int stride_width = params.stride_width;
    7f8e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int16_t* output_data) {
    7f92:	b0a3      	sub	sp, #140	; 0x8c
  const int stride_width = params.stride_width;
    7f94:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_height = params.stride_height;
    7f96:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int16_t* output_data) {
    7f9a:	e9cd 1220 	strd	r1, r2, [sp, #128]	; 0x80
  const int stride_height = params.stride_height;
    7f9e:	9312      	str	r3, [sp, #72]	; 0x48
  const int dilation_width_factor = params.dilation_width_factor;
    7fa0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int16_t* output_data) {
    7fa4:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  const int dilation_width_factor = params.dilation_width_factor;
    7fa8:	9313      	str	r3, [sp, #76]	; 0x4c
  const int dilation_height_factor = params.dilation_height_factor;
    7faa:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    int16_t* output_data) {
    7fae:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
  const int dilation_height_factor = params.dilation_height_factor;
    7fb2:	9314      	str	r3, [sp, #80]	; 0x50
  const int pad_width = params.padding_values.width;
    7fb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    7fb8:	9316      	str	r3, [sp, #88]	; 0x58
  const int pad_height = params.padding_values.height;
    7fba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    7fbe:	9317      	str	r3, [sp, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    7fc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7fc2:	930c      	str	r3, [sp, #48]	; 0x30
  const int32_t output_activation_max = params.quantized_activation_max;
    7fc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    7fc6:	930d      	str	r3, [sp, #52]	; 0x34

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    7fc8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    7fcc:	4293      	cmp	r3, r2
    7fce:	dd01      	ble.n	7fd4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4c>
    7fd0:	f007 ff3d 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    7fd4:	6823      	ldr	r3, [r4, #0]
    7fd6:	2b04      	cmp	r3, #4
    7fd8:	d1fa      	bne.n	7fd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x48>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    7fda:	f8d8 3000 	ldr.w	r3, [r8]
    7fde:	2b04      	cmp	r3, #4
    7fe0:	d1f6      	bne.n	7fd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x48>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    7fe2:	f8d9 3000 	ldr.w	r3, [r9]
    7fe6:	2b04      	cmp	r3, #4
    7fe8:	d1f2      	bne.n	7fd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x48>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    7fea:	2300      	movs	r3, #0
    7fec:	464a      	mov	r2, r9
    7fee:	4619      	mov	r1, r3
    7ff0:	4620      	mov	r0, r4
    7ff2:	f006 fbc9 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    7ff6:	2303      	movs	r3, #3
    7ff8:	4642      	mov	r2, r8
    7ffa:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    7ffc:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    7ffe:	4620      	mov	r0, r4
    8000:	f006 fbc2 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    8004:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    8006:	9019      	str	r0, [sp, #100]	; 0x64
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    8008:	464a      	mov	r2, r9
    800a:	2100      	movs	r1, #0
    800c:	4640      	mov	r0, r8
    800e:	f006 fbbb 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    8012:	9b30      	ldr	r3, [sp, #192]	; 0xc0
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    8014:	9010      	str	r0, [sp, #64]	; 0x40
  if (bias_data) {
    8016:	b12b      	cbz	r3, 8024 <CONFIG_MAIN_STACK_SIZE+0x24>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    8018:	982f      	ldr	r0, [sp, #188]	; 0xbc
    801a:	f006 fb83 	bl	e724 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    801e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8020:	4298      	cmp	r0, r3
    8022:	d1d5      	bne.n	7fd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x48>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
    8024:	2101      	movs	r1, #1
    8026:	4620      	mov	r0, r4
    8028:	f006 fb6b 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    802c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    802e:	901a      	str	r0, [sp, #104]	; 0x68
  const int input_width = input_shape.Dims(2);
    8030:	4620      	mov	r0, r4
    8032:	f006 fb66 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    8036:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    8038:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_height = filter_shape.Dims(1);
    803a:	4640      	mov	r0, r8
    803c:	f006 fb61 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    8040:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    8042:	901c      	str	r0, [sp, #112]	; 0x70
  const int filter_width = filter_shape.Dims(2);
    8044:	4640      	mov	r0, r8
    8046:	f006 fb5c 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    804a:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    804c:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_height = output_shape.Dims(1);
    804e:	4648      	mov	r0, r9
    8050:	f006 fb57 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    8054:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    8056:	901e      	str	r0, [sp, #120]	; 0x78
  const int output_width = output_shape.Dims(2);
    8058:	4648      	mov	r0, r9
    805a:	f006 fb52 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
    805e:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
    8062:	901f      	str	r0, [sp, #124]	; 0x7c
  for (int batch = 0; batch < batches; ++batch) {
    8064:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8066:	459b      	cmp	fp, r3
    8068:	f280 80fe 	bge.w	8268 <CONFIG_MAIN_STACK_SIZE+0x268>
    806c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    806e:	425b      	negs	r3, r3
    8070:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
    8072:	2300      	movs	r3, #0
    8074:	9307      	str	r3, [sp, #28]
    8076:	9b07      	ldr	r3, [sp, #28]
    8078:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    807a:	4293      	cmp	r3, r2
    807c:	f280 80f1 	bge.w	8262 <CONFIG_MAIN_STACK_SIZE+0x262>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    8080:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8082:	425b      	negs	r3, r3
    8084:	930a      	str	r3, [sp, #40]	; 0x28
    8086:	2300      	movs	r3, #0
    8088:	9308      	str	r3, [sp, #32]
    808a:	9b08      	ldr	r3, [sp, #32]
    808c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    808e:	4293      	cmp	r3, r2
    8090:	f280 80df 	bge.w	8252 <CONFIG_MAIN_STACK_SIZE+0x252>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    8094:	2500      	movs	r5, #0
    8096:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8098:	429d      	cmp	r5, r3
    809a:	f280 80d2 	bge.w	8242 <CONFIG_MAIN_STACK_SIZE+0x242>
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    809e:	2300      	movs	r3, #0
          std::int64_t acc = 0;
    80a0:	2200      	movs	r2, #0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80a2:	9309      	str	r3, [sp, #36]	; 0x24
          std::int64_t acc = 0;
    80a4:	2300      	movs	r3, #0
    80a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    80aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    80ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    80b0:	4293      	cmp	r3, r2
    80b2:	da3f      	bge.n	8134 <CONFIG_MAIN_STACK_SIZE+0x134>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    80b4:	f04f 0a00 	mov.w	sl, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    80b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    80ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    80bc:	459a      	cmp	sl, r3
    80be:	da33      	bge.n	8128 <CONFIG_MAIN_STACK_SIZE+0x128>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    80c0:	2f00      	cmp	r7, #0
    80c2:	db2c      	blt.n	811e <CONFIG_MAIN_STACK_SIZE+0x11e>
    80c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    80c6:	42bb      	cmp	r3, r7
    80c8:	dd29      	ble.n	811e <CONFIG_MAIN_STACK_SIZE+0x11e>
    80ca:	2e00      	cmp	r6, #0
    80cc:	db27      	blt.n	811e <CONFIG_MAIN_STACK_SIZE+0x11e>
    80ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    80d0:	42b3      	cmp	r3, r6
    80d2:	dd24      	ble.n	811e <CONFIG_MAIN_STACK_SIZE+0x11e>
    80d4:	2300      	movs	r3, #0
    80d6:	9304      	str	r3, [sp, #16]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    80d8:	9b04      	ldr	r3, [sp, #16]
    80da:	9a19      	ldr	r2, [sp, #100]	; 0x64
    80dc:	4293      	cmp	r3, r2
    80de:	da1e      	bge.n	811e <CONFIG_MAIN_STACK_SIZE+0x11e>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    80e0:	4632      	mov	r2, r6
    80e2:	4659      	mov	r1, fp
    80e4:	9300      	str	r3, [sp, #0]
    80e6:	4620      	mov	r0, r4
    80e8:	463b      	mov	r3, r7
    80ea:	f006 fb2b 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
    80ee:	9b04      	ldr	r3, [sp, #16]
    80f0:	4629      	mov	r1, r5
    80f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    80f4:	9015      	str	r0, [sp, #84]	; 0x54
                int32_t filter_val = filter_data[Offset(
    80f6:	9300      	str	r3, [sp, #0]
    80f8:	4640      	mov	r0, r8
    80fa:	4653      	mov	r3, sl
    80fc:	f006 fb22 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    8100:	9915      	ldr	r1, [sp, #84]	; 0x54
    8102:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    8104:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8106:	561b      	ldrsb	r3, [r3, r0]
    8108:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    810c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    8110:	fbc2 0183 	smlalbb	r0, r1, r2, r3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    8114:	9b04      	ldr	r3, [sp, #16]
                acc += filter_val * input_val;
    8116:	e9cd 0102 	strd	r0, r1, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    811a:	3301      	adds	r3, #1
    811c:	e7db      	b.n	80d6 <CONFIG_MAIN_STACK_SIZE+0xd6>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    811e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8120:	f10a 0a01 	add.w	sl, sl, #1
    8124:	441f      	add	r7, r3
    8126:	e7c8      	b.n	80ba <CONFIG_MAIN_STACK_SIZE+0xba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    8128:	9b09      	ldr	r3, [sp, #36]	; 0x24
    812a:	3301      	adds	r3, #1
    812c:	9309      	str	r3, [sp, #36]	; 0x24
    812e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8130:	441e      	add	r6, r3
    8132:	e7bb      	b.n	80ac <CONFIG_MAIN_STACK_SIZE+0xac>
              }
            }
          }
          if (bias_data) {
    8134:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    8136:	b153      	cbz	r3, 814e <CONFIG_MAIN_STACK_SIZE+0x14e>
            acc += bias_data[out_channel];
    8138:	9902      	ldr	r1, [sp, #8]
    813a:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    813e:	e9d2 3200 	ldrd	r3, r2, [r2]
    8142:	18cb      	adds	r3, r1, r3
    8144:	9302      	str	r3, [sp, #8]
    8146:	9b03      	ldr	r3, [sp, #12]
    8148:	eb42 0303 	adc.w	r3, r2, r3
    814c:	9303      	str	r3, [sp, #12]
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    814e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8150:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    8154:	9b21      	ldr	r3, [sp, #132]	; 0x84
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
    8156:	f1bc 0f00 	cmp.w	ip, #0
    815a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    815e:	da05      	bge.n	816c <CONFIG_MAIN_STACK_SIZE+0x16c>
    8160:	21b3      	movs	r1, #179	; 0xb3
    8162:	4b43      	ldr	r3, [pc, #268]	; (8270 <CONFIG_MAIN_STACK_SIZE+0x270>)
    8164:	4a43      	ldr	r2, [pc, #268]	; (8274 <CONFIG_MAIN_STACK_SIZE+0x274>)
  assert(shift >= -31 && shift < 8);
    8166:	4844      	ldr	r0, [pc, #272]	; (8278 <CONFIG_MAIN_STACK_SIZE+0x278>)
    8168:	f003 fc36 	bl	b9d8 <__assert_func>
    816c:	f102 031f 	add.w	r3, r2, #31
    8170:	2b26      	cmp	r3, #38	; 0x26
    8172:	d903      	bls.n	817c <CONFIG_MAIN_STACK_SIZE+0x17c>
    8174:	21b4      	movs	r1, #180	; 0xb4
    8176:	4b41      	ldr	r3, [pc, #260]	; (827c <CONFIG_MAIN_STACK_SIZE+0x27c>)
    8178:	4a3e      	ldr	r2, [pc, #248]	; (8274 <CONFIG_MAIN_STACK_SIZE+0x274>)
    817a:	e7f4      	b.n	8166 <CONFIG_MAIN_STACK_SIZE+0x166>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    817c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    8180:	f04f 36ff 	mov.w	r6, #4294967295
    8184:	9b02      	ldr	r3, [sp, #8]
    8186:	3300      	adds	r3, #0
    8188:	930e      	str	r3, [sp, #56]	; 0x38
    818a:	9b03      	ldr	r3, [sp, #12]
    818c:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
    8190:	930f      	str	r3, [sp, #60]	; 0x3c
    8192:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    8196:	428f      	cmp	r7, r1
    8198:	bf08      	it	eq
    819a:	4286      	cmpeq	r6, r0
    819c:	d203      	bcs.n	81a6 <CONFIG_MAIN_STACK_SIZE+0x1a6>
    819e:	21b5      	movs	r1, #181	; 0xb5
    81a0:	4b37      	ldr	r3, [pc, #220]	; (8280 <CONFIG_MAIN_STACK_SIZE+0x280>)
    81a2:	4a34      	ldr	r2, [pc, #208]	; (8274 <CONFIG_MAIN_STACK_SIZE+0x274>)
    81a4:	e7df      	b.n	8166 <CONFIG_MAIN_STACK_SIZE+0x166>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    81a6:	4b37      	ldr	r3, [pc, #220]	; (8284 <CONFIG_MAIN_STACK_SIZE+0x284>)
                                   : 0x7FFF;
  int total_shift = 15 - shift;
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    81a8:	2101      	movs	r1, #1
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    81aa:	459c      	cmp	ip, r3
    81ac:	bfc8      	it	gt
    81ae:	f647 70ff 	movwgt	r0, #32767	; 0x7fff
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    81b2:	f1c2 030e 	rsb	r3, r2, #14
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    81b6:	bfd8      	it	le
    81b8:	f50c 4000 	addle.w	r0, ip, #32768	; 0x8000
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    81bc:	f1a3 0720 	sub.w	r7, r3, #32
    81c0:	f1c3 0620 	rsb	r6, r3, #32
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    81c4:	bfd8      	it	le
    81c6:	1400      	asrle	r0, r0, #16
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    81c8:	fa01 fc07 	lsl.w	ip, r1, r7
    81cc:	fa21 f606 	lsr.w	r6, r1, r6
    81d0:	ea4c 0c06 	orr.w	ip, ip, r6
    81d4:	4606      	mov	r6, r0
    81d6:	fa01 f303 	lsl.w	r3, r1, r3
    81da:	9903      	ldr	r1, [sp, #12]
    81dc:	17c7      	asrs	r7, r0, #31
    81de:	e9cd 6704 	strd	r6, r7, [sp, #16]
    81e2:	fb00 f601 	mul.w	r6, r0, r1
    81e6:	9f05      	ldr	r7, [sp, #20]
    81e8:	9902      	ldr	r1, [sp, #8]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          scaled_acc = std::max(scaled_acc, output_activation_min);
          scaled_acc = std::min(scaled_acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    81ea:	9500      	str	r5, [sp, #0]
    81ec:	fb01 6607 	mla	r6, r1, r7, r6
    81f0:	fba0 0101 	umull	r0, r1, r0, r1
    81f4:	181b      	adds	r3, r3, r0
    81f6:	4431      	add	r1, r6
    81f8:	eb4c 0c01 	adc.w	ip, ip, r1
  int total_shift = 15 - shift;
    81fc:	f1c2 060f 	rsb	r6, r2, #15
  int32_t result = x >> total_shift;
    8200:	3211      	adds	r2, #17
    8202:	f1b6 0120 	subs.w	r1, r6, #32
    8206:	fa0c f202 	lsl.w	r2, ip, r2
    820a:	fa23 f606 	lsr.w	r6, r3, r6
    820e:	ea46 0602 	orr.w	r6, r6, r2
    8212:	bf58      	it	pl
    8214:	fa4c f101 	asrpl.w	r1, ip, r1
    8218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    821a:	bf58      	it	pl
    821c:	430e      	orrpl	r6, r1
    821e:	429e      	cmp	r6, r3
    8220:	bfb8      	it	lt
    8222:	461e      	movlt	r6, r3
    8224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8226:	4659      	mov	r1, fp
    8228:	429e      	cmp	r6, r3
    822a:	bfa8      	it	ge
    822c:	461e      	movge	r6, r3
    822e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    8232:	4648      	mov	r0, r9
    8234:	f006 fa86 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    8238:	9b32      	ldr	r3, [sp, #200]	; 0xc8
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    823a:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    823c:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    8240:	e729      	b.n	8096 <CONFIG_MAIN_STACK_SIZE+0x96>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    8242:	9b08      	ldr	r3, [sp, #32]
    8244:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8246:	3301      	adds	r3, #1
    8248:	9308      	str	r3, [sp, #32]
    824a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    824c:	4413      	add	r3, r2
    824e:	930a      	str	r3, [sp, #40]	; 0x28
    8250:	e71b      	b.n	808a <CONFIG_MAIN_STACK_SIZE+0x8a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    8252:	9b07      	ldr	r3, [sp, #28]
    8254:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8256:	3301      	adds	r3, #1
    8258:	9307      	str	r3, [sp, #28]
    825a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    825c:	4413      	add	r3, r2
    825e:	930b      	str	r3, [sp, #44]	; 0x2c
    8260:	e709      	b.n	8076 <CONFIG_MAIN_STACK_SIZE+0x76>
  for (int batch = 0; batch < batches; ++batch) {
    8262:	f10b 0b01 	add.w	fp, fp, #1
    8266:	e6fd      	b.n	8064 <CONFIG_MAIN_STACK_SIZE+0x64>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    8268:	b023      	add	sp, #140	; 0x8c
    826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    826e:	bf00      	nop
    8270:	00064bc2 	.word	0x00064bc2
    8274:	00064bdc 	.word	0x00064bdc
    8278:	00064c21 	.word	0x00064c21
    827c:	00064c70 	.word	0x00064c70
    8280:	00064c8a 	.word	0x00064c8a
    8284:	7ffeffff 	.word	0x7ffeffff

00008288 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    8288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    828c:	4b93      	ldr	r3, [pc, #588]	; (84dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    828e:	b0eb      	sub	sp, #428	; 0x1ac
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
    8290:	681a      	ldr	r2, [r3, #0]
    8292:	4689      	mov	r9, r1
    8294:	4604      	mov	r4, r0
    8296:	f006 fa18 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    829a:	4b91      	ldr	r3, [pc, #580]	; (84e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
    829c:	4606      	mov	r6, r0
    829e:	681a      	ldr	r2, [r3, #0]
    82a0:	4649      	mov	r1, r9
    82a2:	4620      	mov	r0, r4
    82a4:	f006 fa11 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    82a8:	f8d9 3000 	ldr.w	r3, [r9]
    82ac:	4680      	mov	r8, r0
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    82ae:	681b      	ldr	r3, [r3, #0]
    82b0:	2b03      	cmp	r3, #3
    82b2:	d109      	bne.n	82c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    82b4:	4b8b      	ldr	r3, [pc, #556]	; (84e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
    82b6:	4649      	mov	r1, r9
    82b8:	4620      	mov	r0, r4
    82ba:	681a      	ldr	r2, [r3, #0]
    82bc:	f006 fa05 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    82c0:	4605      	mov	r5, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    82c2:	b91c      	cbnz	r4, 82cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44>
    82c4:	f007 fdc3 	bl	fe4e <abort>
    82c8:	2500      	movs	r5, #0
    82ca:	e7fa      	b.n	82c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  TFLITE_DCHECK(node != nullptr);
  return context->GetEvalTensor(context, node->outputs->data[index]);
    82cc:	4a86      	ldr	r2, [pc, #536]	; (84e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
    82ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
    82d2:	6812      	ldr	r2, [r2, #0]
    82d4:	4620      	mov	r0, r4
    82d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    82da:	6859      	ldr	r1, [r3, #4]
    82dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    82de:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
    82e0:	f8d9 1014 	ldr.w	r1, [r9, #20]
    82e4:	4607      	mov	r7, r0
    82e6:	2900      	cmp	r1, #0
    82e8:	d0ec      	beq.n	82c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
    82ea:	f8d9 9010 	ldr.w	r9, [r9, #16]
    82ee:	f1b9 0f00 	cmp.w	r9, #0
    82f2:	d0e7      	beq.n	82c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  const auto& data = *(static_cast<const OpDataConv*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    82f4:	7a30      	ldrb	r0, [r6, #8]
    82f6:	7a3b      	ldrb	r3, [r7, #8]
    82f8:	4298      	cmp	r0, r3
    82fa:	d00d      	beq.n	8318 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x90>
    82fc:	e9cd 0302 	strd	r0, r3, [sp, #8]
    8300:	4b7a      	ldr	r3, [pc, #488]	; (84ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x264>)
    8302:	4620      	mov	r0, r4
    8304:	9301      	str	r3, [sp, #4]
    8306:	4b7a      	ldr	r3, [pc, #488]	; (84f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x268>)
    8308:	4a7a      	ldr	r2, [pc, #488]	; (84f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26c>)
    830a:	9300      	str	r3, [sp, #0]
    830c:	6965      	ldr	r5, [r4, #20]
    830e:	2337      	movs	r3, #55	; 0x37
    8310:	4979      	ldr	r1, [pc, #484]	; (84f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>)
    8312:	47a8      	blx	r5
      break;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    8314:	2001      	movs	r0, #1
    8316:	e097      	b.n	8448 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
  TF_LITE_ENSURE_MSG(
    8318:	f898 3008 	ldrb.w	r3, [r8, #8]
    831c:	4298      	cmp	r0, r3
    831e:	d008      	beq.n	8332 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    8320:	2807      	cmp	r0, #7
    8322:	d101      	bne.n	8328 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
    8324:	2b09      	cmp	r3, #9
    8326:	d00e      	beq.n	8346 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
    8328:	4620      	mov	r0, r4
    832a:	6963      	ldr	r3, [r4, #20]
    832c:	4973      	ldr	r1, [pc, #460]	; (84fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>)
    832e:	4798      	blx	r3
    8330:	e7f0      	b.n	8314 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
  switch (input->type) {  // Already know in/out types are same.
    8332:	2809      	cmp	r0, #9
    8334:	f000 808b 	beq.w	844e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c6>
    8338:	f200 80c6 	bhi.w	84c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
    833c:	2801      	cmp	r0, #1
    833e:	d03e      	beq.n	83be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x136>
    8340:	2807      	cmp	r0, #7
    8342:	f040 80c1 	bne.w	84c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    8346:	464a      	mov	r2, r9
    8348:	a84e      	add	r0, sp, #312	; 0x138
    834a:	f006 fb50 	bl	e9ee <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    834e:	e9d9 a909 	ldrd	sl, r9, [r9, #36]	; 0x24
    8352:	4631      	mov	r1, r6
    8354:	a81c      	add	r0, sp, #112	; 0x70
          tflite::micro::GetTensorShape(filter),
    8356:	ac22      	add	r4, sp, #136	; 0x88
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    8358:	f006 fd96 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    835c:	4641      	mov	r1, r8
    835e:	4620      	mov	r0, r4

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
    8360:	f8d6 b000 	ldr.w	fp, [r6]
          tflite::micro::GetTensorShape(bias),
    8364:	ae28      	add	r6, sp, #160	; 0xa0
          tflite::micro::GetTensorShape(filter),
    8366:	f006 fd8f 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(bias),
    836a:	4629      	mov	r1, r5
    836c:	4630      	mov	r0, r6
    836e:	f8d8 8000 	ldr.w	r8, [r8]
    8372:	f006 fd89 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    8376:	2d00      	cmp	r5, #0
    8378:	d0a4      	beq.n	82c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return reinterpret_cast<const T*>(tensor->data.raw);
    837a:	682b      	ldr	r3, [r5, #0]
          tflite::micro::GetTensorShape(output),
    837c:	ad5c      	add	r5, sp, #368	; 0x170
    837e:	4639      	mov	r1, r7
    8380:	4628      	mov	r0, r5
    8382:	9309      	str	r3, [sp, #36]	; 0x24
    8384:	f006 fd80 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    8388:	683a      	ldr	r2, [r7, #0]
    838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    838c:	4651      	mov	r1, sl
    838e:	e9cd 5205 	strd	r5, r2, [sp, #20]
    8392:	e9cd 6303 	strd	r6, r3, [sp, #12]
    8396:	464a      	mov	r2, r9
    8398:	ab1c      	add	r3, sp, #112	; 0x70
    839a:	a84e      	add	r0, sp, #312	; 0x138
    839c:	e9cd 4801 	strd	r4, r8, [sp, #4]
    83a0:	f8cd b000 	str.w	fp, [sp]
    83a4:	f7ff fdf0 	bl	7f88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
          tflite::micro::GetTensorShape(output),
    83a8:	4628      	mov	r0, r5
    83aa:	f006 f983 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    83ae:	4630      	mov	r0, r6
    83b0:	f006 f980 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    83b4:	4620      	mov	r0, r4
    83b6:	f006 f97d 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    83ba:	a81c      	add	r0, sp, #112	; 0x70
    83bc:	e041      	b.n	8442 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    83be:	464a      	mov	r2, r9
    83c0:	a840      	add	r0, sp, #256	; 0x100
    83c2:	f000 f8ad 	bl	8520 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    83c6:	4631      	mov	r1, r6
    83c8:	a80a      	add	r0, sp, #40	; 0x28
    83ca:	f006 fd5d 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    83ce:	4641      	mov	r1, r8
    83d0:	f8d6 9000 	ldr.w	r9, [r6]
    83d4:	a810      	add	r0, sp, #64	; 0x40
          tflite::micro::GetTensorShape(bias),
    83d6:	ae16      	add	r6, sp, #88	; 0x58
          tflite::micro::GetTensorShape(filter),
    83d8:	f006 fd56 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(bias),
    83dc:	4629      	mov	r1, r5
    83de:	4630      	mov	r0, r6
    83e0:	f8d8 8000 	ldr.w	r8, [r8]
    83e4:	f006 fd50 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    83e8:	2d00      	cmp	r5, #0
    83ea:	f43f af6b 	beq.w	82c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
      tflite::reference_ops::Conv(
    83ee:	2400      	movs	r4, #0
  return reinterpret_cast<const T*>(tensor->data.raw);
    83f0:	f8d5 a000 	ldr.w	sl, [r5]
          tflite::micro::GetTensorShape(output),
    83f4:	ad4e      	add	r5, sp, #312	; 0x138
    83f6:	4639      	mov	r1, r7
    83f8:	4628      	mov	r0, r5
    83fa:	f006 fd45 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    83fe:	f8d7 b000 	ldr.w	fp, [r7]
          tflite::micro::GetTensorShape(nullptr), nullptr);
    8402:	af5c      	add	r7, sp, #368	; 0x170
    8404:	2100      	movs	r1, #0
    8406:	4638      	mov	r0, r7
    8408:	f006 fd3e 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    840c:	464a      	mov	r2, r9
    840e:	ab10      	add	r3, sp, #64	; 0x40
    8410:	a90a      	add	r1, sp, #40	; 0x28
    8412:	a840      	add	r0, sp, #256	; 0x100
    8414:	e9cd 7405 	strd	r7, r4, [sp, #20]
    8418:	e9cd 5b03 	strd	r5, fp, [sp, #12]
    841c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
    8420:	f8cd 8000 	str.w	r8, [sp]
    8424:	f006 f9c8 	bl	e7b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
    8428:	4638      	mov	r0, r7
    842a:	f006 f943 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
    842e:	4628      	mov	r0, r5
    8430:	f006 f940 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    8434:	4630      	mov	r0, r6
    8436:	f006 f93d 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    843a:	a810      	add	r0, sp, #64	; 0x40
    843c:	f006 f93a 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    8440:	a80a      	add	r0, sp, #40	; 0x28
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    8442:	f006 f937 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
  }
  return kTfLiteOk;
    8446:	2000      	movs	r0, #0
}
    8448:	b06b      	add	sp, #428	; 0x1ac
    844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    844e:	464a      	mov	r2, r9
    8450:	a85c      	add	r0, sp, #368	; 0x170
    8452:	f006 facc 	bl	e9ee <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    8456:	e9d9 a909 	ldrd	sl, r9, [r9, #36]	; 0x24
    845a:	4631      	mov	r1, r6
    845c:	a82e      	add	r0, sp, #184	; 0xb8
          tflite::micro::GetTensorShape(filter),
    845e:	ac34      	add	r4, sp, #208	; 0xd0
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    8460:	f006 fd12 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    8464:	4641      	mov	r1, r8
    8466:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
    8468:	f8d6 b000 	ldr.w	fp, [r6]
          tflite::micro::GetTensorShape(bias),
    846c:	ae3a      	add	r6, sp, #232	; 0xe8
          tflite::micro::GetTensorShape(filter),
    846e:	f006 fd0b 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(bias),
    8472:	4629      	mov	r1, r5
    8474:	4630      	mov	r0, r6
    8476:	f8d8 8000 	ldr.w	r8, [r8]
    847a:	f006 fd05 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    847e:	2d00      	cmp	r5, #0
    8480:	f43f af20 	beq.w	82c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8484:	682b      	ldr	r3, [r5, #0]
          tflite::micro::GetTensorShape(output),
    8486:	ad4e      	add	r5, sp, #312	; 0x138
    8488:	4639      	mov	r1, r7
    848a:	4628      	mov	r0, r5
    848c:	9309      	str	r3, [sp, #36]	; 0x24
    848e:	f006 fcfb 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    8492:	683a      	ldr	r2, [r7, #0]
    8494:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8496:	4651      	mov	r1, sl
    8498:	e9cd 5205 	strd	r5, r2, [sp, #20]
    849c:	e9cd 6303 	strd	r6, r3, [sp, #12]
    84a0:	464a      	mov	r2, r9
    84a2:	ab2e      	add	r3, sp, #184	; 0xb8
    84a4:	a85c      	add	r0, sp, #368	; 0x170
    84a6:	e9cd 4801 	strd	r4, r8, [sp, #4]
    84aa:	f8cd b000 	str.w	fp, [sp]
    84ae:	f7ff fc03 	bl	7cb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
          tflite::micro::GetTensorShape(output),
    84b2:	4628      	mov	r0, r5
    84b4:	f006 f8fe 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    84b8:	4630      	mov	r0, r6
    84ba:	f006 f8fb 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    84be:	4620      	mov	r0, r4
    84c0:	f006 f8f8 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    84c4:	a82e      	add	r0, sp, #184	; 0xb8
    84c6:	e7bc      	b.n	8442 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    84c8:	6965      	ldr	r5, [r4, #20]
    84ca:	f7fe fec1 	bl	7250 <TfLiteTypeGetName>
    84ce:	7a33      	ldrb	r3, [r6, #8]
    84d0:	4602      	mov	r2, r0
    84d2:	490b      	ldr	r1, [pc, #44]	; (8500 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x278>)
    84d4:	4620      	mov	r0, r4
    84d6:	47a8      	blx	r5
    84d8:	e71c      	b.n	8314 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
    84da:	bf00      	nop
    84dc:	00062a08 	.word	0x00062a08
    84e0:	00062a10 	.word	0x00062a10
    84e4:	00062a04 	.word	0x00062a04
    84e8:	00062a0c 	.word	0x00062a0c
    84ec:	00064d22 	.word	0x00064d22
    84f0:	00064d2f 	.word	0x00064d2f
    84f4:	00064cd7 	.word	0x00064cd7
    84f8:	00064747 	.word	0x00064747
    84fc:	00064d3b 	.word	0x00064d3b
    8500:	00064db7 	.word	0x00064db7

00008504 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    8504:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    8506:	4604      	mov	r4, r0
TfLiteRegistration Register_CONV_2D() {
    8508:	4606      	mov	r6, r0
          /*version=*/0};
    850a:	4d04      	ldr	r5, [pc, #16]	; (851c <_ZN6tflite16Register_CONV_2DEv+0x18>)
    850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    850e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8510:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    8518:	4630      	mov	r0, r6
    851a:	bd70      	pop	{r4, r5, r6, pc}
    851c:	00010d60 	.word	0x00010d60

00008520 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
    8520:	7b0b      	ldrb	r3, [r1, #12]
                           const OpDataConv& data) {
    8522:	b570      	push	{r4, r5, r6, lr}
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    8524:	2b01      	cmp	r3, #1
    8526:	4604      	mov	r4, r0
    8528:	460d      	mov	r5, r1
    852a:	4616      	mov	r6, r2
    852c:	d103      	bne.n	8536 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x16>
    *activation_min = 0;
    852e:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    8530:	6323      	str	r3, [r4, #48]	; 0x30
    *activation_max = std::numeric_limits<T>::max();
    8532:	4b12      	ldr	r3, [pc, #72]	; (857c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x5c>)
    8534:	e004      	b.n	8540 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActRelu6) {
    8536:	2b03      	cmp	r3, #3
    8538:	d115      	bne.n	8566 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x46>
    *activation_min = 0;
    853a:	2300      	movs	r3, #0
    853c:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 6;
    853e:	4b10      	ldr	r3, [pc, #64]	; (8580 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x60>)
    *activation_max = std::numeric_limits<T>::max();
    8540:	6363      	str	r3, [r4, #52]	; 0x34
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    8542:	7828      	ldrb	r0, [r5, #0]
    8544:	f006 fcc4 	bl	eed0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
    8548:	6833      	ldr	r3, [r6, #0]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    854a:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
    854c:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
    854e:	6873      	ldr	r3, [r6, #4]
  op_params.stride_width = params.stride_width;
  op_params.stride_height = params.stride_height;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.dilation_height_factor = params.dilation_height_factor;
  return op_params;
}
    8550:	4620      	mov	r0, r4
  op_params.padding_values.height = data.padding.height;
    8552:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
    8554:	686b      	ldr	r3, [r5, #4]
    8556:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
    8558:	68ab      	ldr	r3, [r5, #8]
    855a:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
    855c:	692b      	ldr	r3, [r5, #16]
    855e:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
    8560:	696b      	ldr	r3, [r5, #20]
    8562:	8223      	strh	r3, [r4, #16]
}
    8564:	bd70      	pop	{r4, r5, r6, pc}
  } else if (activation == kTfLiteActReluN1To1) {
    8566:	2b02      	cmp	r3, #2
    8568:	d104      	bne.n	8574 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x54>
    *activation_min = -1;
    856a:	4b06      	ldr	r3, [pc, #24]	; (8584 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x64>)
    856c:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 1;
    856e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    8572:	e7e5      	b.n	8540 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
    8574:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    8578:	e7da      	b.n	8530 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x10>
    857a:	bf00      	nop
    857c:	7f7fffff 	.word	0x7f7fffff
    8580:	40c00000 	.word	0x40c00000
    8584:	bf800000 	.word	0xbf800000

00008588 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    8588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    858c:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
    858e:	680b      	ldr	r3, [r1, #0]
                                 OpDataConv* data) {
    8590:	b08f      	sub	sp, #60	; 0x3c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    8592:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
    8594:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    8596:	3b02      	subs	r3, #2
    8598:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
    859a:	4688      	mov	r8, r1
    859c:	4617      	mov	r7, r2
    859e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    85a0:	d90a      	bls.n	85b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x30>
    85a2:	4b5c      	ldr	r3, [pc, #368]	; (8714 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18c>)
    85a4:	4a5c      	ldr	r2, [pc, #368]	; (8718 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
    85a6:	9300      	str	r3, [sp, #0]
    85a8:	6944      	ldr	r4, [r0, #20]
    85aa:	2356      	movs	r3, #86	; 0x56
    85ac:	495b      	ldr	r1, [pc, #364]	; (871c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    85ae:	47a0      	blx	r4
    85b0:	2001      	movs	r0, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    85b2:	b00f      	add	sp, #60	; 0x3c
    85b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    85b8:	684b      	ldr	r3, [r1, #4]
    85ba:	681c      	ldr	r4, [r3, #0]
    85bc:	2c01      	cmp	r4, #1
    85be:	d00c      	beq.n	85da <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x52>
    85c0:	2601      	movs	r6, #1
    85c2:	4b57      	ldr	r3, [pc, #348]	; (8720 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    85c4:	e9cd 4602 	strd	r4, r6, [sp, #8]
    85c8:	9301      	str	r3, [sp, #4]
    85ca:	4b56      	ldr	r3, [pc, #344]	; (8724 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
    85cc:	4a52      	ldr	r2, [pc, #328]	; (8718 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
    85ce:	9300      	str	r3, [sp, #0]
    85d0:	6944      	ldr	r4, [r0, #20]
    85d2:	2357      	movs	r3, #87	; 0x57
    85d4:	4954      	ldr	r1, [pc, #336]	; (8728 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
    85d6:	47a0      	blx	r4
    85d8:	e7ea      	b.n	85b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
    85da:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
    85de:	930a      	str	r3, [sp, #40]	; 0x28
    85e0:	6953      	ldr	r3, [r2, #20]
  auto padding = params.padding;
    85e2:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    85e6:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
    85e8:	6913      	ldr	r3, [r2, #16]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    85ea:	4649      	mov	r1, r9
    85ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
    85ee:	930c      	str	r3, [sp, #48]	; 0x30
    85f0:	9300      	str	r3, [sp, #0]
    85f2:	4658      	mov	r0, fp
    85f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    85f6:	f006 f9e4 	bl	e9c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    85fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    85fe:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    8600:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    8602:	9300      	str	r3, [sp, #0]
    8604:	4658      	mov	r0, fp
    8606:	4653      	mov	r3, sl
    8608:	f006 f9db 	bl	e9c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    860c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  int total_padding =
    860e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8610:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8612:	f1c2 0201 	rsb	r2, r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    8616:	3b01      	subs	r3, #1
  int total_padding =
    8618:	fb01 2303 	mla	r3, r1, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
    861c:	3801      	subs	r0, #1
  int total_padding =
    861e:	fb0a 3a00 	mla	sl, sl, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    8622:	9b19      	ldr	r3, [sp, #100]	; 0x64
  int total_padding =
    8624:	f1c9 0901 	rsb	r9, r9, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    8628:	1e58      	subs	r0, r3, #1
  int total_padding =
    862a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  total_padding = total_padding > 0 ? total_padding : 0;
    862c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int total_padding =
    8630:	fb03 9900 	mla	r9, r3, r0, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
    8634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    8636:	2200      	movs	r2, #0
    8638:	1e58      	subs	r0, r3, #1
  int total_padding =
    863a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    863c:	4641      	mov	r1, r8
    863e:	fb03 9000 	mla	r0, r3, r0, r9
  total_padding = total_padding > 0 ? total_padding : 0;
    8642:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  return total_padding / 2;
    8646:	1043      	asrs	r3, r0, #1
  *offset = total_padding % 2;
    8648:	f000 0001 	and.w	r0, r0, #1
      padding, &out_height, &out_width);
    864c:	6033      	str	r3, [r6, #0]
    864e:	60b0      	str	r0, [r6, #8]
  return total_padding / 2;
    8650:	ea4f 036a 	mov.w	r3, sl, asr #1
  *offset = total_padding % 2;
    8654:	f00a 0001 	and.w	r0, sl, #1
    8658:	60f0      	str	r0, [r6, #12]
    865a:	6073      	str	r3, [r6, #4]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    865c:	4628      	mov	r0, r5
    865e:	f005 ff83 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    8662:	4682      	mov	sl, r0
    8664:	b940      	cbnz	r0, 8678 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf0>
    8666:	4b31      	ldr	r3, [pc, #196]	; (872c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
    8668:	696e      	ldr	r6, [r5, #20]
    866a:	9300      	str	r3, [sp, #0]
    866c:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, output != nullptr);
    866e:	4628      	mov	r0, r5
    8670:	4a29      	ldr	r2, [pc, #164]	; (8718 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
    8672:	492a      	ldr	r1, [pc, #168]	; (871c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    8674:	47b0      	blx	r6
    8676:	e79b      	b.n	85b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    8678:	4622      	mov	r2, r4
    867a:	4641      	mov	r1, r8
    867c:	4628      	mov	r0, r5
    867e:	f005 ff73 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    8682:	4681      	mov	r9, r0
    8684:	b920      	cbnz	r0, 8690 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x108>
    8686:	4b2a      	ldr	r3, [pc, #168]	; (8730 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
    8688:	696e      	ldr	r6, [r5, #20]
    868a:	9300      	str	r3, [sp, #0]
    868c:	2363      	movs	r3, #99	; 0x63
    868e:	e7ee      	b.n	866e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe6>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    8690:	4641      	mov	r1, r8
    8692:	2202      	movs	r2, #2
    8694:	4628      	mov	r0, r5
    8696:	f005 ff89 	bl	e5ac <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    869a:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    869c:	4683      	mov	fp, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    869e:	2200      	movs	r2, #0
    86a0:	4628      	mov	r0, r5
    86a2:	f005 ff72 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    86a6:	4680      	mov	r8, r0
    86a8:	b920      	cbnz	r0, 86b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
    86aa:	4b22      	ldr	r3, [pc, #136]	; (8734 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
    86ac:	696e      	ldr	r6, [r5, #20]
    86ae:	9300      	str	r3, [sp, #0]
    86b0:	2367      	movs	r3, #103	; 0x67
    86b2:	e7dc      	b.n	866e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe6>
  if (data_type != kTfLiteFloat32) {
    86b4:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
    86b8:	2b01      	cmp	r3, #1
    86ba:	d10a      	bne.n	86d2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14a>
  data->input_zero_point = input->params.zero_point;
    86bc:	f8da 3010 	ldr.w	r3, [sl, #16]
  return kTfLiteOk;
    86c0:	2000      	movs	r0, #0
  data->input_zero_point = input->params.zero_point;
    86c2:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
    86c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
    86c8:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
    86ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
    86ce:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    86d0:	e76f      	b.n	85b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    86d2:	f8d9 3008 	ldr.w	r3, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    86d6:	370c      	adds	r7, #12
    86d8:	685b      	ldr	r3, [r3, #4]
    86da:	464a      	mov	r2, r9
    86dc:	9308      	str	r3, [sp, #32]
    86de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    86e0:	4651      	mov	r1, sl
    86e2:	9307      	str	r3, [sp, #28]
    86e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    86e6:	e9cd 0700 	strd	r0, r7, [sp]
    86ea:	9306      	str	r3, [sp, #24]
    86ec:	f106 0330 	add.w	r3, r6, #48	; 0x30
    86f0:	9305      	str	r3, [sp, #20]
    86f2:	f106 032c 	add.w	r3, r6, #44	; 0x2c
    86f6:	9304      	str	r3, [sp, #16]
    86f8:	f106 0320 	add.w	r3, r6, #32
    86fc:	9303      	str	r3, [sp, #12]
    86fe:	f106 031c 	add.w	r3, r6, #28
    8702:	9302      	str	r3, [sp, #8]
    8704:	4628      	mov	r0, r5
    8706:	465b      	mov	r3, fp
    8708:	f7fe feee 	bl	74e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    870c:	2800      	cmp	r0, #0
    870e:	d0d5      	beq.n	86bc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x134>
    8710:	e74f      	b.n	85b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    8712:	bf00      	nop
    8714:	00064e25 	.word	0x00064e25
    8718:	00064dd3 	.word	0x00064dd3
    871c:	00064540 	.word	0x00064540
    8720:	0006530b 	.word	0x0006530b
    8724:	00064e49 	.word	0x00064e49
    8728:	00064747 	.word	0x00064747
    872c:	00064e5d 	.word	0x00064e5d
    8730:	00064e6e 	.word	0x00064e6e
    8734:	00064e80 	.word	0x00064e80

00008738 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    8738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    873c:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    8740:	4604      	mov	r4, r0
    8742:	460d      	mov	r5, r1
    8744:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    8746:	f1b8 0f00 	cmp.w	r8, #0
    874a:	d101      	bne.n	8750 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18>
    874c:	f007 fb7f 	bl	fe4e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    8750:	f8d1 9014 	ldr.w	r9, [r1, #20]
    8754:	f1b9 0f00 	cmp.w	r9, #0
    8758:	d0f8      	beq.n	874c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    875a:	2200      	movs	r2, #0
    875c:	f005 ff15 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    8760:	4683      	mov	fp, r0
    8762:	b960      	cbnz	r0, 877e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x46>
    8764:	4b4a      	ldr	r3, [pc, #296]	; (8890 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    8766:	6965      	ldr	r5, [r4, #20]
    8768:	9300      	str	r3, [sp, #0]
    876a:	2386      	movs	r3, #134	; 0x86
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
    876c:	4620      	mov	r0, r4
    876e:	4a49      	ldr	r2, [pc, #292]	; (8894 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    8770:	4949      	ldr	r1, [pc, #292]	; (8898 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    8772:	47a8      	blx	r5
    8774:	2701      	movs	r7, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    8776:	4638      	mov	r0, r7
    8778:	b00f      	add	sp, #60	; 0x3c
    877a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    877e:	2200      	movs	r2, #0
    8780:	4629      	mov	r1, r5
    8782:	4620      	mov	r0, r4
    8784:	f005 fef0 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    8788:	4607      	mov	r7, r0
    878a:	b920      	cbnz	r0, 8796 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    878c:	4b43      	ldr	r3, [pc, #268]	; (889c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    878e:	6965      	ldr	r5, [r4, #20]
    8790:	9300      	str	r3, [sp, #0]
    8792:	2388      	movs	r3, #136	; 0x88
    8794:	e7ea      	b.n	876c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x34>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    8796:	2201      	movs	r2, #1
    8798:	4629      	mov	r1, r5
    879a:	4620      	mov	r0, r4
    879c:	f005 fee4 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    87a0:	4606      	mov	r6, r0
    87a2:	b920      	cbnz	r0, 87ae <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x76>
    87a4:	4b3e      	ldr	r3, [pc, #248]	; (88a0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    87a6:	6965      	ldr	r5, [r4, #20]
    87a8:	9300      	str	r3, [sp, #0]
    87aa:	238a      	movs	r3, #138	; 0x8a
    87ac:	e7de      	b.n	876c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x34>
  const int filter_width = filter->dims->data[2];
    87ae:	6882      	ldr	r2, [r0, #8]
  const int input_width = input->dims->data[2];
    87b0:	68bb      	ldr	r3, [r7, #8]
  const int output_width = output->dims->data[2];
    87b2:	f8db 1008 	ldr.w	r1, [fp, #8]
  const int input_height = input->dims->data[1];
    87b6:	e9d3 3a02 	ldrd	r3, sl, [r3, #8]
    87ba:	9309      	str	r3, [sp, #36]	; 0x24
  const int filter_width = filter->dims->data[2];
    87bc:	68d3      	ldr	r3, [r2, #12]
  const int output_height = output->dims->data[1];
    87be:	f8d1 b008 	ldr.w	fp, [r1, #8]
  const int filter_width = filter->dims->data[2];
    87c2:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_height = filter->dims->data[1];
    87c4:	6893      	ldr	r3, [r2, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    87c6:	4620      	mov	r0, r4
  const int filter_height = filter->dims->data[1];
    87c8:	930b      	str	r3, [sp, #44]	; 0x2c
  const int output_width = output->dims->data[2];
    87ca:	68cb      	ldr	r3, [r1, #12]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    87cc:	6851      	ldr	r1, [r2, #4]
    87ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    87d0:	0089      	lsls	r1, r1, #2
  const int output_width = output->dims->data[2];
    87d2:	930c      	str	r3, [sp, #48]	; 0x30
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    87d4:	910d      	str	r1, [sp, #52]	; 0x34
    87d6:	4790      	blx	r2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    87d8:	990d      	ldr	r1, [sp, #52]	; 0x34
  data->per_channel_output_multiplier =
    87da:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    87de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    87e0:	4620      	mov	r0, r4
    87e2:	4790      	blx	r2
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    87e4:	7839      	ldrb	r1, [r7, #0]
  data->per_channel_output_shift =
    87e6:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    87ea:	2909      	cmp	r1, #9
    87ec:	d001      	beq.n	87f2 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xba>
    87ee:	2907      	cmp	r1, #7
    87f0:	d13a      	bne.n	8868 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    87f2:	f896 7030 	ldrb.w	r7, [r6, #48]	; 0x30
    87f6:	2f01      	cmp	r7, #1
    87f8:	d00d      	beq.n	8816 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xde>
    87fa:	2501      	movs	r5, #1
    87fc:	4b29      	ldr	r3, [pc, #164]	; (88a4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    87fe:	4620      	mov	r0, r4
    8800:	9301      	str	r3, [sp, #4]
    8802:	4b29      	ldr	r3, [pc, #164]	; (88a8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    8804:	e9cd 7502 	strd	r7, r5, [sp, #8]
    8808:	9300      	str	r3, [sp, #0]
    880a:	6966      	ldr	r6, [r4, #20]
    880c:	239e      	movs	r3, #158	; 0x9e
    880e:	4a21      	ldr	r2, [pc, #132]	; (8894 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    8810:	4926      	ldr	r1, [pc, #152]	; (88ac <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    8812:	47b0      	blx	r6
    8814:	e7ae      	b.n	8774 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
    const auto* affine_quantization =
    8816:	6b72      	ldr	r2, [r6, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    8818:	2a00      	cmp	r2, #0
    881a:	d097      	beq.n	874c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    881c:	6813      	ldr	r3, [r2, #0]
    881e:	2b00      	cmp	r3, #0
    8820:	d094      	beq.n	874c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    8822:	6850      	ldr	r0, [r2, #4]
    8824:	2800      	cmp	r0, #0
    8826:	d091      	beq.n	874c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TF_LITE_ENSURE(context,
    8828:	681a      	ldr	r2, [r3, #0]
    882a:	2a01      	cmp	r2, #1
    882c:	d00c      	beq.n	8848 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x110>
    882e:	68b6      	ldr	r6, [r6, #8]
    8830:	6876      	ldr	r6, [r6, #4]
    8832:	42b2      	cmp	r2, r6
    8834:	d008      	beq.n	8848 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x110>
    8836:	4b1e      	ldr	r3, [pc, #120]	; (88b0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    8838:	4620      	mov	r0, r4
    883a:	9300      	str	r3, [sp, #0]
    883c:	6965      	ldr	r5, [r4, #20]
    883e:	23a7      	movs	r3, #167	; 0xa7
    8840:	4a14      	ldr	r2, [pc, #80]	; (8894 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    8842:	4915      	ldr	r1, [pc, #84]	; (8898 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    8844:	47a8      	blx	r5
    8846:	e796      	b.n	8776 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    8848:	6800      	ldr	r0, [r0, #0]
    884a:	4282      	cmp	r2, r0
    884c:	d00c      	beq.n	8868 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    884e:	4b19      	ldr	r3, [pc, #100]	; (88b4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    8850:	e9cd 2002 	strd	r2, r0, [sp, #8]
    8854:	9301      	str	r3, [sp, #4]
    8856:	4b18      	ldr	r3, [pc, #96]	; (88b8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x180>)
    8858:	4620      	mov	r0, r4
    885a:	9300      	str	r3, [sp, #0]
    885c:	6965      	ldr	r5, [r4, #20]
    885e:	23ab      	movs	r3, #171	; 0xab
    8860:	4a0c      	ldr	r2, [pc, #48]	; (8894 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    8862:	4912      	ldr	r1, [pc, #72]	; (88ac <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    8864:	47a8      	blx	r5
    8866:	e786      	b.n	8776 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    8868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    886a:	e9cd 1805 	strd	r1, r8, [sp, #20]
    886e:	9303      	str	r3, [sp, #12]
    8870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8872:	464a      	mov	r2, r9
    8874:	9302      	str	r3, [sp, #8]
    8876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8878:	4629      	mov	r1, r5
    887a:	9301      	str	r3, [sp, #4]
    887c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    887e:	4620      	mov	r0, r4
    8880:	9300      	str	r3, [sp, #0]
    8882:	f8cd b010 	str.w	fp, [sp, #16]
    8886:	4653      	mov	r3, sl
    8888:	f7ff fe7e 	bl	8588 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    888c:	4607      	mov	r7, r0
    888e:	e772      	b.n	8776 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    8890:	00064e80 	.word	0x00064e80
    8894:	00064dd3 	.word	0x00064dd3
    8898:	00064540 	.word	0x00064540
    889c:	00064e5d 	.word	0x00064e5d
    88a0:	00064e6e 	.word	0x00064e6e
    88a4:	00064761 	.word	0x00064761
    88a8:	00064794 	.word	0x00064794
    88ac:	00064747 	.word	0x00064747
    88b0:	00064e92 	.word	0x00064e92
    88b4:	00064f0b 	.word	0x00064f0b
    88b8:	0006483d 	.word	0x0006483d

000088bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    88bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88c0:	461d      	mov	r5, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    88c2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8_t* output_data) {
    88c6:	b0a3      	sub	sp, #140	; 0x8c
  const int stride_width = params.stride_width;
    88c8:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    88ca:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8_t* output_data) {
    88ce:	e9cd 1220 	strd	r1, r2, [sp, #128]	; 0x80
  const int stride_height = params.stride_height;
    88d2:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    88d4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8_t* output_data) {
    88d8:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int dilation_width_factor = params.dilation_width_factor;
    88dc:	9311      	str	r3, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    88de:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    int8_t* output_data) {
    88e2:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
  const int dilation_height_factor = params.dilation_height_factor;
    88e6:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    88e8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    88ec:	9314      	str	r3, [sp, #80]	; 0x50
  const int pad_height = params.padding_values.height;
    88ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    88f2:	9315      	str	r3, [sp, #84]	; 0x54
  const int depth_multiplier = params.depth_multiplier;
    88f4:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    88f8:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t input_offset = params.input_offset;
    88fa:	6943      	ldr	r3, [r0, #20]
    88fc:	9316      	str	r3, [sp, #88]	; 0x58
  const int32_t output_offset = params.output_offset;
    88fe:	69c3      	ldr	r3, [r0, #28]
    8900:	9317      	str	r3, [sp, #92]	; 0x5c
  const int32_t output_activation_min = params.quantized_activation_min;
    8902:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8904:	930c      	str	r3, [sp, #48]	; 0x30
  const int32_t output_activation_max = params.quantized_activation_max;
    8906:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    8908:	930d      	str	r3, [sp, #52]	; 0x34

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    890a:	682b      	ldr	r3, [r5, #0]
    890c:	2b04      	cmp	r3, #4
    890e:	d001      	beq.n	8914 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58>
    8910:	f007 fa9d 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    8914:	f8d9 3000 	ldr.w	r3, [r9]
    8918:	2b04      	cmp	r3, #4
    891a:	d1f9      	bne.n	8910 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    891c:	f8da 3000 	ldr.w	r3, [sl]
    8920:	2b04      	cmp	r3, #4
    8922:	d1f5      	bne.n	8910 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    8924:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    8928:	4293      	cmp	r3, r2
    892a:	dcf1      	bgt.n	8910 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    892c:	2300      	movs	r3, #0
    892e:	4652      	mov	r2, sl
    8930:	4619      	mov	r1, r3
    8932:	4628      	mov	r0, r5
    8934:	f005 ff28 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    8938:	2303      	movs	r3, #3
    893a:	4652      	mov	r2, sl
    893c:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    893e:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    8940:	4648      	mov	r0, r9
    8942:	f005 ff21 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    8946:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    8948:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
    894a:	4628      	mov	r0, r5
    894c:	f005 fed9 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    8950:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    8952:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
    8954:	4628      	mov	r0, r5
    8956:	f005 fed4 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
    895a:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
    895c:	901a      	str	r0, [sp, #104]	; 0x68
  const int input_depth = input_shape.Dims(3);
    895e:	4628      	mov	r0, r5
    8960:	f005 fecf 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    8964:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
    8966:	900e      	str	r0, [sp, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
    8968:	4648      	mov	r0, r9
    896a:	f005 feca 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    896e:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    8970:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
    8972:	4648      	mov	r0, r9
    8974:	f005 fec5 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    8978:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    897a:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
    897c:	4650      	mov	r0, sl
    897e:	f005 fec0 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    8982:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    8984:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
    8986:	4650      	mov	r0, sl
    8988:	f005 febb 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    898c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    898e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  const int output_width = output_shape.Dims(2);
    8990:	901e      	str	r0, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    8992:	fb03 f602 	mul.w	r6, r3, r2
    8996:	42a6      	cmp	r6, r4
    8998:	d1ba      	bne.n	8910 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    899a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    899c:	f005 fec2 	bl	e724 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    89a0:	42b0      	cmp	r0, r6
    89a2:	d1b5      	bne.n	8910 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>

  for (int batch = 0; batch < batches; ++batch) {
    89a4:	f04f 0b00 	mov.w	fp, #0
    89a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    89aa:	459b      	cmp	fp, r3
    89ac:	f280 80eb 	bge.w	8b86 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>
    89b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    89b2:	425b      	negs	r3, r3
    89b4:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
    89b6:	2300      	movs	r3, #0
    89b8:	9304      	str	r3, [sp, #16]
    89ba:	9b04      	ldr	r3, [sp, #16]
    89bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    89be:	4293      	cmp	r3, r2
    89c0:	f280 80de 	bge.w	8b80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    89c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    89c6:	425b      	negs	r3, r3
    89c8:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_x = 0; out_x < output_width; ++out_x) {
    89ca:	2300      	movs	r3, #0
    89cc:	9305      	str	r3, [sp, #20]
    89ce:	9b05      	ldr	r3, [sp, #20]
    89d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    89d2:	4293      	cmp	r3, r2
    89d4:	f280 80cc 	bge.w	8b70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b4>
    89d8:	2300      	movs	r3, #0
    89da:	9303      	str	r3, [sp, #12]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    89dc:	9306      	str	r3, [sp, #24]
    89de:	9b06      	ldr	r3, [sp, #24]
    89e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    89e2:	4293      	cmp	r3, r2
    89e4:	f280 80bc 	bge.w	8b60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a4>
    89e8:	9e03      	ldr	r6, [sp, #12]
          for (int m = 0; m < depth_multiplier; ++m) {
    89ea:	9b03      	ldr	r3, [sp, #12]
    89ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    89ee:	1af3      	subs	r3, r6, r3
    89f0:	4293      	cmp	r3, r2
    89f2:	f280 80ad 	bge.w	8b50 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
    89f6:	2400      	movs	r4, #0
            const int output_channel = m + in_channel * depth_multiplier;
    89f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    89fa:	961f      	str	r6, [sp, #124]	; 0x7c
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    89fc:	9407      	str	r4, [sp, #28]
    89fe:	9b07      	ldr	r3, [sp, #28]
    8a00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8a02:	4293      	cmp	r3, r2
    8a04:	da37      	bge.n	8a76 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    8a06:	2300      	movs	r3, #0
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
    8a08:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    8a0c:	9308      	str	r3, [sp, #32]
    8a0e:	9b08      	ldr	r3, [sp, #32]
    8a10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8a12:	4293      	cmp	r3, r2
    8a14:	da29      	bge.n	8a6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    8a16:	f1b8 0f00 	cmp.w	r8, #0
    8a1a:	db20      	blt.n	8a5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    8a1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8a1e:	4543      	cmp	r3, r8
    8a20:	dd1d      	ble.n	8a5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    8a22:	2f00      	cmp	r7, #0
    8a24:	db1b      	blt.n	8a5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    8a26:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8a28:	42bb      	cmp	r3, r7
    8a2a:	dd18      	ble.n	8a5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
    8a2c:	9b06      	ldr	r3, [sp, #24]
    8a2e:	463a      	mov	r2, r7
    8a30:	4659      	mov	r1, fp
    8a32:	9300      	str	r3, [sp, #0]
    8a34:	4628      	mov	r0, r5
    8a36:	4643      	mov	r3, r8
    8a38:	f005 fe84 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
                  int32_t filter_val = filter_data[Offset(
    8a3c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
                  int32_t input_val = input_data[Offset(
    8a40:	9013      	str	r0, [sp, #76]	; 0x4c
                  int32_t filter_val = filter_data[Offset(
    8a42:	2100      	movs	r1, #0
    8a44:	4648      	mov	r0, r9
    8a46:	9600      	str	r6, [sp, #0]
    8a48:	f005 fe7c 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
    8a4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8a4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    8a50:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    8a52:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8a54:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    8a56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    8a58:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
    8a5a:	fb02 4403 	mla	r4, r2, r3, r4
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    8a5e:	9b08      	ldr	r3, [sp, #32]
    8a60:	3301      	adds	r3, #1
    8a62:	9308      	str	r3, [sp, #32]
    8a64:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a66:	4498      	add	r8, r3
    8a68:	e7d1      	b.n	8a0e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    8a6a:	9b07      	ldr	r3, [sp, #28]
    8a6c:	3301      	adds	r3, #1
    8a6e:	9307      	str	r3, [sp, #28]
    8a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a72:	441f      	add	r7, r3
    8a74:	e7c3      	b.n	89fe <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
                }
              }
            }
            if (bias_data) {
    8a76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    8a78:	b113      	cbz	r3, 8a80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
              acc += bias_data[output_channel];
    8a7a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    8a7e:	441c      	add	r4, r3
            }
            acc = MultiplyByQuantizedMultiplier(
    8a80:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8a82:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    8a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8a88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    8a8c:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    8a90:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    8a92:	fa04 f202 	lsl.w	r2, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
    8a96:	bfcc      	ite	gt
    8a98:	2000      	movgt	r0, #0
    8a9a:	4240      	negle	r0, r0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    8a9c:	4291      	cmp	r1, r2
    8a9e:	d127      	bne.n	8af0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    8aa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    8aa4:	425f      	negs	r7, r3
    8aa6:	415f      	adcs	r7, r3
  std::int64_t ab_64 = a_64 * b_64;
    8aa8:	fb82 2301 	smull	r2, r3, r2, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    8aac:	2a00      	cmp	r2, #0
    8aae:	f173 0100 	sbcs.w	r1, r3, #0
    8ab2:	4936      	ldr	r1, [pc, #216]	; (8b8c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d0>)
    8ab4:	bfa8      	it	ge
    8ab6:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    8aba:	b9df      	cbnz	r7, 8af4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x238>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    8abc:	1852      	adds	r2, r2, r1
    8abe:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    8ac2:	4698      	mov	r8, r3
    8ac4:	2a00      	cmp	r2, #0
    8ac6:	f178 0300 	sbcs.w	r3, r8, #0
    8aca:	4617      	mov	r7, r2
    8acc:	da04      	bge.n	8ad8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21c>
    8ace:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    8ad2:	18d7      	adds	r7, r2, r3
    8ad4:	f148 0800 	adc.w	r8, r8, #0
    8ad8:	0ffa      	lsrs	r2, r7, #31
    8ada:	ea42 0348 	orr.w	r3, r2, r8, lsl #1
  assert(exponent >= 0);
    8ade:	2800      	cmp	r0, #0
    8ae0:	da0b      	bge.n	8afa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23e>
    8ae2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    8ae6:	4b2a      	ldr	r3, [pc, #168]	; (8b90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d4>)
    8ae8:	4a2a      	ldr	r2, [pc, #168]	; (8b94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>)
  assert(exponent <= 31);
    8aea:	482b      	ldr	r0, [pc, #172]	; (8b98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2dc>)
    8aec:	f002 ff74 	bl	b9d8 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    8af0:	2700      	movs	r7, #0
    8af2:	e7d9      	b.n	8aa8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
    8af4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    8af8:	e7f1      	b.n	8ade <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
  assert(exponent <= 31);
    8afa:	281f      	cmp	r0, #31
    8afc:	f106 0601 	add.w	r6, r6, #1
    8b00:	dd04      	ble.n	8b0c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x250>
    8b02:	f240 1167 	movw	r1, #359	; 0x167
    8b06:	4b25      	ldr	r3, [pc, #148]	; (8b9c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e0>)
    8b08:	4a22      	ldr	r2, [pc, #136]	; (8b94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>)
    8b0a:	e7ee      	b.n	8aea <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    8b0c:	2201      	movs	r2, #1
    8b0e:	4082      	lsls	r2, r0
    8b10:	3a01      	subs	r2, #1
  return a & b;
    8b12:	ea02 0103 	and.w	r1, r2, r3
  return a >> offset;
    8b16:	1052      	asrs	r2, r2, #1
  return a + b;
    8b18:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
    8b1c:	fa43 f400 	asr.w	r4, r3, r0
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    8b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
    8b22:	4650      	mov	r0, sl
            acc += output_offset;
    8b24:	441c      	add	r4, r3
    8b26:	4291      	cmp	r1, r2
    8b28:	bfc8      	it	gt
    8b2a:	3401      	addgt	r4, #1
    8b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            output_data[Offset(output_shape, batch, out_y, out_x,
    8b2e:	4659      	mov	r1, fp
    8b30:	429c      	cmp	r4, r3
    8b32:	bfb8      	it	lt
    8b34:	461c      	movlt	r4, r3
    8b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8b38:	429c      	cmp	r4, r3
    8b3a:	bfa8      	it	ge
    8b3c:	461c      	movge	r4, r3
    8b3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8b40:	9300      	str	r3, [sp, #0]
    8b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8b46:	f005 fdfd 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
    8b4a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    8b4c:	541c      	strb	r4, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
    8b4e:	e74c      	b.n	89ea <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    8b50:	9b06      	ldr	r3, [sp, #24]
    8b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8b54:	3301      	adds	r3, #1
    8b56:	9306      	str	r3, [sp, #24]
    8b58:	9b03      	ldr	r3, [sp, #12]
    8b5a:	4413      	add	r3, r2
    8b5c:	9303      	str	r3, [sp, #12]
    8b5e:	e73e      	b.n	89de <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    8b60:	9b05      	ldr	r3, [sp, #20]
    8b62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8b64:	3301      	adds	r3, #1
    8b66:	9305      	str	r3, [sp, #20]
    8b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b6a:	4413      	add	r3, r2
    8b6c:	930a      	str	r3, [sp, #40]	; 0x28
    8b6e:	e72e      	b.n	89ce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x112>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    8b70:	9b04      	ldr	r3, [sp, #16]
    8b72:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8b74:	3301      	adds	r3, #1
    8b76:	9304      	str	r3, [sp, #16]
    8b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b7a:	4413      	add	r3, r2
    8b7c:	930b      	str	r3, [sp, #44]	; 0x2c
    8b7e:	e71c      	b.n	89ba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfe>
  for (int batch = 0; batch < batches; ++batch) {
    8b80:	f10b 0b01 	add.w	fp, fp, #1
    8b84:	e710      	b.n	89a8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xec>
          }
        }
      }
    }
  }
}
    8b86:	b023      	add	sp, #140	; 0x8c
    8b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b8c:	c0000001 	.word	0xc0000001
    8b90:	00064af7 	.word	0x00064af7
    8b94:	00064b05 	.word	0x00064b05
    8b98:	00064b5a 	.word	0x00064b5a
    8b9c:	00064bb3 	.word	0x00064bb3

00008ba0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    8ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    8ba4:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    8ba8:	4605      	mov	r5, r0
    8baa:	460e      	mov	r6, r1
    8bac:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->user_data != nullptr);
    8bae:	f1b9 0f00 	cmp.w	r9, #0
    8bb2:	d101      	bne.n	8bb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
    8bb4:	f007 f94b 	bl	fe4e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    8bb8:	f8d1 a014 	ldr.w	sl, [r1, #20]
    8bbc:	f1ba 0f00 	cmp.w	sl, #0
    8bc0:	d0f8      	beq.n	8bb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
  TFLITE_DCHECK(context != nullptr);
    8bc2:	2800      	cmp	r0, #0
    8bc4:	d0f6      	beq.n	8bb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8bc6:	4a5a      	ldr	r2, [pc, #360]	; (8d30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x190>)
    8bc8:	684b      	ldr	r3, [r1, #4]
    8bca:	6812      	ldr	r2, [r2, #0]
    8bcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8bd0:	6859      	ldr	r1, [r3, #4]
    8bd2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    8bd4:	4790      	blx	r2
  const OpDataConv& data = *(static_cast<const OpDataConv*>(node->user_data));

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
    8bd6:	4b57      	ldr	r3, [pc, #348]	; (8d34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x194>)
  return GetMutableEvalInput(context, node, index);
    8bd8:	4631      	mov	r1, r6
    8bda:	681a      	ldr	r2, [r3, #0]
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8bdc:	4604      	mov	r4, r0
  return GetMutableEvalInput(context, node, index);
    8bde:	4628      	mov	r0, r5
    8be0:	f005 fd73 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
    8be4:	4b54      	ldr	r3, [pc, #336]	; (8d38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x198>)
    8be6:	4607      	mov	r7, r0
    8be8:	681a      	ldr	r2, [r3, #0]
    8bea:	4631      	mov	r1, r6
    8bec:	4628      	mov	r0, r5
    8bee:	f005 fd6c 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    8bf2:	6833      	ldr	r3, [r6, #0]
    8bf4:	4680      	mov	r8, r0
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    8bf6:	681b      	ldr	r3, [r3, #0]
    8bf8:	2b03      	cmp	r3, #3
    8bfa:	d115      	bne.n	8c28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
    8bfc:	4b4f      	ldr	r3, [pc, #316]	; (8d3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>)
    8bfe:	4631      	mov	r1, r6
    8c00:	4628      	mov	r0, r5
    8c02:	681a      	ldr	r2, [r3, #0]
    8c04:	f005 fd61 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    8c08:	4606      	mov	r6, r0
          : nullptr;

  switch (input->type) {  // Already know in/out types are same.
    8c0a:	7a38      	ldrb	r0, [r7, #8]
    8c0c:	2801      	cmp	r0, #1
    8c0e:	d00d      	beq.n	8c2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
    8c10:	2809      	cmp	r0, #9
    8c12:	d04a      	beq.n	8caa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int8_t>(output));
      break;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8c14:	696c      	ldr	r4, [r5, #20]
    8c16:	f7fe fb1b 	bl	7250 <TfLiteTypeGetName>
    8c1a:	7a3b      	ldrb	r3, [r7, #8]
    8c1c:	4602      	mov	r2, r0
    8c1e:	4948      	ldr	r1, [pc, #288]	; (8d40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>)
    8c20:	4628      	mov	r0, r5
    8c22:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    8c24:	2001      	movs	r0, #1
    8c26:	e03d      	b.n	8ca4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    8c28:	2600      	movs	r6, #0
    8c2a:	e7ee      	b.n	8c0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
          DepthwiseConvParamsFloat(params, data),
    8c2c:	464a      	mov	r2, r9
    8c2e:	4651      	mov	r1, sl
    8c30:	a82e      	add	r0, sp, #184	; 0xb8
    8c32:	f000 f895 	bl	8d60 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    8c36:	4639      	mov	r1, r7
    8c38:	a80a      	add	r0, sp, #40	; 0x28
    8c3a:	f006 f925 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    8c3e:	4641      	mov	r1, r8
    8c40:	a810      	add	r0, sp, #64	; 0x40
  return reinterpret_cast<const T*>(tensor->data.raw);
    8c42:	683f      	ldr	r7, [r7, #0]
    8c44:	f006 f920 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    8c48:	f1b8 0f00 	cmp.w	r8, #0
    8c4c:	d0b2      	beq.n	8bb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
          tflite::micro::GetTensorShape(bias),
    8c4e:	ad16      	add	r5, sp, #88	; 0x58
    8c50:	4631      	mov	r1, r6
    8c52:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
    8c54:	f8d8 8000 	ldr.w	r8, [r8]
    8c58:	f006 f916 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    8c5c:	2e00      	cmp	r6, #0
    8c5e:	d0a9      	beq.n	8bb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8c60:	f8d6 9000 	ldr.w	r9, [r6]
          tflite::micro::GetTensorShape(output),
    8c64:	ae3e      	add	r6, sp, #248	; 0xf8
    8c66:	4621      	mov	r1, r4
    8c68:	4630      	mov	r0, r6
    8c6a:	f006 f90d 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8c6e:	b104      	cbz	r4, 8c72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    8c70:	6824      	ldr	r4, [r4, #0]
      tflite::reference_ops::DepthwiseConv(
    8c72:	463a      	mov	r2, r7
    8c74:	ab10      	add	r3, sp, #64	; 0x40
    8c76:	a90a      	add	r1, sp, #40	; 0x28
    8c78:	a82e      	add	r0, sp, #184	; 0xb8
    8c7a:	e9cd 6403 	strd	r6, r4, [sp, #12]
    8c7e:	e9cd 5901 	strd	r5, r9, [sp, #4]
    8c82:	f8cd 8000 	str.w	r8, [sp]
    8c86:	f005 fee2 	bl	ea4e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
    8c8a:	4630      	mov	r0, r6
    8c8c:	f005 fd12 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    8c90:	4628      	mov	r0, r5
    8c92:	f005 fd0f 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    8c96:	a810      	add	r0, sp, #64	; 0x40
    8c98:	f005 fd0c 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    8c9c:	a80a      	add	r0, sp, #40	; 0x28
          tflite::micro::GetTensorShape(input),
    8c9e:	f005 fd09 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
  }
  return kTfLiteOk;
    8ca2:	2000      	movs	r0, #0
}
    8ca4:	b04f      	add	sp, #316	; 0x13c
    8ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DepthwiseConvParamsQuantized(params, data),
    8caa:	464a      	mov	r2, r9
    8cac:	4651      	mov	r1, sl
    8cae:	a83e      	add	r0, sp, #248	; 0xf8
    8cb0:	f005 ffe1 	bl	ec76 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    8cb4:	e9d9 a909 	ldrd	sl, r9, [r9, #36]	; 0x24
          tflite::micro::GetTensorShape(input),
    8cb8:	4639      	mov	r1, r7
    8cba:	a81c      	add	r0, sp, #112	; 0x70
          tflite::micro::GetTensorShape(filter),
    8cbc:	ad22      	add	r5, sp, #136	; 0x88
          tflite::micro::GetTensorShape(input),
    8cbe:	f006 f8e3 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    8cc2:	4641      	mov	r1, r8
    8cc4:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
    8cc6:	f8d7 b000 	ldr.w	fp, [r7]
    8cca:	f006 f8dd 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    8cce:	f1b8 0f00 	cmp.w	r8, #0
    8cd2:	f43f af6f 	beq.w	8bb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
          tflite::micro::GetTensorShape(bias),
    8cd6:	af28      	add	r7, sp, #160	; 0xa0
    8cd8:	4631      	mov	r1, r6
    8cda:	4638      	mov	r0, r7
  return reinterpret_cast<const T*>(tensor->data.raw);
    8cdc:	f8d8 8000 	ldr.w	r8, [r8]
    8ce0:	f006 f8d2 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    8ce4:	2e00      	cmp	r6, #0
    8ce6:	f43f af65 	beq.w	8bb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8cea:	6833      	ldr	r3, [r6, #0]
          tflite::micro::GetTensorShape(output),
    8cec:	ae2e      	add	r6, sp, #184	; 0xb8
    8cee:	4621      	mov	r1, r4
    8cf0:	4630      	mov	r0, r6
    8cf2:	9309      	str	r3, [sp, #36]	; 0x24
    8cf4:	f006 f8c8 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8cfa:	b104      	cbz	r4, 8cfe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    8cfc:	6824      	ldr	r4, [r4, #0]
      reference_integer_ops::DepthwiseConvPerChannel(
    8cfe:	464a      	mov	r2, r9
    8d00:	4651      	mov	r1, sl
    8d02:	e9cd 7303 	strd	r7, r3, [sp, #12]
    8d06:	a83e      	add	r0, sp, #248	; 0xf8
    8d08:	ab1c      	add	r3, sp, #112	; 0x70
    8d0a:	e9cd 6405 	strd	r6, r4, [sp, #20]
    8d0e:	e9cd 5801 	strd	r5, r8, [sp, #4]
    8d12:	f8cd b000 	str.w	fp, [sp]
    8d16:	f7ff fdd1 	bl	88bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
          tflite::micro::GetTensorShape(output),
    8d1a:	4630      	mov	r0, r6
    8d1c:	f005 fcca 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    8d20:	4638      	mov	r0, r7
    8d22:	f005 fcc7 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    8d26:	4628      	mov	r0, r5
    8d28:	f005 fcc4 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    8d2c:	a81c      	add	r0, sp, #112	; 0x70
    8d2e:	e7b6      	b.n	8c9e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
    8d30:	00062a1c 	.word	0x00062a1c
    8d34:	00062a18 	.word	0x00062a18
    8d38:	00062a20 	.word	0x00062a20
    8d3c:	00062a14 	.word	0x00062a14
    8d40:	00064db7 	.word	0x00064db7

00008d44 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    8d44:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    8d46:	4604      	mov	r4, r0
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    8d48:	4606      	mov	r6, r0
          /*version=*/0};
    8d4a:	4d04      	ldr	r5, [pc, #16]	; (8d5c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x18>)
    8d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8d50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    8d58:	4630      	mov	r0, r6
    8d5a:	bd70      	pop	{r4, r5, r6, pc}
    8d5c:	00010d80 	.word	0x00010d80

00008d60 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
    8d60:	7c0b      	ldrb	r3, [r1, #16]
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
    8d62:	b570      	push	{r4, r5, r6, lr}
  if (activation == kTfLiteActRelu) {
    8d64:	2b01      	cmp	r3, #1
    8d66:	4604      	mov	r4, r0
    8d68:	460d      	mov	r5, r1
    8d6a:	4616      	mov	r6, r2
    8d6c:	d103      	bne.n	8d76 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x16>
    *activation_min = 0;
    8d6e:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    8d70:	6323      	str	r3, [r4, #48]	; 0x30
    *activation_max = std::numeric_limits<T>::max();
    8d72:	4b13      	ldr	r3, [pc, #76]	; (8dc0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x60>)
    8d74:	e004      	b.n	8d80 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActRelu6) {
    8d76:	2b03      	cmp	r3, #3
    8d78:	d117      	bne.n	8daa <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x4a>
    *activation_min = 0;
    8d7a:	2300      	movs	r3, #0
    8d7c:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 6;
    8d7e:	4b11      	ldr	r3, [pc, #68]	; (8dc4 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x64>)
    *activation_max = std::numeric_limits<T>::max();
    8d80:	6363      	str	r3, [r4, #52]	; 0x34
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    8d82:	7828      	ldrb	r0, [r5, #0]
    8d84:	f006 f8a4 	bl	eed0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
    8d88:	6833      	ldr	r3, [r6, #0]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    8d8a:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
    8d8c:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
    8d8e:	6873      	ldr	r3, [r6, #4]
  op_params.stride_height = params.stride_height;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.depth_multiplier = params.depth_multiplier;
  return op_params;
}
    8d90:	4620      	mov	r0, r4
  op_params.padding_values.height = data.padding.height;
    8d92:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
    8d94:	686b      	ldr	r3, [r5, #4]
    8d96:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
    8d98:	68ab      	ldr	r3, [r5, #8]
    8d9a:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
    8d9c:	696b      	ldr	r3, [r5, #20]
    8d9e:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
    8da0:	69ab      	ldr	r3, [r5, #24]
    8da2:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
    8da4:	68eb      	ldr	r3, [r5, #12]
    8da6:	8263      	strh	r3, [r4, #18]
}
    8da8:	bd70      	pop	{r4, r5, r6, pc}
  } else if (activation == kTfLiteActReluN1To1) {
    8daa:	2b02      	cmp	r3, #2
    8dac:	d104      	bne.n	8db8 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x58>
    *activation_min = -1;
    8dae:	4b06      	ldr	r3, [pc, #24]	; (8dc8 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x68>)
    8db0:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 1;
    8db2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    8db6:	e7e3      	b.n	8d80 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
    8db8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    8dbc:	e7d8      	b.n	8d70 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x10>
    8dbe:	bf00      	nop
    8dc0:	7f7fffff 	.word	0x7f7fffff
    8dc4:	40c00000 	.word	0x40c00000
    8dc8:	bf800000 	.word	0xbf800000

00008dcc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    8dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dd0:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
    8dd2:	680b      	ldr	r3, [r1, #0]
    const TfLiteType data_type, OpDataConv* data) {
    8dd4:	b08f      	sub	sp, #60	; 0x3c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    8dd6:	681b      	ldr	r3, [r3, #0]
    const TfLiteType data_type, OpDataConv* data) {
    8dd8:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    8dda:	3b02      	subs	r3, #2
    8ddc:	2b01      	cmp	r3, #1
    const TfLiteType data_type, OpDataConv* data) {
    8dde:	4688      	mov	r8, r1
    8de0:	4617      	mov	r7, r2
    8de2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    8de4:	d90a      	bls.n	8dfc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x30>
    8de6:	4b5e      	ldr	r3, [pc, #376]	; (8f60 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    8de8:	4a5e      	ldr	r2, [pc, #376]	; (8f64 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    8dea:	9300      	str	r3, [sp, #0]
    8dec:	6944      	ldr	r4, [r0, #20]
    8dee:	2357      	movs	r3, #87	; 0x57
    8df0:	495d      	ldr	r1, [pc, #372]	; (8f68 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
    8df2:	47a0      	blx	r4
    8df4:	2001      	movs	r0, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    8df6:	b00f      	add	sp, #60	; 0x3c
    8df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    8dfc:	684b      	ldr	r3, [r1, #4]
    8dfe:	681c      	ldr	r4, [r3, #0]
    8e00:	2c01      	cmp	r4, #1
    8e02:	d00c      	beq.n	8e1e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x52>
    8e04:	2601      	movs	r6, #1
    8e06:	4b59      	ldr	r3, [pc, #356]	; (8f6c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
    8e08:	e9cd 4602 	strd	r4, r6, [sp, #8]
    8e0c:	9301      	str	r3, [sp, #4]
    8e0e:	4b58      	ldr	r3, [pc, #352]	; (8f70 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
    8e10:	4a54      	ldr	r2, [pc, #336]	; (8f64 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    8e12:	9300      	str	r3, [sp, #0]
    8e14:	6944      	ldr	r4, [r0, #20]
    8e16:	2358      	movs	r3, #88	; 0x58
    8e18:	4956      	ldr	r1, [pc, #344]	; (8f74 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
    8e1a:	47a0      	blx	r4
    8e1c:	e7ea      	b.n	8df4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
    8e1e:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
    8e22:	930a      	str	r3, [sp, #40]	; 0x28
    8e24:	6993      	ldr	r3, [r2, #24]
  auto padding = params.padding;
    8e26:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    8e2a:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
    8e2c:	6953      	ldr	r3, [r2, #20]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    8e2e:	4649      	mov	r1, r9
    8e30:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8e32:	930c      	str	r3, [sp, #48]	; 0x30
    8e34:	9300      	str	r3, [sp, #0]
    8e36:	4658      	mov	r0, fp
    8e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e3a:	f005 fdc2 	bl	e9c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    8e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8e42:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    8e44:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    8e46:	9300      	str	r3, [sp, #0]
    8e48:	4658      	mov	r0, fp
    8e4a:	4653      	mov	r3, sl
    8e4c:	f005 fdb9 	bl	e9c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    8e50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  int total_padding =
    8e52:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e56:	f1c2 0201 	rsb	r2, r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    8e5a:	3b01      	subs	r3, #1
  int total_padding =
    8e5c:	fb01 2303 	mla	r3, r1, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
    8e60:	3801      	subs	r0, #1
  int total_padding =
    8e62:	fb0a 3a00 	mla	sl, sl, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    8e66:	9b19      	ldr	r3, [sp, #100]	; 0x64
  int total_padding =
    8e68:	f1c9 0901 	rsb	r9, r9, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    8e6c:	1e58      	subs	r0, r3, #1
  int total_padding =
    8e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  total_padding = total_padding > 0 ? total_padding : 0;
    8e70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int total_padding =
    8e74:	fb03 9900 	mla	r9, r3, r0, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
    8e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    8e7a:	4641      	mov	r1, r8
    8e7c:	1e58      	subs	r0, r3, #1
  int total_padding =
    8e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e80:	fb03 9000 	mla	r0, r3, r0, r9
  total_padding = total_padding > 0 ? total_padding : 0;
    8e84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  return total_padding / 2;
    8e88:	1043      	asrs	r3, r0, #1
      padding, &out_height, &out_width);
    8e8a:	6033      	str	r3, [r6, #0]
    8e8c:	ea4f 036a 	mov.w	r3, sl, asr #1
    8e90:	6073      	str	r3, [r6, #4]
  *offset = total_padding % 2;
    8e92:	f000 0001 	and.w	r0, r0, #1
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    8e96:	4b38      	ldr	r3, [pc, #224]	; (8f78 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
      padding, &out_height, &out_width);
    8e98:	60b0      	str	r0, [r6, #8]
    8e9a:	f00a 0001 	and.w	r0, sl, #1
    8e9e:	60f0      	str	r0, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    8ea0:	681a      	ldr	r2, [r3, #0]
    8ea2:	4628      	mov	r0, r5
    8ea4:	f005 fb60 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    8ea8:	4682      	mov	sl, r0
    8eaa:	b940      	cbnz	r0, 8ebe <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
    8eac:	4b33      	ldr	r3, [pc, #204]	; (8f7c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
    8eae:	696e      	ldr	r6, [r5, #20]
    8eb0:	9300      	str	r3, [sp, #0]
    8eb2:	2362      	movs	r3, #98	; 0x62
  TF_LITE_ENSURE(context, output != nullptr);
    8eb4:	4628      	mov	r0, r5
    8eb6:	4a2b      	ldr	r2, [pc, #172]	; (8f64 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    8eb8:	492b      	ldr	r1, [pc, #172]	; (8f68 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
    8eba:	47b0      	blx	r6
    8ebc:	e79a      	b.n	8df4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    8ebe:	4b30      	ldr	r3, [pc, #192]	; (8f80 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>)
    8ec0:	4641      	mov	r1, r8
    8ec2:	4628      	mov	r0, r5
    8ec4:	681a      	ldr	r2, [r3, #0]
    8ec6:	f005 fb4f 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    8eca:	4681      	mov	r9, r0
    8ecc:	b920      	cbnz	r0, 8ed8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10c>
    8ece:	4b2d      	ldr	r3, [pc, #180]	; (8f84 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b8>)
    8ed0:	696e      	ldr	r6, [r5, #20]
    8ed2:	9300      	str	r3, [sp, #0]
    8ed4:	2364      	movs	r3, #100	; 0x64
    8ed6:	e7ed      	b.n	8eb4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    8ed8:	4b2b      	ldr	r3, [pc, #172]	; (8f88 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>)
    8eda:	4641      	mov	r1, r8
    8edc:	681a      	ldr	r2, [r3, #0]
    8ede:	4628      	mov	r0, r5
    8ee0:	f005 fb64 	bl	e5ac <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    8ee4:	4b29      	ldr	r3, [pc, #164]	; (8f8c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c0>)
    8ee6:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    8ee8:	4683      	mov	fp, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    8eea:	681a      	ldr	r2, [r3, #0]
    8eec:	4628      	mov	r0, r5
    8eee:	f005 fb4c 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    8ef2:	4680      	mov	r8, r0
    8ef4:	b920      	cbnz	r0, 8f00 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x134>
    8ef6:	4b26      	ldr	r3, [pc, #152]	; (8f90 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c4>)
    8ef8:	696e      	ldr	r6, [r5, #20]
    8efa:	9300      	str	r3, [sp, #0]
    8efc:	2368      	movs	r3, #104	; 0x68
    8efe:	e7d9      	b.n	8eb4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
    8f00:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
    8f04:	2b01      	cmp	r3, #1
    8f06:	d10a      	bne.n	8f1e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x152>
  data->input_zero_point = input->params.zero_point;
    8f08:	f8da 3010 	ldr.w	r3, [sl, #16]
  return kTfLiteOk;
    8f0c:	2000      	movs	r0, #0
  data->input_zero_point = input->params.zero_point;
    8f0e:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
    8f10:	f8d9 3010 	ldr.w	r3, [r9, #16]
    8f14:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
    8f16:	f8d8 3010 	ldr.w	r3, [r8, #16]
    8f1a:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    8f1c:	e76b      	b.n	8df6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    8f1e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    8f22:	3710      	adds	r7, #16
    8f24:	691b      	ldr	r3, [r3, #16]
    8f26:	464a      	mov	r2, r9
    8f28:	9308      	str	r3, [sp, #32]
    8f2a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8f2c:	4651      	mov	r1, sl
    8f2e:	9307      	str	r3, [sp, #28]
    8f30:	6a73      	ldr	r3, [r6, #36]	; 0x24
    8f32:	e9cd 0700 	strd	r0, r7, [sp]
    8f36:	9306      	str	r3, [sp, #24]
    8f38:	f106 0330 	add.w	r3, r6, #48	; 0x30
    8f3c:	9305      	str	r3, [sp, #20]
    8f3e:	f106 032c 	add.w	r3, r6, #44	; 0x2c
    8f42:	9304      	str	r3, [sp, #16]
    8f44:	f106 0320 	add.w	r3, r6, #32
    8f48:	9303      	str	r3, [sp, #12]
    8f4a:	f106 031c 	add.w	r3, r6, #28
    8f4e:	9302      	str	r3, [sp, #8]
    8f50:	4628      	mov	r0, r5
    8f52:	465b      	mov	r3, fp
    8f54:	f7fe fac8 	bl	74e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    8f58:	2800      	cmp	r0, #0
    8f5a:	d0d5      	beq.n	8f08 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x13c>
    8f5c:	e74b      	b.n	8df6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    8f5e:	bf00      	nop
    8f60:	00064e25 	.word	0x00064e25
    8f64:	00064f31 	.word	0x00064f31
    8f68:	00064540 	.word	0x00064540
    8f6c:	0006530b 	.word	0x0006530b
    8f70:	00064e49 	.word	0x00064e49
    8f74:	00064747 	.word	0x00064747
    8f78:	00062a08 	.word	0x00062a08
    8f7c:	00064e5d 	.word	0x00064e5d
    8f80:	00062a10 	.word	0x00062a10
    8f84:	00064e6e 	.word	0x00064e6e
    8f88:	00062a04 	.word	0x00062a04
    8f8c:	00062a0c 	.word	0x00062a0c
    8f90:	00064e80 	.word	0x00064e80

00008f94 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    8f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    8f98:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    8f9c:	4604      	mov	r4, r0
    8f9e:	460d      	mov	r5, r1
    8fa0:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    8fa2:	f1b8 0f00 	cmp.w	r8, #0
    8fa6:	d101      	bne.n	8fac <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18>
    8fa8:	f006 ff51 	bl	fe4e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    8fac:	f8d1 9014 	ldr.w	r9, [r1, #20]
    8fb0:	f1b9 0f00 	cmp.w	r9, #0
    8fb4:	d0f8      	beq.n	8fa8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    8fb6:	2200      	movs	r2, #0
    8fb8:	f005 fae7 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    8fbc:	4683      	mov	fp, r0
    8fbe:	b960      	cbnz	r0, 8fda <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x46>
    8fc0:	4b49      	ldr	r3, [pc, #292]	; (90e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x154>)
    8fc2:	6965      	ldr	r5, [r4, #20]
    8fc4:	9300      	str	r3, [sp, #0]
    8fc6:	2387      	movs	r3, #135	; 0x87
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
  TF_LITE_ENSURE(context, input != nullptr);
    8fc8:	4620      	mov	r0, r4
    8fca:	4a48      	ldr	r2, [pc, #288]	; (90ec <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    8fcc:	4948      	ldr	r1, [pc, #288]	; (90f0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    8fce:	47a8      	blx	r5
    8fd0:	2701      	movs	r7, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    8fd2:	4638      	mov	r0, r7
    8fd4:	b00f      	add	sp, #60	; 0x3c
    8fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kDepthwiseConvInputTensor);
    8fda:	2200      	movs	r2, #0
    8fdc:	4629      	mov	r1, r5
    8fde:	4620      	mov	r0, r4
    8fe0:	f005 fac2 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    8fe4:	4607      	mov	r7, r0
    8fe6:	b920      	cbnz	r0, 8ff2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    8fe8:	4b42      	ldr	r3, [pc, #264]	; (90f4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>)
    8fea:	6965      	ldr	r5, [r4, #20]
    8fec:	9300      	str	r3, [sp, #0]
    8fee:	238a      	movs	r3, #138	; 0x8a
    8ff0:	e7ea      	b.n	8fc8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x34>
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    8ff2:	2201      	movs	r2, #1
    8ff4:	4629      	mov	r1, r5
    8ff6:	4620      	mov	r0, r4
    8ff8:	f005 fab6 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    8ffc:	4606      	mov	r6, r0
    8ffe:	b920      	cbnz	r0, 900a <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x76>
    9000:	4b3d      	ldr	r3, [pc, #244]	; (90f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    9002:	6965      	ldr	r5, [r4, #20]
    9004:	9300      	str	r3, [sp, #0]
    9006:	238d      	movs	r3, #141	; 0x8d
    9008:	e7de      	b.n	8fc8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x34>
  const int filter_width = filter->dims->data[2];
    900a:	6882      	ldr	r2, [r0, #8]
  const int input_width = input->dims->data[2];
    900c:	68bb      	ldr	r3, [r7, #8]
  const int output_width = output->dims->data[2];
    900e:	f8db 1008 	ldr.w	r1, [fp, #8]
  const int input_height = input->dims->data[1];
    9012:	e9d3 3a02 	ldrd	r3, sl, [r3, #8]
    9016:	9309      	str	r3, [sp, #36]	; 0x24
  const int filter_width = filter->dims->data[2];
    9018:	68d3      	ldr	r3, [r2, #12]
  const int output_height = output->dims->data[1];
    901a:	f8d1 b008 	ldr.w	fp, [r1, #8]
  const int filter_width = filter->dims->data[2];
    901e:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_height = filter->dims->data[1];
    9020:	6893      	ldr	r3, [r2, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    9022:	4620      	mov	r0, r4
  const int filter_height = filter->dims->data[1];
    9024:	930b      	str	r3, [sp, #44]	; 0x2c
  const int output_width = output->dims->data[2];
    9026:	68cb      	ldr	r3, [r1, #12]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    9028:	6911      	ldr	r1, [r2, #16]
    902a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    902c:	0089      	lsls	r1, r1, #2
  const int output_width = output->dims->data[2];
    902e:	930c      	str	r3, [sp, #48]	; 0x30
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    9030:	910d      	str	r1, [sp, #52]	; 0x34
    9032:	4790      	blx	r2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    9034:	990d      	ldr	r1, [sp, #52]	; 0x34
  data->per_channel_output_multiplier =
    9036:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    903a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    903c:	4620      	mov	r0, r4
    903e:	4790      	blx	r2
  if (input->type == kTfLiteInt8) {
    9040:	7839      	ldrb	r1, [r7, #0]
  data->per_channel_output_shift =
    9042:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
  if (input->type == kTfLiteInt8) {
    9046:	2909      	cmp	r1, #9
    9048:	d13a      	bne.n	90c0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    904a:	f896 7030 	ldrb.w	r7, [r6, #48]	; 0x30
    904e:	2f01      	cmp	r7, #1
    9050:	d00d      	beq.n	906e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xda>
    9052:	2501      	movs	r5, #1
    9054:	4b29      	ldr	r3, [pc, #164]	; (90fc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    9056:	4620      	mov	r0, r4
    9058:	9301      	str	r3, [sp, #4]
    905a:	4b29      	ldr	r3, [pc, #164]	; (9100 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    905c:	e9cd 7502 	strd	r7, r5, [sp, #8]
    9060:	9300      	str	r3, [sp, #0]
    9062:	6966      	ldr	r6, [r4, #20]
    9064:	23a1      	movs	r3, #161	; 0xa1
    9066:	4a21      	ldr	r2, [pc, #132]	; (90ec <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    9068:	4926      	ldr	r1, [pc, #152]	; (9104 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    906a:	47b0      	blx	r6
    906c:	e7b0      	b.n	8fd0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
    const auto* affine_quantization =
    906e:	6b72      	ldr	r2, [r6, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    9070:	2a00      	cmp	r2, #0
    9072:	d099      	beq.n	8fa8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    9074:	6813      	ldr	r3, [r2, #0]
    9076:	2b00      	cmp	r3, #0
    9078:	d096      	beq.n	8fa8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    907a:	6850      	ldr	r0, [r2, #4]
    907c:	2800      	cmp	r0, #0
    907e:	d093      	beq.n	8fa8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TF_LITE_ENSURE(
    9080:	681a      	ldr	r2, [r3, #0]
    9082:	2a01      	cmp	r2, #1
    9084:	d00c      	beq.n	90a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x10c>
    9086:	68b6      	ldr	r6, [r6, #8]
    9088:	6936      	ldr	r6, [r6, #16]
    908a:	42b2      	cmp	r2, r6
    908c:	d008      	beq.n	90a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x10c>
    908e:	4b1e      	ldr	r3, [pc, #120]	; (9108 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    9090:	4620      	mov	r0, r4
    9092:	9300      	str	r3, [sp, #0]
    9094:	6965      	ldr	r5, [r4, #20]
    9096:	23aa      	movs	r3, #170	; 0xaa
    9098:	4a14      	ldr	r2, [pc, #80]	; (90ec <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    909a:	4915      	ldr	r1, [pc, #84]	; (90f0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
    909c:	47a8      	blx	r5
    909e:	e798      	b.n	8fd2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    90a0:	6800      	ldr	r0, [r0, #0]
    90a2:	4282      	cmp	r2, r0
    90a4:	d00c      	beq.n	90c0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    90a6:	4b19      	ldr	r3, [pc, #100]	; (910c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    90a8:	e9cd 2002 	strd	r2, r0, [sp, #8]
    90ac:	9301      	str	r3, [sp, #4]
    90ae:	4b18      	ldr	r3, [pc, #96]	; (9110 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    90b0:	4620      	mov	r0, r4
    90b2:	9300      	str	r3, [sp, #0]
    90b4:	6965      	ldr	r5, [r4, #20]
    90b6:	23af      	movs	r3, #175	; 0xaf
    90b8:	4a0c      	ldr	r2, [pc, #48]	; (90ec <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x158>)
    90ba:	4912      	ldr	r1, [pc, #72]	; (9104 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    90bc:	47a8      	blx	r5
    90be:	e788      	b.n	8fd2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    90c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    90c2:	e9cd 1805 	strd	r1, r8, [sp, #20]
    90c6:	9303      	str	r3, [sp, #12]
    90c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    90ca:	464a      	mov	r2, r9
    90cc:	9302      	str	r3, [sp, #8]
    90ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    90d0:	4629      	mov	r1, r5
    90d2:	9301      	str	r3, [sp, #4]
    90d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    90d6:	4620      	mov	r0, r4
    90d8:	9300      	str	r3, [sp, #0]
    90da:	f8cd b010 	str.w	fp, [sp, #16]
    90de:	4653      	mov	r3, sl
    90e0:	f7ff fe74 	bl	8dcc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    90e4:	4607      	mov	r7, r0
    90e6:	e774      	b.n	8fd2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    90e8:	00064e80 	.word	0x00064e80
    90ec:	00064f31 	.word	0x00064f31
    90f0:	00064540 	.word	0x00064540
    90f4:	00064e5d 	.word	0x00064e5d
    90f8:	00064e6e 	.word	0x00064e6e
    90fc:	00064761 	.word	0x00064761
    9100:	00064794 	.word	0x00064794
    9104:	00064747 	.word	0x00064747
    9108:	00064f8d 	.word	0x00064f8d
    910c:	00064f0b 	.word	0x00064f0b
    9110:	0006483d 	.word	0x0006483d

00009114 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    9118:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    911c:	4604      	mov	r4, r0
    911e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    9120:	f1b9 0f00 	cmp.w	r9, #0
    9124:	d101      	bne.n	912a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
    9126:	f006 fe92 	bl	fe4e <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    912a:	f8d1 a014 	ldr.w	sl, [r1, #20]
    912e:	f1ba 0f00 	cmp.w	sl, #0
    9132:	d0f8      	beq.n	9126 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    9134:	4b2e      	ldr	r3, [pc, #184]	; (91f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
    9136:	681a      	ldr	r2, [r3, #0]
    9138:	f005 fa16 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    913c:	4606      	mov	r6, r0
    913e:	b958      	cbnz	r0, 9158 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
    9140:	4b2c      	ldr	r3, [pc, #176]	; (91f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
    9142:	6965      	ldr	r5, [r4, #20]
    9144:	9300      	str	r3, [sp, #0]
    9146:	232f      	movs	r3, #47	; 0x2f
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
    9148:	4620      	mov	r0, r4
    914a:	4a2b      	ldr	r2, [pc, #172]	; (91f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
    914c:	492b      	ldr	r1, [pc, #172]	; (91fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
    914e:	47a8      	blx	r5
    9150:	2001      	movs	r0, #1
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    9152:	b004      	add	sp, #16
    9154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
    9158:	4b29      	ldr	r3, [pc, #164]	; (9200 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
    915a:	4629      	mov	r1, r5
    915c:	4620      	mov	r0, r4
    915e:	681a      	ldr	r2, [r3, #0]
    9160:	f005 fa02 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    9164:	4607      	mov	r7, r0
    9166:	b920      	cbnz	r0, 9172 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    9168:	4b26      	ldr	r3, [pc, #152]	; (9204 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
    916a:	6965      	ldr	r5, [r4, #20]
    916c:	9300      	str	r3, [sp, #0]
    916e:	2332      	movs	r3, #50	; 0x32
    9170:	e7ea      	b.n	9148 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    9172:	4b25      	ldr	r3, [pc, #148]	; (9208 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    9174:	4629      	mov	r1, r5
    9176:	681a      	ldr	r2, [r3, #0]
    9178:	4620      	mov	r0, r4
    917a:	f005 fa17 	bl	e5ac <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    917e:	4b23      	ldr	r3, [pc, #140]	; (920c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    9180:	4629      	mov	r1, r5
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    9182:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    9184:	681a      	ldr	r2, [r3, #0]
    9186:	4620      	mov	r0, r4
    9188:	f005 f9ff 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    918c:	4605      	mov	r5, r0
    918e:	b920      	cbnz	r0, 919a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
    9190:	4b1f      	ldr	r3, [pc, #124]	; (9210 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    9192:	6965      	ldr	r5, [r4, #20]
    9194:	9300      	str	r3, [sp, #0]
    9196:	2336      	movs	r3, #54	; 0x36
    9198:	e7d6      	b.n	9148 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    919a:	7830      	ldrb	r0, [r6, #0]
    919c:	782b      	ldrb	r3, [r5, #0]
    919e:	4283      	cmp	r3, r0
    91a0:	d012      	beq.n	91c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb4>
    91a2:	6967      	ldr	r7, [r4, #20]
    91a4:	f7fe f854 	bl	7250 <TfLiteTypeGetName>
    91a8:	4606      	mov	r6, r0
    91aa:	7828      	ldrb	r0, [r5, #0]
    91ac:	f7fe f850 	bl	7250 <TfLiteTypeGetName>
    91b0:	4b18      	ldr	r3, [pc, #96]	; (9214 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    91b2:	e9cd 6002 	strd	r6, r0, [sp, #8]
    91b6:	9301      	str	r3, [sp, #4]
    91b8:	4b17      	ldr	r3, [pc, #92]	; (9218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    91ba:	4620      	mov	r0, r4
    91bc:	9300      	str	r3, [sp, #0]
    91be:	4a0e      	ldr	r2, [pc, #56]	; (91f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
    91c0:	2338      	movs	r3, #56	; 0x38
    91c2:	4916      	ldr	r1, [pc, #88]	; (921c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    91c4:	47b8      	blx	r7
    91c6:	e7c3      	b.n	9150 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    91c8:	783a      	ldrb	r2, [r7, #0]
    91ca:	429a      	cmp	r2, r3
    91cc:	d004      	beq.n	91d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
    91ce:	4620      	mov	r0, r4
    91d0:	6963      	ldr	r3, [r4, #20]
    91d2:	4913      	ldr	r1, [pc, #76]	; (9220 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    91d4:	4798      	blx	r3
    91d6:	e7bb      	b.n	9150 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    91d8:	f89a 1000 	ldrb.w	r1, [sl]
    91dc:	4633      	mov	r3, r6
    91de:	4620      	mov	r0, r4
    91e0:	e9cd 5902 	strd	r5, r9, [sp, #8]
    91e4:	e9cd 7800 	strd	r7, r8, [sp]
    91e8:	f005 fe15 	bl	ee16 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    91ec:	e7b1      	b.n	9152 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    91ee:	bf00      	nop
    91f0:	00062a28 	.word	0x00062a28
    91f4:	00064e5d 	.word	0x00064e5d
    91f8:	0006500f 	.word	0x0006500f
    91fc:	00064540 	.word	0x00064540
    9200:	00062a30 	.word	0x00062a30
    9204:	00064e6e 	.word	0x00064e6e
    9208:	00062a24 	.word	0x00062a24
    920c:	00062a2c 	.word	0x00062a2c
    9210:	00064e80 	.word	0x00064e80
    9214:	00064d22 	.word	0x00064d22
    9218:	00064d2f 	.word	0x00064d2f
    921c:	00065065 	.word	0x00065065
    9220:	0006507f 	.word	0x0006507f

00009224 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    9224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int32_t input_offset = params.input_offset;
  const int32_t filter_offset = params.weights_offset;
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
    9228:	e9d0 b403 	ldrd	fp, r4, [r0, #12]
    int8_t* output_data) {
    922c:	461e      	mov	r6, r3
  const int32_t input_offset = params.input_offset;
    922e:	6803      	ldr	r3, [r0, #0]
    int8_t* output_data) {
    9230:	b08d      	sub	sp, #52	; 0x34
  const int32_t input_offset = params.input_offset;
    9232:	9306      	str	r3, [sp, #24]
  const int32_t filter_offset = params.weights_offset;
    9234:	6843      	ldr	r3, [r0, #4]
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    9236:	6837      	ldr	r7, [r6, #0]
  const int32_t filter_offset = params.weights_offset;
    9238:	9307      	str	r3, [sp, #28]
  const int32_t output_offset = params.output_offset;
    923a:	6883      	ldr	r3, [r0, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    923c:	2f01      	cmp	r7, #1
  const int32_t output_offset = params.output_offset;
    923e:	9308      	str	r3, [sp, #32]
  const int32_t output_activation_min = params.quantized_activation_min;
    9240:	6943      	ldr	r3, [r0, #20]
    int8_t* output_data) {
    9242:	4615      	mov	r5, r2
  const int32_t output_activation_min = params.quantized_activation_min;
    9244:	9301      	str	r3, [sp, #4]
  const int32_t output_activation_max = params.quantized_activation_max;
    9246:	6983      	ldr	r3, [r0, #24]
    int8_t* output_data) {
    9248:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
  const int32_t output_activation_max = params.quantized_activation_max;
    924c:	9302      	str	r3, [sp, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    924e:	dc01      	bgt.n	9254 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x30>
    9250:	f006 fdfd 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    9254:	f8d8 3000 	ldr.w	r3, [r8]
    9258:	2b02      	cmp	r3, #2
    925a:	d1f9      	bne.n	9250 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x2c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    925c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    9260:	4293      	cmp	r3, r2
    9262:	dcf5      	bgt.n	9250 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x2c>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
    9264:	2100      	movs	r1, #0
    9266:	4640      	mov	r0, r8
    9268:	f005 fa4b 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
    926c:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
    926e:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = output_shape.Dims(1);
    9270:	4640      	mov	r0, r8
    9272:	f005 fa46 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    9276:	1eb9      	subs	r1, r7, #2
  const int output_depth = output_shape.Dims(1);
    9278:	4682      	mov	sl, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    927a:	4630      	mov	r0, r6
    927c:	f005 fa41 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    9280:	4550      	cmp	r0, sl
    9282:	dbe5      	blt.n	9250 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x2c>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    9284:	1e79      	subs	r1, r7, #1
    9286:	4630      	mov	r0, r6
    9288:	f005 fa3b 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    928c:	2100      	movs	r1, #0
    928e:	2c00      	cmp	r4, #0
    9290:	f1c4 0300 	rsb	r3, r4, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    9294:	f04f 0201 	mov.w	r2, #1
    9298:	bfc8      	it	gt
    929a:	2300      	movgt	r3, #0
  for (int b = 0; b < batches; ++b) {
    929c:	468c      	mov	ip, r1
    929e:	409a      	lsls	r2, r3
    92a0:	3a01      	subs	r2, #1
    92a2:	9204      	str	r2, [sp, #16]
  int left_shift = shift > 0 ? shift : 0;
    92a4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  return a >> offset;
    92a8:	1052      	asrs	r2, r2, #1
    92aa:	920a      	str	r2, [sp, #40]	; 0x28
    92ac:	9500      	str	r5, [sp, #0]
    92ae:	940b      	str	r4, [sp, #44]	; 0x2c
    92b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    92b2:	45a4      	cmp	ip, r4
    92b4:	f280 8087 	bge.w	93c6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x1a2>
    92b8:	2700      	movs	r7, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    92ba:	463e      	mov	r6, r7
    92bc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    92be:	eb04 0e01 	add.w	lr, r4, r1
    92c2:	4556      	cmp	r6, sl
    92c4:	da78      	bge.n	93b8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x194>
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
    92c6:	9c16      	ldr	r4, [sp, #88]	; 0x58
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    92c8:	9a00      	ldr	r2, [sp, #0]
    92ca:	443c      	add	r4, r7
    92cc:	9403      	str	r4, [sp, #12]
      int32_t acc = 0;
    92ce:	2400      	movs	r4, #0
      for (int d = 0; d < accum_depth; ++d) {
    92d0:	4625      	mov	r5, r4
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    92d2:	9205      	str	r2, [sp, #20]
      for (int d = 0; d < accum_depth; ++d) {
    92d4:	4285      	cmp	r5, r0
    92d6:	da0f      	bge.n	92f8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xd4>
        int32_t input_val = input_data[b * accum_depth + d];
    92d8:	9a05      	ldr	r2, [sp, #20]
      for (int d = 0; d < accum_depth; ++d) {
    92da:	3501      	adds	r5, #1
        int32_t input_val = input_data[b * accum_depth + d];
    92dc:	f912 9b01 	ldrsb.w	r9, [r2], #1
    92e0:	9205      	str	r2, [sp, #20]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    92e2:	9a03      	ldr	r2, [sp, #12]
    92e4:	f912 8b01 	ldrsb.w	r8, [r2], #1
    92e8:	9203      	str	r2, [sp, #12]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    92ea:	9a07      	ldr	r2, [sp, #28]
    92ec:	4490      	add	r8, r2
    92ee:	9a06      	ldr	r2, [sp, #24]
    92f0:	4491      	add	r9, r2
    92f2:	fb09 4408 	mla	r4, r9, r8, r4
      for (int d = 0; d < accum_depth; ++d) {
    92f6:	e7ed      	b.n	92d4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xb0>
      }
      if (bias_data) {
    92f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    92fa:	b112      	cbz	r2, 9302 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xde>
        acc += bias_data[out_c];
    92fc:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
    9300:	442c      	add	r4, r5
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    9302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9304:	4094      	lsls	r4, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    9306:	45a3      	cmp	fp, r4
    9308:	d12f      	bne.n	936a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x146>
    930a:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
    930e:	f1d2 0900 	rsbs	r9, r2, #0
    9312:	eb49 0902 	adc.w	r9, r9, r2
  std::int64_t ab_64 = a_64 * b_64;
    9316:	fb84 450b 	smull	r4, r5, r4, fp
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    931a:	2c00      	cmp	r4, #0
    931c:	f175 0200 	sbcs.w	r2, r5, #0
    9320:	4a2a      	ldr	r2, [pc, #168]	; (93cc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x1a8>)
    9322:	bfac      	ite	ge
    9324:	f04f 4880 	movge.w	r8, #1073741824	; 0x40000000
    9328:	4690      	movlt	r8, r2
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    932a:	f1b9 0f00 	cmp.w	r9, #0
    932e:	d11f      	bne.n	9370 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x14c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    9330:	eb14 0408 	adds.w	r4, r4, r8
    9334:	eb45 75e8 	adc.w	r5, r5, r8, asr #31
    9338:	2c00      	cmp	r4, #0
    933a:	f175 0200 	sbcs.w	r2, r5, #0
    933e:	46a0      	mov	r8, r4
    9340:	46a9      	mov	r9, r5
    9342:	da05      	bge.n	9350 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x12c>
    9344:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9348:	eb14 0802 	adds.w	r8, r4, r2
    934c:	f145 0900 	adc.w	r9, r5, #0
    9350:	ea4f 74d8 	mov.w	r4, r8, lsr #31
    9354:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
  assert(exponent >= 0);
    9358:	2b00      	cmp	r3, #0
    935a:	da0c      	bge.n	9376 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x152>
    935c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    9360:	4b1b      	ldr	r3, [pc, #108]	; (93d0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x1ac>)
    9362:	4a1c      	ldr	r2, [pc, #112]	; (93d4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x1b0>)
  assert(exponent <= 31);
    9364:	481c      	ldr	r0, [pc, #112]	; (93d8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x1b4>)
    9366:	f002 fb37 	bl	b9d8 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    936a:	f04f 0900 	mov.w	r9, #0
    936e:	e7d2      	b.n	9316 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xf2>
    9370:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    9374:	e7f0      	b.n	9358 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x134>
  assert(exponent <= 31);
    9376:	2b1f      	cmp	r3, #31
    9378:	4407      	add	r7, r0
    937a:	dd04      	ble.n	9386 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x162>
    937c:	f240 1167 	movw	r1, #359	; 0x167
    9380:	4b16      	ldr	r3, [pc, #88]	; (93dc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x1b8>)
    9382:	4a14      	ldr	r2, [pc, #80]	; (93d4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x1b0>)
    9384:	e7ee      	b.n	9364 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x140>
  return a & b;
    9386:	9a04      	ldr	r2, [sp, #16]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    9388:	3601      	adds	r6, #1
    938a:	ea02 0804 	and.w	r8, r2, r4
  return a + b;
    938e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9390:	eb02 75d4 	add.w	r5, r2, r4, lsr #31
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
    9394:	9a08      	ldr	r2, [sp, #32]
  return a >> offset;
    9396:	411c      	asrs	r4, r3
    9398:	4414      	add	r4, r2
    939a:	45a8      	cmp	r8, r5
    939c:	bfd4      	ite	le
    939e:	4625      	movle	r5, r4
    93a0:	1c65      	addgt	r5, r4, #1
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    93a2:	9a01      	ldr	r2, [sp, #4]
    93a4:	4295      	cmp	r5, r2
    93a6:	bfb8      	it	lt
    93a8:	4615      	movlt	r5, r2
    93aa:	9a02      	ldr	r2, [sp, #8]
    93ac:	4295      	cmp	r5, r2
    93ae:	bfa8      	it	ge
    93b0:	4615      	movge	r5, r2
    93b2:	f80e 5b01 	strb.w	r5, [lr], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    93b6:	e784      	b.n	92c2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x9e>
  for (int b = 0; b < batches; ++b) {
    93b8:	9a00      	ldr	r2, [sp, #0]
    93ba:	f10c 0c01 	add.w	ip, ip, #1
    93be:	4402      	add	r2, r0
    93c0:	4451      	add	r1, sl
    93c2:	9200      	str	r2, [sp, #0]
    93c4:	e774      	b.n	92b0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x8c>
    }
  }
}
    93c6:	b00d      	add	sp, #52	; 0x34
    93c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93cc:	c0000001 	.word	0xc0000001
    93d0:	00064af7 	.word	0x00064af7
    93d4:	00064b05 	.word	0x00064b05
    93d8:	00064b5a 	.word	0x00064b5a
    93dc:	00064bb3 	.word	0x00064bb3

000093e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    93e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    93e4:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    93e8:	4605      	mov	r5, r0
    93ea:	4689      	mov	r9, r1
    93ec:	b0be      	sub	sp, #248	; 0xf8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    93ee:	f1ba 0f00 	cmp.w	sl, #0
    93f2:	d101      	bne.n	93f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
    93f4:	f006 fd2b 	bl	fe4e <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    93f8:	4b55      	ldr	r3, [pc, #340]	; (9550 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x170>)
  return GetMutableEvalInput(context, node, index);
    93fa:	681a      	ldr	r2, [r3, #0]
    93fc:	f005 f965 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    9400:	4b54      	ldr	r3, [pc, #336]	; (9554 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x174>)
    9402:	4649      	mov	r1, r9
    9404:	681a      	ldr	r2, [r3, #0]
    9406:	4606      	mov	r6, r0
    9408:	4628      	mov	r0, r5
    940a:	f005 f95e 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    940e:	4b52      	ldr	r3, [pc, #328]	; (9558 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>)
    9410:	4680      	mov	r8, r0
    9412:	4649      	mov	r1, r9
    9414:	4628      	mov	r0, r5
    9416:	681a      	ldr	r2, [r3, #0]
    9418:	f005 f957 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    941c:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
    941e:	2d00      	cmp	r5, #0
    9420:	d0e8      	beq.n	93f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    9422:	4a4e      	ldr	r2, [pc, #312]	; (955c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17c>)
    9424:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9428:	6812      	ldr	r2, [r2, #0]
    942a:	4628      	mov	r0, r5
    942c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9430:	6859      	ldr	r1, [r3, #4]
    9432:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    9434:	4790      	blx	r2
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
    9436:	f8d9 1010 	ldr.w	r1, [r9, #16]
    943a:	4604      	mov	r4, r0
    943c:	2900      	cmp	r1, #0
    943e:	d0d9      	beq.n	93f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
  const auto& data =
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    9440:	7a30      	ldrb	r0, [r6, #8]
    9442:	2801      	cmp	r0, #1
    9444:	d00b      	beq.n	945e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7e>
    9446:	2809      	cmp	r0, #9
    9448:	d048      	beq.n	94dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
    }

    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    944a:	696c      	ldr	r4, [r5, #20]
    944c:	f7fd ff00 	bl	7250 <TfLiteTypeGetName>
    9450:	7a33      	ldrb	r3, [r6, #8]
    9452:	4602      	mov	r2, r0
    9454:	4942      	ldr	r1, [pc, #264]	; (9560 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>)
    9456:	4628      	mov	r0, r5
    9458:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    945a:	2001      	movs	r0, #1
    945c:	e03b      	b.n	94d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf6>
          FullyConnectedParamsFloat(params->activation),
    945e:	f89a 1000 	ldrb.w	r1, [sl]
    9462:	a82a      	add	r0, sp, #168	; 0xa8
    9464:	f000 f88c 	bl	9580 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    9468:	4631      	mov	r1, r6
    946a:	a806      	add	r0, sp, #24
    946c:	f005 fd0c 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    9470:	4641      	mov	r1, r8
    9472:	a80c      	add	r0, sp, #48	; 0x30
  return reinterpret_cast<const T*>(tensor->data.raw);
    9474:	f8d6 9000 	ldr.w	r9, [r6]
    9478:	f005 fd06 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    947c:	f1b8 0f00 	cmp.w	r8, #0
    9480:	d0b8      	beq.n	93f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
          tflite::micro::GetTensorShape(bias),
    9482:	ad12      	add	r5, sp, #72	; 0x48
    9484:	4639      	mov	r1, r7
    9486:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
    9488:	f8d8 8000 	ldr.w	r8, [r8]
    948c:	f005 fcfc 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    9490:	2f00      	cmp	r7, #0
    9492:	d0af      	beq.n	93f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
          tflite::micro::GetTensorShape(output),
    9494:	ae34      	add	r6, sp, #208	; 0xd0
    9496:	4621      	mov	r1, r4
    9498:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
    949a:	683f      	ldr	r7, [r7, #0]
    949c:	f005 fcf4 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    94a0:	b104      	cbz	r4, 94a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    94a2:	6824      	ldr	r4, [r4, #0]
      tflite::reference_ops::FullyConnected(
    94a4:	464a      	mov	r2, r9
    94a6:	ab0c      	add	r3, sp, #48	; 0x30
    94a8:	a906      	add	r1, sp, #24
    94aa:	a82a      	add	r0, sp, #168	; 0xa8
    94ac:	e9cd 6403 	strd	r6, r4, [sp, #12]
    94b0:	e9cd 5701 	strd	r5, r7, [sp, #4]
    94b4:	f8cd 8000 	str.w	r8, [sp]
    94b8:	f005 fc0f 	bl	ecda <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
    94bc:	4630      	mov	r0, r6
    94be:	f005 f8f9 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    94c2:	4628      	mov	r0, r5
    94c4:	f005 f8f6 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    94c8:	a80c      	add	r0, sp, #48	; 0x30
    94ca:	f005 f8f3 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    94ce:	a806      	add	r0, sp, #24
          tflite::micro::GetTensorShape(input),
    94d0:	f005 f8f0 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
    }
  }
  return kTfLiteOk;
    94d4:	2000      	movs	r0, #0
}
    94d6:	b03e      	add	sp, #248	; 0xf8
    94d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          FullyConnectedParamsQuantized(data),
    94dc:	a834      	add	r0, sp, #208	; 0xd0
    94de:	f005 fc89 	bl	edf4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    94e2:	4631      	mov	r1, r6
    94e4:	a818      	add	r0, sp, #96	; 0x60
    94e6:	f005 fccf 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    94ea:	4641      	mov	r1, r8
    94ec:	a81e      	add	r0, sp, #120	; 0x78
  return reinterpret_cast<const T*>(tensor->data.raw);
    94ee:	f8d6 9000 	ldr.w	r9, [r6]
    94f2:	f005 fcc9 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    94f6:	f1b8 0f00 	cmp.w	r8, #0
    94fa:	f43f af7b 	beq.w	93f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
          tflite::micro::GetTensorShape(bias),
    94fe:	ad24      	add	r5, sp, #144	; 0x90
    9500:	4639      	mov	r1, r7
    9502:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
    9504:	f8d8 8000 	ldr.w	r8, [r8]
    9508:	f005 fcbe 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    950c:	2f00      	cmp	r7, #0
    950e:	f43f af71 	beq.w	93f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14>
          tflite::micro::GetTensorShape(output),
    9512:	ae2a      	add	r6, sp, #168	; 0xa8
    9514:	4621      	mov	r1, r4
    9516:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
    9518:	683f      	ldr	r7, [r7, #0]
    951a:	f005 fcb5 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    951e:	b104      	cbz	r4, 9522 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
    9520:	6824      	ldr	r4, [r4, #0]
      tflite::reference_integer_ops::FullyConnected(
    9522:	464a      	mov	r2, r9
    9524:	ab1e      	add	r3, sp, #120	; 0x78
    9526:	a918      	add	r1, sp, #96	; 0x60
    9528:	a834      	add	r0, sp, #208	; 0xd0
    952a:	e9cd 6403 	strd	r6, r4, [sp, #12]
    952e:	e9cd 5701 	strd	r5, r7, [sp, #4]
    9532:	f8cd 8000 	str.w	r8, [sp]
    9536:	f7ff fe75 	bl	9224 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>
          tflite::micro::GetTensorShape(output),
    953a:	4630      	mov	r0, r6
    953c:	f005 f8ba 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    9540:	4628      	mov	r0, r5
    9542:	f005 f8b7 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    9546:	a81e      	add	r0, sp, #120	; 0x78
    9548:	f005 f8b4 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    954c:	a818      	add	r0, sp, #96	; 0x60
    954e:	e7bf      	b.n	94d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    9550:	00062a28 	.word	0x00062a28
    9554:	00062a30 	.word	0x00062a30
    9558:	00062a24 	.word	0x00062a24
    955c:	00062a2c 	.word	0x00062a2c
    9560:	00064db7 	.word	0x00064db7

00009564 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    9564:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    9566:	4604      	mov	r4, r0
TfLiteRegistration Register_FULLY_CONNECTED() {
    9568:	4606      	mov	r6, r0
          /*version=*/0};
    956a:	4d04      	ldr	r5, [pc, #16]	; (957c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x18>)
    956c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    956e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9570:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    9578:	4630      	mov	r0, r6
    957a:	bd70      	pop	{r4, r5, r6, pc}
    957c:	00010da0 	.word	0x00010da0

00009580 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  if (activation == kTfLiteActRelu) {
    9580:	2901      	cmp	r1, #1
    9582:	d103      	bne.n	958c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
    9584:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    9586:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
    9588:	4b09      	ldr	r3, [pc, #36]	; (95b0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
    958a:	e004      	b.n	9596 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
    958c:	2903      	cmp	r1, #3
    958e:	d104      	bne.n	959a <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
    9590:	2300      	movs	r3, #0
    9592:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
    9594:	4b07      	ldr	r3, [pc, #28]	; (95b4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    9596:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
    9598:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    959a:	2902      	cmp	r1, #2
    959c:	d104      	bne.n	95a8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
    959e:	4b06      	ldr	r3, [pc, #24]	; (95b8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
    95a0:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
    95a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    95a6:	e7f6      	b.n	9596 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    95a8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    95ac:	e7eb      	b.n	9586 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
    95ae:	bf00      	nop
    95b0:	7f7fffff 	.word	0x7f7fffff
    95b4:	40c00000 	.word	0x40c00000
    95b8:	bf800000 	.word	0xbf800000

000095bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    95bc:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
    95be:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    95c0:	d11f      	bne.n	9602 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x46>
    95c2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    95c6:	425c      	negs	r4, r3
    95c8:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
    95ca:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    95ce:	2a00      	cmp	r2, #0
    95d0:	f173 0100 	sbcs.w	r1, r3, #0
    95d4:	490d      	ldr	r1, [pc, #52]	; (960c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x50>)
    95d6:	bfa8      	it	ge
    95d8:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    95dc:	b99c      	cbnz	r4, 9606 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    95de:	1852      	adds	r2, r2, r1
    95e0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    95e4:	2a00      	cmp	r2, #0
    95e6:	f173 0100 	sbcs.w	r1, r3, #0
    95ea:	da06      	bge.n	95fa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
    95ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    95f0:	1852      	adds	r2, r2, r1
    95f2:	f04f 0100 	mov.w	r1, #0
    95f6:	eb41 0303 	adc.w	r3, r1, r3
    95fa:	0fd0      	lsrs	r0, r2, #31
    95fc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
    9600:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    9602:	2400      	movs	r4, #0
    9604:	e7e1      	b.n	95ca <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
    9606:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    960a:	e7f9      	b.n	9600 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>
    960c:	c0000001 	.word	0xc0000001

00009610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
    9610:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
    9612:	b508      	push	{r3, lr}
  assert(exponent >= 0);
    9614:	da06      	bge.n	9624 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
    9616:	f44f 71b3 	mov.w	r1, #358	; 0x166
    961a:	4b0c      	ldr	r3, [pc, #48]	; (964c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
    961c:	4a0c      	ldr	r2, [pc, #48]	; (9650 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
  assert(exponent <= 31);
    961e:	480d      	ldr	r0, [pc, #52]	; (9654 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
    9620:	f002 f9da 	bl	b9d8 <__assert_func>
    9624:	291f      	cmp	r1, #31
    9626:	dd04      	ble.n	9632 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
    9628:	f240 1167 	movw	r1, #359	; 0x167
    962c:	4b0a      	ldr	r3, [pc, #40]	; (9658 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
    962e:	4a08      	ldr	r2, [pc, #32]	; (9650 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    9630:	e7f5      	b.n	961e <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    9632:	2301      	movs	r3, #1
    9634:	408b      	lsls	r3, r1
    9636:	3b01      	subs	r3, #1
  return a & b;
    9638:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
    963c:	105b      	asrs	r3, r3, #1
  return a + b;
    963e:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
    9642:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
    9644:	429a      	cmp	r2, r3
    9646:	bfc8      	it	gt
    9648:	3001      	addgt	r0, #1
    964a:	bd08      	pop	{r3, pc}
    964c:	00064af7 	.word	0x00064af7
    9650:	00064b05 	.word	0x00064b05
    9654:	00064b5a 	.word	0x00064b5a
    9658:	00064bb3 	.word	0x00064bb3

0000965c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
    965c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9660:	2300      	movs	r3, #0
    9662:	1812      	adds	r2, r2, r0
    9664:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    9668:	1c59      	adds	r1, r3, #1
    966a:	bf05      	ittet	eq
    966c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    9670:	4611      	moveq	r1, r2
    9672:	2101      	movne	r1, #1
    9674:	4618      	moveq	r0, r3
    9676:	bf18      	it	ne
    9678:	2000      	movne	r0, #0

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    967a:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  return static_cast<std::int32_t>((sum + sign) / 2);
    967e:	1854      	adds	r4, r2, r1
    9680:	eb43 0500 	adc.w	r5, r3, r0
    9684:	0feb      	lsrs	r3, r5, #31
    9686:	18e4      	adds	r4, r4, r3
    9688:	f145 0500 	adc.w	r5, r5, #0
    968c:	ea4f 0854 	mov.w	r8, r4, lsr #1
    9690:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    9694:	4640      	mov	r0, r8
    9696:	493b      	ldr	r1, [pc, #236]	; (9784 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x128>)
    9698:	f7ff ff90 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    969c:	2503      	movs	r5, #3
    969e:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    96a2:	4621      	mov	r1, r4
    96a4:	4640      	mov	r0, r8
    96a6:	f7ff ff89 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    96aa:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    96ae:	4620      	mov	r0, r4
    96b0:	f7ff ff84 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    96b4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    96b8:	da56      	bge.n	9768 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10c>
    96ba:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    96be:	f04f 31ff 	mov.w	r1, #4294967295
    96c2:	f04f 0c00 	mov.w	ip, #0
    96c6:	bfc8      	it	gt
    96c8:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    96ca:	ea4f 7be0 	mov.w	fp, r0, asr #31
    96ce:	0082      	lsls	r2, r0, #2
    96d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
    96d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
    96d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    96dc:	f173 30ff 	sbcs.w	r0, r3, #4294967295
    96e0:	db46      	blt.n	9770 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x114>
             : wide_shifted > max ? max
    96e2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    96e6:	f04f 0b00 	mov.w	fp, #0
    96ea:	4592      	cmp	sl, r2
    96ec:	eb7b 0003 	sbcs.w	r0, fp, r3
    96f0:	bfb8      	it	lt
    96f2:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    96f6:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
    96fa:	401a      	ands	r2, r3
  return ~a;
    96fc:	43cb      	mvns	r3, r1
  return a & b;
    96fe:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  return a ^ b;
    9702:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
    9706:	401a      	ands	r2, r3
    9708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
    970c:	404a      	eors	r2, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
    970e:	3d01      	subs	r5, #1
  return a + b;
    9710:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
    9712:	d1c6      	bne.n	96a2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x46>
  return a ? BitNot(zero) : zero;
    9714:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    9718:	da2d      	bge.n	9776 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x11a>
    971a:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    971e:	f04f 30ff 	mov.w	r0, #4294967295
    9722:	462a      	mov	r2, r5
    9724:	bfc8      	it	gt
    9726:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    9728:	1926      	adds	r6, r4, r4
    972a:	ea4f 75e4 	mov.w	r5, r4, asr #31
    972e:	eb45 0705 	adc.w	r7, r5, r5
             ? min
    9732:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    9736:	f177 33ff 	sbcs.w	r3, r7, #4294967295
    973a:	db20      	blt.n	977e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x122>
             : wide_shifted > max ? max
    973c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    9740:	2500      	movs	r5, #0
    9742:	42b4      	cmp	r4, r6
    9744:	eb75 0307 	sbcs.w	r3, r5, r7
    9748:	bfac      	ite	ge
    974a:	4633      	movge	r3, r6
    974c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
  return ~a;
    9750:	43d6      	mvns	r6, r2
  return a & b;
    9752:	401e      	ands	r6, r3
  return ~a;
    9754:	43c3      	mvns	r3, r0
  return a & b;
    9756:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  return a ^ b;
    975a:	4056      	eors	r6, r2
  return a & b;
    975c:	401e      	ands	r6, r3
    975e:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    9762:	4070      	eors	r0, r6
    9764:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  return a ? BitNot(zero) : zero;
    9768:	f04f 3cff 	mov.w	ip, #4294967295
    976c:	2100      	movs	r1, #0
    976e:	e7ac      	b.n	96ca <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6e>
             ? min
    9770:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9774:	e7bf      	b.n	96f6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9a>
  return a ? BitNot(zero) : zero;
    9776:	f04f 32ff 	mov.w	r2, #4294967295
    977a:	4628      	mov	r0, r5
    977c:	e7d4      	b.n	9728 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xcc>
             ? min
    977e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    9782:	e7e5      	b.n	9750 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf4>
    9784:	c3c3c3c4 	.word	0xc3c3c3c4

00009788 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    9788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    978c:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    978e:	4814      	ldr	r0, [pc, #80]	; (97e0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
    9790:	f005 fbd4 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    9794:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    9796:	4813      	ldr	r0, [pc, #76]	; (97e4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    9798:	f005 fbd0 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
    979c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    97a0:	4680      	mov	r8, r0
  F x2 = x * x;
    97a2:	4621      	mov	r1, r4
    97a4:	4620      	mov	r0, r4
    97a6:	f005 fbce 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
    97aa:	4621      	mov	r1, r4
  F x2 = x * x;
    97ac:	4605      	mov	r5, r0
  F x3 = x2 * x;
    97ae:	f005 fbca 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
    97b2:	4629      	mov	r1, r5
  F x3 = x2 * x;
    97b4:	4607      	mov	r7, r0
  F x4 = x2 * x2;
    97b6:	4628      	mov	r0, r5
    97b8:	f005 fbc5 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    97bc:	2102      	movs	r1, #2
    97be:	f7ff ff27 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
    97c2:	4641      	mov	r1, r8
    97c4:	4438      	add	r0, r7
    97c6:	f005 fbbe 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    97ca:	2101      	movs	r1, #1
    97cc:	4428      	add	r0, r5
    97ce:	f7ff ff1f 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
    97d2:	1821      	adds	r1, r4, r0
    97d4:	4630      	mov	r0, r6
    97d6:	f005 fbb6 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
    97da:	4430      	add	r0, r6
    97dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97e0:	70f5a894 	.word	0x70f5a894
    97e4:	2aaaaaab 	.word	0x2aaaaaab

000097e8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    97e8:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
  return a - b;
    97ec:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    97f0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    97f2:	0160      	lsls	r0, r4, #5
    97f4:	f7ff ffc8 	bl	9788 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    97f8:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    97fa:	4842      	ldr	r0, [pc, #264]	; (9904 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    97fc:	f005 fb9e 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    9800:	4601      	mov	r1, r0
    9802:	4630      	mov	r0, r6
    9804:	f005 fb9f 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
    9808:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
    980a:	f3c4 6b00 	ubfx	fp, r4, #24, #1
    980e:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
    9812:	f10b 3bff 	add.w	fp, fp, #4294967295
    9816:	ea00 0909 	and.w	r9, r0, r9
    981a:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
    981e:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    9822:	4839      	ldr	r0, [pc, #228]	; (9908 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    9824:	f005 fb8a 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    9828:	4601      	mov	r1, r0
    982a:	4650      	mov	r0, sl
    982c:	f005 fb8b 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    9830:	f3c4 6940 	ubfx	r9, r4, #25, #1
    9834:	f1c9 0700 	rsb	r7, r9, #0
  return a & b;
    9838:	4007      	ands	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    983a:	4834      	ldr	r0, [pc, #208]	; (990c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    983c:	f005 fb7e 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a & b;
    9840:	f109 39ff 	add.w	r9, r9, #4294967295
    9844:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
    9848:	ea87 0909 	eor.w	r9, r7, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    984c:	4601      	mov	r1, r0
    984e:	4648      	mov	r0, r9
    9850:	f005 fb79 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    9854:	f3c4 6780 	ubfx	r7, r4, #26, #1
    9858:	f1c7 0b00 	rsb	fp, r7, #0
  return a & b;
    985c:	ea00 0b0b 	and.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    9860:	482b      	ldr	r0, [pc, #172]	; (9910 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    9862:	f005 fb6b 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a & b;
    9866:	3f01      	subs	r7, #1
    9868:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    986c:	ea8b 0707 	eor.w	r7, fp, r7
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    9870:	4601      	mov	r1, r0
    9872:	4638      	mov	r0, r7
    9874:	f005 fb67 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    9878:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    987c:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
    9880:	ea00 0909 	and.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    9884:	4823      	ldr	r0, [pc, #140]	; (9914 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    9886:	f005 fb59 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a & b;
    988a:	f10b 3bff 	add.w	fp, fp, #4294967295
    988e:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    9892:	ea89 0b0b 	eor.w	fp, r9, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    9896:	4601      	mov	r1, r0
    9898:	4658      	mov	r0, fp
    989a:	f005 fb54 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    989e:	f3c4 7900 	ubfx	r9, r4, #28, #1
    98a2:	f1c9 0700 	rsb	r7, r9, #0
  return a & b;
    98a6:	4007      	ands	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    98a8:	481b      	ldr	r0, [pc, #108]	; (9918 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    98aa:	f005 fb47 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a & b;
    98ae:	f109 39ff 	add.w	r9, r9, #4294967295
    98b2:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    98b6:	ea87 0909 	eor.w	r9, r7, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    98ba:	4601      	mov	r1, r0
    98bc:	4648      	mov	r0, r9
    98be:	f005 fb42 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    98c2:	f3c4 7740 	ubfx	r7, r4, #29, #1
    98c6:	427e      	negs	r6, r7
  return a & b;
    98c8:	4006      	ands	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    98ca:	20f2      	movs	r0, #242	; 0xf2
    98cc:	f005 fb36 	bl	ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a & b;
    98d0:	3f01      	subs	r7, #1
    98d2:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    98d6:	407e      	eors	r6, r7
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    98d8:	4601      	mov	r1, r0
    98da:	4630      	mov	r0, r6
    98dc:	f005 fb33 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    98e0:	f3c4 7480 	ubfx	r4, r4, #30, #1
    98e4:	4263      	negs	r3, r4
  return a & b;
    98e6:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
    98e8:	fab5 f385 	clz	r3, r5
  return a & b;
    98ec:	3c01      	subs	r4, #1
    98ee:	4034      	ands	r4, r6
  return a ? BitNot(zero) : zero;
    98f0:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    98f2:	4044      	eors	r4, r0
  return a & b;
    98f4:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    98f6:	425b      	negs	r3, r3
  return a & b;
    98f8:	4020      	ands	r0, r4
    98fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    98fe:	4058      	eors	r0, r3
    9900:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
    9904:	63afbe7b 	.word	0x63afbe7b
    9908:	4da2cbf2 	.word	0x4da2cbf2
    990c:	2f16ac6c 	.word	0x2f16ac6c
    9910:	1152aaa4 	.word	0x1152aaa4
    9914:	02582ab7 	.word	0x02582ab7
    9918:	000afe11 	.word	0x000afe11

0000991c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:

namespace tflite {

namespace {

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    991c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9920:	694f      	ldr	r7, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    9922:	4604      	mov	r4, r0
    9924:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9926:	b90f      	cbnz	r7, 992c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x10>
    9928:	f006 fa91 	bl	fe4e <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    992c:	f8d1 8010 	ldr.w	r8, [r1, #16]
    9930:	f1b8 0f00 	cmp.w	r8, #0
    9934:	d0f8      	beq.n	9928 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    9936:	4b17      	ldr	r3, [pc, #92]	; (9994 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x78>)
  return GetMutableEvalInput(context, node, index);
    9938:	681a      	ldr	r2, [r3, #0]
    993a:	f004 fec6 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    993e:	4b16      	ldr	r3, [pc, #88]	; (9998 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7c>)
    9940:	4606      	mov	r6, r0
    9942:	681a      	ldr	r2, [r3, #0]
    9944:	4629      	mov	r1, r5
    9946:	4620      	mov	r0, r4
    9948:	f004 fecd 	bl	e6e6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    994c:	4602      	mov	r2, r0

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
    994e:	7a30      	ldrb	r0, [r6, #8]
    9950:	2801      	cmp	r0, #1
    9952:	d00a      	beq.n	996a <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x4e>
    9954:	2809      	cmp	r0, #9
    9956:	d014      	beq.n	9982 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
      break;
    case kTfLiteInt8:
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    9958:	6965      	ldr	r5, [r4, #20]
    995a:	f7fd fc79 	bl	7250 <TfLiteTypeGetName>
    995e:	490f      	ldr	r1, [pc, #60]	; (999c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x80>)
    9960:	4602      	mov	r2, r0
    9962:	4620      	mov	r0, r4
    9964:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    9966:	2001      	movs	r0, #1
    9968:	e008      	b.n	997c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x60>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    996a:	e9cd 6200 	strd	r6, r2, [sp]
    996e:	4643      	mov	r3, r8
    9970:	463a      	mov	r2, r7
    9972:	4629      	mov	r1, r5
    9974:	4620      	mov	r0, r4
    9976:	f005 fe8c 	bl	f692 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  }
  return kTfLiteOk;
    997a:	2000      	movs	r0, #0
}
    997c:	b002      	add	sp, #8
    997e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    9982:	e9cd 6200 	strd	r6, r2, [sp]
    9986:	4643      	mov	r3, r8
    9988:	463a      	mov	r2, r7
    998a:	4629      	mov	r1, r5
    998c:	4620      	mov	r0, r4
    998e:	f005 feb3 	bl	f6f8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
    9992:	e7f2      	b.n	997a <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x5e>
    9994:	00062a34 	.word	0x00062a34
    9998:	00062a38 	.word	0x00062a38
    999c:	00065106 	.word	0x00065106

000099a0 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    99a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    99a4:	694f      	ldr	r7, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    99a6:	4604      	mov	r4, r0
    99a8:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    99aa:	b90f      	cbnz	r7, 99b0 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
    99ac:	f006 fa4f 	bl	fe4e <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    99b0:	f8d1 8010 	ldr.w	r8, [r1, #16]
    99b4:	f1b8 0f00 	cmp.w	r8, #0
    99b8:	d0f8      	beq.n	99ac <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    99ba:	4b17      	ldr	r3, [pc, #92]	; (9a18 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>)
    99bc:	681a      	ldr	r2, [r3, #0]
    99be:	f004 fe84 	bl	e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    99c2:	4b16      	ldr	r3, [pc, #88]	; (9a1c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>)
    99c4:	4606      	mov	r6, r0
    99c6:	681a      	ldr	r2, [r3, #0]
    99c8:	4629      	mov	r1, r5
    99ca:	4620      	mov	r0, r4
    99cc:	f004 fe8b 	bl	e6e6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    99d0:	4602      	mov	r2, r0

  switch (input->type) {
    99d2:	7a30      	ldrb	r0, [r6, #8]
    99d4:	2801      	cmp	r0, #1
    99d6:	d00a      	beq.n	99ee <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
    99d8:	2809      	cmp	r0, #9
    99da:	d014      	beq.n	9a06 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
      break;
    case kTfLiteInt8:
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    99dc:	6965      	ldr	r5, [r4, #20]
    99de:	f7fd fc37 	bl	7250 <TfLiteTypeGetName>
    99e2:	490f      	ldr	r1, [pc, #60]	; (9a20 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x80>)
    99e4:	4602      	mov	r2, r0
    99e6:	4620      	mov	r0, r4
    99e8:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    99ea:	2001      	movs	r0, #1
    99ec:	e008      	b.n	9a00 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x60>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    99ee:	e9cd 6200 	strd	r6, r2, [sp]
    99f2:	4643      	mov	r3, r8
    99f4:	463a      	mov	r2, r7
    99f6:	4629      	mov	r1, r5
    99f8:	4620      	mov	r0, r4
    99fa:	f005 feb2 	bl	f762 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  }
  return kTfLiteOk;
    99fe:	2000      	movs	r0, #0
}
    9a00:	b002      	add	sp, #8
    9a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    9a06:	e9cd 6200 	strd	r6, r2, [sp]
    9a0a:	4643      	mov	r3, r8
    9a0c:	463a      	mov	r2, r7
    9a0e:	4629      	mov	r1, r5
    9a10:	4620      	mov	r0, r4
    9a12:	f005 fed9 	bl	f7c8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
    9a16:	e7f2      	b.n	99fe <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
    9a18:	00062a34 	.word	0x00062a34
    9a1c:	00062a38 	.word	0x00062a38
    9a20:	0006512f 	.word	0x0006512f

00009a24 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    9a24:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    9a26:	4604      	mov	r4, r0
TfLiteRegistration Register_AVERAGE_POOL_2D() {
    9a28:	4606      	mov	r6, r0
          /*version=*/0};
    9a2a:	4d04      	ldr	r5, [pc, #16]	; (9a3c <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x18>)
    9a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9a30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    9a38:	4630      	mov	r0, r6
    9a3a:	bd70      	pop	{r4, r5, r6, pc}
    9a3c:	00010dc0 	.word	0x00010dc0

00009a40 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:
      params->filter_width, params->padding, &out_height, &out_width);

  return kTfLiteOk;
}

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    9a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9a44:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    9a48:	4605      	mov	r5, r0
    9a4a:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    9a4c:	f1b9 0f00 	cmp.w	r9, #0
    9a50:	d101      	bne.n	9a56 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x16>
    9a52:	f006 f9fc 	bl	fe4e <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    9a56:	690c      	ldr	r4, [r1, #16]
    9a58:	2c00      	cmp	r4, #0
    9a5a:	d0fa      	beq.n	9a52 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x12>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    9a5c:	2200      	movs	r2, #0
    9a5e:	f004 fd83 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    9a62:	4680      	mov	r8, r0
    9a64:	b960      	cbnz	r0, 9a80 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x40>
    9a66:	4b27      	ldr	r3, [pc, #156]	; (9b04 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xc4>)
    9a68:	696c      	ldr	r4, [r5, #20]
    9a6a:	9300      	str	r3, [sp, #0]
    9a6c:	233a      	movs	r3, #58	; 0x3a
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
    9a6e:	4628      	mov	r0, r5
    9a70:	4a25      	ldr	r2, [pc, #148]	; (9b08 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
    9a72:	4926      	ldr	r1, [pc, #152]	; (9b0c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
    9a74:	47a0      	blx	r4
    9a76:	2601      	movs	r6, #1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    9a78:	4630      	mov	r0, r6
    9a7a:	b003      	add	sp, #12
    9a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    9a80:	2200      	movs	r2, #0
    9a82:	4631      	mov	r1, r6
    9a84:	4628      	mov	r0, r5
    9a86:	f004 fd80 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    9a8a:	4607      	mov	r7, r0
    9a8c:	b920      	cbnz	r0, 9a98 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    9a8e:	4b20      	ldr	r3, [pc, #128]	; (9b10 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
    9a90:	696c      	ldr	r4, [r5, #20]
    9a92:	9300      	str	r3, [sp, #0]
    9a94:	233c      	movs	r3, #60	; 0x3c
    9a96:	e7ea      	b.n	9a6e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE_STATUS(
    9a98:	4603      	mov	r3, r0
    9a9a:	4642      	mov	r2, r8
    9a9c:	4649      	mov	r1, r9
    9a9e:	4628      	mov	r0, r5
    9aa0:	9400      	str	r4, [sp, #0]
    9aa2:	f005 fdbb 	bl	f61c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    9aa6:	4606      	mov	r6, r0
    9aa8:	2800      	cmp	r0, #0
    9aaa:	d1e5      	bne.n	9a78 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x38>
  if (input->type == kTfLiteFloat32) {
    9aac:	f898 3000 	ldrb.w	r3, [r8]
    9ab0:	2b01      	cmp	r3, #1
    9ab2:	d118      	bne.n	9ae6 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    9ab4:	f899 3014 	ldrb.w	r3, [r9, #20]
  if (activation == kTfLiteActRelu) {
    9ab8:	2b01      	cmp	r3, #1
    9aba:	d103      	bne.n	9ac4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x84>
    *activation_min = 0;
    9abc:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    9abe:	61a3      	str	r3, [r4, #24]
    *activation_max = std::numeric_limits<T>::max();
    9ac0:	4b14      	ldr	r3, [pc, #80]	; (9b14 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
    9ac2:	e004      	b.n	9ace <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x8e>
  } else if (activation == kTfLiteActRelu6) {
    9ac4:	2b03      	cmp	r3, #3
    9ac6:	d104      	bne.n	9ad2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    *activation_min = 0;
    9ac8:	2300      	movs	r3, #0
    9aca:	61a3      	str	r3, [r4, #24]
    *activation_max = 6;
    9acc:	4b12      	ldr	r3, [pc, #72]	; (9b18 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
    *activation_max = std::numeric_limits<T>::max();
    9ace:	61e3      	str	r3, [r4, #28]
    9ad0:	e7d2      	b.n	9a78 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x38>
  } else if (activation == kTfLiteActReluN1To1) {
    9ad2:	2b02      	cmp	r3, #2
    9ad4:	d104      	bne.n	9ae0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    *activation_min = -1;
    9ad6:	4b11      	ldr	r3, [pc, #68]	; (9b1c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
    9ad8:	61a3      	str	r3, [r4, #24]
    *activation_max = 1;
    9ada:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    9ade:	e7f6      	b.n	9ace <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x8e>
    *activation_min = std::numeric_limits<T>::lowest();
    9ae0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    9ae4:	e7eb      	b.n	9abe <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  } else if (input->type == kTfLiteInt8) {
    9ae6:	2b09      	cmp	r3, #9
    9ae8:	d1c6      	bne.n	9a78 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x38>
    CalculateActivationRangeQuantized(context, params->activation, output,
    9aea:	f104 0314 	add.w	r3, r4, #20
    9aee:	f899 1014 	ldrb.w	r1, [r9, #20]
    9af2:	463a      	mov	r2, r7
    9af4:	9300      	str	r3, [sp, #0]
    9af6:	4628      	mov	r0, r5
    9af8:	f104 0310 	add.w	r3, r4, #16
    9afc:	f7fd fc6a 	bl	73d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    9b00:	e7ba      	b.n	9a78 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x38>
    9b02:	bf00      	nop
    9b04:	00064e5d 	.word	0x00064e5d
    9b08:	00065150 	.word	0x00065150
    9b0c:	00064540 	.word	0x00064540
    9b10:	00064e80 	.word	0x00064e80
    9b14:	7f7fffff 	.word	0x7f7fffff
    9b18:	40c00000 	.word	0x40c00000
    9b1c:	bf800000 	.word	0xbf800000

00009b20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    9b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9b24:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    9b26:	b085      	sub	sp, #20
    9b28:	4604      	mov	r4, r0
    9b2a:	4688      	mov	r8, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    9b2c:	f004 fd1c 	bl	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    9b30:	4607      	mov	r7, r0
    9b32:	b958      	cbnz	r0, 9b4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2c>
    9b34:	4b44      	ldr	r3, [pc, #272]	; (9c48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
    9b36:	6965      	ldr	r5, [r4, #20]
    9b38:	9300      	str	r3, [sp, #0]
    9b3a:	2323      	movs	r3, #35	; 0x23
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
    9b3c:	4620      	mov	r0, r4
    9b3e:	4a43      	ldr	r2, [pc, #268]	; (9c4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
    9b40:	4943      	ldr	r1, [pc, #268]	; (9c50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
    9b42:	47a8      	blx	r5
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    9b44:	2001      	movs	r0, #1
  return kTfLiteOk;
}
    9b46:	b005      	add	sp, #20
    9b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    9b4c:	2200      	movs	r2, #0
    9b4e:	4641      	mov	r1, r8
    9b50:	4620      	mov	r0, r4
    9b52:	f004 fd1a 	bl	e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    9b56:	4606      	mov	r6, r0
    9b58:	b920      	cbnz	r0, 9b64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x44>
    9b5a:	4b3e      	ldr	r3, [pc, #248]	; (9c54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
    9b5c:	6965      	ldr	r5, [r4, #20]
    9b5e:	9300      	str	r3, [sp, #0]
    9b60:	2325      	movs	r3, #37	; 0x25
    9b62:	e7eb      	b.n	9b3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c>
  for (int i = 0; i < dims->size; ++i) {
    9b64:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    9b68:	2201      	movs	r2, #1
    9b6a:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    9b6c:	68bd      	ldr	r5, [r7, #8]
    9b6e:	f855 9b04 	ldr.w	r9, [r5], #4
    9b72:	45e1      	cmp	r9, ip
    9b74:	dd0c      	ble.n	9b90 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
    count *= dims->data[i];
    9b76:	f855 eb04 	ldr.w	lr, [r5], #4
  for (int i = 0; i < dims->size; ++i) {
    9b7a:	f10c 0c01 	add.w	ip, ip, #1
    count *= dims->data[i];
    9b7e:	4670      	mov	r0, lr
    9b80:	17c1      	asrs	r1, r0, #31
    9b82:	4351      	muls	r1, r2
    9b84:	fb0e 1103 	mla	r1, lr, r3, r1
    9b88:	fba2 230e 	umull	r2, r3, r2, lr
    9b8c:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    9b8e:	e7f0      	b.n	9b72 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    9b90:	f8d8 3000 	ldr.w	r3, [r8]
  TfLiteIntArray* output_shape = output->dims;
    9b94:	68b5      	ldr	r5, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    9b96:	681b      	ldr	r3, [r3, #0]
    9b98:	2b01      	cmp	r3, #1
    9b9a:	d105      	bne.n	9ba8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    9b9c:	682b      	ldr	r3, [r5, #0]
    9b9e:	2b01      	cmp	r3, #1
    9ba0:	d102      	bne.n	9ba8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    9ba2:	686b      	ldr	r3, [r5, #4]
    9ba4:	b903      	cbnz	r3, 9ba8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
    output_shape->size = 0;
    9ba6:	602b      	str	r3, [r5, #0]
  for (int i = 0; i < output_shape->size; ++i) {
    9ba8:	46ac      	mov	ip, r5
    9baa:	2000      	movs	r0, #0
  int stretch_dim = -1;
    9bac:	f04f 31ff 	mov.w	r1, #4294967295
  int num_output_elements = 1;
    9bb0:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
    9bb2:	f85c 8b04 	ldr.w	r8, [ip], #4
    9bb6:	4580      	cmp	r8, r0
    9bb8:	dd1a      	ble.n	9bf0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd0>
    int value = output_shape->data[i];
    9bba:	f85c eb04 	ldr.w	lr, [ip], #4
    if (value == -1) {
    9bbe:	f1be 3fff 	cmp.w	lr, #4294967295
    9bc2:	d10f      	bne.n	9be4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    9bc4:	f1b1 3fff 	cmp.w	r1, #4294967295
    9bc8:	d010      	beq.n	9bec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
    9bca:	4b23      	ldr	r3, [pc, #140]	; (9c58 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
    9bcc:	e9cd 1e02 	strd	r1, lr, [sp, #8]
    9bd0:	9301      	str	r3, [sp, #4]
    9bd2:	4b22      	ldr	r3, [pc, #136]	; (9c5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13c>)
    9bd4:	6965      	ldr	r5, [r4, #20]
    9bd6:	9300      	str	r3, [sp, #0]
    9bd8:	233a      	movs	r3, #58	; 0x3a
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    9bda:	4620      	mov	r0, r4
    9bdc:	4a1b      	ldr	r2, [pc, #108]	; (9c4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
    9bde:	4920      	ldr	r1, [pc, #128]	; (9c60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>)
    9be0:	47a8      	blx	r5
    9be2:	e7af      	b.n	9b44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
      num_output_elements *= value;
    9be4:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
    9be8:	3001      	adds	r0, #1
    9bea:	e7e4      	b.n	9bb6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
    9bec:	4601      	mov	r1, r0
    9bee:	e7fb      	b.n	9be8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
  if (stretch_dim != -1) {
    9bf0:	1c48      	adds	r0, r1, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    9bf2:	bf1f      	itttt	ne
    9bf4:	fb92 f0f3 	sdivne	r0, r2, r3
    9bf8:	eb05 0581 	addne.w	r5, r5, r1, lsl #2
    num_output_elements *= output_shape->data[stretch_dim];
    9bfc:	4343      	mulne	r3, r0
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    9bfe:	6068      	strne	r0, [r5, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    9c00:	7831      	ldrb	r1, [r6, #0]
    9c02:	7838      	ldrb	r0, [r7, #0]
    9c04:	4281      	cmp	r1, r0
    9c06:	d012      	beq.n	9c2e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10e>
    9c08:	6967      	ldr	r7, [r4, #20]
    9c0a:	f7fd fb21 	bl	7250 <TfLiteTypeGetName>
    9c0e:	4605      	mov	r5, r0
    9c10:	7830      	ldrb	r0, [r6, #0]
    9c12:	f7fd fb1d 	bl	7250 <TfLiteTypeGetName>
    9c16:	4b13      	ldr	r3, [pc, #76]	; (9c64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x144>)
    9c18:	e9cd 5002 	strd	r5, r0, [sp, #8]
    9c1c:	9301      	str	r3, [sp, #4]
    9c1e:	4b12      	ldr	r3, [pc, #72]	; (9c68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x148>)
    9c20:	4620      	mov	r0, r4
    9c22:	9300      	str	r3, [sp, #0]
    9c24:	4a09      	ldr	r2, [pc, #36]	; (9c4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
    9c26:	2345      	movs	r3, #69	; 0x45
    9c28:	4910      	ldr	r1, [pc, #64]	; (9c6c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14c>)
    9c2a:	47b8      	blx	r7
    9c2c:	e78a      	b.n	9b44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    9c2e:	4293      	cmp	r3, r2
    9c30:	d008      	beq.n	9c44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>
    9c32:	e9cd 2302 	strd	r2, r3, [sp, #8]
    9c36:	4b0e      	ldr	r3, [pc, #56]	; (9c70 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x150>)
    9c38:	6965      	ldr	r5, [r4, #20]
    9c3a:	9301      	str	r3, [sp, #4]
    9c3c:	4b0d      	ldr	r3, [pc, #52]	; (9c74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    9c3e:	9300      	str	r3, [sp, #0]
    9c40:	2346      	movs	r3, #70	; 0x46
    9c42:	e7ca      	b.n	9bda <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
  return kTfLiteOk;
    9c44:	2000      	movs	r0, #0
    9c46:	e77e      	b.n	9b46 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x26>
    9c48:	00064e5d 	.word	0x00064e5d
    9c4c:	000651a5 	.word	0x000651a5
    9c50:	00064540 	.word	0x00064540
    9c54:	00064e80 	.word	0x00064e80
    9c58:	000651f3 	.word	0x000651f3
    9c5c:	000651f6 	.word	0x000651f6
    9c60:	00064747 	.word	0x00064747
    9c64:	00064d22 	.word	0x00064d22
    9c68:	00064d2f 	.word	0x00064d2f
    9c6c:	00065065 	.word	0x00065065
    9c70:	00065202 	.word	0x00065202
    9c74:	00065216 	.word	0x00065216

00009c78 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
    9c78:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    9c7c:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9c7e:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    9c80:	3b01      	subs	r3, #1
    9c82:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    9c84:	460c      	mov	r4, r1
    9c86:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    9c88:	d909      	bls.n	9c9e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    9c8a:	4b19      	ldr	r3, [pc, #100]	; (9cf0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    9c8c:	4a19      	ldr	r2, [pc, #100]	; (9cf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    9c8e:	9300      	str	r3, [sp, #0]
    9c90:	6944      	ldr	r4, [r0, #20]
    9c92:	234b      	movs	r3, #75	; 0x4b
    9c94:	4918      	ldr	r1, [pc, #96]	; (9cf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    9c96:	47a0      	blx	r4
    9c98:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    9c9a:	b005      	add	sp, #20
    9c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    9c9e:	684b      	ldr	r3, [r1, #4]
    9ca0:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    9ca2:	2e01      	cmp	r6, #1
    9ca4:	d00c      	beq.n	9cc0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    9ca6:	2401      	movs	r4, #1
    9ca8:	4b14      	ldr	r3, [pc, #80]	; (9cfc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    9caa:	e9cd 6402 	strd	r6, r4, [sp, #8]
    9cae:	9301      	str	r3, [sp, #4]
    9cb0:	4b13      	ldr	r3, [pc, #76]	; (9d00 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    9cb2:	4a10      	ldr	r2, [pc, #64]	; (9cf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    9cb4:	9300      	str	r3, [sp, #0]
    9cb6:	6945      	ldr	r5, [r0, #20]
    9cb8:	234c      	movs	r3, #76	; 0x4c
    9cba:	4912      	ldr	r1, [pc, #72]	; (9d04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    9cbc:	47a8      	blx	r5
    9cbe:	e7eb      	b.n	9c98 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    9cc0:	f7ff ff2e 	bl	9b20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    9cc4:	2800      	cmp	r0, #0
    9cc6:	d0e8      	beq.n	9c9a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    9cc8:	4621      	mov	r1, r4
    9cca:	4628      	mov	r0, r5
    9ccc:	696f      	ldr	r7, [r5, #20]
    9cce:	f7ff ff27 	bl	9b20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    9cd2:	2300      	movs	r3, #0
    9cd4:	e9cd 0302 	strd	r0, r3, [sp, #8]
    9cd8:	4b0b      	ldr	r3, [pc, #44]	; (9d08 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    9cda:	4628      	mov	r0, r5
    9cdc:	9301      	str	r3, [sp, #4]
    9cde:	4b0b      	ldr	r3, [pc, #44]	; (9d0c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    9ce0:	4a04      	ldr	r2, [pc, #16]	; (9cf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    9ce2:	9300      	str	r3, [sp, #0]
    9ce4:	4907      	ldr	r1, [pc, #28]	; (9d04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    9ce6:	234d      	movs	r3, #77	; 0x4d
    9ce8:	47b8      	blx	r7
    9cea:	4630      	mov	r0, r6
    9cec:	e7d5      	b.n	9c9a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    9cee:	bf00      	nop
    9cf0:	00065229 	.word	0x00065229
    9cf4:	000651a5 	.word	0x000651a5
    9cf8:	00064540 	.word	0x00064540
    9cfc:	0006530b 	.word	0x0006530b
    9d00:	00065256 	.word	0x00065256
    9d04:	00064747 	.word	0x00064747
    9d08:	00065267 	.word	0x00065267
    9d0c:	00065271 	.word	0x00065271

00009d10 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    9d10:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    9d12:	4604      	mov	r4, r0
TfLiteRegistration Register_RESHAPE() {
    9d14:	4606      	mov	r6, r0
          /*version=*/0};
    9d16:	4d04      	ldr	r5, [pc, #16]	; (9d28 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
    9d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9d1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    9d24:	4630      	mov	r0, r6
    9d26:	bd70      	pop	{r4, r5, r6, pc}
    9d28:	00010e00 	.word	0x00010e00

00009d2c <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    9d2c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    9d2e:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
    9d30:	4606      	mov	r6, r0
          /*version=*/0};
    9d32:	4d04      	ldr	r5, [pc, #16]	; (9d44 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
    9d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9d38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    9d40:	4630      	mov	r0, r6
    9d42:	bd70      	pop	{r4, r5, r6, pc}
    9d44:	00010e20 	.word	0x00010e20

00009d48 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
    9d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d4c:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    9d4e:	680e      	ldr	r6, [r1, #0]
                         int16_t* output_data) {
    9d50:	b08f      	sub	sp, #60	; 0x3c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    9d52:	3e01      	subs	r6, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9d54:	4631      	mov	r1, r6
                         int16_t* output_data) {
    9d56:	9205      	str	r2, [sp, #20]
    9d58:	4680      	mov	r8, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9d5a:	461a      	mov	r2, r3
    9d5c:	4620      	mov	r0, r4
                         int16_t* output_data) {
    9d5e:	461d      	mov	r5, r3
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9d60:	f005 f8bc 	bl	eedc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    9d64:	4633      	mov	r3, r6
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9d66:	9003      	str	r0, [sp, #12]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    9d68:	462a      	mov	r2, r5
    9d6a:	4620      	mov	r0, r4
    9d6c:	4631      	mov	r1, r6
    9d6e:	f004 fd0b 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    9d72:	2400      	movs	r4, #0
    9d74:	4683      	mov	fp, r0

  for (int i = 0; i < outer_size; ++i) {
    9d76:	9402      	str	r4, [sp, #8]
    9d78:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    9d7c:	4293      	cmp	r3, r2
    9d7e:	f280 80cc 	bge.w	9f1a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    9d82:	f248 0300 	movw	r3, #32768	; 0x8000
    9d86:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
    9d8a:	9b05      	ldr	r3, [sp, #20]
    9d8c:	2200      	movs	r2, #0
    9d8e:	eb03 0a44 	add.w	sl, r3, r4, lsl #1
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    9d92:	4651      	mov	r1, sl
    9d94:	0066      	lsls	r6, r4, #1
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
    9d96:	f10d 0726 	add.w	r7, sp, #38	; 0x26
    for (int c = 0; c < depth; ++c) {
    9d9a:	455a      	cmp	r2, fp
    9d9c:	da0e      	bge.n	9dbc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    9d9e:	460b      	mov	r3, r1
      if (__a < __b)
    9da0:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
    9da4:	f9b3 5000 	ldrsh.w	r5, [r3]
    9da8:	3102      	adds	r1, #2
    9daa:	4285      	cmp	r5, r0
      return __a;
    9dac:	bfd8      	it	le
    9dae:	463b      	movle	r3, r7
    9db0:	f9b3 3000 	ldrsh.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
    9db4:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    9db6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
    9dba:	e7ee      	b.n	9d9a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x52>
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    for (int c = 0; c < depth; ++c) {
    9dbc:	f04f 0900 	mov.w	r9, #0
  int32_t sym_scaled_diff = scaled_diff + 32767;
    9dc0:	f647 77ff 	movw	r7, #32767	; 0x7fff
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    9dc4:	464d      	mov	r5, r9
    9dc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9dc8:	4433      	add	r3, r6
    9dca:	9301      	str	r3, [sp, #4]
    9dcc:	9304      	str	r3, [sp, #16]
    for (int c = 0; c < depth; ++c) {
    9dce:	45d9      	cmp	r9, fp
    9dd0:	da31      	bge.n	9e36 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xee>
      input_diff, params.input_multiplier, params.input_left_shift);
    9dd2:	e9d8 1602 	ldrd	r1, r6, [r8, #8]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    9dd6:	f93a 3b02 	ldrsh.w	r3, [sl], #2
    9dda:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  int right_shift = shift > 0 ? 0 : -shift;
    9dde:	2e00      	cmp	r6, #0
    9de0:	eba3 0300 	sub.w	r3, r3, r0
  int left_shift = shift > 0 ? shift : 0;
    9de4:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    9de8:	bfcc      	ite	gt
    9dea:	2600      	movgt	r6, #0
    9dec:	4276      	negle	r6, r6
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    9dee:	fa03 f000 	lsl.w	r0, r3, r0
    9df2:	f7ff fbe3 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    9df6:	4631      	mov	r1, r6
    9df8:	f7ff fc0a 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
               static_cast<int32_t>(32767));
    9dfc:	f647 72ff 	movw	r2, #32767	; 0x7fff
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    9e00:	4b47      	ldr	r3, [pc, #284]	; (9f20 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d8>)
  int32_t sym_scaled_diff = scaled_diff + 32767;
    9e02:	4438      	add	r0, r7
      if (__a < __b)
    9e04:	4298      	cmp	r0, r3
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    9e06:	930d      	str	r3, [sp, #52]	; 0x34
  int32_t sym_scaled_diff = scaled_diff + 32767;
    9e08:	900b      	str	r0, [sp, #44]	; 0x2c
      return __a;
    9e0a:	bfac      	ite	ge
    9e0c:	ab0b      	addge	r3, sp, #44	; 0x2c
	return __b;
    9e0e:	ab0d      	addlt	r3, sp, #52	; 0x34
               static_cast<int32_t>(32767));
    9e10:	920c      	str	r2, [sp, #48]	; 0x30
      if (__b < __a)
    9e12:	681a      	ldr	r2, [r3, #0]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    9e14:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    9e18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    9e1c:	bfa8      	it	ge
    9e1e:	ab0c      	addge	r3, sp, #48	; 0x30
    9e20:	f9b3 0000 	ldrsh.w	r0, [r3]
    9e24:	f005 fd33 	bl	f88e <_ZN6tflite26generic_int16_table_lookupEsPKs>
      exp_results_Q015[c] =
    9e28:	9b01      	ldr	r3, [sp, #4]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    9e2a:	4405      	add	r5, r0
      exp_results_Q015[c] =
    9e2c:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
    for (int c = 0; c < depth; ++c) {
    9e30:	f109 0901 	add.w	r9, r9, #1
    9e34:	e7cb      	b.n	9dce <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x86>
template <typename T>
int CountLeadingZeros(T integer_input) {
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
    9e36:	fab5 f685 	clz	r6, r5

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    9e3a:	17e9      	asrs	r1, r5, #31
    9e3c:	1e77      	subs	r7, r6, #1
    9e3e:	f1a6 0221 	sub.w	r2, r6, #33	; 0x21
    9e42:	fa05 f202 	lsl.w	r2, r5, r2
    9e46:	40b9      	lsls	r1, r7
    9e48:	4311      	orrs	r1, r2
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
                 static_cast<int32_t>(32767)));
    9e4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    9e4e:	f1c6 0321 	rsb	r3, r6, #33	; 0x21
    9e52:	fa25 f303 	lsr.w	r3, r5, r3
    9e56:	40bd      	lsls	r5, r7
    9e58:	f515 5500 	adds.w	r5, r5, #8192	; 0x2000
    9e5c:	ea41 0103 	orr.w	r1, r1, r3
    9e60:	f141 0100 	adc.w	r1, r1, #0
         (1 << 13)) >>
    9e64:	0bad      	lsrs	r5, r5, #14
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    9e66:	4b2e      	ldr	r3, [pc, #184]	; (9f20 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d8>)
         (1 << 13)) >>
    9e68:	ea45 4581 	orr.w	r5, r5, r1, lsl #18
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    9e6c:	f5a5 35c0 	sub.w	r5, r5, #98304	; 0x18000
      if (__a < __b)
    9e70:	429d      	cmp	r5, r3
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    9e72:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    9e74:	950a      	str	r5, [sp, #40]	; 0x28
      return __a;
    9e76:	bfac      	ite	ge
    9e78:	ab0a      	addge	r3, sp, #40	; 0x28
	return __b;
    9e7a:	ab0c      	addlt	r3, sp, #48	; 0x30
                 static_cast<int32_t>(32767)));
    9e7c:	920d      	str	r2, [sp, #52]	; 0x34
      if (__b < __a)
    9e7e:	681a      	ldr	r2, [r3, #0]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
    9e80:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
    9e84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    9e88:	bfa8      	it	ge
    9e8a:	ab0d      	addge	r3, sp, #52	; 0x34
    9e8c:	f9b3 0000 	ldrsh.w	r0, [r3]
    9e90:	f005 fcfd 	bl	f88e <_ZN6tflite26generic_int16_table_lookupEsPKs>

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
    9e94:	2201      	movs	r2, #1
      uint8_t right_shift = 31 - headroom_plus_one;
    9e96:	f1c6 031f 	rsb	r3, r6, #31
      int64_t round = 1 << (right_shift - 1);
    9e9a:	b2db      	uxtb	r3, r3
    9e9c:	1e59      	subs	r1, r3, #1
    9e9e:	408a      	lsls	r2, r1
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    9ea0:	4615      	mov	r5, r2
    for (int c = 0; c < depth; ++c) {
    9ea2:	2100      	movs	r1, #0
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    9ea4:	17d6      	asrs	r6, r2, #31
    9ea6:	e9cd 5606 	strd	r5, r6, [sp, #24]
      return __a;
    9eaa:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
	return __b;
    9eae:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	return __b;
    9eb2:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    for (int c = 0; c < depth; ++c) {
    9eb6:	4559      	cmp	r1, fp
    9eb8:	da2a      	bge.n	9f10 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1c8>
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    9eba:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    9ebe:	9a04      	ldr	r2, [sp, #16]
                        round) >>
    9ec0:	f1c3 0c20 	rsb	ip, r3, #32
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    9ec4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
                        round) >>
    9ec8:	f1b3 0520 	subs.w	r5, r3, #32
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    9ecc:	fbc2 6780 	smlalbb	r6, r7, r2, r0
                        round) >>
    9ed0:	fa26 f203 	lsr.w	r2, r6, r3
    9ed4:	fa07 fc0c 	lsl.w	ip, r7, ip
    9ed8:	ea42 020c 	orr.w	r2, r2, ip
    9edc:	bf5c      	itt	pl
    9ede:	fa47 f505 	asrpl.w	r5, r7, r5
    9ee2:	432a      	orrpl	r2, r5
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    9ee4:	2500      	movs	r5, #0
      if (__a < __b)
    9ee6:	42aa      	cmp	r2, r5
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    9ee8:	920b      	str	r2, [sp, #44]	; 0x2c
          std::min(std::max(result, static_cast<int32_t>(0)),
    9eea:	950c      	str	r5, [sp, #48]	; 0x30
	return __b;
    9eec:	bfac      	ite	ge
    9eee:	4652      	movge	r2, sl
    9ef0:	464a      	movlt	r2, r9
                   static_cast<int32_t>(32767)));
    9ef2:	f647 75ff 	movw	r5, #32767	; 0x7fff
    9ef6:	950d      	str	r5, [sp, #52]	; 0x34
      if (__b < __a)
    9ef8:	6815      	ldr	r5, [r2, #0]
    for (int c = 0; c < depth; ++c) {
    9efa:	3101      	adds	r1, #1
    9efc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
	return __b;
    9f00:	bfa8      	it	ge
    9f02:	4672      	movge	r2, lr
      output_data[i * depth + c] = static_cast<int16_t>(
    9f04:	9d01      	ldr	r5, [sp, #4]
    9f06:	6812      	ldr	r2, [r2, #0]
    9f08:	f825 2b02 	strh.w	r2, [r5], #2
    9f0c:	9501      	str	r5, [sp, #4]
    for (int c = 0; c < depth; ++c) {
    9f0e:	e7d2      	b.n	9eb6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x16e>
  for (int i = 0; i < outer_size; ++i) {
    9f10:	9b02      	ldr	r3, [sp, #8]
    9f12:	445c      	add	r4, fp
    9f14:	3301      	adds	r3, #1
    9f16:	9302      	str	r3, [sp, #8]
    9f18:	e72e      	b.n	9d78 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x30>
    }
  }
}
    9f1a:	b00f      	add	sp, #60	; 0x3c
    9f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f20:	ffff8000 	.word	0xffff8000

00009f24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    9f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int32_t input_beta_left_shift = params.input_left_shift;
    9f28:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
inline void Softmax(const SoftmaxParams& params,
    9f2c:	460d      	mov	r5, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    9f2e:	680f      	ldr	r7, [r1, #0]
inline void Softmax(const SoftmaxParams& params,
    9f30:	b08b      	sub	sp, #44	; 0x2c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    9f32:	3f01      	subs	r7, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9f34:	4639      	mov	r1, r7
inline void Softmax(const SoftmaxParams& params,
    9f36:	4614      	mov	r4, r2
  const int diff_min = params.diff_min;
    9f38:	f8d0 b018 	ldr.w	fp, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9f3c:	461a      	mov	r2, r3
    9f3e:	4628      	mov	r0, r5
inline void Softmax(const SoftmaxParams& params,
    9f40:	461e      	mov	r6, r3
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9f42:	f004 ffcb 	bl	eedc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    9f46:	463b      	mov	r3, r7
    9f48:	4632      	mov	r2, r6
    9f4a:	4639      	mov	r1, r7
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    9f4c:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    9f4e:	4628      	mov	r0, r5
    9f50:	f004 fc1a 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  for (int i = 0; i < outer_size; ++i) {
    9f54:	2700      	movs	r7, #0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    9f56:	4605      	mov	r5, r0
    9f58:	0043      	lsls	r3, r0, #1
    9f5a:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9f5c:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    9f5e:	9b00      	ldr	r3, [sp, #0]
    9f60:	429f      	cmp	r7, r3
    9f62:	da7a      	bge.n	a05a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    9f64:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9f68:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
    9f6a:	2200      	movs	r2, #0
    InputT max_in_row = std::numeric_limits<InputT>::min();
    9f6c:	f88d 3017 	strb.w	r3, [sp, #23]
      return __a;
    9f70:	f10d 0e17 	add.w	lr, sp, #23
    for (int c = 0; c < depth; ++c) {
    9f74:	42aa      	cmp	r2, r5
    9f76:	da0e      	bge.n	9f96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x72>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    9f78:	460b      	mov	r3, r1
      if (__a < __b)
    9f7a:	f99d 0017 	ldrsb.w	r0, [sp, #23]
    9f7e:	f993 c000 	ldrsb.w	ip, [r3]
    9f82:	3101      	adds	r1, #1
    9f84:	4584      	cmp	ip, r0
      return __a;
    9f86:	bfd8      	it	le
    9f88:	4673      	movle	r3, lr
    9f8a:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
    9f8e:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    9f90:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
    9f94:	e7ee      	b.n	9f74 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x50>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    9f96:	f04f 0800 	mov.w	r8, #0
    9f9a:	4622      	mov	r2, r4
    for (int c = 0; c < depth; ++c) {
    9f9c:	4643      	mov	r3, r8
    9f9e:	42ab      	cmp	r3, r5
    9fa0:	da17      	bge.n	9fd2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xae>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    9fa2:	f912 0b01 	ldrsb.w	r0, [r2], #1
    9fa6:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32_t input_diff =
    9faa:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    9fac:	4583      	cmp	fp, r0
    9fae:	dc0e      	bgt.n	9fce <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    9fb0:	4649      	mov	r1, r9
    9fb2:	fa00 f00a 	lsl.w	r0, r0, sl
    9fb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    9fba:	f7ff faff 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    9fbe:	f7ff fc13 	bl	97e8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    9fc2:	210c      	movs	r1, #12
    9fc4:	f7ff fb24 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    9fc8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    9fcc:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
    9fce:	3301      	adds	r3, #1
    9fd0:	e7e5      	b.n	9f9e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7a>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    9fd2:	4640      	mov	r0, r8
    9fd4:	aa06      	add	r2, sp, #24
    9fd6:	210c      	movs	r1, #12
    9fd8:	f005 fcdd 	bl	f996 <_ZN6tflite13GetReciprocalEiiPi>
    9fdc:	4622      	mov	r2, r4
    9fde:	4680      	mov	r8, r0
    for (int c = 0; c < depth; ++c) {
    9fe0:	2300      	movs	r3, #0
    9fe2:	42ab      	cmp	r3, r5
    9fe4:	da34      	bge.n	a050 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    9fe6:	f912 0b01 	ldrsb.w	r0, [r2], #1
    9fea:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32_t input_diff =
    9fee:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    9ff0:	4583      	cmp	fp, r0
    9ff2:	dc2a      	bgt.n	a04a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    9ff4:	4649      	mov	r1, r9
    9ff6:	fa00 f00a 	lsl.w	r0, r0, sl
    9ffa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    9ffe:	f7ff fadd 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    a002:	f7ff fbf1 	bl	97e8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    a006:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    a008:	4640      	mov	r0, r8
    a00a:	f004 ff9c 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
    a00e:	9906      	ldr	r1, [sp, #24]
    a010:	310f      	adds	r1, #15
    a012:	f7ff fafd 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    a016:	f647 73ff 	movw	r3, #32767	; 0x7fff
            unsat_output +
    a01a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
    a01e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        const int32_t shifted_output =
    a022:	9007      	str	r0, [sp, #28]
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    a024:	480e      	ldr	r0, [pc, #56]	; (a060 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13c>)
      return __a;
    a026:	bfb8      	it	lt
    a028:	a907      	addlt	r1, sp, #28
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    a02a:	9308      	str	r3, [sp, #32]
	return __b;
    a02c:	bfa8      	it	ge
    a02e:	a908      	addge	r1, sp, #32
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    a030:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
    a032:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
    a034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if (__a < __b)
    a038:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
    a03c:	bfb8      	it	lt
    a03e:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    a040:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    a042:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
    a046:	3301      	adds	r3, #1
    a048:	e7cb      	b.n	9fe2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbe>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    a04a:	f248 0100 	movw	r1, #32768	; 0x8000
    a04e:	e7f8      	b.n	a042 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
  for (int i = 0; i < outer_size; ++i) {
    a050:	9b01      	ldr	r3, [sp, #4]
    a052:	3701      	adds	r7, #1
    a054:	442c      	add	r4, r5
    a056:	441e      	add	r6, r3
    a058:	e781      	b.n	9f5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
    a05a:	b00b      	add	sp, #44	; 0x2c
    a05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a060:	ffff8000 	.word	0xffff8000

0000a064 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    a064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a068:	460c      	mov	r4, r1
  TFLITE_DCHECK(context != nullptr);
    a06a:	4680      	mov	r8, r0
    a06c:	b09c      	sub	sp, #112	; 0x70
    a06e:	b908      	cbnz	r0, a074 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
    a070:	f005 feed 	bl	fe4e <abort>
  TFLITE_DCHECK(node != nullptr);
    a074:	2900      	cmp	r1, #0
    a076:	d0fb      	beq.n	a070 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    a078:	680a      	ldr	r2, [r1, #0]
    a07a:	6d43      	ldr	r3, [r0, #84]	; 0x54
    a07c:	6851      	ldr	r1, [r2, #4]
    a07e:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
    a080:	6862      	ldr	r2, [r4, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
    a082:	4607      	mov	r7, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
    a084:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    a088:	4640      	mov	r0, r8
    a08a:	6851      	ldr	r1, [r2, #4]
    a08c:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
    a08e:	6924      	ldr	r4, [r4, #16]
    a090:	4606      	mov	r6, r0
    a092:	2c00      	cmp	r4, #0
    a094:	d0ec      	beq.n	a070 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
    a096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a098:	ad0e      	add	r5, sp, #56	; 0x38
    a09a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a09c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a09e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a0a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a0a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    a0a4:	e894 0003 	ldmia.w	r4, {r0, r1}
    a0a8:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
    a0ac:	7a38      	ldrb	r0, [r7, #8]
    a0ae:	2807      	cmp	r0, #7
    a0b0:	d048      	beq.n	a144 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe0>
    a0b2:	2809      	cmp	r0, #9
    a0b4:	d01d      	beq.n	a0f2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8e>
    a0b6:	2801      	cmp	r0, #1
    a0b8:	d157      	bne.n	a16a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
          op_data, tflite::micro::GetTensorShape(input),
    a0ba:	4639      	mov	r1, r7
    a0bc:	a802      	add	r0, sp, #8
    a0be:	f004 fee3 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
    a0c2:	4631      	mov	r1, r6
    a0c4:	a808      	add	r0, sp, #32
  return reinterpret_cast<const T*>(tensor->data.raw);
    a0c6:	683c      	ldr	r4, [r7, #0]
    a0c8:	f004 fede 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    a0cc:	b106      	cbz	r6, a0d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
    a0ce:	6836      	ldr	r6, [r6, #0]
      tflite::reference_ops::Softmax(
    a0d0:	4622      	mov	r2, r4
    a0d2:	ab08      	add	r3, sp, #32
    a0d4:	a902      	add	r1, sp, #8
    a0d6:	a80e      	add	r0, sp, #56	; 0x38
    a0d8:	9600      	str	r6, [sp, #0]
    a0da:	f005 fbea 	bl	f8b2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
    a0de:	a808      	add	r0, sp, #32
    a0e0:	f004 fae8 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
    a0e4:	a802      	add	r0, sp, #8
        op_data, tflite::micro::GetTensorShape(input),
    a0e6:	f004 fae5 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    a0ea:	2000      	movs	r0, #0
}
    a0ec:	b01c      	add	sp, #112	; 0x70
    a0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (output->type == kTfLiteInt16) {
    a0f2:	7a33      	ldrb	r3, [r6, #8]
          op_data, tflite::micro::GetTensorShape(input),
    a0f4:	4639      	mov	r1, r7
    if (output->type == kTfLiteInt16) {
    a0f6:	2b07      	cmp	r3, #7
          op_data, tflite::micro::GetTensorShape(input),
    a0f8:	a808      	add	r0, sp, #32
    if (output->type == kTfLiteInt16) {
    a0fa:	d113      	bne.n	a124 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc0>
          op_data, tflite::micro::GetTensorShape(input),
    a0fc:	f004 fec4 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
    a100:	4631      	mov	r1, r6
    a102:	a802      	add	r0, sp, #8
  return reinterpret_cast<const T*>(tensor->data.raw);
    a104:	683c      	ldr	r4, [r7, #0]
    a106:	f004 febf 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    a10a:	6833      	ldr	r3, [r6, #0]
    a10c:	4622      	mov	r2, r4
    a10e:	9300      	str	r3, [sp, #0]
    a110:	a908      	add	r1, sp, #32
    a112:	ab02      	add	r3, sp, #8
    a114:	a80e      	add	r0, sp, #56	; 0x38
    a116:	f7ff ff05 	bl	9f24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
    a11a:	a802      	add	r0, sp, #8
    a11c:	f004 faca 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
    a120:	a808      	add	r0, sp, #32
    a122:	e7e0      	b.n	a0e6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
          op_data, tflite::micro::GetTensorShape(input),
    a124:	f004 feb0 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
    a128:	4631      	mov	r1, r6
    a12a:	a802      	add	r0, sp, #8
    a12c:	683c      	ldr	r4, [r7, #0]
    a12e:	f004 feab 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    a132:	6833      	ldr	r3, [r6, #0]
    a134:	4622      	mov	r2, r4
    a136:	9300      	str	r3, [sp, #0]
    a138:	a908      	add	r1, sp, #32
    a13a:	ab02      	add	r3, sp, #8
    a13c:	a80e      	add	r0, sp, #56	; 0x38
    a13e:	f005 fc35 	bl	f9ac <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    a142:	e7ea      	b.n	a11a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
        op_data, tflite::micro::GetTensorShape(input),
    a144:	4639      	mov	r1, r7
    a146:	a808      	add	r0, sp, #32
    a148:	f004 fe9e 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(output),
    a14c:	4631      	mov	r1, r6
    a14e:	a802      	add	r0, sp, #8
    a150:	683c      	ldr	r4, [r7, #0]
    a152:	f004 fe99 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    a156:	b106      	cbz	r6, a15a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xf6>
    a158:	6836      	ldr	r6, [r6, #0]
    tflite::reference_ops::SoftmaxInt16(
    a15a:	4622      	mov	r2, r4
    a15c:	9600      	str	r6, [sp, #0]
    a15e:	ab02      	add	r3, sp, #8
    a160:	a908      	add	r1, sp, #32
    a162:	a80e      	add	r0, sp, #56	; 0x38
    a164:	f7ff fdf0 	bl	9d48 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
    a168:	e7d7      	b.n	a11a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    a16a:	f8d8 4014 	ldr.w	r4, [r8, #20]
    a16e:	f7fd f86f 	bl	7250 <TfLiteTypeGetName>
    a172:	7a3b      	ldrb	r3, [r7, #8]
    a174:	4602      	mov	r2, r0
    a176:	4902      	ldr	r1, [pc, #8]	; (a180 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11c>)
    a178:	4640      	mov	r0, r8
    a17a:	47a0      	blx	r4
      return kTfLiteError;
    a17c:	2001      	movs	r0, #1
    a17e:	e7b5      	b.n	a0ec <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    a180:	00064db7 	.word	0x00064db7

0000a184 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
    a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a188:	b08d      	sub	sp, #52	; 0x34
    a18a:	9303      	str	r3, [sp, #12]
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
    a18c:	9b16      	ldr	r3, [sp, #88]	; 0x58
                    const int num) {
    a18e:	4604      	mov	r4, r0
  float step = (max - min) / (num - 1);
    a190:	3b01      	subs	r3, #1
    a192:	4610      	mov	r0, r2
    a194:	9300      	str	r3, [sp, #0]
                    const int num) {
    a196:	4616      	mov	r6, r2
    a198:	9102      	str	r1, [sp, #8]
  float step = (max - min) / (num - 1);
    a19a:	f7f6 fcaf 	bl	afc <__aeabi_fsub>
    a19e:	4605      	mov	r5, r0
    a1a0:	9800      	ldr	r0, [sp, #0]
    a1a2:	f7f6 fd61 	bl	c68 <__aeabi_i2f>
    a1a6:	4601      	mov	r1, r0
    a1a8:	4628      	mov	r0, r5
    a1aa:	f7f6 fe65 	bl	e78 <__aeabi_fdiv>
  float half_step = step / 2.0f;
    a1ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  float step = (max - min) / (num - 1);
    a1b2:	4683      	mov	fp, r0
  float half_step = step / 2.0f;
    a1b4:	f7f6 fdac 	bl	d10 <__aeabi_fmul>
  for (int i = 0; i < num - 1; i++) {
    a1b8:	2500      	movs	r5, #0
    a1ba:	f04f 4a47 	mov.w	sl, #3338665984	; 0xc7000000
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    a1be:	f04f 478e 	mov.w	r7, #1191182336	; 0x47000000
    a1c2:	9b03      	ldr	r3, [sp, #12]
    a1c4:	f8df 9138 	ldr.w	r9, [pc, #312]	; a300 <_ZN6tflite7gen_lutEPFffEffPsi+0x17c>
    a1c8:	3b02      	subs	r3, #2
  float half_step = step / 2.0f;
    a1ca:	9004      	str	r0, [sp, #16]
  for (int i = 0; i < num - 1; i++) {
    a1cc:	9301      	str	r3, [sp, #4]
    a1ce:	9b00      	ldr	r3, [sp, #0]
    a1d0:	42ab      	cmp	r3, r5
    a1d2:	dd6c      	ble.n	a2ae <_ZN6tflite7gen_lutEPFffEffPsi+0x12a>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    a1d4:	4628      	mov	r0, r5
    a1d6:	f7f6 fd47 	bl	c68 <__aeabi_i2f>
    a1da:	4659      	mov	r1, fp
    a1dc:	f7f6 fd98 	bl	d10 <__aeabi_fmul>
    a1e0:	9902      	ldr	r1, [sp, #8]
    a1e2:	f7f6 fc8d 	bl	b00 <__addsf3>
    a1e6:	4680      	mov	r8, r0
    a1e8:	47a0      	blx	r4
    a1ea:	4639      	mov	r1, r7
    a1ec:	f7f6 fd90 	bl	d10 <__aeabi_fmul>
    a1f0:	f005 fc89 	bl	fb06 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    a1f4:	3501      	adds	r5, #1
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    a1f6:	9005      	str	r0, [sp, #20]
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    a1f8:	4628      	mov	r0, r5
    a1fa:	f7f6 fd35 	bl	c68 <__aeabi_i2f>
    a1fe:	4659      	mov	r1, fp
    a200:	f7f6 fd86 	bl	d10 <__aeabi_fmul>
    a204:	9902      	ldr	r1, [sp, #8]
    a206:	f7f6 fc7b 	bl	b00 <__addsf3>
    a20a:	47a0      	blx	r4
    a20c:	9007      	str	r0, [sp, #28]
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    a20e:	4640      	mov	r0, r8
    a210:	47a0      	blx	r4
    a212:	4639      	mov	r1, r7
    a214:	f7f6 fd7c 	bl	d10 <__aeabi_fmul>
    a218:	f005 fc75 	bl	fb06 <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    a21c:	9a07      	ldr	r2, [sp, #28]
    a21e:	4639      	mov	r1, r7
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    a220:	9006      	str	r0, [sp, #24]
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    a222:	4610      	mov	r0, r2
    a224:	f7f6 fd74 	bl	d10 <__aeabi_fmul>
    a228:	9b06      	ldr	r3, [sp, #24]
    a22a:	4619      	mov	r1, r3
    a22c:	f7f6 fc68 	bl	b00 <__addsf3>
    a230:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    a234:	f7f6 fd6c 	bl	d10 <__aeabi_fmul>
    a238:	f005 fc65 	bl	fb06 <_ZN6tflite11TfLiteRoundIfEET_S1_>
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    a23c:	9904      	ldr	r1, [sp, #16]
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    a23e:	9006      	str	r0, [sp, #24]
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    a240:	4640      	mov	r0, r8
    a242:	f7f6 fc5d 	bl	b00 <__addsf3>
    a246:	47a0      	blx	r4
    a248:	4639      	mov	r1, r7
    a24a:	f7f6 fd61 	bl	d10 <__aeabi_fmul>
    a24e:	f005 fc5a 	bl	fb06 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    float midpoint_err = midpoint_interp_val - midpoint_val;
    a252:	9b06      	ldr	r3, [sp, #24]
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    a254:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    a256:	4618      	mov	r0, r3
    a258:	f7f6 fc50 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    a25c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    a260:	f7f6 fd56 	bl	d10 <__aeabi_fmul>
    a264:	f005 fc4f 	bl	fb06 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    a268:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    a26a:	9805      	ldr	r0, [sp, #20]
    a26c:	f7f6 fc46 	bl	afc <__aeabi_fsub>
      if (__a < __b)
    a270:	4651      	mov	r1, sl
    a272:	9009      	str	r0, [sp, #36]	; 0x24
    a274:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    a278:	f7f6 fee8 	bl	104c <__aeabi_fcmplt>
    a27c:	b1a0      	cbz	r0, a2a8 <_ZN6tflite7gen_lutEPFffEffPsi+0x124>
	return __b;
    a27e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
      if (__b < __a)
    a282:	4649      	mov	r1, r9
    a284:	f8d8 0000 	ldr.w	r0, [r8]
                               32767.0f);
    a288:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    a28c:	f7f6 fefc 	bl	1088 <__aeabi_fcmpgt>
    a290:	b108      	cbz	r0, a296 <_ZN6tflite7gen_lutEPFffEffPsi+0x112>
	return __b;
    a292:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    a296:	f8d8 0000 	ldr.w	r0, [r8]
    a29a:	f7f6 feff 	bl	109c <__aeabi_f2iz>
    a29e:	9b01      	ldr	r3, [sp, #4]
    a2a0:	f823 0f02 	strh.w	r0, [r3, #2]!
    a2a4:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < num - 1; i++) {
    a2a6:	e792      	b.n	a1ce <_ZN6tflite7gen_lutEPFffEffPsi+0x4a>
      return __a;
    a2a8:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    a2ac:	e7e9      	b.n	a282 <_ZN6tflite7gen_lutEPFffEffPsi+0xfe>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    a2ae:	4630      	mov	r0, r6
    a2b0:	47a0      	blx	r4
    a2b2:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    a2b6:	f7f6 fd2b 	bl	d10 <__aeabi_fmul>
    a2ba:	f005 fc24 	bl	fb06 <_ZN6tflite11TfLiteRoundIfEET_S1_>
      if (__a < __b)
    a2be:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    a2c2:	9009      	str	r0, [sp, #36]	; 0x24
    a2c4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    a2c8:	f7f6 fec0 	bl	104c <__aeabi_fcmplt>
    a2cc:	b1a8      	cbz	r0, a2fa <_ZN6tflite7gen_lutEPFffEffPsi+0x176>
	return __b;
    a2ce:	ad0a      	add	r5, sp, #40	; 0x28
      if (__b < __a)
    a2d0:	490b      	ldr	r1, [pc, #44]	; (a300 <_ZN6tflite7gen_lutEPFffEffPsi+0x17c>)
    a2d2:	6828      	ldr	r0, [r5, #0]
    a2d4:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    a2d8:	f7f6 fed6 	bl	1088 <__aeabi_fcmpgt>
    a2dc:	b100      	cbz	r0, a2e0 <_ZN6tflite7gen_lutEPFffEffPsi+0x15c>
	return __b;
    a2de:	ad0b      	add	r5, sp, #44	; 0x2c
  table[num - 1] = std::min<float>(
    a2e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a2e2:	6828      	ldr	r0, [r5, #0]
    a2e4:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
    a2e8:	f7f6 fed8 	bl	109c <__aeabi_f2iz>
    a2ec:	9b03      	ldr	r3, [sp, #12]
    a2ee:	3c01      	subs	r4, #1
    a2f0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
}
    a2f4:	b00d      	add	sp, #52	; 0x34
    a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return __a;
    a2fa:	ad09      	add	r5, sp, #36	; 0x24
    a2fc:	e7e8      	b.n	a2d0 <_ZN6tflite7gen_lutEPFffEffPsi+0x14c>
    a2fe:	bf00      	nop
    a300:	46fffe00 	.word	0x46fffe00

0000a304 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a304:	4b0e      	ldr	r3, [pc, #56]	; (a340 <z_sys_init_run_level+0x3c>)
{
    a306:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a308:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a30c:	3001      	adds	r0, #1
    a30e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a312:	42a6      	cmp	r6, r4
    a314:	d800      	bhi.n	a318 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    a316:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    a318:	e9d4 3500 	ldrd	r3, r5, [r4]
    a31c:	4628      	mov	r0, r5
    a31e:	4798      	blx	r3
		if (dev != NULL) {
    a320:	b165      	cbz	r5, a33c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    a322:	68eb      	ldr	r3, [r5, #12]
    a324:	b130      	cbz	r0, a334 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    a326:	2800      	cmp	r0, #0
    a328:	bfb8      	it	lt
    a32a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    a32c:	28ff      	cmp	r0, #255	; 0xff
    a32e:	bfa8      	it	ge
    a330:	20ff      	movge	r0, #255	; 0xff
    a332:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    a334:	785a      	ldrb	r2, [r3, #1]
    a336:	f042 0201 	orr.w	r2, r2, #1
    a33a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a33c:	3408      	adds	r4, #8
    a33e:	e7e8      	b.n	a312 <z_sys_init_run_level+0xe>
    a340:	00062a3c 	.word	0x00062a3c

0000a344 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a344:	4b01      	ldr	r3, [pc, #4]	; (a34c <z_impl_z_errno+0x8>)
    a346:	6898      	ldr	r0, [r3, #8]
}
    a348:	3060      	adds	r0, #96	; 0x60
    a34a:	4770      	bx	lr
    a34c:	20000d24 	.word	0x20000d24

0000a350 <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    a350:	2300      	movs	r3, #0
    a352:	2201      	movs	r2, #1
{
    a354:	b510      	push	{r4, lr}
    a356:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    a358:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a35c:	220f      	movs	r2, #15
    a35e:	9301      	str	r3, [sp, #4]
    a360:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a364:	2318      	movs	r3, #24
    a366:	4a0b      	ldr	r2, [pc, #44]	; (a394 <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
    a368:	4c0b      	ldr	r4, [pc, #44]	; (a398 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a36a:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    a36e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a372:	490a      	ldr	r1, [pc, #40]	; (a39c <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
    a374:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
    a378:	fb02 1100 	mla	r1, r2, r0, r1
    a37c:	9300      	str	r3, [sp, #0]
    a37e:	4620      	mov	r0, r4
    a380:	4b07      	ldr	r3, [pc, #28]	; (a3a0 <init_idle_thread+0x50>)
    a382:	f000 f8f9 	bl	a578 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a386:	7b63      	ldrb	r3, [r4, #13]
    a388:	f023 0304 	bic.w	r3, r3, #4
    a38c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a38e:	b006      	add	sp, #24
    a390:	bd10      	pop	{r4, pc}
    a392:	bf00      	nop
    a394:	20000d24 	.word	0x20000d24
    a398:	20000360 	.word	0x20000360
    a39c:	200303d8 	.word	0x200303d8
    a3a0:	0000a695 	.word	0x0000a695

0000a3a4 <bg_thread_main>:
	z_sys_post_kernel = true;
    a3a4:	2201      	movs	r2, #1
{
    a3a6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a3a8:	4b0a      	ldr	r3, [pc, #40]	; (a3d4 <bg_thread_main+0x30>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a3aa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    a3ac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a3ae:	f7ff ffa9 	bl	a304 <z_sys_init_run_level>
	boot_banner();
    a3b2:	f000 ff65 	bl	b280 <boot_banner>
	z_cpp_init_static();
    a3b6:	f003 f8aa 	bl	d50e <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a3ba:	2003      	movs	r0, #3
    a3bc:	f7ff ffa2 	bl	a304 <z_sys_init_run_level>
	z_init_static_threads();
    a3c0:	f000 f90a 	bl	a5d8 <z_init_static_threads>
	main();
    a3c4:	f002 fd3b 	bl	ce3e <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a3c8:	4a03      	ldr	r2, [pc, #12]	; (a3d8 <bg_thread_main+0x34>)
    a3ca:	7b13      	ldrb	r3, [r2, #12]
    a3cc:	f023 0301 	bic.w	r3, r3, #1
    a3d0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a3d2:	bd08      	pop	{r3, pc}
    a3d4:	20028214 	.word	0x20028214
    a3d8:	200003e0 	.word	0x200003e0

0000a3dc <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    a3dc:	4802      	ldr	r0, [pc, #8]	; (a3e8 <z_bss_zero+0xc>)
    a3de:	4a03      	ldr	r2, [pc, #12]	; (a3ec <z_bss_zero+0x10>)
    a3e0:	2100      	movs	r1, #0
    a3e2:	1a12      	subs	r2, r2, r0
    a3e4:	f005 bd59 	b.w	fe9a <memset>
    a3e8:	20000340 	.word	0x20000340
    a3ec:	200283d8 	.word	0x200283d8

0000a3f0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a3f0:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    a3f2:	4b30      	ldr	r3, [pc, #192]	; (a4b4 <z_cstart+0xc4>)
    a3f4:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
    a3f6:	f503 6800 	add.w	r8, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a3fa:	f388 8808 	msr	MSP, r8
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    a3fe:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a402:	2400      	movs	r4, #0
    a404:	23e0      	movs	r3, #224	; 0xe0
    a406:	4d2c      	ldr	r5, [pc, #176]	; (a4b8 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    a408:	4e2c      	ldr	r6, [pc, #176]	; (a4bc <z_cstart+0xcc>)
    a40a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a40e:	77ec      	strb	r4, [r5, #31]
    a410:	762c      	strb	r4, [r5, #24]
    a412:	766c      	strb	r4, [r5, #25]
    a414:	76ac      	strb	r4, [r5, #26]
    a416:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a41a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a41c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; a4d0 <z_cstart+0xe0>
    a420:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a424:	626b      	str	r3, [r5, #36]	; 0x24
    a426:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a42a:	f7f9 fe7f 	bl	412c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a42e:	f7f9 fc79 	bl	3d24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a432:	f04f 33ff 	mov.w	r3, #4294967295
    a436:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a438:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a43a:	f7fa f867 	bl	450c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a43e:	f7f9 ff21 	bl	4284 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    a442:	f240 1301 	movw	r3, #257	; 0x101
    a446:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a44a:	ab06      	add	r3, sp, #24
    a44c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    a44e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a452:	f005 fb60 	bl	fb16 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a456:	4620      	mov	r0, r4
    a458:	f7ff ff54 	bl	a304 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a45c:	2001      	movs	r0, #1
    a45e:	f7ff ff51 	bl	a304 <z_sys_init_run_level>
	z_sched_init();
    a462:	f000 fc8b 	bl	ad7c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a466:	4b16      	ldr	r3, [pc, #88]	; (a4c0 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    a468:	4d16      	ldr	r5, [pc, #88]	; (a4c4 <z_cstart+0xd4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a46a:	9305      	str	r3, [sp, #20]
    a46c:	2301      	movs	r3, #1
    a46e:	4916      	ldr	r1, [pc, #88]	; (a4c8 <z_cstart+0xd8>)
    a470:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    a474:	e9cd 4303 	strd	r4, r3, [sp, #12]
    a478:	4628      	mov	r0, r5
    a47a:	464b      	mov	r3, r9
    a47c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a480:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
    a482:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a484:	f000 f878 	bl	a578 <z_setup_new_thread>
    a488:	4607      	mov	r7, r0
    a48a:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    a48c:	4628      	mov	r0, r5
    a48e:	f022 0204 	bic.w	r2, r2, #4
    a492:	736a      	strb	r2, [r5, #13]
    a494:	f005 fbfc 	bl	fc90 <z_ready_thread>
		init_idle_thread(i);
    a498:	4620      	mov	r0, r4
    a49a:	f7ff ff59 	bl	a350 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a49e:	4b0b      	ldr	r3, [pc, #44]	; (a4cc <z_cstart+0xdc>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a4a0:	464a      	mov	r2, r9
    a4a2:	4639      	mov	r1, r7
    a4a4:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a4a6:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
    a4a8:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    a4aa:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a4ae:	f7f9 fd1d 	bl	3eec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a4b2:	bf00      	nop
    a4b4:	20030518 	.word	0x20030518
    a4b8:	e000ed00 	.word	0xe000ed00
    a4bc:	20000d24 	.word	0x20000d24
    a4c0:	00065406 	.word	0x00065406
    a4c4:	200003e0 	.word	0x200003e0
    a4c8:	200283d8 	.word	0x200283d8
    a4cc:	20000360 	.word	0x20000360
    a4d0:	0000a3a5 	.word	0x0000a3a5

0000a4d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    a4d4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a4d6:	4b0e      	ldr	r3, [pc, #56]	; (a510 <init_mem_slab_module+0x3c>)
    a4d8:	4c0e      	ldr	r4, [pc, #56]	; (a514 <init_mem_slab_module+0x40>)
    a4da:	42a3      	cmp	r3, r4
    a4dc:	d301      	bcc.n	a4e2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    a4de:	2000      	movs	r0, #0
	return rc;
}
    a4e0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a4e2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    a4e6:	ea41 0200 	orr.w	r2, r1, r0
    a4ea:	f012 0203 	ands.w	r2, r2, #3
    a4ee:	d10b      	bne.n	a508 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    a4f0:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
    a4f2:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    a4f4:	42aa      	cmp	r2, r5
    a4f6:	d101      	bne.n	a4fc <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a4f8:	3320      	adds	r3, #32
    a4fa:	e7ee      	b.n	a4da <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    a4fc:	699e      	ldr	r6, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    a4fe:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    a500:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    a502:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
    a504:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    a506:	e7f5      	b.n	a4f4 <init_mem_slab_module+0x20>
		return -EINVAL;
    a508:	f06f 0015 	mvn.w	r0, #21
	return rc;
    a50c:	e7e8      	b.n	a4e0 <init_mem_slab_module+0xc>
    a50e:	bf00      	nop
    a510:	200002b4 	.word	0x200002b4
    a514:	200002b4 	.word	0x200002b4

0000a518 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a518:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    a51a:	460c      	mov	r4, r1
    a51c:	4616      	mov	r6, r2
    a51e:	461f      	mov	r7, r3
	__asm__ volatile(
    a520:	f04f 0320 	mov.w	r3, #32
    a524:	f3ef 8111 	mrs	r1, BASEPRI
    a528:	f383 8812 	msr	BASEPRI_MAX, r3
    a52c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a530:	6983      	ldr	r3, [r0, #24]
    a532:	b15b      	cbz	r3, a54c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    a534:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a536:	681b      	ldr	r3, [r3, #0]
    a538:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    a53a:	69c3      	ldr	r3, [r0, #28]
    a53c:	3301      	adds	r3, #1
    a53e:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a540:	2000      	movs	r0, #0
	__asm__ volatile(
    a542:	f381 8811 	msr	BASEPRI, r1
    a546:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    a54a:	e011      	b.n	a570 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a54c:	ea56 0207 	orrs.w	r2, r6, r7
    a550:	d103      	bne.n	a55a <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    a552:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    a556:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    a558:	e7f3      	b.n	a542 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a55a:	4602      	mov	r2, r0
    a55c:	e9cd 6700 	strd	r6, r7, [sp]
    a560:	3008      	adds	r0, #8
    a562:	f000 fb5d 	bl	ac20 <z_pend_curr>
		if (result == 0) {
    a566:	b918      	cbnz	r0, a570 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    a568:	4b02      	ldr	r3, [pc, #8]	; (a574 <k_mem_slab_alloc+0x5c>)
    a56a:	689b      	ldr	r3, [r3, #8]
    a56c:	695b      	ldr	r3, [r3, #20]
    a56e:	6023      	str	r3, [r4, #0]
}
    a570:	b002      	add	sp, #8
    a572:	bdd0      	pop	{r4, r6, r7, pc}
    a574:	20000d24 	.word	0x20000d24

0000a578 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a578:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    a57c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a57e:	f100 0558 	add.w	r5, r0, #88	; 0x58
    a582:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    a584:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    a586:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    a58a:	2500      	movs	r5, #0
{
    a58c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    a58e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    a590:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    a592:	e9c0 5506 	strd	r5, r5, [r0, #24]
    a596:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a598:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a59a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a59c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    a5a0:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    a5a4:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    a5a6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    a5a8:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a5aa:	9202      	str	r2, [sp, #8]
    a5ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    a5ae:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a5b2:	9201      	str	r2, [sp, #4]
    a5b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a5b6:	9200      	str	r2, [sp, #0]
    a5b8:	4642      	mov	r2, r8
    a5ba:	f7f9 fc7b 	bl	3eb4 <arch_new_thread>
	if (!_current) {
    a5be:	4b05      	ldr	r3, [pc, #20]	; (a5d4 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    a5c0:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    a5c2:	689b      	ldr	r3, [r3, #8]
    a5c4:	b103      	cbz	r3, a5c8 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    a5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    a5c8:	4640      	mov	r0, r8
    a5ca:	6723      	str	r3, [r4, #112]	; 0x70
    a5cc:	b004      	add	sp, #16
    a5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5d2:	bf00      	nop
    a5d4:	20000d24 	.word	0x20000d24

0000a5d8 <z_init_static_threads>:
{
    a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    a5dc:	4e2a      	ldr	r6, [pc, #168]	; (a688 <z_init_static_threads+0xb0>)
    a5de:	4d2b      	ldr	r5, [pc, #172]	; (a68c <z_init_static_threads+0xb4>)
    a5e0:	46b0      	mov	r8, r6
{
    a5e2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    a5e4:	42b5      	cmp	r5, r6
    a5e6:	f105 0430 	add.w	r4, r5, #48	; 0x30
    a5ea:	d310      	bcc.n	a60e <z_init_static_threads+0x36>
	k_sched_lock();
    a5ec:	f000 f9d0 	bl	a990 <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
    a5f0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    a5f4:	f240 36e7 	movw	r6, #999	; 0x3e7
    a5f8:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    a5fa:	4c24      	ldr	r4, [pc, #144]	; (a68c <z_init_static_threads+0xb4>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a5fc:	f8df a090 	ldr.w	sl, [pc, #144]	; a690 <z_init_static_threads+0xb8>
    a600:	4544      	cmp	r4, r8
    a602:	d321      	bcc.n	a648 <z_init_static_threads+0x70>
}
    a604:	b006      	add	sp, #24
    a606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    a60a:	f000 bb9b 	b.w	ad44 <k_sched_unlock>
		z_setup_new_thread(
    a60e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a612:	9305      	str	r3, [sp, #20]
    a614:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a618:	9304      	str	r3, [sp, #16]
    a61a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a61e:	9303      	str	r3, [sp, #12]
    a620:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a624:	9302      	str	r3, [sp, #8]
    a626:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a62a:	9301      	str	r3, [sp, #4]
    a62c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    a630:	9300      	str	r3, [sp, #0]
    a632:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    a636:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    a63a:	f7ff ff9d 	bl	a578 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a63e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    a642:	655d      	str	r5, [r3, #84]	; 0x54
    a644:	4625      	mov	r5, r4
    a646:	e7cd      	b.n	a5e4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a648:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a64a:	1c5a      	adds	r2, r3, #1
    a64c:	d00d      	beq.n	a66a <z_init_static_threads+0x92>
    a64e:	4630      	mov	r0, r6
    a650:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    a652:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a656:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a65a:	42b9      	cmp	r1, r7
    a65c:	bf08      	it	eq
    a65e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    a660:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a662:	d104      	bne.n	a66e <z_init_static_threads+0x96>
	z_sched_start(thread);
    a664:	4628      	mov	r0, r5
    a666:	f000 fa7f 	bl	ab68 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a66a:	3430      	adds	r4, #48	; 0x30
    a66c:	e7c8      	b.n	a600 <z_init_static_threads+0x28>
    a66e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a672:	2300      	movs	r3, #0
    a674:	f7f6 fd38 	bl	10e8 <__aeabi_uldivmod>
    a678:	4602      	mov	r2, r0
    a67a:	460b      	mov	r3, r1
    a67c:	f105 0018 	add.w	r0, r5, #24
    a680:	4651      	mov	r1, sl
    a682:	f000 fcf1 	bl	b068 <z_add_timeout>
    a686:	e7f0      	b.n	a66a <z_init_static_threads+0x92>
    a688:	200002b4 	.word	0x200002b4
    a68c:	200002b4 	.word	0x200002b4
    a690:	0000fcb1 	.word	0x0000fcb1

0000a694 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a694:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    a696:	4c09      	ldr	r4, [pc, #36]	; (a6bc <idle+0x28>)
	__asm__ volatile(
    a698:	f04f 0220 	mov.w	r2, #32
    a69c:	f3ef 8311 	mrs	r3, BASEPRI
    a6a0:	f382 8812 	msr	BASEPRI_MAX, r2
    a6a4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    a6a8:	f005 fb7f 	bl	fdaa <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    a6ac:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    a6ae:	f7f9 fa19 	bl	3ae4 <pm_system_suspend>
    a6b2:	2800      	cmp	r0, #0
    a6b4:	d1f0      	bne.n	a698 <idle+0x4>
	arch_cpu_idle();
    a6b6:	f7f9 fb3b 	bl	3d30 <arch_cpu_idle>
}
    a6ba:	e7ed      	b.n	a698 <idle+0x4>
    a6bc:	20000d24 	.word	0x20000d24

0000a6c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a6c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a6c4:	4604      	mov	r4, r0
    a6c6:	4616      	mov	r6, r2
    a6c8:	461f      	mov	r7, r3
    a6ca:	f04f 0320 	mov.w	r3, #32
    a6ce:	f3ef 8811 	mrs	r8, BASEPRI
    a6d2:	f383 8812 	msr	BASEPRI_MAX, r3
    a6d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a6da:	68c3      	ldr	r3, [r0, #12]
    a6dc:	4a35      	ldr	r2, [pc, #212]	; (a7b4 <z_impl_k_mutex_lock+0xf4>)
    a6de:	b16b      	cbz	r3, a6fc <z_impl_k_mutex_lock+0x3c>
    a6e0:	6880      	ldr	r0, [r0, #8]
    a6e2:	6891      	ldr	r1, [r2, #8]
    a6e4:	4288      	cmp	r0, r1
    a6e6:	d019      	beq.n	a71c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a6e8:	ea56 0307 	orrs.w	r3, r6, r7
    a6ec:	d118      	bne.n	a720 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    a6ee:	f388 8811 	msr	BASEPRI, r8
    a6f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    a6f6:	f06f 000f 	mvn.w	r0, #15
    a6fa:	e00c      	b.n	a716 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    a6fc:	6891      	ldr	r1, [r2, #8]
    a6fe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    a702:	3301      	adds	r3, #1
    a704:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    a706:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a708:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    a70a:	60a3      	str	r3, [r4, #8]
    a70c:	f388 8811 	msr	BASEPRI, r8
    a710:	f3bf 8f6f 	isb	sy
		return 0;
    a714:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a716:	b002      	add	sp, #8
    a718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    a71c:	6921      	ldr	r1, [r4, #16]
    a71e:	e7f0      	b.n	a702 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a720:	f991 100e 	ldrsb.w	r1, [r1, #14]
    a724:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    a728:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    a72c:	4299      	cmp	r1, r3
    a72e:	bfa8      	it	ge
    a730:	4619      	movge	r1, r3
    a732:	4291      	cmp	r1, r2
    a734:	bfb8      	it	lt
    a736:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a738:	428b      	cmp	r3, r1
    a73a:	dd2f      	ble.n	a79c <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    a73c:	f000 fa84 	bl	ac48 <z_set_prio>
    a740:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a742:	4622      	mov	r2, r4
    a744:	4641      	mov	r1, r8
    a746:	e9cd 6700 	strd	r6, r7, [sp]
    a74a:	481b      	ldr	r0, [pc, #108]	; (a7b8 <z_impl_k_mutex_lock+0xf8>)
    a74c:	f000 fa68 	bl	ac20 <z_pend_curr>
	if (got_mutex == 0) {
    a750:	2800      	cmp	r0, #0
    a752:	d0e0      	beq.n	a716 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    a754:	f04f 0320 	mov.w	r3, #32
    a758:	f3ef 8611 	mrs	r6, BASEPRI
    a75c:	f383 8812 	msr	BASEPRI_MAX, r3
    a760:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a764:	6823      	ldr	r3, [r4, #0]
    a766:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a768:	429c      	cmp	r4, r3
    a76a:	d00a      	beq.n	a782 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a76c:	b14b      	cbz	r3, a782 <z_impl_k_mutex_lock+0xc2>
    a76e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    a772:	4299      	cmp	r1, r3
    a774:	bfa8      	it	ge
    a776:	4619      	movge	r1, r3
    a778:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    a77c:	4299      	cmp	r1, r3
    a77e:	bfb8      	it	lt
    a780:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a782:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    a784:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a788:	4299      	cmp	r1, r3
    a78a:	d109      	bne.n	a7a0 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    a78c:	b16d      	cbz	r5, a7aa <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    a78e:	4631      	mov	r1, r6
    a790:	4809      	ldr	r0, [pc, #36]	; (a7b8 <z_impl_k_mutex_lock+0xf8>)
    a792:	f000 f8eb 	bl	a96c <z_reschedule>
	return -EAGAIN;
    a796:	f06f 000a 	mvn.w	r0, #10
    a79a:	e7bc      	b.n	a716 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    a79c:	2500      	movs	r5, #0
    a79e:	e7d0      	b.n	a742 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    a7a0:	f000 fa52 	bl	ac48 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a7a4:	2800      	cmp	r0, #0
    a7a6:	d1f2      	bne.n	a78e <z_impl_k_mutex_lock+0xce>
    a7a8:	e7f0      	b.n	a78c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    a7aa:	f386 8811 	msr	BASEPRI, r6
    a7ae:	f3bf 8f6f 	isb	sy
    a7b2:	e7f0      	b.n	a796 <z_impl_k_mutex_lock+0xd6>
    a7b4:	20000d24 	.word	0x20000d24
    a7b8:	20028215 	.word	0x20028215

0000a7bc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    a7bc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a7be:	6883      	ldr	r3, [r0, #8]
{
    a7c0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	d036      	beq.n	a834 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a7c6:	4a1e      	ldr	r2, [pc, #120]	; (a840 <z_impl_k_mutex_unlock+0x84>)
    a7c8:	6892      	ldr	r2, [r2, #8]
    a7ca:	4293      	cmp	r3, r2
    a7cc:	d135      	bne.n	a83a <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    a7ce:	7bda      	ldrb	r2, [r3, #15]
    a7d0:	3a01      	subs	r2, #1
    a7d2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a7d4:	68c3      	ldr	r3, [r0, #12]
    a7d6:	2b01      	cmp	r3, #1
    a7d8:	d905      	bls.n	a7e6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a7da:	3b01      	subs	r3, #1
    a7dc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a7de:	f000 fab1 	bl	ad44 <k_sched_unlock>

	return 0;
    a7e2:	2000      	movs	r0, #0
}
    a7e4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a7e6:	f04f 0320 	mov.w	r3, #32
    a7ea:	f3ef 8511 	mrs	r5, BASEPRI
    a7ee:	f383 8812 	msr	BASEPRI_MAX, r3
    a7f2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a7f6:	6901      	ldr	r1, [r0, #16]
    a7f8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    a7fa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a7fe:	4299      	cmp	r1, r3
    a800:	d001      	beq.n	a806 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    a802:	f000 fa21 	bl	ac48 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a806:	4620      	mov	r0, r4
    a808:	f005 faa1 	bl	fd4e <z_unpend_first_thread>
	mutex->owner = new_owner;
    a80c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a80e:	b158      	cbz	r0, a828 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    a810:	f990 200e 	ldrsb.w	r2, [r0, #14]
    a814:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a816:	2200      	movs	r2, #0
    a818:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    a81a:	f005 fa39 	bl	fc90 <z_ready_thread>
		z_reschedule(&lock, key);
    a81e:	4629      	mov	r1, r5
    a820:	4808      	ldr	r0, [pc, #32]	; (a844 <z_impl_k_mutex_unlock+0x88>)
    a822:	f000 f8a3 	bl	a96c <z_reschedule>
    a826:	e7da      	b.n	a7de <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    a828:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a82a:	f385 8811 	msr	BASEPRI, r5
    a82e:	f3bf 8f6f 	isb	sy
    a832:	e7d4      	b.n	a7de <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    a834:	f06f 0015 	mvn.w	r0, #21
    a838:	e7d4      	b.n	a7e4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    a83a:	f04f 30ff 	mov.w	r0, #4294967295
    a83e:	e7d1      	b.n	a7e4 <z_impl_k_mutex_unlock+0x28>
    a840:	20000d24 	.word	0x20000d24
    a844:	20028215 	.word	0x20028215

0000a848 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a848:	b538      	push	{r3, r4, r5, lr}
    a84a:	4604      	mov	r4, r0
	__asm__ volatile(
    a84c:	f04f 0320 	mov.w	r3, #32
    a850:	f3ef 8511 	mrs	r5, BASEPRI
    a854:	f383 8812 	msr	BASEPRI_MAX, r3
    a858:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a85c:	f005 fa77 	bl	fd4e <z_unpend_first_thread>

	if (thread != NULL) {
    a860:	b148      	cbz	r0, a876 <z_impl_k_sem_give+0x2e>
    a862:	2200      	movs	r2, #0
    a864:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a866:	f005 fa13 	bl	fc90 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a86a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a86c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    a870:	4804      	ldr	r0, [pc, #16]	; (a884 <z_impl_k_sem_give+0x3c>)
    a872:	f000 b87b 	b.w	a96c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a876:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    a87a:	429a      	cmp	r2, r3
    a87c:	bf18      	it	ne
    a87e:	3301      	addne	r3, #1
    a880:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    a882:	e7f2      	b.n	a86a <z_impl_k_sem_give+0x22>
    a884:	20028216 	.word	0x20028216

0000a888 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a888:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a88a:	4614      	mov	r4, r2
    a88c:	461d      	mov	r5, r3
    a88e:	f04f 0320 	mov.w	r3, #32
    a892:	f3ef 8111 	mrs	r1, BASEPRI
    a896:	f383 8812 	msr	BASEPRI_MAX, r3
    a89a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    a89e:	6883      	ldr	r3, [r0, #8]
    a8a0:	b143      	cbz	r3, a8b4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    a8a2:	3b01      	subs	r3, #1
    a8a4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    a8a6:	f381 8811 	msr	BASEPRI, r1
    a8aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    a8ae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    a8b0:	b003      	add	sp, #12
    a8b2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a8b4:	ea54 0305 	orrs.w	r3, r4, r5
    a8b8:	d106      	bne.n	a8c8 <z_impl_k_sem_take+0x40>
    a8ba:	f381 8811 	msr	BASEPRI, r1
    a8be:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    a8c2:	f06f 000f 	mvn.w	r0, #15
    a8c6:	e7f3      	b.n	a8b0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    a8c8:	4602      	mov	r2, r0
    a8ca:	e9cd 4500 	strd	r4, r5, [sp]
    a8ce:	4802      	ldr	r0, [pc, #8]	; (a8d8 <z_impl_k_sem_take+0x50>)
    a8d0:	f000 f9a6 	bl	ac20 <z_pend_curr>
	return ret;
    a8d4:	e7ec      	b.n	a8b0 <z_impl_k_sem_take+0x28>
    a8d6:	bf00      	nop
    a8d8:	20028216 	.word	0x20028216

0000a8dc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    a8dc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    a8de:	4c08      	ldr	r4, [pc, #32]	; (a900 <z_reset_time_slice+0x24>)
    a8e0:	6823      	ldr	r3, [r4, #0]
    a8e2:	b15b      	cbz	r3, a8fc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    a8e4:	f7fa fe66 	bl	55b4 <sys_clock_elapsed>
    a8e8:	4603      	mov	r3, r0
    a8ea:	6820      	ldr	r0, [r4, #0]
    a8ec:	4a05      	ldr	r2, [pc, #20]	; (a904 <z_reset_time_slice+0x28>)
    a8ee:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    a8f0:	2100      	movs	r1, #0
	}
}
    a8f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    a8f6:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    a8f8:	f005 ba67 	b.w	fdca <z_set_timeout_expiry>
}
    a8fc:	bd10      	pop	{r4, pc}
    a8fe:	bf00      	nop
    a900:	20000d54 	.word	0x20000d54
    a904:	20000d24 	.word	0x20000d24

0000a908 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a90a:	4604      	mov	r4, r0
    a90c:	460d      	mov	r5, r1
	__asm__ volatile(
    a90e:	f04f 0320 	mov.w	r3, #32
    a912:	f3ef 8611 	mrs	r6, BASEPRI
    a916:	f383 8812 	msr	BASEPRI_MAX, r3
    a91a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    a91e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    a920:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    a924:	f240 30e7 	movw	r0, #999	; 0x3e7
    a928:	2100      	movs	r1, #0
    a92a:	4b0d      	ldr	r3, [pc, #52]	; (a960 <k_sched_time_slice_set+0x58>)
    a92c:	fbe7 0104 	umlal	r0, r1, r7, r4
    a930:	611a      	str	r2, [r3, #16]
    a932:	2300      	movs	r3, #0
    a934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a938:	f7f6 fbd6 	bl	10e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    a93c:	2c00      	cmp	r4, #0
    a93e:	4b09      	ldr	r3, [pc, #36]	; (a964 <k_sched_time_slice_set+0x5c>)
    a940:	dc09      	bgt.n	a956 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    a942:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    a944:	4b08      	ldr	r3, [pc, #32]	; (a968 <k_sched_time_slice_set+0x60>)
    a946:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    a948:	f7ff ffc8 	bl	a8dc <z_reset_time_slice>
	__asm__ volatile(
    a94c:	f386 8811 	msr	BASEPRI, r6
    a950:	f3bf 8f6f 	isb	sy
	}
}
    a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    a956:	2802      	cmp	r0, #2
    a958:	bfb8      	it	lt
    a95a:	2002      	movlt	r0, #2
    a95c:	e7f1      	b.n	a942 <k_sched_time_slice_set+0x3a>
    a95e:	bf00      	nop
    a960:	20000d24 	.word	0x20000d24
    a964:	20000d54 	.word	0x20000d54
    a968:	20000d50 	.word	0x20000d50

0000a96c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a96c:	b949      	cbnz	r1, a982 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a96e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    a972:	b930      	cbnz	r0, a982 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    a974:	4b05      	ldr	r3, [pc, #20]	; (a98c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    a976:	69da      	ldr	r2, [r3, #28]
    a978:	689b      	ldr	r3, [r3, #8]
    a97a:	429a      	cmp	r2, r3
    a97c:	d001      	beq.n	a982 <z_reschedule+0x16>
	ret = arch_swap(key);
    a97e:	f7f9 ba43 	b.w	3e08 <arch_swap>
    a982:	f381 8811 	msr	BASEPRI, r1
    a986:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    a98a:	4770      	bx	lr
    a98c:	20000d24 	.word	0x20000d24

0000a990 <k_sched_lock>:
	__asm__ volatile(
    a990:	f04f 0320 	mov.w	r3, #32
    a994:	f3ef 8111 	mrs	r1, BASEPRI
    a998:	f383 8812 	msr	BASEPRI_MAX, r3
    a99c:	f3bf 8f6f 	isb	sy
    a9a0:	4b04      	ldr	r3, [pc, #16]	; (a9b4 <k_sched_lock+0x24>)
    a9a2:	689a      	ldr	r2, [r3, #8]
    a9a4:	7bd3      	ldrb	r3, [r2, #15]
    a9a6:	3b01      	subs	r3, #1
    a9a8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    a9aa:	f381 8811 	msr	BASEPRI, r1
    a9ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    a9b2:	4770      	bx	lr
    a9b4:	20000d24 	.word	0x20000d24

0000a9b8 <update_cache>:
{
    a9b8:	b538      	push	{r3, r4, r5, lr}
    a9ba:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    a9bc:	480c      	ldr	r0, [pc, #48]	; (a9f0 <update_cache+0x38>)
    a9be:	f005 f95d 	bl	fc7c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    a9c2:	4d0c      	ldr	r5, [pc, #48]	; (a9f4 <update_cache+0x3c>)
    a9c4:	4604      	mov	r4, r0
    a9c6:	b900      	cbnz	r0, a9ca <update_cache+0x12>
    a9c8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    a9ca:	68ab      	ldr	r3, [r5, #8]
    a9cc:	b94a      	cbnz	r2, a9e2 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    a9ce:	7b5a      	ldrb	r2, [r3, #13]
    a9d0:	06d2      	lsls	r2, r2, #27
    a9d2:	d106      	bne.n	a9e2 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    a9d4:	69a2      	ldr	r2, [r4, #24]
    a9d6:	b922      	cbnz	r2, a9e2 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    a9d8:	89da      	ldrh	r2, [r3, #14]
    a9da:	2a7f      	cmp	r2, #127	; 0x7f
    a9dc:	d901      	bls.n	a9e2 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    a9de:	61eb      	str	r3, [r5, #28]
}
    a9e0:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    a9e2:	429c      	cmp	r4, r3
    a9e4:	d001      	beq.n	a9ea <update_cache+0x32>
			z_reset_time_slice();
    a9e6:	f7ff ff79 	bl	a8dc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    a9ea:	61ec      	str	r4, [r5, #28]
}
    a9ec:	e7f8      	b.n	a9e0 <update_cache+0x28>
    a9ee:	bf00      	nop
    a9f0:	20000d44 	.word	0x20000d44
    a9f4:	20000d24 	.word	0x20000d24

0000a9f8 <move_thread_to_end_of_prio_q>:
{
    a9f8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    a9fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    a9fe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    aa00:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    aa02:	7b43      	ldrb	r3, [r0, #13]
    aa04:	da04      	bge.n	aa10 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aa06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aa0a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    aa0c:	f005 f90e 	bl	fc2c <sys_dlist_remove>
	return list->head == list;
    aa10:	4a17      	ldr	r2, [pc, #92]	; (aa70 <move_thread_to_end_of_prio_q+0x78>)
	thread->base.thread_state |= _THREAD_QUEUED;
    aa12:	7b4b      	ldrb	r3, [r1, #13]
    aa14:	4610      	mov	r0, r2
    aa16:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aa1a:	734b      	strb	r3, [r1, #13]
    aa1c:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aa20:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa22:	4283      	cmp	r3, r0
    aa24:	bf08      	it	eq
    aa26:	2300      	moveq	r3, #0
    aa28:	2b00      	cmp	r3, #0
    aa2a:	bf38      	it	cc
    aa2c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aa2e:	b1cb      	cbz	r3, aa64 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    aa30:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    aa34:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    aa38:	42a6      	cmp	r6, r4
    aa3a:	d00f      	beq.n	aa5c <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    aa3c:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    aa3e:	2c00      	cmp	r4, #0
    aa40:	dd0c      	ble.n	aa5c <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    aa42:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    aa44:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    aa48:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    aa4a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    aa4c:	6890      	ldr	r0, [r2, #8]
}
    aa4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    aa52:	1a43      	subs	r3, r0, r1
    aa54:	4258      	negs	r0, r3
    aa56:	4158      	adcs	r0, r3
    aa58:	f7ff bfae 	b.w	a9b8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    aa5c:	42ab      	cmp	r3, r5
    aa5e:	d001      	beq.n	aa64 <move_thread_to_end_of_prio_q+0x6c>
    aa60:	681b      	ldr	r3, [r3, #0]
    aa62:	e7e4      	b.n	aa2e <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    aa64:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    aa68:	6029      	str	r1, [r5, #0]
	list->tail = node;
    aa6a:	6251      	str	r1, [r2, #36]	; 0x24
}
    aa6c:	e7ee      	b.n	aa4c <move_thread_to_end_of_prio_q+0x54>
    aa6e:	bf00      	nop
    aa70:	20000d24 	.word	0x20000d24

0000aa74 <z_time_slice>:
{
    aa74:	4601      	mov	r1, r0
    aa76:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    aa78:	f04f 0320 	mov.w	r3, #32
    aa7c:	f3ef 8411 	mrs	r4, BASEPRI
    aa80:	f383 8812 	msr	BASEPRI_MAX, r3
    aa84:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    aa88:	4b16      	ldr	r3, [pc, #88]	; (aae4 <z_time_slice+0x70>)
    aa8a:	4a17      	ldr	r2, [pc, #92]	; (aae8 <z_time_slice+0x74>)
    aa8c:	6898      	ldr	r0, [r3, #8]
    aa8e:	6815      	ldr	r5, [r2, #0]
    aa90:	42a8      	cmp	r0, r5
    aa92:	461d      	mov	r5, r3
    aa94:	d106      	bne.n	aaa4 <z_time_slice+0x30>
			z_reset_time_slice();
    aa96:	f7ff ff21 	bl	a8dc <z_reset_time_slice>
	__asm__ volatile(
    aa9a:	f384 8811 	msr	BASEPRI, r4
    aa9e:	f3bf 8f6f 	isb	sy
}
    aaa2:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    aaa4:	2600      	movs	r6, #0
    aaa6:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    aaa8:	4a10      	ldr	r2, [pc, #64]	; (aaec <z_time_slice+0x78>)
    aaaa:	6812      	ldr	r2, [r2, #0]
    aaac:	b1ba      	cbz	r2, aade <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    aaae:	89c2      	ldrh	r2, [r0, #14]
    aab0:	2a7f      	cmp	r2, #127	; 0x7f
    aab2:	d814      	bhi.n	aade <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    aab4:	7b42      	ldrb	r2, [r0, #13]
    aab6:	06d2      	lsls	r2, r2, #27
    aab8:	d111      	bne.n	aade <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    aaba:	4a0d      	ldr	r2, [pc, #52]	; (aaf0 <z_time_slice+0x7c>)
    aabc:	f990 600e 	ldrsb.w	r6, [r0, #14]
    aac0:	6812      	ldr	r2, [r2, #0]
    aac2:	4296      	cmp	r6, r2
    aac4:	db0b      	blt.n	aade <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    aac6:	4a0b      	ldr	r2, [pc, #44]	; (aaf4 <z_time_slice+0x80>)
    aac8:	4290      	cmp	r0, r2
    aaca:	d008      	beq.n	aade <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    aacc:	691a      	ldr	r2, [r3, #16]
    aace:	428a      	cmp	r2, r1
    aad0:	dc02      	bgt.n	aad8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    aad2:	f7ff ff91 	bl	a9f8 <move_thread_to_end_of_prio_q>
    aad6:	e7de      	b.n	aa96 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    aad8:	1a52      	subs	r2, r2, r1
    aada:	611a      	str	r2, [r3, #16]
    aadc:	e7dd      	b.n	aa9a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    aade:	2300      	movs	r3, #0
    aae0:	612b      	str	r3, [r5, #16]
    aae2:	e7da      	b.n	aa9a <z_time_slice+0x26>
    aae4:	20000d24 	.word	0x20000d24
    aae8:	20000d4c 	.word	0x20000d4c
    aaec:	20000d54 	.word	0x20000d54
    aaf0:	20000d50 	.word	0x20000d50
    aaf4:	20000360 	.word	0x20000360

0000aaf8 <ready_thread>:
{
    aaf8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    aafa:	f990 300d 	ldrsb.w	r3, [r0, #13]
    aafe:	7b42      	ldrb	r2, [r0, #13]
    ab00:	2b00      	cmp	r3, #0
    ab02:	db2d      	blt.n	ab60 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ab04:	06d3      	lsls	r3, r2, #27
    ab06:	d12b      	bne.n	ab60 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    ab08:	6983      	ldr	r3, [r0, #24]
    ab0a:	bb4b      	cbnz	r3, ab60 <ready_thread+0x68>
	return list->head == list;
    ab0c:	4915      	ldr	r1, [pc, #84]	; (ab64 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    ab0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ab12:	7342      	strb	r2, [r0, #13]
    ab14:	460a      	mov	r2, r1
    ab16:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ab1a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ab1c:	4294      	cmp	r4, r2
    ab1e:	bf18      	it	ne
    ab20:	4623      	movne	r3, r4
    ab22:	2b00      	cmp	r3, #0
    ab24:	bf38      	it	cc
    ab26:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ab28:	b1ab      	cbz	r3, ab56 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    ab2a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ab2e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    ab32:	42a6      	cmp	r6, r4
    ab34:	d00b      	beq.n	ab4e <ready_thread+0x56>
		return b2 - b1;
    ab36:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    ab38:	2c00      	cmp	r4, #0
    ab3a:	dd08      	ble.n	ab4e <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    ab3c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ab3e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    ab42:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    ab44:	6058      	str	r0, [r3, #4]
		update_cache(0);
    ab46:	2000      	movs	r0, #0
}
    ab48:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    ab4a:	f7ff bf35 	b.w	a9b8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ab4e:	42ab      	cmp	r3, r5
    ab50:	d001      	beq.n	ab56 <ready_thread+0x5e>
    ab52:	681b      	ldr	r3, [r3, #0]
    ab54:	e7e8      	b.n	ab28 <ready_thread+0x30>
	node->prev = tail;
    ab56:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    ab5a:	6028      	str	r0, [r5, #0]
	list->tail = node;
    ab5c:	6248      	str	r0, [r1, #36]	; 0x24
}
    ab5e:	e7f2      	b.n	ab46 <ready_thread+0x4e>
}
    ab60:	bc70      	pop	{r4, r5, r6}
    ab62:	4770      	bx	lr
    ab64:	20000d24 	.word	0x20000d24

0000ab68 <z_sched_start>:
{
    ab68:	b510      	push	{r4, lr}
	__asm__ volatile(
    ab6a:	f04f 0220 	mov.w	r2, #32
    ab6e:	f3ef 8411 	mrs	r4, BASEPRI
    ab72:	f382 8812 	msr	BASEPRI_MAX, r2
    ab76:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    ab7a:	7b42      	ldrb	r2, [r0, #13]
    ab7c:	0751      	lsls	r1, r2, #29
    ab7e:	d404      	bmi.n	ab8a <z_sched_start+0x22>
	__asm__ volatile(
    ab80:	f384 8811 	msr	BASEPRI, r4
    ab84:	f3bf 8f6f 	isb	sy
}
    ab88:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ab8a:	f022 0204 	bic.w	r2, r2, #4
    ab8e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    ab90:	f7ff ffb2 	bl	aaf8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ab94:	4621      	mov	r1, r4
}
    ab96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    ab9a:	4801      	ldr	r0, [pc, #4]	; (aba0 <z_sched_start+0x38>)
    ab9c:	f7ff bee6 	b.w	a96c <z_reschedule>
    aba0:	20028217 	.word	0x20028217

0000aba4 <unready_thread>:
{
    aba4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    aba6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    abaa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    abac:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    abae:	7b43      	ldrb	r3, [r0, #13]
    abb0:	da04      	bge.n	abbc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    abb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    abb6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    abb8:	f005 f838 	bl	fc2c <sys_dlist_remove>
	update_cache(thread == _current);
    abbc:	4b04      	ldr	r3, [pc, #16]	; (abd0 <unready_thread+0x2c>)
    abbe:	6898      	ldr	r0, [r3, #8]
    abc0:	1a43      	subs	r3, r0, r1
    abc2:	4258      	negs	r0, r3
    abc4:	4158      	adcs	r0, r3
}
    abc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    abca:	f7ff bef5 	b.w	a9b8 <update_cache>
    abce:	bf00      	nop
    abd0:	20000d24 	.word	0x20000d24

0000abd4 <pend>:
{
    abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abd8:	4606      	mov	r6, r0
    abda:	4614      	mov	r4, r2
    abdc:	461d      	mov	r5, r3
	__asm__ volatile(
    abde:	f04f 0320 	mov.w	r3, #32
    abe2:	f3ef 8711 	mrs	r7, BASEPRI
    abe6:	f383 8812 	msr	BASEPRI_MAX, r3
    abea:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    abee:	f005 f881 	bl	fcf4 <add_to_waitq_locked>
	__asm__ volatile(
    abf2:	f387 8811 	msr	BASEPRI, r7
    abf6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    abfa:	1c6b      	adds	r3, r5, #1
    abfc:	bf08      	it	eq
    abfe:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    ac02:	d008      	beq.n	ac16 <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ac04:	4622      	mov	r2, r4
    ac06:	462b      	mov	r3, r5
    ac08:	f106 0018 	add.w	r0, r6, #24
    ac0c:	4903      	ldr	r1, [pc, #12]	; (ac1c <pend+0x48>)
}
    ac0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ac12:	f000 ba29 	b.w	b068 <z_add_timeout>
    ac16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac1a:	bf00      	nop
    ac1c:	0000fcb1 	.word	0x0000fcb1

0000ac20 <z_pend_curr>:
{
    ac20:	b510      	push	{r4, lr}
    ac22:	460c      	mov	r4, r1
	pending_current = _current;
    ac24:	4b06      	ldr	r3, [pc, #24]	; (ac40 <z_pend_curr+0x20>)
{
    ac26:	4611      	mov	r1, r2
	pending_current = _current;
    ac28:	6898      	ldr	r0, [r3, #8]
    ac2a:	4b06      	ldr	r3, [pc, #24]	; (ac44 <z_pend_curr+0x24>)
    ac2c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    ac2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ac32:	f7ff ffcf 	bl	abd4 <pend>
    ac36:	4620      	mov	r0, r4
}
    ac38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac3c:	f7f9 b8e4 	b.w	3e08 <arch_swap>
    ac40:	20000d24 	.word	0x20000d24
    ac44:	20000d4c 	.word	0x20000d4c

0000ac48 <z_set_prio>:
{
    ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac4a:	4604      	mov	r4, r0
	__asm__ volatile(
    ac4c:	f04f 0320 	mov.w	r3, #32
    ac50:	f3ef 8611 	mrs	r6, BASEPRI
    ac54:	f383 8812 	msr	BASEPRI_MAX, r3
    ac58:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ac5c:	7b43      	ldrb	r3, [r0, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    ac5e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ac60:	06da      	lsls	r2, r3, #27
    ac62:	d138      	bne.n	acd6 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    ac64:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    ac66:	2d00      	cmp	r5, #0
    ac68:	d135      	bne.n	acd6 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ac6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ac6e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ac70:	f004 ffdc 	bl	fc2c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    ac74:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    ac76:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    ac78:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ac7c:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    ac7e:	4817      	ldr	r0, [pc, #92]	; (acdc <z_set_prio+0x94>)
    ac80:	4603      	mov	r3, r0
    ac82:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac86:	429f      	cmp	r7, r3
    ac88:	bf18      	it	ne
    ac8a:	463d      	movne	r5, r7
    ac8c:	2d00      	cmp	r5, #0
    ac8e:	461a      	mov	r2, r3
    ac90:	462b      	mov	r3, r5
    ac92:	bf38      	it	cc
    ac94:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ac96:	6a47      	ldr	r7, [r0, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ac98:	b1c3      	cbz	r3, accc <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    ac9a:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    ac9e:	42a9      	cmp	r1, r5
    aca0:	d010      	beq.n	acc4 <z_set_prio+0x7c>
		return b2 - b1;
    aca2:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    aca4:	2d00      	cmp	r5, #0
    aca6:	dd0d      	ble.n	acc4 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    aca8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    acaa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    acae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    acb0:	605c      	str	r4, [r3, #4]
			update_cache(1);
    acb2:	2001      	movs	r0, #1
    acb4:	f7ff fe80 	bl	a9b8 <update_cache>
    acb8:	2001      	movs	r0, #1
	__asm__ volatile(
    acba:	f386 8811 	msr	BASEPRI, r6
    acbe:	f3bf 8f6f 	isb	sy
}
    acc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    acc4:	42bb      	cmp	r3, r7
    acc6:	d001      	beq.n	accc <z_set_prio+0x84>
    acc8:	681b      	ldr	r3, [r3, #0]
    acca:	e7e5      	b.n	ac98 <z_set_prio+0x50>
	node->prev = tail;
    accc:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    acd0:	603c      	str	r4, [r7, #0]
	list->tail = node;
    acd2:	6244      	str	r4, [r0, #36]	; 0x24
}
    acd4:	e7ed      	b.n	acb2 <z_set_prio+0x6a>
			thread->base.prio = prio;
    acd6:	2000      	movs	r0, #0
    acd8:	73a1      	strb	r1, [r4, #14]
    acda:	e7ee      	b.n	acba <z_set_prio+0x72>
    acdc:	20000d24 	.word	0x20000d24

0000ace0 <z_impl_k_thread_suspend>:
{
    ace0:	b570      	push	{r4, r5, r6, lr}
    ace2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    ace4:	3018      	adds	r0, #24
    ace6:	f005 f84a 	bl	fd7e <z_abort_timeout>
	__asm__ volatile(
    acea:	f04f 0320 	mov.w	r3, #32
    acee:	f3ef 8611 	mrs	r6, BASEPRI
    acf2:	f383 8812 	msr	BASEPRI_MAX, r3
    acf6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    acfa:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    acfe:	7b63      	ldrb	r3, [r4, #13]
    ad00:	2a00      	cmp	r2, #0
    ad02:	da05      	bge.n	ad10 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ad04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    ad08:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ad0a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ad0c:	f004 ff8e 	bl	fc2c <sys_dlist_remove>
		update_cache(thread == _current);
    ad10:	4d0b      	ldr	r5, [pc, #44]	; (ad40 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ad12:	7b63      	ldrb	r3, [r4, #13]
    ad14:	68a8      	ldr	r0, [r5, #8]
    ad16:	f043 0310 	orr.w	r3, r3, #16
    ad1a:	7363      	strb	r3, [r4, #13]
    ad1c:	1b03      	subs	r3, r0, r4
    ad1e:	4258      	negs	r0, r3
    ad20:	4158      	adcs	r0, r3
    ad22:	f7ff fe49 	bl	a9b8 <update_cache>
	__asm__ volatile(
    ad26:	f386 8811 	msr	BASEPRI, r6
    ad2a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    ad2e:	68ab      	ldr	r3, [r5, #8]
    ad30:	42a3      	cmp	r3, r4
    ad32:	d103      	bne.n	ad3c <z_impl_k_thread_suspend+0x5c>
}
    ad34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    ad38:	f004 bf96 	b.w	fc68 <z_reschedule_unlocked>
}
    ad3c:	bd70      	pop	{r4, r5, r6, pc}
    ad3e:	bf00      	nop
    ad40:	20000d24 	.word	0x20000d24

0000ad44 <k_sched_unlock>:
{
    ad44:	b510      	push	{r4, lr}
	__asm__ volatile(
    ad46:	f04f 0320 	mov.w	r3, #32
    ad4a:	f3ef 8411 	mrs	r4, BASEPRI
    ad4e:	f383 8812 	msr	BASEPRI_MAX, r3
    ad52:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    ad56:	4b08      	ldr	r3, [pc, #32]	; (ad78 <k_sched_unlock+0x34>)
		update_cache(0);
    ad58:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    ad5a:	689a      	ldr	r2, [r3, #8]
    ad5c:	7bd3      	ldrb	r3, [r2, #15]
    ad5e:	3301      	adds	r3, #1
    ad60:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    ad62:	f7ff fe29 	bl	a9b8 <update_cache>
	__asm__ volatile(
    ad66:	f384 8811 	msr	BASEPRI, r4
    ad6a:	f3bf 8f6f 	isb	sy
}
    ad6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    ad72:	f004 bf79 	b.w	fc68 <z_reschedule_unlocked>
    ad76:	bf00      	nop
    ad78:	20000d24 	.word	0x20000d24

0000ad7c <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    ad7c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    ad7e:	4b04      	ldr	r3, [pc, #16]	; (ad90 <z_sched_init+0x14>)
    ad80:	4608      	mov	r0, r1
    ad82:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    ad86:	e9c3 2208 	strd	r2, r2, [r3, #32]
    ad8a:	f7ff bdbd 	b.w	a908 <k_sched_time_slice_set>
    ad8e:	bf00      	nop
    ad90:	20000d24 	.word	0x20000d24

0000ad94 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    ad96:	f04f 0320 	mov.w	r3, #32
    ad9a:	f3ef 8411 	mrs	r4, BASEPRI
    ad9e:	f383 8812 	msr	BASEPRI_MAX, r3
    ada2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    ada6:	491b      	ldr	r1, [pc, #108]	; (ae14 <z_impl_k_yield+0x80>)
    ada8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    adaa:	7b43      	ldrb	r3, [r0, #13]
    adac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    adb0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    adb2:	f004 ff3b 	bl	fc2c <sys_dlist_remove>
	return list->head == list;
    adb6:	4608      	mov	r0, r1
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    adb8:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    adba:	7b53      	ldrb	r3, [r2, #13]
    adbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    adc0:	7353      	strb	r3, [r2, #13]
    adc2:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    adc6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    adc8:	4283      	cmp	r3, r0
    adca:	bf08      	it	eq
    adcc:	2300      	moveq	r3, #0
    adce:	2b00      	cmp	r3, #0
    add0:	bf38      	it	cc
    add2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    add4:	b1cb      	cbz	r3, ae0a <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    add6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    adda:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    adde:	42af      	cmp	r7, r5
    ade0:	d00f      	beq.n	ae02 <z_impl_k_yield+0x6e>
		return b2 - b1;
    ade2:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    ade4:	2d00      	cmp	r5, #0
    ade6:	dd0c      	ble.n	ae02 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    ade8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    adea:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    adee:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    adf0:	605a      	str	r2, [r3, #4]
	update_cache(1);
    adf2:	2001      	movs	r0, #1
    adf4:	f7ff fde0 	bl	a9b8 <update_cache>
    adf8:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    adfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    adfe:	f7f9 b803 	b.w	3e08 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    ae02:	42b3      	cmp	r3, r6
    ae04:	d001      	beq.n	ae0a <z_impl_k_yield+0x76>
    ae06:	681b      	ldr	r3, [r3, #0]
    ae08:	e7e4      	b.n	add4 <z_impl_k_yield+0x40>
	node->prev = tail;
    ae0a:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    ae0e:	6032      	str	r2, [r6, #0]
	list->tail = node;
    ae10:	624a      	str	r2, [r1, #36]	; 0x24
}
    ae12:	e7ee      	b.n	adf2 <z_impl_k_yield+0x5e>
    ae14:	20000d24 	.word	0x20000d24

0000ae18 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    ae18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae1c:	4604      	mov	r4, r0
    ae1e:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    ae20:	ea54 0105 	orrs.w	r1, r4, r5
    ae24:	d104      	bne.n	ae30 <z_tick_sleep+0x18>
	z_impl_k_yield();
    ae26:	f7ff ffb5 	bl	ad94 <z_impl_k_yield>
		k_yield();
		return 0;
    ae2a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    ae2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    ae30:	f06f 0101 	mvn.w	r1, #1
    ae34:	1a0a      	subs	r2, r1, r0
    ae36:	f04f 31ff 	mov.w	r1, #4294967295
    ae3a:	eb61 0305 	sbc.w	r3, r1, r5
    ae3e:	2a01      	cmp	r2, #1
    ae40:	f173 0300 	sbcs.w	r3, r3, #0
    ae44:	da2a      	bge.n	ae9c <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    ae46:	f004 ffda 	bl	fdfe <sys_clock_tick_get_32>
    ae4a:	1906      	adds	r6, r0, r4
    ae4c:	f04f 0320 	mov.w	r3, #32
    ae50:	f3ef 8811 	mrs	r8, BASEPRI
    ae54:	f383 8812 	msr	BASEPRI_MAX, r3
    ae58:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    ae5c:	4f11      	ldr	r7, [pc, #68]	; (aea4 <z_tick_sleep+0x8c>)
    ae5e:	4b12      	ldr	r3, [pc, #72]	; (aea8 <z_tick_sleep+0x90>)
    ae60:	68b8      	ldr	r0, [r7, #8]
    ae62:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    ae64:	f7ff fe9e 	bl	aba4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ae68:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ae6a:	4910      	ldr	r1, [pc, #64]	; (aeac <z_tick_sleep+0x94>)
    ae6c:	4622      	mov	r2, r4
    ae6e:	462b      	mov	r3, r5
    ae70:	3018      	adds	r0, #24
    ae72:	f000 f8f9 	bl	b068 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ae76:	68ba      	ldr	r2, [r7, #8]
    ae78:	4640      	mov	r0, r8
    ae7a:	7b53      	ldrb	r3, [r2, #13]
    ae7c:	f043 0310 	orr.w	r3, r3, #16
    ae80:	7353      	strb	r3, [r2, #13]
    ae82:	f7f8 ffc1 	bl	3e08 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ae86:	f004 ffba 	bl	fdfe <sys_clock_tick_get_32>
    ae8a:	1a30      	subs	r0, r6, r0
    ae8c:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    ae90:	2801      	cmp	r0, #1
    ae92:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    ae96:	bfb8      	it	lt
    ae98:	2000      	movlt	r0, #0
    ae9a:	e7c7      	b.n	ae2c <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    ae9c:	f06f 0601 	mvn.w	r6, #1
    aea0:	1a36      	subs	r6, r6, r0
    aea2:	e7d3      	b.n	ae4c <z_tick_sleep+0x34>
    aea4:	20000d24 	.word	0x20000d24
    aea8:	20000d4c 	.word	0x20000d4c
    aeac:	0000fcb1 	.word	0x0000fcb1

0000aeb0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    aeb0:	b508      	push	{r3, lr}
    aeb2:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    aeb4:	3301      	adds	r3, #1
    aeb6:	bf08      	it	eq
    aeb8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    aebc:	d106      	bne.n	aecc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    aebe:	4b08      	ldr	r3, [pc, #32]	; (aee0 <z_impl_k_sleep+0x30>)
    aec0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    aec2:	f7ff ff0d 	bl	ace0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    aec6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    aeca:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    aecc:	f7ff ffa4 	bl	ae18 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    aed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    aed4:	fb80 2303 	smull	r2, r3, r0, r3
    aed8:	0bd0      	lsrs	r0, r2, #15
    aeda:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    aede:	e7f4      	b.n	aeca <z_impl_k_sleep+0x1a>
    aee0:	20000d24 	.word	0x20000d24

0000aee4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    aee4:	4b01      	ldr	r3, [pc, #4]	; (aeec <z_impl_z_current_get+0x8>)
    aee6:	6898      	ldr	r0, [r3, #8]
    aee8:	4770      	bx	lr
    aeea:	bf00      	nop
    aeec:	20000d24 	.word	0x20000d24

0000aef0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aef4:	4604      	mov	r4, r0
    aef6:	f04f 0320 	mov.w	r3, #32
    aefa:	f3ef 8611 	mrs	r6, BASEPRI
    aefe:	f383 8812 	msr	BASEPRI_MAX, r3
    af02:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    af06:	7b43      	ldrb	r3, [r0, #13]
    af08:	071a      	lsls	r2, r3, #28
    af0a:	d505      	bpl.n	af18 <z_thread_abort+0x28>
	__asm__ volatile(
    af0c:	f386 8811 	msr	BASEPRI, r6
    af10:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    af18:	f023 0220 	bic.w	r2, r3, #32
    af1c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    af20:	09d2      	lsrs	r2, r2, #7
    af22:	d120      	bne.n	af66 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    af24:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    af26:	68a3      	ldr	r3, [r4, #8]
    af28:	b113      	cbz	r3, af30 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    af2a:	4620      	mov	r0, r4
    af2c:	f004 fe86 	bl	fc3c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    af30:	f104 0018 	add.w	r0, r4, #24
    af34:	f004 ff23 	bl	fd7e <z_abort_timeout>
    af38:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    af3c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    af40:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    af42:	42bd      	cmp	r5, r7
    af44:	d000      	beq.n	af48 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    af46:	b9b5      	cbnz	r5, af76 <z_thread_abort+0x86>
		update_cache(1);
    af48:	2001      	movs	r0, #1
    af4a:	f7ff fd35 	bl	a9b8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    af4e:	4b10      	ldr	r3, [pc, #64]	; (af90 <z_thread_abort+0xa0>)
    af50:	689b      	ldr	r3, [r3, #8]
    af52:	42a3      	cmp	r3, r4
    af54:	d1da      	bne.n	af0c <z_thread_abort+0x1c>
    af56:	f3ef 8305 	mrs	r3, IPSR
    af5a:	2b00      	cmp	r3, #0
    af5c:	d1d6      	bne.n	af0c <z_thread_abort+0x1c>
    af5e:	4630      	mov	r0, r6
    af60:	f7f8 ff52 	bl	3e08 <arch_swap>
	return ret;
    af64:	e7d2      	b.n	af0c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    af66:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    af6a:	f043 0308 	orr.w	r3, r3, #8
    af6e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    af70:	f004 fe5c 	bl	fc2c <sys_dlist_remove>
}
    af74:	e7d7      	b.n	af26 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    af76:	4628      	mov	r0, r5
    af78:	f004 fe60 	bl	fc3c <unpend_thread_no_timeout>
    af7c:	f105 0018 	add.w	r0, r5, #24
    af80:	f004 fefd 	bl	fd7e <z_abort_timeout>
		ready_thread(thread);
    af84:	4628      	mov	r0, r5
    af86:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    af8a:	f7ff fdb5 	bl	aaf8 <ready_thread>
    af8e:	e7d7      	b.n	af40 <z_thread_abort+0x50>
    af90:	20000d24 	.word	0x20000d24

0000af94 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    af94:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    af96:	4806      	ldr	r0, [pc, #24]	; (afb0 <z_data_copy+0x1c>)
    af98:	4a06      	ldr	r2, [pc, #24]	; (afb4 <z_data_copy+0x20>)
    af9a:	4907      	ldr	r1, [pc, #28]	; (afb8 <z_data_copy+0x24>)
    af9c:	1a12      	subs	r2, r2, r0
    af9e:	f004 ff6f 	bl	fe80 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    afa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    afa6:	4a05      	ldr	r2, [pc, #20]	; (afbc <z_data_copy+0x28>)
    afa8:	4905      	ldr	r1, [pc, #20]	; (afc0 <z_data_copy+0x2c>)
    afaa:	4806      	ldr	r0, [pc, #24]	; (afc4 <z_data_copy+0x30>)
    afac:	f004 bf68 	b.w	fe80 <memcpy>
    afb0:	20000000 	.word	0x20000000
    afb4:	20000340 	.word	0x20000340
    afb8:	000655e0 	.word	0x000655e0
    afbc:	00000000 	.word	0x00000000
    afc0:	000655e0 	.word	0x000655e0
    afc4:	20000000 	.word	0x20000000

0000afc8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    afc8:	4b03      	ldr	r3, [pc, #12]	; (afd8 <elapsed+0x10>)
    afca:	681b      	ldr	r3, [r3, #0]
    afcc:	b90b      	cbnz	r3, afd2 <elapsed+0xa>
    afce:	f7fa baf1 	b.w	55b4 <sys_clock_elapsed>
}
    afd2:	2000      	movs	r0, #0
    afd4:	4770      	bx	lr
    afd6:	bf00      	nop
    afd8:	20000d58 	.word	0x20000d58

0000afdc <remove_timeout>:
{
    afdc:	b530      	push	{r4, r5, lr}
    afde:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    afe0:	b168      	cbz	r0, affe <remove_timeout+0x22>
    afe2:	4a0a      	ldr	r2, [pc, #40]	; (b00c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    afe4:	6852      	ldr	r2, [r2, #4]
    afe6:	4290      	cmp	r0, r2
    afe8:	d009      	beq.n	affe <remove_timeout+0x22>
	if (next(t) != NULL) {
    afea:	b143      	cbz	r3, affe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    afec:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    aff0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    aff4:	1912      	adds	r2, r2, r4
    aff6:	eb45 0101 	adc.w	r1, r5, r1
    affa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    affe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    b000:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b002:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b004:	2300      	movs	r3, #0
	node->prev = NULL;
    b006:	e9c0 3300 	strd	r3, r3, [r0]
}
    b00a:	bd30      	pop	{r4, r5, pc}
    b00c:	20000064 	.word	0x20000064

0000b010 <next_timeout>:

static int32_t next_timeout(void)
{
    b010:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    b012:	4b13      	ldr	r3, [pc, #76]	; (b060 <next_timeout+0x50>)
    b014:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b016:	429c      	cmp	r4, r3
    b018:	bf08      	it	eq
    b01a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b01c:	f7ff ffd4 	bl	afc8 <elapsed>
    b020:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    b022:	b1bc      	cbz	r4, b054 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b024:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    b028:	1b40      	subs	r0, r0, r5
    b02a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    b02e:	2801      	cmp	r0, #1
    b030:	f171 0300 	sbcs.w	r3, r1, #0
    b034:	db11      	blt.n	b05a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b036:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b03a:	2300      	movs	r3, #0
    b03c:	4282      	cmp	r2, r0
    b03e:	eb73 0401 	sbcs.w	r4, r3, r1
    b042:	da00      	bge.n	b046 <next_timeout+0x36>
    b044:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b046:	4b07      	ldr	r3, [pc, #28]	; (b064 <next_timeout+0x54>)
    b048:	691b      	ldr	r3, [r3, #16]
    b04a:	b113      	cbz	r3, b052 <next_timeout+0x42>
    b04c:	4298      	cmp	r0, r3
    b04e:	bfa8      	it	ge
    b050:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    b052:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    b054:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b058:	e7f5      	b.n	b046 <next_timeout+0x36>
    b05a:	2000      	movs	r0, #0
    b05c:	e7f3      	b.n	b046 <next_timeout+0x36>
    b05e:	bf00      	nop
    b060:	20000064 	.word	0x20000064
    b064:	20000d24 	.word	0x20000d24

0000b068 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b068:	f1b3 3fff 	cmp.w	r3, #4294967295
    b06c:	bf08      	it	eq
    b06e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    b072:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b076:	4604      	mov	r4, r0
    b078:	4692      	mov	sl, r2
    b07a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b07c:	d073      	beq.n	b166 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b07e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b080:	f04f 0320 	mov.w	r3, #32
    b084:	f3ef 8511 	mrs	r5, BASEPRI
    b088:	f383 8812 	msr	BASEPRI_MAX, r3
    b08c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b090:	f06f 0301 	mvn.w	r3, #1
    b094:	f04f 32ff 	mov.w	r2, #4294967295
    b098:	ebb3 080a 	subs.w	r8, r3, sl
    b09c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b0a0:	f1b8 0f00 	cmp.w	r8, #0
    b0a4:	f179 0100 	sbcs.w	r1, r9, #0
    b0a8:	db1c      	blt.n	b0e4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b0aa:	4830      	ldr	r0, [pc, #192]	; (b16c <z_add_timeout+0x104>)
    b0ac:	e9d0 1000 	ldrd	r1, r0, [r0]
    b0b0:	1a5b      	subs	r3, r3, r1
    b0b2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    b0b6:	ebb3 060a 	subs.w	r6, r3, sl
    b0ba:	eb62 070b 	sbc.w	r7, r2, fp
    b0be:	2e01      	cmp	r6, #1
    b0c0:	f177 0300 	sbcs.w	r3, r7, #0
    b0c4:	bfbc      	itt	lt
    b0c6:	2601      	movlt	r6, #1
    b0c8:	2700      	movlt	r7, #0
    b0ca:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    b0ce:	4a28      	ldr	r2, [pc, #160]	; (b170 <z_add_timeout+0x108>)
    b0d0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0d4:	4293      	cmp	r3, r2
    b0d6:	d11e      	bne.n	b116 <z_add_timeout+0xae>
	node->prev = tail;
    b0d8:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    b0dc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    b0e0:	6054      	str	r4, [r2, #4]
}
    b0e2:	e02d      	b.n	b140 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b0e4:	f7ff ff70 	bl	afc8 <elapsed>
    b0e8:	f11a 0301 	adds.w	r3, sl, #1
    b0ec:	9300      	str	r3, [sp, #0]
    b0ee:	f14b 0300 	adc.w	r3, fp, #0
    b0f2:	9301      	str	r3, [sp, #4]
    b0f4:	e9dd 2300 	ldrd	r2, r3, [sp]
    b0f8:	1812      	adds	r2, r2, r0
    b0fa:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    b0fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
    b102:	e7e4      	b.n	b0ce <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    b104:	ebb6 0008 	subs.w	r0, r6, r8
    b108:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    b10c:	4563      	cmp	r3, ip
    b10e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b112:	d0e1      	beq.n	b0d8 <z_add_timeout+0x70>
    b114:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    b116:	2b00      	cmp	r3, #0
    b118:	d0de      	beq.n	b0d8 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    b11a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    b11e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    b122:	4546      	cmp	r6, r8
    b124:	eb77 0109 	sbcs.w	r1, r7, r9
    b128:	daec      	bge.n	b104 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    b12a:	ebb8 0006 	subs.w	r0, r8, r6
    b12e:	eb69 0107 	sbc.w	r1, r9, r7
    b132:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    b136:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    b138:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    b13c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    b13e:	605c      	str	r4, [r3, #4]
	return list->head == list;
    b140:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b142:	4293      	cmp	r3, r2
    b144:	d00b      	beq.n	b15e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b146:	429c      	cmp	r4, r3
    b148:	d109      	bne.n	b15e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b14a:	f7ff ff61 	bl	b010 <next_timeout>

			if (next_time == 0 ||
    b14e:	b118      	cbz	r0, b158 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    b150:	4b08      	ldr	r3, [pc, #32]	; (b174 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    b152:	691b      	ldr	r3, [r3, #16]
    b154:	4283      	cmp	r3, r0
    b156:	d002      	beq.n	b15e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    b158:	2100      	movs	r1, #0
    b15a:	f7fa f9fb 	bl	5554 <sys_clock_set_timeout>
	__asm__ volatile(
    b15e:	f385 8811 	msr	BASEPRI, r5
    b162:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b166:	b003      	add	sp, #12
    b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b16c:	20000460 	.word	0x20000460
    b170:	20000064 	.word	0x20000064
    b174:	20000d24 	.word	0x20000d24

0000b178 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    b178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b17c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b17e:	f7ff fc79 	bl	aa74 <z_time_slice>
	__asm__ volatile(
    b182:	f04f 0320 	mov.w	r3, #32
    b186:	f3ef 8411 	mrs	r4, BASEPRI
    b18a:	f383 8812 	msr	BASEPRI_MAX, r3
    b18e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b192:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b244 <sys_clock_announce+0xcc>
    b196:	4d2a      	ldr	r5, [pc, #168]	; (b240 <sys_clock_announce+0xc8>)
    b198:	4651      	mov	r1, sl
	return list->head == list;
    b19a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; b248 <sys_clock_announce+0xd0>
    b19e:	602e      	str	r6, [r5, #0]
    b1a0:	f8d5 c000 	ldr.w	ip, [r5]
    b1a4:	f8db 0000 	ldr.w	r0, [fp]
    b1a8:	4662      	mov	r2, ip
    b1aa:	e9da 8900 	ldrd	r8, r9, [sl]
    b1ae:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b1b0:	4558      	cmp	r0, fp
    b1b2:	e9cd 2300 	strd	r2, r3, [sp]
    b1b6:	d00d      	beq.n	b1d4 <sys_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b1b8:	b160      	cbz	r0, b1d4 <sys_clock_announce+0x5c>
    b1ba:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    b1be:	45b4      	cmp	ip, r6
    b1c0:	41bb      	sbcs	r3, r7
    b1c2:	da1d      	bge.n	b200 <sys_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    b1c4:	9b00      	ldr	r3, [sp, #0]
    b1c6:	ebb6 0c03 	subs.w	ip, r6, r3
    b1ca:	9b01      	ldr	r3, [sp, #4]
    b1cc:	eb67 0603 	sbc.w	r6, r7, r3
    b1d0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    b1d4:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    b1d6:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    b1d8:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    b1da:	eb13 0208 	adds.w	r2, r3, r8
    b1de:	9b01      	ldr	r3, [sp, #4]
    b1e0:	eb43 0309 	adc.w	r3, r3, r9
    b1e4:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
    b1e8:	f7ff ff12 	bl	b010 <next_timeout>
    b1ec:	4631      	mov	r1, r6
    b1ee:	f7fa f9b1 	bl	5554 <sys_clock_set_timeout>
	__asm__ volatile(
    b1f2:	f384 8811 	msr	BASEPRI, r4
    b1f6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b1fa:	b003      	add	sp, #12
    b1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    b200:	2200      	movs	r2, #0
    b202:	2300      	movs	r3, #0
		curr_tick += dt;
    b204:	eb18 0806 	adds.w	r8, r8, r6
    b208:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    b20c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    b210:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    b214:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    b218:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    b21a:	f7ff fedf 	bl	afdc <remove_timeout>
    b21e:	f384 8811 	msr	BASEPRI, r4
    b222:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b226:	6883      	ldr	r3, [r0, #8]
    b228:	4798      	blx	r3
	__asm__ volatile(
    b22a:	f04f 0320 	mov.w	r3, #32
    b22e:	f3ef 8411 	mrs	r4, BASEPRI
    b232:	f383 8812 	msr	BASEPRI_MAX, r3
    b236:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    b23a:	4902      	ldr	r1, [pc, #8]	; (b244 <sys_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b23c:	e7b0      	b.n	b1a0 <sys_clock_announce+0x28>
    b23e:	bf00      	nop
    b240:	20000d58 	.word	0x20000d58
    b244:	20000460 	.word	0x20000460
    b248:	20000064 	.word	0x20000064

0000b24c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b24c:	b510      	push	{r4, lr}
    b24e:	f04f 0320 	mov.w	r3, #32
    b252:	f3ef 8411 	mrs	r4, BASEPRI
    b256:	f383 8812 	msr	BASEPRI_MAX, r3
    b25a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    b25e:	f7fa f9a9 	bl	55b4 <sys_clock_elapsed>
    b262:	4b06      	ldr	r3, [pc, #24]	; (b27c <sys_clock_tick_get+0x30>)
    b264:	e9d3 2300 	ldrd	r2, r3, [r3]
    b268:	1812      	adds	r2, r2, r0
    b26a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    b26e:	f384 8811 	msr	BASEPRI, r4
    b272:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b276:	4610      	mov	r0, r2
    b278:	4619      	mov	r1, r3
    b27a:	bd10      	pop	{r4, pc}
    b27c:	20000460 	.word	0x20000460

0000b280 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b280:	4a02      	ldr	r2, [pc, #8]	; (b28c <boot_banner+0xc>)
    b282:	4903      	ldr	r1, [pc, #12]	; (b290 <boot_banner+0x10>)
    b284:	4803      	ldr	r0, [pc, #12]	; (b294 <boot_banner+0x14>)
    b286:	f001 be16 	b.w	ceb6 <printk>
    b28a:	bf00      	nop
    b28c:	00062cf8 	.word	0x00062cf8
    b290:	0006540b 	.word	0x0006540b
    b294:	00065427 	.word	0x00065427

0000b298 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b298:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b29a:	4c06      	ldr	r4, [pc, #24]	; (b2b4 <statics_init+0x1c>)
    b29c:	4d06      	ldr	r5, [pc, #24]	; (b2b8 <statics_init+0x20>)
    b29e:	42ac      	cmp	r4, r5
    b2a0:	d301      	bcc.n	b2a6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    b2a2:	2000      	movs	r0, #0
    b2a4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b2a6:	4620      	mov	r0, r4
    b2a8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    b2ac:	f004 fdaf 	bl	fe0e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b2b0:	3418      	adds	r4, #24
    b2b2:	e7f4      	b.n	b29e <statics_init+0x6>
    b2b4:	200002b4 	.word	0x200002b4
    b2b8:	200002b4 	.word	0x200002b4

0000b2bc <nrf_cc3xx_platform_init_no_rng>:
    b2bc:	b510      	push	{r4, lr}
    b2be:	4c0a      	ldr	r4, [pc, #40]	; (b2e8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b2c0:	6823      	ldr	r3, [r4, #0]
    b2c2:	b11b      	cbz	r3, b2cc <nrf_cc3xx_platform_init_no_rng+0x10>
    b2c4:	2301      	movs	r3, #1
    b2c6:	2000      	movs	r0, #0
    b2c8:	6023      	str	r3, [r4, #0]
    b2ca:	bd10      	pop	{r4, pc}
    b2cc:	f000 f8d4 	bl	b478 <CC_LibInitNoRng>
    b2d0:	2800      	cmp	r0, #0
    b2d2:	d0f7      	beq.n	b2c4 <nrf_cc3xx_platform_init_no_rng+0x8>
    b2d4:	3801      	subs	r0, #1
    b2d6:	2807      	cmp	r0, #7
    b2d8:	d803      	bhi.n	b2e2 <nrf_cc3xx_platform_init_no_rng+0x26>
    b2da:	4b04      	ldr	r3, [pc, #16]	; (b2ec <nrf_cc3xx_platform_init_no_rng+0x30>)
    b2dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b2e0:	bd10      	pop	{r4, pc}
    b2e2:	4803      	ldr	r0, [pc, #12]	; (b2f0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b2e4:	bd10      	pop	{r4, pc}
    b2e6:	bf00      	nop
    b2e8:	20000d5c 	.word	0x20000d5c
    b2ec:	00062a54 	.word	0x00062a54
    b2f0:	ffff8ffe 	.word	0xffff8ffe

0000b2f4 <nrf_cc3xx_platform_abort>:
    b2f4:	f3bf 8f4f 	dsb	sy
    b2f8:	4905      	ldr	r1, [pc, #20]	; (b310 <nrf_cc3xx_platform_abort+0x1c>)
    b2fa:	4b06      	ldr	r3, [pc, #24]	; (b314 <nrf_cc3xx_platform_abort+0x20>)
    b2fc:	68ca      	ldr	r2, [r1, #12]
    b2fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b302:	4313      	orrs	r3, r2
    b304:	60cb      	str	r3, [r1, #12]
    b306:	f3bf 8f4f 	dsb	sy
    b30a:	bf00      	nop
    b30c:	e7fd      	b.n	b30a <nrf_cc3xx_platform_abort+0x16>
    b30e:	bf00      	nop
    b310:	e000ed00 	.word	0xe000ed00
    b314:	05fa0004 	.word	0x05fa0004

0000b318 <CC_PalAbort>:
    b318:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    b31c:	2100      	movs	r1, #0
    b31e:	b430      	push	{r4, r5}
    b320:	4a08      	ldr	r2, [pc, #32]	; (b344 <CC_PalAbort+0x2c>)
    b322:	4c09      	ldr	r4, [pc, #36]	; (b348 <CC_PalAbort+0x30>)
    b324:	4d09      	ldr	r5, [pc, #36]	; (b34c <CC_PalAbort+0x34>)
    b326:	6023      	str	r3, [r4, #0]
    b328:	602b      	str	r3, [r5, #0]
    b32a:	6013      	str	r3, [r2, #0]
    b32c:	60e3      	str	r3, [r4, #12]
    b32e:	60eb      	str	r3, [r5, #12]
    b330:	60d3      	str	r3, [r2, #12]
    b332:	61a3      	str	r3, [r4, #24]
    b334:	4a06      	ldr	r2, [pc, #24]	; (b350 <CC_PalAbort+0x38>)
    b336:	4c07      	ldr	r4, [pc, #28]	; (b354 <CC_PalAbort+0x3c>)
    b338:	61ab      	str	r3, [r5, #24]
    b33a:	6863      	ldr	r3, [r4, #4]
    b33c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    b340:	bc30      	pop	{r4, r5}
    b342:	4718      	bx	r3
    b344:	50845408 	.word	0x50845408
    b348:	50845400 	.word	0x50845400
    b34c:	50845404 	.word	0x50845404
    b350:	50844000 	.word	0x50844000
    b354:	2000006c 	.word	0x2000006c

0000b358 <nrf_cc3xx_platform_set_abort>:
    b358:	4b02      	ldr	r3, [pc, #8]	; (b364 <nrf_cc3xx_platform_set_abort+0xc>)
    b35a:	e9d0 1200 	ldrd	r1, r2, [r0]
    b35e:	e9c3 1200 	strd	r1, r2, [r3]
    b362:	4770      	bx	lr
    b364:	2000006c 	.word	0x2000006c

0000b368 <mutex_free>:
    b368:	b510      	push	{r4, lr}
    b36a:	4604      	mov	r4, r0
    b36c:	b130      	cbz	r0, b37c <mutex_free+0x14>
    b36e:	6863      	ldr	r3, [r4, #4]
    b370:	06db      	lsls	r3, r3, #27
    b372:	d502      	bpl.n	b37a <mutex_free+0x12>
    b374:	2300      	movs	r3, #0
    b376:	6023      	str	r3, [r4, #0]
    b378:	6063      	str	r3, [r4, #4]
    b37a:	bd10      	pop	{r4, pc}
    b37c:	4b02      	ldr	r3, [pc, #8]	; (b388 <mutex_free+0x20>)
    b37e:	4803      	ldr	r0, [pc, #12]	; (b38c <mutex_free+0x24>)
    b380:	685b      	ldr	r3, [r3, #4]
    b382:	4798      	blx	r3
    b384:	e7f3      	b.n	b36e <mutex_free+0x6>
    b386:	bf00      	nop
    b388:	2000006c 	.word	0x2000006c
    b38c:	00062a74 	.word	0x00062a74

0000b390 <mutex_unlock>:
    b390:	b168      	cbz	r0, b3ae <mutex_unlock+0x1e>
    b392:	6843      	ldr	r3, [r0, #4]
    b394:	b13b      	cbz	r3, b3a6 <mutex_unlock+0x16>
    b396:	06db      	lsls	r3, r3, #27
    b398:	d507      	bpl.n	b3aa <mutex_unlock+0x1a>
    b39a:	f3bf 8f5f 	dmb	sy
    b39e:	2300      	movs	r3, #0
    b3a0:	6003      	str	r3, [r0, #0]
    b3a2:	4618      	mov	r0, r3
    b3a4:	4770      	bx	lr
    b3a6:	4803      	ldr	r0, [pc, #12]	; (b3b4 <mutex_unlock+0x24>)
    b3a8:	4770      	bx	lr
    b3aa:	4803      	ldr	r0, [pc, #12]	; (b3b8 <mutex_unlock+0x28>)
    b3ac:	4770      	bx	lr
    b3ae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b3b2:	4770      	bx	lr
    b3b4:	ffff8fea 	.word	0xffff8fea
    b3b8:	ffff8fe9 	.word	0xffff8fe9

0000b3bc <mutex_init>:
    b3bc:	b510      	push	{r4, lr}
    b3be:	4604      	mov	r4, r0
    b3c0:	b120      	cbz	r0, b3cc <mutex_init+0x10>
    b3c2:	2200      	movs	r2, #0
    b3c4:	2311      	movs	r3, #17
    b3c6:	6022      	str	r2, [r4, #0]
    b3c8:	6063      	str	r3, [r4, #4]
    b3ca:	bd10      	pop	{r4, pc}
    b3cc:	4801      	ldr	r0, [pc, #4]	; (b3d4 <mutex_init+0x18>)
    b3ce:	f7ff ffa3 	bl	b318 <CC_PalAbort>
    b3d2:	e7f6      	b.n	b3c2 <mutex_init+0x6>
    b3d4:	00062a9c 	.word	0x00062a9c

0000b3d8 <mutex_lock>:
    b3d8:	b1a0      	cbz	r0, b404 <mutex_lock+0x2c>
    b3da:	6843      	ldr	r3, [r0, #4]
    b3dc:	b183      	cbz	r3, b400 <mutex_lock+0x28>
    b3de:	06db      	lsls	r3, r3, #27
    b3e0:	d50c      	bpl.n	b3fc <mutex_lock+0x24>
    b3e2:	2201      	movs	r2, #1
    b3e4:	e8d0 3fef 	ldaex	r3, [r0]
    b3e8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    b3ec:	2900      	cmp	r1, #0
    b3ee:	d1f9      	bne.n	b3e4 <mutex_lock+0xc>
    b3f0:	2b01      	cmp	r3, #1
    b3f2:	d0f7      	beq.n	b3e4 <mutex_lock+0xc>
    b3f4:	f3bf 8f5f 	dmb	sy
    b3f8:	2000      	movs	r0, #0
    b3fa:	4770      	bx	lr
    b3fc:	4803      	ldr	r0, [pc, #12]	; (b40c <mutex_lock+0x34>)
    b3fe:	4770      	bx	lr
    b400:	4803      	ldr	r0, [pc, #12]	; (b410 <mutex_lock+0x38>)
    b402:	4770      	bx	lr
    b404:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b408:	4770      	bx	lr
    b40a:	bf00      	nop
    b40c:	ffff8fe9 	.word	0xffff8fe9
    b410:	ffff8fea 	.word	0xffff8fea

0000b414 <nrf_cc3xx_platform_set_mutexes>:
    b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b418:	4c14      	ldr	r4, [pc, #80]	; (b46c <nrf_cc3xx_platform_set_mutexes+0x58>)
    b41a:	6802      	ldr	r2, [r0, #0]
    b41c:	68c3      	ldr	r3, [r0, #12]
    b41e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    b422:	e9c4 6302 	strd	r6, r3, [r4, #8]
    b426:	e9c4 2500 	strd	r2, r5, [r4]
    b42a:	4b11      	ldr	r3, [pc, #68]	; (b470 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    b42c:	680e      	ldr	r6, [r1, #0]
    b42e:	6848      	ldr	r0, [r1, #4]
    b430:	4d10      	ldr	r5, [pc, #64]	; (b474 <nrf_cc3xx_platform_set_mutexes+0x60>)
    b432:	e9c3 6000 	strd	r6, r0, [r3]
    b436:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    b43a:	6908      	ldr	r0, [r1, #16]
    b43c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    b440:	e9c3 7602 	strd	r7, r6, [r3, #8]
    b444:	6118      	str	r0, [r3, #16]
    b446:	06cb      	lsls	r3, r1, #27
    b448:	d50d      	bpl.n	b466 <nrf_cc3xx_platform_set_mutexes+0x52>
    b44a:	2300      	movs	r3, #0
    b44c:	f505 7088 	add.w	r0, r5, #272	; 0x110
    b450:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    b454:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    b458:	4790      	blx	r2
    b45a:	6823      	ldr	r3, [r4, #0]
    b45c:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    b460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b464:	4718      	bx	r3
    b466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b46a:	bf00      	nop
    b46c:	2000007c 	.word	0x2000007c
    b470:	2000008c 	.word	0x2000008c
    b474:	20028218 	.word	0x20028218

0000b478 <CC_LibInitNoRng>:
    b478:	b508      	push	{r3, lr}
    b47a:	f000 f80f 	bl	b49c <CC_HalInit>
    b47e:	b928      	cbnz	r0, b48c <CC_LibInitNoRng+0x14>
    b480:	f000 f80e 	bl	b4a0 <CC_PalInit>
    b484:	b930      	cbnz	r0, b494 <CC_LibInitNoRng+0x1c>
    b486:	4a04      	ldr	r2, [pc, #16]	; (b498 <CC_LibInitNoRng+0x20>)
    b488:	6010      	str	r0, [r2, #0]
    b48a:	bd08      	pop	{r3, pc}
    b48c:	f000 f836 	bl	b4fc <CC_PalTerminate>
    b490:	2003      	movs	r0, #3
    b492:	bd08      	pop	{r3, pc}
    b494:	2004      	movs	r0, #4
    b496:	bd08      	pop	{r3, pc}
    b498:	50845a0c 	.word	0x50845a0c

0000b49c <CC_HalInit>:
    b49c:	2000      	movs	r0, #0
    b49e:	4770      	bx	lr

0000b4a0 <CC_PalInit>:
    b4a0:	b510      	push	{r4, lr}
    b4a2:	4811      	ldr	r0, [pc, #68]	; (b4e8 <CC_PalInit+0x48>)
    b4a4:	f000 f848 	bl	b538 <CC_PalMutexCreate>
    b4a8:	b100      	cbz	r0, b4ac <CC_PalInit+0xc>
    b4aa:	bd10      	pop	{r4, pc}
    b4ac:	480f      	ldr	r0, [pc, #60]	; (b4ec <CC_PalInit+0x4c>)
    b4ae:	f000 f843 	bl	b538 <CC_PalMutexCreate>
    b4b2:	2800      	cmp	r0, #0
    b4b4:	d1f9      	bne.n	b4aa <CC_PalInit+0xa>
    b4b6:	4c0e      	ldr	r4, [pc, #56]	; (b4f0 <CC_PalInit+0x50>)
    b4b8:	4620      	mov	r0, r4
    b4ba:	f000 f83d 	bl	b538 <CC_PalMutexCreate>
    b4be:	2800      	cmp	r0, #0
    b4c0:	d1f3      	bne.n	b4aa <CC_PalInit+0xa>
    b4c2:	4b0c      	ldr	r3, [pc, #48]	; (b4f4 <CC_PalInit+0x54>)
    b4c4:	480c      	ldr	r0, [pc, #48]	; (b4f8 <CC_PalInit+0x58>)
    b4c6:	601c      	str	r4, [r3, #0]
    b4c8:	f000 f836 	bl	b538 <CC_PalMutexCreate>
    b4cc:	4601      	mov	r1, r0
    b4ce:	2800      	cmp	r0, #0
    b4d0:	d1eb      	bne.n	b4aa <CC_PalInit+0xa>
    b4d2:	f000 f82d 	bl	b530 <CC_PalDmaInit>
    b4d6:	4604      	mov	r4, r0
    b4d8:	b108      	cbz	r0, b4de <CC_PalInit+0x3e>
    b4da:	4620      	mov	r0, r4
    b4dc:	bd10      	pop	{r4, pc}
    b4de:	f000 f83f 	bl	b560 <CC_PalPowerSaveModeInit>
    b4e2:	4620      	mov	r0, r4
    b4e4:	e7fa      	b.n	b4dc <CC_PalInit+0x3c>
    b4e6:	bf00      	nop
    b4e8:	200000c4 	.word	0x200000c4
    b4ec:	200000b8 	.word	0x200000b8
    b4f0:	200000c0 	.word	0x200000c0
    b4f4:	200000c8 	.word	0x200000c8
    b4f8:	200000bc 	.word	0x200000bc

0000b4fc <CC_PalTerminate>:
    b4fc:	b508      	push	{r3, lr}
    b4fe:	4808      	ldr	r0, [pc, #32]	; (b520 <CC_PalTerminate+0x24>)
    b500:	f000 f824 	bl	b54c <CC_PalMutexDestroy>
    b504:	4807      	ldr	r0, [pc, #28]	; (b524 <CC_PalTerminate+0x28>)
    b506:	f000 f821 	bl	b54c <CC_PalMutexDestroy>
    b50a:	4807      	ldr	r0, [pc, #28]	; (b528 <CC_PalTerminate+0x2c>)
    b50c:	f000 f81e 	bl	b54c <CC_PalMutexDestroy>
    b510:	4806      	ldr	r0, [pc, #24]	; (b52c <CC_PalTerminate+0x30>)
    b512:	f000 f81b 	bl	b54c <CC_PalMutexDestroy>
    b516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b51a:	f000 b80b 	b.w	b534 <CC_PalDmaTerminate>
    b51e:	bf00      	nop
    b520:	200000c4 	.word	0x200000c4
    b524:	200000b8 	.word	0x200000b8
    b528:	200000c0 	.word	0x200000c0
    b52c:	200000bc 	.word	0x200000bc

0000b530 <CC_PalDmaInit>:
    b530:	2000      	movs	r0, #0
    b532:	4770      	bx	lr

0000b534 <CC_PalDmaTerminate>:
    b534:	4770      	bx	lr
    b536:	bf00      	nop

0000b538 <CC_PalMutexCreate>:
    b538:	b508      	push	{r3, lr}
    b53a:	4b03      	ldr	r3, [pc, #12]	; (b548 <CC_PalMutexCreate+0x10>)
    b53c:	6802      	ldr	r2, [r0, #0]
    b53e:	681b      	ldr	r3, [r3, #0]
    b540:	6810      	ldr	r0, [r2, #0]
    b542:	4798      	blx	r3
    b544:	2000      	movs	r0, #0
    b546:	bd08      	pop	{r3, pc}
    b548:	2000007c 	.word	0x2000007c

0000b54c <CC_PalMutexDestroy>:
    b54c:	b508      	push	{r3, lr}
    b54e:	4b03      	ldr	r3, [pc, #12]	; (b55c <CC_PalMutexDestroy+0x10>)
    b550:	6802      	ldr	r2, [r0, #0]
    b552:	685b      	ldr	r3, [r3, #4]
    b554:	6810      	ldr	r0, [r2, #0]
    b556:	4798      	blx	r3
    b558:	2000      	movs	r0, #0
    b55a:	bd08      	pop	{r3, pc}
    b55c:	2000007c 	.word	0x2000007c

0000b560 <CC_PalPowerSaveModeInit>:
    b560:	b570      	push	{r4, r5, r6, lr}
    b562:	4c09      	ldr	r4, [pc, #36]	; (b588 <CC_PalPowerSaveModeInit+0x28>)
    b564:	4d09      	ldr	r5, [pc, #36]	; (b58c <CC_PalPowerSaveModeInit+0x2c>)
    b566:	6920      	ldr	r0, [r4, #16]
    b568:	68ab      	ldr	r3, [r5, #8]
    b56a:	4798      	blx	r3
    b56c:	b118      	cbz	r0, b576 <CC_PalPowerSaveModeInit+0x16>
    b56e:	4b08      	ldr	r3, [pc, #32]	; (b590 <CC_PalPowerSaveModeInit+0x30>)
    b570:	4808      	ldr	r0, [pc, #32]	; (b594 <CC_PalPowerSaveModeInit+0x34>)
    b572:	685b      	ldr	r3, [r3, #4]
    b574:	4798      	blx	r3
    b576:	2100      	movs	r1, #0
    b578:	4a07      	ldr	r2, [pc, #28]	; (b598 <CC_PalPowerSaveModeInit+0x38>)
    b57a:	68eb      	ldr	r3, [r5, #12]
    b57c:	6011      	str	r1, [r2, #0]
    b57e:	6920      	ldr	r0, [r4, #16]
    b580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b584:	4718      	bx	r3
    b586:	bf00      	nop
    b588:	2000008c 	.word	0x2000008c
    b58c:	2000007c 	.word	0x2000007c
    b590:	2000006c 	.word	0x2000006c
    b594:	00062ac0 	.word	0x00062ac0
    b598:	20000d70 	.word	0x20000d70

0000b59c <_ZSt15get_new_handlerv>:
    b59c:	4b01      	ldr	r3, [pc, #4]	; (b5a4 <_ZSt15get_new_handlerv+0x8>)
    b59e:	e8d3 0faf 	lda	r0, [r3]
    b5a2:	4770      	bx	lr
    b5a4:	20000d74 	.word	0x20000d74

0000b5a8 <frexp>:
    b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5aa:	f8df c064 	ldr.w	ip, [pc, #100]	; b610 <frexp+0x68>
    b5ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    b5b2:	2700      	movs	r7, #0
    b5b4:	4604      	mov	r4, r0
    b5b6:	4563      	cmp	r3, ip
    b5b8:	460d      	mov	r5, r1
    b5ba:	4616      	mov	r6, r2
    b5bc:	6017      	str	r7, [r2, #0]
    b5be:	dc20      	bgt.n	b602 <frexp+0x5a>
    b5c0:	4684      	mov	ip, r0
    b5c2:	ea53 0c0c 	orrs.w	ip, r3, ip
    b5c6:	d01c      	beq.n	b602 <frexp+0x5a>
    b5c8:	f8df c048 	ldr.w	ip, [pc, #72]	; b614 <frexp+0x6c>
    b5cc:	460a      	mov	r2, r1
    b5ce:	ea01 0c0c 	and.w	ip, r1, ip
    b5d2:	f1bc 0f00 	cmp.w	ip, #0
    b5d6:	d109      	bne.n	b5ec <frexp+0x44>
    b5d8:	2200      	movs	r2, #0
    b5da:	4b0b      	ldr	r3, [pc, #44]	; (b608 <frexp+0x60>)
    b5dc:	f7f4 ff78 	bl	4d0 <__aeabi_dmul>
    b5e0:	f06f 0735 	mvn.w	r7, #53	; 0x35
    b5e4:	4604      	mov	r4, r0
    b5e6:	460a      	mov	r2, r1
    b5e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    b5ec:	4907      	ldr	r1, [pc, #28]	; (b60c <frexp+0x64>)
    b5ee:	151b      	asrs	r3, r3, #20
    b5f0:	4011      	ands	r1, r2
    b5f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    b5f6:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
    b5fa:	443b      	add	r3, r7
    b5fc:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    b600:	6033      	str	r3, [r6, #0]
    b602:	4620      	mov	r0, r4
    b604:	4629      	mov	r1, r5
    b606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b608:	43500000 	.word	0x43500000
    b60c:	800fffff 	.word	0x800fffff
    b610:	7fefffff 	.word	0x7fefffff
    b614:	7ff00000 	.word	0x7ff00000

0000b618 <round>:
    b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b61a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    b61e:	460d      	mov	r5, r1
    b620:	460b      	mov	r3, r1
    b622:	4602      	mov	r2, r0
    b624:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
    b628:	2c13      	cmp	r4, #19
    b62a:	dc12      	bgt.n	b652 <round+0x3a>
    b62c:	2c00      	cmp	r4, #0
    b62e:	db2c      	blt.n	b68a <round+0x72>
    b630:	491b      	ldr	r1, [pc, #108]	; (b6a0 <round+0x88>)
    b632:	4121      	asrs	r1, r4
    b634:	ea05 0001 	and.w	r0, r5, r1
    b638:	4310      	orrs	r0, r2
    b63a:	d007      	beq.n	b64c <round+0x34>
    b63c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    b640:	2200      	movs	r2, #0
    b642:	4123      	asrs	r3, r4
    b644:	441d      	add	r5, r3
    b646:	ea25 0501 	bic.w	r5, r5, r1
    b64a:	462b      	mov	r3, r5
    b64c:	4610      	mov	r0, r2
    b64e:	4619      	mov	r1, r3
    b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b652:	2c33      	cmp	r4, #51	; 0x33
    b654:	dd07      	ble.n	b666 <round+0x4e>
    b656:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    b65a:	d1f7      	bne.n	b64c <round+0x34>
    b65c:	f7f4 fd82 	bl	164 <__adddf3>
    b660:	4602      	mov	r2, r0
    b662:	460b      	mov	r3, r1
    b664:	e7f2      	b.n	b64c <round+0x34>
    b666:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    b66a:	f04f 31ff 	mov.w	r1, #4294967295
    b66e:	fa21 f707 	lsr.w	r7, r1, r7
    b672:	4238      	tst	r0, r7
    b674:	d0ea      	beq.n	b64c <round+0x34>
    b676:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
    b67a:	2201      	movs	r2, #1
    b67c:	409a      	lsls	r2, r3
    b67e:	1882      	adds	r2, r0, r2
    b680:	bf28      	it	cs
    b682:	3501      	addcs	r5, #1
    b684:	ea22 0207 	bic.w	r2, r2, r7
    b688:	e7df      	b.n	b64a <round+0x32>
    b68a:	3401      	adds	r4, #1
    b68c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    b690:	d002      	beq.n	b698 <round+0x80>
    b692:	461d      	mov	r5, r3
    b694:	2200      	movs	r2, #0
    b696:	e7d8      	b.n	b64a <round+0x32>
    b698:	4d02      	ldr	r5, [pc, #8]	; (b6a4 <round+0x8c>)
    b69a:	2200      	movs	r2, #0
    b69c:	431d      	orrs	r5, r3
    b69e:	e7d4      	b.n	b64a <round+0x32>
    b6a0:	000fffff 	.word	0x000fffff
    b6a4:	3ff00000 	.word	0x3ff00000

0000b6a8 <expf>:
    b6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6aa:	4e33      	ldr	r6, [pc, #204]	; (b778 <expf+0xd0>)
    b6ac:	b08b      	sub	sp, #44	; 0x2c
    b6ae:	4605      	mov	r5, r0
    b6b0:	f000 f86e 	bl	b790 <__ieee754_expf>
    b6b4:	f996 3000 	ldrsb.w	r3, [r6]
    b6b8:	4604      	mov	r4, r0
    b6ba:	3301      	adds	r3, #1
    b6bc:	d00f      	beq.n	b6de <expf+0x36>
    b6be:	4628      	mov	r0, r5
    b6c0:	f000 f982 	bl	b9c8 <finitef>
    b6c4:	b158      	cbz	r0, b6de <expf+0x36>
    b6c6:	492d      	ldr	r1, [pc, #180]	; (b77c <expf+0xd4>)
    b6c8:	4628      	mov	r0, r5
    b6ca:	f7f5 fcdd 	bl	1088 <__aeabi_fcmpgt>
    b6ce:	4607      	mov	r7, r0
    b6d0:	2800      	cmp	r0, #0
    b6d2:	d134      	bne.n	b73e <expf+0x96>
    b6d4:	492a      	ldr	r1, [pc, #168]	; (b780 <expf+0xd8>)
    b6d6:	4628      	mov	r0, r5
    b6d8:	f7f5 fcb8 	bl	104c <__aeabi_fcmplt>
    b6dc:	b910      	cbnz	r0, b6e4 <expf+0x3c>
    b6de:	4620      	mov	r0, r4
    b6e0:	b00b      	add	sp, #44	; 0x2c
    b6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6e4:	4b27      	ldr	r3, [pc, #156]	; (b784 <expf+0xdc>)
    b6e6:	2204      	movs	r2, #4
    b6e8:	4628      	mov	r0, r5
    b6ea:	9708      	str	r7, [sp, #32]
    b6ec:	2400      	movs	r4, #0
    b6ee:	2500      	movs	r5, #0
    b6f0:	e9cd 2300 	strd	r2, r3, [sp]
    b6f4:	f7f4 fe94 	bl	420 <__aeabi_f2d>
    b6f8:	f996 3000 	ldrsb.w	r3, [r6]
    b6fc:	2b02      	cmp	r3, #2
    b6fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
    b702:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b706:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b70a:	d013      	beq.n	b734 <expf+0x8c>
    b70c:	4668      	mov	r0, sp
    b70e:	f000 f959 	bl	b9c4 <matherr>
    b712:	b178      	cbz	r0, b734 <expf+0x8c>
    b714:	9b08      	ldr	r3, [sp, #32]
    b716:	bb4b      	cbnz	r3, b76c <expf+0xc4>
    b718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b71c:	f7f5 f99a 	bl	a54 <__aeabi_d2f>
    b720:	4604      	mov	r4, r0
    b722:	4620      	mov	r0, r4
    b724:	b00b      	add	sp, #44	; 0x2c
    b726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b728:	2000      	movs	r0, #0
    b72a:	4917      	ldr	r1, [pc, #92]	; (b788 <expf+0xe0>)
    b72c:	2b02      	cmp	r3, #2
    b72e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b732:	d1eb      	bne.n	b70c <expf+0x64>
    b734:	f001 ff71 	bl	d61a <__errno>
    b738:	2322      	movs	r3, #34	; 0x22
    b73a:	6003      	str	r3, [r0, #0]
    b73c:	e7ea      	b.n	b714 <expf+0x6c>
    b73e:	2300      	movs	r3, #0
    b740:	2103      	movs	r1, #3
    b742:	4a10      	ldr	r2, [pc, #64]	; (b784 <expf+0xdc>)
    b744:	4628      	mov	r0, r5
    b746:	9308      	str	r3, [sp, #32]
    b748:	e9cd 1200 	strd	r1, r2, [sp]
    b74c:	f7f4 fe68 	bl	420 <__aeabi_f2d>
    b750:	f996 3000 	ldrsb.w	r3, [r6]
    b754:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b758:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b75c:	2b00      	cmp	r3, #0
    b75e:	d1e3      	bne.n	b728 <expf+0x80>
    b760:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    b764:	4b09      	ldr	r3, [pc, #36]	; (b78c <expf+0xe4>)
    b766:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b76a:	e7cf      	b.n	b70c <expf+0x64>
    b76c:	f001 ff55 	bl	d61a <__errno>
    b770:	9b08      	ldr	r3, [sp, #32]
    b772:	6003      	str	r3, [r0, #0]
    b774:	e7d0      	b.n	b718 <expf+0x70>
    b776:	bf00      	nop
    b778:	2000029c 	.word	0x2000029c
    b77c:	42b17180 	.word	0x42b17180
    b780:	c2cff1b5 	.word	0xc2cff1b5
    b784:	00062ae0 	.word	0x00062ae0
    b788:	7ff00000 	.word	0x7ff00000
    b78c:	47efffff 	.word	0x47efffff

0000b790 <__ieee754_expf>:
    b790:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    b794:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    b798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b79c:	4604      	mov	r4, r0
    b79e:	d86e      	bhi.n	b87e <__ieee754_expf+0xee>
    b7a0:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    b7a4:	f000 80bf 	beq.w	b926 <__ieee754_expf+0x196>
    b7a8:	4976      	ldr	r1, [pc, #472]	; (b984 <__ieee754_expf+0x1f4>)
    b7aa:	4288      	cmp	r0, r1
    b7ac:	dc6c      	bgt.n	b888 <__ieee754_expf+0xf8>
    b7ae:	b12d      	cbz	r5, b7bc <__ieee754_expf+0x2c>
    b7b0:	4b75      	ldr	r3, [pc, #468]	; (b988 <__ieee754_expf+0x1f8>)
    b7b2:	429a      	cmp	r2, r3
    b7b4:	d902      	bls.n	b7bc <__ieee754_expf+0x2c>
    b7b6:	2000      	movs	r0, #0
    b7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7bc:	4b73      	ldr	r3, [pc, #460]	; (b98c <__ieee754_expf+0x1fc>)
    b7be:	429a      	cmp	r2, r3
    b7c0:	d968      	bls.n	b894 <__ieee754_expf+0x104>
    b7c2:	4b73      	ldr	r3, [pc, #460]	; (b990 <__ieee754_expf+0x200>)
    b7c4:	429a      	cmp	r2, r3
    b7c6:	f200 80ba 	bhi.w	b93e <__ieee754_expf+0x1ae>
    b7ca:	4b72      	ldr	r3, [pc, #456]	; (b994 <__ieee754_expf+0x204>)
    b7cc:	4620      	mov	r0, r4
    b7ce:	f1c5 0401 	rsb	r4, r5, #1
    b7d2:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    b7d6:	f7f5 f991 	bl	afc <__aeabi_fsub>
    b7da:	4b6f      	ldr	r3, [pc, #444]	; (b998 <__ieee754_expf+0x208>)
    b7dc:	4680      	mov	r8, r0
    b7de:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    b7e2:	1b65      	subs	r5, r4, r5
    b7e4:	4649      	mov	r1, r9
    b7e6:	4640      	mov	r0, r8
    b7e8:	f7f5 f988 	bl	afc <__aeabi_fsub>
    b7ec:	4601      	mov	r1, r0
    b7ee:	4606      	mov	r6, r0
    b7f0:	4604      	mov	r4, r0
    b7f2:	f7f5 fa8d 	bl	d10 <__aeabi_fmul>
    b7f6:	4969      	ldr	r1, [pc, #420]	; (b99c <__ieee754_expf+0x20c>)
    b7f8:	4607      	mov	r7, r0
    b7fa:	f7f5 fa89 	bl	d10 <__aeabi_fmul>
    b7fe:	4968      	ldr	r1, [pc, #416]	; (b9a0 <__ieee754_expf+0x210>)
    b800:	f7f5 f97c 	bl	afc <__aeabi_fsub>
    b804:	4639      	mov	r1, r7
    b806:	f7f5 fa83 	bl	d10 <__aeabi_fmul>
    b80a:	4966      	ldr	r1, [pc, #408]	; (b9a4 <__ieee754_expf+0x214>)
    b80c:	f7f5 f978 	bl	b00 <__addsf3>
    b810:	4639      	mov	r1, r7
    b812:	f7f5 fa7d 	bl	d10 <__aeabi_fmul>
    b816:	4964      	ldr	r1, [pc, #400]	; (b9a8 <__ieee754_expf+0x218>)
    b818:	f7f5 f970 	bl	afc <__aeabi_fsub>
    b81c:	4639      	mov	r1, r7
    b81e:	f7f5 fa77 	bl	d10 <__aeabi_fmul>
    b822:	4962      	ldr	r1, [pc, #392]	; (b9ac <__ieee754_expf+0x21c>)
    b824:	f7f5 f96c 	bl	b00 <__addsf3>
    b828:	4639      	mov	r1, r7
    b82a:	f7f5 fa71 	bl	d10 <__aeabi_fmul>
    b82e:	4601      	mov	r1, r0
    b830:	4630      	mov	r0, r6
    b832:	f7f5 f963 	bl	afc <__aeabi_fsub>
    b836:	4607      	mov	r7, r0
    b838:	4682      	mov	sl, r0
    b83a:	2d00      	cmp	r5, #0
    b83c:	d05c      	beq.n	b8f8 <__ieee754_expf+0x168>
    b83e:	4639      	mov	r1, r7
    b840:	4630      	mov	r0, r6
    b842:	f7f5 fa65 	bl	d10 <__aeabi_fmul>
    b846:	4604      	mov	r4, r0
    b848:	4639      	mov	r1, r7
    b84a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b84e:	f7f5 f955 	bl	afc <__aeabi_fsub>
    b852:	4601      	mov	r1, r0
    b854:	4620      	mov	r0, r4
    b856:	f7f5 fb0f 	bl	e78 <__aeabi_fdiv>
    b85a:	4601      	mov	r1, r0
    b85c:	4648      	mov	r0, r9
    b85e:	f7f5 f94d 	bl	afc <__aeabi_fsub>
    b862:	4641      	mov	r1, r8
    b864:	f7f5 f94a 	bl	afc <__aeabi_fsub>
    b868:	4601      	mov	r1, r0
    b86a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    b86e:	f7f5 f945 	bl	afc <__aeabi_fsub>
    b872:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
    b876:	db5a      	blt.n	b92e <__ieee754_expf+0x19e>
    b878:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
    b87c:	e002      	b.n	b884 <__ieee754_expf+0xf4>
    b87e:	4601      	mov	r1, r0
    b880:	f7f5 f93e 	bl	b00 <__addsf3>
    b884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b888:	4949      	ldr	r1, [pc, #292]	; (b9b0 <__ieee754_expf+0x220>)
    b88a:	4608      	mov	r0, r1
    b88c:	f7f5 fa40 	bl	d10 <__aeabi_fmul>
    b890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b894:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
    b898:	d209      	bcs.n	b8ae <__ieee754_expf+0x11e>
    b89a:	4945      	ldr	r1, [pc, #276]	; (b9b0 <__ieee754_expf+0x220>)
    b89c:	4620      	mov	r0, r4
    b89e:	f7f5 f92f 	bl	b00 <__addsf3>
    b8a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    b8a6:	f7f5 fbef 	bl	1088 <__aeabi_fcmpgt>
    b8aa:	2800      	cmp	r0, #0
    b8ac:	d164      	bne.n	b978 <__ieee754_expf+0x1e8>
    b8ae:	4621      	mov	r1, r4
    b8b0:	4620      	mov	r0, r4
    b8b2:	f7f5 fa2d 	bl	d10 <__aeabi_fmul>
    b8b6:	4939      	ldr	r1, [pc, #228]	; (b99c <__ieee754_expf+0x20c>)
    b8b8:	4605      	mov	r5, r0
    b8ba:	f7f5 fa29 	bl	d10 <__aeabi_fmul>
    b8be:	4938      	ldr	r1, [pc, #224]	; (b9a0 <__ieee754_expf+0x210>)
    b8c0:	f7f5 f91c 	bl	afc <__aeabi_fsub>
    b8c4:	4629      	mov	r1, r5
    b8c6:	f7f5 fa23 	bl	d10 <__aeabi_fmul>
    b8ca:	4936      	ldr	r1, [pc, #216]	; (b9a4 <__ieee754_expf+0x214>)
    b8cc:	f7f5 f918 	bl	b00 <__addsf3>
    b8d0:	4629      	mov	r1, r5
    b8d2:	f7f5 fa1d 	bl	d10 <__aeabi_fmul>
    b8d6:	4934      	ldr	r1, [pc, #208]	; (b9a8 <__ieee754_expf+0x218>)
    b8d8:	f7f5 f910 	bl	afc <__aeabi_fsub>
    b8dc:	4629      	mov	r1, r5
    b8de:	f7f5 fa17 	bl	d10 <__aeabi_fmul>
    b8e2:	4932      	ldr	r1, [pc, #200]	; (b9ac <__ieee754_expf+0x21c>)
    b8e4:	f7f5 f90c 	bl	b00 <__addsf3>
    b8e8:	4629      	mov	r1, r5
    b8ea:	f7f5 fa11 	bl	d10 <__aeabi_fmul>
    b8ee:	4601      	mov	r1, r0
    b8f0:	4620      	mov	r0, r4
    b8f2:	f7f5 f903 	bl	afc <__aeabi_fsub>
    b8f6:	4682      	mov	sl, r0
    b8f8:	4651      	mov	r1, sl
    b8fa:	4620      	mov	r0, r4
    b8fc:	f7f5 fa08 	bl	d10 <__aeabi_fmul>
    b900:	4605      	mov	r5, r0
    b902:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b906:	4650      	mov	r0, sl
    b908:	f7f5 f8f8 	bl	afc <__aeabi_fsub>
    b90c:	4601      	mov	r1, r0
    b90e:	4628      	mov	r0, r5
    b910:	f7f5 fab2 	bl	e78 <__aeabi_fdiv>
    b914:	4621      	mov	r1, r4
    b916:	f7f5 f8f1 	bl	afc <__aeabi_fsub>
    b91a:	4601      	mov	r1, r0
    b91c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    b920:	f7f5 f8ec 	bl	afc <__aeabi_fsub>
    b924:	e7ae      	b.n	b884 <__ieee754_expf+0xf4>
    b926:	2d00      	cmp	r5, #0
    b928:	f47f af45 	bne.w	b7b6 <__ieee754_expf+0x26>
    b92c:	e7aa      	b.n	b884 <__ieee754_expf+0xf4>
    b92e:	3564      	adds	r5, #100	; 0x64
    b930:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    b934:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
    b938:	f7f5 f9ea 	bl	d10 <__aeabi_fmul>
    b93c:	e7a2      	b.n	b884 <__ieee754_expf+0xf4>
    b93e:	491d      	ldr	r1, [pc, #116]	; (b9b4 <__ieee754_expf+0x224>)
    b940:	4620      	mov	r0, r4
    b942:	f7f5 f9e5 	bl	d10 <__aeabi_fmul>
    b946:	4b1c      	ldr	r3, [pc, #112]	; (b9b8 <__ieee754_expf+0x228>)
    b948:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    b94c:	f7f5 f8d8 	bl	b00 <__addsf3>
    b950:	f7f5 fba4 	bl	109c <__aeabi_f2iz>
    b954:	4605      	mov	r5, r0
    b956:	f7f5 f987 	bl	c68 <__aeabi_i2f>
    b95a:	4918      	ldr	r1, [pc, #96]	; (b9bc <__ieee754_expf+0x22c>)
    b95c:	4606      	mov	r6, r0
    b95e:	f7f5 f9d7 	bl	d10 <__aeabi_fmul>
    b962:	4601      	mov	r1, r0
    b964:	4620      	mov	r0, r4
    b966:	f7f5 f8c9 	bl	afc <__aeabi_fsub>
    b96a:	4915      	ldr	r1, [pc, #84]	; (b9c0 <__ieee754_expf+0x230>)
    b96c:	4680      	mov	r8, r0
    b96e:	4630      	mov	r0, r6
    b970:	f7f5 f9ce 	bl	d10 <__aeabi_fmul>
    b974:	4681      	mov	r9, r0
    b976:	e735      	b.n	b7e4 <__ieee754_expf+0x54>
    b978:	4620      	mov	r0, r4
    b97a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    b97e:	f7f5 f8bf 	bl	b00 <__addsf3>
    b982:	e77f      	b.n	b884 <__ieee754_expf+0xf4>
    b984:	42b17217 	.word	0x42b17217
    b988:	42cff1b5 	.word	0x42cff1b5
    b98c:	3eb17218 	.word	0x3eb17218
    b990:	3f851591 	.word	0x3f851591
    b994:	00062af0 	.word	0x00062af0
    b998:	00062af8 	.word	0x00062af8
    b99c:	3331bb4c 	.word	0x3331bb4c
    b9a0:	35ddea0e 	.word	0x35ddea0e
    b9a4:	388ab355 	.word	0x388ab355
    b9a8:	3b360b61 	.word	0x3b360b61
    b9ac:	3e2aaaab 	.word	0x3e2aaaab
    b9b0:	7149f2ca 	.word	0x7149f2ca
    b9b4:	3fb8aa3b 	.word	0x3fb8aa3b
    b9b8:	00062ae8 	.word	0x00062ae8
    b9bc:	3f317180 	.word	0x3f317180
    b9c0:	3717f7d1 	.word	0x3717f7d1

0000b9c4 <matherr>:
    b9c4:	2000      	movs	r0, #0
    b9c6:	4770      	bx	lr

0000b9c8 <finitef>:
    b9c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    b9cc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    b9d0:	bfac      	ite	ge
    b9d2:	2000      	movge	r0, #0
    b9d4:	2001      	movlt	r0, #1
    b9d6:	4770      	bx	lr

0000b9d8 <__assert_func>:
    b9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b9da:	4614      	mov	r4, r2
    b9dc:	461a      	mov	r2, r3
    b9de:	4b09      	ldr	r3, [pc, #36]	; (ba04 <__assert_func+0x2c>)
    b9e0:	4605      	mov	r5, r0
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	68d8      	ldr	r0, [r3, #12]
    b9e6:	b14c      	cbz	r4, b9fc <__assert_func+0x24>
    b9e8:	4b07      	ldr	r3, [pc, #28]	; (ba08 <__assert_func+0x30>)
    b9ea:	9100      	str	r1, [sp, #0]
    b9ec:	4907      	ldr	r1, [pc, #28]	; (ba0c <__assert_func+0x34>)
    b9ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
    b9f2:	462b      	mov	r3, r5
    b9f4:	f000 f80e 	bl	ba14 <fiprintf>
    b9f8:	f004 fa29 	bl	fe4e <abort>
    b9fc:	4b04      	ldr	r3, [pc, #16]	; (ba10 <__assert_func+0x38>)
    b9fe:	461c      	mov	r4, r3
    ba00:	e7f3      	b.n	b9ea <__assert_func+0x12>
    ba02:	bf00      	nop
    ba04:	200000cc 	.word	0x200000cc
    ba08:	0006544e 	.word	0x0006544e
    ba0c:	0006545b 	.word	0x0006545b
    ba10:	00062cf8 	.word	0x00062cf8

0000ba14 <fiprintf>:
    ba14:	b40e      	push	{r1, r2, r3}
    ba16:	b503      	push	{r0, r1, lr}
    ba18:	ab03      	add	r3, sp, #12
    ba1a:	4601      	mov	r1, r0
    ba1c:	4805      	ldr	r0, [pc, #20]	; (ba34 <fiprintf+0x20>)
    ba1e:	f853 2b04 	ldr.w	r2, [r3], #4
    ba22:	6800      	ldr	r0, [r0, #0]
    ba24:	9301      	str	r3, [sp, #4]
    ba26:	f000 f8bf 	bl	bba8 <_vfiprintf_r>
    ba2a:	b002      	add	sp, #8
    ba2c:	f85d eb04 	ldr.w	lr, [sp], #4
    ba30:	b003      	add	sp, #12
    ba32:	4770      	bx	lr
    ba34:	200000cc 	.word	0x200000cc

0000ba38 <malloc>:
    ba38:	4b02      	ldr	r3, [pc, #8]	; (ba44 <malloc+0xc>)
    ba3a:	4601      	mov	r1, r0
    ba3c:	6818      	ldr	r0, [r3, #0]
    ba3e:	f000 b859 	b.w	baf4 <_malloc_r>
    ba42:	bf00      	nop
    ba44:	200000cc 	.word	0x200000cc

0000ba48 <free>:
    ba48:	4b02      	ldr	r3, [pc, #8]	; (ba54 <free+0xc>)
    ba4a:	4601      	mov	r1, r0
    ba4c:	6818      	ldr	r0, [r3, #0]
    ba4e:	f000 b803 	b.w	ba58 <_free_r>
    ba52:	bf00      	nop
    ba54:	200000cc 	.word	0x200000cc

0000ba58 <_free_r>:
    ba58:	b538      	push	{r3, r4, r5, lr}
    ba5a:	4605      	mov	r5, r0
    ba5c:	2900      	cmp	r1, #0
    ba5e:	d045      	beq.n	baec <_free_r+0x94>
    ba60:	f851 3c04 	ldr.w	r3, [r1, #-4]
    ba64:	1f0c      	subs	r4, r1, #4
    ba66:	2b00      	cmp	r3, #0
    ba68:	bfb8      	it	lt
    ba6a:	18e4      	addlt	r4, r4, r3
    ba6c:	f001 f88c 	bl	cb88 <__malloc_lock>
    ba70:	4a1f      	ldr	r2, [pc, #124]	; (baf0 <_free_r+0x98>)
    ba72:	6813      	ldr	r3, [r2, #0]
    ba74:	4610      	mov	r0, r2
    ba76:	b933      	cbnz	r3, ba86 <_free_r+0x2e>
    ba78:	6063      	str	r3, [r4, #4]
    ba7a:	6014      	str	r4, [r2, #0]
    ba7c:	4628      	mov	r0, r5
    ba7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ba82:	f001 b887 	b.w	cb94 <__malloc_unlock>
    ba86:	42a3      	cmp	r3, r4
    ba88:	d90b      	bls.n	baa2 <_free_r+0x4a>
    ba8a:	6821      	ldr	r1, [r4, #0]
    ba8c:	1862      	adds	r2, r4, r1
    ba8e:	4293      	cmp	r3, r2
    ba90:	bf02      	ittt	eq
    ba92:	681a      	ldreq	r2, [r3, #0]
    ba94:	685b      	ldreq	r3, [r3, #4]
    ba96:	1852      	addeq	r2, r2, r1
    ba98:	6063      	str	r3, [r4, #4]
    ba9a:	bf08      	it	eq
    ba9c:	6022      	streq	r2, [r4, #0]
    ba9e:	6004      	str	r4, [r0, #0]
    baa0:	e7ec      	b.n	ba7c <_free_r+0x24>
    baa2:	461a      	mov	r2, r3
    baa4:	685b      	ldr	r3, [r3, #4]
    baa6:	b10b      	cbz	r3, baac <_free_r+0x54>
    baa8:	42a3      	cmp	r3, r4
    baaa:	d9fa      	bls.n	baa2 <_free_r+0x4a>
    baac:	6811      	ldr	r1, [r2, #0]
    baae:	1850      	adds	r0, r2, r1
    bab0:	42a0      	cmp	r0, r4
    bab2:	d10b      	bne.n	bacc <_free_r+0x74>
    bab4:	6820      	ldr	r0, [r4, #0]
    bab6:	4401      	add	r1, r0
    bab8:	1850      	adds	r0, r2, r1
    baba:	6011      	str	r1, [r2, #0]
    babc:	4283      	cmp	r3, r0
    babe:	d1dd      	bne.n	ba7c <_free_r+0x24>
    bac0:	6818      	ldr	r0, [r3, #0]
    bac2:	685b      	ldr	r3, [r3, #4]
    bac4:	4401      	add	r1, r0
    bac6:	6053      	str	r3, [r2, #4]
    bac8:	6011      	str	r1, [r2, #0]
    baca:	e7d7      	b.n	ba7c <_free_r+0x24>
    bacc:	d902      	bls.n	bad4 <_free_r+0x7c>
    bace:	230c      	movs	r3, #12
    bad0:	602b      	str	r3, [r5, #0]
    bad2:	e7d3      	b.n	ba7c <_free_r+0x24>
    bad4:	6820      	ldr	r0, [r4, #0]
    bad6:	1821      	adds	r1, r4, r0
    bad8:	428b      	cmp	r3, r1
    bada:	bf02      	ittt	eq
    badc:	6819      	ldreq	r1, [r3, #0]
    bade:	685b      	ldreq	r3, [r3, #4]
    bae0:	1809      	addeq	r1, r1, r0
    bae2:	6063      	str	r3, [r4, #4]
    bae4:	bf08      	it	eq
    bae6:	6021      	streq	r1, [r4, #0]
    bae8:	6054      	str	r4, [r2, #4]
    baea:	e7c7      	b.n	ba7c <_free_r+0x24>
    baec:	bd38      	pop	{r3, r4, r5, pc}
    baee:	bf00      	nop
    baf0:	20000d78 	.word	0x20000d78

0000baf4 <_malloc_r>:
    baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    baf6:	1ccd      	adds	r5, r1, #3
    baf8:	4606      	mov	r6, r0
    bafa:	f025 0503 	bic.w	r5, r5, #3
    bafe:	3508      	adds	r5, #8
    bb00:	2d0c      	cmp	r5, #12
    bb02:	bf38      	it	cc
    bb04:	250c      	movcc	r5, #12
    bb06:	2d00      	cmp	r5, #0
    bb08:	db01      	blt.n	bb0e <_malloc_r+0x1a>
    bb0a:	42a9      	cmp	r1, r5
    bb0c:	d903      	bls.n	bb16 <_malloc_r+0x22>
    bb0e:	230c      	movs	r3, #12
    bb10:	6033      	str	r3, [r6, #0]
    bb12:	2000      	movs	r0, #0
    bb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb16:	f001 f837 	bl	cb88 <__malloc_lock>
    bb1a:	4921      	ldr	r1, [pc, #132]	; (bba0 <_malloc_r+0xac>)
    bb1c:	680a      	ldr	r2, [r1, #0]
    bb1e:	4614      	mov	r4, r2
    bb20:	b99c      	cbnz	r4, bb4a <_malloc_r+0x56>
    bb22:	4f20      	ldr	r7, [pc, #128]	; (bba4 <_malloc_r+0xb0>)
    bb24:	683b      	ldr	r3, [r7, #0]
    bb26:	b923      	cbnz	r3, bb32 <_malloc_r+0x3e>
    bb28:	4621      	mov	r1, r4
    bb2a:	4630      	mov	r0, r6
    bb2c:	f000 fcbc 	bl	c4a8 <_sbrk_r>
    bb30:	6038      	str	r0, [r7, #0]
    bb32:	4629      	mov	r1, r5
    bb34:	4630      	mov	r0, r6
    bb36:	f000 fcb7 	bl	c4a8 <_sbrk_r>
    bb3a:	1c43      	adds	r3, r0, #1
    bb3c:	d123      	bne.n	bb86 <_malloc_r+0x92>
    bb3e:	230c      	movs	r3, #12
    bb40:	4630      	mov	r0, r6
    bb42:	6033      	str	r3, [r6, #0]
    bb44:	f001 f826 	bl	cb94 <__malloc_unlock>
    bb48:	e7e3      	b.n	bb12 <_malloc_r+0x1e>
    bb4a:	6823      	ldr	r3, [r4, #0]
    bb4c:	1b5b      	subs	r3, r3, r5
    bb4e:	d417      	bmi.n	bb80 <_malloc_r+0x8c>
    bb50:	2b0b      	cmp	r3, #11
    bb52:	d903      	bls.n	bb5c <_malloc_r+0x68>
    bb54:	6023      	str	r3, [r4, #0]
    bb56:	441c      	add	r4, r3
    bb58:	6025      	str	r5, [r4, #0]
    bb5a:	e004      	b.n	bb66 <_malloc_r+0x72>
    bb5c:	6863      	ldr	r3, [r4, #4]
    bb5e:	42a2      	cmp	r2, r4
    bb60:	bf0c      	ite	eq
    bb62:	600b      	streq	r3, [r1, #0]
    bb64:	6053      	strne	r3, [r2, #4]
    bb66:	4630      	mov	r0, r6
    bb68:	f001 f814 	bl	cb94 <__malloc_unlock>
    bb6c:	f104 000b 	add.w	r0, r4, #11
    bb70:	1d23      	adds	r3, r4, #4
    bb72:	f020 0007 	bic.w	r0, r0, #7
    bb76:	1ac2      	subs	r2, r0, r3
    bb78:	d0cc      	beq.n	bb14 <_malloc_r+0x20>
    bb7a:	1a1b      	subs	r3, r3, r0
    bb7c:	50a3      	str	r3, [r4, r2]
    bb7e:	e7c9      	b.n	bb14 <_malloc_r+0x20>
    bb80:	4622      	mov	r2, r4
    bb82:	6864      	ldr	r4, [r4, #4]
    bb84:	e7cc      	b.n	bb20 <_malloc_r+0x2c>
    bb86:	1cc4      	adds	r4, r0, #3
    bb88:	f024 0403 	bic.w	r4, r4, #3
    bb8c:	42a0      	cmp	r0, r4
    bb8e:	d0e3      	beq.n	bb58 <_malloc_r+0x64>
    bb90:	1a21      	subs	r1, r4, r0
    bb92:	4630      	mov	r0, r6
    bb94:	f000 fc88 	bl	c4a8 <_sbrk_r>
    bb98:	3001      	adds	r0, #1
    bb9a:	d1dd      	bne.n	bb58 <_malloc_r+0x64>
    bb9c:	e7cf      	b.n	bb3e <_malloc_r+0x4a>
    bb9e:	bf00      	nop
    bba0:	20000d78 	.word	0x20000d78
    bba4:	20000d7c 	.word	0x20000d7c

0000bba8 <_vfiprintf_r>:
    bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbac:	460d      	mov	r5, r1
    bbae:	b09d      	sub	sp, #116	; 0x74
    bbb0:	4614      	mov	r4, r2
    bbb2:	4698      	mov	r8, r3
    bbb4:	4606      	mov	r6, r0
    bbb6:	b118      	cbz	r0, bbc0 <_vfiprintf_r+0x18>
    bbb8:	6983      	ldr	r3, [r0, #24]
    bbba:	b90b      	cbnz	r3, bbc0 <_vfiprintf_r+0x18>
    bbbc:	f000 ff22 	bl	ca04 <__sinit>
    bbc0:	4b89      	ldr	r3, [pc, #548]	; (bde8 <_vfiprintf_r+0x240>)
    bbc2:	429d      	cmp	r5, r3
    bbc4:	d11b      	bne.n	bbfe <_vfiprintf_r+0x56>
    bbc6:	6875      	ldr	r5, [r6, #4]
    bbc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    bbca:	07d9      	lsls	r1, r3, #31
    bbcc:	d405      	bmi.n	bbda <_vfiprintf_r+0x32>
    bbce:	89ab      	ldrh	r3, [r5, #12]
    bbd0:	059a      	lsls	r2, r3, #22
    bbd2:	d402      	bmi.n	bbda <_vfiprintf_r+0x32>
    bbd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    bbd6:	f001 fd18 	bl	d60a <__retarget_lock_acquire_recursive>
    bbda:	89ab      	ldrh	r3, [r5, #12]
    bbdc:	071b      	lsls	r3, r3, #28
    bbde:	d501      	bpl.n	bbe4 <_vfiprintf_r+0x3c>
    bbe0:	692b      	ldr	r3, [r5, #16]
    bbe2:	b9eb      	cbnz	r3, bc20 <_vfiprintf_r+0x78>
    bbe4:	4629      	mov	r1, r5
    bbe6:	4630      	mov	r0, r6
    bbe8:	f000 fd9c 	bl	c724 <__swsetup_r>
    bbec:	b1c0      	cbz	r0, bc20 <_vfiprintf_r+0x78>
    bbee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    bbf0:	07dc      	lsls	r4, r3, #31
    bbf2:	d50e      	bpl.n	bc12 <_vfiprintf_r+0x6a>
    bbf4:	f04f 30ff 	mov.w	r0, #4294967295
    bbf8:	b01d      	add	sp, #116	; 0x74
    bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbfe:	4b7b      	ldr	r3, [pc, #492]	; (bdec <_vfiprintf_r+0x244>)
    bc00:	429d      	cmp	r5, r3
    bc02:	d101      	bne.n	bc08 <_vfiprintf_r+0x60>
    bc04:	68b5      	ldr	r5, [r6, #8]
    bc06:	e7df      	b.n	bbc8 <_vfiprintf_r+0x20>
    bc08:	4b79      	ldr	r3, [pc, #484]	; (bdf0 <_vfiprintf_r+0x248>)
    bc0a:	429d      	cmp	r5, r3
    bc0c:	bf08      	it	eq
    bc0e:	68f5      	ldreq	r5, [r6, #12]
    bc10:	e7da      	b.n	bbc8 <_vfiprintf_r+0x20>
    bc12:	89ab      	ldrh	r3, [r5, #12]
    bc14:	0598      	lsls	r0, r3, #22
    bc16:	d4ed      	bmi.n	bbf4 <_vfiprintf_r+0x4c>
    bc18:	6da8      	ldr	r0, [r5, #88]	; 0x58
    bc1a:	f001 fcfc 	bl	d616 <__retarget_lock_release_recursive>
    bc1e:	e7e9      	b.n	bbf4 <_vfiprintf_r+0x4c>
    bc20:	2300      	movs	r3, #0
    bc22:	f8cd 800c 	str.w	r8, [sp, #12]
    bc26:	f04f 0901 	mov.w	r9, #1
    bc2a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; bdf4 <_vfiprintf_r+0x24c>
    bc2e:	9309      	str	r3, [sp, #36]	; 0x24
    bc30:	2320      	movs	r3, #32
    bc32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    bc36:	2330      	movs	r3, #48	; 0x30
    bc38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    bc3c:	4623      	mov	r3, r4
    bc3e:	469a      	mov	sl, r3
    bc40:	f813 2b01 	ldrb.w	r2, [r3], #1
    bc44:	b10a      	cbz	r2, bc4a <_vfiprintf_r+0xa2>
    bc46:	2a25      	cmp	r2, #37	; 0x25
    bc48:	d1f9      	bne.n	bc3e <_vfiprintf_r+0x96>
    bc4a:	ebba 0b04 	subs.w	fp, sl, r4
    bc4e:	d00b      	beq.n	bc68 <_vfiprintf_r+0xc0>
    bc50:	465b      	mov	r3, fp
    bc52:	4622      	mov	r2, r4
    bc54:	4629      	mov	r1, r5
    bc56:	4630      	mov	r0, r6
    bc58:	f004 f93c 	bl	fed4 <__sfputs_r>
    bc5c:	3001      	adds	r0, #1
    bc5e:	f000 80aa 	beq.w	bdb6 <_vfiprintf_r+0x20e>
    bc62:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bc64:	445a      	add	r2, fp
    bc66:	9209      	str	r2, [sp, #36]	; 0x24
    bc68:	f89a 3000 	ldrb.w	r3, [sl]
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	f000 80a2 	beq.w	bdb6 <_vfiprintf_r+0x20e>
    bc72:	2300      	movs	r3, #0
    bc74:	f04f 32ff 	mov.w	r2, #4294967295
    bc78:	f10a 0a01 	add.w	sl, sl, #1
    bc7c:	9304      	str	r3, [sp, #16]
    bc7e:	9307      	str	r3, [sp, #28]
    bc80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    bc84:	931a      	str	r3, [sp, #104]	; 0x68
    bc86:	e9cd 2305 	strd	r2, r3, [sp, #20]
    bc8a:	4654      	mov	r4, sl
    bc8c:	2205      	movs	r2, #5
    bc8e:	4859      	ldr	r0, [pc, #356]	; (bdf4 <_vfiprintf_r+0x24c>)
    bc90:	f814 1b01 	ldrb.w	r1, [r4], #1
    bc94:	f004 f8e6 	bl	fe64 <memchr>
    bc98:	9a04      	ldr	r2, [sp, #16]
    bc9a:	b9d8      	cbnz	r0, bcd4 <_vfiprintf_r+0x12c>
    bc9c:	06d1      	lsls	r1, r2, #27
    bc9e:	bf44      	itt	mi
    bca0:	2320      	movmi	r3, #32
    bca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    bca6:	0713      	lsls	r3, r2, #28
    bca8:	bf44      	itt	mi
    bcaa:	232b      	movmi	r3, #43	; 0x2b
    bcac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    bcb0:	f89a 3000 	ldrb.w	r3, [sl]
    bcb4:	2b2a      	cmp	r3, #42	; 0x2a
    bcb6:	d015      	beq.n	bce4 <_vfiprintf_r+0x13c>
    bcb8:	9a07      	ldr	r2, [sp, #28]
    bcba:	4654      	mov	r4, sl
    bcbc:	2000      	movs	r0, #0
    bcbe:	f04f 0c0a 	mov.w	ip, #10
    bcc2:	4621      	mov	r1, r4
    bcc4:	f811 3b01 	ldrb.w	r3, [r1], #1
    bcc8:	3b30      	subs	r3, #48	; 0x30
    bcca:	2b09      	cmp	r3, #9
    bccc:	d94e      	bls.n	bd6c <_vfiprintf_r+0x1c4>
    bcce:	b1b0      	cbz	r0, bcfe <_vfiprintf_r+0x156>
    bcd0:	9207      	str	r2, [sp, #28]
    bcd2:	e014      	b.n	bcfe <_vfiprintf_r+0x156>
    bcd4:	eba0 0308 	sub.w	r3, r0, r8
    bcd8:	46a2      	mov	sl, r4
    bcda:	fa09 f303 	lsl.w	r3, r9, r3
    bcde:	4313      	orrs	r3, r2
    bce0:	9304      	str	r3, [sp, #16]
    bce2:	e7d2      	b.n	bc8a <_vfiprintf_r+0xe2>
    bce4:	9b03      	ldr	r3, [sp, #12]
    bce6:	1d19      	adds	r1, r3, #4
    bce8:	681b      	ldr	r3, [r3, #0]
    bcea:	2b00      	cmp	r3, #0
    bcec:	9103      	str	r1, [sp, #12]
    bcee:	bfbb      	ittet	lt
    bcf0:	425b      	neglt	r3, r3
    bcf2:	f042 0202 	orrlt.w	r2, r2, #2
    bcf6:	9307      	strge	r3, [sp, #28]
    bcf8:	9307      	strlt	r3, [sp, #28]
    bcfa:	bfb8      	it	lt
    bcfc:	9204      	strlt	r2, [sp, #16]
    bcfe:	7823      	ldrb	r3, [r4, #0]
    bd00:	2b2e      	cmp	r3, #46	; 0x2e
    bd02:	d10c      	bne.n	bd1e <_vfiprintf_r+0x176>
    bd04:	7863      	ldrb	r3, [r4, #1]
    bd06:	2b2a      	cmp	r3, #42	; 0x2a
    bd08:	d135      	bne.n	bd76 <_vfiprintf_r+0x1ce>
    bd0a:	9b03      	ldr	r3, [sp, #12]
    bd0c:	3402      	adds	r4, #2
    bd0e:	1d1a      	adds	r2, r3, #4
    bd10:	681b      	ldr	r3, [r3, #0]
    bd12:	2b00      	cmp	r3, #0
    bd14:	9203      	str	r2, [sp, #12]
    bd16:	bfb8      	it	lt
    bd18:	f04f 33ff 	movlt.w	r3, #4294967295
    bd1c:	9305      	str	r3, [sp, #20]
    bd1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; be04 <_vfiprintf_r+0x25c>
    bd22:	2203      	movs	r2, #3
    bd24:	7821      	ldrb	r1, [r4, #0]
    bd26:	4650      	mov	r0, sl
    bd28:	f004 f89c 	bl	fe64 <memchr>
    bd2c:	b140      	cbz	r0, bd40 <_vfiprintf_r+0x198>
    bd2e:	2340      	movs	r3, #64	; 0x40
    bd30:	eba0 000a 	sub.w	r0, r0, sl
    bd34:	3401      	adds	r4, #1
    bd36:	fa03 f000 	lsl.w	r0, r3, r0
    bd3a:	9b04      	ldr	r3, [sp, #16]
    bd3c:	4303      	orrs	r3, r0
    bd3e:	9304      	str	r3, [sp, #16]
    bd40:	f814 1b01 	ldrb.w	r1, [r4], #1
    bd44:	2206      	movs	r2, #6
    bd46:	482c      	ldr	r0, [pc, #176]	; (bdf8 <_vfiprintf_r+0x250>)
    bd48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    bd4c:	f004 f88a 	bl	fe64 <memchr>
    bd50:	2800      	cmp	r0, #0
    bd52:	d03f      	beq.n	bdd4 <_vfiprintf_r+0x22c>
    bd54:	4b29      	ldr	r3, [pc, #164]	; (bdfc <_vfiprintf_r+0x254>)
    bd56:	bb1b      	cbnz	r3, bda0 <_vfiprintf_r+0x1f8>
    bd58:	9b03      	ldr	r3, [sp, #12]
    bd5a:	3307      	adds	r3, #7
    bd5c:	f023 0307 	bic.w	r3, r3, #7
    bd60:	3308      	adds	r3, #8
    bd62:	9303      	str	r3, [sp, #12]
    bd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd66:	443b      	add	r3, r7
    bd68:	9309      	str	r3, [sp, #36]	; 0x24
    bd6a:	e767      	b.n	bc3c <_vfiprintf_r+0x94>
    bd6c:	fb0c 3202 	mla	r2, ip, r2, r3
    bd70:	460c      	mov	r4, r1
    bd72:	2001      	movs	r0, #1
    bd74:	e7a5      	b.n	bcc2 <_vfiprintf_r+0x11a>
    bd76:	2300      	movs	r3, #0
    bd78:	3401      	adds	r4, #1
    bd7a:	f04f 0c0a 	mov.w	ip, #10
    bd7e:	4619      	mov	r1, r3
    bd80:	9305      	str	r3, [sp, #20]
    bd82:	4620      	mov	r0, r4
    bd84:	f810 2b01 	ldrb.w	r2, [r0], #1
    bd88:	3a30      	subs	r2, #48	; 0x30
    bd8a:	2a09      	cmp	r2, #9
    bd8c:	d903      	bls.n	bd96 <_vfiprintf_r+0x1ee>
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d0c5      	beq.n	bd1e <_vfiprintf_r+0x176>
    bd92:	9105      	str	r1, [sp, #20]
    bd94:	e7c3      	b.n	bd1e <_vfiprintf_r+0x176>
    bd96:	fb0c 2101 	mla	r1, ip, r1, r2
    bd9a:	4604      	mov	r4, r0
    bd9c:	2301      	movs	r3, #1
    bd9e:	e7f0      	b.n	bd82 <_vfiprintf_r+0x1da>
    bda0:	ab03      	add	r3, sp, #12
    bda2:	462a      	mov	r2, r5
    bda4:	a904      	add	r1, sp, #16
    bda6:	4630      	mov	r0, r6
    bda8:	9300      	str	r3, [sp, #0]
    bdaa:	4b15      	ldr	r3, [pc, #84]	; (be00 <_vfiprintf_r+0x258>)
    bdac:	f000 f82c 	bl	be08 <_printf_float>
    bdb0:	4607      	mov	r7, r0
    bdb2:	1c78      	adds	r0, r7, #1
    bdb4:	d1d6      	bne.n	bd64 <_vfiprintf_r+0x1bc>
    bdb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    bdb8:	07d9      	lsls	r1, r3, #31
    bdba:	d405      	bmi.n	bdc8 <_vfiprintf_r+0x220>
    bdbc:	89ab      	ldrh	r3, [r5, #12]
    bdbe:	059a      	lsls	r2, r3, #22
    bdc0:	d402      	bmi.n	bdc8 <_vfiprintf_r+0x220>
    bdc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    bdc4:	f001 fc27 	bl	d616 <__retarget_lock_release_recursive>
    bdc8:	89ab      	ldrh	r3, [r5, #12]
    bdca:	065b      	lsls	r3, r3, #25
    bdcc:	f53f af12 	bmi.w	bbf4 <_vfiprintf_r+0x4c>
    bdd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    bdd2:	e711      	b.n	bbf8 <_vfiprintf_r+0x50>
    bdd4:	ab03      	add	r3, sp, #12
    bdd6:	462a      	mov	r2, r5
    bdd8:	a904      	add	r1, sp, #16
    bdda:	4630      	mov	r0, r6
    bddc:	9300      	str	r3, [sp, #0]
    bdde:	4b08      	ldr	r3, [pc, #32]	; (be00 <_vfiprintf_r+0x258>)
    bde0:	f000 fa3c 	bl	c25c <_printf_i>
    bde4:	e7e4      	b.n	bdb0 <_vfiprintf_r+0x208>
    bde6:	bf00      	nop
    bde8:	00062b24 	.word	0x00062b24
    bdec:	00062b44 	.word	0x00062b44
    bdf0:	00062b04 	.word	0x00062b04
    bdf4:	0006558b 	.word	0x0006558b
    bdf8:	00065595 	.word	0x00065595
    bdfc:	0000be09 	.word	0x0000be09
    be00:	0000fed5 	.word	0x0000fed5
    be04:	00065591 	.word	0x00065591

0000be08 <_printf_float>:
    be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be0c:	b091      	sub	sp, #68	; 0x44
    be0e:	460c      	mov	r4, r1
    be10:	4616      	mov	r6, r2
    be12:	461f      	mov	r7, r3
    be14:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    be18:	4605      	mov	r5, r0
    be1a:	f000 fe71 	bl	cb00 <_localeconv_r>
    be1e:	6803      	ldr	r3, [r0, #0]
    be20:	4618      	mov	r0, r3
    be22:	9309      	str	r3, [sp, #36]	; 0x24
    be24:	f7f5 fb56 	bl	14d4 <strlen>
    be28:	2300      	movs	r3, #0
    be2a:	900a      	str	r0, [sp, #40]	; 0x28
    be2c:	930e      	str	r3, [sp, #56]	; 0x38
    be2e:	f8d8 3000 	ldr.w	r3, [r8]
    be32:	f894 9018 	ldrb.w	r9, [r4, #24]
    be36:	3307      	adds	r3, #7
    be38:	f8d4 b000 	ldr.w	fp, [r4]
    be3c:	f023 0307 	bic.w	r3, r3, #7
    be40:	f103 0208 	add.w	r2, r3, #8
    be44:	f8c8 2000 	str.w	r2, [r8]
    be48:	e9d3 2300 	ldrd	r2, r3, [r3]
    be4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    be50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
    be54:	f04f 32ff 	mov.w	r2, #4294967295
    be58:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
    be5c:	4640      	mov	r0, r8
    be5e:	930b      	str	r3, [sp, #44]	; 0x2c
    be60:	990b      	ldr	r1, [sp, #44]	; 0x2c
    be62:	4b9b      	ldr	r3, [pc, #620]	; (c0d0 <_printf_float+0x2c8>)
    be64:	f7f5 fb16 	bl	1494 <__aeabi_dcmpun>
    be68:	bb70      	cbnz	r0, bec8 <_printf_float+0xc0>
    be6a:	f04f 32ff 	mov.w	r2, #4294967295
    be6e:	4b98      	ldr	r3, [pc, #608]	; (c0d0 <_printf_float+0x2c8>)
    be70:	4640      	mov	r0, r8
    be72:	990b      	ldr	r1, [sp, #44]	; 0x2c
    be74:	f7f4 fda8 	bl	9c8 <__aeabi_dcmple>
    be78:	bb30      	cbnz	r0, bec8 <_printf_float+0xc0>
    be7a:	2200      	movs	r2, #0
    be7c:	2300      	movs	r3, #0
    be7e:	4640      	mov	r0, r8
    be80:	4651      	mov	r1, sl
    be82:	f7f4 fd97 	bl	9b4 <__aeabi_dcmplt>
    be86:	b110      	cbz	r0, be8e <_printf_float+0x86>
    be88:	232d      	movs	r3, #45	; 0x2d
    be8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    be8e:	4b91      	ldr	r3, [pc, #580]	; (c0d4 <_printf_float+0x2cc>)
    be90:	4891      	ldr	r0, [pc, #580]	; (c0d8 <_printf_float+0x2d0>)
    be92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    be96:	bf94      	ite	ls
    be98:	4698      	movls	r8, r3
    be9a:	4680      	movhi	r8, r0
    be9c:	2303      	movs	r3, #3
    be9e:	f04f 0a00 	mov.w	sl, #0
    bea2:	6123      	str	r3, [r4, #16]
    bea4:	f02b 0304 	bic.w	r3, fp, #4
    bea8:	6023      	str	r3, [r4, #0]
    beaa:	4633      	mov	r3, r6
    beac:	aa0f      	add	r2, sp, #60	; 0x3c
    beae:	4621      	mov	r1, r4
    beb0:	4628      	mov	r0, r5
    beb2:	9700      	str	r7, [sp, #0]
    beb4:	f004 f8be 	bl	10034 <_printf_common>
    beb8:	3001      	adds	r0, #1
    beba:	f040 808f 	bne.w	bfdc <_printf_float+0x1d4>
    bebe:	f04f 30ff 	mov.w	r0, #4294967295
    bec2:	b011      	add	sp, #68	; 0x44
    bec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bec8:	4642      	mov	r2, r8
    beca:	4653      	mov	r3, sl
    becc:	4640      	mov	r0, r8
    bece:	4651      	mov	r1, sl
    bed0:	f7f5 fae0 	bl	1494 <__aeabi_dcmpun>
    bed4:	b140      	cbz	r0, bee8 <_printf_float+0xe0>
    bed6:	f1ba 0f00 	cmp.w	sl, #0
    beda:	4880      	ldr	r0, [pc, #512]	; (c0dc <_printf_float+0x2d4>)
    bedc:	bfbc      	itt	lt
    bede:	232d      	movlt	r3, #45	; 0x2d
    bee0:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    bee4:	4b7e      	ldr	r3, [pc, #504]	; (c0e0 <_printf_float+0x2d8>)
    bee6:	e7d4      	b.n	be92 <_printf_float+0x8a>
    bee8:	6863      	ldr	r3, [r4, #4]
    beea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    beee:	1c5a      	adds	r2, r3, #1
    bef0:	d142      	bne.n	bf78 <_printf_float+0x170>
    bef2:	2306      	movs	r3, #6
    bef4:	6063      	str	r3, [r4, #4]
    bef6:	2200      	movs	r2, #0
    bef8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
    befc:	4628      	mov	r0, r5
    befe:	910b      	str	r1, [sp, #44]	; 0x2c
    bf00:	9206      	str	r2, [sp, #24]
    bf02:	aa0e      	add	r2, sp, #56	; 0x38
    bf04:	6023      	str	r3, [r4, #0]
    bf06:	e9cd 9204 	strd	r9, r2, [sp, #16]
    bf0a:	aa0d      	add	r2, sp, #52	; 0x34
    bf0c:	9203      	str	r2, [sp, #12]
    bf0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    bf12:	e9cd 3201 	strd	r3, r2, [sp, #4]
    bf16:	6863      	ldr	r3, [r4, #4]
    bf18:	4642      	mov	r2, r8
    bf1a:	9300      	str	r3, [sp, #0]
    bf1c:	4653      	mov	r3, sl
    bf1e:	f003 ffeb 	bl	fef8 <__cvt>
    bf22:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bf24:	4680      	mov	r8, r0
    bf26:	2947      	cmp	r1, #71	; 0x47
    bf28:	990d      	ldr	r1, [sp, #52]	; 0x34
    bf2a:	d108      	bne.n	bf3e <_printf_float+0x136>
    bf2c:	1cc8      	adds	r0, r1, #3
    bf2e:	db02      	blt.n	bf36 <_printf_float+0x12e>
    bf30:	6863      	ldr	r3, [r4, #4]
    bf32:	4299      	cmp	r1, r3
    bf34:	dd40      	ble.n	bfb8 <_printf_float+0x1b0>
    bf36:	f1a9 0902 	sub.w	r9, r9, #2
    bf3a:	fa5f f989 	uxtb.w	r9, r9
    bf3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    bf42:	d81f      	bhi.n	bf84 <_printf_float+0x17c>
    bf44:	3901      	subs	r1, #1
    bf46:	464a      	mov	r2, r9
    bf48:	f104 0050 	add.w	r0, r4, #80	; 0x50
    bf4c:	910d      	str	r1, [sp, #52]	; 0x34
    bf4e:	f004 f833 	bl	ffb8 <__exponent>
    bf52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bf54:	4682      	mov	sl, r0
    bf56:	1813      	adds	r3, r2, r0
    bf58:	2a01      	cmp	r2, #1
    bf5a:	6123      	str	r3, [r4, #16]
    bf5c:	dc02      	bgt.n	bf64 <_printf_float+0x15c>
    bf5e:	6822      	ldr	r2, [r4, #0]
    bf60:	07d2      	lsls	r2, r2, #31
    bf62:	d501      	bpl.n	bf68 <_printf_float+0x160>
    bf64:	3301      	adds	r3, #1
    bf66:	6123      	str	r3, [r4, #16]
    bf68:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    bf6c:	2b00      	cmp	r3, #0
    bf6e:	d09c      	beq.n	beaa <_printf_float+0xa2>
    bf70:	232d      	movs	r3, #45	; 0x2d
    bf72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    bf76:	e798      	b.n	beaa <_printf_float+0xa2>
    bf78:	2947      	cmp	r1, #71	; 0x47
    bf7a:	d1bc      	bne.n	bef6 <_printf_float+0xee>
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d1ba      	bne.n	bef6 <_printf_float+0xee>
    bf80:	2301      	movs	r3, #1
    bf82:	e7b7      	b.n	bef4 <_printf_float+0xec>
    bf84:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    bf88:	d118      	bne.n	bfbc <_printf_float+0x1b4>
    bf8a:	2900      	cmp	r1, #0
    bf8c:	6863      	ldr	r3, [r4, #4]
    bf8e:	dd0b      	ble.n	bfa8 <_printf_float+0x1a0>
    bf90:	6121      	str	r1, [r4, #16]
    bf92:	b913      	cbnz	r3, bf9a <_printf_float+0x192>
    bf94:	6822      	ldr	r2, [r4, #0]
    bf96:	07d0      	lsls	r0, r2, #31
    bf98:	d502      	bpl.n	bfa0 <_printf_float+0x198>
    bf9a:	3301      	adds	r3, #1
    bf9c:	440b      	add	r3, r1
    bf9e:	6123      	str	r3, [r4, #16]
    bfa0:	f04f 0a00 	mov.w	sl, #0
    bfa4:	65a1      	str	r1, [r4, #88]	; 0x58
    bfa6:	e7df      	b.n	bf68 <_printf_float+0x160>
    bfa8:	b913      	cbnz	r3, bfb0 <_printf_float+0x1a8>
    bfaa:	6822      	ldr	r2, [r4, #0]
    bfac:	07d2      	lsls	r2, r2, #31
    bfae:	d501      	bpl.n	bfb4 <_printf_float+0x1ac>
    bfb0:	3302      	adds	r3, #2
    bfb2:	e7f4      	b.n	bf9e <_printf_float+0x196>
    bfb4:	2301      	movs	r3, #1
    bfb6:	e7f2      	b.n	bf9e <_printf_float+0x196>
    bfb8:	f04f 0967 	mov.w	r9, #103	; 0x67
    bfbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bfbe:	4299      	cmp	r1, r3
    bfc0:	db05      	blt.n	bfce <_printf_float+0x1c6>
    bfc2:	6823      	ldr	r3, [r4, #0]
    bfc4:	6121      	str	r1, [r4, #16]
    bfc6:	07d8      	lsls	r0, r3, #31
    bfc8:	d5ea      	bpl.n	bfa0 <_printf_float+0x198>
    bfca:	1c4b      	adds	r3, r1, #1
    bfcc:	e7e7      	b.n	bf9e <_printf_float+0x196>
    bfce:	2900      	cmp	r1, #0
    bfd0:	bfd4      	ite	le
    bfd2:	f1c1 0202 	rsble	r2, r1, #2
    bfd6:	2201      	movgt	r2, #1
    bfd8:	4413      	add	r3, r2
    bfda:	e7e0      	b.n	bf9e <_printf_float+0x196>
    bfdc:	6823      	ldr	r3, [r4, #0]
    bfde:	055a      	lsls	r2, r3, #21
    bfe0:	d407      	bmi.n	bff2 <_printf_float+0x1ea>
    bfe2:	6923      	ldr	r3, [r4, #16]
    bfe4:	4642      	mov	r2, r8
    bfe6:	4631      	mov	r1, r6
    bfe8:	4628      	mov	r0, r5
    bfea:	47b8      	blx	r7
    bfec:	3001      	adds	r0, #1
    bfee:	d12b      	bne.n	c048 <_printf_float+0x240>
    bff0:	e765      	b.n	bebe <_printf_float+0xb6>
    bff2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    bff6:	f240 80dc 	bls.w	c1b2 <_printf_float+0x3aa>
    bffa:	2200      	movs	r2, #0
    bffc:	2300      	movs	r3, #0
    bffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    c002:	f7f4 fccd 	bl	9a0 <__aeabi_dcmpeq>
    c006:	2800      	cmp	r0, #0
    c008:	d033      	beq.n	c072 <_printf_float+0x26a>
    c00a:	2301      	movs	r3, #1
    c00c:	4a35      	ldr	r2, [pc, #212]	; (c0e4 <_printf_float+0x2dc>)
    c00e:	4631      	mov	r1, r6
    c010:	4628      	mov	r0, r5
    c012:	47b8      	blx	r7
    c014:	3001      	adds	r0, #1
    c016:	f43f af52 	beq.w	bebe <_printf_float+0xb6>
    c01a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    c01e:	429a      	cmp	r2, r3
    c020:	db02      	blt.n	c028 <_printf_float+0x220>
    c022:	6823      	ldr	r3, [r4, #0]
    c024:	07d8      	lsls	r0, r3, #31
    c026:	d50f      	bpl.n	c048 <_printf_float+0x240>
    c028:	4631      	mov	r1, r6
    c02a:	4628      	mov	r0, r5
    c02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    c030:	47b8      	blx	r7
    c032:	3001      	adds	r0, #1
    c034:	f43f af43 	beq.w	bebe <_printf_float+0xb6>
    c038:	f04f 0800 	mov.w	r8, #0
    c03c:	f104 091a 	add.w	r9, r4, #26
    c040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c042:	3b01      	subs	r3, #1
    c044:	4543      	cmp	r3, r8
    c046:	dc09      	bgt.n	c05c <_printf_float+0x254>
    c048:	6823      	ldr	r3, [r4, #0]
    c04a:	079b      	lsls	r3, r3, #30
    c04c:	f100 8101 	bmi.w	c252 <_printf_float+0x44a>
    c050:	68e0      	ldr	r0, [r4, #12]
    c052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c054:	4298      	cmp	r0, r3
    c056:	bfb8      	it	lt
    c058:	4618      	movlt	r0, r3
    c05a:	e732      	b.n	bec2 <_printf_float+0xba>
    c05c:	2301      	movs	r3, #1
    c05e:	464a      	mov	r2, r9
    c060:	4631      	mov	r1, r6
    c062:	4628      	mov	r0, r5
    c064:	47b8      	blx	r7
    c066:	3001      	adds	r0, #1
    c068:	f43f af29 	beq.w	bebe <_printf_float+0xb6>
    c06c:	f108 0801 	add.w	r8, r8, #1
    c070:	e7e6      	b.n	c040 <_printf_float+0x238>
    c072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c074:	2b00      	cmp	r3, #0
    c076:	dc37      	bgt.n	c0e8 <_printf_float+0x2e0>
    c078:	2301      	movs	r3, #1
    c07a:	4a1a      	ldr	r2, [pc, #104]	; (c0e4 <_printf_float+0x2dc>)
    c07c:	4631      	mov	r1, r6
    c07e:	4628      	mov	r0, r5
    c080:	47b8      	blx	r7
    c082:	3001      	adds	r0, #1
    c084:	f43f af1b 	beq.w	bebe <_printf_float+0xb6>
    c088:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    c08c:	4313      	orrs	r3, r2
    c08e:	d102      	bne.n	c096 <_printf_float+0x28e>
    c090:	6823      	ldr	r3, [r4, #0]
    c092:	07d9      	lsls	r1, r3, #31
    c094:	d5d8      	bpl.n	c048 <_printf_float+0x240>
    c096:	4631      	mov	r1, r6
    c098:	4628      	mov	r0, r5
    c09a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    c09e:	47b8      	blx	r7
    c0a0:	3001      	adds	r0, #1
    c0a2:	f43f af0c 	beq.w	bebe <_printf_float+0xb6>
    c0a6:	f04f 0900 	mov.w	r9, #0
    c0aa:	f104 0a1a 	add.w	sl, r4, #26
    c0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c0b0:	425b      	negs	r3, r3
    c0b2:	454b      	cmp	r3, r9
    c0b4:	dc01      	bgt.n	c0ba <_printf_float+0x2b2>
    c0b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c0b8:	e794      	b.n	bfe4 <_printf_float+0x1dc>
    c0ba:	2301      	movs	r3, #1
    c0bc:	4652      	mov	r2, sl
    c0be:	4631      	mov	r1, r6
    c0c0:	4628      	mov	r0, r5
    c0c2:	47b8      	blx	r7
    c0c4:	3001      	adds	r0, #1
    c0c6:	f43f aefa 	beq.w	bebe <_printf_float+0xb6>
    c0ca:	f109 0901 	add.w	r9, r9, #1
    c0ce:	e7ee      	b.n	c0ae <_printf_float+0x2a6>
    c0d0:	7fefffff 	.word	0x7fefffff
    c0d4:	0006559c 	.word	0x0006559c
    c0d8:	000655a0 	.word	0x000655a0
    c0dc:	000655a8 	.word	0x000655a8
    c0e0:	000655a4 	.word	0x000655a4
    c0e4:	0006471d 	.word	0x0006471d
    c0e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c0ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
    c0ec:	429a      	cmp	r2, r3
    c0ee:	bfa8      	it	ge
    c0f0:	461a      	movge	r2, r3
    c0f2:	2a00      	cmp	r2, #0
    c0f4:	4691      	mov	r9, r2
    c0f6:	dc37      	bgt.n	c168 <_printf_float+0x360>
    c0f8:	f04f 0b00 	mov.w	fp, #0
    c0fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    c100:	f104 021a 	add.w	r2, r4, #26
    c104:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    c108:	ebaa 0309 	sub.w	r3, sl, r9
    c10c:	455b      	cmp	r3, fp
    c10e:	dc33      	bgt.n	c178 <_printf_float+0x370>
    c110:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    c114:	429a      	cmp	r2, r3
    c116:	db3b      	blt.n	c190 <_printf_float+0x388>
    c118:	6823      	ldr	r3, [r4, #0]
    c11a:	07da      	lsls	r2, r3, #31
    c11c:	d438      	bmi.n	c190 <_printf_float+0x388>
    c11e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c120:	990d      	ldr	r1, [sp, #52]	; 0x34
    c122:	eba2 030a 	sub.w	r3, r2, sl
    c126:	eba2 0901 	sub.w	r9, r2, r1
    c12a:	4599      	cmp	r9, r3
    c12c:	bfa8      	it	ge
    c12e:	4699      	movge	r9, r3
    c130:	f1b9 0f00 	cmp.w	r9, #0
    c134:	dc34      	bgt.n	c1a0 <_printf_float+0x398>
    c136:	f04f 0800 	mov.w	r8, #0
    c13a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    c13e:	f104 0a1a 	add.w	sl, r4, #26
    c142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    c146:	1a9b      	subs	r3, r3, r2
    c148:	eba3 0309 	sub.w	r3, r3, r9
    c14c:	4543      	cmp	r3, r8
    c14e:	f77f af7b 	ble.w	c048 <_printf_float+0x240>
    c152:	2301      	movs	r3, #1
    c154:	4652      	mov	r2, sl
    c156:	4631      	mov	r1, r6
    c158:	4628      	mov	r0, r5
    c15a:	47b8      	blx	r7
    c15c:	3001      	adds	r0, #1
    c15e:	f43f aeae 	beq.w	bebe <_printf_float+0xb6>
    c162:	f108 0801 	add.w	r8, r8, #1
    c166:	e7ec      	b.n	c142 <_printf_float+0x33a>
    c168:	4613      	mov	r3, r2
    c16a:	4631      	mov	r1, r6
    c16c:	4642      	mov	r2, r8
    c16e:	4628      	mov	r0, r5
    c170:	47b8      	blx	r7
    c172:	3001      	adds	r0, #1
    c174:	d1c0      	bne.n	c0f8 <_printf_float+0x2f0>
    c176:	e6a2      	b.n	bebe <_printf_float+0xb6>
    c178:	2301      	movs	r3, #1
    c17a:	4631      	mov	r1, r6
    c17c:	4628      	mov	r0, r5
    c17e:	920b      	str	r2, [sp, #44]	; 0x2c
    c180:	47b8      	blx	r7
    c182:	3001      	adds	r0, #1
    c184:	f43f ae9b 	beq.w	bebe <_printf_float+0xb6>
    c188:	f10b 0b01 	add.w	fp, fp, #1
    c18c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c18e:	e7b9      	b.n	c104 <_printf_float+0x2fc>
    c190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    c194:	4631      	mov	r1, r6
    c196:	4628      	mov	r0, r5
    c198:	47b8      	blx	r7
    c19a:	3001      	adds	r0, #1
    c19c:	d1bf      	bne.n	c11e <_printf_float+0x316>
    c19e:	e68e      	b.n	bebe <_printf_float+0xb6>
    c1a0:	464b      	mov	r3, r9
    c1a2:	eb08 020a 	add.w	r2, r8, sl
    c1a6:	4631      	mov	r1, r6
    c1a8:	4628      	mov	r0, r5
    c1aa:	47b8      	blx	r7
    c1ac:	3001      	adds	r0, #1
    c1ae:	d1c2      	bne.n	c136 <_printf_float+0x32e>
    c1b0:	e685      	b.n	bebe <_printf_float+0xb6>
    c1b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c1b4:	2a01      	cmp	r2, #1
    c1b6:	dc01      	bgt.n	c1bc <_printf_float+0x3b4>
    c1b8:	07db      	lsls	r3, r3, #31
    c1ba:	d537      	bpl.n	c22c <_printf_float+0x424>
    c1bc:	2301      	movs	r3, #1
    c1be:	4642      	mov	r2, r8
    c1c0:	4631      	mov	r1, r6
    c1c2:	4628      	mov	r0, r5
    c1c4:	47b8      	blx	r7
    c1c6:	3001      	adds	r0, #1
    c1c8:	f43f ae79 	beq.w	bebe <_printf_float+0xb6>
    c1cc:	4631      	mov	r1, r6
    c1ce:	4628      	mov	r0, r5
    c1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    c1d4:	47b8      	blx	r7
    c1d6:	3001      	adds	r0, #1
    c1d8:	f43f ae71 	beq.w	bebe <_printf_float+0xb6>
    c1dc:	2200      	movs	r2, #0
    c1de:	2300      	movs	r3, #0
    c1e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    c1e4:	f7f4 fbdc 	bl	9a0 <__aeabi_dcmpeq>
    c1e8:	b9d8      	cbnz	r0, c222 <_printf_float+0x41a>
    c1ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c1ec:	f108 0201 	add.w	r2, r8, #1
    c1f0:	3b01      	subs	r3, #1
    c1f2:	4631      	mov	r1, r6
    c1f4:	4628      	mov	r0, r5
    c1f6:	47b8      	blx	r7
    c1f8:	3001      	adds	r0, #1
    c1fa:	d10e      	bne.n	c21a <_printf_float+0x412>
    c1fc:	e65f      	b.n	bebe <_printf_float+0xb6>
    c1fe:	2301      	movs	r3, #1
    c200:	464a      	mov	r2, r9
    c202:	4631      	mov	r1, r6
    c204:	4628      	mov	r0, r5
    c206:	47b8      	blx	r7
    c208:	3001      	adds	r0, #1
    c20a:	f43f ae58 	beq.w	bebe <_printf_float+0xb6>
    c20e:	f108 0801 	add.w	r8, r8, #1
    c212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c214:	3b01      	subs	r3, #1
    c216:	4543      	cmp	r3, r8
    c218:	dcf1      	bgt.n	c1fe <_printf_float+0x3f6>
    c21a:	4653      	mov	r3, sl
    c21c:	f104 0250 	add.w	r2, r4, #80	; 0x50
    c220:	e6e1      	b.n	bfe6 <_printf_float+0x1de>
    c222:	f04f 0800 	mov.w	r8, #0
    c226:	f104 091a 	add.w	r9, r4, #26
    c22a:	e7f2      	b.n	c212 <_printf_float+0x40a>
    c22c:	2301      	movs	r3, #1
    c22e:	4642      	mov	r2, r8
    c230:	e7df      	b.n	c1f2 <_printf_float+0x3ea>
    c232:	2301      	movs	r3, #1
    c234:	464a      	mov	r2, r9
    c236:	4631      	mov	r1, r6
    c238:	4628      	mov	r0, r5
    c23a:	47b8      	blx	r7
    c23c:	3001      	adds	r0, #1
    c23e:	f43f ae3e 	beq.w	bebe <_printf_float+0xb6>
    c242:	f108 0801 	add.w	r8, r8, #1
    c246:	68e3      	ldr	r3, [r4, #12]
    c248:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c24a:	1a5b      	subs	r3, r3, r1
    c24c:	4543      	cmp	r3, r8
    c24e:	dcf0      	bgt.n	c232 <_printf_float+0x42a>
    c250:	e6fe      	b.n	c050 <_printf_float+0x248>
    c252:	f04f 0800 	mov.w	r8, #0
    c256:	f104 0919 	add.w	r9, r4, #25
    c25a:	e7f4      	b.n	c246 <_printf_float+0x43e>

0000c25c <_printf_i>:
    c25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    c260:	460c      	mov	r4, r1
    c262:	4691      	mov	r9, r2
    c264:	4680      	mov	r8, r0
    c266:	469a      	mov	sl, r3
    c268:	7e27      	ldrb	r7, [r4, #24]
    c26a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c26e:	990c      	ldr	r1, [sp, #48]	; 0x30
    c270:	2f78      	cmp	r7, #120	; 0x78
    c272:	d807      	bhi.n	c284 <_printf_i+0x28>
    c274:	2f62      	cmp	r7, #98	; 0x62
    c276:	d80a      	bhi.n	c28e <_printf_i+0x32>
    c278:	2f00      	cmp	r7, #0
    c27a:	f000 80d8 	beq.w	c42e <_printf_i+0x1d2>
    c27e:	2f58      	cmp	r7, #88	; 0x58
    c280:	f000 80a3 	beq.w	c3ca <_printf_i+0x16e>
    c284:	f104 0642 	add.w	r6, r4, #66	; 0x42
    c288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    c28c:	e03a      	b.n	c304 <_printf_i+0xa8>
    c28e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    c292:	2b15      	cmp	r3, #21
    c294:	d8f6      	bhi.n	c284 <_printf_i+0x28>
    c296:	a001      	add	r0, pc, #4	; (adr r0, c29c <_printf_i+0x40>)
    c298:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    c29c:	0000c2f5 	.word	0x0000c2f5
    c2a0:	0000c309 	.word	0x0000c309
    c2a4:	0000c285 	.word	0x0000c285
    c2a8:	0000c285 	.word	0x0000c285
    c2ac:	0000c285 	.word	0x0000c285
    c2b0:	0000c285 	.word	0x0000c285
    c2b4:	0000c309 	.word	0x0000c309
    c2b8:	0000c285 	.word	0x0000c285
    c2bc:	0000c285 	.word	0x0000c285
    c2c0:	0000c285 	.word	0x0000c285
    c2c4:	0000c285 	.word	0x0000c285
    c2c8:	0000c415 	.word	0x0000c415
    c2cc:	0000c339 	.word	0x0000c339
    c2d0:	0000c3f7 	.word	0x0000c3f7
    c2d4:	0000c285 	.word	0x0000c285
    c2d8:	0000c285 	.word	0x0000c285
    c2dc:	0000c437 	.word	0x0000c437
    c2e0:	0000c285 	.word	0x0000c285
    c2e4:	0000c339 	.word	0x0000c339
    c2e8:	0000c285 	.word	0x0000c285
    c2ec:	0000c285 	.word	0x0000c285
    c2f0:	0000c3ff 	.word	0x0000c3ff
    c2f4:	680b      	ldr	r3, [r1, #0]
    c2f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
    c2fa:	1d1a      	adds	r2, r3, #4
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	600a      	str	r2, [r1, #0]
    c300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c304:	2301      	movs	r3, #1
    c306:	e0a3      	b.n	c450 <_printf_i+0x1f4>
    c308:	6825      	ldr	r5, [r4, #0]
    c30a:	6808      	ldr	r0, [r1, #0]
    c30c:	062e      	lsls	r6, r5, #24
    c30e:	f100 0304 	add.w	r3, r0, #4
    c312:	d50a      	bpl.n	c32a <_printf_i+0xce>
    c314:	6805      	ldr	r5, [r0, #0]
    c316:	600b      	str	r3, [r1, #0]
    c318:	2d00      	cmp	r5, #0
    c31a:	da03      	bge.n	c324 <_printf_i+0xc8>
    c31c:	232d      	movs	r3, #45	; 0x2d
    c31e:	426d      	negs	r5, r5
    c320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    c324:	485e      	ldr	r0, [pc, #376]	; (c4a0 <_printf_i+0x244>)
    c326:	230a      	movs	r3, #10
    c328:	e019      	b.n	c35e <_printf_i+0x102>
    c32a:	f015 0f40 	tst.w	r5, #64	; 0x40
    c32e:	6805      	ldr	r5, [r0, #0]
    c330:	600b      	str	r3, [r1, #0]
    c332:	bf18      	it	ne
    c334:	b22d      	sxthne	r5, r5
    c336:	e7ef      	b.n	c318 <_printf_i+0xbc>
    c338:	680b      	ldr	r3, [r1, #0]
    c33a:	6825      	ldr	r5, [r4, #0]
    c33c:	1d18      	adds	r0, r3, #4
    c33e:	6008      	str	r0, [r1, #0]
    c340:	0628      	lsls	r0, r5, #24
    c342:	d501      	bpl.n	c348 <_printf_i+0xec>
    c344:	681d      	ldr	r5, [r3, #0]
    c346:	e002      	b.n	c34e <_printf_i+0xf2>
    c348:	0669      	lsls	r1, r5, #25
    c34a:	d5fb      	bpl.n	c344 <_printf_i+0xe8>
    c34c:	881d      	ldrh	r5, [r3, #0]
    c34e:	2f6f      	cmp	r7, #111	; 0x6f
    c350:	4853      	ldr	r0, [pc, #332]	; (c4a0 <_printf_i+0x244>)
    c352:	bf0c      	ite	eq
    c354:	2308      	moveq	r3, #8
    c356:	230a      	movne	r3, #10
    c358:	2100      	movs	r1, #0
    c35a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    c35e:	6866      	ldr	r6, [r4, #4]
    c360:	2e00      	cmp	r6, #0
    c362:	60a6      	str	r6, [r4, #8]
    c364:	bfa2      	ittt	ge
    c366:	6821      	ldrge	r1, [r4, #0]
    c368:	f021 0104 	bicge.w	r1, r1, #4
    c36c:	6021      	strge	r1, [r4, #0]
    c36e:	b90d      	cbnz	r5, c374 <_printf_i+0x118>
    c370:	2e00      	cmp	r6, #0
    c372:	d04d      	beq.n	c410 <_printf_i+0x1b4>
    c374:	4616      	mov	r6, r2
    c376:	fbb5 f1f3 	udiv	r1, r5, r3
    c37a:	fb03 5711 	mls	r7, r3, r1, r5
    c37e:	5dc7      	ldrb	r7, [r0, r7]
    c380:	f806 7d01 	strb.w	r7, [r6, #-1]!
    c384:	462f      	mov	r7, r5
    c386:	460d      	mov	r5, r1
    c388:	42bb      	cmp	r3, r7
    c38a:	d9f4      	bls.n	c376 <_printf_i+0x11a>
    c38c:	2b08      	cmp	r3, #8
    c38e:	d10b      	bne.n	c3a8 <_printf_i+0x14c>
    c390:	6823      	ldr	r3, [r4, #0]
    c392:	07df      	lsls	r7, r3, #31
    c394:	d508      	bpl.n	c3a8 <_printf_i+0x14c>
    c396:	6923      	ldr	r3, [r4, #16]
    c398:	6861      	ldr	r1, [r4, #4]
    c39a:	4299      	cmp	r1, r3
    c39c:	bfde      	ittt	le
    c39e:	2330      	movle	r3, #48	; 0x30
    c3a0:	f806 3c01 	strble.w	r3, [r6, #-1]
    c3a4:	f106 36ff 	addle.w	r6, r6, #4294967295
    c3a8:	1b92      	subs	r2, r2, r6
    c3aa:	6122      	str	r2, [r4, #16]
    c3ac:	464b      	mov	r3, r9
    c3ae:	aa03      	add	r2, sp, #12
    c3b0:	4621      	mov	r1, r4
    c3b2:	4640      	mov	r0, r8
    c3b4:	f8cd a000 	str.w	sl, [sp]
    c3b8:	f003 fe3c 	bl	10034 <_printf_common>
    c3bc:	3001      	adds	r0, #1
    c3be:	d14c      	bne.n	c45a <_printf_i+0x1fe>
    c3c0:	f04f 30ff 	mov.w	r0, #4294967295
    c3c4:	b004      	add	sp, #16
    c3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3ca:	4835      	ldr	r0, [pc, #212]	; (c4a0 <_printf_i+0x244>)
    c3cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    c3d0:	6823      	ldr	r3, [r4, #0]
    c3d2:	680e      	ldr	r6, [r1, #0]
    c3d4:	061f      	lsls	r7, r3, #24
    c3d6:	f856 5b04 	ldr.w	r5, [r6], #4
    c3da:	600e      	str	r6, [r1, #0]
    c3dc:	d514      	bpl.n	c408 <_printf_i+0x1ac>
    c3de:	07d9      	lsls	r1, r3, #31
    c3e0:	bf44      	itt	mi
    c3e2:	f043 0320 	orrmi.w	r3, r3, #32
    c3e6:	6023      	strmi	r3, [r4, #0]
    c3e8:	b91d      	cbnz	r5, c3f2 <_printf_i+0x196>
    c3ea:	6823      	ldr	r3, [r4, #0]
    c3ec:	f023 0320 	bic.w	r3, r3, #32
    c3f0:	6023      	str	r3, [r4, #0]
    c3f2:	2310      	movs	r3, #16
    c3f4:	e7b0      	b.n	c358 <_printf_i+0xfc>
    c3f6:	6823      	ldr	r3, [r4, #0]
    c3f8:	f043 0320 	orr.w	r3, r3, #32
    c3fc:	6023      	str	r3, [r4, #0]
    c3fe:	2378      	movs	r3, #120	; 0x78
    c400:	4828      	ldr	r0, [pc, #160]	; (c4a4 <_printf_i+0x248>)
    c402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    c406:	e7e3      	b.n	c3d0 <_printf_i+0x174>
    c408:	065e      	lsls	r6, r3, #25
    c40a:	bf48      	it	mi
    c40c:	b2ad      	uxthmi	r5, r5
    c40e:	e7e6      	b.n	c3de <_printf_i+0x182>
    c410:	4616      	mov	r6, r2
    c412:	e7bb      	b.n	c38c <_printf_i+0x130>
    c414:	680b      	ldr	r3, [r1, #0]
    c416:	6826      	ldr	r6, [r4, #0]
    c418:	1d1d      	adds	r5, r3, #4
    c41a:	6960      	ldr	r0, [r4, #20]
    c41c:	600d      	str	r5, [r1, #0]
    c41e:	0635      	lsls	r5, r6, #24
    c420:	681b      	ldr	r3, [r3, #0]
    c422:	d501      	bpl.n	c428 <_printf_i+0x1cc>
    c424:	6018      	str	r0, [r3, #0]
    c426:	e002      	b.n	c42e <_printf_i+0x1d2>
    c428:	0671      	lsls	r1, r6, #25
    c42a:	d5fb      	bpl.n	c424 <_printf_i+0x1c8>
    c42c:	8018      	strh	r0, [r3, #0]
    c42e:	2300      	movs	r3, #0
    c430:	4616      	mov	r6, r2
    c432:	6123      	str	r3, [r4, #16]
    c434:	e7ba      	b.n	c3ac <_printf_i+0x150>
    c436:	680b      	ldr	r3, [r1, #0]
    c438:	1d1a      	adds	r2, r3, #4
    c43a:	600a      	str	r2, [r1, #0]
    c43c:	2100      	movs	r1, #0
    c43e:	681e      	ldr	r6, [r3, #0]
    c440:	6862      	ldr	r2, [r4, #4]
    c442:	4630      	mov	r0, r6
    c444:	f003 fd0e 	bl	fe64 <memchr>
    c448:	b108      	cbz	r0, c44e <_printf_i+0x1f2>
    c44a:	1b80      	subs	r0, r0, r6
    c44c:	6060      	str	r0, [r4, #4]
    c44e:	6863      	ldr	r3, [r4, #4]
    c450:	6123      	str	r3, [r4, #16]
    c452:	2300      	movs	r3, #0
    c454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    c458:	e7a8      	b.n	c3ac <_printf_i+0x150>
    c45a:	6923      	ldr	r3, [r4, #16]
    c45c:	4632      	mov	r2, r6
    c45e:	4649      	mov	r1, r9
    c460:	4640      	mov	r0, r8
    c462:	47d0      	blx	sl
    c464:	3001      	adds	r0, #1
    c466:	d0ab      	beq.n	c3c0 <_printf_i+0x164>
    c468:	6823      	ldr	r3, [r4, #0]
    c46a:	079b      	lsls	r3, r3, #30
    c46c:	d413      	bmi.n	c496 <_printf_i+0x23a>
    c46e:	68e0      	ldr	r0, [r4, #12]
    c470:	9b03      	ldr	r3, [sp, #12]
    c472:	4298      	cmp	r0, r3
    c474:	bfb8      	it	lt
    c476:	4618      	movlt	r0, r3
    c478:	e7a4      	b.n	c3c4 <_printf_i+0x168>
    c47a:	2301      	movs	r3, #1
    c47c:	4632      	mov	r2, r6
    c47e:	4649      	mov	r1, r9
    c480:	4640      	mov	r0, r8
    c482:	47d0      	blx	sl
    c484:	3001      	adds	r0, #1
    c486:	d09b      	beq.n	c3c0 <_printf_i+0x164>
    c488:	3501      	adds	r5, #1
    c48a:	68e3      	ldr	r3, [r4, #12]
    c48c:	9903      	ldr	r1, [sp, #12]
    c48e:	1a5b      	subs	r3, r3, r1
    c490:	42ab      	cmp	r3, r5
    c492:	dcf2      	bgt.n	c47a <_printf_i+0x21e>
    c494:	e7eb      	b.n	c46e <_printf_i+0x212>
    c496:	2500      	movs	r5, #0
    c498:	f104 0619 	add.w	r6, r4, #25
    c49c:	e7f5      	b.n	c48a <_printf_i+0x22e>
    c49e:	bf00      	nop
    c4a0:	000655ac 	.word	0x000655ac
    c4a4:	000655bd 	.word	0x000655bd

0000c4a8 <_sbrk_r>:
    c4a8:	b538      	push	{r3, r4, r5, lr}
    c4aa:	2300      	movs	r3, #0
    c4ac:	4d05      	ldr	r5, [pc, #20]	; (c4c4 <_sbrk_r+0x1c>)
    c4ae:	4604      	mov	r4, r0
    c4b0:	4608      	mov	r0, r1
    c4b2:	602b      	str	r3, [r5, #0]
    c4b4:	f7f8 f88a 	bl	45cc <_sbrk>
    c4b8:	1c43      	adds	r3, r0, #1
    c4ba:	d102      	bne.n	c4c2 <_sbrk_r+0x1a>
    c4bc:	682b      	ldr	r3, [r5, #0]
    c4be:	b103      	cbz	r3, c4c2 <_sbrk_r+0x1a>
    c4c0:	6023      	str	r3, [r4, #0]
    c4c2:	bd38      	pop	{r3, r4, r5, pc}
    c4c4:	200283d4 	.word	0x200283d4

0000c4c8 <raise>:
    c4c8:	4b02      	ldr	r3, [pc, #8]	; (c4d4 <raise+0xc>)
    c4ca:	4601      	mov	r1, r0
    c4cc:	6818      	ldr	r0, [r3, #0]
    c4ce:	f003 be21 	b.w	10114 <_raise_r>
    c4d2:	bf00      	nop
    c4d4:	200000cc 	.word	0x200000cc

0000c4d8 <_kill_r>:
    c4d8:	b538      	push	{r3, r4, r5, lr}
    c4da:	2300      	movs	r3, #0
    c4dc:	4d06      	ldr	r5, [pc, #24]	; (c4f8 <_kill_r+0x20>)
    c4de:	4604      	mov	r4, r0
    c4e0:	4608      	mov	r0, r1
    c4e2:	4611      	mov	r1, r2
    c4e4:	602b      	str	r3, [r5, #0]
    c4e6:	f001 f87d 	bl	d5e4 <_kill>
    c4ea:	1c43      	adds	r3, r0, #1
    c4ec:	d102      	bne.n	c4f4 <_kill_r+0x1c>
    c4ee:	682b      	ldr	r3, [r5, #0]
    c4f0:	b103      	cbz	r3, c4f4 <_kill_r+0x1c>
    c4f2:	6023      	str	r3, [r4, #0]
    c4f4:	bd38      	pop	{r3, r4, r5, pc}
    c4f6:	bf00      	nop
    c4f8:	200283d4 	.word	0x200283d4

0000c4fc <strtok>:
    c4fc:	4b13      	ldr	r3, [pc, #76]	; (c54c <strtok+0x50>)
    c4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c502:	681f      	ldr	r7, [r3, #0]
    c504:	4605      	mov	r5, r0
    c506:	460e      	mov	r6, r1
    c508:	6dbc      	ldr	r4, [r7, #88]	; 0x58
    c50a:	b9b4      	cbnz	r4, c53a <strtok+0x3e>
    c50c:	2050      	movs	r0, #80	; 0x50
    c50e:	f7ff fa93 	bl	ba38 <malloc>
    c512:	65b8      	str	r0, [r7, #88]	; 0x58
    c514:	6184      	str	r4, [r0, #24]
    c516:	7704      	strb	r4, [r0, #28]
    c518:	6244      	str	r4, [r0, #36]	; 0x24
    c51a:	e9c0 4400 	strd	r4, r4, [r0]
    c51e:	e9c0 4402 	strd	r4, r4, [r0, #8]
    c522:	e9c0 4404 	strd	r4, r4, [r0, #16]
    c526:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
    c52a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
    c52e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
    c532:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
    c536:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    c53a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c53c:	4631      	mov	r1, r6
    c53e:	4628      	mov	r0, r5
    c540:	2301      	movs	r3, #1
    c542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c546:	f003 be2e 	b.w	101a6 <__strtok_r>
    c54a:	bf00      	nop
    c54c:	200000cc 	.word	0x200000cc

0000c550 <_strtol_l.isra.0>:
    c550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c554:	468c      	mov	ip, r1
    c556:	4686      	mov	lr, r0
    c558:	4e38      	ldr	r6, [pc, #224]	; (c63c <_strtol_l.isra.0+0xec>)
    c55a:	4660      	mov	r0, ip
    c55c:	f81c 4b01 	ldrb.w	r4, [ip], #1
    c560:	5da5      	ldrb	r5, [r4, r6]
    c562:	f015 0508 	ands.w	r5, r5, #8
    c566:	d1f8      	bne.n	c55a <_strtol_l.isra.0+0xa>
    c568:	2c2d      	cmp	r4, #45	; 0x2d
    c56a:	d133      	bne.n	c5d4 <_strtol_l.isra.0+0x84>
    c56c:	f89c 4000 	ldrb.w	r4, [ip]
    c570:	f04f 0801 	mov.w	r8, #1
    c574:	f100 0c02 	add.w	ip, r0, #2
    c578:	2b00      	cmp	r3, #0
    c57a:	d05b      	beq.n	c634 <_strtol_l.isra.0+0xe4>
    c57c:	2b10      	cmp	r3, #16
    c57e:	d10c      	bne.n	c59a <_strtol_l.isra.0+0x4a>
    c580:	2c30      	cmp	r4, #48	; 0x30
    c582:	d10a      	bne.n	c59a <_strtol_l.isra.0+0x4a>
    c584:	f89c 0000 	ldrb.w	r0, [ip]
    c588:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c58c:	2858      	cmp	r0, #88	; 0x58
    c58e:	d14c      	bne.n	c62a <_strtol_l.isra.0+0xda>
    c590:	f89c 4001 	ldrb.w	r4, [ip, #1]
    c594:	2310      	movs	r3, #16
    c596:	f10c 0c02 	add.w	ip, ip, #2
    c59a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
    c59e:	2600      	movs	r6, #0
    c5a0:	3f01      	subs	r7, #1
    c5a2:	4630      	mov	r0, r6
    c5a4:	fbb7 f9f3 	udiv	r9, r7, r3
    c5a8:	fb03 7a19 	mls	sl, r3, r9, r7
    c5ac:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
    c5b0:	2d09      	cmp	r5, #9
    c5b2:	d817      	bhi.n	c5e4 <_strtol_l.isra.0+0x94>
    c5b4:	462c      	mov	r4, r5
    c5b6:	42a3      	cmp	r3, r4
    c5b8:	dd23      	ble.n	c602 <_strtol_l.isra.0+0xb2>
    c5ba:	1c75      	adds	r5, r6, #1
    c5bc:	d007      	beq.n	c5ce <_strtol_l.isra.0+0x7e>
    c5be:	4581      	cmp	r9, r0
    c5c0:	d31c      	bcc.n	c5fc <_strtol_l.isra.0+0xac>
    c5c2:	d101      	bne.n	c5c8 <_strtol_l.isra.0+0x78>
    c5c4:	45a2      	cmp	sl, r4
    c5c6:	db19      	blt.n	c5fc <_strtol_l.isra.0+0xac>
    c5c8:	fb00 4003 	mla	r0, r0, r3, r4
    c5cc:	2601      	movs	r6, #1
    c5ce:	f81c 4b01 	ldrb.w	r4, [ip], #1
    c5d2:	e7eb      	b.n	c5ac <_strtol_l.isra.0+0x5c>
    c5d4:	2c2b      	cmp	r4, #43	; 0x2b
    c5d6:	46a8      	mov	r8, r5
    c5d8:	bf04      	itt	eq
    c5da:	f89c 4000 	ldrbeq.w	r4, [ip]
    c5de:	f100 0c02 	addeq.w	ip, r0, #2
    c5e2:	e7c9      	b.n	c578 <_strtol_l.isra.0+0x28>
    c5e4:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
    c5e8:	2d19      	cmp	r5, #25
    c5ea:	d801      	bhi.n	c5f0 <_strtol_l.isra.0+0xa0>
    c5ec:	3c37      	subs	r4, #55	; 0x37
    c5ee:	e7e2      	b.n	c5b6 <_strtol_l.isra.0+0x66>
    c5f0:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    c5f4:	2d19      	cmp	r5, #25
    c5f6:	d804      	bhi.n	c602 <_strtol_l.isra.0+0xb2>
    c5f8:	3c57      	subs	r4, #87	; 0x57
    c5fa:	e7dc      	b.n	c5b6 <_strtol_l.isra.0+0x66>
    c5fc:	f04f 36ff 	mov.w	r6, #4294967295
    c600:	e7e5      	b.n	c5ce <_strtol_l.isra.0+0x7e>
    c602:	1c73      	adds	r3, r6, #1
    c604:	d106      	bne.n	c614 <_strtol_l.isra.0+0xc4>
    c606:	2322      	movs	r3, #34	; 0x22
    c608:	4638      	mov	r0, r7
    c60a:	f8ce 3000 	str.w	r3, [lr]
    c60e:	b942      	cbnz	r2, c622 <_strtol_l.isra.0+0xd2>
    c610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c614:	f1b8 0f00 	cmp.w	r8, #0
    c618:	d000      	beq.n	c61c <_strtol_l.isra.0+0xcc>
    c61a:	4240      	negs	r0, r0
    c61c:	2a00      	cmp	r2, #0
    c61e:	d0f7      	beq.n	c610 <_strtol_l.isra.0+0xc0>
    c620:	b10e      	cbz	r6, c626 <_strtol_l.isra.0+0xd6>
    c622:	f10c 31ff 	add.w	r1, ip, #4294967295
    c626:	6011      	str	r1, [r2, #0]
    c628:	e7f2      	b.n	c610 <_strtol_l.isra.0+0xc0>
    c62a:	2430      	movs	r4, #48	; 0x30
    c62c:	2b00      	cmp	r3, #0
    c62e:	d1b4      	bne.n	c59a <_strtol_l.isra.0+0x4a>
    c630:	2308      	movs	r3, #8
    c632:	e7b2      	b.n	c59a <_strtol_l.isra.0+0x4a>
    c634:	2c30      	cmp	r4, #48	; 0x30
    c636:	d0a5      	beq.n	c584 <_strtol_l.isra.0+0x34>
    c638:	230a      	movs	r3, #10
    c63a:	e7ae      	b.n	c59a <_strtol_l.isra.0+0x4a>
    c63c:	0006548b 	.word	0x0006548b

0000c640 <strtol>:
    c640:	4613      	mov	r3, r2
    c642:	460a      	mov	r2, r1
    c644:	4601      	mov	r1, r0
    c646:	4802      	ldr	r0, [pc, #8]	; (c650 <strtol+0x10>)
    c648:	6800      	ldr	r0, [r0, #0]
    c64a:	f7ff bf81 	b.w	c550 <_strtol_l.isra.0>
    c64e:	bf00      	nop
    c650:	200000cc 	.word	0x200000cc

0000c654 <viprintf>:
    c654:	4b09      	ldr	r3, [pc, #36]	; (c67c <viprintf+0x28>)
    c656:	b570      	push	{r4, r5, r6, lr}
    c658:	681c      	ldr	r4, [r3, #0]
    c65a:	4605      	mov	r5, r0
    c65c:	460e      	mov	r6, r1
    c65e:	b124      	cbz	r4, c66a <viprintf+0x16>
    c660:	69a3      	ldr	r3, [r4, #24]
    c662:	b913      	cbnz	r3, c66a <viprintf+0x16>
    c664:	4620      	mov	r0, r4
    c666:	f000 f9cd 	bl	ca04 <__sinit>
    c66a:	4633      	mov	r3, r6
    c66c:	462a      	mov	r2, r5
    c66e:	68a1      	ldr	r1, [r4, #8]
    c670:	4620      	mov	r0, r4
    c672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c676:	f7ff ba97 	b.w	bba8 <_vfiprintf_r>
    c67a:	bf00      	nop
    c67c:	200000cc 	.word	0x200000cc

0000c680 <__swbuf_r>:
    c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c682:	460e      	mov	r6, r1
    c684:	4614      	mov	r4, r2
    c686:	4605      	mov	r5, r0
    c688:	b118      	cbz	r0, c692 <__swbuf_r+0x12>
    c68a:	6983      	ldr	r3, [r0, #24]
    c68c:	b90b      	cbnz	r3, c692 <__swbuf_r+0x12>
    c68e:	f000 f9b9 	bl	ca04 <__sinit>
    c692:	4b21      	ldr	r3, [pc, #132]	; (c718 <__swbuf_r+0x98>)
    c694:	429c      	cmp	r4, r3
    c696:	d12b      	bne.n	c6f0 <__swbuf_r+0x70>
    c698:	686c      	ldr	r4, [r5, #4]
    c69a:	69a3      	ldr	r3, [r4, #24]
    c69c:	60a3      	str	r3, [r4, #8]
    c69e:	89a3      	ldrh	r3, [r4, #12]
    c6a0:	071a      	lsls	r2, r3, #28
    c6a2:	d52f      	bpl.n	c704 <__swbuf_r+0x84>
    c6a4:	6923      	ldr	r3, [r4, #16]
    c6a6:	b36b      	cbz	r3, c704 <__swbuf_r+0x84>
    c6a8:	6923      	ldr	r3, [r4, #16]
    c6aa:	b2f6      	uxtb	r6, r6
    c6ac:	6820      	ldr	r0, [r4, #0]
    c6ae:	4637      	mov	r7, r6
    c6b0:	1ac0      	subs	r0, r0, r3
    c6b2:	6963      	ldr	r3, [r4, #20]
    c6b4:	4283      	cmp	r3, r0
    c6b6:	dc04      	bgt.n	c6c2 <__swbuf_r+0x42>
    c6b8:	4621      	mov	r1, r4
    c6ba:	4628      	mov	r0, r5
    c6bc:	f000 f924 	bl	c908 <_fflush_r>
    c6c0:	bb30      	cbnz	r0, c710 <__swbuf_r+0x90>
    c6c2:	68a3      	ldr	r3, [r4, #8]
    c6c4:	3001      	adds	r0, #1
    c6c6:	3b01      	subs	r3, #1
    c6c8:	60a3      	str	r3, [r4, #8]
    c6ca:	6823      	ldr	r3, [r4, #0]
    c6cc:	1c5a      	adds	r2, r3, #1
    c6ce:	6022      	str	r2, [r4, #0]
    c6d0:	701e      	strb	r6, [r3, #0]
    c6d2:	6963      	ldr	r3, [r4, #20]
    c6d4:	4283      	cmp	r3, r0
    c6d6:	d004      	beq.n	c6e2 <__swbuf_r+0x62>
    c6d8:	89a3      	ldrh	r3, [r4, #12]
    c6da:	07db      	lsls	r3, r3, #31
    c6dc:	d506      	bpl.n	c6ec <__swbuf_r+0x6c>
    c6de:	2e0a      	cmp	r6, #10
    c6e0:	d104      	bne.n	c6ec <__swbuf_r+0x6c>
    c6e2:	4621      	mov	r1, r4
    c6e4:	4628      	mov	r0, r5
    c6e6:	f000 f90f 	bl	c908 <_fflush_r>
    c6ea:	b988      	cbnz	r0, c710 <__swbuf_r+0x90>
    c6ec:	4638      	mov	r0, r7
    c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6f0:	4b0a      	ldr	r3, [pc, #40]	; (c71c <__swbuf_r+0x9c>)
    c6f2:	429c      	cmp	r4, r3
    c6f4:	d101      	bne.n	c6fa <__swbuf_r+0x7a>
    c6f6:	68ac      	ldr	r4, [r5, #8]
    c6f8:	e7cf      	b.n	c69a <__swbuf_r+0x1a>
    c6fa:	4b09      	ldr	r3, [pc, #36]	; (c720 <__swbuf_r+0xa0>)
    c6fc:	429c      	cmp	r4, r3
    c6fe:	bf08      	it	eq
    c700:	68ec      	ldreq	r4, [r5, #12]
    c702:	e7ca      	b.n	c69a <__swbuf_r+0x1a>
    c704:	4621      	mov	r1, r4
    c706:	4628      	mov	r0, r5
    c708:	f000 f80c 	bl	c724 <__swsetup_r>
    c70c:	2800      	cmp	r0, #0
    c70e:	d0cb      	beq.n	c6a8 <__swbuf_r+0x28>
    c710:	f04f 37ff 	mov.w	r7, #4294967295
    c714:	e7ea      	b.n	c6ec <__swbuf_r+0x6c>
    c716:	bf00      	nop
    c718:	00062b24 	.word	0x00062b24
    c71c:	00062b44 	.word	0x00062b44
    c720:	00062b04 	.word	0x00062b04

0000c724 <__swsetup_r>:
    c724:	4b32      	ldr	r3, [pc, #200]	; (c7f0 <__swsetup_r+0xcc>)
    c726:	b570      	push	{r4, r5, r6, lr}
    c728:	681d      	ldr	r5, [r3, #0]
    c72a:	4606      	mov	r6, r0
    c72c:	460c      	mov	r4, r1
    c72e:	b125      	cbz	r5, c73a <__swsetup_r+0x16>
    c730:	69ab      	ldr	r3, [r5, #24]
    c732:	b913      	cbnz	r3, c73a <__swsetup_r+0x16>
    c734:	4628      	mov	r0, r5
    c736:	f000 f965 	bl	ca04 <__sinit>
    c73a:	4b2e      	ldr	r3, [pc, #184]	; (c7f4 <__swsetup_r+0xd0>)
    c73c:	429c      	cmp	r4, r3
    c73e:	d10f      	bne.n	c760 <__swsetup_r+0x3c>
    c740:	686c      	ldr	r4, [r5, #4]
    c742:	89a3      	ldrh	r3, [r4, #12]
    c744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c748:	0719      	lsls	r1, r3, #28
    c74a:	d42c      	bmi.n	c7a6 <__swsetup_r+0x82>
    c74c:	06dd      	lsls	r5, r3, #27
    c74e:	d411      	bmi.n	c774 <__swsetup_r+0x50>
    c750:	2309      	movs	r3, #9
    c752:	6033      	str	r3, [r6, #0]
    c754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    c758:	f04f 30ff 	mov.w	r0, #4294967295
    c75c:	81a3      	strh	r3, [r4, #12]
    c75e:	e03e      	b.n	c7de <__swsetup_r+0xba>
    c760:	4b25      	ldr	r3, [pc, #148]	; (c7f8 <__swsetup_r+0xd4>)
    c762:	429c      	cmp	r4, r3
    c764:	d101      	bne.n	c76a <__swsetup_r+0x46>
    c766:	68ac      	ldr	r4, [r5, #8]
    c768:	e7eb      	b.n	c742 <__swsetup_r+0x1e>
    c76a:	4b24      	ldr	r3, [pc, #144]	; (c7fc <__swsetup_r+0xd8>)
    c76c:	429c      	cmp	r4, r3
    c76e:	bf08      	it	eq
    c770:	68ec      	ldreq	r4, [r5, #12]
    c772:	e7e6      	b.n	c742 <__swsetup_r+0x1e>
    c774:	0758      	lsls	r0, r3, #29
    c776:	d512      	bpl.n	c79e <__swsetup_r+0x7a>
    c778:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c77a:	b141      	cbz	r1, c78e <__swsetup_r+0x6a>
    c77c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c780:	4299      	cmp	r1, r3
    c782:	d002      	beq.n	c78a <__swsetup_r+0x66>
    c784:	4630      	mov	r0, r6
    c786:	f7ff f967 	bl	ba58 <_free_r>
    c78a:	2300      	movs	r3, #0
    c78c:	6363      	str	r3, [r4, #52]	; 0x34
    c78e:	89a3      	ldrh	r3, [r4, #12]
    c790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c794:	81a3      	strh	r3, [r4, #12]
    c796:	2300      	movs	r3, #0
    c798:	6063      	str	r3, [r4, #4]
    c79a:	6923      	ldr	r3, [r4, #16]
    c79c:	6023      	str	r3, [r4, #0]
    c79e:	89a3      	ldrh	r3, [r4, #12]
    c7a0:	f043 0308 	orr.w	r3, r3, #8
    c7a4:	81a3      	strh	r3, [r4, #12]
    c7a6:	6923      	ldr	r3, [r4, #16]
    c7a8:	b94b      	cbnz	r3, c7be <__swsetup_r+0x9a>
    c7aa:	89a3      	ldrh	r3, [r4, #12]
    c7ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c7b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c7b4:	d003      	beq.n	c7be <__swsetup_r+0x9a>
    c7b6:	4621      	mov	r1, r4
    c7b8:	4630      	mov	r0, r6
    c7ba:	f000 f9a5 	bl	cb08 <__smakebuf_r>
    c7be:	89a0      	ldrh	r0, [r4, #12]
    c7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c7c4:	f010 0301 	ands.w	r3, r0, #1
    c7c8:	d00a      	beq.n	c7e0 <__swsetup_r+0xbc>
    c7ca:	2300      	movs	r3, #0
    c7cc:	60a3      	str	r3, [r4, #8]
    c7ce:	6963      	ldr	r3, [r4, #20]
    c7d0:	425b      	negs	r3, r3
    c7d2:	61a3      	str	r3, [r4, #24]
    c7d4:	6923      	ldr	r3, [r4, #16]
    c7d6:	b943      	cbnz	r3, c7ea <__swsetup_r+0xc6>
    c7d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    c7dc:	d1ba      	bne.n	c754 <__swsetup_r+0x30>
    c7de:	bd70      	pop	{r4, r5, r6, pc}
    c7e0:	0781      	lsls	r1, r0, #30
    c7e2:	bf58      	it	pl
    c7e4:	6963      	ldrpl	r3, [r4, #20]
    c7e6:	60a3      	str	r3, [r4, #8]
    c7e8:	e7f4      	b.n	c7d4 <__swsetup_r+0xb0>
    c7ea:	2000      	movs	r0, #0
    c7ec:	e7f7      	b.n	c7de <__swsetup_r+0xba>
    c7ee:	bf00      	nop
    c7f0:	200000cc 	.word	0x200000cc
    c7f4:	00062b24 	.word	0x00062b24
    c7f8:	00062b44 	.word	0x00062b44
    c7fc:	00062b04 	.word	0x00062b04

0000c800 <__sflush_r>:
    c800:	898a      	ldrh	r2, [r1, #12]
    c802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c806:	4605      	mov	r5, r0
    c808:	0710      	lsls	r0, r2, #28
    c80a:	460c      	mov	r4, r1
    c80c:	d458      	bmi.n	c8c0 <__sflush_r+0xc0>
    c80e:	684b      	ldr	r3, [r1, #4]
    c810:	2b00      	cmp	r3, #0
    c812:	dc05      	bgt.n	c820 <__sflush_r+0x20>
    c814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c816:	2b00      	cmp	r3, #0
    c818:	dc02      	bgt.n	c820 <__sflush_r+0x20>
    c81a:	2000      	movs	r0, #0
    c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c822:	2e00      	cmp	r6, #0
    c824:	d0f9      	beq.n	c81a <__sflush_r+0x1a>
    c826:	2300      	movs	r3, #0
    c828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    c82c:	682f      	ldr	r7, [r5, #0]
    c82e:	602b      	str	r3, [r5, #0]
    c830:	d032      	beq.n	c898 <__sflush_r+0x98>
    c832:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c834:	89a3      	ldrh	r3, [r4, #12]
    c836:	075a      	lsls	r2, r3, #29
    c838:	d505      	bpl.n	c846 <__sflush_r+0x46>
    c83a:	6863      	ldr	r3, [r4, #4]
    c83c:	1ac0      	subs	r0, r0, r3
    c83e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c840:	b10b      	cbz	r3, c846 <__sflush_r+0x46>
    c842:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c844:	1ac0      	subs	r0, r0, r3
    c846:	2300      	movs	r3, #0
    c848:	4602      	mov	r2, r0
    c84a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c84c:	4628      	mov	r0, r5
    c84e:	6a21      	ldr	r1, [r4, #32]
    c850:	47b0      	blx	r6
    c852:	1c43      	adds	r3, r0, #1
    c854:	89a3      	ldrh	r3, [r4, #12]
    c856:	d106      	bne.n	c866 <__sflush_r+0x66>
    c858:	6829      	ldr	r1, [r5, #0]
    c85a:	291d      	cmp	r1, #29
    c85c:	d82c      	bhi.n	c8b8 <__sflush_r+0xb8>
    c85e:	4a29      	ldr	r2, [pc, #164]	; (c904 <__sflush_r+0x104>)
    c860:	40ca      	lsrs	r2, r1
    c862:	07d6      	lsls	r6, r2, #31
    c864:	d528      	bpl.n	c8b8 <__sflush_r+0xb8>
    c866:	2200      	movs	r2, #0
    c868:	04d9      	lsls	r1, r3, #19
    c86a:	6062      	str	r2, [r4, #4]
    c86c:	6922      	ldr	r2, [r4, #16]
    c86e:	6022      	str	r2, [r4, #0]
    c870:	d504      	bpl.n	c87c <__sflush_r+0x7c>
    c872:	1c42      	adds	r2, r0, #1
    c874:	d101      	bne.n	c87a <__sflush_r+0x7a>
    c876:	682b      	ldr	r3, [r5, #0]
    c878:	b903      	cbnz	r3, c87c <__sflush_r+0x7c>
    c87a:	6560      	str	r0, [r4, #84]	; 0x54
    c87c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c87e:	602f      	str	r7, [r5, #0]
    c880:	2900      	cmp	r1, #0
    c882:	d0ca      	beq.n	c81a <__sflush_r+0x1a>
    c884:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c888:	4299      	cmp	r1, r3
    c88a:	d002      	beq.n	c892 <__sflush_r+0x92>
    c88c:	4628      	mov	r0, r5
    c88e:	f7ff f8e3 	bl	ba58 <_free_r>
    c892:	2000      	movs	r0, #0
    c894:	6360      	str	r0, [r4, #52]	; 0x34
    c896:	e7c1      	b.n	c81c <__sflush_r+0x1c>
    c898:	6a21      	ldr	r1, [r4, #32]
    c89a:	2301      	movs	r3, #1
    c89c:	4628      	mov	r0, r5
    c89e:	47b0      	blx	r6
    c8a0:	1c41      	adds	r1, r0, #1
    c8a2:	d1c7      	bne.n	c834 <__sflush_r+0x34>
    c8a4:	682b      	ldr	r3, [r5, #0]
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d0c4      	beq.n	c834 <__sflush_r+0x34>
    c8aa:	2b1d      	cmp	r3, #29
    c8ac:	d001      	beq.n	c8b2 <__sflush_r+0xb2>
    c8ae:	2b16      	cmp	r3, #22
    c8b0:	d101      	bne.n	c8b6 <__sflush_r+0xb6>
    c8b2:	602f      	str	r7, [r5, #0]
    c8b4:	e7b1      	b.n	c81a <__sflush_r+0x1a>
    c8b6:	89a3      	ldrh	r3, [r4, #12]
    c8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c8bc:	81a3      	strh	r3, [r4, #12]
    c8be:	e7ad      	b.n	c81c <__sflush_r+0x1c>
    c8c0:	690f      	ldr	r7, [r1, #16]
    c8c2:	2f00      	cmp	r7, #0
    c8c4:	d0a9      	beq.n	c81a <__sflush_r+0x1a>
    c8c6:	0793      	lsls	r3, r2, #30
    c8c8:	680e      	ldr	r6, [r1, #0]
    c8ca:	600f      	str	r7, [r1, #0]
    c8cc:	bf0c      	ite	eq
    c8ce:	694b      	ldreq	r3, [r1, #20]
    c8d0:	2300      	movne	r3, #0
    c8d2:	eba6 0807 	sub.w	r8, r6, r7
    c8d6:	608b      	str	r3, [r1, #8]
    c8d8:	f1b8 0f00 	cmp.w	r8, #0
    c8dc:	dd9d      	ble.n	c81a <__sflush_r+0x1a>
    c8de:	4643      	mov	r3, r8
    c8e0:	463a      	mov	r2, r7
    c8e2:	6a21      	ldr	r1, [r4, #32]
    c8e4:	4628      	mov	r0, r5
    c8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c8e8:	47b0      	blx	r6
    c8ea:	2800      	cmp	r0, #0
    c8ec:	dc06      	bgt.n	c8fc <__sflush_r+0xfc>
    c8ee:	89a3      	ldrh	r3, [r4, #12]
    c8f0:	f04f 30ff 	mov.w	r0, #4294967295
    c8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c8f8:	81a3      	strh	r3, [r4, #12]
    c8fa:	e78f      	b.n	c81c <__sflush_r+0x1c>
    c8fc:	4407      	add	r7, r0
    c8fe:	eba8 0800 	sub.w	r8, r8, r0
    c902:	e7e9      	b.n	c8d8 <__sflush_r+0xd8>
    c904:	20400001 	.word	0x20400001

0000c908 <_fflush_r>:
    c908:	b538      	push	{r3, r4, r5, lr}
    c90a:	690b      	ldr	r3, [r1, #16]
    c90c:	4605      	mov	r5, r0
    c90e:	460c      	mov	r4, r1
    c910:	b913      	cbnz	r3, c918 <_fflush_r+0x10>
    c912:	2500      	movs	r5, #0
    c914:	4628      	mov	r0, r5
    c916:	bd38      	pop	{r3, r4, r5, pc}
    c918:	b118      	cbz	r0, c922 <_fflush_r+0x1a>
    c91a:	6983      	ldr	r3, [r0, #24]
    c91c:	b90b      	cbnz	r3, c922 <_fflush_r+0x1a>
    c91e:	f000 f871 	bl	ca04 <__sinit>
    c922:	4b14      	ldr	r3, [pc, #80]	; (c974 <_fflush_r+0x6c>)
    c924:	429c      	cmp	r4, r3
    c926:	d11b      	bne.n	c960 <_fflush_r+0x58>
    c928:	686c      	ldr	r4, [r5, #4]
    c92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c92e:	2b00      	cmp	r3, #0
    c930:	d0ef      	beq.n	c912 <_fflush_r+0xa>
    c932:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c934:	07d0      	lsls	r0, r2, #31
    c936:	d404      	bmi.n	c942 <_fflush_r+0x3a>
    c938:	0599      	lsls	r1, r3, #22
    c93a:	d402      	bmi.n	c942 <_fflush_r+0x3a>
    c93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c93e:	f000 fe64 	bl	d60a <__retarget_lock_acquire_recursive>
    c942:	4628      	mov	r0, r5
    c944:	4621      	mov	r1, r4
    c946:	f7ff ff5b 	bl	c800 <__sflush_r>
    c94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c94c:	4605      	mov	r5, r0
    c94e:	07da      	lsls	r2, r3, #31
    c950:	d4e0      	bmi.n	c914 <_fflush_r+0xc>
    c952:	89a3      	ldrh	r3, [r4, #12]
    c954:	059b      	lsls	r3, r3, #22
    c956:	d4dd      	bmi.n	c914 <_fflush_r+0xc>
    c958:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c95a:	f000 fe5c 	bl	d616 <__retarget_lock_release_recursive>
    c95e:	e7d9      	b.n	c914 <_fflush_r+0xc>
    c960:	4b05      	ldr	r3, [pc, #20]	; (c978 <_fflush_r+0x70>)
    c962:	429c      	cmp	r4, r3
    c964:	d101      	bne.n	c96a <_fflush_r+0x62>
    c966:	68ac      	ldr	r4, [r5, #8]
    c968:	e7df      	b.n	c92a <_fflush_r+0x22>
    c96a:	4b04      	ldr	r3, [pc, #16]	; (c97c <_fflush_r+0x74>)
    c96c:	429c      	cmp	r4, r3
    c96e:	bf08      	it	eq
    c970:	68ec      	ldreq	r4, [r5, #12]
    c972:	e7da      	b.n	c92a <_fflush_r+0x22>
    c974:	00062b24 	.word	0x00062b24
    c978:	00062b44 	.word	0x00062b44
    c97c:	00062b04 	.word	0x00062b04

0000c980 <std>:
    c980:	2300      	movs	r3, #0
    c982:	b510      	push	{r4, lr}
    c984:	4604      	mov	r4, r0
    c986:	6083      	str	r3, [r0, #8]
    c988:	8181      	strh	r1, [r0, #12]
    c98a:	4619      	mov	r1, r3
    c98c:	6643      	str	r3, [r0, #100]	; 0x64
    c98e:	81c2      	strh	r2, [r0, #14]
    c990:	2208      	movs	r2, #8
    c992:	6183      	str	r3, [r0, #24]
    c994:	e9c0 3300 	strd	r3, r3, [r0]
    c998:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c99c:	305c      	adds	r0, #92	; 0x5c
    c99e:	f003 fa7c 	bl	fe9a <memset>
    c9a2:	4b05      	ldr	r3, [pc, #20]	; (c9b8 <std+0x38>)
    c9a4:	6224      	str	r4, [r4, #32]
    c9a6:	6263      	str	r3, [r4, #36]	; 0x24
    c9a8:	4b04      	ldr	r3, [pc, #16]	; (c9bc <std+0x3c>)
    c9aa:	62a3      	str	r3, [r4, #40]	; 0x28
    c9ac:	4b04      	ldr	r3, [pc, #16]	; (c9c0 <std+0x40>)
    c9ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    c9b0:	4b04      	ldr	r3, [pc, #16]	; (c9c4 <std+0x44>)
    c9b2:	6323      	str	r3, [r4, #48]	; 0x30
    c9b4:	bd10      	pop	{r4, pc}
    c9b6:	bf00      	nop
    c9b8:	00010967 	.word	0x00010967
    c9bc:	00010989 	.word	0x00010989
    c9c0:	000109c1 	.word	0x000109c1
    c9c4:	000109e5 	.word	0x000109e5

0000c9c8 <_cleanup_r>:
    c9c8:	4901      	ldr	r1, [pc, #4]	; (c9d0 <_cleanup_r+0x8>)
    c9ca:	f003 bcb9 	b.w	10340 <_fwalk_reent>
    c9ce:	bf00      	nop
    c9d0:	0000c909 	.word	0x0000c909

0000c9d4 <__sfp_lock_acquire>:
    c9d4:	4801      	ldr	r0, [pc, #4]	; (c9dc <__sfp_lock_acquire+0x8>)
    c9d6:	f000 be18 	b.w	d60a <__retarget_lock_acquire_recursive>
    c9da:	bf00      	nop
    c9dc:	200002c8 	.word	0x200002c8

0000c9e0 <__sfp_lock_release>:
    c9e0:	4801      	ldr	r0, [pc, #4]	; (c9e8 <__sfp_lock_release+0x8>)
    c9e2:	f000 be18 	b.w	d616 <__retarget_lock_release_recursive>
    c9e6:	bf00      	nop
    c9e8:	200002c8 	.word	0x200002c8

0000c9ec <__sinit_lock_acquire>:
    c9ec:	4801      	ldr	r0, [pc, #4]	; (c9f4 <__sinit_lock_acquire+0x8>)
    c9ee:	f000 be0c 	b.w	d60a <__retarget_lock_acquire_recursive>
    c9f2:	bf00      	nop
    c9f4:	200002dc 	.word	0x200002dc

0000c9f8 <__sinit_lock_release>:
    c9f8:	4801      	ldr	r0, [pc, #4]	; (ca00 <__sinit_lock_release+0x8>)
    c9fa:	f000 be0c 	b.w	d616 <__retarget_lock_release_recursive>
    c9fe:	bf00      	nop
    ca00:	200002dc 	.word	0x200002dc

0000ca04 <__sinit>:
    ca04:	b510      	push	{r4, lr}
    ca06:	4604      	mov	r4, r0
    ca08:	f7ff fff0 	bl	c9ec <__sinit_lock_acquire>
    ca0c:	69a3      	ldr	r3, [r4, #24]
    ca0e:	b11b      	cbz	r3, ca18 <__sinit+0x14>
    ca10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca14:	f7ff bff0 	b.w	c9f8 <__sinit_lock_release>
    ca18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    ca1c:	6523      	str	r3, [r4, #80]	; 0x50
    ca1e:	4620      	mov	r0, r4
    ca20:	4b12      	ldr	r3, [pc, #72]	; (ca6c <__sinit+0x68>)
    ca22:	4a13      	ldr	r2, [pc, #76]	; (ca70 <__sinit+0x6c>)
    ca24:	681b      	ldr	r3, [r3, #0]
    ca26:	62a2      	str	r2, [r4, #40]	; 0x28
    ca28:	42a3      	cmp	r3, r4
    ca2a:	bf04      	itt	eq
    ca2c:	2301      	moveq	r3, #1
    ca2e:	61a3      	streq	r3, [r4, #24]
    ca30:	f000 f820 	bl	ca74 <__sfp>
    ca34:	6060      	str	r0, [r4, #4]
    ca36:	4620      	mov	r0, r4
    ca38:	f000 f81c 	bl	ca74 <__sfp>
    ca3c:	60a0      	str	r0, [r4, #8]
    ca3e:	4620      	mov	r0, r4
    ca40:	f000 f818 	bl	ca74 <__sfp>
    ca44:	2200      	movs	r2, #0
    ca46:	2104      	movs	r1, #4
    ca48:	60e0      	str	r0, [r4, #12]
    ca4a:	6860      	ldr	r0, [r4, #4]
    ca4c:	f7ff ff98 	bl	c980 <std>
    ca50:	2201      	movs	r2, #1
    ca52:	2109      	movs	r1, #9
    ca54:	68a0      	ldr	r0, [r4, #8]
    ca56:	f7ff ff93 	bl	c980 <std>
    ca5a:	2202      	movs	r2, #2
    ca5c:	2112      	movs	r1, #18
    ca5e:	68e0      	ldr	r0, [r4, #12]
    ca60:	f7ff ff8e 	bl	c980 <std>
    ca64:	2301      	movs	r3, #1
    ca66:	61a3      	str	r3, [r4, #24]
    ca68:	e7d2      	b.n	ca10 <__sinit+0xc>
    ca6a:	bf00      	nop
    ca6c:	00062b00 	.word	0x00062b00
    ca70:	0000c9c9 	.word	0x0000c9c9

0000ca74 <__sfp>:
    ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca76:	4607      	mov	r7, r0
    ca78:	f7ff ffac 	bl	c9d4 <__sfp_lock_acquire>
    ca7c:	4b1e      	ldr	r3, [pc, #120]	; (caf8 <__sfp+0x84>)
    ca7e:	681e      	ldr	r6, [r3, #0]
    ca80:	69b3      	ldr	r3, [r6, #24]
    ca82:	b913      	cbnz	r3, ca8a <__sfp+0x16>
    ca84:	4630      	mov	r0, r6
    ca86:	f7ff ffbd 	bl	ca04 <__sinit>
    ca8a:	3648      	adds	r6, #72	; 0x48
    ca8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    ca90:	3b01      	subs	r3, #1
    ca92:	d503      	bpl.n	ca9c <__sfp+0x28>
    ca94:	6833      	ldr	r3, [r6, #0]
    ca96:	b30b      	cbz	r3, cadc <__sfp+0x68>
    ca98:	6836      	ldr	r6, [r6, #0]
    ca9a:	e7f7      	b.n	ca8c <__sfp+0x18>
    ca9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    caa0:	b9d5      	cbnz	r5, cad8 <__sfp+0x64>
    caa2:	4b16      	ldr	r3, [pc, #88]	; (cafc <__sfp+0x88>)
    caa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    caa8:	6665      	str	r5, [r4, #100]	; 0x64
    caaa:	60e3      	str	r3, [r4, #12]
    caac:	f000 fda3 	bl	d5f6 <__retarget_lock_init_recursive>
    cab0:	f7ff ff96 	bl	c9e0 <__sfp_lock_release>
    cab4:	2208      	movs	r2, #8
    cab6:	4629      	mov	r1, r5
    cab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    cabc:	6025      	str	r5, [r4, #0]
    cabe:	61a5      	str	r5, [r4, #24]
    cac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
    cac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
    cac8:	f003 f9e7 	bl	fe9a <memset>
    cacc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    cad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    cad4:	4620      	mov	r0, r4
    cad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cad8:	3468      	adds	r4, #104	; 0x68
    cada:	e7d9      	b.n	ca90 <__sfp+0x1c>
    cadc:	2104      	movs	r1, #4
    cade:	4638      	mov	r0, r7
    cae0:	f003 fc18 	bl	10314 <__sfmoreglue>
    cae4:	4604      	mov	r4, r0
    cae6:	6030      	str	r0, [r6, #0]
    cae8:	2800      	cmp	r0, #0
    caea:	d1d5      	bne.n	ca98 <__sfp+0x24>
    caec:	f7ff ff78 	bl	c9e0 <__sfp_lock_release>
    caf0:	230c      	movs	r3, #12
    caf2:	603b      	str	r3, [r7, #0]
    caf4:	e7ee      	b.n	cad4 <__sfp+0x60>
    caf6:	bf00      	nop
    caf8:	00062b00 	.word	0x00062b00
    cafc:	ffff0001 	.word	0xffff0001

0000cb00 <_localeconv_r>:
    cb00:	4800      	ldr	r0, [pc, #0]	; (cb04 <_localeconv_r+0x4>)
    cb02:	4770      	bx	lr
    cb04:	20000220 	.word	0x20000220

0000cb08 <__smakebuf_r>:
    cb08:	898b      	ldrh	r3, [r1, #12]
    cb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    cb0c:	079d      	lsls	r5, r3, #30
    cb0e:	4606      	mov	r6, r0
    cb10:	460c      	mov	r4, r1
    cb12:	d507      	bpl.n	cb24 <__smakebuf_r+0x1c>
    cb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
    cb18:	6023      	str	r3, [r4, #0]
    cb1a:	6123      	str	r3, [r4, #16]
    cb1c:	2301      	movs	r3, #1
    cb1e:	6163      	str	r3, [r4, #20]
    cb20:	b002      	add	sp, #8
    cb22:	bd70      	pop	{r4, r5, r6, pc}
    cb24:	ab01      	add	r3, sp, #4
    cb26:	466a      	mov	r2, sp
    cb28:	f003 fc29 	bl	1037e <__swhatbuf_r>
    cb2c:	9900      	ldr	r1, [sp, #0]
    cb2e:	4605      	mov	r5, r0
    cb30:	4630      	mov	r0, r6
    cb32:	f7fe ffdf 	bl	baf4 <_malloc_r>
    cb36:	b948      	cbnz	r0, cb4c <__smakebuf_r+0x44>
    cb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cb3c:	059a      	lsls	r2, r3, #22
    cb3e:	d4ef      	bmi.n	cb20 <__smakebuf_r+0x18>
    cb40:	f023 0303 	bic.w	r3, r3, #3
    cb44:	f043 0302 	orr.w	r3, r3, #2
    cb48:	81a3      	strh	r3, [r4, #12]
    cb4a:	e7e3      	b.n	cb14 <__smakebuf_r+0xc>
    cb4c:	4b0d      	ldr	r3, [pc, #52]	; (cb84 <__smakebuf_r+0x7c>)
    cb4e:	62b3      	str	r3, [r6, #40]	; 0x28
    cb50:	89a3      	ldrh	r3, [r4, #12]
    cb52:	6020      	str	r0, [r4, #0]
    cb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cb58:	6120      	str	r0, [r4, #16]
    cb5a:	81a3      	strh	r3, [r4, #12]
    cb5c:	9b00      	ldr	r3, [sp, #0]
    cb5e:	6163      	str	r3, [r4, #20]
    cb60:	9b01      	ldr	r3, [sp, #4]
    cb62:	b15b      	cbz	r3, cb7c <__smakebuf_r+0x74>
    cb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cb68:	4630      	mov	r0, r6
    cb6a:	f000 f89b 	bl	cca4 <_isatty_r>
    cb6e:	b128      	cbz	r0, cb7c <__smakebuf_r+0x74>
    cb70:	89a3      	ldrh	r3, [r4, #12]
    cb72:	f023 0303 	bic.w	r3, r3, #3
    cb76:	f043 0301 	orr.w	r3, r3, #1
    cb7a:	81a3      	strh	r3, [r4, #12]
    cb7c:	89a0      	ldrh	r0, [r4, #12]
    cb7e:	4305      	orrs	r5, r0
    cb80:	81a5      	strh	r5, [r4, #12]
    cb82:	e7cd      	b.n	cb20 <__smakebuf_r+0x18>
    cb84:	0000c9c9 	.word	0x0000c9c9

0000cb88 <__malloc_lock>:
    cb88:	4801      	ldr	r0, [pc, #4]	; (cb90 <__malloc_lock+0x8>)
    cb8a:	f000 bd3e 	b.w	d60a <__retarget_lock_acquire_recursive>
    cb8e:	bf00      	nop
    cb90:	200002b4 	.word	0x200002b4

0000cb94 <__malloc_unlock>:
    cb94:	4801      	ldr	r0, [pc, #4]	; (cb9c <__malloc_unlock+0x8>)
    cb96:	f000 bd3e 	b.w	d616 <__retarget_lock_release_recursive>
    cb9a:	bf00      	nop
    cb9c:	200002b4 	.word	0x200002b4

0000cba0 <__pow5mult>:
    cba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cba4:	4615      	mov	r5, r2
    cba6:	f012 0203 	ands.w	r2, r2, #3
    cbaa:	4606      	mov	r6, r0
    cbac:	460f      	mov	r7, r1
    cbae:	d007      	beq.n	cbc0 <__pow5mult+0x20>
    cbb0:	3a01      	subs	r2, #1
    cbb2:	4c21      	ldr	r4, [pc, #132]	; (cc38 <__pow5mult+0x98>)
    cbb4:	2300      	movs	r3, #0
    cbb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    cbba:	f003 fc4f 	bl	1045c <__multadd>
    cbbe:	4607      	mov	r7, r0
    cbc0:	10ad      	asrs	r5, r5, #2
    cbc2:	d035      	beq.n	cc30 <__pow5mult+0x90>
    cbc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
    cbc6:	b93c      	cbnz	r4, cbd8 <__pow5mult+0x38>
    cbc8:	2010      	movs	r0, #16
    cbca:	f7fe ff35 	bl	ba38 <malloc>
    cbce:	6270      	str	r0, [r6, #36]	; 0x24
    cbd0:	6004      	str	r4, [r0, #0]
    cbd2:	60c4      	str	r4, [r0, #12]
    cbd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
    cbd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    cbdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
    cbe0:	b94c      	cbnz	r4, cbf6 <__pow5mult+0x56>
    cbe2:	f240 2171 	movw	r1, #625	; 0x271
    cbe6:	4630      	mov	r0, r6
    cbe8:	f003 fcc5 	bl	10576 <__i2b>
    cbec:	2300      	movs	r3, #0
    cbee:	4604      	mov	r4, r0
    cbf0:	f8c8 0008 	str.w	r0, [r8, #8]
    cbf4:	6003      	str	r3, [r0, #0]
    cbf6:	f04f 0900 	mov.w	r9, #0
    cbfa:	07eb      	lsls	r3, r5, #31
    cbfc:	d50a      	bpl.n	cc14 <__pow5mult+0x74>
    cbfe:	4639      	mov	r1, r7
    cc00:	4622      	mov	r2, r4
    cc02:	4630      	mov	r0, r6
    cc04:	f003 fcc0 	bl	10588 <__multiply>
    cc08:	4680      	mov	r8, r0
    cc0a:	4639      	mov	r1, r7
    cc0c:	4630      	mov	r0, r6
    cc0e:	4647      	mov	r7, r8
    cc10:	f003 fc0d 	bl	1042e <_Bfree>
    cc14:	106d      	asrs	r5, r5, #1
    cc16:	d00b      	beq.n	cc30 <__pow5mult+0x90>
    cc18:	6820      	ldr	r0, [r4, #0]
    cc1a:	b938      	cbnz	r0, cc2c <__pow5mult+0x8c>
    cc1c:	4622      	mov	r2, r4
    cc1e:	4621      	mov	r1, r4
    cc20:	4630      	mov	r0, r6
    cc22:	f003 fcb1 	bl	10588 <__multiply>
    cc26:	6020      	str	r0, [r4, #0]
    cc28:	f8c0 9000 	str.w	r9, [r0]
    cc2c:	4604      	mov	r4, r0
    cc2e:	e7e4      	b.n	cbfa <__pow5mult+0x5a>
    cc30:	4638      	mov	r0, r7
    cc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cc36:	bf00      	nop
    cc38:	00062b64 	.word	0x00062b64

0000cc3c <_write_r>:
    cc3c:	b538      	push	{r3, r4, r5, lr}
    cc3e:	4604      	mov	r4, r0
    cc40:	4d06      	ldr	r5, [pc, #24]	; (cc5c <_write_r+0x20>)
    cc42:	4608      	mov	r0, r1
    cc44:	4611      	mov	r1, r2
    cc46:	2200      	movs	r2, #0
    cc48:	602a      	str	r2, [r5, #0]
    cc4a:	461a      	mov	r2, r3
    cc4c:	f000 fcbc 	bl	d5c8 <_write>
    cc50:	1c43      	adds	r3, r0, #1
    cc52:	d102      	bne.n	cc5a <_write_r+0x1e>
    cc54:	682b      	ldr	r3, [r5, #0]
    cc56:	b103      	cbz	r3, cc5a <_write_r+0x1e>
    cc58:	6023      	str	r3, [r4, #0]
    cc5a:	bd38      	pop	{r3, r4, r5, pc}
    cc5c:	200283d4 	.word	0x200283d4

0000cc60 <_close_r>:
    cc60:	b538      	push	{r3, r4, r5, lr}
    cc62:	2300      	movs	r3, #0
    cc64:	4d05      	ldr	r5, [pc, #20]	; (cc7c <_close_r+0x1c>)
    cc66:	4604      	mov	r4, r0
    cc68:	4608      	mov	r0, r1
    cc6a:	602b      	str	r3, [r5, #0]
    cc6c:	f000 fcb0 	bl	d5d0 <_close>
    cc70:	1c43      	adds	r3, r0, #1
    cc72:	d102      	bne.n	cc7a <_close_r+0x1a>
    cc74:	682b      	ldr	r3, [r5, #0]
    cc76:	b103      	cbz	r3, cc7a <_close_r+0x1a>
    cc78:	6023      	str	r3, [r4, #0]
    cc7a:	bd38      	pop	{r3, r4, r5, pc}
    cc7c:	200283d4 	.word	0x200283d4

0000cc80 <_fstat_r>:
    cc80:	b538      	push	{r3, r4, r5, lr}
    cc82:	2300      	movs	r3, #0
    cc84:	4d06      	ldr	r5, [pc, #24]	; (cca0 <_fstat_r+0x20>)
    cc86:	4604      	mov	r4, r0
    cc88:	4608      	mov	r0, r1
    cc8a:	4611      	mov	r1, r2
    cc8c:	602b      	str	r3, [r5, #0]
    cc8e:	f000 fcad 	bl	d5ec <_fstat>
    cc92:	1c43      	adds	r3, r0, #1
    cc94:	d102      	bne.n	cc9c <_fstat_r+0x1c>
    cc96:	682b      	ldr	r3, [r5, #0]
    cc98:	b103      	cbz	r3, cc9c <_fstat_r+0x1c>
    cc9a:	6023      	str	r3, [r4, #0]
    cc9c:	bd38      	pop	{r3, r4, r5, pc}
    cc9e:	bf00      	nop
    cca0:	200283d4 	.word	0x200283d4

0000cca4 <_isatty_r>:
    cca4:	b538      	push	{r3, r4, r5, lr}
    cca6:	2300      	movs	r3, #0
    cca8:	4d05      	ldr	r5, [pc, #20]	; (ccc0 <_isatty_r+0x1c>)
    ccaa:	4604      	mov	r4, r0
    ccac:	4608      	mov	r0, r1
    ccae:	602b      	str	r3, [r5, #0]
    ccb0:	f000 fc93 	bl	d5da <_isatty>
    ccb4:	1c43      	adds	r3, r0, #1
    ccb6:	d102      	bne.n	ccbe <_isatty_r+0x1a>
    ccb8:	682b      	ldr	r3, [r5, #0]
    ccba:	b103      	cbz	r3, ccbe <_isatty_r+0x1a>
    ccbc:	6023      	str	r3, [r4, #0]
    ccbe:	bd38      	pop	{r3, r4, r5, pc}
    ccc0:	200283d4 	.word	0x200283d4

0000ccc4 <_lseek_r>:
    ccc4:	b538      	push	{r3, r4, r5, lr}
    ccc6:	4604      	mov	r4, r0
    ccc8:	4d06      	ldr	r5, [pc, #24]	; (cce4 <_lseek_r+0x20>)
    ccca:	4608      	mov	r0, r1
    cccc:	4611      	mov	r1, r2
    ccce:	2200      	movs	r2, #0
    ccd0:	602a      	str	r2, [r5, #0]
    ccd2:	461a      	mov	r2, r3
    ccd4:	f000 fc7f 	bl	d5d6 <_lseek>
    ccd8:	1c43      	adds	r3, r0, #1
    ccda:	d102      	bne.n	cce2 <_lseek_r+0x1e>
    ccdc:	682b      	ldr	r3, [r5, #0]
    ccde:	b103      	cbz	r3, cce2 <_lseek_r+0x1e>
    cce0:	6023      	str	r3, [r4, #0]
    cce2:	bd38      	pop	{r3, r4, r5, pc}
    cce4:	200283d4 	.word	0x200283d4

0000cce8 <_read_r>:
    cce8:	b538      	push	{r3, r4, r5, lr}
    ccea:	4604      	mov	r4, r0
    ccec:	4d06      	ldr	r5, [pc, #24]	; (cd08 <_read_r+0x20>)
    ccee:	4608      	mov	r0, r1
    ccf0:	4611      	mov	r1, r2
    ccf2:	2200      	movs	r2, #0
    ccf4:	602a      	str	r2, [r5, #0]
    ccf6:	461a      	mov	r2, r3
    ccf8:	f000 fc62 	bl	d5c0 <_read>
    ccfc:	1c43      	adds	r3, r0, #1
    ccfe:	d102      	bne.n	cd06 <_read_r+0x1e>
    cd00:	682b      	ldr	r3, [r5, #0]
    cd02:	b103      	cbz	r3, cd06 <_read_r+0x1e>
    cd04:	6023      	str	r3, [r4, #0]
    cd06:	bd38      	pop	{r3, r4, r5, pc}
    cd08:	200283d4 	.word	0x200283d4

0000cd0c <_Z9ee_hexdecPc>:
  long ret = 0;
    cd0c:	1e41      	subs	r1, r0, #1
    cd0e:	2000      	movs	r0, #0
long ee_hexdec(char *hex) {
    cd10:	b510      	push	{r4, lr}
  while (*hex && ret >= 0) {
    cd12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    cd16:	b1c2      	cbz	r2, cd4a <_Z9ee_hexdecPc+0x3e>
    cd18:	2800      	cmp	r0, #0
    cd1a:	db16      	blt.n	cd4a <_Z9ee_hexdecPc+0x3e>
    if (c >= '0' && c <= '9') {
    cd1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cd20:	b2dc      	uxtb	r4, r3
    cd22:	2c09      	cmp	r4, #9
    cd24:	d905      	bls.n	cd32 <_Z9ee_hexdecPc+0x26>
    } else if (c >= 'a' && c <= 'f') {
    cd26:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    cd2a:	2b05      	cmp	r3, #5
    cd2c:	d804      	bhi.n	cd38 <_Z9ee_hexdecPc+0x2c>
      dec = c - 'a' + 10;
    cd2e:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    ret = (ret << 4) + dec;
    cd32:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
    cd36:	e7ec      	b.n	cd12 <_Z9ee_hexdecPc+0x6>
    } else if (c >= 'A' && c <= 'F') {
    cd38:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    cd3c:	2b05      	cmp	r3, #5
    cd3e:	d802      	bhi.n	cd46 <_Z9ee_hexdecPc+0x3a>
      dec = c - 'A' + 10;
    cd40:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    cd44:	e7f5      	b.n	cd32 <_Z9ee_hexdecPc+0x26>
      return -1;
    cd46:	f04f 30ff 	mov.w	r0, #4294967295
}
    cd4a:	bd10      	pop	{r4, pc}

0000cd4c <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
    cd4c:	2200      	movs	r2, #0
    cd4e:	e9c0 2200 	strd	r2, r2, [r0]
    cd52:	6082      	str	r2, [r0, #8]
  }
    cd54:	4770      	bx	lr

0000cd56 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
    cd56:	2001      	movs	r0, #1
    cd58:	4770      	bx	lr

0000cd5a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
    cd5a:	6803      	ldr	r3, [r0, #0]
    cd5c:	699b      	ldr	r3, [r3, #24]
    cd5e:	4718      	bx	r3

0000cd60 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
    cd60:	6803      	ldr	r3, [r0, #0]
    cd62:	69db      	ldr	r3, [r3, #28]
    cd64:	4718      	bx	r3

0000cd66 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    cd66:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    cd68:	b570      	push	{r4, r5, r6, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    cd6a:	d00f      	beq.n	cd8c <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    cd6c:	2300      	movs	r3, #0
    cd6e:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
      if (registration.builtin_code == op) {
    cd72:	f100 0518 	add.w	r5, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    cd76:	429c      	cmp	r4, r3
    cd78:	d008      	beq.n	cd8c <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x26>
    cd7a:	015a      	lsls	r2, r3, #5
      if (registration.builtin_code == op) {
    cd7c:	58ae      	ldr	r6, [r5, r2]
    cd7e:	428e      	cmp	r6, r1
    cd80:	d102      	bne.n	cd88 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x22>
      const TfLiteRegistration& registration = registrations_[i];
    cd82:	3204      	adds	r2, #4
    cd84:	4410      	add	r0, r2
  }
    cd86:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    cd88:	3301      	adds	r3, #1
    cd8a:	e7f4      	b.n	cd76 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x10>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
    cd8c:	2000      	movs	r0, #0
    cd8e:	e7fa      	b.n	cd86 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x20>

0000cd90 <_ZN6tflite22MicroMutableOpResolverILj6EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
    cd90:	4770      	bx	lr

0000cd92 <_ZN6tflite16MicroModelRunnerIaaLi6EED1Ev>:
class MicroModelRunner {
    cd92:	b510      	push	{r4, lr}
    cd94:	4604      	mov	r4, r0
    cd96:	300c      	adds	r0, #12
    cd98:	f001 f941 	bl	e01e <_ZN6tflite16MicroInterpreterD1Ev>
    cd9c:	4620      	mov	r0, r4
    cd9e:	bd10      	pop	{r4, pc}

0000cda0 <_ZN6tflite22MicroMutableOpResolverILj6EED0Ev>:
    cda0:	b510      	push	{r4, lr}
    cda2:	4604      	mov	r4, r0
    cda4:	f003 f83c 	bl	fe20 <_ZdlPv>
    cda8:	4620      	mov	r0, r4
    cdaa:	bd10      	pop	{r4, pc}

0000cdac <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE>:
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    cdac:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
    cdb0:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    cdb2:	2a06      	cmp	r2, #6
    cdb4:	d80c      	bhi.n	cdd0 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x24>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    cdb6:	2300      	movs	r3, #0
    cdb8:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
    cdbc:	429a      	cmp	r2, r3
    cdbe:	d00b      	beq.n	cdd8 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
    cdc0:	f814 5b01 	ldrb.w	r5, [r4], #1
    cdc4:	428d      	cmp	r5, r1
    cdc6:	d105      	bne.n	cdd4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>
    cdc8:	3334      	adds	r3, #52	; 0x34
    cdca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
    cdce:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
    cdd0:	f003 f83d 	bl	fe4e <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
    cdd4:	3301      	adds	r3, #1
    cdd6:	e7f1      	b.n	cdbc <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x10>
    return nullptr;
    cdd8:	2000      	movs	r0, #0
    cdda:	e7f8      	b.n	cdce <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x22>

0000cddc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
    cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdde:	4604      	mov	r4, r0
    cde0:	460f      	mov	r7, r1
    cde2:	4606      	mov	r6, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    cde4:	2500      	movs	r5, #0
    cde6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    cdea:	42ab      	cmp	r3, r5
    cdec:	d90f      	bls.n	ce0e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x32>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    cdee:	69b3      	ldr	r3, [r6, #24]
    cdf0:	2b20      	cmp	r3, #32
    cdf2:	d002      	beq.n	cdfa <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x1e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
    cdf4:	3501      	adds	r5, #1
    cdf6:	3620      	adds	r6, #32
    cdf8:	e7f5      	b.n	cde6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
    cdfa:	4639      	mov	r1, r7
    cdfc:	69f0      	ldr	r0, [r6, #28]
    cdfe:	f7f4 fb5f 	bl	14c0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
    ce02:	2800      	cmp	r0, #0
    ce04:	d1f6      	bne.n	cdf4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x18>
      const TfLiteRegistration& registration = registrations_[i];
    ce06:	eb04 1045 	add.w	r0, r4, r5, lsl #5
    ce0a:	3004      	adds	r0, #4
  }
    ce0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return nullptr;
    ce0e:	2000      	movs	r0, #0
    ce10:	e7fc      	b.n	ce0c <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x30>

0000ce12 <_Z6th_prev>:
    ce12:	4770      	bx	lr

0000ce14 <_Z7th_postv>:
    ce14:	4770      	bx	lr

0000ce16 <_Z16th_command_readyPVc>:
  ee_serial_command_parser_callback((char *)p_command);
    ce16:	f7f5 be33 	b.w	2a80 <_Z33ee_serial_command_parser_callbackPc>

0000ce1a <_Z10th_strnlenPKcj>:
  return strnlen(str, maxlen);
    ce1a:	f003 b9b7 	b.w	1018c <strnlen>

0000ce1e <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
    ce1e:	f7ff bc19 	b.w	c654 <viprintf>

0000ce22 <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
    ce22:	b40f      	push	{r0, r1, r2, r3}
    ce24:	b507      	push	{r0, r1, r2, lr}
    ce26:	a904      	add	r1, sp, #16
    ce28:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
    ce2c:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
    ce2e:	f7ff fff6 	bl	ce1e <_Z10th_vprintfPKcSt9__va_list>
}
    ce32:	b003      	add	sp, #12
    ce34:	f85d eb04 	ldr.w	lr, [sp], #4
    ce38:	b004      	add	sp, #16
    ce3a:	4770      	bx	lr

0000ce3c <_Z24th_serialport_initializev>:
}
    ce3c:	4770      	bx	lr

0000ce3e <main>:
#endif /* CONFIG_SHELL */




int main(int argc, char *argv[]) {
    ce3e:	b508      	push	{r3, lr}
console_init();
    ce40:	f7f6 fdbe 	bl	39c0 <console_init>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ce44:	2001      	movs	r0, #1
    ce46:	f7f8 fc81 	bl	574c <nrfx_clock_start>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ce4a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ce4e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ce52:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    ce56:	03c9      	lsls	r1, r1, #15
    ce58:	d5f9      	bpl.n	ce4e <main+0x10>

NRFX_STATIC_INLINE bool nrfx_clock_hfclk_is_running(void)
{
    nrf_clock_hfclk_t clk_src;
    bool ret = nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src);
    return (ret && (clk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY));
    ce5a:	07d2      	lsls	r2, r2, #31
    ce5c:	d5f7      	bpl.n	ce4e <main+0x10>

nrfx_clock_hfclk_start();
while (!nrfx_clock_hfclk_is_running()) { }


ee_benchmark_initialize();
    ce5e:	f7f5 fc67 	bl	2730 <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
    ce62:	f7f6 fdad 	bl	39c0 <console_init>
  
  
    while (1) {
    int c;

    c = console_getchar();
    ce66:	f7f6 fd9b 	bl	39a0 <console_getchar>
    if (c < 0) {
    ce6a:	2800      	cmp	r0, #0
    ce6c:	dbfb      	blt.n	ce66 <main+0x28>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
    ce6e:	b2c0      	uxtb	r0, r0
    ce70:	f7f5 fc42 	bl	26f8 <_Z18ee_serial_callbackc>
    ce74:	e7f7      	b.n	ce66 <main+0x28>

0000ce76 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    ce76:	4603      	mov	r3, r0
    ce78:	b158      	cbz	r0, ce92 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ce7a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ce7c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    ce80:	2a01      	cmp	r2, #1
    ce82:	d003      	beq.n	ce8c <sys_notify_validate+0x16>
    ce84:	2a03      	cmp	r2, #3
    ce86:	d104      	bne.n	ce92 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    ce88:	6802      	ldr	r2, [r0, #0]
    ce8a:	b112      	cbz	r2, ce92 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    ce8c:	2000      	movs	r0, #0
    ce8e:	6098      	str	r0, [r3, #8]
    ce90:	4770      	bx	lr
		return -EINVAL;
    ce92:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    ce96:	4770      	bx	lr

0000ce98 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ce98:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    ce9a:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    ce9c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    cea0:	2a03      	cmp	r2, #3
    cea2:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    cea6:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    cea8:	bf14      	ite	ne
    ceaa:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    ceac:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    ceae:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    ceb0:	4770      	bx	lr

0000ceb2 <arch_printk_char_out>:
}
    ceb2:	2000      	movs	r0, #0
    ceb4:	4770      	bx	lr

0000ceb6 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    ceb6:	b40f      	push	{r0, r1, r2, r3}
    ceb8:	b507      	push	{r0, r1, r2, lr}
    ceba:	a904      	add	r1, sp, #16
    cebc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    cec0:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    cec2:	f7f5 ffdd 	bl	2e80 <vprintk>
	}
	va_end(ap);
}
    cec6:	b003      	add	sp, #12
    cec8:	f85d eb04 	ldr.w	lr, [sp], #4
    cecc:	b004      	add	sp, #16
    cece:	4770      	bx	lr

0000ced0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ced0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    ced2:	f013 0307 	ands.w	r3, r3, #7
    ced6:	d105      	bne.n	cee4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    ced8:	6803      	ldr	r3, [r0, #0]
    ceda:	2b00      	cmp	r3, #0
		evt = EVT_START;
    cedc:	bf0c      	ite	eq
    cede:	2000      	moveq	r0, #0
    cee0:	2003      	movne	r0, #3
    cee2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    cee4:	2b02      	cmp	r3, #2
    cee6:	d105      	bne.n	cef4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    cee8:	8bc3      	ldrh	r3, [r0, #30]
    ceea:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    ceec:	bf14      	ite	ne
    ceee:	2000      	movne	r0, #0
    cef0:	2004      	moveq	r0, #4
    cef2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    cef4:	2b01      	cmp	r3, #1
    cef6:	d105      	bne.n	cf04 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    cef8:	6803      	ldr	r3, [r0, #0]
    cefa:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    cefc:	bf0c      	ite	eq
    cefe:	2000      	moveq	r0, #0
    cf00:	2005      	movne	r0, #5
    cf02:	4770      	bx	lr
	int evt = EVT_NOP;
    cf04:	2000      	movs	r0, #0
}
    cf06:	4770      	bx	lr

0000cf08 <notify_one>:
{
    cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf0c:	460d      	mov	r5, r1
    cf0e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cf10:	4619      	mov	r1, r3
    cf12:	1d28      	adds	r0, r5, #4
{
    cf14:	4690      	mov	r8, r2
    cf16:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cf18:	f7ff ffbe 	bl	ce98 <sys_notify_finalize>
	if (cb) {
    cf1c:	4604      	mov	r4, r0
    cf1e:	b138      	cbz	r0, cf30 <notify_one+0x28>
		cb(mgr, cli, state, res);
    cf20:	4633      	mov	r3, r6
    cf22:	4642      	mov	r2, r8
    cf24:	4629      	mov	r1, r5
    cf26:	4638      	mov	r0, r7
    cf28:	46a4      	mov	ip, r4
}
    cf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    cf2e:	4760      	bx	ip
}
    cf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cf34 <transition_complete>:
{
    cf34:	b410      	push	{r4}
	__asm__ volatile(
    cf36:	f04f 0420 	mov.w	r4, #32
    cf3a:	f3ef 8211 	mrs	r2, BASEPRI
    cf3e:	f384 8812 	msr	BASEPRI_MAX, r4
    cf42:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    cf46:	6181      	str	r1, [r0, #24]
}
    cf48:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    cf4a:	2101      	movs	r1, #1
    cf4c:	f7f5 bfa6 	b.w	2e9c <process_event>

0000cf50 <validate_args>:
{
    cf50:	b510      	push	{r4, lr}
    cf52:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    cf54:	b140      	cbz	r0, cf68 <validate_args+0x18>
    cf56:	b139      	cbz	r1, cf68 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    cf58:	1d08      	adds	r0, r1, #4
    cf5a:	f7ff ff8c 	bl	ce76 <sys_notify_validate>
	if ((rv == 0)
    cf5e:	b928      	cbnz	r0, cf6c <validate_args+0x1c>
	    && ((cli->notify.flags
    cf60:	68a3      	ldr	r3, [r4, #8]
    cf62:	f033 0303 	bics.w	r3, r3, #3
    cf66:	d001      	beq.n	cf6c <validate_args+0x1c>
		rv = -EINVAL;
    cf68:	f06f 0015 	mvn.w	r0, #21
}
    cf6c:	bd10      	pop	{r4, pc}

0000cf6e <onoff_manager_init>:
{
    cf6e:	b538      	push	{r3, r4, r5, lr}
    cf70:	460c      	mov	r4, r1
	if ((mgr == NULL)
    cf72:	4605      	mov	r5, r0
    cf74:	b158      	cbz	r0, cf8e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    cf76:	b151      	cbz	r1, cf8e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    cf78:	680b      	ldr	r3, [r1, #0]
    cf7a:	b143      	cbz	r3, cf8e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    cf7c:	684b      	ldr	r3, [r1, #4]
    cf7e:	b133      	cbz	r3, cf8e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    cf80:	2220      	movs	r2, #32
    cf82:	2100      	movs	r1, #0
    cf84:	f002 ff89 	bl	fe9a <memset>
	return 0;
    cf88:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    cf8a:	612c      	str	r4, [r5, #16]
}
    cf8c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    cf8e:	f06f 0015 	mvn.w	r0, #21
    cf92:	e7fb      	b.n	cf8c <onoff_manager_init+0x1e>

0000cf94 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    cf94:	b570      	push	{r4, r5, r6, lr}
    cf96:	4604      	mov	r4, r0
    cf98:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    cf9a:	f7ff ffd9 	bl	cf50 <validate_args>

	if (rv < 0) {
    cf9e:	1e05      	subs	r5, r0, #0
    cfa0:	db31      	blt.n	d006 <onoff_request+0x72>
    cfa2:	f04f 0320 	mov.w	r3, #32
    cfa6:	f3ef 8111 	mrs	r1, BASEPRI
    cfaa:	f383 8812 	msr	BASEPRI_MAX, r3
    cfae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    cfb2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    cfb6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cfb8:	8ba0      	ldrh	r0, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    cfba:	42ab      	cmp	r3, r5
    cfbc:	f000 0207 	and.w	r2, r0, #7
    cfc0:	d02e      	beq.n	d020 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    cfc2:	2a02      	cmp	r2, #2
    cfc4:	d10e      	bne.n	cfe4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    cfc6:	3301      	adds	r3, #1
    cfc8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    cfca:	4615      	mov	r5, r2
		notify = true;
    cfcc:	2301      	movs	r3, #1
	__asm__ volatile(
    cfce:	f381 8811 	msr	BASEPRI, r1
    cfd2:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    cfd6:	b1b3      	cbz	r3, d006 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    cfd8:	2300      	movs	r3, #0
    cfda:	4631      	mov	r1, r6
    cfdc:	4620      	mov	r0, r4
    cfde:	f7ff ff93 	bl	cf08 <notify_one>
    cfe2:	e010      	b.n	d006 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    cfe4:	0783      	lsls	r3, r0, #30
    cfe6:	d001      	beq.n	cfec <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    cfe8:	2a06      	cmp	r2, #6
    cfea:	d10e      	bne.n	d00a <onoff_request+0x76>
	parent->next = child;
    cfec:	2300      	movs	r3, #0
    cfee:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    cff0:	6863      	ldr	r3, [r4, #4]
    cff2:	b993      	cbnz	r3, d01a <onoff_request+0x86>
	list->head = node;
    cff4:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    cff8:	4615      	mov	r5, r2
    cffa:	b962      	cbnz	r2, d016 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    cffc:	460a      	mov	r2, r1
    cffe:	4620      	mov	r0, r4
    d000:	2102      	movs	r1, #2
    d002:	f7f5 ff4b 	bl	2e9c <process_event>
		}
	}

	return rv;
}
    d006:	4628      	mov	r0, r5
    d008:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    d00a:	2a05      	cmp	r2, #5
    d00c:	bf0c      	ite	eq
    d00e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    d012:	f06f 0504 	mvnne.w	r5, #4
    d016:	2300      	movs	r3, #0
    d018:	e7d9      	b.n	cfce <onoff_request+0x3a>
	parent->next = child;
    d01a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    d01c:	6066      	str	r6, [r4, #4]
}
    d01e:	e7eb      	b.n	cff8 <onoff_request+0x64>
		rv = -EAGAIN;
    d020:	f06f 050a 	mvn.w	r5, #10
    d024:	e7f7      	b.n	d016 <onoff_request+0x82>

0000d026 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    d026:	4604      	mov	r4, r0
    d028:	b508      	push	{r3, lr}
    d02a:	4608      	mov	r0, r1
    d02c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    d02e:	461a      	mov	r2, r3
    d030:	47a0      	blx	r4
	return z_impl_z_current_get();
    d032:	f7fd ff57 	bl	aee4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    d036:	f7f7 f913 	bl	4260 <z_impl_k_thread_abort>

0000d03a <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    d03a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    d03c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    d040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    d044:	bf2c      	ite	cs
    d046:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    d04a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    d04e:	4770      	bx	lr

0000d050 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    d050:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    d054:	6880      	ldr	r0, [r0, #8]
    d056:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    d05a:	bf2c      	ite	cs
    d05c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    d060:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    d064:	4770      	bx	lr

0000d066 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    d066:	2201      	movs	r2, #1
{
    d068:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    d06a:	f7ff ffe6 	bl	d03a <chunk_field>
}
    d06e:	0840      	lsrs	r0, r0, #1
    d070:	bd08      	pop	{r3, pc}

0000d072 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    d072:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    d074:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    d078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    d07c:	d308      	bcc.n	d090 <set_chunk_used+0x1e>
		if (used) {
    d07e:	684b      	ldr	r3, [r1, #4]
    d080:	b11a      	cbz	r2, d08a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    d082:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    d086:	604b      	str	r3, [r1, #4]
    d088:	4770      	bx	lr
    d08a:	f023 0301 	bic.w	r3, r3, #1
    d08e:	e7fa      	b.n	d086 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    d090:	884b      	ldrh	r3, [r1, #2]
    d092:	b11a      	cbz	r2, d09c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    d094:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    d098:	804b      	strh	r3, [r1, #2]
		}
	}
}
    d09a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    d09c:	f023 0301 	bic.w	r3, r3, #1
    d0a0:	e7fa      	b.n	d098 <set_chunk_used+0x26>

0000d0a2 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    d0a2:	0053      	lsls	r3, r2, #1
    d0a4:	2201      	movs	r2, #1
    d0a6:	f7ff bfd3 	b.w	d050 <chunk_set>

0000d0aa <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    d0aa:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    d0ac:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    d0ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d0b2:	bf2c      	ite	cs
    d0b4:	2002      	movcs	r0, #2
    d0b6:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    d0b8:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    d0ba:	fab0 f080 	clz	r0, r0
}
    d0be:	f1c0 001f 	rsb	r0, r0, #31
    d0c2:	4770      	bx	lr

0000d0c4 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    d0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0c8:	4604      	mov	r4, r0
    d0ca:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    d0cc:	f7ff ffcb 	bl	d066 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    d0d0:	68a3      	ldr	r3, [r4, #8]
    d0d2:	4601      	mov	r1, r0
    d0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    d0d8:	d301      	bcc.n	d0de <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    d0da:	2801      	cmp	r0, #1
    d0dc:	d035      	beq.n	d14a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    d0de:	4620      	mov	r0, r4
    d0e0:	f7ff ffe3 	bl	d0aa <bucket_idx>
	if (b->next == 0U) {
    d0e4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    d0e8:	6916      	ldr	r6, [r2, #16]
    d0ea:	b99e      	cbnz	r6, d114 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    d0ec:	2301      	movs	r3, #1
    d0ee:	fa03 f000 	lsl.w	r0, r3, r0
    d0f2:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    d0f4:	4629      	mov	r1, r5
    d0f6:	4303      	orrs	r3, r0
    d0f8:	60e3      	str	r3, [r4, #12]
    d0fa:	4620      	mov	r0, r4
		b->next = c;
    d0fc:	6115      	str	r5, [r2, #16]
    d0fe:	462b      	mov	r3, r5
    d100:	2202      	movs	r2, #2
    d102:	f7ff ffa5 	bl	d050 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    d106:	2203      	movs	r2, #3
    d108:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    d10a:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    d10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d110:	f7ff bf9e 	b.w	d050 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    d114:	2202      	movs	r2, #2
    d116:	4631      	mov	r1, r6
    d118:	4620      	mov	r0, r4
    d11a:	f7ff ff8e 	bl	d03a <chunk_field>
    d11e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    d120:	4603      	mov	r3, r0
    d122:	2202      	movs	r2, #2
    d124:	4629      	mov	r1, r5
    d126:	4620      	mov	r0, r4
    d128:	f7ff ff92 	bl	d050 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    d12c:	4633      	mov	r3, r6
    d12e:	2203      	movs	r2, #3
    d130:	4629      	mov	r1, r5
    d132:	4620      	mov	r0, r4
    d134:	f7ff ff8c 	bl	d050 <chunk_set>
    d138:	2203      	movs	r2, #3
    d13a:	4639      	mov	r1, r7
    d13c:	462b      	mov	r3, r5
    d13e:	4620      	mov	r0, r4
    d140:	f7ff ff86 	bl	d050 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    d144:	2202      	movs	r2, #2
    d146:	4631      	mov	r1, r6
    d148:	e7df      	b.n	d10a <free_list_add+0x46>
    d14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d14e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    d14e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    d152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d154:	bf2c      	ite	cs
    d156:	2508      	movcs	r5, #8
    d158:	2504      	movcc	r5, #4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    d15a:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    d15c:	1b55      	subs	r5, r2, r5
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    d15e:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    d160:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    d162:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    d166:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    d16a:	1b2d      	subs	r5, r5, r4
    d16c:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
    d16e:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    d170:	4629      	mov	r1, r5
    d172:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
    d174:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    d176:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    d178:	f7ff ff97 	bl	d0aa <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    d17c:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    d17e:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    d180:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    d182:	361b      	adds	r6, #27
    d184:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    d186:	f104 0210 	add.w	r2, r4, #16
    d18a:	428b      	cmp	r3, r1
    d18c:	db2f      	blt.n	d1ee <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    d18e:	4632      	mov	r2, r6
    d190:	4620      	mov	r0, r4
    d192:	2100      	movs	r1, #0
    d194:	f7ff ff85 	bl	d0a2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    d198:	2300      	movs	r3, #0
    d19a:	4620      	mov	r0, r4
    d19c:	461a      	mov	r2, r3
    d19e:	4619      	mov	r1, r3
    d1a0:	f7ff ff56 	bl	d050 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    d1a4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    d1a6:	4620      	mov	r0, r4
    d1a8:	2201      	movs	r2, #1
    d1aa:	2100      	movs	r1, #0
    d1ac:	f7ff ff61 	bl	d072 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    d1b0:	463a      	mov	r2, r7
    d1b2:	4631      	mov	r1, r6
    d1b4:	f7ff ff75 	bl	d0a2 <set_chunk_size>
    d1b8:	4633      	mov	r3, r6
    d1ba:	4631      	mov	r1, r6
    d1bc:	4620      	mov	r0, r4
    d1be:	2200      	movs	r2, #0
    d1c0:	f7ff ff46 	bl	d050 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    d1c4:	4629      	mov	r1, r5
    d1c6:	4620      	mov	r0, r4
    d1c8:	2200      	movs	r2, #0
    d1ca:	f7ff ff6a 	bl	d0a2 <set_chunk_size>
    d1ce:	463b      	mov	r3, r7
    d1d0:	4629      	mov	r1, r5
    d1d2:	4620      	mov	r0, r4
    d1d4:	2200      	movs	r2, #0
    d1d6:	f7ff ff3b 	bl	d050 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    d1da:	4629      	mov	r1, r5
    d1dc:	4620      	mov	r0, r4
    d1de:	2201      	movs	r2, #1
    d1e0:	f7ff ff47 	bl	d072 <set_chunk_used>

	free_list_add(h, chunk0_size);
    d1e4:	4631      	mov	r1, r6
}
    d1e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    d1ea:	f7ff bf6b 	b.w	d0c4 <free_list_add>
		h->buckets[i].next = 0;
    d1ee:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    d1f2:	3301      	adds	r3, #1
    d1f4:	e7c9      	b.n	d18a <sys_heap_init+0x3c>

0000d1f6 <outs>:
{
    d1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1fa:	4607      	mov	r7, r0
    d1fc:	4688      	mov	r8, r1
    d1fe:	4615      	mov	r5, r2
    d200:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    d202:	4614      	mov	r4, r2
    d204:	42b4      	cmp	r4, r6
    d206:	eba4 0005 	sub.w	r0, r4, r5
    d20a:	d302      	bcc.n	d212 <outs+0x1c>
    d20c:	b93e      	cbnz	r6, d21e <outs+0x28>
    d20e:	7823      	ldrb	r3, [r4, #0]
    d210:	b12b      	cbz	r3, d21e <outs+0x28>
		int rc = out((int)*sp++, ctx);
    d212:	4641      	mov	r1, r8
    d214:	f814 0b01 	ldrb.w	r0, [r4], #1
    d218:	47b8      	blx	r7
		if (rc < 0) {
    d21a:	2800      	cmp	r0, #0
    d21c:	daf2      	bge.n	d204 <outs+0xe>
}
    d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d222 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    d222:	4770      	bx	lr

0000d224 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    d224:	b084      	sub	sp, #16
    d226:	ab04      	add	r3, sp, #16
    d228:	e903 0007 	stmdb	r3, {r0, r1, r2}
    d22c:	2300      	movs	r3, #0
    d22e:	f383 8811 	msr	BASEPRI, r3
    d232:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    d236:	b004      	add	sp, #16
    d238:	4770      	bx	lr

0000d23a <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    d23a:	6883      	ldr	r3, [r0, #8]
    d23c:	6a1b      	ldr	r3, [r3, #32]
    d23e:	b103      	cbz	r3, d242 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    d240:	4718      	bx	r3
}
    d242:	4770      	bx	lr

0000d244 <tty_putchar>:
{
    d244:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    d248:	4604      	mov	r4, r0
    d24a:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
    d24c:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
    d250:	f002 fccc 	bl	fbec <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
    d254:	bb98      	cbnz	r0, d2be <tty_putchar+0x7a>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    d256:	6c21      	ldr	r1, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
    d258:	1c4b      	adds	r3, r1, #1
    d25a:	d033      	beq.n	d2c4 <tty_putchar+0x80>
    d25c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d260:	f240 38e7 	movw	r8, #999	; 0x3e7
    d264:	f04f 0900 	mov.w	r9, #0
					 SYS_TIMEOUT_MS(tty->tx_timeout));
    d268:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    d26c:	fbc0 8901 	smlal	r8, r9, r0, r1
    d270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d274:	2300      	movs	r3, #0
    d276:	4640      	mov	r0, r8
    d278:	4649      	mov	r1, r9
    d27a:	f7f3 ff35 	bl	10e8 <__aeabi_uldivmod>
    d27e:	4602      	mov	r2, r0
    d280:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    d282:	4630      	mov	r0, r6
    d284:	f7fd fb00 	bl	a888 <z_impl_k_sem_take>
	if (res < 0) {
    d288:	2800      	cmp	r0, #0
    d28a:	db16      	blt.n	d2ba <tty_putchar+0x76>
	__asm__ volatile(
    d28c:	f04f 0320 	mov.w	r3, #32
    d290:	f3ef 8211 	mrs	r2, BASEPRI
    d294:	f383 8812 	msr	BASEPRI_MAX, r3
    d298:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
    d29c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	if (tx_next >= tty->tx_ringbuf_sz) {
    d29e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	tx_next = tty->tx_put + 1;
    d2a0:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
    d2a2:	4298      	cmp	r0, r3
    d2a4:	bf98      	it	ls
    d2a6:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
    d2a8:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    d2aa:	4298      	cmp	r0, r3
    d2ac:	d10d      	bne.n	d2ca <tty_putchar+0x86>
	__asm__ volatile(
    d2ae:	f382 8811 	msr	BASEPRI, r2
    d2b2:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
    d2b6:	f06f 001b 	mvn.w	r0, #27
}
    d2ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	res = k_sem_take(&tty->tx_sem,
    d2be:	2200      	movs	r2, #0
    d2c0:	4613      	mov	r3, r2
    d2c2:	e7de      	b.n	d282 <tty_putchar+0x3e>
    d2c4:	f04f 32ff 	mov.w	r2, #4294967295
    d2c8:	e7fa      	b.n	d2c0 <tty_putchar+0x7c>
	tty->tx_ringbuf[tty->tx_put] = c;
    d2ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    d2cc:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
    d2ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
    d2d0:	f382 8811 	msr	BASEPRI, r2
    d2d4:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
    d2d8:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable != NULL) {
    d2da:	6883      	ldr	r3, [r0, #8]
    d2dc:	69db      	ldr	r3, [r3, #28]
    d2de:	b113      	cbz	r3, d2e6 <tty_putchar+0xa2>
		api->irq_tx_enable(dev);
    d2e0:	4798      	blx	r3
	return 0;
    d2e2:	2000      	movs	r0, #0
    d2e4:	e7e9      	b.n	d2ba <tty_putchar+0x76>
    d2e6:	4618      	mov	r0, r3
    d2e8:	e7e7      	b.n	d2ba <tty_putchar+0x76>

0000d2ea <tty_uart_isr>:
{
    d2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d2ec:	4605      	mov	r5, r0
    d2ee:	460c      	mov	r4, r1
	if (api->irq_update == NULL) {
    d2f0:	6883      	ldr	r3, [r0, #8]
    d2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d2f4:	b103      	cbz	r3, d2f8 <tty_uart_isr+0xe>
	return api->irq_update(dev);
    d2f6:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    d2f8:	68ab      	ldr	r3, [r5, #8]
    d2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d2fc:	b98b      	cbnz	r3, d322 <tty_uart_isr+0x38>
	k_sem_give(&tty->rx_sem);
    d2fe:	1d26      	adds	r6, r4, #4
	if (api->fifo_read == NULL) {
    d300:	68ab      	ldr	r3, [r5, #8]
    d302:	699b      	ldr	r3, [r3, #24]
    d304:	b9e3      	cbnz	r3, d340 <tty_uart_isr+0x56>
	int rx_next = tty->rx_put + 1;
    d306:	8be2      	ldrh	r2, [r4, #30]
	if (rx_next >= tty->rx_ringbuf_sz) {
    d308:	69a1      	ldr	r1, [r4, #24]
	int rx_next = tty->rx_put + 1;
    d30a:	1c53      	adds	r3, r2, #1
		rx_next = 0;
    d30c:	4299      	cmp	r1, r3
    d30e:	bf98      	it	ls
    d310:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
    d312:	8ba1      	ldrh	r1, [r4, #28]
    d314:	4299      	cmp	r1, r3
    d316:	d11b      	bne.n	d350 <tty_uart_isr+0x66>
		tty_putchar(tty, '~');
    d318:	217e      	movs	r1, #126	; 0x7e
    d31a:	4620      	mov	r0, r4
    d31c:	f7ff ff92 	bl	d244 <tty_putchar>
		return 1;
    d320:	e7ee      	b.n	d300 <tty_uart_isr+0x16>
	return api->irq_rx_ready(dev);
    d322:	4628      	mov	r0, r5
    d324:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    d326:	2800      	cmp	r0, #0
    d328:	d1e9      	bne.n	d2fe <tty_uart_isr+0x14>
	if (api->irq_tx_ready == NULL) {
    d32a:	68ab      	ldr	r3, [r5, #8]
    d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d32e:	b9c3      	cbnz	r3, d362 <tty_uart_isr+0x78>
		if (tty->tx_get == tty->tx_put) {
    d330:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    d332:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d334:	429a      	cmp	r2, r3
    d336:	d11a      	bne.n	d36e <tty_uart_isr+0x84>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
    d338:	4628      	mov	r0, r5
    d33a:	f7ff ff7e 	bl	d23a <z_impl_uart_irq_tx_disable>
}
    d33e:	e014      	b.n	d36a <tty_uart_isr+0x80>
	return api->fifo_read(dev, rx_data, size);
    d340:	2201      	movs	r2, #1
    d342:	4628      	mov	r0, r5
    d344:	f10d 0107 	add.w	r1, sp, #7
    d348:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
    d34a:	2800      	cmp	r0, #0
    d34c:	d1db      	bne.n	d306 <tty_uart_isr+0x1c>
    d34e:	e7ec      	b.n	d32a <tty_uart_isr+0x40>
			tty_irq_input_hook(tty, c);
    d350:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
    d354:	6961      	ldr	r1, [r4, #20]
    d356:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
    d358:	83e3      	strh	r3, [r4, #30]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d35a:	4630      	mov	r0, r6
    d35c:	f7fd fa74 	bl	a848 <z_impl_k_sem_give>
}
    d360:	e7ce      	b.n	d300 <tty_uart_isr+0x16>
	return api->irq_tx_ready(dev);
    d362:	4628      	mov	r0, r5
    d364:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    d366:	2800      	cmp	r0, #0
    d368:	d1e2      	bne.n	d330 <tty_uart_isr+0x46>
}
    d36a:	b002      	add	sp, #8
    d36c:	bd70      	pop	{r4, r5, r6, pc}
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
    d36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d370:	1c5a      	adds	r2, r3, #1
    d372:	4419      	add	r1, r3
	if (api->fifo_fill == NULL) {
    d374:	68ab      	ldr	r3, [r5, #8]
    d376:	87a2      	strh	r2, [r4, #60]	; 0x3c
    d378:	695b      	ldr	r3, [r3, #20]
    d37a:	b113      	cbz	r3, d382 <tty_uart_isr+0x98>
	return api->fifo_fill(dev, tx_data, size);
    d37c:	2201      	movs	r2, #1
    d37e:	4628      	mov	r0, r5
    d380:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
    d382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d384:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    d386:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
    d388:	bf24      	itt	cs
    d38a:	2300      	movcs	r3, #0
    d38c:	87a3      	strhcs	r3, [r4, #60]	; 0x3c
	z_impl_k_sem_give(sem);
    d38e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d392:	f7fd fa59 	bl	a848 <z_impl_k_sem_give>
}
    d396:	e7e8      	b.n	d36a <tty_uart_isr+0x80>

0000d398 <tty_read>:
{
    d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (tty->rx_ringbuf_sz == 0U) {
    d39c:	6984      	ldr	r4, [r0, #24]
{
    d39e:	4605      	mov	r5, r0
    d3a0:	460e      	mov	r6, r1
    d3a2:	4617      	mov	r7, r2
    d3a4:	b085      	sub	sp, #20
	if (tty->rx_ringbuf_sz == 0U) {
    d3a6:	2c00      	cmp	r4, #0
    d3a8:	d175      	bne.n	d496 <tty_read+0xfe>
	uint32_t timeout = tty->rx_timeout;
    d3aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
	while (size) {
    d3ae:	b18f      	cbz	r7, d3d4 <tty_read+0x3c>
		res = uart_poll_in(tty->uart_dev, &c);
    d3b0:	6828      	ldr	r0, [r5, #0]
	if (api->poll_in == NULL) {
    d3b2:	6883      	ldr	r3, [r0, #8]
    d3b4:	681b      	ldr	r3, [r3, #0]
    d3b6:	b18b      	cbz	r3, d3dc <tty_read+0x44>
	return api->poll_in(dev, p_char);
    d3b8:	f10d 010f 	add.w	r1, sp, #15
    d3bc:	4798      	blx	r3
		if (res <= -2) {
    d3be:	f1b0 3fff 	cmp.w	r0, #4294967295
    d3c2:	4680      	mov	r8, r0
    d3c4:	da0d      	bge.n	d3e2 <tty_read+0x4a>
			if (out_size == 0) {
    d3c6:	b92c      	cbnz	r4, d3d4 <tty_read+0x3c>
				errno = res;
    d3c8:	f000 f927 	bl	d61a <__errno>
				return -1;
    d3cc:	f04f 34ff 	mov.w	r4, #4294967295
				errno = res;
    d3d0:	f8c0 8000 	str.w	r8, [r0]
}
    d3d4:	4620      	mov	r0, r4
    d3d6:	b005      	add	sp, #20
    d3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOSYS;
    d3dc:	f06f 0857 	mvn.w	r8, #87	; 0x57
    d3e0:	e7f1      	b.n	d3c6 <tty_read+0x2e>
		if (res == 0) {
    d3e2:	b958      	cbnz	r0, d3fc <tty_read+0x64>
			*p++ = c;
    d3e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
		if (size == 0 ||
    d3e8:	3f01      	subs	r7, #1
			*p++ = c;
    d3ea:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
    d3ee:	f104 0401 	add.w	r4, r4, #1
		if (size == 0 ||
    d3f2:	d0ef      	beq.n	d3d4 <tty_read+0x3c>
    d3f4:	f1b9 3fff 	cmp.w	r9, #4294967295
    d3f8:	d103      	bne.n	d402 <tty_read+0x6a>
    d3fa:	e7d8      	b.n	d3ae <tty_read+0x16>
    d3fc:	f1b9 3fff 	cmp.w	r9, #4294967295
    d400:	d005      	beq.n	d40e <tty_read+0x76>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
    d402:	f109 33ff 	add.w	r3, r9, #4294967295
    d406:	f1b9 0f00 	cmp.w	r9, #0
    d40a:	d0e3      	beq.n	d3d4 <tty_read+0x3c>
    d40c:	4699      	mov	r9, r3
		if (res == -1) {
    d40e:	f1b8 3fff 	cmp.w	r8, #4294967295
    d412:	d1cc      	bne.n	d3ae <tty_read+0x16>
	return z_impl_k_sleep(timeout);
    d414:	2100      	movs	r1, #0
    d416:	2021      	movs	r0, #33	; 0x21
    d418:	f7fd fd4a 	bl	aeb0 <z_impl_k_sleep>
    d41c:	e7c7      	b.n	d3ae <tty_read+0x16>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    d41e:	6a29      	ldr	r1, [r5, #32]
    d420:	1c4b      	adds	r3, r1, #1
    d422:	d034      	beq.n	d48e <tty_read+0xf6>
    d424:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d428:	46c3      	mov	fp, r8
    d42a:	46cc      	mov	ip, r9
    d42c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    d430:	fbc0 bc01 	smlal	fp, ip, r0, r1
    d434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d438:	2300      	movs	r3, #0
    d43a:	4658      	mov	r0, fp
    d43c:	4661      	mov	r1, ip
    d43e:	f7f3 fe53 	bl	10e8 <__aeabi_uldivmod>
    d442:	4602      	mov	r2, r0
    d444:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    d446:	9801      	ldr	r0, [sp, #4]
    d448:	f7fd fa1e 	bl	a888 <z_impl_k_sem_take>
	if (res < 0) {
    d44c:	1e04      	subs	r4, r0, #0
    d44e:	db2b      	blt.n	d4a8 <tty_read+0x110>
	__asm__ volatile(
    d450:	f04f 0320 	mov.w	r3, #32
    d454:	f3ef 8011 	mrs	r0, BASEPRI
    d458:	f383 8812 	msr	BASEPRI_MAX, r3
    d45c:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
    d460:	8baa      	ldrh	r2, [r5, #28]
    d462:	6969      	ldr	r1, [r5, #20]
    d464:	1c53      	adds	r3, r2, #1
    d466:	b29b      	uxth	r3, r3
    d468:	83ab      	strh	r3, [r5, #28]
    d46a:	5c8a      	ldrb	r2, [r1, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
    d46c:	69a9      	ldr	r1, [r5, #24]
    d46e:	428b      	cmp	r3, r1
		tty->rx_get = 0U;
    d470:	bf24      	itt	cs
    d472:	2300      	movcs	r3, #0
    d474:	83ab      	strhcs	r3, [r5, #28]
	__asm__ volatile(
    d476:	f380 8811 	msr	BASEPRI, r0
    d47a:	f3bf 8f6f 	isb	sy
		*p++ = (uint8_t)res;
    d47e:	f806 200a 	strb.w	r2, [r6, sl]
		out_size++;
    d482:	f10a 0a01 	add.w	sl, sl, #1
	while (size--) {
    d486:	45ba      	cmp	sl, r7
    d488:	d1c9      	bne.n	d41e <tty_read+0x86>
	return out_size;
    d48a:	4654      	mov	r4, sl
    d48c:	e7a2      	b.n	d3d4 <tty_read+0x3c>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    d48e:	f04f 32ff 	mov.w	r2, #4294967295
    d492:	4613      	mov	r3, r2
    d494:	e7d7      	b.n	d446 <tty_read+0xae>
    d496:	1d03      	adds	r3, r0, #4
	size_t out_size = 0;
    d498:	f04f 0a00 	mov.w	sl, #0
    d49c:	f240 38e7 	movw	r8, #999	; 0x3e7
    d4a0:	f04f 0900 	mov.w	r9, #0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
    d4a4:	9301      	str	r3, [sp, #4]
    d4a6:	e7ee      	b.n	d486 <tty_read+0xee>
			if (out_size == 0) {
    d4a8:	f1ba 0f00 	cmp.w	sl, #0
    d4ac:	d1ed      	bne.n	d48a <tty_read+0xf2>
				errno = -res;
    d4ae:	f000 f8b4 	bl	d61a <__errno>
    d4b2:	4263      	negs	r3, r4
    d4b4:	6003      	str	r3, [r0, #0]
				return res;
    d4b6:	e78d      	b.n	d3d4 <tty_read+0x3c>

0000d4b8 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    d4b8:	b570      	push	{r4, r5, r6, lr}
    d4ba:	4604      	mov	r4, r0
    d4bc:	460e      	mov	r6, r1
    d4be:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
    d4c0:	6800      	ldr	r0, [r0, #0]
	if (api->irq_rx_disable != NULL) {
    d4c2:	6883      	ldr	r3, [r0, #8]
    d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d4c6:	b103      	cbz	r3, d4ca <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
    d4c8:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
    d4ca:	e9c4 6505 	strd	r6, r5, [r4, #20]

	if (size > 0) {
    d4ce:	b155      	cbz	r5, d4e6 <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
    d4d0:	f04f 32ff 	mov.w	r2, #4294967295
    d4d4:	2100      	movs	r1, #0
    d4d6:	1d20      	adds	r0, r4, #4
    d4d8:	f002 fb9c 	bl	fc14 <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
    d4dc:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
    d4de:	6883      	ldr	r3, [r0, #8]
    d4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d4e2:	b103      	cbz	r3, d4e6 <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
    d4e4:	4798      	blx	r3
	}

	return 0;
}
    d4e6:	2000      	movs	r0, #0
    d4e8:	bd70      	pop	{r4, r5, r6, pc}

0000d4ea <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
    d4ea:	b570      	push	{r4, r5, r6, lr}
    d4ec:	4604      	mov	r4, r0
    d4ee:	460e      	mov	r6, r1
    d4f0:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
    d4f2:	6800      	ldr	r0, [r0, #0]
	z_impl_uart_irq_tx_disable(dev);
    d4f4:	f7ff fea1 	bl	d23a <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
    d4f8:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
    d4fc:	f04f 32ff 	mov.w	r2, #4294967295
    d500:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d504:	18a9      	adds	r1, r5, r2
    d506:	f002 fb85 	bl	fc14 <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
    d50a:	2000      	movs	r0, #0
    d50c:	bd70      	pop	{r4, r5, r6, pc}

0000d50e <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    d50e:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
    d510:	f7f6 fa8e 	bl	3a30 <__do_global_ctors_aux>
	__do_init_array_aux();
}
    d514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
    d518:	f7f6 ba7c 	b.w	3a14 <__do_init_array_aux>

0000d51c <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
    d51c:	2000      	movs	r0, #0
    d51e:	4770      	bx	lr

0000d520 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    d520:	2200      	movs	r2, #0
    d522:	e9c0 2200 	strd	r2, r2, [r0]
    d526:	6082      	str	r2, [r0, #8]
}
    d528:	4770      	bx	lr

0000d52a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    d52a:	2000      	movs	r0, #0
{
    d52c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    d52e:	f7f6 f999 	bl	3864 <sys_reboot>

0000d532 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d532:	f002 bafb 	b.w	fb2c <z_fatal_error>

0000d536 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    d536:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    d538:	6800      	ldr	r0, [r0, #0]
    d53a:	f002 baf7 	b.w	fb2c <z_fatal_error>

0000d53e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    d53e:	2100      	movs	r1, #0
    d540:	2001      	movs	r0, #1
    d542:	f7ff bff6 	b.w	d532 <z_arm_fatal_error>

0000d546 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    d546:	b508      	push	{r3, lr}
	handler();
    d548:	f7f6 fc3e 	bl	3dc8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    d54c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    d550:	f7f6 bd00 	b.w	3f54 <z_arm_exc_exit>

0000d554 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d554:	6e43      	ldr	r3, [r0, #100]	; 0x64
    d556:	f383 880b 	msr	PSPLIM, r3
}
    d55a:	4770      	bx	lr

0000d55c <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
    d55c:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
    d55e:	4601      	mov	r1, r0
    d560:	4618      	mov	r0, r3
    d562:	f7ff bfdb 	b.w	d51c <__cxa_atexit>

0000d566 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    d566:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    d56a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    d56e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    d570:	bf08      	it	eq
    d572:	f06f 0015 	mvneq.w	r0, #21
    d576:	4770      	bx	lr

0000d578 <mpu_configure_region>:
{
    d578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    d57a:	890a      	ldrh	r2, [r1, #8]
    d57c:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
    d57e:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d580:	684d      	ldr	r5, [r1, #4]
    d582:	f002 021f 	and.w	r2, r2, #31
    d586:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    d58a:	9300      	str	r3, [sp, #0]
    d58c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d590:	f023 031f 	bic.w	r3, r3, #31
    d594:	1e6a      	subs	r2, r5, #1
    d596:	4413      	add	r3, r2
    d598:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d59c:	2807      	cmp	r0, #7
    d59e:	9303      	str	r3, [sp, #12]
    d5a0:	d804      	bhi.n	d5ac <mpu_configure_region+0x34>
	region_init(index, region_conf);
    d5a2:	4669      	mov	r1, sp
    d5a4:	f7f6 fe8a 	bl	42bc <region_init>
}
    d5a8:	b004      	add	sp, #16
    d5aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    d5ac:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    d5b0:	e7fa      	b.n	d5a8 <mpu_configure_region+0x30>

0000d5b2 <malloc_prepare>:
}
    d5b2:	2000      	movs	r0, #0
    d5b4:	4770      	bx	lr

0000d5b6 <_stdout_hook_default>:
}
    d5b6:	f04f 30ff 	mov.w	r0, #4294967295
    d5ba:	4770      	bx	lr

0000d5bc <_stdin_hook_default>:
}
    d5bc:	2000      	movs	r0, #0
    d5be:	4770      	bx	lr

0000d5c0 <_read>:
{
    d5c0:	4608      	mov	r0, r1
    d5c2:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
    d5c4:	f7f6 bfce 	b.w	4564 <z_impl_zephyr_read_stdin>

0000d5c8 <_write>:
{
    d5c8:	4608      	mov	r0, r1
    d5ca:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
    d5cc:	f7f6 bfde 	b.w	458c <z_impl_zephyr_write_stdout>

0000d5d0 <_close>:
    d5d0:	f04f 30ff 	mov.w	r0, #4294967295
    d5d4:	4770      	bx	lr

0000d5d6 <_lseek>:
}
    d5d6:	2000      	movs	r0, #0
    d5d8:	4770      	bx	lr

0000d5da <_isatty>:
}
    d5da:	2802      	cmp	r0, #2
    d5dc:	bfcc      	ite	gt
    d5de:	2000      	movgt	r0, #0
    d5e0:	2001      	movle	r0, #1
    d5e2:	4770      	bx	lr

0000d5e4 <_kill>:
}
    d5e4:	2000      	movs	r0, #0
    d5e6:	4770      	bx	lr

0000d5e8 <_getpid>:
}
    d5e8:	2000      	movs	r0, #0
    d5ea:	4770      	bx	lr

0000d5ec <_fstat>:
	st->st_mode = S_IFCHR;
    d5ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
    d5f0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    d5f2:	604b      	str	r3, [r1, #4]
}
    d5f4:	4770      	bx	lr

0000d5f6 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    d5f6:	b510      	push	{r4, lr}
    d5f8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    d5fa:	2014      	movs	r0, #20
    d5fc:	f7fe fa1c 	bl	ba38 <malloc>
    d600:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    d602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
    d606:	f002 bafe 	b.w	fc06 <z_impl_k_mutex_init>

0000d60a <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    d60a:	f04f 32ff 	mov.w	r2, #4294967295
    d60e:	f04f 33ff 	mov.w	r3, #4294967295
    d612:	f7fd b855 	b.w	a6c0 <z_impl_k_mutex_lock>

0000d616 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    d616:	f7fd b8d1 	b.w	a7bc <z_impl_k_mutex_unlock>

0000d61a <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    d61a:	f7fc be93 	b.w	a344 <z_impl_z_errno>

0000d61e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    d61e:	b2cb      	uxtb	r3, r1
    d620:	210c      	movs	r1, #12
    d622:	6902      	ldr	r2, [r0, #16]
    d624:	fb03 2101 	mla	r1, r3, r1, r2
    d628:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
}
    d62c:	f000 0007 	and.w	r0, r0, #7
    d630:	4770      	bx	lr

0000d632 <set_off_state>:
	__asm__ volatile(
    d632:	f04f 0320 	mov.w	r3, #32
    d636:	f3ef 8211 	mrs	r2, BASEPRI
    d63a:	f383 8812 	msr	BASEPRI_MAX, r3
    d63e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d642:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    d644:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    d648:	d001      	beq.n	d64e <set_off_state+0x1c>
    d64a:	428b      	cmp	r3, r1
    d64c:	d107      	bne.n	d65e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    d64e:	2301      	movs	r3, #1
    d650:	6003      	str	r3, [r0, #0]
	int err = 0;
    d652:	2000      	movs	r0, #0
	__asm__ volatile(
    d654:	f382 8811 	msr	BASEPRI, r2
    d658:	f3bf 8f6f 	isb	sy
}
    d65c:	4770      	bx	lr
		err = -EPERM;
    d65e:	f04f 30ff 	mov.w	r0, #4294967295
    d662:	e7f7      	b.n	d654 <set_off_state+0x22>

0000d664 <set_starting_state>:
{
    d664:	b510      	push	{r4, lr}
	__asm__ volatile(
    d666:	f04f 0320 	mov.w	r3, #32
    d66a:	f3ef 8211 	mrs	r2, BASEPRI
    d66e:	f383 8812 	msr	BASEPRI_MAX, r3
    d672:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d676:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d678:	f003 0407 	and.w	r4, r3, #7
    d67c:	2c01      	cmp	r4, #1
    d67e:	d106      	bne.n	d68e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d680:	6001      	str	r1, [r0, #0]
	int err = 0;
    d682:	2000      	movs	r0, #0
	__asm__ volatile(
    d684:	f382 8811 	msr	BASEPRI, r2
    d688:	f3bf 8f6f 	isb	sy
}
    d68c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    d68e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    d692:	428b      	cmp	r3, r1
		err = -EALREADY;
    d694:	bf14      	ite	ne
    d696:	f04f 30ff 	movne.w	r0, #4294967295
    d69a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    d69e:	e7f1      	b.n	d684 <set_starting_state+0x20>

0000d6a0 <set_on_state>:
	__asm__ volatile(
    d6a0:	f04f 0320 	mov.w	r3, #32
    d6a4:	f3ef 8211 	mrs	r2, BASEPRI
    d6a8:	f383 8812 	msr	BASEPRI_MAX, r3
    d6ac:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d6b0:	6803      	ldr	r3, [r0, #0]
    d6b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d6b6:	f043 0302 	orr.w	r3, r3, #2
    d6ba:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d6bc:	f382 8811 	msr	BASEPRI, r2
    d6c0:	f3bf 8f6f 	isb	sy
}
    d6c4:	4770      	bx	lr

0000d6c6 <onoff_started_callback>:
	return &data->mgr[type];
    d6c6:	6900      	ldr	r0, [r0, #16]
    d6c8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    d6ca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    d6ce:	2100      	movs	r1, #0
    d6d0:	4710      	bx	r2

0000d6d2 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    d6d2:	2003      	movs	r0, #3
    d6d4:	f7f8 b83a 	b.w	574c <nrfx_clock_start>

0000d6d8 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    d6d8:	2002      	movs	r0, #2
    d6da:	f7f8 b837 	b.w	574c <nrfx_clock_start>

0000d6de <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d6de:	2000      	movs	r0, #0
    d6e0:	f7f8 b834 	b.w	574c <nrfx_clock_start>

0000d6e4 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    d6e4:	2003      	movs	r0, #3
    d6e6:	f7f8 b885 	b.w	57f4 <nrfx_clock_stop>

0000d6ea <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    d6ea:	2002      	movs	r0, #2
    d6ec:	f7f8 b882 	b.w	57f4 <nrfx_clock_stop>

0000d6f0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d6f0:	2000      	movs	r0, #0
    d6f2:	f7f8 b87f 	b.w	57f4 <nrfx_clock_stop>

0000d6f6 <blocking_start_callback>:
{
    d6f6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d6f8:	f7fd b8a6 	b.w	a848 <z_impl_k_sem_give>

0000d6fc <api_stop>:
{
    d6fc:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    d6fe:	230c      	movs	r3, #12
    d700:	b2cc      	uxtb	r4, r1
    d702:	4363      	muls	r3, r4
{
    d704:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    d706:	6900      	ldr	r0, [r0, #16]
    d708:	3388      	adds	r3, #136	; 0x88
    d70a:	2180      	movs	r1, #128	; 0x80
    d70c:	4418      	add	r0, r3
    d70e:	f7ff ff90 	bl	d632 <set_off_state>
	if (err < 0) {
    d712:	2800      	cmp	r0, #0
    d714:	db05      	blt.n	d722 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    d716:	6869      	ldr	r1, [r5, #4]
    d718:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    d71c:	6863      	ldr	r3, [r4, #4]
    d71e:	4798      	blx	r3
	return 0;
    d720:	2000      	movs	r0, #0
}
    d722:	bd38      	pop	{r3, r4, r5, pc}

0000d724 <api_start>:
{
    d724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	err = set_starting_state(&subdata->flags, ctx);
    d728:	270c      	movs	r7, #12
    d72a:	b2cd      	uxtb	r5, r1
    d72c:	436f      	muls	r7, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    d72e:	6904      	ldr	r4, [r0, #16]
{
    d730:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    d732:	f107 0088 	add.w	r0, r7, #136	; 0x88
    d736:	2180      	movs	r1, #128	; 0x80
    d738:	4420      	add	r0, r4
{
    d73a:	4690      	mov	r8, r2
    d73c:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    d73e:	f7ff ff91 	bl	d664 <set_starting_state>
	if (err < 0) {
    d742:	2800      	cmp	r0, #0
    d744:	db07      	blt.n	d756 <api_start+0x32>
	subdata->cb = cb;
    d746:	443c      	add	r4, r7
	subdata->user_data = user_data;
    d748:	e9c4 8920 	strd	r8, r9, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
    d74c:	6873      	ldr	r3, [r6, #4]
    d74e:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    d752:	4798      	blx	r3
	return 0;
    d754:	2000      	movs	r0, #0
}
    d756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d75a <uart_poll_out>:
	api->poll_out(dev, out_char);
    d75a:	6883      	ldr	r3, [r0, #8]
    d75c:	685b      	ldr	r3, [r3, #4]
    d75e:	4718      	bx	r3

0000d760 <debug_hook_out_nop>:
}
    d760:	2000      	movs	r0, #0
    d762:	4770      	bx	lr

0000d764 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    d764:	b570      	push	{r4, r5, r6, lr}
    d766:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d768:	6801      	ldr	r1, [r0, #0]
{
    d76a:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d76c:	b189      	cbz	r1, d792 <gpio_fire_callbacks+0x2e>
	return node->next;
    d76e:	680c      	ldr	r4, [r1, #0]
    d770:	2c00      	cmp	r4, #0
    d772:	bf38      	it	cc
    d774:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    d776:	688a      	ldr	r2, [r1, #8]
    d778:	402a      	ands	r2, r5
    d77a:	d002      	beq.n	d782 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d77c:	4630      	mov	r0, r6
    d77e:	684b      	ldr	r3, [r1, #4]
    d780:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d782:	b134      	cbz	r4, d792 <gpio_fire_callbacks+0x2e>
    d784:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d786:	4621      	mov	r1, r4
    d788:	2b00      	cmp	r3, #0
    d78a:	bf38      	it	cc
    d78c:	2300      	movcc	r3, #0
    d78e:	461c      	mov	r4, r3
    d790:	e7f1      	b.n	d776 <gpio_fire_callbacks+0x12>
		}
	}
}
    d792:	bd70      	pop	{r4, r5, r6, pc}

0000d794 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d794:	6843      	ldr	r3, [r0, #4]
}
    d796:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d798:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d79a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    d79c:	600b      	str	r3, [r1, #0]
}
    d79e:	4770      	bx	lr

0000d7a0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7a0:	6843      	ldr	r3, [r0, #4]
    d7a2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    d7a4:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    d7a6:	4042      	eors	r2, r0
    d7a8:	400a      	ands	r2, r1
    d7aa:	4042      	eors	r2, r0
    p_reg->OUT = value;
    d7ac:	605a      	str	r2, [r3, #4]
}
    d7ae:	2000      	movs	r0, #0
    d7b0:	4770      	bx	lr

0000d7b2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7b2:	6843      	ldr	r3, [r0, #4]
}
    d7b4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7b6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    d7b8:	6099      	str	r1, [r3, #8]
}
    d7ba:	4770      	bx	lr

0000d7bc <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7bc:	6843      	ldr	r3, [r0, #4]
}
    d7be:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7c0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    d7c2:	60d9      	str	r1, [r3, #12]
}
    d7c4:	4770      	bx	lr

0000d7c6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7c6:	6843      	ldr	r3, [r0, #4]
}
    d7c8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7ca:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d7cc:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    d7ce:	404b      	eors	r3, r1
    p_reg->OUT = value;
    d7d0:	6053      	str	r3, [r2, #4]
}
    d7d2:	4770      	bx	lr

0000d7d4 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d7d4:	6903      	ldr	r3, [r0, #16]
{
    d7d6:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    d7d8:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    d7da:	b158      	cbz	r0, d7f4 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d7dc:	2400      	movs	r4, #0
    d7de:	4281      	cmp	r1, r0
    d7e0:	d113      	bne.n	d80a <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    d7e2:	6808      	ldr	r0, [r1, #0]
    d7e4:	b95c      	cbnz	r4, d7fe <gpio_nrfx_manage_callback+0x2a>
    d7e6:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    d7e8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    d7ea:	42a1      	cmp	r1, r4
    d7ec:	d100      	bne.n	d7f0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    d7ee:	6098      	str	r0, [r3, #8]
	parent->next = child;
    d7f0:	2000      	movs	r0, #0
    d7f2:	6008      	str	r0, [r1, #0]
	if (set) {
    d7f4:	b972      	cbnz	r2, d814 <gpio_nrfx_manage_callback+0x40>
	return 0;
    d7f6:	2000      	movs	r0, #0
}
    d7f8:	bd30      	pop	{r4, r5, pc}
    d7fa:	4628      	mov	r0, r5
    d7fc:	e7ef      	b.n	d7de <gpio_nrfx_manage_callback+0xa>
    d7fe:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    d800:	6898      	ldr	r0, [r3, #8]
    d802:	4281      	cmp	r1, r0
	list->tail = node;
    d804:	bf08      	it	eq
    d806:	609c      	streq	r4, [r3, #8]
}
    d808:	e7f2      	b.n	d7f0 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d80a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d80c:	4604      	mov	r4, r0
    d80e:	2d00      	cmp	r5, #0
    d810:	d1f3      	bne.n	d7fa <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    d812:	b13a      	cbz	r2, d824 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    d814:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    d816:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    d818:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    d81a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    d81c:	2800      	cmp	r0, #0
    d81e:	d1ea      	bne.n	d7f6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    d820:	6099      	str	r1, [r3, #8]
}
    d822:	e7e9      	b.n	d7f8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    d824:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d828:	e7e6      	b.n	d7f8 <gpio_nrfx_manage_callback+0x24>

0000d82a <cfg_level_pins>:
{
    d82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    d82e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    d830:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    d832:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    d834:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    d838:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    d83a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    d83e:	4313      	orrs	r3, r2
    d840:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    d844:	b90c      	cbnz	r4, d84a <cfg_level_pins+0x20>
}
    d846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    d84a:	4226      	tst	r6, r4
    d84c:	d010      	beq.n	d870 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d84e:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d850:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d854:	40e9      	lsrs	r1, r5
    d856:	f001 0101 	and.w	r1, r1, #1
    d85a:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d85e:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d862:	b2c9      	uxtb	r1, r1
    d864:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    d868:	f7f7 f90a 	bl	4a80 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    d86c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    d870:	3501      	adds	r5, #1
		bit <<= 1;
    d872:	0076      	lsls	r6, r6, #1
    d874:	e7e6      	b.n	d844 <cfg_level_pins+0x1a>

0000d876 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    d876:	6843      	ldr	r3, [r0, #4]
{
    d878:	b410      	push	{r4}
	return config->uarte_regs;
    d87a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    d87c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    d880:	05d1      	lsls	r1, r2, #23
    d882:	d518      	bpl.n	d8b6 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d884:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    d888:	b1aa      	cbz	r2, d8b6 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    d88a:	f04f 0120 	mov.w	r1, #32
    d88e:	f3ef 8211 	mrs	r2, BASEPRI
    d892:	f381 8812 	msr	BASEPRI_MAX, r1
    d896:	f3bf 8f6f 	isb	sy
    d89a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    d89e:	b131      	cbz	r1, d8ae <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d8a0:	2100      	movs	r1, #0
    d8a2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    d8a6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d8aa:	2101      	movs	r1, #1
    d8ac:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    d8ae:	f382 8811 	msr	BASEPRI, r2
    d8b2:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d8b6:	6842      	ldr	r2, [r0, #4]
    d8b8:	6852      	ldr	r2, [r2, #4]
    d8ba:	06d2      	lsls	r2, r2, #27
    d8bc:	d51a      	bpl.n	d8f4 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    d8be:	f04f 0220 	mov.w	r2, #32
    d8c2:	f3ef 8111 	mrs	r1, BASEPRI
    d8c6:	f382 8812 	msr	BASEPRI_MAX, r2
    d8ca:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d8ce:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d8d2:	b112      	cbz	r2, d8da <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d8d4:	2200      	movs	r2, #0
    d8d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    d8da:	6902      	ldr	r2, [r0, #16]
    d8dc:	68d2      	ldr	r2, [r2, #12]
    d8de:	b10a      	cbz	r2, d8e4 <uarte_nrfx_isr_int+0x6e>
    d8e0:	6912      	ldr	r2, [r2, #16]
    d8e2:	b91a      	cbnz	r2, d8ec <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    d8e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    d8e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    d8ec:	f381 8811 	msr	BASEPRI, r1
    d8f0:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    d8f4:	6902      	ldr	r2, [r0, #16]
    d8f6:	68d2      	ldr	r2, [r2, #12]
    d8f8:	b15a      	cbz	r2, d912 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d8fa:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d8fe:	b151      	cbz	r1, d916 <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
    d900:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    d902:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    d904:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    d906:	b134      	cbz	r4, d916 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    d908:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d90c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    d910:	7391      	strb	r1, [r2, #14]
}
    d912:	bc10      	pop	{r4}
    d914:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d916:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    d91a:	b121      	cbz	r1, d926 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d91c:	2100      	movs	r1, #0
    d91e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    d922:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    d926:	6813      	ldr	r3, [r2, #0]
    d928:	2b00      	cmp	r3, #0
    d92a:	d0f2      	beq.n	d912 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    d92c:	6851      	ldr	r1, [r2, #4]
}
    d92e:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    d930:	4718      	bx	r3

0000d932 <uarte_nrfx_config_get>:
{
    d932:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    d934:	6902      	ldr	r2, [r0, #16]
    d936:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    d93a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    d93e:	2000      	movs	r0, #0
    d940:	4770      	bx	lr

0000d942 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    d942:	6843      	ldr	r3, [r0, #4]
    d944:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    d946:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    d94a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    d94e:	4770      	bx	lr

0000d950 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    d950:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    d952:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d954:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d958:	b940      	cbnz	r0, d96c <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    d95a:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d95c:	0712      	lsls	r2, r2, #28
    d95e:	d406      	bmi.n	d96e <is_tx_ready+0x1e>
    d960:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    d964:	3800      	subs	r0, #0
    d966:	bf18      	it	ne
    d968:	2001      	movne	r0, #1
    d96a:	4770      	bx	lr
    d96c:	2001      	movs	r0, #1
}
    d96e:	4770      	bx	lr

0000d970 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    d970:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    d972:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    d974:	681b      	ldr	r3, [r3, #0]
    d976:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d97a:	b148      	cbz	r0, d990 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d97c:	2000      	movs	r0, #0
	*c = data->rx_data;
    d97e:	7d52      	ldrb	r2, [r2, #21]
    d980:	700a      	strb	r2, [r1, #0]
    d982:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    d986:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d98a:	2201      	movs	r2, #1
    d98c:	601a      	str	r2, [r3, #0]
	return 0;
    d98e:	4770      	bx	lr
		return -1;
    d990:	f04f 30ff 	mov.w	r0, #4294967295
}
    d994:	4770      	bx	lr

0000d996 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d996:	2a00      	cmp	r2, #0
{
    d998:	b510      	push	{r4, lr}
    d99a:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d99c:	dd0f      	ble.n	d9be <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    d99e:	6843      	ldr	r3, [r0, #4]
    d9a0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d9a2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d9a6:	b148      	cbz	r0, d9bc <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d9a8:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    d9aa:	6922      	ldr	r2, [r4, #16]
    d9ac:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    d9b0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d9b4:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    d9b6:	7d52      	ldrb	r2, [r2, #21]
    d9b8:	700a      	strb	r2, [r1, #0]
    d9ba:	6018      	str	r0, [r3, #0]
}
    d9bc:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    d9be:	2000      	movs	r0, #0
    d9c0:	e7fc      	b.n	d9bc <uarte_nrfx_fifo_read+0x26>

0000d9c2 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    d9c2:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    d9c4:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    d9c6:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    d9c8:	f04f 0020 	mov.w	r0, #32
    d9cc:	f3ef 8311 	mrs	r3, BASEPRI
    d9d0:	f380 8812 	msr	BASEPRI_MAX, r0
    d9d4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    d9d8:	2000      	movs	r0, #0
    d9da:	68c9      	ldr	r1, [r1, #12]
    d9dc:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    d9de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    d9e2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    d9e6:	f383 8811 	msr	BASEPRI, r3
    d9ea:	f3bf 8f6f 	isb	sy
}
    d9ee:	4770      	bx	lr

0000d9f0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    d9f0:	2201      	movs	r2, #1
    d9f2:	6903      	ldr	r3, [r0, #16]
    d9f4:	68db      	ldr	r3, [r3, #12]
    d9f6:	739a      	strb	r2, [r3, #14]
}
    d9f8:	4770      	bx	lr

0000d9fa <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    d9fa:	6903      	ldr	r3, [r0, #16]
    d9fc:	68db      	ldr	r3, [r3, #12]
    d9fe:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    da00:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    da04:	b962      	cbnz	r2, da20 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    da06:	6842      	ldr	r2, [r0, #4]
    da08:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    da0a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    da0e:	b140      	cbz	r0, da22 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    da10:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    da14:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    da18:	d003      	beq.n	da22 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    da1a:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    da1c:	6119      	str	r1, [r3, #16]
    da1e:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    da20:	2000      	movs	r0, #0
}
    da22:	4770      	bx	lr

0000da24 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    da24:	6843      	ldr	r3, [r0, #4]
    da26:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    da28:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    da2c:	3800      	subs	r0, #0
    da2e:	bf18      	it	ne
    da30:	2001      	movne	r0, #1
    da32:	4770      	bx	lr

0000da34 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    da34:	2210      	movs	r2, #16
	return config->uarte_regs;
    da36:	6843      	ldr	r3, [r0, #4]
    da38:	681b      	ldr	r3, [r3, #0]
    da3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    da3e:	4770      	bx	lr

0000da40 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    da40:	2210      	movs	r2, #16
	return config->uarte_regs;
    da42:	6843      	ldr	r3, [r0, #4]
    da44:	681b      	ldr	r3, [r3, #0]
    da46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    da4a:	4770      	bx	lr

0000da4c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    da4c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    da50:	6843      	ldr	r3, [r0, #4]
    da52:	681b      	ldr	r3, [r3, #0]
    da54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    da58:	4770      	bx	lr

0000da5a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    da5a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    da5e:	6843      	ldr	r3, [r0, #4]
    da60:	681b      	ldr	r3, [r3, #0]
    da62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    da66:	4770      	bx	lr

0000da68 <uarte_nrfx_irq_update>:
}
    da68:	2001      	movs	r0, #1
    da6a:	4770      	bx	lr

0000da6c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    da6c:	6903      	ldr	r3, [r0, #16]
    da6e:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    da70:	e9c3 1200 	strd	r1, r2, [r3]
}
    da74:	4770      	bx	lr

0000da76 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    da76:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    da78:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    da7a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    da7e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    da82:	2200      	movs	r2, #0
    da84:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    da88:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    da8c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    da90:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    da94:	6842      	ldr	r2, [r0, #4]
    da96:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    da98:	bf41      	itttt	mi
    da9a:	2208      	movmi	r2, #8
    da9c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    daa0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    daa4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    daa8:	2201      	movs	r2, #1
    daaa:	609a      	str	r2, [r3, #8]
}
    daac:	4770      	bx	lr

0000daae <uarte_nrfx_fifo_fill>:
{
    daae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    dab0:	6906      	ldr	r6, [r0, #16]
{
    dab2:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    dab4:	68f3      	ldr	r3, [r6, #12]
    dab6:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    dab8:	3310      	adds	r3, #16
    daba:	4294      	cmp	r4, r2
    dabc:	bfa8      	it	ge
    dabe:	4614      	movge	r4, r2
    dac0:	2201      	movs	r2, #1
    dac2:	e8d3 0fef 	ldaex	r0, [r3]
    dac6:	2800      	cmp	r0, #0
    dac8:	d103      	bne.n	dad2 <uarte_nrfx_fifo_fill+0x24>
    daca:	e8c3 2fe7 	stlex	r7, r2, [r3]
    dace:	2f00      	cmp	r7, #0
    dad0:	d1f7      	bne.n	dac2 <uarte_nrfx_fifo_fill+0x14>
    dad2:	bf0c      	ite	eq
    dad4:	4613      	moveq	r3, r2
    dad6:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    dad8:	d01d      	beq.n	db16 <uarte_nrfx_fifo_fill+0x68>
		return 0;
    dada:	461c      	mov	r4, r3
}
    dadc:	4620      	mov	r0, r4
    dade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    dae0:	68f2      	ldr	r2, [r6, #12]
    dae2:	5cc8      	ldrb	r0, [r1, r3]
    dae4:	6892      	ldr	r2, [r2, #8]
    dae6:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    dae8:	3301      	adds	r3, #1
    daea:	42a3      	cmp	r3, r4
    daec:	dbf8      	blt.n	dae0 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
    daee:	f04f 0320 	mov.w	r3, #32
    daf2:	f3ef 8711 	mrs	r7, BASEPRI
    daf6:	f383 8812 	msr	BASEPRI_MAX, r3
    dafa:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    dafe:	4628      	mov	r0, r5
    db00:	f7ff ff26 	bl	d950 <is_tx_ready>
    db04:	68f3      	ldr	r3, [r6, #12]
    db06:	b940      	cbnz	r0, db1a <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
    db08:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    db0a:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    db0c:	f387 8811 	msr	BASEPRI, r7
    db10:	f3bf 8f6f 	isb	sy
	return len;
    db14:	e7e2      	b.n	dadc <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
    db16:	2300      	movs	r3, #0
    db18:	e7e7      	b.n	daea <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
    db1a:	4622      	mov	r2, r4
    db1c:	4628      	mov	r0, r5
    db1e:	6899      	ldr	r1, [r3, #8]
    db20:	f7ff ffa9 	bl	da76 <tx_start>
    db24:	e7f2      	b.n	db0c <uarte_nrfx_fifo_fill+0x5e>

0000db26 <uarte_nrfx_irq_is_pending>:
{
    db26:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    db28:	6843      	ldr	r3, [r0, #4]
{
    db2a:	4604      	mov	r4, r0
	return config->uarte_regs;
    db2c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    db2e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    db32:	025b      	lsls	r3, r3, #9
    db34:	d405      	bmi.n	db42 <uarte_nrfx_irq_is_pending+0x1c>
    db36:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    db3a:	f010 0010 	ands.w	r0, r0, #16
    db3e:	d106      	bne.n	db4e <uarte_nrfx_irq_is_pending+0x28>
}
    db40:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    db42:	f7ff ff5a 	bl	d9fa <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    db46:	2800      	cmp	r0, #0
    db48:	d0f5      	beq.n	db36 <uarte_nrfx_irq_is_pending+0x10>
		||
    db4a:	2001      	movs	r0, #1
    db4c:	e7f8      	b.n	db40 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    db4e:	4620      	mov	r0, r4
    db50:	f7ff ff68 	bl	da24 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    db54:	3800      	subs	r0, #0
    db56:	bf18      	it	ne
    db58:	2001      	movne	r0, #1
    db5a:	e7f1      	b.n	db40 <uarte_nrfx_irq_is_pending+0x1a>

0000db5c <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    db5c:	4770      	bx	lr

0000db5e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    db5e:	4770      	bx	lr

0000db60 <sys_clock_disable>:
    db60:	4770      	bx	lr

0000db62 <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    db62:	2000      	movs	r0, #0
{
    db64:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    db66:	f7f6 fb33 	bl	41d0 <sys_arch_reboot>

0000db6a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    db6a:	f7fd bba7 	b.w	b2bc <nrf_cc3xx_platform_init_no_rng>

0000db6e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    db6e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    db70:	f7f5 fffc 	bl	3b6c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    db74:	f7f6 f8c0 	bl	3cf8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    db78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    db7c:	f7fd bb9e 	b.w	b2bc <nrf_cc3xx_platform_init_no_rng>

0000db80 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    db80:	4700      	bx	r0

0000db82 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    db82:	f002 b940 	b.w	fe06 <z_impl_k_busy_wait>

0000db86 <nrfx_clock_enable>:
{
    db86:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    db88:	2005      	movs	r0, #5
    db8a:	f7f6 f8f9 	bl	3d80 <arch_irq_is_enabled>
    db8e:	b910      	cbnz	r0, db96 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    db90:	2005      	movs	r0, #5
    db92:	f7f6 f8e5 	bl	3d60 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    db96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    db9a:	2201      	movs	r2, #1
    db9c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    dba0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    dba4:	bd08      	pop	{r3, pc}

0000dba6 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    dba6:	4770      	bx	lr

0000dba8 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
    dba8:	6903      	ldr	r3, [r0, #16]
    dbaa:	6183      	str	r3, [r0, #24]
    dbac:	4770      	bx	lr

0000dbae <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
    dbae:	b510      	push	{r4, lr}
    dbb0:	4604      	mov	r4, r0
    dbb2:	f002 f935 	bl	fe20 <_ZdlPv>
    dbb6:	4620      	mov	r0, r4
    dbb8:	bd10      	pop	{r4, pc}

0000dbba <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
    dbba:	6880      	ldr	r0, [r0, #8]
    dbbc:	4770      	bx	lr

0000dbbe <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
    dbbe:	b570      	push	{r4, r5, r6, lr}
    dbc0:	4604      	mov	r4, r0
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
    dbc2:	6980      	ldr	r0, [r0, #24]
size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
    dbc4:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
    dbc6:	f000 f81b 	bl	dc00 <_ZN6tflite14AlignPointerUpEPhj>
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
    dbca:	4631      	mov	r1, r6
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
    dbcc:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
    dbce:	6960      	ldr	r0, [r4, #20]
    dbd0:	f000 f81c 	bl	dc0c <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
    dbd4:	1b40      	subs	r0, r0, r5
    dbd6:	bd70      	pop	{r4, r5, r6, pc}

0000dbd8 <_ZN6tflite18MicroErrorReporterD1Ev>:
 public:
  ~MicroErrorReporter() override {}
    dbd8:	4770      	bx	lr

0000dbda <_ZN6tflite18MicroErrorReporterD0Ev>:
    dbda:	b510      	push	{r4, lr}
    dbdc:	4604      	mov	r4, r0
    dbde:	f002 f91f 	bl	fe20 <_ZdlPv>
    dbe2:	4620      	mov	r0, r4
    dbe4:	bd10      	pop	{r4, pc}

0000dbe6 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
    dbe6:	b40f      	push	{r0, r1, r2, r3}
    dbe8:	b507      	push	{r0, r1, r2, lr}
    dbea:	a904      	add	r1, sp, #16
    dbec:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
    dbf0:	9101      	str	r1, [sp, #4]
  Log(format, args);
    dbf2:	f7f7 ffd7 	bl	5ba4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
    dbf6:	b003      	add	sp, #12
    dbf8:	f85d eb04 	ldr.w	lr, [sp], #4
    dbfc:	b004      	add	sp, #16
    dbfe:	4770      	bx	lr

0000dc00 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
    dc00:	1e4b      	subs	r3, r1, #1
    dc02:	4418      	add	r0, r3
    dc04:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    dc08:	4348      	muls	r0, r1
    dc0a:	4770      	bx	lr

0000dc0c <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
    dc0c:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
    dc10:	4348      	muls	r0, r1
    dc12:	4770      	bx	lr

0000dc14 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
    dc14:	3801      	subs	r0, #1
    dc16:	4408      	add	r0, r1
    dc18:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
    dc1c:	4348      	muls	r0, r1
    dc1e:	4770      	bx	lr

0000dc20 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
    dc20:	3801      	subs	r0, #1
    dc22:	280f      	cmp	r0, #15
    dc24:	d815      	bhi.n	dc52 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
    dc26:	e8df f000 	tbb	[pc, r0]
    dc2a:	0c0c      	.short	0x0c0c
    dc2c:	10140e10 	.word	0x10140e10
    dc30:	08100e08 	.word	0x08100e08
    dc34:	140e120e 	.word	0x140e120e
    dc38:	0c14      	.short	0x0c14
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
    dc3a:	2302      	movs	r3, #2
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
    dc3c:	2000      	movs	r0, #0
      *size = sizeof(float);
    dc3e:	600b      	str	r3, [r1, #0]
      break;
    dc40:	4770      	bx	lr
      *size = sizeof(float);
    dc42:	2304      	movs	r3, #4
    dc44:	e7fa      	b.n	dc3c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
    dc46:	2308      	movs	r3, #8
    dc48:	e7f8      	b.n	dc3c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
    dc4a:	2301      	movs	r3, #1
    dc4c:	e7f6      	b.n	dc3c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
    dc4e:	2310      	movs	r3, #16
    dc50:	e7f4      	b.n	dc3c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  return kTfLiteOk;
    dc52:	2001      	movs	r0, #1
}
    dc54:	4770      	bx	lr

0000dc56 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    dc56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    dc5a:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    dc5c:	6801      	ldr	r1, [r0, #0]
    dc5e:	4616      	mov	r6, r2
    dc60:	1a41      	subs	r1, r0, r1
    dc62:	f8b1 c000 	ldrh.w	ip, [r1]
    dc66:	4607      	mov	r7, r0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    dc68:	f1bc 0f04 	cmp.w	ip, #4
    dc6c:	461a      	mov	r2, r3
    dc6e:	d92a      	bls.n	dcc6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
    dc70:	888b      	ldrh	r3, [r1, #4]
    auto p = data_ + field_offset;
    dc72:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    dc74:	b173      	cbz	r3, dc94 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    dc76:	58c3      	ldr	r3, [r0, r3]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    dc78:	18e0      	adds	r0, r4, r3
    dc7a:	d00b      	beq.n	dc94 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
  uoffset_t Length() const { return size(); }
    dc7c:	f854 8003 	ldr.w	r8, [r4, r3]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    dc80:	2300      	movs	r3, #0
  int element_count = 1;
    dc82:	2401      	movs	r4, #1
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    dc84:	4543      	cmp	r3, r8
    dc86:	d006      	beq.n	dc96 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x40>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    dc88:	f850 ef04 	ldr.w	lr, [r0, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    dc8c:	3301      	adds	r3, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
    dc8e:	fb0e f404 	mul.w	r4, lr, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    dc92:	e7f7      	b.n	dc84 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2e>
  int element_count = 1;
    dc94:	2401      	movs	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    dc96:	f1bc 0f06 	cmp.w	ip, #6
    dc9a:	d915      	bls.n	dcc8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x72>
    dc9c:	88c8      	ldrh	r0, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    dc9e:	b100      	cbz	r0, dca2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    dca0:	5638      	ldrsb	r0, [r7, r0]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    dca2:	f10d 0107 	add.w	r1, sp, #7
    dca6:	b2c0      	uxtb	r0, r0
    dca8:	f7f9 fd56 	bl	7758 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    dcac:	b940      	cbnz	r0, dcc0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6a>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    dcae:	4631      	mov	r1, r6
    dcb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dcb4:	f7ff ffb4 	bl	dc20 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    dcb8:	b910      	cbnz	r0, dcc0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6a>
  *bytes = element_count * (*type_size);
    dcba:	6833      	ldr	r3, [r6, #0]
    dcbc:	435c      	muls	r4, r3
    dcbe:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
    dcc0:	b002      	add	sp, #8
    dcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int element_count = 1;
    dcc6:	2401      	movs	r4, #1
    dcc8:	2000      	movs	r0, #0
    dcca:	e7ea      	b.n	dca2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>

0000dccc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
    dccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TFLITE_DCHECK(out_bytes != nullptr);
    dcce:	460c      	mov	r4, r1
    dcd0:	b909      	cbnz	r1, dcd6 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0xa>
    dcd2:	f002 f8bc 	bl	fe4e <abort>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
    dcd6:	6843      	ldr	r3, [r0, #4]
    dcd8:	b153      	cbz	r3, dcf0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    dcda:	2100      	movs	r1, #0
  int element_count = 1;
    dcdc:	2201      	movs	r2, #1
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    dcde:	f853 6b04 	ldr.w	r6, [r3], #4
    dce2:	428e      	cmp	r6, r1
    dce4:	dd05      	ble.n	dcf2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x26>
      element_count *= eval_tensor->dims->data[n];
    dce6:	f853 5b04 	ldr.w	r5, [r3], #4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    dcea:	3101      	adds	r1, #1
      element_count *= eval_tensor->dims->data[n];
    dcec:	436a      	muls	r2, r5
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
    dcee:	e7f8      	b.n	dce2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
  int element_count = 1;
    dcf0:	2201      	movs	r2, #1
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
    dcf2:	7a00      	ldrb	r0, [r0, #8]
    dcf4:	a901      	add	r1, sp, #4
    dcf6:	f7ff ff93 	bl	dc20 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    dcfa:	b910      	cbnz	r0, dd02 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x36>
  *out_bytes = element_count * type_size;
    dcfc:	9b01      	ldr	r3, [sp, #4]
    dcfe:	435a      	muls	r2, r3
    dd00:	6022      	str	r2, [r4, #0]
  return kTfLiteOk;
}
    dd02:	b002      	add	sp, #8
    dd04:	bd70      	pop	{r4, r5, r6, pc}

0000dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
    dd06:	6803      	ldr	r3, [r0, #0]
    dd08:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    dd0a:	8803      	ldrh	r3, [r0, #0]
    dd0c:	428b      	cmp	r3, r1
    dd0e:	bf8c      	ite	hi
    dd10:	5a40      	ldrhhi	r0, [r0, r1]
    dd12:	2000      	movls	r0, #0
  }
    dd14:	4770      	bx	lr

0000dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
    dd16:	b510      	push	{r4, lr}
    dd18:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
    dd1a:	f7ff fff4 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    dd1e:	b110      	cbz	r0, dd26 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
    dd20:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    dd22:	5820      	ldr	r0, [r4, r0]
    dd24:	4418      	add	r0, r3
  }
    dd26:	bd10      	pop	{r4, pc}

0000dd28 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
    dd28:	b530      	push	{r4, r5, lr}
    dd2a:	4603      	mov	r3, r0
  char* current = main;
    dd2c:	4604      	mov	r4, r0
    dd2e:	4620      	mov	r0, r4
  while (*current != 0) {
    dd30:	f814 5b01 	ldrb.w	r5, [r4], #1
    dd34:	2d00      	cmp	r5, #0
    dd36:	d1fa      	bne.n	dd2e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
  char* current_end = main + (main_max_length - 1);
    dd38:	3901      	subs	r1, #1
    dd3a:	440b      	add	r3, r1
    dd3c:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
    dd3e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    dd42:	b121      	cbz	r1, dd4e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    dd44:	4298      	cmp	r0, r3
    dd46:	d202      	bcs.n	dd4e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
    dd48:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
    dd4c:	e7f7      	b.n	dd3e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
  *current = 0;
    dd4e:	2300      	movs	r3, #0
    dd50:	7003      	strb	r3, [r0, #0]
}
    dd52:	bd30      	pop	{r4, r5, pc}

0000dd54 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
    dd54:	b570      	push	{r4, r5, r6, lr}
    dd56:	4605      	mov	r5, r0
    dd58:	460c      	mov	r4, r1
    int32_t digit = i % base;
    dd5a:	fbb5 f6f2 	udiv	r6, r5, r2
    dd5e:	fb02 5016 	mls	r0, r2, r6, r5
    if (digit < 10) {
    dd62:	b243      	sxtb	r3, r0
    dd64:	2809      	cmp	r0, #9
    *buffer++ = character;
    dd66:	4620      	mov	r0, r4
      character = '0' + digit;
    dd68:	bf94      	ite	ls
    dd6a:	3330      	addls	r3, #48	; 0x30
      character = 'a' + (digit - 10);
    dd6c:	3357      	addhi	r3, #87	; 0x57
    dd6e:	b2db      	uxtb	r3, r3
  } while (i > 0);
    dd70:	42aa      	cmp	r2, r5
    *buffer++ = character;
    dd72:	f800 3b01 	strb.w	r3, [r0], #1
  } while (i > 0);
    dd76:	d90a      	bls.n	dd8e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x3a>
  *buffer = 0;
    dd78:	2300      	movs	r3, #0
    dd7a:	7003      	strb	r3, [r0, #0]
  while (p1 < p2) {
    dd7c:	42a1      	cmp	r1, r4
    dd7e:	d209      	bcs.n	dd94 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x40>
    char tmp = *p1;
    dd80:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
    dd82:	7822      	ldrb	r2, [r4, #0]
    dd84:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
    dd88:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
    dd8c:	e7f6      	b.n	dd7c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x28>
    dd8e:	4604      	mov	r4, r0
    i /= base;
    dd90:	4635      	mov	r5, r6
    dd92:	e7e2      	b.n	dd5a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x6>
}
    dd94:	bd70      	pop	{r4, r5, r6, pc}

0000dd96 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
    dd96:	4603      	mov	r3, r0
    dd98:	2200      	movs	r2, #0
  int result = 1;
    dd9a:	2001      	movs	r0, #1
int ElementCount(const TfLiteIntArray& dims) {
    dd9c:	b510      	push	{r4, lr}
  for (int i = 0; i < dims.size; ++i) {
    dd9e:	f853 4b04 	ldr.w	r4, [r3], #4
    dda2:	4294      	cmp	r4, r2
    dda4:	dd04      	ble.n	ddb0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
    dda6:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0; i < dims.size; ++i) {
    ddaa:	3201      	adds	r2, #1
    result *= dims.data[i];
    ddac:	4348      	muls	r0, r1
  for (int i = 0; i < dims.size; ++i) {
    ddae:	e7f8      	b.n	dda2 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xc>
  }
  return result;
}
    ddb0:	bd10      	pop	{r4, pc}

0000ddb2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
    return data_ - ReadScalar<soffset_t>(data_);
    ddb2:	6802      	ldr	r2, [r0, #0]
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
    ddb4:	4603      	mov	r3, r0
    ddb6:	1a82      	subs	r2, r0, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    ddb8:	8811      	ldrh	r1, [r2, #0]
    ddba:	290a      	cmp	r1, #10
    ddbc:	d907      	bls.n	ddce <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    ddbe:	8950      	ldrh	r0, [r2, #10]
    auto p = data_ + field_offset;
    ddc0:	181a      	adds	r2, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    ddc2:	b128      	cbz	r0, ddd0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1e>
    ddc4:	581b      	ldr	r3, [r3, r0]
  if (subgraph->operators() != nullptr) {
    ddc6:	18d0      	adds	r0, r2, r3
    ddc8:	d002      	beq.n	ddd0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1e>
    return subgraph->operators()->size();
    ddca:	58d0      	ldr	r0, [r2, r3]
    ddcc:	4770      	bx	lr
    return 0;
    ddce:	2000      	movs	r0, #0
}
    ddd0:	4770      	bx	lr

0000ddd2 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
    ddd2:	4770      	bx	lr

0000ddd4 <_ZN6tflite10MicroGraphD0Ev>:
    ddd4:	b510      	push	{r4, lr}
    ddd6:	4604      	mov	r4, r0
    ddd8:	f002 f822 	bl	fe20 <_ZdlPv>
    dddc:	4620      	mov	r0, r4
    ddde:	bd10      	pop	{r4, pc}

0000dde0 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
    dde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dde4:	4604      	mov	r4, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    dde6:	2600      	movs	r6, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    dde8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
  int previous_subgraph_idx = current_subgraph_index_;
    ddec:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    ddf0:	69a3      	ldr	r3, [r4, #24]
    ddf2:	681b      	ldr	r3, [r3, #0]
    ddf4:	429e      	cmp	r6, r3
    ddf6:	d220      	bcs.n	de3a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    ddf8:	4631      	mov	r1, r6
    ddfa:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
    ddfc:	6166      	str	r6, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    ddfe:	f7f8 f85f 	bl	5ec0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
    de02:	2700      	movs	r7, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    de04:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
    de06:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
    de0a:	4547      	cmp	r7, r8
    de0c:	d013      	beq.n	de36 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    de0e:	6923      	ldr	r3, [r4, #16]
    de10:	f853 500b 	ldr.w	r5, [r3, fp]
    de14:	fb0a 5507 	mla	r5, sl, r7, r5
      const TfLiteRegistration* registration =
    de18:	6aab      	ldr	r3, [r5, #40]	; 0x28
        init_data = reinterpret_cast<const char*>(node->builtin_data);
    de1a:	6969      	ldr	r1, [r5, #20]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    de1c:	695a      	ldr	r2, [r3, #20]
      if (registration->init) {
    de1e:	681b      	ldr	r3, [r3, #0]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    de20:	2a20      	cmp	r2, #32
        init_data_size = 0;
    de22:	bf14      	ite	ne
    de24:	2200      	movne	r2, #0
        init_data_size = node->custom_initial_data_size;
    de26:	e9d5 1206 	ldrdeq	r1, r2, [r5, #24]
      if (registration->init) {
    de2a:	b113      	cbz	r3, de32 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x52>
            registration->init(context_, init_data, init_data_size);
    de2c:	6860      	ldr	r0, [r4, #4]
    de2e:	4798      	blx	r3
        node->user_data =
    de30:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < operators_size; ++i) {
    de32:	3701      	adds	r7, #1
    de34:	e7e9      	b.n	de0a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x2a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    de36:	3601      	adds	r6, #1
    de38:	e7da      	b.n	ddf0 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x10>
}
    de3a:	2000      	movs	r0, #0
  current_subgraph_index_ = previous_subgraph_idx;
    de3c:	f8c4 9014 	str.w	r9, [r4, #20]
}
    de40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000de44 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
    de44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de48:	4604      	mov	r4, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    de4a:	2500      	movs	r5, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    de4c:	f04f 092c 	mov.w	r9, #44	; 0x2c
  int previous_subgraph_idx = current_subgraph_index_;
    de50:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    de54:	69a3      	ldr	r3, [r4, #24]
    de56:	681b      	ldr	r3, [r3, #0]
    de58:	429d      	cmp	r5, r3
    de5a:	d21a      	bcs.n	de92 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x4e>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    de5c:	4629      	mov	r1, r5
    de5e:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
    de60:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    de62:	f7f8 f82d 	bl	5ec0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
    de66:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    de68:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    de6a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    de6e:	42be      	cmp	r6, r7
    de70:	d00d      	beq.n	de8e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x4a>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    de72:	6923      	ldr	r3, [r4, #16]
    de74:	f853 300a 	ldr.w	r3, [r3, sl]
    de78:	fb09 3306 	mla	r3, r9, r6, r3
      const TfLiteRegistration* registration =
    de7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
    de7e:	b122      	cbz	r2, de8a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
    de80:	6852      	ldr	r2, [r2, #4]
    de82:	b112      	cbz	r2, de8a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
        registration->free(context_, node->user_data);
    de84:	6919      	ldr	r1, [r3, #16]
    de86:	6860      	ldr	r0, [r4, #4]
    de88:	4790      	blx	r2
    for (size_t i = 0; i < operators_size; ++i) {
    de8a:	3601      	adds	r6, #1
    de8c:	e7ef      	b.n	de6e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x2a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    de8e:	3501      	adds	r5, #1
    de90:	e7e0      	b.n	de54 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
}
    de92:	2000      	movs	r0, #0
  current_subgraph_index_ = previous_subgraph_idx;
    de94:	f8c4 8014 	str.w	r8, [r4, #20]
}
    de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000de9c <_ZN6tflite19ScopedMicroProfilerD1Ev>:
    }
  }

  ~ScopedMicroProfiler() {
    de9c:	b510      	push	{r4, lr}
    de9e:	4604      	mov	r4, r0
    if (profiler_ != nullptr) {
    dea0:	6840      	ldr	r0, [r0, #4]
    dea2:	b118      	cbz	r0, deac <_ZN6tflite19ScopedMicroProfilerD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
    dea4:	6803      	ldr	r3, [r0, #0]
    dea6:	6821      	ldr	r1, [r4, #0]
    dea8:	68db      	ldr	r3, [r3, #12]
    deaa:	4798      	blx	r3
    }
  }
    deac:	4620      	mov	r0, r4
    deae:	bd10      	pop	{r4, pc}

0000deb0 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
  subgraph_allocations_ = subgraph_allocations;
    deb0:	6101      	str	r1, [r0, #16]
}
    deb2:	4770      	bx	lr

0000deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
    deb4:	b510      	push	{r4, lr}
    deb6:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
    deb8:	f7ff ff25 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    debc:	b110      	cbz	r0, dec4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x10>
    auto p = data_ + field_offset;
    debe:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    dec0:	5820      	ldr	r0, [r4, r0]
    dec2:	4418      	add	r0, r3
  }
    dec4:	bd10      	pop	{r4, pc}

0000dec6 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
    dec6:	b570      	push	{r4, r5, r6, lr}
    dec8:	460c      	mov	r4, r1
    deca:	4616      	mov	r6, r2
    decc:	4605      	mov	r5, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
    dece:	2108      	movs	r1, #8
    ded0:	6880      	ldr	r0, [r0, #8]
    ded2:	f7ff ff20 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    ded6:	4621      	mov	r1, r4
    ded8:	f7f7 fe8e 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    dedc:	2106      	movs	r1, #6
    dede:	f7ff ffe9 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    dee2:	4631      	mov	r1, r6
    dee4:	f7f8 f8c8 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}
    dee8:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    deea:	6929      	ldr	r1, [r5, #16]
    deec:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    def0:	6863      	ldr	r3, [r4, #4]
}
    def2:	fb02 3000 	mla	r0, r2, r0, r3
    def6:	bd70      	pop	{r4, r5, r6, pc}

0000def8 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
    def8:	2108      	movs	r1, #8
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
    defa:	b508      	push	{r3, lr}
    defc:	6880      	ldr	r0, [r0, #8]
    defe:	f7ff ff0a 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    df02:	6800      	ldr	r0, [r0, #0]
    df04:	bd08      	pop	{r3, pc}

0000df06 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    df06:	b510      	push	{r4, lr}
    df08:	460c      	mov	r4, r1
    df0a:	6880      	ldr	r0, [r0, #8]
    df0c:	2108      	movs	r1, #8
    df0e:	f7ff ff02 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    df12:	4621      	mov	r1, r4
    df14:	f7f7 fe70 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    df18:	2108      	movs	r1, #8
    df1a:	f7ff ffcb 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
}
    df1e:	6800      	ldr	r0, [r0, #0]
    df20:	bd10      	pop	{r4, pc}

0000df22 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    df22:	b510      	push	{r4, lr}
    df24:	460c      	mov	r4, r1
    df26:	6880      	ldr	r0, [r0, #8]
    df28:	2108      	movs	r1, #8
    df2a:	f7ff fef4 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    df2e:	4621      	mov	r1, r4
    df30:	f7f7 fe62 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    df34:	2106      	movs	r1, #6
    df36:	f7ff ffbd 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
}
    df3a:	6800      	ldr	r0, [r0, #0]
    df3c:	bd10      	pop	{r4, pc}

0000df3e <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    df3e:	b570      	push	{r4, r5, r6, lr}
    df40:	460c      	mov	r4, r1
    df42:	4616      	mov	r6, r2
    df44:	4605      	mov	r5, r0
    df46:	2108      	movs	r1, #8
    df48:	6880      	ldr	r0, [r0, #8]
    df4a:	f7ff fee4 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    df4e:	4621      	mov	r1, r4
    df50:	f7f7 fe52 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    df54:	2108      	movs	r1, #8
    df56:	f7ff ffad 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    df5a:	4631      	mov	r1, r6
    df5c:	f7f8 f88c 	bl	6078 <_ZNK11flatbuffers6VectorIiE3GetEj>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}
    df60:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    df62:	6929      	ldr	r1, [r5, #16]
    df64:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    df68:	6863      	ldr	r3, [r4, #4]
}
    df6a:	fb02 3000 	mla	r0, r2, r0, r3
    df6e:	bd70      	pop	{r4, r5, r6, pc}

0000df70 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
      ->allocator_.AllocatePersistentBuffer(bytes);
    df70:	68c3      	ldr	r3, [r0, #12]
    df72:	6e98      	ldr	r0, [r3, #104]	; 0x68
    df74:	6803      	ldr	r3, [r0, #0]
    df76:	68db      	ldr	r3, [r3, #12]
    df78:	4718      	bx	r3

0000df7a <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
    df7a:	68c3      	ldr	r3, [r0, #12]
  return handle->data;
    df7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
    df80:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    df84:	4770      	bx	lr

0000df86 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
    df86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  MicroInterpreter* interpreter =
    df88:	68c4      	ldr	r4, [r0, #12]
                                          int tensor_idx) {
    df8a:	460b      	mov	r3, r1
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    df8c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    df8e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
    df92:	6802      	ldr	r2, [r0, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
    df94:	9100      	str	r1, [sp, #0]
    df96:	6855      	ldr	r5, [r2, #4]
    df98:	6821      	ldr	r1, [r4, #0]
    df9a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    df9c:	47a8      	blx	r5
}
    df9e:	b003      	add	sp, #12
    dfa0:	bd30      	pop	{r4, r5, pc}

0000dfa2 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
    dfa2:	68c2      	ldr	r2, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
              .tensors[tensor_idx];
    dfa4:	e9d2 301f 	ldrd	r3, r0, [r2, #124]	; 0x7c
    dfa8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
}
    dfac:	200c      	movs	r0, #12
              .tensors[tensor_idx];
    dfae:	685b      	ldr	r3, [r3, #4]
}
    dfb0:	fb00 3001 	mla	r0, r0, r1, r3
    dfb4:	4770      	bx	lr

0000dfb6 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
    dfb6:	68c3      	ldr	r3, [r0, #12]
  return kTfLiteOk;
}
    dfb8:	2000      	movs	r0, #0
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
    dfba:	336c      	adds	r3, #108	; 0x6c
    dfbc:	600b      	str	r3, [r1, #0]
}
    dfbe:	4770      	bx	lr

0000dfc0 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  MicroInterpreter* interpreter =
    dfc0:	68c0      	ldr	r0, [r0, #12]
                                                           int* buffer_idx) {
    dfc2:	4613      	mov	r3, r2
  return interpreter->allocator_.RequestScratchBufferInArena(
    dfc4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    dfc8:	6e80      	ldr	r0, [r0, #104]	; 0x68
    dfca:	f7f8 bbe5 	b.w	6798 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>

0000dfce <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
    dfce:	b40e      	push	{r1, r2, r3}
    dfd0:	b503      	push	{r0, r1, lr}
  MicroInterpreter* interpreter =
    dfd2:	68c3      	ldr	r3, [r0, #12]
                                     const char* format, ...) {
    dfd4:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
    dfd6:	6898      	ldr	r0, [r3, #8]
                                     const char* format, ...) {
    dfd8:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
    dfdc:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
    dfde:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
    dfe0:	689b      	ldr	r3, [r3, #8]
    dfe2:	4798      	blx	r3
}
    dfe4:	b002      	add	sp, #8
    dfe6:	f85d eb04 	ldr.w	lr, [sp], #4
    dfea:	b003      	add	sp, #12
    dfec:	4770      	bx	lr

0000dfee <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>:
  size_t outputs_size() const {
    dfee:	b508      	push	{r3, lr}
    dff0:	2108      	movs	r1, #8
    dff2:	f7ff fe90 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    return model_->subgraphs()->Get(0)->outputs()->size();
    dff6:	2100      	movs	r1, #0
    dff8:	f7f7 fdfe 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    dffc:	2108      	movs	r1, #8
    dffe:	f7ff ff59 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  }
    e002:	6800      	ldr	r0, [r0, #0]
    e004:	bd08      	pop	{r3, pc}

0000e006 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>:
  size_t inputs_size() const {
    e006:	b508      	push	{r3, lr}
    e008:	2108      	movs	r1, #8
    e00a:	f7ff fe84 	bl	dd16 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
    return model_->subgraphs()->Get(0)->inputs()->size();
    e00e:	2100      	movs	r1, #0
    e010:	f7f7 fdf2 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    e014:	2106      	movs	r1, #6
    e016:	f7ff ff4d 	bl	deb4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  }
    e01a:	6800      	ldr	r0, [r0, #0]
    e01c:	bd08      	pop	{r3, pc}

0000e01e <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
    e01e:	b538      	push	{r3, r4, r5, lr}
  if (graph_.GetAllocations() != nullptr) {
    e020:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
MicroInterpreter::~MicroInterpreter() {
    e022:	4604      	mov	r4, r0
    e024:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  if (graph_.GetAllocations() != nullptr) {
    e028:	b113      	cbz	r3, e030 <_ZN6tflite16MicroInterpreterD1Ev+0x12>
    graph_.FreeSubgraphs();
    e02a:	4628      	mov	r0, r5
    e02c:	f7ff ff0a 	bl	de44 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
    e030:	4628      	mov	r0, r5
    e032:	f7ff fece 	bl	ddd2 <_ZN6tflite10MicroGraphD1Ev>
}
    e036:	4620      	mov	r0, r4
    e038:	bd38      	pop	{r3, r4, r5, pc}

0000e03a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
    e03a:	6840      	ldr	r0, [r0, #4]
    e03c:	6803      	ldr	r3, [r0, #0]
    e03e:	68db      	ldr	r3, [r3, #12]
    e040:	4718      	bx	r3

0000e042 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
    e042:	4770      	bx	lr

0000e044 <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
    e044:	4770      	bx	lr

0000e046 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
    e046:	6840      	ldr	r0, [r0, #4]
    e048:	2210      	movs	r2, #16
    e04a:	6803      	ldr	r3, [r0, #0]
    e04c:	68db      	ldr	r3, [r3, #12]
    e04e:	4718      	bx	r3

0000e050 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
  memory_allocator_->ResetTempAllocations();
    e050:	6840      	ldr	r0, [r0, #4]
    e052:	6803      	ldr	r3, [r0, #0]
    e054:	695b      	ldr	r3, [r3, #20]
    e056:	4718      	bx	r3

0000e058 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    e058:	6840      	ldr	r0, [r0, #4]
    e05a:	2204      	movs	r2, #4
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    e05c:	6803      	ldr	r3, [r0, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
    e05e:	2140      	movs	r1, #64	; 0x40
    e060:	68db      	ldr	r3, [r3, #12]
    e062:	4718      	bx	r3

0000e064 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    e064:	4770      	bx	lr

0000e066 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
    e066:	b510      	push	{r4, lr}
    e068:	4604      	mov	r4, r0
    e06a:	f001 fed9 	bl	fe20 <_ZdlPv>
    e06e:	4620      	mov	r0, r4
    e070:	bd10      	pop	{r4, pc}

0000e072 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
    e072:	b510      	push	{r4, lr}
    e074:	4604      	mov	r4, r0
    e076:	f001 fed3 	bl	fe20 <_ZdlPv>
    e07a:	4620      	mov	r0, r4
    e07c:	bd10      	pop	{r4, pc}

0000e07e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
    e07e:	b538      	push	{r3, r4, r5, lr}
    e080:	4613      	mov	r3, r2
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
    e082:	460c      	mov	r4, r1
    e084:	b909      	cbnz	r1, e08a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0xc>
    e086:	f001 fee2 	bl	fe4e <abort>

  if (scratch_buffer_request_count_ == 0) {
    e08a:	6942      	ldr	r2, [r0, #20]
    e08c:	b132      	cbz	r2, e09c <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
    e08e:	6840      	ldr	r0, [r0, #4]
    e090:	0099      	lsls	r1, r3, #2
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
    e092:	6802      	ldr	r2, [r0, #0]
      memory_allocator_->AllocateFromTail(
    e094:	68d5      	ldr	r5, [r2, #12]
    e096:	2204      	movs	r2, #4
    e098:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
    e09a:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
    e09c:	2000      	movs	r0, #0
    e09e:	bd38      	pop	{r3, r4, r5, pc}

0000e0a0 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
    e0a0:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
    e0a2:	2108      	movs	r1, #8
    e0a4:	4604      	mov	r4, r0
    e0a6:	f7ff fe2e 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e0aa:	b110      	cbz	r0, e0b2 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
    e0ac:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e0ae:	5820      	ldr	r0, [r4, r0]
    e0b0:	4418      	add	r0, r3
  }
    e0b2:	bd10      	pop	{r4, pc}

0000e0b4 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
    e0b4:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
    e0b6:	210a      	movs	r1, #10
    e0b8:	4604      	mov	r4, r0
    e0ba:	f7ff fe24 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e0be:	b110      	cbz	r0, e0c6 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
    e0c0:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e0c2:	5820      	ldr	r0, [r4, r0]
    e0c4:	4418      	add	r0, r3
  }
    e0c6:	bd10      	pop	{r4, pc}

0000e0c8 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
    e0c8:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
    e0ca:	2106      	movs	r1, #6
    e0cc:	4604      	mov	r4, r0
    e0ce:	f7ff fe1a 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e0d2:	b100      	cbz	r0, e0d6 <_ZNK6tflite6Tensor4typeEv+0xe>
    e0d4:	5620      	ldrsb	r0, [r4, r0]
  }
    e0d6:	b2c0      	uxtb	r0, r0
    e0d8:	bd10      	pop	{r4, pc}

0000e0da <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
    e0da:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
    e0dc:	210e      	movs	r1, #14
    e0de:	4604      	mov	r4, r0
    e0e0:	f7ff fe11 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e0e4:	b100      	cbz	r0, e0e8 <_ZNK6tflite6Tensor11is_variableEv+0xe>
    e0e6:	5c20      	ldrb	r0, [r4, r0]
  }
    e0e8:	3800      	subs	r0, #0
    e0ea:	bf18      	it	ne
    e0ec:	2001      	movne	r0, #1
    e0ee:	bd10      	pop	{r4, pc}

0000e0f0 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
    e0f0:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
    e0f2:	2104      	movs	r1, #4
    e0f4:	4604      	mov	r4, r0
    e0f6:	f7ff fe06 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e0fa:	b110      	cbz	r0, e102 <_ZNK6tflite8SubGraph7tensorsEv+0x12>
    auto p = data_ + field_offset;
    e0fc:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e0fe:	5820      	ldr	r0, [r4, r0]
    e100:	4418      	add	r0, r3
  }
    e102:	bd10      	pop	{r4, pc}

0000e104 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    e104:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
    e106:	2108      	movs	r1, #8
    e108:	4604      	mov	r4, r0
    e10a:	f7ff fdfc 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e10e:	b110      	cbz	r0, e116 <_ZNK6tflite5Model9subgraphsEv+0x12>
    auto p = data_ + field_offset;
    e110:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e112:	5820      	ldr	r0, [r4, r0]
    e114:	4418      	add	r0, r3
  }
    e116:	bd10      	pop	{r4, pc}

0000e118 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
    e118:	b570      	push	{r4, r5, r6, lr}
    e11a:	460e      	mov	r6, r1
    e11c:	4604      	mov	r4, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    e11e:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
    e120:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    e122:	f7ff fd6d 	bl	dc00 <_ZN6tflite14AlignPointerUpEPhj>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
    e126:	4434      	add	r4, r6
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
    e128:	4601      	mov	r1, r0
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    e12a:	1a22      	subs	r2, r4, r0
    e12c:	4628      	mov	r0, r5
    e12e:	f7f7 fd05 	bl	5b3c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
    e132:	4629      	mov	r1, r5
}
    e134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
    e138:	f7f8 baca 	b.w	66d0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>

0000e13c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
    e13c:	2300      	movs	r3, #0
    e13e:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    e140:	6840      	ldr	r0, [r0, #4]
    e142:	2204      	movs	r2, #4
    e144:	6803      	ldr	r3, [r0, #0]
    e146:	2160      	movs	r1, #96	; 0x60
    e148:	689b      	ldr	r3, [r3, #8]
    e14a:	4718      	bx	r3

0000e14c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
    e14c:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    e14e:	6840      	ldr	r0, [r0, #4]
    e150:	f7ff fd33 	bl	dbba <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
                     alignof(internal::ScratchBufferRequest)));
}
    e154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
    e158:	2104      	movs	r1, #4
    e15a:	f7ff bd51 	b.w	dc00 <_ZN6tflite14AlignPointerUpEPhj>

0000e15e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
    e15e:	b570      	push	{r4, r5, r6, lr}
    e160:	4604      	mov	r4, r0
  ResetTempAllocations();
    e162:	6803      	ldr	r3, [r0, #0]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
    e164:	460d      	mov	r5, r1
  ResetTempAllocations();
    e166:	689b      	ldr	r3, [r3, #8]
    e168:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    e16a:	4620      	mov	r0, r4
    e16c:	f7ff ffee 	bl	e14c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    e170:	2300      	movs	r3, #0
    e172:	6961      	ldr	r1, [r4, #20]
    e174:	3004      	adds	r0, #4
    e176:	4299      	cmp	r1, r3
    e178:	d007      	beq.n	e18a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    e17a:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
    e17e:	3201      	adds	r2, #1
      requests[i].node_idx = node_id;
    e180:	bf08      	it	eq
    e182:	f840 5033 	streq.w	r5, [r0, r3, lsl #3]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    e186:	3301      	adds	r3, #1
    e188:	e7f5      	b.n	e176 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    e18a:	6860      	ldr	r0, [r4, #4]
    e18c:	310c      	adds	r1, #12
    e18e:	6803      	ldr	r3, [r0, #0]
    e190:	2204      	movs	r2, #4
}
    e192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    e196:	689b      	ldr	r3, [r3, #8]
    e198:	00c9      	lsls	r1, r1, #3
    e19a:	4718      	bx	r3

0000e19c <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
    e19c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
    e19e:	68c3      	ldr	r3, [r0, #12]
    e1a0:	b90b      	cbnz	r3, e1a6 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray+0xa>
    e1a2:	f001 fe54 	bl	fe4e <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
    e1a6:	2900      	cmp	r1, #0
    e1a8:	d0fb      	beq.n	e1a2 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray+0x6>
  return internal::FlatBufferVectorToTfLiteTypeArray(
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
    e1aa:	2000      	movs	r0, #0
    *result = const_cast<kTfLiteArrayType*>(
    e1ac:	6011      	str	r1, [r2, #0]
}
    e1ae:	bd08      	pop	{r3, pc}

0000e1b0 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
    e1b0:	6880      	ldr	r0, [r0, #8]
    e1b2:	4770      	bx	lr

0000e1b4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    e1b4:	b538      	push	{r3, r4, r5, lr}
    e1b6:	460c      	mov	r4, r1
    auto field_offset = GetOptionalFieldOffset(field);
    e1b8:	2108      	movs	r1, #8
    e1ba:	4605      	mov	r5, r0
    e1bc:	f7ff fda3 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e1c0:	b190      	cbz	r0, e1e8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x34>
    e1c2:	5829      	ldr	r1, [r5, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
    e1c4:	4620      	mov	r0, r4
    e1c6:	f7f8 fc63 	bl	6a90 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    e1ca:	4604      	mov	r4, r0
    e1cc:	b150      	cbz	r0, e1e4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x30>
    auto field_offset = GetOptionalFieldOffset(field);
    e1ce:	2104      	movs	r1, #4
    e1d0:	f7ff fd99 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e1d4:	b150      	cbz	r0, e1ec <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x38>
    e1d6:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
    e1d8:	1822      	adds	r2, r4, r0
    if (auto* array = buffer->data()) {
    e1da:	18d4      	adds	r4, r2, r3
    e1dc:	d002      	beq.n	e1e4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x30>
      if (array->size()) {
    e1de:	58d3      	ldr	r3, [r2, r3]
    e1e0:	b133      	cbz	r3, e1f0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x3c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    e1e2:	3404      	adds	r4, #4
}
    e1e4:	4620      	mov	r0, r4
    e1e6:	bd38      	pop	{r3, r4, r5, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e1e8:	4601      	mov	r1, r0
    e1ea:	e7eb      	b.n	e1c4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x10>
  void* out_buffer = nullptr;
    e1ec:	4604      	mov	r4, r0
    e1ee:	e7f9      	b.n	e1e4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x30>
    e1f0:	461c      	mov	r4, r3
  return out_buffer;
    e1f2:	e7f7      	b.n	e1e4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x30>

0000e1f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
    e1f4:	b510      	push	{r4, lr}
    e1f6:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
    e1f8:	f7ff fd85 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e1fc:	b110      	cbz	r0, e204 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
    e1fe:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e200:	5820      	ldr	r0, [r4, r0]
    e202:	4418      	add	r0, r3
  }
    e204:	bd10      	pop	{r4, pc}

0000e206 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
    int subgraph_idx, bool allocate_temp) {
    e206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e20a:	461e      	mov	r6, r3
    e20c:	4604      	mov	r4, r0
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
    e20e:	4608      	mov	r0, r1
    int subgraph_idx, bool allocate_temp) {
    e210:	4617      	mov	r7, r2
    e212:	460d      	mov	r5, r1
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
    e214:	f7ff ff76 	bl	e104 <_ZNK6tflite5Model9subgraphsEv>
    e218:	9906      	ldr	r1, [sp, #24]
    e21a:	f7f7 fced 	bl	5bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    e21e:	f7ff ff67 	bl	e0f0 <_ZNK6tflite8SubGraph7tensorsEv>
    e222:	4631      	mov	r1, r6
    e224:	f7f8 fafa 	bl	681c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
    e228:	210c      	movs	r1, #12
    e22a:	4606      	mov	r6, r0
    e22c:	4628      	mov	r0, r5
    e22e:	f7ff ffe1 	bl	e1f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
    int subgraph_idx, bool allocate_temp) {
    e232:	f89d 801c 	ldrb.w	r8, [sp, #28]
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    e236:	68e2      	ldr	r2, [r4, #12]
    e238:	4603      	mov	r3, r0
    e23a:	9206      	str	r2, [sp, #24]
    e23c:	4641      	mov	r1, r8
    e23e:	4632      	mov	r2, r6
    e240:	6860      	ldr	r0, [r4, #4]
    e242:	9707      	str	r7, [sp, #28]
}
    e244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    e248:	f7f8 bc3a 	b.w	6ac0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>

0000e24c <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
    e24c:	4770      	bx	lr

0000e24e <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
    e24e:	6880      	ldr	r0, [r0, #8]
    e250:	4770      	bx	lr

0000e252 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
    e252:	b510      	push	{r4, lr}
    e254:	4604      	mov	r4, r0
}
    e256:	f001 fde3 	bl	fe20 <_ZdlPv>
    e25a:	4620      	mov	r0, r4
    e25c:	bd10      	pop	{r4, pc}

0000e25e <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
    e25e:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
    e260:	4604      	mov	r4, r0
    e262:	460b      	mov	r3, r1
    e264:	2501      	movs	r5, #1
    any_swapped = false;
    e266:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
    e268:	4295      	cmp	r5, r2
    e26a:	da12      	bge.n	e292 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
    e26c:	e9d4 7c00 	ldrd	r7, ip, [r4]
    e270:	4567      	cmp	r7, ip
        values[i] = value_temp;
    e272:	bfb8      	it	lt
    e274:	e9c4 c700 	strdlt	ip, r7, [r4]
    for (int i = 1; i < size; ++i) {
    e278:	f105 0501 	add.w	r5, r5, #1
        ids[i - 1] = ids[i];
    e27c:	bfb8      	it	lt
    e27e:	e9d3 6700 	ldrdlt	r6, r7, [r3]
    e282:	f104 0404 	add.w	r4, r4, #4
        ids[i] = id_temp;
    e286:	bfbc      	itt	lt
    e288:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
    e28c:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
    e28e:	3304      	adds	r3, #4
    e290:	e7ea      	b.n	e268 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
    e292:	2e00      	cmp	r6, #0
    e294:	d1e4      	bne.n	e260 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
    e296:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e298 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
    e298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BufferRequirements* current = &requirements_[buffer_count_];
    e29a:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
    e29e:	9f08      	ldr	r7, [sp, #32]
    e2a0:	6804      	ldr	r4, [r0, #0]
    e2a2:	9700      	str	r7, [sp, #0]
    e2a4:	68a4      	ldr	r4, [r4, #8]
    e2a6:	47a0      	blx	r4
    e2a8:	b928      	cbnz	r0, e2b6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1e>
  current->offline_offset = offline_offset;
    e2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e2ac:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    e2b0:	606b      	str	r3, [r5, #4]
}
    e2b2:	b003      	add	sp, #12
    e2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
    e2b6:	2001      	movs	r0, #1
    e2b8:	e7fb      	b.n	e2b2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1a>

0000e2ba <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
    e2ba:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
    e2bc:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
    e2be:	68c1      	ldr	r1, [r0, #12]
    e2c0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
    e2c4:	6888      	ldr	r0, [r1, #8]
    e2c6:	4298      	cmp	r0, r3
    e2c8:	dc05      	bgt.n	e2d6 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
    e2ca:	68c8      	ldr	r0, [r1, #12]
    e2cc:	4290      	cmp	r0, r2
    e2ce:	bfb4      	ite	lt
    e2d0:	2000      	movlt	r0, #0
    e2d2:	2001      	movge	r0, #1
}
    e2d4:	bd10      	pop	{r4, pc}
    return false;
    e2d6:	2000      	movs	r0, #0
    e2d8:	e7fc      	b.n	e2d4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

0000e2da <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
    e2da:	b570      	push	{r4, r5, r6, lr}
    e2dc:	4605      	mov	r5, r0
  if (start == nullptr) {
    e2de:	b989      	cbnz	r1, e304 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    e2e0:	6a04      	ldr	r4, [r0, #32]
    e2e2:	200c      	movs	r0, #12
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
    e2e4:	260c      	movs	r6, #12
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
    e2e6:	69a9      	ldr	r1, [r5, #24]
    e2e8:	fb00 1404 	mla	r4, r0, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    e2ec:	4621      	mov	r1, r4
    e2ee:	4628      	mov	r0, r5
    e2f0:	f7ff ffe3 	bl	e2ba <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
    e2f4:	b950      	cbnz	r0, e30c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
    e2f6:	68a4      	ldr	r4, [r4, #8]
    e2f8:	1c61      	adds	r1, r4, #1
    e2fa:	d009      	beq.n	e310 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
    e2fc:	69a9      	ldr	r1, [r5, #24]
    e2fe:	fb06 1404 	mla	r4, r6, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
    e302:	e7f3      	b.n	e2ec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
    e304:	688c      	ldr	r4, [r1, #8]
    e306:	1c60      	adds	r0, r4, #1
    e308:	d1eb      	bne.n	e2e2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
    e30a:	2400      	movs	r4, #0
}
    e30c:	4620      	mov	r0, r4
    e30e:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
    e310:	4604      	mov	r4, r0
    e312:	e7fb      	b.n	e30c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

0000e314 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    e314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    e318:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
    e31c:	4604      	mov	r4, r0
    e31e:	b085      	sub	sp, #20
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
    e320:	2b00      	cmp	r3, #0
    e322:	f000 80ad 	beq.w	e480 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16c>
    e326:	6885      	ldr	r5, [r0, #8]
    e328:	2d00      	cmp	r5, #0
    e32a:	f000 80a9 	beq.w	e480 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16c>
  need_to_calculate_offsets_ = false;
    e32e:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
    e332:	2300      	movs	r3, #0
  int idx_from_head = 0;
    e334:	461a      	mov	r2, r3
  need_to_calculate_offsets_ = false;
    e336:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
    e33a:	f8d4 c008 	ldr.w	ip, [r4, #8]
    e33e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    e342:	459c      	cmp	ip, r3
    e344:	eb07 0082 	add.w	r0, r7, r2, lsl #2
    e348:	eb06 0182 	add.w	r1, r6, r2, lsl #2
    e34c:	dd1e      	ble.n	e38c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
    e34e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    e352:	0119      	lsls	r1, r3, #4
    e354:	eb0c 1003 	add.w	r0, ip, r3, lsl #4
    e358:	f8d0 8004 	ldr.w	r8, [r0, #4]
    e35c:	f85c c001 	ldr.w	ip, [ip, r1]
    e360:	f1b8 3fff 	cmp.w	r8, #4294967295
    e364:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e366:	d108      	bne.n	e37a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x66>
      idx_from_tail--;
    e368:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
    e36a:	f847 c025 	str.w	ip, [r7, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
    e36e:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
      buffer_offsets_[i] = -1;
    e372:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
    e376:	3301      	adds	r3, #1
    e378:	e7df      	b.n	e33a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
    e37a:	f847 c00e 	str.w	ip, [r7, lr]
      buffer_ids_sorted_[idx_from_head] = i;
    e37e:	f846 300e 	str.w	r3, [r6, lr]
      buffer_offsets_[i] = requirements_[i].offline_offset;
    e382:	6840      	ldr	r0, [r0, #4]
      idx_from_head++;
    e384:	3201      	adds	r2, #1
      buffer_offsets_[i] = requirements_[i].offline_offset;
    e386:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      idx_from_head++;
    e38a:	e7f4      	b.n	e376 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x62>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
    e38c:	ebac 0202 	sub.w	r2, ip, r2
    e390:	f7ff ff65 	bl	e25e <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  next_free_entry_ = 1;
    e394:	2301      	movs	r3, #1
    e396:	2200      	movs	r2, #0
    e398:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    e39c:	f04f 33ff 	mov.w	r3, #4294967295
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
    e3a0:	69a6      	ldr	r6, [r4, #24]
  for (int i = 1; i < buffer_count_; ++i) {
    e3a2:	2701      	movs	r7, #1
  first_entry->offset = buffer_offsets_[buffer_id];
    e3a4:	46b2      	mov	sl, r6
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
    e3a6:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
    e3a8:	6963      	ldr	r3, [r4, #20]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    e3aa:	f8d4 800c 	ldr.w	r8, [r4, #12]
  int buffer_id = buffer_ids_sorted_[0];
    e3ae:	9300      	str	r3, [sp, #0]
    e3b0:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
    e3b2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    e3b6:	eb08 1103 	add.w	r1, r8, r3, lsl #4
    e3ba:	6849      	ldr	r1, [r1, #4]
  first_entry->requirements_index = buffer_id;
    e3bc:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
    e3be:	3101      	adds	r1, #1
    buffer_offsets_[buffer_id] = 0;
    e3c0:	bf08      	it	eq
    e3c2:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
    e3c6:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
    e3ca:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
    e3cc:	68a3      	ldr	r3, [r4, #8]
    e3ce:	42bb      	cmp	r3, r7
    e3d0:	dd56      	ble.n	e480 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16c>
    buffer_id = buffer_ids_sorted_[i];
    e3d2:	9b00      	ldr	r3, [sp, #0]
    e3d4:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    e3d8:	eb08 1309 	add.w	r3, r8, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    e3dc:	685d      	ldr	r5, [r3, #4]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
    e3de:	ea4f 1209 	mov.w	r2, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
    e3e2:	1c69      	adds	r1, r5, #1
    e3e4:	d11f      	bne.n	e426 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x112>
      ListEntry* prior_entry = nullptr;
    e3e6:	2000      	movs	r0, #0
    int candidate_offset = 0;
    e3e8:	4605      	mov	r5, r0
    const int wanted_size = wanted_requirements->size;
    e3ea:	f858 2002 	ldr.w	r2, [r8, r2]
    e3ee:	9201      	str	r2, [sp, #4]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
    e3f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    e3f4:	9302      	str	r3, [sp, #8]
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
    e3f6:	4601      	mov	r1, r0
    e3f8:	9003      	str	r0, [sp, #12]
    e3fa:	9b02      	ldr	r3, [sp, #8]
    e3fc:	4620      	mov	r0, r4
    e3fe:	f7ff ff6c 	bl	e2da <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
    e402:	9903      	ldr	r1, [sp, #12]
    e404:	b149      	cbz	r1, e41a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
              prior_entry->offset + candidate_requirements->size;
    e406:	684b      	ldr	r3, [r1, #4]
          const int prior_entry_offset =
    e408:	6809      	ldr	r1, [r1, #0]
              prior_entry->offset + candidate_requirements->size;
    e40a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
          const int prior_entry_offset =
    e40e:	f858 c00c 	ldr.w	ip, [r8, ip]
    e412:	448c      	add	ip, r1
    e414:	4565      	cmp	r5, ip
    e416:	bfb8      	it	lt
    e418:	4665      	movlt	r5, ip
        if (next_entry == nullptr) {
    e41a:	b120      	cbz	r0, e426 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x112>
        const int gap = next_entry->offset - candidate_offset;
    e41c:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
    e41e:	9b01      	ldr	r3, [sp, #4]
        const int gap = next_entry->offset - candidate_offset;
    e420:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
    e422:	428b      	cmp	r3, r1
    e424:	dce7      	bgt.n	e3f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    e426:	220c      	movs	r2, #12
    buffer_offsets_[buffer_id] = candidate_offset;
    e428:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    e42c:	69e3      	ldr	r3, [r4, #28]
    e42e:	fb02 f103 	mul.w	r1, r2, r3
    new_entry->offset = candidate_offset;
    e432:	5075      	str	r5, [r6, r1]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
    e434:	1872      	adds	r2, r6, r1
    ++next_free_entry_;
    e436:	1c59      	adds	r1, r3, #1
    new_entry->requirements_index = buffer_id;
    e438:	f8c2 9004 	str.w	r9, [r2, #4]
    ++next_free_entry_;
    e43c:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
    e43e:	f8da 1000 	ldr.w	r1, [sl]
    e442:	42a9      	cmp	r1, r5
    e444:	dd05      	ble.n	e452 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13e>
      first_entry->next_entry_index = first_entry_index_;
    e446:	4692      	mov	sl, r2
    e448:	6a21      	ldr	r1, [r4, #32]
    e44a:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
    e44c:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
    e44e:	3701      	adds	r7, #1
    e450:	e7bc      	b.n	e3cc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb8>
    e452:	4651      	mov	r1, sl
        const int next_entry_index = current_entry->next_entry_index;
    e454:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
    e456:	f1b0 3fff 	cmp.w	r0, #4294967295
    e45a:	d104      	bne.n	e466 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x152>
          current_entry->next_entry_index = new_entry_index;
    e45c:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
    e45e:	6090      	str	r0, [r2, #8]
          break;
    e460:	e7f5      	b.n	e44e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13a>
    e462:	4671      	mov	r1, lr
    e464:	e7f6      	b.n	e454 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
    e466:	f04f 0c0c 	mov.w	ip, #12
    e46a:	fb0c fc00 	mul.w	ip, ip, r0
    e46e:	eb06 0e0c 	add.w	lr, r6, ip
        if (next_entry->offset > candidate_offset) {
    e472:	f856 c00c 	ldr.w	ip, [r6, ip]
    e476:	45ac      	cmp	ip, r5
    e478:	ddf3      	ble.n	e462 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x14e>
          new_entry->next_entry_index = current_entry->next_entry_index;
    e47a:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
    e47c:	608b      	str	r3, [r1, #8]
          break;
    e47e:	e7e6      	b.n	e44e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13a>
}
    e480:	b005      	add	sp, #20
    e482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e486 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
    e486:	b570      	push	{r4, r5, r6, lr}
    e488:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
    e48a:	f7ff ff43 	bl	e314 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
    e48e:	68a0      	ldr	r0, [r4, #8]
    e490:	b1a8      	cbz	r0, e4be <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    e492:	220c      	movs	r2, #12
  size_t max_size = 0;
    e494:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
    e496:	69a5      	ldr	r5, [r4, #24]
    e498:	6a23      	ldr	r3, [r4, #32]
    e49a:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
    e49e:	b173      	cbz	r3, e4be <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
    e4a0:	6859      	ldr	r1, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
    e4a2:	68e6      	ldr	r6, [r4, #12]
    e4a4:	0109      	lsls	r1, r1, #4
    e4a6:	5871      	ldr	r1, [r6, r1]
    e4a8:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
    e4aa:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
    e4ac:	4431      	add	r1, r6
    e4ae:	4288      	cmp	r0, r1
    e4b0:	bf38      	it	cc
    e4b2:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
    e4b4:	1c59      	adds	r1, r3, #1
    e4b6:	d002      	beq.n	e4be <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
    e4b8:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
    e4bc:	e7ef      	b.n	e49e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
    e4be:	bd70      	pop	{r4, r5, r6, pc}

0000e4c0 <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
    e4c0:	3001      	adds	r0, #1
}
    e4c2:	0080      	lsls	r0, r0, #2
    e4c4:	4770      	bx	lr

0000e4c6 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
    e4c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
    e4ca:	2401      	movs	r4, #1
                         int total_signed_bits) {
    e4cc:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
    e4ce:	fa04 f000 	lsl.w	r0, r4, r0
    e4d2:	3801      	subs	r0, #1
                         int total_signed_bits) {
    e4d4:	4688      	mov	r8, r1
    e4d6:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
    e4d8:	f7f1 ff90 	bl	3fc <__aeabi_i2d>
    e4dc:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
    e4de:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
    e4e2:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
    e4e4:	f1c0 0320 	rsb	r3, r0, #32
    e4e8:	f1a0 0120 	sub.w	r1, r0, #32
    e4ec:	fa24 f303 	lsr.w	r3, r4, r3
    e4f0:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
    e4f4:	fa04 f000 	lsl.w	r0, r4, r0
    e4f8:	4319      	orrs	r1, r3
    e4fa:	f7f1 ffbb 	bl	474 <__aeabi_l2d>
    e4fe:	4602      	mov	r2, r0
    e500:	460b      	mov	r3, r1
    e502:	4630      	mov	r0, r6
    e504:	4639      	mov	r1, r7
    e506:	f7f1 ffe3 	bl	4d0 <__aeabi_dmul>
      (1ll << input_left_shift);
    e50a:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
    e50e:	460f      	mov	r7, r1
      (1ll << input_left_shift);
    e510:	f1a8 0120 	sub.w	r1, r8, #32
    e514:	fa24 f303 	lsr.w	r3, r4, r3
    e518:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
    e51c:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
    e51e:	4319      	orrs	r1, r3
    e520:	fa04 f008 	lsl.w	r0, r4, r8
    e524:	f7f1 ffa6 	bl	474 <__aeabi_l2d>
    e528:	4602      	mov	r2, r0
    e52a:	460b      	mov	r3, r1
  const double max_input_rescaled =
    e52c:	4630      	mov	r0, r6
    e52e:	4639      	mov	r1, r7
    e530:	f7f2 f8f8 	bl	724 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
    e534:	f7f3 fa94 	bl	1a60 <floor>
    e538:	f7f2 fa64 	bl	a04 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
    e53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e540 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
  if (context->tensors != nullptr) {
    e540:	6883      	ldr	r3, [r0, #8]
                                      int tensor_index) {
    e542:	b410      	push	{r4}
  if (context->tensors != nullptr) {
    e544:	b11b      	cbz	r3, e54e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0xe>
    return &context->tensors[tensor_index];
    e546:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
    e54a:	bc10      	pop	{r4}
    e54c:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
    e54e:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
    e550:	bc10      	pop	{r4}
    return context->GetTensor(context, tensor_index);
    e552:	4718      	bx	r3

0000e554 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0>:
  if (index >= 0 && index < max_size) {
    e554:	2800      	cmp	r0, #0
    e556:	db04      	blt.n	e562 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0+0xe>
    e558:	4288      	cmp	r0, r1
    e55a:	da02      	bge.n	e562 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0+0xe>
    const int tensor_index = tensor_indices[index];
    e55c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
    e560:	4770      	bx	lr
  return -1;
    e562:	f04f 30ff 	mov.w	r0, #4294967295
}
    e566:	4770      	bx	lr

0000e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
    e568:	6809      	ldr	r1, [r1, #0]
                             const TfLiteNode* node, int index) {
    e56a:	b508      	push	{r3, lr}
    e56c:	4603      	mov	r3, r0
    e56e:	4610      	mov	r0, r2
  const int tensor_index = ValidateTensorIndexing(
    e570:	1d0a      	adds	r2, r1, #4
    e572:	6809      	ldr	r1, [r1, #0]
    e574:	f7ff ffee 	bl	e554 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0>
  if (tensor_index < 0) {
    e578:	1e01      	subs	r1, r0, #0
    e57a:	db04      	blt.n	e586 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x1e>
  return GetTensorAtIndex(context, tensor_index);
    e57c:	4618      	mov	r0, r3
}
    e57e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return GetTensorAtIndex(context, tensor_index);
    e582:	f7ff bfdd 	b.w	e540 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
    e586:	2000      	movs	r0, #0
    e588:	bd08      	pop	{r3, pc}

0000e58a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
      context, index, node->outputs->size, node->outputs->data);
    e58a:	6849      	ldr	r1, [r1, #4]
                        int index) {
    e58c:	b508      	push	{r3, lr}
    e58e:	4603      	mov	r3, r0
    e590:	4610      	mov	r0, r2
  const int tensor_index = ValidateTensorIndexing(
    e592:	1d0a      	adds	r2, r1, #4
    e594:	6809      	ldr	r1, [r1, #0]
    e596:	f7ff ffdd 	bl	e554 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0>
  if (tensor_index < 0) {
    e59a:	1e01      	subs	r1, r0, #0
    e59c:	db04      	blt.n	e5a8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1e>
  return GetTensorAtIndex(context, tensor_index);
    e59e:	4618      	mov	r0, r3
}
    e5a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return GetTensorAtIndex(context, tensor_index);
    e5a4:	f7ff bfcc 	b.w	e540 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
    e5a8:	2000      	movs	r0, #0
    e5aa:	bd08      	pop	{r3, pc}

0000e5ac <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  return GetInput(context, node, index);
    e5ac:	f7ff bfdc 	b.w	e568 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>

0000e5b0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
    e5b0:	b120      	cbz	r0, e5bc <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
    e5b2:	2801      	cmp	r0, #1
    e5b4:	bf14      	ite	ne
    e5b6:	2000      	movne	r0, #0
    e5b8:	2002      	moveq	r0, #2
    e5ba:	4770      	bx	lr
      return kTfLitePaddingSame;
    e5bc:	2001      	movs	r0, #1
}
    e5be:	4770      	bx	lr

0000e5c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
    e5c0:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
    e5c2:	b908      	cbnz	r0, e5c8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
    e5c4:	f001 fc43 	bl	fe4e <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
    e5c8:	2900      	cmp	r1, #0
    e5ca:	d0fb      	beq.n	e5c4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
    e5cc:	2a00      	cmp	r2, #0
    e5ce:	d0f9      	beq.n	e5c4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
    e5d0:	2b00      	cmp	r3, #0
    e5d2:	d0f7      	beq.n	e5c4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
    e5d4:	bd08      	pop	{r3, pc}

0000e5d6 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
    e5d6:	6803      	ldr	r3, [r0, #0]
    e5d8:	685b      	ldr	r3, [r3, #4]
    e5da:	4718      	bx	r3

0000e5dc <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
    e5dc:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
    e5de:	210c      	movs	r1, #12
    e5e0:	4604      	mov	r4, r0
    e5e2:	f7ff fb90 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e5e6:	b110      	cbz	r0, e5ee <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
    e5e8:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    e5ea:	5820      	ldr	r0, [r4, r0]
    e5ec:	4418      	add	r0, r3
  }
    e5ee:	bd10      	pop	{r4, pc}

0000e5f0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    e5f0:	b538      	push	{r3, r4, r5, lr}
    e5f2:	4605      	mov	r5, r0
    e5f4:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
    e5f6:	f7ff fb86 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e5fa:	b100      	cbz	r0, e5fe <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
    e5fc:	5c2c      	ldrb	r4, [r5, r0]
  }
    e5fe:	4620      	mov	r0, r4
    e600:	bd38      	pop	{r3, r4, r5, pc}

0000e602 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
    e602:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
    e604:	2200      	movs	r2, #0
    e606:	210a      	movs	r1, #10
    e608:	f7ff fff2 	bl	e5f0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
    e60c:	bd08      	pop	{r3, pc}

0000e60e <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    e60e:	b538      	push	{r3, r4, r5, lr}
    e610:	4605      	mov	r5, r0
    e612:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
    e614:	f7ff fb77 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e618:	b100      	cbz	r0, e61c <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0xe>
    e61a:	582c      	ldr	r4, [r5, r0]
  }
    e61c:	4620      	mov	r0, r4
    e61e:	bd38      	pop	{r3, r4, r5, pc}

0000e620 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    e620:	b538      	push	{r3, r4, r5, lr}
    e622:	4605      	mov	r5, r0
    e624:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
    e626:	f7ff fb6e 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e62a:	b100      	cbz	r0, e62e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
    e62c:	562c      	ldrsb	r4, [r5, r0]
  }
    e62e:	4620      	mov	r0, r4
    e630:	bd38      	pop	{r3, r4, r5, pc}

0000e632 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
    e632:	b538      	push	{r3, r4, r5, lr}
    e634:	4605      	mov	r5, r0
    e636:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
    e638:	f7ff fb65 	bl	dd06 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e63c:	b100      	cbz	r0, e640 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0xe>
    e63e:	582c      	ldr	r4, [r5, r0]
  }
    e640:	4620      	mov	r0, r4
    e642:	bd38      	pop	{r3, r4, r5, pc}

0000e644 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
    e644:	b40e      	push	{r1, r2, r3}
    e646:	b503      	push	{r0, r1, lr}
    e648:	aa03      	add	r2, sp, #12
    e64a:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
    e64e:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
    e650:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    e652:	689b      	ldr	r3, [r3, #8]
    e654:	4798      	blx	r3
  va_end(args);
  return code;
}
    e656:	b002      	add	sp, #8
    e658:	f85d eb04 	ldr.w	lr, [sp], #4
    e65c:	b003      	add	sp, #12
    e65e:	4770      	bx	lr

0000e660 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
    e660:	b40c      	push	{r2, r3}
    e662:	b507      	push	{r0, r1, r2, lr}
    e664:	aa04      	add	r2, sp, #16
    e666:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
    e66a:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
    e66c:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
    e66e:	689b      	ldr	r3, [r3, #8]
    e670:	4798      	blx	r3
  va_end(args);
  return code;
}
    e672:	b003      	add	sp, #12
    e674:	f85d eb04 	ldr.w	lr, [sp], #4
    e678:	b002      	add	sp, #8
    e67a:	4770      	bx	lr

0000e67c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
    e67c:	4602      	mov	r2, r0
BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
    e67e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op_code != nullptr);
    e680:	b908      	cbnz	r0, e686 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0xa>
    e682:	f001 fbe4 	bl	fe4e <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    e686:	6801      	ldr	r1, [r0, #0]
    e688:	1a41      	subs	r1, r0, r1
    e68a:	8808      	ldrh	r0, [r1, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    e68c:	280a      	cmp	r0, #10
    e68e:	d90d      	bls.n	e6ac <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x30>
    e690:	894b      	ldrh	r3, [r1, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e692:	b103      	cbz	r3, e696 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1a>
    e694:	58d3      	ldr	r3, [r2, r3]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    e696:	2804      	cmp	r0, #4
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
    e698:	b2db      	uxtb	r3, r3
    e69a:	d909      	bls.n	e6b0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x34>
    e69c:	8888      	ldrh	r0, [r1, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    e69e:	b100      	cbz	r0, e6a2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x26>
    e6a0:	5610      	ldrsb	r0, [r2, r0]

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
    e6a2:	b2c0      	uxtb	r0, r0
}
    e6a4:	4298      	cmp	r0, r3
    e6a6:	bf38      	it	cc
    e6a8:	4618      	movcc	r0, r3
    e6aa:	bd08      	pop	{r3, pc}
    e6ac:	2300      	movs	r3, #0
    e6ae:	e7f2      	b.n	e696 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1a>
    e6b0:	2000      	movs	r0, #0
    e6b2:	e7f6      	b.n	e6a2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x26>

0000e6b4 <_ZN6tflite12RuntimeShapeD1Ev>:
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
    if (size_ > kMaxSmallSize) {
    e6b4:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
    e6b6:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
    e6b8:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
    e6ba:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
    e6bc:	dd03      	ble.n	e6c6 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
    e6be:	6840      	ldr	r0, [r0, #4]
    e6c0:	b108      	cbz	r0, e6c6 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
    e6c2:	f001 fbaf 	bl	fe24 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
    e6c6:	4620      	mov	r0, r4
    e6c8:	bd10      	pop	{r4, pc}

0000e6ca <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
                                             int index) {
    e6ca:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
    e6cc:	b908      	cbnz	r0, e6d2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
    e6ce:	f001 fbbe 	bl	fe4e <abort>
  TFLITE_DCHECK(node != nullptr);
    e6d2:	2900      	cmp	r1, #0
    e6d4:	d0fb      	beq.n	e6ce <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
}
    e6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e6da:	6809      	ldr	r1, [r1, #0]
    e6dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
    e6de:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    e6e2:	6851      	ldr	r1, [r2, #4]
    e6e4:	4718      	bx	r3

0000e6e6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
                                       const TfLiteNode* node, int index) {
    e6e6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
    e6e8:	b908      	cbnz	r0, e6ee <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
    e6ea:	f001 fbb0 	bl	fe4e <abort>
  TFLITE_DCHECK(node != nullptr);
    e6ee:	2900      	cmp	r1, #0
    e6f0:	d0fb      	beq.n	e6ea <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
}
    e6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e6f6:	6849      	ldr	r1, [r1, #4]
    e6f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
    e6fa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    e6fe:	6851      	ldr	r1, [r2, #4]
    e700:	4718      	bx	r3

0000e702 <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
    e702:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
    e704:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
    e706:	da01      	bge.n	e70c <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
    e708:	f001 fba1 	bl	fe4e <abort>
    TFLITE_DCHECK_LT(i, size_);
    e70c:	6803      	ldr	r3, [r0, #0]
    e70e:	428b      	cmp	r3, r1
    e710:	ddfa      	ble.n	e708 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e712:	2b05      	cmp	r3, #5
    e714:	bfcb      	itete	gt
    e716:	6843      	ldrgt	r3, [r0, #4]
    e718:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
    e71c:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
    e720:	6840      	ldrle	r0, [r0, #4]
  }
    e722:	bd08      	pop	{r3, pc}

0000e724 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  inline int32_t* DimsData() {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  inline const int32_t* DimsData() const {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e724:	6801      	ldr	r1, [r0, #0]
  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
    e726:	2200      	movs	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e728:	2905      	cmp	r1, #5
    e72a:	bfcc      	ite	gt
    e72c:	6843      	ldrgt	r3, [r0, #4]
    e72e:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
    e730:	2001      	movs	r0, #1
  inline int FlatSize() const {
    e732:	b510      	push	{r4, lr}
    for (int i = 0; i < size_; i++) {
    e734:	428a      	cmp	r2, r1
    e736:	da04      	bge.n	e742 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
    e738:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
    e73c:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
    e73e:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
    e740:	e7f8      	b.n	e734 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
    e742:	bd10      	pop	{r4, pc}

0000e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
    e744:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    e746:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
    e748:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    e74a:	2c04      	cmp	r4, #4
    e74c:	d001      	beq.n	e752 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
    e74e:	f001 fb7e 	bl	fe4e <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    e752:	2900      	cmp	r1, #0
    e754:	dbfb      	blt.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    e756:	6844      	ldr	r4, [r0, #4]
    e758:	428c      	cmp	r4, r1
    e75a:	ddf8      	ble.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    e75c:	2a00      	cmp	r2, #0
    e75e:	dbf6      	blt.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    e760:	6884      	ldr	r4, [r0, #8]
    e762:	4294      	cmp	r4, r2
    e764:	ddf3      	ble.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    e766:	2b00      	cmp	r3, #0
    e768:	dbf1      	blt.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    e76a:	68c6      	ldr	r6, [r0, #12]
    e76c:	429e      	cmp	r6, r3
    e76e:	ddee      	ble.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    e770:	2d00      	cmp	r5, #0
    e772:	dbec      	blt.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
    e774:	6900      	ldr	r0, [r0, #16]
    e776:	42a8      	cmp	r0, r5
    e778:	dde9      	ble.n	e74e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    e77a:	fb01 2404 	mla	r4, r1, r4, r2
    e77e:	fb06 3404 	mla	r4, r6, r4, r3
}
    e782:	fb00 5004 	mla	r0, r0, r4, r5
    e786:	bd70      	pop	{r4, r5, r6, pc}

0000e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
    e788:	b570      	push	{r4, r5, r6, lr}
    e78a:	4615      	mov	r5, r2
    e78c:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e78e:	f7ff ffb8 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    e792:	4631      	mov	r1, r6
    e794:	4604      	mov	r4, r0
    e796:	4628      	mov	r0, r5
    e798:	f7ff ffb3 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    e79c:	4284      	cmp	r4, r0
    e79e:	d001      	beq.n	e7a4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
    e7a0:	f001 fb55 	bl	fe4e <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
    e7a4:	bd70      	pop	{r4, r5, r6, pc}

0000e7a6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    e7a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    e7a8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    e7aa:	b90b      	cbnz	r3, e7b0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
    e7ac:	f001 fb4f 	bl	fe4e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
    e7b0:	2134      	movs	r1, #52	; 0x34
}
    e7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
    e7b6:	4718      	bx	r3

0000e7b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
    e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7bc:	4699      	mov	r9, r3
  const int stride_width = params.stride_width;
    e7be:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
                 float* im2col_data) {
    e7c2:	b09d      	sub	sp, #116	; 0x74
  const int stride_width = params.stride_width;
    e7c4:	930c      	str	r3, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
    e7c6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
                 float* im2col_data) {
    e7ca:	4688      	mov	r8, r1
  const int stride_height = params.stride_height;
    e7cc:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
    e7ce:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
                 float* im2col_data) {
    e7d2:	9f29      	ldr	r7, [sp, #164]	; 0xa4
  const int dilation_width_factor = params.dilation_width_factor;
    e7d4:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
    e7d6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
                 float* im2col_data) {
    e7da:	921b      	str	r2, [sp, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
    e7dc:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
    e7de:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    e7e2:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
    e7e4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    e7e8:	9312      	str	r3, [sp, #72]	; 0x48
  const float output_activation_min = params.float_activation_min;
    e7ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
    e7ec:	9309      	str	r3, [sp, #36]	; 0x24
  const float output_activation_max = params.float_activation_max;
    e7ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e7f0:	930a      	str	r3, [sp, #40]	; 0x28
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    e7f2:	680b      	ldr	r3, [r1, #0]
    e7f4:	2b04      	cmp	r3, #4
    e7f6:	d001      	beq.n	e7fc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
    e7f8:	f001 fb29 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    e7fc:	f8d9 3000 	ldr.w	r3, [r9]
    e800:	2b04      	cmp	r3, #4
    e802:	d1f9      	bne.n	e7f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x40>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    e804:	683b      	ldr	r3, [r7, #0]
    e806:	2b04      	cmp	r3, #4
    e808:	d1f6      	bne.n	e7f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x40>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    e80a:	2300      	movs	r3, #0
    e80c:	463a      	mov	r2, r7
    e80e:	4619      	mov	r1, r3
    e810:	4640      	mov	r0, r8
    e812:	f7ff ffb9 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    e816:	2303      	movs	r3, #3
    e818:	464a      	mov	r2, r9
    e81a:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    e81c:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    e81e:	4640      	mov	r0, r8
    e820:	f7ff ffb2 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    e824:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    e826:	9014      	str	r0, [sp, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    e828:	463a      	mov	r2, r7
    e82a:	2100      	movs	r1, #0
    e82c:	4648      	mov	r0, r9
    e82e:	f7ff ffab 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    e832:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    e834:	900b      	str	r0, [sp, #44]	; 0x2c
  if (bias_data) {
    e836:	b12b      	cbz	r3, e844 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x8c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    e838:	9827      	ldr	r0, [sp, #156]	; 0x9c
    e83a:	f7ff ff73 	bl	e724 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    e83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e840:	4298      	cmp	r0, r3
    e842:	d1d9      	bne.n	e7f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x40>
  }
  const int input_height = input_shape.Dims(1);
    e844:	2101      	movs	r1, #1
    e846:	4640      	mov	r0, r8
    e848:	f7ff ff5b 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    e84c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    e84e:	9015      	str	r0, [sp, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
    e850:	4640      	mov	r0, r8
    e852:	f7ff ff56 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    e856:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    e858:	9016      	str	r0, [sp, #88]	; 0x58
  const int filter_height = filter_shape.Dims(1);
    e85a:	4648      	mov	r0, r9
    e85c:	f7ff ff51 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    e860:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    e862:	9017      	str	r0, [sp, #92]	; 0x5c
  const int filter_width = filter_shape.Dims(2);
    e864:	4648      	mov	r0, r9
    e866:	f7ff ff4c 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    e86a:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    e86c:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
    e86e:	4638      	mov	r0, r7
    e870:	f7ff ff47 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    e874:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    e876:	9019      	str	r0, [sp, #100]	; 0x64
  const int output_width = output_shape.Dims(2);
    e878:	4638      	mov	r0, r7
    e87a:	f7ff ff42 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
    e87e:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
    e882:	901a      	str	r0, [sp, #104]	; 0x68
  for (int batch = 0; batch < batches; ++batch) {
    e884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e886:	459b      	cmp	fp, r3
    e888:	f280 8098 	bge.w	e9bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x204>
    e88c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e88e:	425b      	negs	r3, r3
    e890:	9307      	str	r3, [sp, #28]
    for (int out_y = 0; out_y < output_height; ++out_y) {
    e892:	2300      	movs	r3, #0
    e894:	9303      	str	r3, [sp, #12]
    e896:	9b03      	ldr	r3, [sp, #12]
    e898:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e89a:	4293      	cmp	r3, r2
    e89c:	f280 808b 	bge.w	e9b6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1fe>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    e8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e8a2:	425b      	negs	r3, r3
    e8a4:	9308      	str	r3, [sp, #32]
    e8a6:	2300      	movs	r3, #0
    e8a8:	9304      	str	r3, [sp, #16]
    e8aa:	9b04      	ldr	r3, [sp, #16]
    e8ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e8ae:	4293      	cmp	r3, r2
    e8b0:	da79      	bge.n	e9a6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ee>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    e8b2:	2400      	movs	r4, #0
    e8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8b6:	429c      	cmp	r4, r3
    e8b8:	da6d      	bge.n	e996 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1de>
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    e8ba:	2300      	movs	r3, #0
    e8bc:	9305      	str	r3, [sp, #20]
          float total = 0.f;
    e8be:	2300      	movs	r3, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    e8c0:	9e07      	ldr	r6, [sp, #28]
          float total = 0.f;
    e8c2:	9306      	str	r3, [sp, #24]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    e8c4:	9b05      	ldr	r3, [sp, #20]
    e8c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e8c8:	4293      	cmp	r3, r2
    e8ca:	da41      	bge.n	e950 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x198>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    e8cc:	f04f 0a00 	mov.w	sl, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    e8d0:	9d08      	ldr	r5, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    e8d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e8d4:	459a      	cmp	sl, r3
    e8d6:	da35      	bge.n	e944 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18c>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    e8d8:	2d00      	cmp	r5, #0
    e8da:	db2e      	blt.n	e93a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
    e8dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e8de:	42ab      	cmp	r3, r5
    e8e0:	dd2b      	ble.n	e93a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
    e8e2:	2e00      	cmp	r6, #0
    e8e4:	db29      	blt.n	e93a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
    e8e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e8e8:	42b3      	cmp	r3, r6
    e8ea:	dd26      	ble.n	e93a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
    e8ec:	2300      	movs	r3, #0
    e8ee:	9302      	str	r3, [sp, #8]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    e8f0:	9b02      	ldr	r3, [sp, #8]
    e8f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e8f4:	4293      	cmp	r3, r2
    e8f6:	da20      	bge.n	e93a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
                float input_value = input_data[Offset(input_shape, batch, in_y,
    e8f8:	4632      	mov	r2, r6
    e8fa:	4659      	mov	r1, fp
    e8fc:	9300      	str	r3, [sp, #0]
    e8fe:	4640      	mov	r0, r8
    e900:	462b      	mov	r3, r5
    e902:	f7ff ff1f 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                float filter_value = filter_data[Offset(
    e906:	9b02      	ldr	r3, [sp, #8]
    e908:	4621      	mov	r1, r4
    e90a:	9a05      	ldr	r2, [sp, #20]
                float input_value = input_data[Offset(input_shape, batch, in_y,
    e90c:	9010      	str	r0, [sp, #64]	; 0x40
                float filter_value = filter_data[Offset(
    e90e:	9300      	str	r3, [sp, #0]
    e910:	4648      	mov	r0, r9
    e912:	4653      	mov	r3, sl
    e914:	f7ff ff16 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
    e918:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e91a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e91c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    e920:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e922:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e926:	f7f2 f9f3 	bl	d10 <__aeabi_fmul>
    e92a:	4601      	mov	r1, r0
    e92c:	9806      	ldr	r0, [sp, #24]
    e92e:	f7f2 f8e7 	bl	b00 <__addsf3>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    e932:	9b02      	ldr	r3, [sp, #8]
                total += (input_value * filter_value);
    e934:	9006      	str	r0, [sp, #24]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    e936:	3301      	adds	r3, #1
    e938:	e7d9      	b.n	e8ee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x136>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    e93a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e93c:	f10a 0a01 	add.w	sl, sl, #1
    e940:	441d      	add	r5, r3
    e942:	e7c6      	b.n	e8d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x11a>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    e944:	9b05      	ldr	r3, [sp, #20]
    e946:	3301      	adds	r3, #1
    e948:	9305      	str	r3, [sp, #20]
    e94a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e94c:	441e      	add	r6, r3
    e94e:	e7b9      	b.n	e8c4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x10c>
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
    e950:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    e952:	b1f3      	cbz	r3, e992 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1da>
            bias_value = bias_data[out_channel];
    e954:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
    e958:	9806      	ldr	r0, [sp, #24]
    e95a:	f7f2 f8d1 	bl	b00 <__addsf3>
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    e95e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
              ActivationFunctionWithMinMax(total + bias_value,
    e962:	4605      	mov	r5, r0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    e964:	4659      	mov	r1, fp
    e966:	4638      	mov	r0, r7
    e968:	9400      	str	r4, [sp, #0]
    e96a:	f7ff feeb 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
    e96e:	9909      	ldr	r1, [sp, #36]	; 0x24
    e970:	4606      	mov	r6, r0
    e972:	4628      	mov	r0, r5
    e974:	f7f2 fb6a 	bl	104c <__aeabi_fcmplt>
    e978:	b100      	cbz	r0, e97c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c4>
	return __b;
    e97a:	9d09      	ldr	r5, [sp, #36]	; 0x24
      if (__b < __a)
    e97c:	4629      	mov	r1, r5
    e97e:	980a      	ldr	r0, [sp, #40]	; 0x28
    e980:	f7f2 fb64 	bl	104c <__aeabi_fcmplt>
    e984:	b100      	cbz	r0, e988 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d0>
	return __b;
    e986:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    e988:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    e98a:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    e98c:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    e990:	e790      	b.n	e8b4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xfc>
          float bias_value = 0.0f;
    e992:	2100      	movs	r1, #0
    e994:	e7e0      	b.n	e958 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    e996:	9b04      	ldr	r3, [sp, #16]
    e998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e99a:	3301      	adds	r3, #1
    e99c:	9304      	str	r3, [sp, #16]
    e99e:	9b08      	ldr	r3, [sp, #32]
    e9a0:	4413      	add	r3, r2
    e9a2:	9308      	str	r3, [sp, #32]
    e9a4:	e781      	b.n	e8aa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xf2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    e9a6:	9b03      	ldr	r3, [sp, #12]
    e9a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e9aa:	3301      	adds	r3, #1
    e9ac:	9303      	str	r3, [sp, #12]
    e9ae:	9b07      	ldr	r3, [sp, #28]
    e9b0:	4413      	add	r3, r2
    e9b2:	9307      	str	r3, [sp, #28]
    e9b4:	e76f      	b.n	e896 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xde>
  for (int batch = 0; batch < batches; ++batch) {
    e9b6:	f10b 0b01 	add.w	fp, fp, #1
    e9ba:	e763      	b.n	e884 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xcc>
                                           output_activation_max);
        }
      }
    }
  }
}
    e9bc:	b01d      	add	sp, #116	; 0x74
    e9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e9c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
                          int filter_size, int stride, int dilation_rate = 1) {
    e9c2:	b510      	push	{r4, lr}
    e9c4:	4604      	mov	r4, r0
  if (stride == 0) return 0;
    e9c6:	4618      	mov	r0, r3
    e9c8:	b123      	cbz	r3, e9d4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x12>
  switch (padding) {
    e9ca:	2c01      	cmp	r4, #1
    e9cc:	d003      	beq.n	e9d6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>
    e9ce:	2c02      	cmp	r4, #2
    e9d0:	d006      	beq.n	e9e0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1e>
    e9d2:	2000      	movs	r0, #0
}
    e9d4:	bd10      	pop	{r4, pc}
      return (image_size + stride - 1) / stride;
    e9d6:	3901      	subs	r1, #1
    e9d8:	4419      	add	r1, r3
      return (image_size + stride - effective_filter_size) / stride;
    e9da:	fb91 f0f0 	sdiv	r0, r1, r0
    e9de:	e7f9      	b.n	e9d4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x12>
    e9e0:	3901      	subs	r1, #1
    e9e2:	4419      	add	r1, r3
    e9e4:	9b02      	ldr	r3, [sp, #8]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    e9e6:	3a01      	subs	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
    e9e8:	fb03 1112 	mls	r1, r3, r2, r1
    e9ec:	e7f5      	b.n	e9da <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x18>

0000e9ee <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                               const OpDataConv& data) {
    e9ee:	b570      	push	{r4, r5, r6, lr}
    e9f0:	4615      	mov	r5, r2
    e9f2:	4604      	mov	r4, r0
  op_params.input_offset = -data.input_zero_point;
    e9f4:	6913      	ldr	r3, [r2, #16]
                               const OpDataConv& data) {
    e9f6:	460e      	mov	r6, r1
  op_params.input_offset = -data.input_zero_point;
    e9f8:	425b      	negs	r3, r3
    e9fa:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
    e9fc:	6953      	ldr	r3, [r2, #20]
    e9fe:	425b      	negs	r3, r3
    ea00:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
    ea02:	6993      	ldr	r3, [r2, #24]
    ea04:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
    ea06:	69d3      	ldr	r3, [r2, #28]
    ea08:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
    ea0a:	6a13      	ldr	r3, [r2, #32]
    ea0c:	425b      	negs	r3, r3
    ea0e:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    ea10:	7808      	ldrb	r0, [r1, #0]
    ea12:	f000 fa5d 	bl	eed0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
    ea16:	686b      	ldr	r3, [r5, #4]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    ea18:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
    ea1a:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
    ea1c:	682b      	ldr	r3, [r5, #0]
}
    ea1e:	4620      	mov	r0, r4
  op_params.padding_values.width = data.padding.width;
    ea20:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
    ea22:	68b3      	ldr	r3, [r6, #8]
    ea24:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
    ea26:	6873      	ldr	r3, [r6, #4]
    ea28:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
    ea2a:	6973      	ldr	r3, [r6, #20]
    ea2c:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
    ea2e:	6933      	ldr	r3, [r6, #16]
    ea30:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
    ea32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    ea34:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
    ea36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    ea38:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    ea3a:	bd70      	pop	{r4, r5, r6, pc}

0000ea3c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    ea3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    ea3e:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    ea40:	b90b      	cbnz	r3, ea46 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
    ea42:	f001 fa04 	bl	fe4e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
    ea46:	2134      	movs	r1, #52	; 0x34
}
    ea48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
    ea4c:	4718      	bx	r3

0000ea4e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
    ea4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea52:	4699      	mov	r9, r3
  const int stride_width = params.stride_width;
    ea54:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    float* output_data) {
    ea58:	b09f      	sub	sp, #124	; 0x7c
  const int stride_width = params.stride_width;
    ea5a:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    ea5c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    float* output_data) {
    ea60:	460c      	mov	r4, r1
  const int stride_height = params.stride_height;
    ea62:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    ea64:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    float* output_data) {
    ea68:	f8dd a0ac 	ldr.w	sl, [sp, #172]	; 0xac
  const int dilation_width_factor = params.dilation_width_factor;
    ea6c:	9311      	str	r3, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    ea6e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    float* output_data) {
    ea72:	921d      	str	r2, [sp, #116]	; 0x74
  const int dilation_height_factor = params.dilation_height_factor;
    ea74:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    ea76:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    ea7a:	9314      	str	r3, [sp, #80]	; 0x50
  const int pad_height = params.padding_values.height;
    ea7c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    ea80:	9315      	str	r3, [sp, #84]	; 0x54
  const int depth_multiplier = params.depth_multiplier;
    ea82:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    ea86:	9308      	str	r3, [sp, #32]
  const float output_activation_min = params.float_activation_min;
    ea88:	6b03      	ldr	r3, [r0, #48]	; 0x30
    ea8a:	930c      	str	r3, [sp, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
    ea8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ea8e:	930d      	str	r3, [sp, #52]	; 0x34
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ea90:	680b      	ldr	r3, [r1, #0]
    ea92:	2b04      	cmp	r3, #4
    ea94:	d001      	beq.n	ea9a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4c>
    ea96:	f001 f9da 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ea9a:	f8d9 3000 	ldr.w	r3, [r9]
    ea9e:	2b04      	cmp	r3, #4
    eaa0:	d1f9      	bne.n	ea96 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    eaa2:	f8da 3000 	ldr.w	r3, [sl]
    eaa6:	2b04      	cmp	r3, #4
    eaa8:	d1f5      	bne.n	ea96 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    eaaa:	2300      	movs	r3, #0
    eaac:	4652      	mov	r2, sl
    eaae:	4619      	mov	r1, r3
    eab0:	4620      	mov	r0, r4
    eab2:	f7ff fe69 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    eab6:	2303      	movs	r3, #3
    eab8:	4652      	mov	r2, sl
    eaba:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    eabc:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    eabe:	4648      	mov	r0, r9
    eac0:	f7ff fe62 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    eac4:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
    eac6:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
    eac8:	4620      	mov	r0, r4
    eaca:	f7ff fe1a 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    eace:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    ead0:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_width = input_shape.Dims(2);
    ead2:	4620      	mov	r0, r4
    ead4:	f7ff fe15 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
    ead8:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
    eada:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_depth = input_shape.Dims(3);
    eadc:	4620      	mov	r0, r4
    eade:	f7ff fe10 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    eae2:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
    eae4:	900e      	str	r0, [sp, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
    eae6:	4648      	mov	r0, r9
    eae8:	f7ff fe0b 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    eaec:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    eaee:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_width = filter_shape.Dims(2);
    eaf0:	4648      	mov	r0, r9
    eaf2:	f7ff fe06 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    eaf6:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    eaf8:	901a      	str	r0, [sp, #104]	; 0x68
  const int output_height = output_shape.Dims(1);
    eafa:	4650      	mov	r0, sl
    eafc:	f7ff fe01 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    eb00:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    eb02:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_width = output_shape.Dims(2);
    eb04:	4650      	mov	r0, sl
    eb06:	f7ff fdfc 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    eb0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eb0c:	9a08      	ldr	r2, [sp, #32]
  const int output_width = output_shape.Dims(2);
    eb0e:	901c      	str	r0, [sp, #112]	; 0x70
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    eb10:	fb03 f602 	mul.w	r6, r3, r2
    eb14:	42ae      	cmp	r6, r5
    eb16:	d1be      	bne.n	ea96 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    eb18:	9829      	ldr	r0, [sp, #164]	; 0xa4
    eb1a:	f7ff fe03 	bl	e724 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    eb1e:	42b0      	cmp	r0, r6
    eb20:	d1b9      	bne.n	ea96 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48>

  for (int b = 0; b < batches; ++b) {
    eb22:	f04f 0b00 	mov.w	fp, #0
    eb26:	9b16      	ldr	r3, [sp, #88]	; 0x58
    eb28:	459b      	cmp	fp, r3
    eb2a:	f280 80a1 	bge.w	ec70 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x222>
    eb2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eb30:	425b      	negs	r3, r3
    eb32:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
    eb34:	2300      	movs	r3, #0
    eb36:	9304      	str	r3, [sp, #16]
    eb38:	9b04      	ldr	r3, [sp, #16]
    eb3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    eb3c:	4293      	cmp	r3, r2
    eb3e:	f280 8094 	bge.w	ec6a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21c>
    eb42:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eb44:	425b      	negs	r3, r3
    eb46:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_x = 0; out_x < output_width; ++out_x) {
    eb48:	2300      	movs	r3, #0
    eb4a:	9305      	str	r3, [sp, #20]
    eb4c:	9b05      	ldr	r3, [sp, #20]
    eb4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    eb50:	4293      	cmp	r3, r2
    eb52:	f280 8082 	bge.w	ec5a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20c>
    eb56:	2300      	movs	r3, #0
    eb58:	9303      	str	r3, [sp, #12]
        for (int ic = 0; ic < input_depth; ++ic) {
    eb5a:	9306      	str	r3, [sp, #24]
    eb5c:	9b06      	ldr	r3, [sp, #24]
    eb5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    eb60:	4293      	cmp	r3, r2
    eb62:	da72      	bge.n	ec4a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fc>
    eb64:	9d03      	ldr	r5, [sp, #12]
          for (int m = 0; m < depth_multiplier; m++) {
    eb66:	9b03      	ldr	r3, [sp, #12]
    eb68:	9a08      	ldr	r2, [sp, #32]
    eb6a:	1aeb      	subs	r3, r5, r3
    eb6c:	429a      	cmp	r2, r3
    eb6e:	dd64      	ble.n	ec3a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ec>
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
    eb70:	2300      	movs	r3, #0
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    eb72:	2600      	movs	r6, #0
            const int oc = m + ic * depth_multiplier;
    eb74:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
            float total = 0.f;
    eb76:	9309      	str	r3, [sp, #36]	; 0x24
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    eb78:	9b19      	ldr	r3, [sp, #100]	; 0x64
    eb7a:	429e      	cmp	r6, r3
    eb7c:	da3a      	bge.n	ebf4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a6>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    eb7e:	2300      	movs	r3, #0
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
    eb80:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    eb84:	9307      	str	r3, [sp, #28]
    eb86:	9b07      	ldr	r3, [sp, #28]
    eb88:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    eb8a:	4293      	cmp	r3, r2
    eb8c:	da2e      	bge.n	ebec <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    eb8e:	f1b8 0f00 	cmp.w	r8, #0
    eb92:	db25      	blt.n	ebe0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x192>
    eb94:	9b18      	ldr	r3, [sp, #96]	; 0x60
    eb96:	4543      	cmp	r3, r8
    eb98:	dd22      	ble.n	ebe0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x192>
    eb9a:	2f00      	cmp	r7, #0
    eb9c:	db20      	blt.n	ebe0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x192>
    eb9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    eba0:	42bb      	cmp	r3, r7
    eba2:	dd1d      	ble.n	ebe0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x192>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    eba4:	9b06      	ldr	r3, [sp, #24]
    eba6:	463a      	mov	r2, r7
    eba8:	4659      	mov	r1, fp
    ebaa:	9300      	str	r3, [sp, #0]
    ebac:	4620      	mov	r0, r4
    ebae:	4643      	mov	r3, r8
    ebb0:	f7ff fdc8 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
    ebb4:	4632      	mov	r2, r6
    ebb6:	2100      	movs	r1, #0
    ebb8:	9b07      	ldr	r3, [sp, #28]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
    ebba:	9013      	str	r0, [sp, #76]	; 0x4c
                  float filter_value = filter_data[Offset(
    ebbc:	9500      	str	r5, [sp, #0]
    ebbe:	4648      	mov	r0, r9
    ebc0:	f7ff fdc0 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
    ebc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    ebc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ebc8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    ebcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ebce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ebd2:	f7f2 f89d 	bl	d10 <__aeabi_fmul>
    ebd6:	4601      	mov	r1, r0
    ebd8:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebda:	f7f1 ff91 	bl	b00 <__addsf3>
    ebde:	9009      	str	r0, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    ebe0:	9b07      	ldr	r3, [sp, #28]
    ebe2:	3301      	adds	r3, #1
    ebe4:	9307      	str	r3, [sp, #28]
    ebe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ebe8:	4498      	add	r8, r3
    ebea:	e7cc      	b.n	eb86 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x138>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    ebec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ebee:	3601      	adds	r6, #1
    ebf0:	441f      	add	r7, r3
    ebf2:	e7c1      	b.n	eb78 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12a>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
    ebf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    ebf6:	b1f3      	cbz	r3, ec36 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e8>
              bias_value = bias_data[oc];
    ebf8:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
    ebfc:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebfe:	f7f1 ff7f 	bl	b00 <__addsf3>
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    ec02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
                ActivationFunctionWithMinMax(total + bias_value,
    ec06:	4606      	mov	r6, r0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
    ec08:	4659      	mov	r1, fp
    ec0a:	4650      	mov	r0, sl
    ec0c:	9500      	str	r5, [sp, #0]
    ec0e:	f7ff fd99 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
    ec12:	990c      	ldr	r1, [sp, #48]	; 0x30
    ec14:	4607      	mov	r7, r0
    ec16:	4630      	mov	r0, r6
    ec18:	f7f2 fa18 	bl	104c <__aeabi_fcmplt>
    ec1c:	b100      	cbz	r0, ec20 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d2>
	return __b;
    ec1e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
      if (__b < __a)
    ec20:	4631      	mov	r1, r6
    ec22:	980d      	ldr	r0, [sp, #52]	; 0x34
    ec24:	f7f2 fa12 	bl	104c <__aeabi_fcmplt>
    ec28:	b100      	cbz	r0, ec2c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
	return __b;
    ec2a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    ec2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    ec2e:	3501      	adds	r5, #1
    ec30:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
          for (int m = 0; m < depth_multiplier; m++) {
    ec34:	e797      	b.n	eb66 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
            float bias_value = 0.0f;
    ec36:	2100      	movs	r1, #0
    ec38:	e7e0      	b.n	ebfc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ae>
        for (int ic = 0; ic < input_depth; ++ic) {
    ec3a:	9b06      	ldr	r3, [sp, #24]
    ec3c:	9a08      	ldr	r2, [sp, #32]
    ec3e:	3301      	adds	r3, #1
    ec40:	9306      	str	r3, [sp, #24]
    ec42:	9b03      	ldr	r3, [sp, #12]
    ec44:	4413      	add	r3, r2
    ec46:	9303      	str	r3, [sp, #12]
    ec48:	e788      	b.n	eb5c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    ec4a:	9b05      	ldr	r3, [sp, #20]
    ec4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ec4e:	3301      	adds	r3, #1
    ec50:	9305      	str	r3, [sp, #20]
    ec52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ec54:	4413      	add	r3, r2
    ec56:	930a      	str	r3, [sp, #40]	; 0x28
    ec58:	e778      	b.n	eb4c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xfe>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    ec5a:	9b04      	ldr	r3, [sp, #16]
    ec5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec5e:	3301      	adds	r3, #1
    ec60:	9304      	str	r3, [sp, #16]
    ec62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec64:	4413      	add	r3, r2
    ec66:	930b      	str	r3, [sp, #44]	; 0x2c
    ec68:	e766      	b.n	eb38 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xea>
  for (int b = 0; b < batches; ++b) {
    ec6a:	f10b 0b01 	add.w	fp, fp, #1
    ec6e:	e75a      	b.n	eb26 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd8>
          }
        }
      }
    }
  }
}
    ec70:	b01f      	add	sp, #124	; 0x7c
    ec72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ec76 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
    ec76:	b570      	push	{r4, r5, r6, lr}
    ec78:	4615      	mov	r5, r2
    ec7a:	4604      	mov	r4, r0
    ec7c:	460e      	mov	r6, r1
  op_params.input_offset = -data.input_zero_point;
    ec7e:	6913      	ldr	r3, [r2, #16]
    ec80:	425b      	negs	r3, r3
    ec82:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
    ec84:	6953      	ldr	r3, [r2, #20]
    ec86:	425b      	negs	r3, r3
    ec88:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
    ec8a:	6993      	ldr	r3, [r2, #24]
    ec8c:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
    ec8e:	69d3      	ldr	r3, [r2, #28]
    ec90:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
    ec92:	6a13      	ldr	r3, [r2, #32]
    ec94:	425b      	negs	r3, r3
    ec96:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    ec98:	7808      	ldrb	r0, [r1, #0]
    ec9a:	f000 f919 	bl	eed0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
    ec9e:	686b      	ldr	r3, [r5, #4]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    eca0:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
    eca2:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
    eca4:	682b      	ldr	r3, [r5, #0]
}
    eca6:	4620      	mov	r0, r4
  op_params.padding_values.width = data.padding.width;
    eca8:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
    ecaa:	68b3      	ldr	r3, [r6, #8]
    ecac:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
    ecae:	6873      	ldr	r3, [r6, #4]
    ecb0:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
    ecb2:	69b3      	ldr	r3, [r6, #24]
    ecb4:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
    ecb6:	6973      	ldr	r3, [r6, #20]
    ecb8:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
    ecba:	68f3      	ldr	r3, [r6, #12]
    ecbc:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
    ecbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    ecc0:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
    ecc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    ecc4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
    ecc6:	bd70      	pop	{r4, r5, r6, pc}

0000ecc8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    ecc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    ecca:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    eccc:	b90b      	cbnz	r3, ecd2 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
    ecce:	f001 f8be 	bl	fe4e <abort>
  return context->AllocatePersistentBuffer(context,
    ecd2:	2120      	movs	r1, #32
}
    ecd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context,
    ecd8:	4718      	bx	r3

0000ecda <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
    ecda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecde:	461c      	mov	r4, r3
    ece0:	b08b      	sub	sp, #44	; 0x2c
    ece2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
    ece4:	69c3      	ldr	r3, [r0, #28]
    float* output_data) {
    ece6:	4690      	mov	r8, r2
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
    ece8:	683a      	ldr	r2, [r7, #0]
  const float output_activation_min = params.float_activation_min;
    ecea:	9303      	str	r3, [sp, #12]
  const float output_activation_max = params.float_activation_max;
    ecec:	6a03      	ldr	r3, [r0, #32]
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    ecee:	f1b2 0b01 	subs.w	fp, r2, #1
  const int weights_dims_count = weights_shape.DimensionsCount();
    ecf2:	6825      	ldr	r5, [r4, #0]
  const float output_activation_max = params.float_activation_max;
    ecf4:	9304      	str	r3, [sp, #16]
    ecf6:	d401      	bmi.n	ecfc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22>
    ecf8:	4593      	cmp	fp, r2
    ecfa:	db01      	blt.n	ed00 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x26>
    ecfc:	f001 f8a7 	bl	fe4e <abort>
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
    ed00:	2301      	movs	r3, #1
    ed02:	9302      	str	r3, [sp, #8]
  for (int i = 0; i < dims_count; ++i) {
    ed04:	2300      	movs	r3, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ed06:	2a05      	cmp	r2, #5
    ed08:	bfcc      	ite	gt
    ed0a:	6878      	ldrgt	r0, [r7, #4]
    ed0c:	1d38      	addle	r0, r7, #4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    ed0e:	459b      	cmp	fp, r3
    ed10:	bf0c      	ite	eq
    ed12:	2101      	moveq	r1, #1
    ed14:	f850 1023 	ldrne.w	r1, [r0, r3, lsl #2]
    ed18:	9e02      	ldr	r6, [sp, #8]
  for (int i = 0; i < dims_count; ++i) {
    ed1a:	3301      	adds	r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    ed1c:	434e      	muls	r6, r1
  for (int i = 0; i < dims_count; ++i) {
    ed1e:	429a      	cmp	r2, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    ed20:	9602      	str	r6, [sp, #8]
  for (int i = 0; i < dims_count; ++i) {
    ed22:	dcf4      	bgt.n	ed0e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x34>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ed24:	1ea9      	subs	r1, r5, #2
    ed26:	4620      	mov	r0, r4
    ed28:	f7ff fceb 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    ed2c:	4659      	mov	r1, fp
    ed2e:	4681      	mov	r9, r0
    ed30:	4638      	mov	r0, r7
    ed32:	f7ff fce6 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    ed36:	4581      	cmp	r9, r0
    ed38:	4607      	mov	r7, r0
    ed3a:	d1df      	bne.n	ecfc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22>
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    ed3c:	4620      	mov	r0, r4
    ed3e:	1e69      	subs	r1, r5, #1
    ed40:	f7ff fcdf 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    ed44:	4646      	mov	r6, r8
    ed46:	f04f 0800 	mov.w	r8, #0
    ed4a:	4604      	mov	r4, r0
  for (int b = 0; b < batches; ++b) {
    ed4c:	0083      	lsls	r3, r0, #2
    ed4e:	9306      	str	r3, [sp, #24]
    ed50:	f8cd 8004 	str.w	r8, [sp, #4]
    ed54:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    ed58:	4293      	cmp	r3, r2
    ed5a:	da48      	bge.n	edee <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x114>
    ed5c:	f04f 0900 	mov.w	r9, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ed60:	46ca      	mov	sl, r9
    ed62:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ed64:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    ed68:	9305      	str	r3, [sp, #20]
    ed6a:	45ba      	cmp	sl, r7
    ed6c:	da38      	bge.n	ede0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x106>
    ed6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
    ed70:	f04f 0b00 	mov.w	fp, #0
    ed74:	eb03 0289 	add.w	r2, r3, r9, lsl #2
      float total = 0.f;
    ed78:	2500      	movs	r5, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ed7a:	4633      	mov	r3, r6
      for (int d = 0; d < accum_depth; ++d) {
    ed7c:	45a3      	cmp	fp, r4
    ed7e:	da12      	bge.n	eda6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xcc>
        total += input_data[b * accum_depth + d] *
    ed80:	f852 1b04 	ldr.w	r1, [r2], #4
    ed84:	f853 0b04 	ldr.w	r0, [r3], #4
    ed88:	9208      	str	r2, [sp, #32]
    ed8a:	9307      	str	r3, [sp, #28]
    ed8c:	9309      	str	r3, [sp, #36]	; 0x24
    ed8e:	f7f1 ffbf 	bl	d10 <__aeabi_fmul>
    ed92:	4601      	mov	r1, r0
    ed94:	4628      	mov	r0, r5
    ed96:	f7f1 feb3 	bl	b00 <__addsf3>
      for (int d = 0; d < accum_depth; ++d) {
    ed9a:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
        total += input_data[b * accum_depth + d] *
    ed9e:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    eda0:	f10b 0b01 	add.w	fp, fp, #1
    eda4:	e7ea      	b.n	ed7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xa2>
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
      if (bias_data) {
    eda6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    eda8:	b1c3      	cbz	r3, eddc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x102>
        bias_value = bias_data[out_c];
    edaa:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    edae:	4628      	mov	r0, r5
    edb0:	f7f1 fea6 	bl	b00 <__addsf3>
      if (__a < __b)
    edb4:	9903      	ldr	r1, [sp, #12]
    edb6:	4605      	mov	r5, r0
    edb8:	f7f2 f948 	bl	104c <__aeabi_fcmplt>
    edbc:	b100      	cbz	r0, edc0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xe6>
	return __b;
    edbe:	9d03      	ldr	r5, [sp, #12]
      if (__b < __a)
    edc0:	4629      	mov	r1, r5
    edc2:	9804      	ldr	r0, [sp, #16]
    edc4:	f7f2 f942 	bl	104c <__aeabi_fcmplt>
    edc8:	b100      	cbz	r0, edcc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf2>
	return __b;
    edca:	9d04      	ldr	r5, [sp, #16]
    edcc:	9b05      	ldr	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    edce:	f10a 0a01 	add.w	sl, sl, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    edd2:	f843 5b04 	str.w	r5, [r3], #4
    edd6:	9305      	str	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    edd8:	44a1      	add	r9, r4
    edda:	e7c6      	b.n	ed6a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x90>
      float bias_value = 0.0f;
    eddc:	2100      	movs	r1, #0
    edde:	e7e6      	b.n	edae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd4>
  for (int b = 0; b < batches; ++b) {
    ede0:	9b01      	ldr	r3, [sp, #4]
    ede2:	44b8      	add	r8, r7
    ede4:	3301      	adds	r3, #1
    ede6:	9301      	str	r3, [sp, #4]
    ede8:	9b06      	ldr	r3, [sp, #24]
    edea:	441e      	add	r6, r3
    edec:	e7b2      	b.n	ed54 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
    edee:	b00b      	add	sp, #44	; 0x2c
    edf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000edf4 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
  op_params.input_offset = -op_data.input_zero_point;
    edf4:	694a      	ldr	r2, [r1, #20]
    edf6:	4252      	negs	r2, r2
    edf8:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
    edfa:	698a      	ldr	r2, [r1, #24]
    edfc:	4252      	negs	r2, r2
    edfe:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
    ee00:	69ca      	ldr	r2, [r1, #28]
    ee02:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
    ee04:	680a      	ldr	r2, [r1, #0]
    ee06:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
    ee08:	684a      	ldr	r2, [r1, #4]
    ee0a:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
    ee0c:	688a      	ldr	r2, [r1, #8]
    ee0e:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
    ee10:	68ca      	ldr	r2, [r1, #12]
    ee12:	6182      	str	r2, [r0, #24]
}
    ee14:	4770      	bx	lr

0000ee16 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
    ee16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  if (data_type != kTfLiteFloat32) {
    ee1a:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
    ee1c:	4680      	mov	r8, r0
    ee1e:	e9dd a70e 	ldrd	sl, r7, [sp, #56]	; 0x38
    ee22:	4689      	mov	r9, r1
    ee24:	461d      	mov	r5, r3
    ee26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  if (data_type != kTfLiteFloat32) {
    ee28:	d02c      	beq.n	ee84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6e>
    double real_multiplier = 0.0;
    ee2a:	2200      	movs	r2, #0
    ee2c:	2300      	movs	r3, #0
    ee2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    ee32:	ab02      	add	r3, sp, #8
    ee34:	e9cd a300 	strd	sl, r3, [sp]
    ee38:	4632      	mov	r2, r6
    ee3a:	4629      	mov	r1, r5
    ee3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee3e:	f7f2 fb87 	bl	1550 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    ee42:	4604      	mov	r4, r0
    ee44:	b9d0      	cbnz	r0, ee7c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x66>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
    ee46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ee4a:	1d3b      	adds	r3, r7, #4
    ee4c:	463a      	mov	r2, r7
    ee4e:	f7f8 fa0b 	bl	7268 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
    ee52:	692b      	ldr	r3, [r5, #16]
    ee54:	617b      	str	r3, [r7, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
    ee56:	6933      	ldr	r3, [r6, #16]
    ee58:	b10b      	cbz	r3, ee5e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
    ee5a:	f000 fff8 	bl	fe4e <abort>
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;
    ee5e:	f8da 3010 	ldr.w	r3, [sl, #16]
    data->filter_zero_point = filter->params.zero_point;
    ee62:	61bc      	str	r4, [r7, #24]
    data->output_zero_point = output->params.zero_point;
    ee64:	61fb      	str	r3, [r7, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
    ee66:	f107 030c 	add.w	r3, r7, #12
    ee6a:	9300      	str	r3, [sp, #0]
    ee6c:	4652      	mov	r2, sl
    ee6e:	4649      	mov	r1, r9
    ee70:	4640      	mov	r0, r8
    ee72:	f107 0308 	add.w	r3, r7, #8
    ee76:	f7f8 faad 	bl	73d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    ee7a:	4604      	mov	r4, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
    ee7c:	4620      	mov	r0, r4
    ee7e:	b004      	add	sp, #16
    ee80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return kTfLiteOk;
    ee84:	2400      	movs	r4, #0
    ee86:	e7f9      	b.n	ee7c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x66>

0000ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
    ee88:	b570      	push	{r4, r5, r6, lr}
    ee8a:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
    ee8c:	b109      	cbz	r1, ee92 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
    ee8e:	684d      	ldr	r5, [r1, #4]
    ee90:	b91d      	cbnz	r5, ee9a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
    ee92:	2300      	movs	r3, #0
    ee94:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
    ee96:	4620      	mov	r0, r4
    ee98:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
    ee9a:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
    ee9e:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
    eea0:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
    eea2:	ea4f 0683 	mov.w	r6, r3, lsl #2
    eea6:	dc05      	bgt.n	eeb4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    eea8:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
    eeaa:	4632      	mov	r2, r6
    eeac:	4629      	mov	r1, r5
    eeae:	f000 ffe7 	bl	fe80 <memcpy>
  }
    eeb2:	e7f0      	b.n	ee96 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
    eeb4:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
    eeb8:	4283      	cmp	r3, r0
    eeba:	bfb4      	ite	lt
    eebc:	4630      	movlt	r0, r6
    eebe:	f04f 30ff 	movge.w	r0, #4294967295
    eec2:	f000 ffc2 	bl	fe4a <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    eec6:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
    eec8:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    eeca:	2b05      	cmp	r3, #5
    eecc:	dced      	bgt.n	eeaa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
    eece:	e7eb      	b.n	eea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

0000eed0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
    eed0:	2801      	cmp	r0, #1
    eed2:	d002      	beq.n	eeda <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
    eed4:	2802      	cmp	r0, #2
    eed6:	bf18      	it	ne
    eed8:	2000      	movne	r0, #0
  }
}
    eeda:	4770      	bx	lr

0000eedc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
  return flat_size;
}

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
    eedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eee0:	4604      	mov	r4, r0
    eee2:	460d      	mov	r5, r1
    eee4:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    eee6:	2600      	movs	r6, #0
  const int dims_count = shape.DimensionsCount();
    eee8:	6807      	ldr	r7, [r0, #0]
  for (int i = 0; i < dims_count; ++i) {
    eeea:	42be      	cmp	r6, r7
    eeec:	da10      	bge.n	ef10 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
    eeee:	42ae      	cmp	r6, r5
    eef0:	d00c      	beq.n	ef0c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    eef2:	4631      	mov	r1, r6
    eef4:	4620      	mov	r0, r4
    eef6:	f7ff fc04 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    eefa:	4631      	mov	r1, r6
    eefc:	4681      	mov	r9, r0
    eefe:	4640      	mov	r0, r8
    ef00:	f7ff fbff 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
    ef04:	4581      	cmp	r9, r0
    ef06:	d001      	beq.n	ef0c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
    ef08:	f000 ffa1 	bl	fe4e <abort>
  for (int i = 0; i < dims_count; ++i) {
    ef0c:	3601      	adds	r6, #1
    ef0e:	e7ec      	b.n	eeea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    ef10:	2d00      	cmp	r5, #0
    ef12:	dbf9      	blt.n	ef08 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    ef14:	42bd      	cmp	r5, r7
    ef16:	daf7      	bge.n	ef08 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
  int flat_size = 1;
    ef18:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
    ef1a:	2300      	movs	r3, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ef1c:	2f05      	cmp	r7, #5
    ef1e:	bfcc      	ite	gt
    ef20:	6864      	ldrgt	r4, [r4, #4]
    ef22:	3404      	addle	r4, #4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    ef24:	429d      	cmp	r5, r3
    ef26:	bf0c      	ite	eq
    ef28:	2201      	moveq	r2, #1
    ef2a:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
    ef2e:	3301      	adds	r3, #1
    ef30:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    ef32:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
    ef36:	dcf5      	bgt.n	ef24 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
    ef38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ef3c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
    ef3c:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
    ef3e:	2100      	movs	r1, #0
    ef40:	f7fa fb66 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
    ef44:	bd08      	pop	{r3, pc}

0000ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    ef46:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    ef48:	f7fa fb38 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
    ef4c:	bd08      	pop	{r3, pc}

0000ef4e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    ef4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
    ef50:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    ef52:	b90b      	cbnz	r3, ef58 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
    ef54:	f000 ff7b 	bl	fe4e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
    ef58:	2120      	movs	r1, #32
}
    ef5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
    ef5e:	4718      	bx	r3

0000ef60 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace reference_integer_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
    ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef64:	b097      	sub	sp, #92	; 0x5c
    ef66:	4699      	mov	r9, r3
    ef68:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    ef6a:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
    ef6e:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, int8_t* output_data) {
    ef70:	4606      	mov	r6, r0
    ef72:	4688      	mov	r8, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    ef74:	dd01      	ble.n	ef7a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
    ef76:	f000 ff6a 	bl	fe4e <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ef7a:	680b      	ldr	r3, [r1, #0]
    ef7c:	2b04      	cmp	r3, #4
    ef7e:	d1fa      	bne.n	ef76 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ef80:	f8d9 3000 	ldr.w	r3, [r9]
    ef84:	2b04      	cmp	r3, #4
    ef86:	d1f6      	bne.n	ef76 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    ef88:	2300      	movs	r3, #0
    ef8a:	464a      	mov	r2, r9
    ef8c:	4619      	mov	r1, r3
    ef8e:	4640      	mov	r0, r8
    ef90:	f7ff fbfa 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    ef94:	2303      	movs	r3, #3
    ef96:	464a      	mov	r2, r9
    ef98:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    ef9a:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    ef9c:	4640      	mov	r0, r8
    ef9e:	f7ff fbf3 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    efa2:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    efa4:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
    efa6:	4640      	mov	r0, r8
    efa8:	f7ff fbab 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    efac:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    efae:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
    efb0:	4640      	mov	r0, r8
    efb2:	f7ff fba6 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    efb6:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    efb8:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
    efba:	4648      	mov	r0, r9
    efbc:	f7ff fba1 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    efc0:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    efc2:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
    efc4:	4648      	mov	r0, r9
    efc6:	f7ff fb9c 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    efca:	2100      	movs	r1, #0
  const int stride_height = params.stride_height;
    efcc:	68f3      	ldr	r3, [r6, #12]
  const int output_width = output_shape.Dims(2);
    efce:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    efd0:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
    efd2:	6933      	ldr	r3, [r6, #16]
    efd4:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
    efd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    efd8:	4299      	cmp	r1, r3
    efda:	f280 8092 	bge.w	f102 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a2>
    efde:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    efe2:	f8cd b010 	str.w	fp, [sp, #16]
    efe6:	9b04      	ldr	r3, [sp, #16]
    efe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    efea:	4293      	cmp	r3, r2
    efec:	f280 8087 	bge.w	f0fe <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
    eff0:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    eff4:	f8cd a014 	str.w	sl, [sp, #20]
    eff8:	9b05      	ldr	r3, [sp, #20]
    effa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    effc:	4293      	cmp	r3, r2
    effe:	da78      	bge.n	f0f2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x192>
        for (int channel = 0; channel < depth; ++channel) {
    f000:	2300      	movs	r3, #0
    f002:	9303      	str	r3, [sp, #12]
    f004:	9b03      	ldr	r3, [sp, #12]
    f006:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f008:	4293      	cmp	r3, r2
    f00a:	da6c      	bge.n	f0e6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x186>
              (out_x * stride_width) - params.padding_values.width;
    f00c:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
              (out_y * stride_height) - params.padding_values.height;
    f010:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
          const int in_x_origin =
    f014:	ebaa 0307 	sub.w	r3, sl, r7
    f018:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
    f01a:	eba7 070a 	sub.w	r7, r7, sl
          const int in_y_origin =
    f01e:	ebab 0302 	sub.w	r3, fp, r2
    f022:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
    f024:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
    f028:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
    f02a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
          const int filter_y_start = std::max(0, -in_y_origin);
    f02c:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_width, input_width - in_x_origin);
    f030:	441f      	add	r7, r3
    f032:	69b3      	ldr	r3, [r6, #24]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
    f034:	2400      	movs	r4, #0
    f036:	429f      	cmp	r7, r3
    f038:	bfa8      	it	ge
    f03a:	461f      	movge	r7, r3
              std::min(params.filter_height, input_height - in_y_origin);
    f03c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
          int filter_count = 0;
    f03e:	4625      	mov	r5, r4
              std::min(params.filter_height, input_height - in_y_origin);
    f040:	18d0      	adds	r0, r2, r3
    f042:	6973      	ldr	r3, [r6, #20]
    f044:	9706      	str	r7, [sp, #24]
    min(const _Tp& __a, const _Tp& __b)
    f046:	4298      	cmp	r0, r3
    f048:	bfa8      	it	ge
    f04a:	4618      	movge	r0, r3
    f04c:	9b08      	ldr	r3, [sp, #32]
    f04e:	9009      	str	r0, [sp, #36]	; 0x24
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f050:	2a00      	cmp	r2, #0
    f052:	bfa8      	it	ge
    f054:	189b      	addge	r3, r3, r2
    f056:	461a      	mov	r2, r3
    f058:	9b08      	ldr	r3, [sp, #32]
    f05a:	9809      	ldr	r0, [sp, #36]	; 0x24
    f05c:	1ad3      	subs	r3, r2, r3
    f05e:	4298      	cmp	r0, r3
    f060:	dd1e      	ble.n	f0a0 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f062:	9f07      	ldr	r7, [sp, #28]
    f064:	9b06      	ldr	r3, [sp, #24]
    f066:	429f      	cmp	r7, r3
    f068:	da0f      	bge.n	f08a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x12a>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    f06a:	9b03      	ldr	r3, [sp, #12]
    f06c:	4640      	mov	r0, r8
    f06e:	9300      	str	r3, [sp, #0]
    f070:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f072:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
    f076:	443b      	add	r3, r7
    f078:	f7ff fb64 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f07c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
    f080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f082:	3701      	adds	r7, #1
              acc +=
    f084:	561b      	ldrsb	r3, [r3, r0]
    f086:	441c      	add	r4, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f088:	e7ec      	b.n	f064 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x104>
    f08a:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
    f08e:	1a1b      	subs	r3, r3, r0
    f090:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
    f094:	42b8      	cmp	r0, r7
    f096:	bfb8      	it	lt
    f098:	2300      	movlt	r3, #0
    f09a:	3201      	adds	r2, #1
    f09c:	441d      	add	r5, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f09e:	e7db      	b.n	f058 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf8>
              filter_count++;
            }
          }
          if (filter_count == 0) return false;
    f0a0:	2d00      	cmp	r5, #0
    f0a2:	d032      	beq.n	f10a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1aa>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
    f0a4:	0feb      	lsrs	r3, r5, #31
    f0a6:	2c00      	cmp	r4, #0
    f0a8:	442b      	add	r3, r5
    f0aa:	bfcc      	ite	gt
    f0ac:	eb04 0463 	addgt.w	r4, r4, r3, asr #1
                        : (acc - filter_count / 2) / filter_count;
    f0b0:	eba4 0463 	suble.w	r4, r4, r3, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
    f0b4:	fb94 f5f5 	sdiv	r5, r4, r5
    f0b8:	69f4      	ldr	r4, [r6, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f0ba:	9b03      	ldr	r3, [sp, #12]
    f0bc:	42a5      	cmp	r5, r4
    f0be:	bfb8      	it	lt
    f0c0:	4625      	movlt	r5, r4
    f0c2:	6a34      	ldr	r4, [r6, #32]
    f0c4:	9300      	str	r3, [sp, #0]
    f0c6:	42a5      	cmp	r5, r4
    f0c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f0cc:	4648      	mov	r0, r9
    f0ce:	bfa8      	it	ge
    f0d0:	4625      	movge	r5, r4
    f0d2:	9106      	str	r1, [sp, #24]
    f0d4:	f7ff fb36 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    f0d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
    f0da:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f0dc:	541d      	strb	r5, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
    f0de:	9b03      	ldr	r3, [sp, #12]
    f0e0:	3301      	adds	r3, #1
    f0e2:	9303      	str	r3, [sp, #12]
    f0e4:	e78e      	b.n	f004 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    f0e6:	9b05      	ldr	r3, [sp, #20]
    f0e8:	3301      	adds	r3, #1
    f0ea:	9305      	str	r3, [sp, #20]
    f0ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f0ee:	449a      	add	sl, r3
    f0f0:	e782      	b.n	eff8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    f0f2:	9b04      	ldr	r3, [sp, #16]
    f0f4:	3301      	adds	r3, #1
    f0f6:	9304      	str	r3, [sp, #16]
    f0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f0fa:	449b      	add	fp, r3
    f0fc:	e773      	b.n	efe6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
  for (int batch = 0; batch < batches; ++batch) {
    f0fe:	3101      	adds	r1, #1
    f100:	e769      	b.n	efd6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
  return true;
    f102:	2001      	movs	r0, #1
}
    f104:	b017      	add	sp, #92	; 0x5c
    f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (filter_count == 0) return false;
    f10a:	4628      	mov	r0, r5
    f10c:	e7fa      	b.n	f104 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a4>

0000f10e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
    f10e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f112:	b097      	sub	sp, #92	; 0x5c
    f114:	461e      	mov	r6, r3
    f116:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    f118:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
    f11c:	429a      	cmp	r2, r3
                    int8_t* output_data) {
    f11e:	4604      	mov	r4, r0
    f120:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    f122:	dd01      	ble.n	f128 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
    f124:	f000 fe93 	bl	fe4e <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
    f128:	3280      	adds	r2, #128	; 0x80
    f12a:	dbfb      	blt.n	f124 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
    f12c:	2b7f      	cmp	r3, #127	; 0x7f
    f12e:	dcf9      	bgt.n	f124 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    f130:	680b      	ldr	r3, [r1, #0]
    f132:	2b04      	cmp	r3, #4
    f134:	d1f6      	bne.n	f124 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    f136:	6833      	ldr	r3, [r6, #0]
    f138:	2b04      	cmp	r3, #4
    f13a:	d1f3      	bne.n	f124 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    f13c:	2300      	movs	r3, #0
    f13e:	4632      	mov	r2, r6
    f140:	4619      	mov	r1, r3
    f142:	4628      	mov	r0, r5
    f144:	f7ff fb20 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f148:	2303      	movs	r3, #3
    f14a:	4632      	mov	r2, r6
    f14c:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    f14e:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f150:	4628      	mov	r0, r5
    f152:	f7ff fb19 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    f156:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f158:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
    f15a:	4628      	mov	r0, r5
    f15c:	f7ff fad1 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    f160:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    f162:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
    f164:	4628      	mov	r0, r5
    f166:	f7ff facc 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    f16a:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    f16c:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
    f16e:	4630      	mov	r0, r6
    f170:	f7ff fac7 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    f174:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    f176:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
    f178:	4630      	mov	r0, r6
    f17a:	f7ff fac2 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    f17e:	f04f 0b00 	mov.w	fp, #0
  const int stride_height = params.stride_height;
    f182:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
    f184:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    f186:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
    f188:	6923      	ldr	r3, [r4, #16]
    f18a:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
    f18c:	9b08      	ldr	r3, [sp, #32]
    f18e:	459b      	cmp	fp, r3
    f190:	f280 808a 	bge.w	f2a8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19a>
    f194:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    f198:	f8cd 800c 	str.w	r8, [sp, #12]
    f19c:	9b03      	ldr	r3, [sp, #12]
    f19e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f1a0:	4293      	cmp	r3, r2
    f1a2:	da7e      	bge.n	f2a2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
    f1a4:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    f1a6:	46b9      	mov	r9, r7
    f1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1aa:	4599      	cmp	r9, r3
    f1ac:	da73      	bge.n	f296 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x188>
        for (int channel = 0; channel < depth; ++channel) {
    f1ae:	2300      	movs	r3, #0
    f1b0:	9302      	str	r3, [sp, #8]
    f1b2:	9b02      	ldr	r3, [sp, #8]
    f1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f1b6:	4293      	cmp	r3, r2
    f1b8:	da68      	bge.n	f28c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x17e>
              (out_x * stride_width) - params.padding_values.width;
    f1ba:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    f1be:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
    f1c0:	1afa      	subs	r2, r7, r3
    f1c2:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
    f1c4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
    f1c8:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
    f1ca:	eba8 0102 	sub.w	r1, r8, r2
    f1ce:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
    f1d0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    f1d4:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
    f1d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
    f1d8:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_width, input_width - in_x_origin);
    f1dc:	440b      	add	r3, r1
    f1de:	4283      	cmp	r3, r0
    f1e0:	bfa8      	it	ge
    f1e2:	4603      	movge	r3, r0
    f1e4:	9307      	str	r3, [sp, #28]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    f1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1e8:	18d0      	adds	r0, r2, r3
    f1ea:	6963      	ldr	r3, [r4, #20]
    f1ec:	4298      	cmp	r0, r3
    f1ee:	bfa8      	it	ge
    f1f0:	4618      	movge	r0, r3
          int8_t max = std::numeric_limits<int8_t>::lowest();
    f1f2:	2380      	movs	r3, #128	; 0x80
    f1f4:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    f1f8:	9b04      	ldr	r3, [sp, #16]
    f1fa:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f1fc:	2a00      	cmp	r2, #0
    f1fe:	bfa8      	it	ge
    f200:	189b      	addge	r3, r3, r2
    f202:	461a      	mov	r2, r3
    f204:	9b04      	ldr	r3, [sp, #16]
    f206:	990c      	ldr	r1, [sp, #48]	; 0x30
    f208:	1ad3      	subs	r3, r2, r3
    f20a:	428b      	cmp	r3, r1
    f20c:	da24      	bge.n	f258 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x14a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f20e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
    f212:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
    f216:	9305      	str	r3, [sp, #20]
    f218:	9b07      	ldr	r3, [sp, #28]
    f21a:	4553      	cmp	r3, sl
    f21c:	dd1a      	ble.n	f254 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x146>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
    f21e:	9b02      	ldr	r3, [sp, #8]
    f220:	4659      	mov	r1, fp
    f222:	9300      	str	r3, [sp, #0]
    f224:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f226:	4628      	mov	r0, r5
    f228:	4453      	add	r3, sl
    f22a:	9213      	str	r2, [sp, #76]	; 0x4c
    f22c:	f7ff fa8a 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
    f230:	9a06      	ldr	r2, [sp, #24]
    f232:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f234:	f10a 0a01 	add.w	sl, sl, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
    f238:	4403      	add	r3, r0
    f23a:	5610      	ldrsb	r0, [r2, r0]
    f23c:	9a05      	ldr	r2, [sp, #20]
    f23e:	4290      	cmp	r0, r2
      return __a;
    f240:	f10d 0257 	add.w	r2, sp, #87	; 0x57
    f244:	bfd8      	it	le
    f246:	4613      	movle	r3, r2
              max = std::max(
    f248:	f993 3000 	ldrsb.w	r3, [r3]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f24c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
    f24e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f252:	e7de      	b.n	f212 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f254:	3201      	adds	r2, #1
    f256:	e7d5      	b.n	f204 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf6>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
          max = std::min<int8_t>(max, params.quantized_activation_max);
    f258:	f994 a01c 	ldrsb.w	sl, [r4, #28]
    f25c:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f260:	4659      	mov	r1, fp
    f262:	459a      	cmp	sl, r3
    f264:	bfb8      	it	lt
    f266:	469a      	movlt	sl, r3
    f268:	f994 3020 	ldrsb.w	r3, [r4, #32]
    f26c:	4630      	mov	r0, r6
    f26e:	459a      	cmp	sl, r3
    f270:	bfa8      	it	ge
    f272:	469a      	movge	sl, r3
    f274:	9b02      	ldr	r3, [sp, #8]
    f276:	9a03      	ldr	r2, [sp, #12]
    f278:	9300      	str	r3, [sp, #0]
    f27a:	464b      	mov	r3, r9
    f27c:	f7ff fa62 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    f280:	9b20      	ldr	r3, [sp, #128]	; 0x80
    f282:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
    f286:	9b02      	ldr	r3, [sp, #8]
    f288:	3301      	adds	r3, #1
    f28a:	e791      	b.n	f1b0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    f28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f28e:	f109 0901 	add.w	r9, r9, #1
    f292:	441f      	add	r7, r3
    f294:	e788      	b.n	f1a8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    f296:	9b03      	ldr	r3, [sp, #12]
    f298:	3301      	adds	r3, #1
    f29a:	9303      	str	r3, [sp, #12]
    f29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f29e:	4498      	add	r8, r3
    f2a0:	e77c      	b.n	f19c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
    f2a2:	f10b 0b01 	add.w	fp, fp, #1
    f2a6:	e771      	b.n	f18c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x7e>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
    f2a8:	b017      	add	sp, #92	; 0x5c
    f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f2ae <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
    f2ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2b2:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    f2b4:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
    f2b6:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    f2b8:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
    f2ba:	4604      	mov	r4, r0
    f2bc:	460d      	mov	r5, r1
    f2be:	9214      	str	r2, [sp, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    f2c0:	d001      	beq.n	f2c6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
    f2c2:	f000 fdc4 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    f2c6:	6833      	ldr	r3, [r6, #0]
    f2c8:	2b04      	cmp	r3, #4
    f2ca:	d1fa      	bne.n	f2c2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    f2cc:	2300      	movs	r3, #0
    f2ce:	4632      	mov	r2, r6
    f2d0:	4619      	mov	r1, r3
    f2d2:	4628      	mov	r0, r5
    f2d4:	f7ff fa58 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f2d8:	2303      	movs	r3, #3
    f2da:	4632      	mov	r2, r6
    f2dc:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    f2de:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f2e0:	4628      	mov	r0, r5
    f2e2:	f7ff fa51 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    f2e6:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f2e8:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_height = input_shape.Dims(1);
    f2ea:	4628      	mov	r0, r5
    f2ec:	f7ff fa09 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    f2f0:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    f2f2:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_width = input_shape.Dims(2);
    f2f4:	4628      	mov	r0, r5
    f2f6:	f7ff fa04 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    f2fa:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    f2fc:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
    f2fe:	4630      	mov	r0, r6
    f300:	f7ff f9ff 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    f304:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    f306:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
    f308:	4630      	mov	r0, r6
    f30a:	f7ff f9fa 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    f30e:	f04f 0800 	mov.w	r8, #0
  const int stride_height = params.stride_height;
    f312:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
    f314:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    f316:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
    f318:	6923      	ldr	r3, [r4, #16]
    f31a:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
    f31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f31e:	4598      	cmp	r8, r3
    f320:	f280 809e 	bge.w	f460 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b2>
    f324:	2300      	movs	r3, #0
    f326:	9304      	str	r3, [sp, #16]
    for (int out_y = 0; out_y < output_height; ++out_y) {
    f328:	9306      	str	r3, [sp, #24]
    f32a:	9b06      	ldr	r3, [sp, #24]
    f32c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f32e:	4293      	cmp	r3, r2
    f330:	f280 8093 	bge.w	f45a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ac>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
    f334:	2300      	movs	r3, #0
    f336:	9305      	str	r3, [sp, #20]
      for (int out_x = 0; out_x < output_width; ++out_x) {
    f338:	9307      	str	r3, [sp, #28]
    f33a:	9b07      	ldr	r3, [sp, #28]
    f33c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f33e:	4293      	cmp	r3, r2
    f340:	f280 8083 	bge.w	f44a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
        for (int channel = 0; channel < depth; ++channel) {
    f344:	2300      	movs	r3, #0
    f346:	9303      	str	r3, [sp, #12]
    f348:	9b03      	ldr	r3, [sp, #12]
    f34a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f34c:	4293      	cmp	r3, r2
    f34e:	da74      	bge.n	f43a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18c>
              (out_x * stride_width) - params.padding_values.width;
    f350:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_x_origin =
    f354:	9a05      	ldr	r2, [sp, #20]
          const int in_y_origin =
    f356:	9904      	ldr	r1, [sp, #16]
          const int in_x_origin =
    f358:	1ad2      	subs	r2, r2, r3
    f35a:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
    f35c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
          float filter_count = 0;
    f360:	2700      	movs	r7, #0
          const int in_y_origin =
    f362:	eba1 0b02 	sub.w	fp, r1, r2
          const int filter_x_start = std::max(0, -in_x_origin);
    f366:	9905      	ldr	r1, [sp, #20]
          float total = 0.f;
    f368:	46b9      	mov	r9, r7
          const int filter_x_start = std::max(0, -in_x_origin);
    f36a:	1a5b      	subs	r3, r3, r1
    f36c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    f370:	9113      	str	r1, [sp, #76]	; 0x4c
              std::min(params.filter_width, input_width - in_x_origin);
    f372:	990c      	ldr	r1, [sp, #48]	; 0x30
    f374:	440b      	add	r3, r1
    f376:	69a1      	ldr	r1, [r4, #24]
    f378:	428b      	cmp	r3, r1
    f37a:	bfa8      	it	ge
    f37c:	460b      	movge	r3, r1
    f37e:	9312      	str	r3, [sp, #72]	; 0x48
          const int filter_y_start = std::max(0, -in_y_origin);
    f380:	9b04      	ldr	r3, [sp, #16]
    f382:	1ad2      	subs	r2, r2, r3
              std::min(params.filter_height, input_height - in_y_origin);
    f384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f386:	18d1      	adds	r1, r2, r3
    f388:	6963      	ldr	r3, [r4, #20]
    f38a:	4299      	cmp	r1, r3
    f38c:	bfa8      	it	ge
    f38e:	4619      	movge	r1, r3
    f390:	2a00      	cmp	r2, #0
    f392:	bfac      	ite	ge
    f394:	445a      	addge	r2, fp
    f396:	f10b 0200 	addlt.w	r2, fp, #0
    f39a:	9108      	str	r1, [sp, #32]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f39c:	9908      	ldr	r1, [sp, #32]
    f39e:	eba2 030b 	sub.w	r3, r2, fp
    f3a2:	4299      	cmp	r1, r3
    f3a4:	dd20      	ble.n	f3e8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f3a6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    f3aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f3ac:	459a      	cmp	sl, r3
    f3ae:	da19      	bge.n	f3e4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x136>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    f3b0:	9b03      	ldr	r3, [sp, #12]
    f3b2:	4641      	mov	r1, r8
    f3b4:	9300      	str	r3, [sp, #0]
    f3b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f3b8:	4628      	mov	r0, r5
    f3ba:	4453      	add	r3, sl
    f3bc:	9215      	str	r2, [sp, #84]	; 0x54
    f3be:	f7ff f9c1 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              total +=
    f3c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f3c4:	f10a 0a01 	add.w	sl, sl, #1
              total +=
    f3c8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    f3cc:	4648      	mov	r0, r9
    f3ce:	f7f1 fb97 	bl	b00 <__addsf3>
              filter_count++;
    f3d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
              total +=
    f3d6:	4681      	mov	r9, r0
              filter_count++;
    f3d8:	4638      	mov	r0, r7
    f3da:	f7f1 fb91 	bl	b00 <__addsf3>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f3de:	9a15      	ldr	r2, [sp, #84]	; 0x54
              filter_count++;
    f3e0:	4607      	mov	r7, r0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f3e2:	e7e2      	b.n	f3aa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f3e4:	3201      	adds	r2, #1
    f3e6:	e7d9      	b.n	f39c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
            }
          }
          if (filter_count == 0) return false;
    f3e8:	2100      	movs	r1, #0
    f3ea:	4638      	mov	r0, r7
    f3ec:	f7f1 fe24 	bl	1038 <__aeabi_fcmpeq>
    f3f0:	2800      	cmp	r0, #0
    f3f2:	d139      	bne.n	f468 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ba>
          const float average = total / filter_count;
    f3f4:	4639      	mov	r1, r7
    f3f6:	4648      	mov	r0, r9
    f3f8:	f7f1 fd3e 	bl	e78 <__aeabi_fdiv>
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f3fc:	9b03      	ldr	r3, [sp, #12]
          const float average = total / filter_count;
    f3fe:	4681      	mov	r9, r0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f400:	4641      	mov	r1, r8
    f402:	9300      	str	r3, [sp, #0]
    f404:	4630      	mov	r0, r6
    f406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f40a:	f7ff f99b 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              ActivationFunctionWithMinMax(average, params.float_activation_min,
    f40e:	6a67      	ldr	r7, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f410:	4682      	mov	sl, r0
      if (__a < __b)
    f412:	4649      	mov	r1, r9
    f414:	4638      	mov	r0, r7
                                           params.float_activation_max);
    f416:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
    f41a:	f7f1 fe35 	bl	1088 <__aeabi_fcmpgt>
    f41e:	b900      	cbnz	r0, f422 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x174>
      return __a;
    f420:	464f      	mov	r7, r9
      if (__b < __a)
    f422:	4639      	mov	r1, r7
    f424:	4658      	mov	r0, fp
    f426:	f7f1 fe11 	bl	104c <__aeabi_fcmplt>
    f42a:	b100      	cbz	r0, f42e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x180>
	return __b;
    f42c:	465f      	mov	r7, fp
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f42e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    f430:	f843 702a 	str.w	r7, [r3, sl, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
    f434:	9b03      	ldr	r3, [sp, #12]
    f436:	3301      	adds	r3, #1
    f438:	e785      	b.n	f346 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    f43a:	9b07      	ldr	r3, [sp, #28]
    f43c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f43e:	3301      	adds	r3, #1
    f440:	9307      	str	r3, [sp, #28]
    f442:	9b05      	ldr	r3, [sp, #20]
    f444:	4413      	add	r3, r2
    f446:	9305      	str	r3, [sp, #20]
    f448:	e777      	b.n	f33a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    f44a:	9b06      	ldr	r3, [sp, #24]
    f44c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f44e:	3301      	adds	r3, #1
    f450:	9306      	str	r3, [sp, #24]
    f452:	9b04      	ldr	r3, [sp, #16]
    f454:	4413      	add	r3, r2
    f456:	9304      	str	r3, [sp, #16]
    f458:	e767      	b.n	f32a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7c>
  for (int batch = 0; batch < batches; ++batch) {
    f45a:	f108 0801 	add.w	r8, r8, #1
    f45e:	e75d      	b.n	f31c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x6e>
        }
      }
    }
  }
  return true;
    f460:	2001      	movs	r0, #1
}
    f462:	b017      	add	sp, #92	; 0x5c
    f464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (filter_count == 0) return false;
    f468:	2000      	movs	r0, #0
    f46a:	e7fa      	b.n	f462 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b4>

0000f46c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
    f46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f470:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    f472:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
    f474:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    f476:	2b04      	cmp	r3, #4
                    float* output_data) {
    f478:	4604      	mov	r4, r0
    f47a:	460d      	mov	r5, r1
    f47c:	9207      	str	r2, [sp, #28]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    f47e:	d001      	beq.n	f484 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
    f480:	f000 fce5 	bl	fe4e <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    f484:	6833      	ldr	r3, [r6, #0]
    f486:	2b04      	cmp	r3, #4
    f488:	d1fa      	bne.n	f480 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    f48a:	2300      	movs	r3, #0
    f48c:	4632      	mov	r2, r6
    f48e:	4619      	mov	r1, r3
    f490:	4628      	mov	r0, r5
    f492:	f7ff f979 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f496:	2303      	movs	r3, #3
    f498:	4632      	mov	r2, r6
    f49a:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    f49c:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f49e:	4628      	mov	r0, r5
    f4a0:	f7ff f972 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    f4a4:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    f4a6:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_height = input_shape.Dims(1);
    f4a8:	4628      	mov	r0, r5
    f4aa:	f7ff f92a 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    f4ae:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    f4b0:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_width = input_shape.Dims(2);
    f4b2:	4628      	mov	r0, r5
    f4b4:	f7ff f925 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    f4b8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    f4ba:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
    f4bc:	4630      	mov	r0, r6
    f4be:	f7ff f920 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    f4c2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    f4c4:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
    f4c6:	4630      	mov	r0, r6
    f4c8:	f7ff f91b 	bl	e702 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
    f4cc:	f04f 0900 	mov.w	r9, #0
  const int stride_height = params.stride_height;
    f4d0:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
    f4d2:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    f4d4:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
    f4d6:	6923      	ldr	r3, [r4, #16]
    f4d8:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
    f4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4dc:	4599      	cmp	r9, r3
    f4de:	f280 809a 	bge.w	f616 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1aa>
    f4e2:	2300      	movs	r3, #0
    f4e4:	9303      	str	r3, [sp, #12]
    for (int out_y = 0; out_y < output_height; ++out_y) {
    f4e6:	9305      	str	r3, [sp, #20]
    f4e8:	9b05      	ldr	r3, [sp, #20]
    f4ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f4ec:	4293      	cmp	r3, r2
    f4ee:	f280 808f 	bge.w	f610 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
    f4f2:	2300      	movs	r3, #0
    f4f4:	9304      	str	r3, [sp, #16]
      for (int out_x = 0; out_x < output_width; ++out_x) {
    f4f6:	9306      	str	r3, [sp, #24]
    f4f8:	9b06      	ldr	r3, [sp, #24]
    f4fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f4fc:	4293      	cmp	r3, r2
    f4fe:	da7f      	bge.n	f600 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x194>
        for (int channel = 0; channel < depth; ++channel) {
    f500:	2700      	movs	r7, #0
    f502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f504:	429f      	cmp	r7, r3
    f506:	da73      	bge.n	f5f0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x184>
              (out_x * stride_width) - params.padding_values.width;
    f508:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_x_origin =
    f50c:	9a04      	ldr	r2, [sp, #16]
          const int in_y_origin =
    f50e:	9903      	ldr	r1, [sp, #12]
          const int in_x_origin =
    f510:	1ad2      	subs	r2, r2, r3
    f512:	9212      	str	r2, [sp, #72]	; 0x48
              (out_y * stride_height) - params.padding_values.height;
    f514:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int in_y_origin =
    f518:	eba1 0a02 	sub.w	sl, r1, r2
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
    f51c:	9904      	ldr	r1, [sp, #16]
    f51e:	1a5b      	subs	r3, r3, r1
    f520:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    f524:	9113      	str	r1, [sp, #76]	; 0x4c
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
    f526:	990d      	ldr	r1, [sp, #52]	; 0x34
    f528:	440b      	add	r3, r1
    f52a:	69a1      	ldr	r1, [r4, #24]
    f52c:	428b      	cmp	r3, r1
    f52e:	bfa8      	it	ge
    f530:	460b      	movge	r3, r1
    f532:	930c      	str	r3, [sp, #48]	; 0x30
          const int filter_y_start = std::max(0, -in_y_origin);
    f534:	9b03      	ldr	r3, [sp, #12]
    f536:	1ad2      	subs	r2, r2, r3
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
    f538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f53a:	eb02 0b03 	add.w	fp, r2, r3
    f53e:	6963      	ldr	r3, [r4, #20]
    f540:	459b      	cmp	fp, r3
    f542:	bfa8      	it	ge
    f544:	469b      	movge	fp, r3
          float max = std::numeric_limits<float>::lowest();
    f546:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    f54a:	2a00      	cmp	r2, #0
    f54c:	bfac      	ite	ge
    f54e:	4452      	addge	r2, sl
    f550:	f10a 0200 	addlt.w	r2, sl, #0
    f554:	f8cd b020 	str.w	fp, [sp, #32]
    f558:	9317      	str	r3, [sp, #92]	; 0x5c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f55a:	9908      	ldr	r1, [sp, #32]
    f55c:	eba2 030a 	sub.w	r3, r2, sl
    f560:	4299      	cmp	r1, r3
    f562:	dd25      	ble.n	f5b0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x144>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f564:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    f568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f56a:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    f56e:	4598      	cmp	r8, r3
    f570:	da1c      	bge.n	f5ac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
    f572:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f574:	4649      	mov	r1, r9
    f576:	4443      	add	r3, r8
    f578:	4628      	mov	r0, r5
    f57a:	9700      	str	r7, [sp, #0]
    f57c:	9215      	str	r2, [sp, #84]	; 0x54
    f57e:	f7ff f8e1 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    f582:	9b07      	ldr	r3, [sp, #28]
      if (__a < __b)
    f584:	4659      	mov	r1, fp
    f586:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    f58a:	9314      	str	r3, [sp, #80]	; 0x50
    f58c:	9b07      	ldr	r3, [sp, #28]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f58e:	f108 0801 	add.w	r8, r8, #1
    f592:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f596:	f7f1 fd77 	bl	1088 <__aeabi_fcmpgt>
      return __a;
    f59a:	aa17      	add	r2, sp, #92	; 0x5c
    f59c:	2800      	cmp	r0, #0
    f59e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f5a0:	bf08      	it	eq
    f5a2:	4613      	moveq	r3, r2
              max = std::max(
    f5a4:	681b      	ldr	r3, [r3, #0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f5a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
              max = std::max(
    f5a8:	9317      	str	r3, [sp, #92]	; 0x5c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    f5aa:	e7dd      	b.n	f568 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    f5ac:	3201      	adds	r2, #1
    f5ae:	e7d4      	b.n	f55a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f5b0:	4649      	mov	r1, r9
    f5b2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    f5b6:	4630      	mov	r0, r6
    f5b8:	9700      	str	r7, [sp, #0]
    f5ba:	f7ff f8c3 	bl	e744 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              ActivationFunctionWithMinMax(max, params.float_activation_min,
    f5be:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    f5c2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f5c6:	9008      	str	r0, [sp, #32]
      if (__a < __b)
    f5c8:	4641      	mov	r1, r8
    f5ca:	4658      	mov	r0, fp
                                           params.float_activation_max);
    f5cc:	f8d4 a028 	ldr.w	sl, [r4, #40]	; 0x28
    f5d0:	f7f1 fd3c 	bl	104c <__aeabi_fcmplt>
    f5d4:	b900      	cbnz	r0, f5d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16c>
      return __a;
    f5d6:	46d8      	mov	r8, fp
      if (__b < __a)
    f5d8:	4641      	mov	r1, r8
    f5da:	4650      	mov	r0, sl
    f5dc:	f7f1 fd36 	bl	104c <__aeabi_fcmplt>
    f5e0:	b100      	cbz	r0, f5e4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x178>
	return __b;
    f5e2:	46d0      	mov	r8, sl
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f5e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f5e6:	9a08      	ldr	r2, [sp, #32]
        for (int channel = 0; channel < depth; ++channel) {
    f5e8:	3701      	adds	r7, #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    f5ea:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
    f5ee:	e788      	b.n	f502 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x96>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    f5f0:	9b06      	ldr	r3, [sp, #24]
    f5f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f5f4:	3301      	adds	r3, #1
    f5f6:	9306      	str	r3, [sp, #24]
    f5f8:	9b04      	ldr	r3, [sp, #16]
    f5fa:	4413      	add	r3, r2
    f5fc:	9304      	str	r3, [sp, #16]
    f5fe:	e77b      	b.n	f4f8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    f600:	9b05      	ldr	r3, [sp, #20]
    f602:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f604:	3301      	adds	r3, #1
    f606:	9305      	str	r3, [sp, #20]
    f608:	9b03      	ldr	r3, [sp, #12]
    f60a:	4413      	add	r3, r2
    f60c:	9303      	str	r3, [sp, #12]
    f60e:	e76b      	b.n	f4e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7c>
  for (int batch = 0; batch < batches; ++batch) {
    f610:	f109 0901 	add.w	r9, r9, #1
    f614:	e761      	b.n	f4da <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x6e>
        }
      }
    }
  }
}
    f616:	b019      	add	sp, #100	; 0x64
    f618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f61c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    OpDataPooling* data) {
    f61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      params->stride_height, params->stride_width,
    f620:	e9d1 7901 	ldrd	r7, r9, [r1, #4]
      params->filter_width, params->padding, &out_height, &out_width);
    f624:	e9d1 5603 	ldrd	r5, r6, [r1, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    f628:	2401      	movs	r4, #1
    f62a:	f891 b000 	ldrb.w	fp, [r1]
  int height = SizeOfDimension(input, 1);
    f62e:	6893      	ldr	r3, [r2, #8]
                                    OpDataPooling* data) {
    f630:	b085      	sub	sp, #20
  return t->dims->data[dim];
    f632:	e9d3 a802 	ldrd	sl, r8, [r3, #8]
    f636:	462a      	mov	r2, r5
    f638:	463b      	mov	r3, r7
    f63a:	4641      	mov	r1, r8
    f63c:	9400      	str	r4, [sp, #0]
    f63e:	4658      	mov	r0, fp
    f640:	f7ff f9bf 	bl	e9c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    f644:	464b      	mov	r3, r9
    f646:	4632      	mov	r2, r6
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    f648:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    f64a:	9400      	str	r4, [sp, #0]
    f64c:	4651      	mov	r1, sl
    f64e:	4658      	mov	r0, fp
    f650:	f7ff f9b7 	bl	e9c2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
    f654:	eba6 060a 	sub.w	r6, r6, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
    f658:	3801      	subs	r0, #1
  int total_padding =
    f65a:	fb09 6900 	mla	r9, r9, r0, r6
}
    f65e:	2000      	movs	r0, #0
      ((out_size - 1) * stride + effective_filter_size - in_size);
    f660:	9b03      	ldr	r3, [sp, #12]
  int total_padding =
    f662:	eba5 0508 	sub.w	r5, r5, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
    f666:	1e5c      	subs	r4, r3, #1
  int total_padding =
    f668:	fb07 5704 	mla	r7, r7, r4, r5
      params->filter_width, params->padding, &out_height, &out_width);
    f66c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  total_padding = total_padding > 0 ? total_padding : 0;
    f66e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
    f672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
    f676:	107b      	asrs	r3, r7, #1
    f678:	6013      	str	r3, [r2, #0]
  *offset = total_padding % 2;
    f67a:	f007 0701 	and.w	r7, r7, #1
  return total_padding / 2;
    f67e:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
    f682:	f009 0601 	and.w	r6, r9, #1
    f686:	6053      	str	r3, [r2, #4]
    f688:	6097      	str	r7, [r2, #8]
    f68a:	60d6      	str	r6, [r2, #12]
}
    f68c:	b005      	add	sp, #20
    f68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f692 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
    f692:	b530      	push	{r4, r5, lr}
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
    f694:	6891      	ldr	r1, [r2, #8]
                             TfLiteEvalTensor* output) {
    f696:	b09b      	sub	sp, #108	; 0x6c
  op_params.stride_height = params->stride_height;
    f698:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
    f69a:	6851      	ldr	r1, [r2, #4]
                             TfLiteEvalTensor* output) {
    f69c:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
  op_params.stride_width = params->stride_width;
    f6a0:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
    f6a2:	6911      	ldr	r1, [r2, #16]
  op_params.filter_width = params->filter_width;
    f6a4:	68d2      	ldr	r2, [r2, #12]
  op_params.filter_height = params->filter_height;
    f6a6:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
    f6a8:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
    f6aa:	685a      	ldr	r2, [r3, #4]
  op_params.padding_values.width = data->padding.width;
  op_params.float_activation_min = data->activation_min_f32;
  op_params.float_activation_max = data->activation_max_f32;
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    f6ac:	4629      	mov	r1, r5
  op_params.padding_values.height = data->padding.height;
    f6ae:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
    f6b2:	681a      	ldr	r2, [r3, #0]
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    f6b4:	a803      	add	r0, sp, #12
  op_params.padding_values.width = data->padding.width;
    f6b6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.float_activation_min = data->activation_min_f32;
    f6ba:	699a      	ldr	r2, [r3, #24]
  op_params.float_activation_max = data->activation_max_f32;
    f6bc:	69db      	ldr	r3, [r3, #28]
  op_params.float_activation_min = data->activation_min_f32;
    f6be:	9218      	str	r2, [sp, #96]	; 0x60
  op_params.float_activation_max = data->activation_max_f32;
    f6c0:	9319      	str	r3, [sp, #100]	; 0x64
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    f6c2:	f7ff fbe1 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    f6c6:	b90d      	cbnz	r5, f6cc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x3a>
    f6c8:	f000 fbc1 	bl	fe4e <abort>
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
    f6cc:	4621      	mov	r1, r4
    f6ce:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
    f6d0:	682d      	ldr	r5, [r5, #0]
    f6d2:	f7ff fbd9 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f6d6:	b104      	cbz	r4, f6da <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x48>
    f6d8:	6824      	ldr	r4, [r4, #0]
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    f6da:	462a      	mov	r2, r5
    f6dc:	ab09      	add	r3, sp, #36	; 0x24
    f6de:	a903      	add	r1, sp, #12
    f6e0:	9400      	str	r4, [sp, #0]
    f6e2:	a80f      	add	r0, sp, #60	; 0x3c
    f6e4:	f7ff fde3 	bl	f2ae <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
    f6e8:	a809      	add	r0, sp, #36	; 0x24
    f6ea:	f7fe ffe3 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    f6ee:	a803      	add	r0, sp, #12
    f6f0:	f7fe ffe0 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
    f6f4:	b01b      	add	sp, #108	; 0x6c
    f6f6:	bd30      	pop	{r4, r5, pc}

0000f6f8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:

void AveragePoolingEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                                 const TfLitePoolParams* params,
                                 const OpDataPooling* data,
                                 const TfLiteEvalTensor* input,
                                 TfLiteEvalTensor* output) {
    f6f8:	b530      	push	{r4, r5, lr}
    f6fa:	b09b      	sub	sp, #108	; 0x6c
    f6fc:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
  TFLITE_DCHECK(input->type == kTfLiteInt8);
    f700:	7a29      	ldrb	r1, [r5, #8]
    f702:	2909      	cmp	r1, #9
    f704:	d001      	beq.n	f70a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12>
    f706:	f000 fba2 	bl	fe4e <abort>

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
    f70a:	6891      	ldr	r1, [r2, #8]
  op_params.padding_values.width = data->padding.width;
  op_params.quantized_activation_min = data->activation_min;
  op_params.quantized_activation_max = data->activation_max;

  reference_integer_ops::AveragePool(
      op_params, tflite::micro::GetTensorShape(input),
    f70c:	a803      	add	r0, sp, #12
  op_params.stride_height = params->stride_height;
    f70e:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
    f710:	6851      	ldr	r1, [r2, #4]
    f712:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
    f714:	6911      	ldr	r1, [r2, #16]
  op_params.filter_width = params->filter_width;
    f716:	68d2      	ldr	r2, [r2, #12]
  op_params.filter_height = params->filter_height;
    f718:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
    f71a:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
    f71c:	685a      	ldr	r2, [r3, #4]
      op_params, tflite::micro::GetTensorShape(input),
    f71e:	4629      	mov	r1, r5
  op_params.padding_values.height = data->padding.height;
    f720:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
    f724:	681a      	ldr	r2, [r3, #0]
    f726:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
    f72a:	691a      	ldr	r2, [r3, #16]
  op_params.quantized_activation_max = data->activation_max;
    f72c:	695b      	ldr	r3, [r3, #20]
  op_params.quantized_activation_min = data->activation_min;
    f72e:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
    f730:	9317      	str	r3, [sp, #92]	; 0x5c
      op_params, tflite::micro::GetTensorShape(input),
    f732:	f7ff fba9 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(output),
    f736:	4621      	mov	r1, r4
    f738:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
    f73a:	682d      	ldr	r5, [r5, #0]
    f73c:	f7ff fba4 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f740:	b104      	cbz	r4, f744 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x4c>
    f742:	6824      	ldr	r4, [r4, #0]
  reference_integer_ops::AveragePool(
    f744:	462a      	mov	r2, r5
    f746:	ab09      	add	r3, sp, #36	; 0x24
    f748:	a903      	add	r1, sp, #12
    f74a:	9400      	str	r4, [sp, #0]
    f74c:	a80f      	add	r0, sp, #60	; 0x3c
    f74e:	f7ff fc07 	bl	ef60 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
      tflite::micro::GetTensorShape(output),
    f752:	a809      	add	r0, sp, #36	; 0x24
    f754:	f7fe ffae 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
    f758:	a803      	add	r0, sp, #12
    f75a:	f7fe ffab 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
}
    f75e:	b01b      	add	sp, #108	; 0x6c
    f760:	bd30      	pop	{r4, r5, pc}

0000f762 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
    f762:	b530      	push	{r4, r5, lr}
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
    f764:	6891      	ldr	r1, [r2, #8]
                         TfLiteEvalTensor* output) {
    f766:	b09b      	sub	sp, #108	; 0x6c
  op_params.stride_height = params->stride_height;
    f768:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
    f76a:	6851      	ldr	r1, [r2, #4]
                         TfLiteEvalTensor* output) {
    f76c:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
  op_params.stride_width = params->stride_width;
    f770:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
    f772:	6911      	ldr	r1, [r2, #16]
  op_params.filter_width = params->filter_width;
    f774:	68d2      	ldr	r2, [r2, #12]
  op_params.filter_height = params->filter_height;
    f776:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
    f778:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
    f77a:	685a      	ldr	r2, [r3, #4]
  op_params.padding_values.width = data->padding.width;
  op_params.float_activation_min = data->activation_min_f32;
  op_params.float_activation_max = data->activation_max_f32;
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    f77c:	4629      	mov	r1, r5
  op_params.padding_values.height = data->padding.height;
    f77e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
    f782:	681a      	ldr	r2, [r3, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    f784:	a803      	add	r0, sp, #12
  op_params.padding_values.width = data->padding.width;
    f786:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.float_activation_min = data->activation_min_f32;
    f78a:	699a      	ldr	r2, [r3, #24]
  op_params.float_activation_max = data->activation_max_f32;
    f78c:	69db      	ldr	r3, [r3, #28]
  op_params.float_activation_min = data->activation_min_f32;
    f78e:	9218      	str	r2, [sp, #96]	; 0x60
  op_params.float_activation_max = data->activation_max_f32;
    f790:	9319      	str	r3, [sp, #100]	; 0x64
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    f792:	f7ff fb79 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    f796:	b90d      	cbnz	r5, f79c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a>
    f798:	f000 fb59 	bl	fe4e <abort>
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
    f79c:	4621      	mov	r1, r4
    f79e:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
    f7a0:	682d      	ldr	r5, [r5, #0]
    f7a2:	f7ff fb71 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f7a6:	b104      	cbz	r4, f7aa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x48>
    f7a8:	6824      	ldr	r4, [r4, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    f7aa:	462a      	mov	r2, r5
    f7ac:	ab09      	add	r3, sp, #36	; 0x24
    f7ae:	a903      	add	r1, sp, #12
    f7b0:	a80f      	add	r0, sp, #60	; 0x3c
    f7b2:	9400      	str	r4, [sp, #0]
    f7b4:	f7ff fe5a 	bl	f46c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
    f7b8:	a809      	add	r0, sp, #36	; 0x24
    f7ba:	f7fe ff7b 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    f7be:	a803      	add	r0, sp, #12
    f7c0:	f7fe ff78 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
    f7c4:	b01b      	add	sp, #108	; 0x6c
    f7c6:	bd30      	pop	{r4, r5, pc}

0000f7c8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
    f7c8:	b530      	push	{r4, r5, lr}
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
    f7ca:	6891      	ldr	r1, [r2, #8]
                             TfLiteEvalTensor* output) {
    f7cc:	b09b      	sub	sp, #108	; 0x6c
  op_params.stride_height = params->stride_height;
    f7ce:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
    f7d0:	6851      	ldr	r1, [r2, #4]
                             TfLiteEvalTensor* output) {
    f7d2:	e9dd 541e 	ldrd	r5, r4, [sp, #120]	; 0x78
  op_params.stride_width = params->stride_width;
    f7d6:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
    f7d8:	6911      	ldr	r1, [r2, #16]
  op_params.filter_width = params->filter_width;
    f7da:	68d2      	ldr	r2, [r2, #12]
  op_params.filter_height = params->filter_height;
    f7dc:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
    f7de:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
    f7e0:	685a      	ldr	r2, [r3, #4]
  op_params.padding_values.width = data->padding.width;
  op_params.quantized_activation_min = data->activation_min;
  op_params.quantized_activation_max = data->activation_max;

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
    f7e2:	4629      	mov	r1, r5
  op_params.padding_values.height = data->padding.height;
    f7e4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
    f7e8:	681a      	ldr	r2, [r3, #0]
                                 tflite::micro::GetTensorShape(input),
    f7ea:	a803      	add	r0, sp, #12
  op_params.padding_values.width = data->padding.width;
    f7ec:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
    f7f0:	691a      	ldr	r2, [r3, #16]
  op_params.quantized_activation_max = data->activation_max;
    f7f2:	695b      	ldr	r3, [r3, #20]
  op_params.quantized_activation_min = data->activation_min;
    f7f4:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
    f7f6:	9317      	str	r3, [sp, #92]	; 0x5c
                                 tflite::micro::GetTensorShape(input),
    f7f8:	f7ff fb46 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    f7fc:	b90d      	cbnz	r5, f802 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a>
    f7fe:	f000 fb26 	bl	fe4e <abort>
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
    f802:	4621      	mov	r1, r4
    f804:	a809      	add	r0, sp, #36	; 0x24
  return reinterpret_cast<const T*>(tensor->data.raw);
    f806:	682d      	ldr	r5, [r5, #0]
    f808:	f7ff fb3e 	bl	ee88 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    f80c:	b104      	cbz	r4, f810 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x48>
    f80e:	6824      	ldr	r4, [r4, #0]
  reference_integer_ops::MaxPool(op_params,
    f810:	462a      	mov	r2, r5
    f812:	ab09      	add	r3, sp, #36	; 0x24
    f814:	a903      	add	r1, sp, #12
    f816:	a80f      	add	r0, sp, #60	; 0x3c
    f818:	9400      	str	r4, [sp, #0]
    f81a:	f7ff fc78 	bl	f10e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
                                 tflite::micro::GetTensorShape(output),
    f81e:	a809      	add	r0, sp, #36	; 0x24
    f820:	f7fe ff48 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorShape(input),
    f824:	a803      	add	r0, sp, #12
    f826:	f7fe ff45 	bl	e6b4 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
    f82a:	b01b      	add	sp, #108	; 0x6c
    f82c:	bd30      	pop	{r4, r5, pc}

0000f82e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    f82e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f830:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
    f832:	4605      	mov	r5, r0
    f834:	b908      	cbnz	r0, f83a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
    f836:	f000 fb0a 	bl	fe4e <abort>
  TFLITE_DCHECK(node != nullptr);
    f83a:	2900      	cmp	r1, #0
    f83c:	d0fb      	beq.n	f836 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f83e:	680a      	ldr	r2, [r1, #0]
    f840:	6d43      	ldr	r3, [r0, #84]	; 0x54
    f842:	6851      	ldr	r1, [r2, #4]
    f844:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f846:	6872      	ldr	r2, [r6, #4]
    f848:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    f84a:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f84c:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f84e:	4628      	mov	r0, r5
    f850:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
    f852:	a901      	add	r1, sp, #4
    f854:	4606      	mov	r6, r0
    f856:	7a20      	ldrb	r0, [r4, #8]
    f858:	f7fe f9e2 	bl	dc20 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    f85c:	4605      	mov	r5, r0
    f85e:	b998      	cbnz	r0, f888 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  input_bytes *= ElementCount(*input->dims);
    f860:	6860      	ldr	r0, [r4, #4]
    f862:	f7fe fa98 	bl	dd96 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    f866:	9b01      	ldr	r3, [sp, #4]
  if (input->data.raw != output->data.raw) {
    f868:	6822      	ldr	r2, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
    f86a:	4358      	muls	r0, r3
  if (input->data.raw != output->data.raw) {
    f86c:	6833      	ldr	r3, [r6, #0]
  input_bytes *= ElementCount(*input->dims);
    f86e:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
    f870:	429a      	cmp	r2, r3
    f872:	d009      	beq.n	f888 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    for (size_t i = 0; i < input_bytes; ++i) {
    f874:	462b      	mov	r3, r5
    f876:	9a01      	ldr	r2, [sp, #4]
    f878:	429a      	cmp	r2, r3
    f87a:	d905      	bls.n	f888 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      output->data.raw[i] = input->data.raw[i];
    f87c:	6822      	ldr	r2, [r4, #0]
    f87e:	5cd1      	ldrb	r1, [r2, r3]
    f880:	6832      	ldr	r2, [r6, #0]
    f882:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
    f884:	3301      	adds	r3, #1
    f886:	e7f6      	b.n	f876 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
    f888:	4628      	mov	r0, r5
    f88a:	b002      	add	sp, #8
    f88c:	bd70      	pop	{r4, r5, r6, pc}

0000f88e <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    f88e:	11c3      	asrs	r3, r0, #7
    f890:	f503 7380 	add.w	r3, r3, #256	; 0x100
  assert(index < 512 && "LUT index out of range.");
  int16_t offset = value & 0x7f;

  // base and slope are Q0.15
  int16_t base = lut[index];
    f894:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
    f898:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    f89c:	884b      	ldrh	r3, [r1, #2]

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    f89e:	2140      	movs	r1, #64	; 0x40
  int16_t slope = lut[index + 1] - lut[index];
    f8a0:	1a9b      	subs	r3, r3, r2
  int16_t offset = value & 0x7f;
    f8a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    f8a6:	fb13 1000 	smlabb	r0, r3, r0, r1

  // Q0.15 + Q0.15
  return base + delta;
    f8aa:	eb02 10e0 	add.w	r0, r2, r0, asr #7
}
    f8ae:	b200      	sxth	r0, r0
    f8b0:	4770      	bx	lr

0000f8b2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
                    const RuntimeShape& output_shape, float* output_data) {
    f8b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8b6:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    f8b8:	680e      	ldr	r6, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
    f8ba:	b087      	sub	sp, #28
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    f8bc:	3e01      	subs	r6, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f8be:	4631      	mov	r1, r6
                    const RuntimeShape& output_shape, float* output_data) {
    f8c0:	9001      	str	r0, [sp, #4]
    f8c2:	9202      	str	r2, [sp, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f8c4:	4620      	mov	r0, r4
    f8c6:	461a      	mov	r2, r3
                    const RuntimeShape& output_shape, float* output_data) {
    f8c8:	461d      	mov	r5, r3
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f8ca:	f7ff fb07 	bl	eedc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    f8ce:	4633      	mov	r3, r6
    f8d0:	4631      	mov	r1, r6
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f8d2:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    f8d4:	462a      	mov	r2, r5
    f8d6:	4620      	mov	r0, r4
    f8d8:	f7fe ff56 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    f8dc:	2600      	movs	r6, #0
    f8de:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    f8e0:	46b1      	mov	r9, r6
    f8e2:	9b00      	ldr	r3, [sp, #0]
    f8e4:	4599      	cmp	r9, r3
    f8e6:	da53      	bge.n	f990 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xde>
    float max = std::numeric_limits<float>::lowest();
    f8e8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    f8ec:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    f8ee:	9b02      	ldr	r3, [sp, #8]
    f8f0:	f04f 0a00 	mov.w	sl, #0
    f8f4:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    float max = std::numeric_limits<float>::lowest();
    f8f8:	46bb      	mov	fp, r7
    f8fa:	00b5      	lsls	r5, r6, #2
    for (int c = 0; c < depth; ++c) {
    f8fc:	45a2      	cmp	sl, r4
    f8fe:	db24      	blt.n	f94a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
    f900:	9b10      	ldr	r3, [sp, #64]	; 0x40
    for (int c = 0; c < depth; ++c) {
    f902:	f04f 0a00 	mov.w	sl, #0
    f906:	441d      	add	r5, r3
    for (int c = 0; c < depth; ++c) {
    f908:	46ab      	mov	fp, r5
    float sum = 0.f;
    f90a:	f04f 0800 	mov.w	r8, #0
    for (int c = 0; c < depth; ++c) {
    f90e:	45a2      	cmp	sl, r4
    f910:	da2d      	bge.n	f96e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbc>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    f912:	9905      	ldr	r1, [sp, #20]
    f914:	f857 0b04 	ldr.w	r0, [r7], #4
    f918:	f7f1 f8f0 	bl	afc <__aeabi_fsub>
                                   static_cast<float>(params.beta));
    f91c:	9b01      	ldr	r3, [sp, #4]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    f91e:	9003      	str	r0, [sp, #12]
                                   static_cast<float>(params.beta));
    f920:	e9d3 0100 	ldrd	r0, r1, [r3]
    f924:	f7f1 f896 	bl	a54 <__aeabi_d2f>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    f928:	9b03      	ldr	r3, [sp, #12]
                                   static_cast<float>(params.beta));
    f92a:	4601      	mov	r1, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    f92c:	4618      	mov	r0, r3
    f92e:	f7f1 f9ef 	bl	d10 <__aeabi_fmul>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    f932:	f7fb feb9 	bl	b6a8 <expf>
    f936:	4601      	mov	r1, r0
      output_data[i * depth + c] = exp_c;
    f938:	f84b 0b04 	str.w	r0, [fp], #4
      sum += exp_c;
    f93c:	4640      	mov	r0, r8
    f93e:	f7f1 f8df 	bl	b00 <__addsf3>
    for (int c = 0; c < depth; ++c) {
    f942:	f10a 0a01 	add.w	sl, sl, #1
      sum += exp_c;
    f946:	4680      	mov	r8, r0
    for (int c = 0; c < depth; ++c) {
    f948:	e7e1      	b.n	f90e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x5c>
      max = std::max(max, input_data[i * depth + c]);
    f94a:	46d8      	mov	r8, fp
      if (__a < __b)
    f94c:	9905      	ldr	r1, [sp, #20]
    f94e:	f8d8 0000 	ldr.w	r0, [r8]
    f952:	f7f1 fb99 	bl	1088 <__aeabi_fcmpgt>
      return __a;
    f956:	ab05      	add	r3, sp, #20
    f958:	2800      	cmp	r0, #0
    f95a:	bf08      	it	eq
    f95c:	4698      	moveq	r8, r3
    f95e:	f8d8 3000 	ldr.w	r3, [r8]
    f962:	f10b 0b04 	add.w	fp, fp, #4
    f966:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    f968:	f10a 0a01 	add.w	sl, sl, #1
    f96c:	e7c6      	b.n	f8fc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    for (int c = 0; c < depth; ++c) {
    f96e:	f04f 0a00 	mov.w	sl, #0
    f972:	45a2      	cmp	sl, r4
    f974:	da08      	bge.n	f988 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd6>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    f976:	6828      	ldr	r0, [r5, #0]
    f978:	4641      	mov	r1, r8
    f97a:	f7f1 fa7d 	bl	e78 <__aeabi_fdiv>
    for (int c = 0; c < depth; ++c) {
    f97e:	f10a 0a01 	add.w	sl, sl, #1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    f982:	f845 0b04 	str.w	r0, [r5], #4
    for (int c = 0; c < depth; ++c) {
    f986:	e7f4      	b.n	f972 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xc0>
  for (int i = 0; i < outer_size; ++i) {
    f988:	f109 0901 	add.w	r9, r9, #1
    f98c:	4426      	add	r6, r4
    f98e:	e7a8      	b.n	f8e2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x30>
}
    f990:	b007      	add	sp, #28
    f992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f996 <_ZN6tflite13GetReciprocalEiiPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
    f996:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
    f998:	fab0 f380 	clz	r3, r0
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    f99c:	1ac9      	subs	r1, r1, r3
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    f99e:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    f9a0:	6011      	str	r1, [r2, #0]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    f9a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    f9a6:	f7f9 fe59 	bl	965c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
    f9aa:	bd08      	pop	{r3, pc}

0000f9ac <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9b0:	460c      	mov	r4, r1
    f9b2:	461d      	mov	r5, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
    f9b4:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    f9b8:	680e      	ldr	r6, [r1, #0]
inline void Softmax(const SoftmaxParams& params,
    f9ba:	b08b      	sub	sp, #44	; 0x2c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    f9bc:	3e01      	subs	r6, #1
  const int32_t input_beta_left_shift = params.input_left_shift;
    f9be:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
    f9c0:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f9c2:	4631      	mov	r1, r6
    f9c4:	4620      	mov	r0, r4
inline void Softmax(const SoftmaxParams& params,
    f9c6:	9203      	str	r2, [sp, #12]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f9c8:	462a      	mov	r2, r5
  const int diff_min = params.diff_min;
    f9ca:	9301      	str	r3, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f9cc:	f7ff fa86 	bl	eedc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    f9d0:	462a      	mov	r2, r5
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    f9d2:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    f9d4:	4633      	mov	r3, r6
    f9d6:	4620      	mov	r0, r4
    f9d8:	4631      	mov	r1, r6
    f9da:	f7fe fed5 	bl	e788 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    f9de:	2500      	movs	r5, #0
    f9e0:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    f9e2:	46a8      	mov	r8, r5
    f9e4:	9b02      	ldr	r3, [sp, #8]
    f9e6:	4598      	cmp	r8, r3
    f9e8:	da74      	bge.n	fad4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x128>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    f9ea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    f9ee:	f88d 3017 	strb.w	r3, [sp, #23]
    f9f2:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    f9f4:	2200      	movs	r2, #0
    f9f6:	195f      	adds	r7, r3, r5
    InputT max_in_row = std::numeric_limits<InputT>::min();
    f9f8:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
    f9fa:	42a2      	cmp	r2, r4
    f9fc:	da10      	bge.n	fa20 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    f9fe:	460b      	mov	r3, r1
      if (__a < __b)
    fa00:	f99d 0017 	ldrsb.w	r0, [sp, #23]
    fa04:	f993 6000 	ldrsb.w	r6, [r3]
    fa08:	3101      	adds	r1, #1
    fa0a:	4286      	cmp	r6, r0
      return __a;
    fa0c:	f10d 0017 	add.w	r0, sp, #23
    fa10:	bfd8      	it	le
    fa12:	4603      	movle	r3, r0
    fa14:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
    fa18:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fa1a:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
    fa1e:	e7ec      	b.n	f9fa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    fa20:	2600      	movs	r6, #0
    fa22:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
    fa24:	46b1      	mov	r9, r6
    fa26:	45a1      	cmp	r9, r4
    fa28:	da15      	bge.n	fa56 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fa2a:	f99d 3017 	ldrsb.w	r3, [sp, #23]
    fa2e:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32_t input_diff =
    fa32:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
    fa34:	9b01      	ldr	r3, [sp, #4]
    fa36:	4283      	cmp	r3, r0
    fa38:	dc0a      	bgt.n	fa50 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    fa3a:	9b00      	ldr	r3, [sp, #0]
    fa3c:	4659      	mov	r1, fp
    fa3e:	4098      	lsls	r0, r3
    fa40:	f7f9 fdbc 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    fa44:	f7f9 fed0 	bl	97e8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    fa48:	210c      	movs	r1, #12
    fa4a:	f7f9 fde1 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    fa4e:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
    fa50:	f109 0901 	add.w	r9, r9, #1
    fa54:	e7e7      	b.n	fa26 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7a>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    fa56:	4630      	mov	r0, r6
    fa58:	210c      	movs	r1, #12
    fa5a:	aa06      	add	r2, sp, #24
    fa5c:	f7ff ff9b 	bl	f996 <_ZN6tflite13GetReciprocalEiiPi>
    for (int c = 0; c < depth; ++c) {
    fa60:	f04f 0900 	mov.w	r9, #0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    fa64:	4682      	mov	sl, r0
    fa66:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fa68:	195e      	adds	r6, r3, r5
    for (int c = 0; c < depth; ++c) {
    fa6a:	45a1      	cmp	r9, r4
    fa6c:	da2e      	bge.n	facc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fa6e:	f99d 1017 	ldrsb.w	r1, [sp, #23]
    fa72:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32_t input_diff =
    fa76:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    fa78:	9901      	ldr	r1, [sp, #4]
    fa7a:	4281      	cmp	r1, r0
    fa7c:	dc23      	bgt.n	fac6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11a>
    fa7e:	9b00      	ldr	r3, [sp, #0]
    fa80:	4659      	mov	r1, fp
    fa82:	4098      	lsls	r0, r3
    fa84:	f7f9 fd9a 	bl	95bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    fa88:	f7f9 feae 	bl	97e8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    fa8c:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    fa8e:	4650      	mov	r0, sl
    fa90:	f7ff fa59 	bl	ef46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
    fa94:	9906      	ldr	r1, [sp, #24]
    fa96:	3117      	adds	r1, #23
    fa98:	f7f9 fdba 	bl	9610 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    fa9c:	237f      	movs	r3, #127	; 0x7f
      if (__b < __a)
    fa9e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
            unsat_output +
    faa2:	3880      	subs	r0, #128	; 0x80
    faa4:	4298      	cmp	r0, r3
	return __b;
    faa6:	bfcc      	ite	gt
    faa8:	a908      	addgt	r1, sp, #32
      return __a;
    faaa:	a907      	addle	r1, sp, #28
        const int32_t shifted_output =
    faac:	9007      	str	r0, [sp, #28]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    faae:	9308      	str	r3, [sp, #32]
      if (__a < __b)
    fab0:	6808      	ldr	r0, [r1, #0]
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    fab2:	9209      	str	r2, [sp, #36]	; 0x24
    fab4:	3080      	adds	r0, #128	; 0x80
	return __b;
    fab6:	bfb8      	it	lt
    fab8:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    faba:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    fabc:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
    fabe:	f109 0901 	add.w	r9, r9, #1
    fac2:	3601      	adds	r6, #1
    fac4:	e7d1      	b.n	fa6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbe>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    fac6:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    faca:	e7f7      	b.n	fabc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x110>
  for (int i = 0; i < outer_size; ++i) {
    facc:	f108 0801 	add.w	r8, r8, #1
    fad0:	4425      	add	r5, r4
    fad2:	e787      	b.n	f9e4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
}
    fad4:	b00b      	add	sp, #44	; 0x2c
    fad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fada <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    fada:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    fade:	b508      	push	{r3, lr}
    fae0:	f7f1 f80e 	bl	b00 <__addsf3>
    fae4:	4601      	mov	r1, r0
    fae6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    faea:	f7f1 f9c5 	bl	e78 <__aeabi_fdiv>
    faee:	bd08      	pop	{r3, pc}

0000faf0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    faf0:	f7fb bdda 	b.w	b6a8 <expf>

0000faf4 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    faf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
    faf6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
    faf8:	b90b      	cbnz	r3, fafe <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
    fafa:	f000 f9a8 	bl	fe4e <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
    fafe:	2138      	movs	r1, #56	; 0x38
}
    fb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
    fb04:	4718      	bx	r3

0000fb06 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
    fb06:	b508      	push	{r3, lr}
    fb08:	f7f0 fc8a 	bl	420 <__aeabi_f2d>
    fb0c:	f7fb fd84 	bl	b618 <round>
    fb10:	f7f0 ffa0 	bl	a54 <__aeabi_d2f>
    fb14:	bd08      	pop	{r3, pc}

0000fb16 <z_device_state_init>:
}
    fb16:	4770      	bx	lr

0000fb18 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    fb18:	b138      	cbz	r0, fb2a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    fb1a:	68c3      	ldr	r3, [r0, #12]
    fb1c:	8818      	ldrh	r0, [r3, #0]
    fb1e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    fb22:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    fb26:	4258      	negs	r0, r3
    fb28:	4158      	adcs	r0, r3
}
    fb2a:	4770      	bx	lr

0000fb2c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb2e:	4605      	mov	r5, r0
    fb30:	460e      	mov	r6, r1
	__asm__ volatile(
    fb32:	f04f 0320 	mov.w	r3, #32
    fb36:	f3ef 8711 	mrs	r7, BASEPRI
    fb3a:	f383 8812 	msr	BASEPRI_MAX, r3
    fb3e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    fb42:	f7fb f9cf 	bl	aee4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    fb46:	4631      	mov	r1, r6
    fb48:	4604      	mov	r4, r0
    fb4a:	4628      	mov	r0, r5
    fb4c:	f7fe f809 	bl	db62 <k_sys_fatal_error_handler>
	__asm__ volatile(
    fb50:	f387 8811 	msr	BASEPRI, r7
    fb54:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    fb58:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    fb5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fb5e:	f7f4 bb7f 	b.w	4260 <z_impl_k_thread_abort>

0000fb62 <k_mem_slab_init>:
{
    fb62:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    fb64:	2400      	movs	r4, #0
    fb66:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    fb68:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    fb6a:	ea41 0402 	orr.w	r4, r1, r2
    fb6e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    fb72:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    fb76:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    fb78:	d10c      	bne.n	fb94 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    fb7a:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    fb7c:	42a3      	cmp	r3, r4
    fb7e:	d103      	bne.n	fb88 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    fb80:	e9c0 0000 	strd	r0, r0, [r0]
}
    fb84:	2000      	movs	r0, #0
}
    fb86:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    fb88:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    fb8a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    fb8c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    fb8e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    fb90:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    fb92:	e7f3      	b.n	fb7c <k_mem_slab_init+0x1a>
		return -EINVAL;
    fb94:	f06f 0015 	mvn.w	r0, #21
	return rc;
    fb98:	e7f5      	b.n	fb86 <k_mem_slab_init+0x24>

0000fb9a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    fb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb9c:	4604      	mov	r4, r0
    fb9e:	460d      	mov	r5, r1
	__asm__ volatile(
    fba0:	f04f 0320 	mov.w	r3, #32
    fba4:	f3ef 8611 	mrs	r6, BASEPRI
    fba8:	f383 8812 	msr	BASEPRI_MAX, r3
    fbac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    fbb0:	6987      	ldr	r7, [r0, #24]
    fbb2:	b977      	cbnz	r7, fbd2 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    fbb4:	f000 f8cb 	bl	fd4e <z_unpend_first_thread>

		if (pending_thread != NULL) {
    fbb8:	b158      	cbz	r0, fbd2 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    fbba:	682a      	ldr	r2, [r5, #0]
    fbbc:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    fbbe:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    fbc0:	f000 f866 	bl	fc90 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    fbc4:	4631      	mov	r1, r6
    fbc6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    fbca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    fbce:	f7fa becd 	b.w	a96c <z_reschedule>
	**(char ***) mem = slab->free_list;
    fbd2:	682b      	ldr	r3, [r5, #0]
    fbd4:	69a2      	ldr	r2, [r4, #24]
    fbd6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    fbd8:	682b      	ldr	r3, [r5, #0]
    fbda:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    fbdc:	69e3      	ldr	r3, [r4, #28]
    fbde:	3b01      	subs	r3, #1
    fbe0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    fbe2:	f386 8811 	msr	BASEPRI, r6
    fbe6:	f3bf 8f6f 	isb	sy
}
    fbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fbec <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fbec:	f3ef 8005 	mrs	r0, IPSR
}
    fbf0:	3800      	subs	r0, #0
    fbf2:	bf18      	it	ne
    fbf4:	2001      	movne	r0, #1
    fbf6:	4770      	bx	lr

0000fbf8 <z_pm_save_idle_exit>:
{
    fbf8:	b508      	push	{r3, lr}
	pm_system_resume();
    fbfa:	f7f3 ff4d 	bl	3a98 <pm_system_resume>
}
    fbfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    fc02:	f7fd bfac 	b.w	db5e <sys_clock_idle_exit>

0000fc06 <z_impl_k_mutex_init>:
{
    fc06:	4603      	mov	r3, r0
	mutex->owner = NULL;
    fc08:	2000      	movs	r0, #0
    fc0a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    fc0e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    fc12:	4770      	bx	lr

0000fc14 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    fc14:	b13a      	cbz	r2, fc26 <z_impl_k_sem_init+0x12>
    fc16:	428a      	cmp	r2, r1
    fc18:	d305      	bcc.n	fc26 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    fc1a:	e9c0 1202 	strd	r1, r2, [r0, #8]
    fc1e:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    fc22:	2000      	movs	r0, #0
    fc24:	4770      	bx	lr
		return -EINVAL;
    fc26:	f06f 0015 	mvn.w	r0, #21
}
    fc2a:	4770      	bx	lr

0000fc2c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    fc2c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    fc30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fc32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fc34:	2300      	movs	r3, #0
	node->prev = NULL;
    fc36:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    fc3a:	4770      	bx	lr

0000fc3c <unpend_thread_no_timeout>:
{
    fc3c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    fc3e:	f7ff fff5 	bl	fc2c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fc42:	7b43      	ldrb	r3, [r0, #13]
    fc44:	f023 0302 	bic.w	r3, r3, #2
    fc48:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    fc4a:	2300      	movs	r3, #0
    fc4c:	6083      	str	r3, [r0, #8]
}
    fc4e:	bd08      	pop	{r3, pc}

0000fc50 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fc50:	4603      	mov	r3, r0
    fc52:	b920      	cbnz	r0, fc5e <z_reschedule_irqlock+0xe>
    fc54:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    fc58:	b90a      	cbnz	r2, fc5e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    fc5a:	f7f4 b8d5 	b.w	3e08 <arch_swap>
    fc5e:	f383 8811 	msr	BASEPRI, r3
    fc62:	f3bf 8f6f 	isb	sy
}
    fc66:	4770      	bx	lr

0000fc68 <z_reschedule_unlocked>:
	__asm__ volatile(
    fc68:	f04f 0320 	mov.w	r3, #32
    fc6c:	f3ef 8011 	mrs	r0, BASEPRI
    fc70:	f383 8812 	msr	BASEPRI_MAX, r3
    fc74:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fc78:	f7ff bfea 	b.w	fc50 <z_reschedule_irqlock>

0000fc7c <z_priq_dumb_best>:
{
    fc7c:	4603      	mov	r3, r0
	return list->head == list;
    fc7e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc80:	4283      	cmp	r3, r0
    fc82:	d003      	beq.n	fc8c <z_priq_dumb_best+0x10>
	if (n != NULL) {
    fc84:	2800      	cmp	r0, #0
    fc86:	bf38      	it	cc
    fc88:	2000      	movcc	r0, #0
    fc8a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    fc8c:	2000      	movs	r0, #0
}
    fc8e:	4770      	bx	lr

0000fc90 <z_ready_thread>:
{
    fc90:	b510      	push	{r4, lr}
    fc92:	f04f 0320 	mov.w	r3, #32
    fc96:	f3ef 8411 	mrs	r4, BASEPRI
    fc9a:	f383 8812 	msr	BASEPRI_MAX, r3
    fc9e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    fca2:	f7fa ff29 	bl	aaf8 <ready_thread>
	__asm__ volatile(
    fca6:	f384 8811 	msr	BASEPRI, r4
    fcaa:	f3bf 8f6f 	isb	sy
}
    fcae:	bd10      	pop	{r4, pc}

0000fcb0 <z_thread_timeout>:
{
    fcb0:	4601      	mov	r1, r0
    fcb2:	b510      	push	{r4, lr}
	__asm__ volatile(
    fcb4:	f04f 0320 	mov.w	r3, #32
    fcb8:	f3ef 8411 	mrs	r4, BASEPRI
    fcbc:	f383 8812 	msr	BASEPRI_MAX, r3
    fcc0:	f3bf 8f6f 	isb	sy
		if (!killed) {
    fcc4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    fcc8:	f013 0f28 	tst.w	r3, #40	; 0x28
    fccc:	d10d      	bne.n	fcea <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    fcce:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    fcd2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    fcd4:	b10b      	cbz	r3, fcda <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    fcd6:	f7ff ffb1 	bl	fc3c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    fcda:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    fcde:	f023 0314 	bic.w	r3, r3, #20
    fce2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    fce6:	f7fa ff07 	bl	aaf8 <ready_thread>
	__asm__ volatile(
    fcea:	f384 8811 	msr	BASEPRI, r4
    fcee:	f3bf 8f6f 	isb	sy
}
    fcf2:	bd10      	pop	{r4, pc}

0000fcf4 <add_to_waitq_locked>:
{
    fcf4:	b538      	push	{r3, r4, r5, lr}
    fcf6:	4604      	mov	r4, r0
    fcf8:	460d      	mov	r5, r1
	unready_thread(thread);
    fcfa:	f7fa ff53 	bl	aba4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    fcfe:	7b63      	ldrb	r3, [r4, #13]
    fd00:	f043 0302 	orr.w	r3, r3, #2
    fd04:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    fd06:	b1b5      	cbz	r5, fd36 <add_to_waitq_locked+0x42>
	return list->head == list;
    fd08:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    fd0a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd0c:	429d      	cmp	r5, r3
    fd0e:	bf08      	it	eq
    fd10:	2300      	moveq	r3, #0
    fd12:	2b00      	cmp	r3, #0
    fd14:	bf38      	it	cc
    fd16:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fd18:	b19b      	cbz	r3, fd42 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    fd1a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    fd1e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    fd22:	4291      	cmp	r1, r2
    fd24:	d008      	beq.n	fd38 <add_to_waitq_locked+0x44>
		return b2 - b1;
    fd26:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    fd28:	2a00      	cmp	r2, #0
    fd2a:	dd05      	ble.n	fd38 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    fd2c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fd2e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    fd32:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fd34:	605c      	str	r4, [r3, #4]
}
    fd36:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    fd38:	686a      	ldr	r2, [r5, #4]
    fd3a:	4293      	cmp	r3, r2
    fd3c:	d001      	beq.n	fd42 <add_to_waitq_locked+0x4e>
    fd3e:	681b      	ldr	r3, [r3, #0]
    fd40:	e7ea      	b.n	fd18 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    fd42:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    fd44:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    fd48:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fd4a:	606c      	str	r4, [r5, #4]
    fd4c:	e7f3      	b.n	fd36 <add_to_waitq_locked+0x42>

0000fd4e <z_unpend_first_thread>:
{
    fd4e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fd50:	f04f 0320 	mov.w	r3, #32
    fd54:	f3ef 8511 	mrs	r5, BASEPRI
    fd58:	f383 8812 	msr	BASEPRI_MAX, r3
    fd5c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    fd60:	f7ff ff8c 	bl	fc7c <z_priq_dumb_best>
		if (thread != NULL) {
    fd64:	4604      	mov	r4, r0
    fd66:	b120      	cbz	r0, fd72 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    fd68:	f7ff ff68 	bl	fc3c <unpend_thread_no_timeout>
    fd6c:	3018      	adds	r0, #24
    fd6e:	f000 f806 	bl	fd7e <z_abort_timeout>
	__asm__ volatile(
    fd72:	f385 8811 	msr	BASEPRI, r5
    fd76:	f3bf 8f6f 	isb	sy
}
    fd7a:	4620      	mov	r0, r4
    fd7c:	bd38      	pop	{r3, r4, r5, pc}

0000fd7e <z_abort_timeout>:
{
    fd7e:	b510      	push	{r4, lr}
	__asm__ volatile(
    fd80:	f04f 0220 	mov.w	r2, #32
    fd84:	f3ef 8411 	mrs	r4, BASEPRI
    fd88:	f382 8812 	msr	BASEPRI_MAX, r2
    fd8c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    fd90:	6803      	ldr	r3, [r0, #0]
    fd92:	b13b      	cbz	r3, fda4 <z_abort_timeout+0x26>
			remove_timeout(to);
    fd94:	f7fb f922 	bl	afdc <remove_timeout>
			ret = 0;
    fd98:	2000      	movs	r0, #0
	__asm__ volatile(
    fd9a:	f384 8811 	msr	BASEPRI, r4
    fd9e:	f3bf 8f6f 	isb	sy
}
    fda2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    fda4:	f06f 0015 	mvn.w	r0, #21
    fda8:	e7f7      	b.n	fd9a <z_abort_timeout+0x1c>

0000fdaa <z_get_next_timeout_expiry>:
{
    fdaa:	b510      	push	{r4, lr}
	__asm__ volatile(
    fdac:	f04f 0320 	mov.w	r3, #32
    fdb0:	f3ef 8411 	mrs	r4, BASEPRI
    fdb4:	f383 8812 	msr	BASEPRI_MAX, r3
    fdb8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    fdbc:	f7fb f928 	bl	b010 <next_timeout>
	__asm__ volatile(
    fdc0:	f384 8811 	msr	BASEPRI, r4
    fdc4:	f3bf 8f6f 	isb	sy
}
    fdc8:	bd10      	pop	{r4, pc}

0000fdca <z_set_timeout_expiry>:
{
    fdca:	b570      	push	{r4, r5, r6, lr}
    fdcc:	4604      	mov	r4, r0
    fdce:	460d      	mov	r5, r1
	__asm__ volatile(
    fdd0:	f04f 0320 	mov.w	r3, #32
    fdd4:	f3ef 8611 	mrs	r6, BASEPRI
    fdd8:	f383 8812 	msr	BASEPRI_MAX, r3
    fddc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    fde0:	f7fb f916 	bl	b010 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    fde4:	2801      	cmp	r0, #1
    fde6:	dd05      	ble.n	fdf4 <z_set_timeout_expiry+0x2a>
    fde8:	42a0      	cmp	r0, r4
    fdea:	db03      	blt.n	fdf4 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    fdec:	4629      	mov	r1, r5
    fdee:	4620      	mov	r0, r4
    fdf0:	f7f5 fbb0 	bl	5554 <sys_clock_set_timeout>
	__asm__ volatile(
    fdf4:	f386 8811 	msr	BASEPRI, r6
    fdf8:	f3bf 8f6f 	isb	sy
}
    fdfc:	bd70      	pop	{r4, r5, r6, pc}

0000fdfe <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    fdfe:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    fe00:	f7fb fa24 	bl	b24c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    fe04:	bd08      	pop	{r3, pc}

0000fe06 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    fe06:	b108      	cbz	r0, fe0c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    fe08:	f7f3 bd84 	b.w	3914 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    fe0c:	4770      	bx	lr

0000fe0e <k_heap_init>:
{
    fe0e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    fe10:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    fe14:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    fe18:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    fe1a:	f7fd b998 	b.w	d14e <sys_heap_init>

0000fe1e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    fe1e:	4770      	bx	lr

0000fe20 <_ZdlPv>:
    fe20:	f7fb be12 	b.w	ba48 <free>

0000fe24 <_ZdaPv>:
    fe24:	f7ff bffc 	b.w	fe20 <_ZdlPv>

0000fe28 <_Znwj>:
    fe28:	2801      	cmp	r0, #1
    fe2a:	bf38      	it	cc
    fe2c:	2001      	movcc	r0, #1
    fe2e:	b510      	push	{r4, lr}
    fe30:	4604      	mov	r4, r0
    fe32:	4620      	mov	r0, r4
    fe34:	f7fb fe00 	bl	ba38 <malloc>
    fe38:	b930      	cbnz	r0, fe48 <_Znwj+0x20>
    fe3a:	f7fb fbaf 	bl	b59c <_ZSt15get_new_handlerv>
    fe3e:	b908      	cbnz	r0, fe44 <_Znwj+0x1c>
    fe40:	f000 f805 	bl	fe4e <abort>
    fe44:	4780      	blx	r0
    fe46:	e7f4      	b.n	fe32 <_Znwj+0xa>
    fe48:	bd10      	pop	{r4, pc}

0000fe4a <_Znaj>:
    fe4a:	f7ff bfed 	b.w	fe28 <_Znwj>

0000fe4e <abort>:
    fe4e:	2006      	movs	r0, #6
    fe50:	b508      	push	{r3, lr}
    fe52:	f7fc fb39 	bl	c4c8 <raise>
    fe56:	2001      	movs	r0, #1
    fe58:	f7f4 fbb0 	bl	45bc <_exit>

0000fe5c <atoi>:
    fe5c:	220a      	movs	r2, #10
    fe5e:	2100      	movs	r1, #0
    fe60:	f7fc bbee 	b.w	c640 <strtol>

0000fe64 <memchr>:
    fe64:	b2c9      	uxtb	r1, r1
    fe66:	4603      	mov	r3, r0
    fe68:	4402      	add	r2, r0
    fe6a:	b510      	push	{r4, lr}
    fe6c:	4293      	cmp	r3, r2
    fe6e:	4618      	mov	r0, r3
    fe70:	d101      	bne.n	fe76 <memchr+0x12>
    fe72:	2000      	movs	r0, #0
    fe74:	e003      	b.n	fe7e <memchr+0x1a>
    fe76:	7804      	ldrb	r4, [r0, #0]
    fe78:	3301      	adds	r3, #1
    fe7a:	428c      	cmp	r4, r1
    fe7c:	d1f6      	bne.n	fe6c <memchr+0x8>
    fe7e:	bd10      	pop	{r4, pc}

0000fe80 <memcpy>:
    fe80:	440a      	add	r2, r1
    fe82:	1e43      	subs	r3, r0, #1
    fe84:	4291      	cmp	r1, r2
    fe86:	d100      	bne.n	fe8a <memcpy+0xa>
    fe88:	4770      	bx	lr
    fe8a:	b510      	push	{r4, lr}
    fe8c:	f811 4b01 	ldrb.w	r4, [r1], #1
    fe90:	4291      	cmp	r1, r2
    fe92:	f803 4f01 	strb.w	r4, [r3, #1]!
    fe96:	d1f9      	bne.n	fe8c <memcpy+0xc>
    fe98:	bd10      	pop	{r4, pc}

0000fe9a <memset>:
    fe9a:	4402      	add	r2, r0
    fe9c:	4603      	mov	r3, r0
    fe9e:	4293      	cmp	r3, r2
    fea0:	d100      	bne.n	fea4 <memset+0xa>
    fea2:	4770      	bx	lr
    fea4:	f803 1b01 	strb.w	r1, [r3], #1
    fea8:	e7f9      	b.n	fe9e <memset+0x4>

0000feaa <__sfputc_r>:
    feaa:	6893      	ldr	r3, [r2, #8]
    feac:	3b01      	subs	r3, #1
    feae:	2b00      	cmp	r3, #0
    feb0:	6093      	str	r3, [r2, #8]
    feb2:	b410      	push	{r4}
    feb4:	da07      	bge.n	fec6 <__sfputc_r+0x1c>
    feb6:	6994      	ldr	r4, [r2, #24]
    feb8:	42a3      	cmp	r3, r4
    feba:	db01      	blt.n	fec0 <__sfputc_r+0x16>
    febc:	290a      	cmp	r1, #10
    febe:	d102      	bne.n	fec6 <__sfputc_r+0x1c>
    fec0:	bc10      	pop	{r4}
    fec2:	f7fc bbdd 	b.w	c680 <__swbuf_r>
    fec6:	6813      	ldr	r3, [r2, #0]
    fec8:	1c58      	adds	r0, r3, #1
    feca:	6010      	str	r0, [r2, #0]
    fecc:	4608      	mov	r0, r1
    fece:	7019      	strb	r1, [r3, #0]
    fed0:	bc10      	pop	{r4}
    fed2:	4770      	bx	lr

0000fed4 <__sfputs_r>:
    fed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fed6:	4606      	mov	r6, r0
    fed8:	460f      	mov	r7, r1
    feda:	4614      	mov	r4, r2
    fedc:	18d5      	adds	r5, r2, r3
    fede:	42ac      	cmp	r4, r5
    fee0:	d101      	bne.n	fee6 <__sfputs_r+0x12>
    fee2:	2000      	movs	r0, #0
    fee4:	e007      	b.n	fef6 <__sfputs_r+0x22>
    fee6:	463a      	mov	r2, r7
    fee8:	f814 1b01 	ldrb.w	r1, [r4], #1
    feec:	4630      	mov	r0, r6
    feee:	f7ff ffdc 	bl	feaa <__sfputc_r>
    fef2:	1c43      	adds	r3, r0, #1
    fef4:	d1f3      	bne.n	fede <__sfputs_r+0xa>
    fef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fef8 <__cvt>:
    fef8:	2b00      	cmp	r3, #0
    fefa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fefe:	461f      	mov	r7, r3
    ff00:	b088      	sub	sp, #32
    ff02:	bfb4      	ite	lt
    ff04:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    ff08:	2300      	movge	r3, #0
    ff0a:	4614      	mov	r4, r2
    ff0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ff0e:	bfbc      	itt	lt
    ff10:	461f      	movlt	r7, r3
    ff12:	232d      	movlt	r3, #45	; 0x2d
    ff14:	9d10      	ldr	r5, [sp, #64]	; 0x40
    ff16:	7013      	strb	r3, [r2, #0]
    ff18:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ff1a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    ff1e:	f023 0820 	bic.w	r8, r3, #32
    ff22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    ff26:	d005      	beq.n	ff34 <__cvt+0x3c>
    ff28:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
    ff2c:	d100      	bne.n	ff30 <__cvt+0x38>
    ff2e:	3501      	adds	r5, #1
    ff30:	2302      	movs	r3, #2
    ff32:	e000      	b.n	ff36 <__cvt+0x3e>
    ff34:	2303      	movs	r3, #3
    ff36:	aa07      	add	r2, sp, #28
    ff38:	9204      	str	r2, [sp, #16]
    ff3a:	aa06      	add	r2, sp, #24
    ff3c:	e9cd 3500 	strd	r3, r5, [sp]
    ff40:	e9cd a202 	strd	sl, r2, [sp, #8]
    ff44:	463b      	mov	r3, r7
    ff46:	4622      	mov	r2, r4
    ff48:	f7f1 fe06 	bl	1b58 <_dtoa_r>
    ff4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    ff50:	4606      	mov	r6, r0
    ff52:	d102      	bne.n	ff5a <__cvt+0x62>
    ff54:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ff56:	07db      	lsls	r3, r3, #31
    ff58:	d522      	bpl.n	ffa0 <__cvt+0xa8>
    ff5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    ff5e:	eb06 0905 	add.w	r9, r6, r5
    ff62:	d110      	bne.n	ff86 <__cvt+0x8e>
    ff64:	7833      	ldrb	r3, [r6, #0]
    ff66:	2b30      	cmp	r3, #48	; 0x30
    ff68:	d10a      	bne.n	ff80 <__cvt+0x88>
    ff6a:	2200      	movs	r2, #0
    ff6c:	2300      	movs	r3, #0
    ff6e:	4620      	mov	r0, r4
    ff70:	4639      	mov	r1, r7
    ff72:	f7f0 fd15 	bl	9a0 <__aeabi_dcmpeq>
    ff76:	b918      	cbnz	r0, ff80 <__cvt+0x88>
    ff78:	f1c5 0501 	rsb	r5, r5, #1
    ff7c:	f8ca 5000 	str.w	r5, [sl]
    ff80:	f8da 3000 	ldr.w	r3, [sl]
    ff84:	4499      	add	r9, r3
    ff86:	2200      	movs	r2, #0
    ff88:	2300      	movs	r3, #0
    ff8a:	4620      	mov	r0, r4
    ff8c:	4639      	mov	r1, r7
    ff8e:	f7f0 fd07 	bl	9a0 <__aeabi_dcmpeq>
    ff92:	b108      	cbz	r0, ff98 <__cvt+0xa0>
    ff94:	f8cd 901c 	str.w	r9, [sp, #28]
    ff98:	2230      	movs	r2, #48	; 0x30
    ff9a:	9b07      	ldr	r3, [sp, #28]
    ff9c:	454b      	cmp	r3, r9
    ff9e:	d307      	bcc.n	ffb0 <__cvt+0xb8>
    ffa0:	9b07      	ldr	r3, [sp, #28]
    ffa2:	4630      	mov	r0, r6
    ffa4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ffa6:	1b9b      	subs	r3, r3, r6
    ffa8:	6013      	str	r3, [r2, #0]
    ffaa:	b008      	add	sp, #32
    ffac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ffb0:	1c59      	adds	r1, r3, #1
    ffb2:	9107      	str	r1, [sp, #28]
    ffb4:	701a      	strb	r2, [r3, #0]
    ffb6:	e7f0      	b.n	ff9a <__cvt+0xa2>

0000ffb8 <__exponent>:
    ffb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ffba:	2900      	cmp	r1, #0
    ffbc:	4603      	mov	r3, r0
    ffbe:	bfb8      	it	lt
    ffc0:	4249      	neglt	r1, r1
    ffc2:	f803 2b02 	strb.w	r2, [r3], #2
    ffc6:	bfb4      	ite	lt
    ffc8:	222d      	movlt	r2, #45	; 0x2d
    ffca:	222b      	movge	r2, #43	; 0x2b
    ffcc:	2909      	cmp	r1, #9
    ffce:	7042      	strb	r2, [r0, #1]
    ffd0:	dd2a      	ble.n	10028 <__exponent+0x70>
    ffd2:	f10d 0407 	add.w	r4, sp, #7
    ffd6:	270a      	movs	r7, #10
    ffd8:	46a4      	mov	ip, r4
    ffda:	460a      	mov	r2, r1
    ffdc:	46a6      	mov	lr, r4
    ffde:	3c01      	subs	r4, #1
    ffe0:	2a63      	cmp	r2, #99	; 0x63
    ffe2:	fb91 f6f7 	sdiv	r6, r1, r7
    ffe6:	fb07 1516 	mls	r5, r7, r6, r1
    ffea:	4631      	mov	r1, r6
    ffec:	f105 0530 	add.w	r5, r5, #48	; 0x30
    fff0:	f80e 5c01 	strb.w	r5, [lr, #-1]
    fff4:	dcf1      	bgt.n	ffda <__exponent+0x22>
    fff6:	3130      	adds	r1, #48	; 0x30
    fff8:	f1ae 0502 	sub.w	r5, lr, #2
    fffc:	f804 1c01 	strb.w	r1, [r4, #-1]
   10000:	1c44      	adds	r4, r0, #1
   10002:	4629      	mov	r1, r5
   10004:	4561      	cmp	r1, ip
   10006:	d30a      	bcc.n	1001e <__exponent+0x66>
   10008:	f10d 0209 	add.w	r2, sp, #9
   1000c:	eba2 020e 	sub.w	r2, r2, lr
   10010:	4565      	cmp	r5, ip
   10012:	bf88      	it	hi
   10014:	2200      	movhi	r2, #0
   10016:	4413      	add	r3, r2
   10018:	1a18      	subs	r0, r3, r0
   1001a:	b003      	add	sp, #12
   1001c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1001e:	f811 2b01 	ldrb.w	r2, [r1], #1
   10022:	f804 2f01 	strb.w	r2, [r4, #1]!
   10026:	e7ed      	b.n	10004 <__exponent+0x4c>
   10028:	2330      	movs	r3, #48	; 0x30
   1002a:	3130      	adds	r1, #48	; 0x30
   1002c:	7083      	strb	r3, [r0, #2]
   1002e:	1d03      	adds	r3, r0, #4
   10030:	70c1      	strb	r1, [r0, #3]
   10032:	e7f1      	b.n	10018 <__exponent+0x60>

00010034 <_printf_common>:
   10034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10038:	4616      	mov	r6, r2
   1003a:	4699      	mov	r9, r3
   1003c:	688a      	ldr	r2, [r1, #8]
   1003e:	4607      	mov	r7, r0
   10040:	690b      	ldr	r3, [r1, #16]
   10042:	460c      	mov	r4, r1
   10044:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10048:	4293      	cmp	r3, r2
   1004a:	bfb8      	it	lt
   1004c:	4613      	movlt	r3, r2
   1004e:	6033      	str	r3, [r6, #0]
   10050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   10054:	b10a      	cbz	r2, 1005a <_printf_common+0x26>
   10056:	3301      	adds	r3, #1
   10058:	6033      	str	r3, [r6, #0]
   1005a:	6823      	ldr	r3, [r4, #0]
   1005c:	0699      	lsls	r1, r3, #26
   1005e:	bf42      	ittt	mi
   10060:	6833      	ldrmi	r3, [r6, #0]
   10062:	3302      	addmi	r3, #2
   10064:	6033      	strmi	r3, [r6, #0]
   10066:	6825      	ldr	r5, [r4, #0]
   10068:	f015 0506 	ands.w	r5, r5, #6
   1006c:	d106      	bne.n	1007c <_printf_common+0x48>
   1006e:	f104 0a19 	add.w	sl, r4, #25
   10072:	68e3      	ldr	r3, [r4, #12]
   10074:	6832      	ldr	r2, [r6, #0]
   10076:	1a9b      	subs	r3, r3, r2
   10078:	42ab      	cmp	r3, r5
   1007a:	dc29      	bgt.n	100d0 <_printf_common+0x9c>
   1007c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   10080:	1e13      	subs	r3, r2, #0
   10082:	6822      	ldr	r2, [r4, #0]
   10084:	bf18      	it	ne
   10086:	2301      	movne	r3, #1
   10088:	0692      	lsls	r2, r2, #26
   1008a:	d42e      	bmi.n	100ea <_printf_common+0xb6>
   1008c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10090:	4649      	mov	r1, r9
   10092:	4638      	mov	r0, r7
   10094:	47c0      	blx	r8
   10096:	3001      	adds	r0, #1
   10098:	d021      	beq.n	100de <_printf_common+0xaa>
   1009a:	6823      	ldr	r3, [r4, #0]
   1009c:	341a      	adds	r4, #26
   1009e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   100a2:	f003 0306 	and.w	r3, r3, #6
   100a6:	6832      	ldr	r2, [r6, #0]
   100a8:	2600      	movs	r6, #0
   100aa:	2b04      	cmp	r3, #4
   100ac:	f854 3c12 	ldr.w	r3, [r4, #-18]
   100b0:	bf08      	it	eq
   100b2:	1aad      	subeq	r5, r5, r2
   100b4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   100b8:	bf14      	ite	ne
   100ba:	2500      	movne	r5, #0
   100bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   100c0:	4293      	cmp	r3, r2
   100c2:	bfc4      	itt	gt
   100c4:	1a9b      	subgt	r3, r3, r2
   100c6:	18ed      	addgt	r5, r5, r3
   100c8:	42b5      	cmp	r5, r6
   100ca:	d11a      	bne.n	10102 <_printf_common+0xce>
   100cc:	2000      	movs	r0, #0
   100ce:	e008      	b.n	100e2 <_printf_common+0xae>
   100d0:	2301      	movs	r3, #1
   100d2:	4652      	mov	r2, sl
   100d4:	4649      	mov	r1, r9
   100d6:	4638      	mov	r0, r7
   100d8:	47c0      	blx	r8
   100da:	3001      	adds	r0, #1
   100dc:	d103      	bne.n	100e6 <_printf_common+0xb2>
   100de:	f04f 30ff 	mov.w	r0, #4294967295
   100e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   100e6:	3501      	adds	r5, #1
   100e8:	e7c3      	b.n	10072 <_printf_common+0x3e>
   100ea:	18e1      	adds	r1, r4, r3
   100ec:	1c5a      	adds	r2, r3, #1
   100ee:	2030      	movs	r0, #48	; 0x30
   100f0:	3302      	adds	r3, #2
   100f2:	4422      	add	r2, r4
   100f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   100f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   100fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   10100:	e7c4      	b.n	1008c <_printf_common+0x58>
   10102:	2301      	movs	r3, #1
   10104:	4622      	mov	r2, r4
   10106:	4649      	mov	r1, r9
   10108:	4638      	mov	r0, r7
   1010a:	47c0      	blx	r8
   1010c:	3001      	adds	r0, #1
   1010e:	d0e6      	beq.n	100de <_printf_common+0xaa>
   10110:	3601      	adds	r6, #1
   10112:	e7d9      	b.n	100c8 <_printf_common+0x94>

00010114 <_raise_r>:
   10114:	291f      	cmp	r1, #31
   10116:	b538      	push	{r3, r4, r5, lr}
   10118:	4604      	mov	r4, r0
   1011a:	460d      	mov	r5, r1
   1011c:	d904      	bls.n	10128 <_raise_r+0x14>
   1011e:	2316      	movs	r3, #22
   10120:	6003      	str	r3, [r0, #0]
   10122:	f04f 30ff 	mov.w	r0, #4294967295
   10126:	bd38      	pop	{r3, r4, r5, pc}
   10128:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1012a:	b112      	cbz	r2, 10132 <_raise_r+0x1e>
   1012c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   10130:	b94b      	cbnz	r3, 10146 <_raise_r+0x32>
   10132:	4620      	mov	r0, r4
   10134:	f000 f816 	bl	10164 <_getpid_r>
   10138:	462a      	mov	r2, r5
   1013a:	4601      	mov	r1, r0
   1013c:	4620      	mov	r0, r4
   1013e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10142:	f7fc b9c9 	b.w	c4d8 <_kill_r>
   10146:	2b01      	cmp	r3, #1
   10148:	d00a      	beq.n	10160 <_raise_r+0x4c>
   1014a:	1c59      	adds	r1, r3, #1
   1014c:	d103      	bne.n	10156 <_raise_r+0x42>
   1014e:	2316      	movs	r3, #22
   10150:	6003      	str	r3, [r0, #0]
   10152:	2001      	movs	r0, #1
   10154:	e7e7      	b.n	10126 <_raise_r+0x12>
   10156:	2400      	movs	r4, #0
   10158:	4628      	mov	r0, r5
   1015a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1015e:	4798      	blx	r3
   10160:	2000      	movs	r0, #0
   10162:	e7e0      	b.n	10126 <_raise_r+0x12>

00010164 <_getpid_r>:
   10164:	f7fd ba40 	b.w	d5e8 <_getpid>

00010168 <strncmp>:
   10168:	b510      	push	{r4, lr}
   1016a:	b16a      	cbz	r2, 10188 <strncmp+0x20>
   1016c:	3901      	subs	r1, #1
   1016e:	1884      	adds	r4, r0, r2
   10170:	f810 3b01 	ldrb.w	r3, [r0], #1
   10174:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   10178:	4293      	cmp	r3, r2
   1017a:	d103      	bne.n	10184 <strncmp+0x1c>
   1017c:	42a0      	cmp	r0, r4
   1017e:	d001      	beq.n	10184 <strncmp+0x1c>
   10180:	2b00      	cmp	r3, #0
   10182:	d1f5      	bne.n	10170 <strncmp+0x8>
   10184:	1a98      	subs	r0, r3, r2
   10186:	bd10      	pop	{r4, pc}
   10188:	4610      	mov	r0, r2
   1018a:	e7fc      	b.n	10186 <strncmp+0x1e>

0001018c <strnlen>:
   1018c:	4602      	mov	r2, r0
   1018e:	4401      	add	r1, r0
   10190:	b510      	push	{r4, lr}
   10192:	428a      	cmp	r2, r1
   10194:	4613      	mov	r3, r2
   10196:	d101      	bne.n	1019c <strnlen+0x10>
   10198:	1a18      	subs	r0, r3, r0
   1019a:	bd10      	pop	{r4, pc}
   1019c:	781c      	ldrb	r4, [r3, #0]
   1019e:	3201      	adds	r2, #1
   101a0:	2c00      	cmp	r4, #0
   101a2:	d1f6      	bne.n	10192 <strnlen+0x6>
   101a4:	e7f8      	b.n	10198 <strnlen+0xc>

000101a6 <__strtok_r>:
   101a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   101a8:	b908      	cbnz	r0, 101ae <__strtok_r+0x8>
   101aa:	6810      	ldr	r0, [r2, #0]
   101ac:	b188      	cbz	r0, 101d2 <__strtok_r+0x2c>
   101ae:	4604      	mov	r4, r0
   101b0:	4620      	mov	r0, r4
   101b2:	460f      	mov	r7, r1
   101b4:	f814 5b01 	ldrb.w	r5, [r4], #1
   101b8:	f817 6b01 	ldrb.w	r6, [r7], #1
   101bc:	b91e      	cbnz	r6, 101c6 <__strtok_r+0x20>
   101be:	b965      	cbnz	r5, 101da <__strtok_r+0x34>
   101c0:	4628      	mov	r0, r5
   101c2:	6015      	str	r5, [r2, #0]
   101c4:	e005      	b.n	101d2 <__strtok_r+0x2c>
   101c6:	42b5      	cmp	r5, r6
   101c8:	d1f6      	bne.n	101b8 <__strtok_r+0x12>
   101ca:	2b00      	cmp	r3, #0
   101cc:	d1f0      	bne.n	101b0 <__strtok_r+0xa>
   101ce:	6014      	str	r4, [r2, #0]
   101d0:	7003      	strb	r3, [r0, #0]
   101d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101d4:	461c      	mov	r4, r3
   101d6:	e00c      	b.n	101f2 <__strtok_r+0x4c>
   101d8:	b915      	cbnz	r5, 101e0 <__strtok_r+0x3a>
   101da:	f814 3b01 	ldrb.w	r3, [r4], #1
   101de:	460e      	mov	r6, r1
   101e0:	f816 5b01 	ldrb.w	r5, [r6], #1
   101e4:	42ab      	cmp	r3, r5
   101e6:	d1f7      	bne.n	101d8 <__strtok_r+0x32>
   101e8:	2b00      	cmp	r3, #0
   101ea:	d0f3      	beq.n	101d4 <__strtok_r+0x2e>
   101ec:	2300      	movs	r3, #0
   101ee:	f804 3c01 	strb.w	r3, [r4, #-1]
   101f2:	6014      	str	r4, [r2, #0]
   101f4:	e7ed      	b.n	101d2 <__strtok_r+0x2c>

000101f6 <quorem>:
   101f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101fa:	6903      	ldr	r3, [r0, #16]
   101fc:	4607      	mov	r7, r0
   101fe:	690c      	ldr	r4, [r1, #16]
   10200:	42a3      	cmp	r3, r4
   10202:	f2c0 8085 	blt.w	10310 <quorem+0x11a>
   10206:	3c01      	subs	r4, #1
   10208:	f100 0514 	add.w	r5, r0, #20
   1020c:	f101 0814 	add.w	r8, r1, #20
   10210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   1021c:	9301      	str	r3, [sp, #4]
   1021e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   10222:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   10226:	3301      	adds	r3, #1
   10228:	429a      	cmp	r2, r3
   1022a:	fbb2 f6f3 	udiv	r6, r2, r3
   1022e:	d333      	bcc.n	10298 <quorem+0xa2>
   10230:	f04f 0e00 	mov.w	lr, #0
   10234:	4640      	mov	r0, r8
   10236:	46ac      	mov	ip, r5
   10238:	46f2      	mov	sl, lr
   1023a:	f850 2b04 	ldr.w	r2, [r0], #4
   1023e:	b293      	uxth	r3, r2
   10240:	4581      	cmp	r9, r0
   10242:	ea4f 4212 	mov.w	r2, r2, lsr #16
   10246:	fb06 e303 	mla	r3, r6, r3, lr
   1024a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   1024e:	b29b      	uxth	r3, r3
   10250:	fb06 e202 	mla	r2, r6, r2, lr
   10254:	ebaa 0303 	sub.w	r3, sl, r3
   10258:	f8dc a000 	ldr.w	sl, [ip]
   1025c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   10260:	fa1f fa8a 	uxth.w	sl, sl
   10264:	4453      	add	r3, sl
   10266:	fa1f fa82 	uxth.w	sl, r2
   1026a:	f8dc 2000 	ldr.w	r2, [ip]
   1026e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   10272:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10276:	b29b      	uxth	r3, r3
   10278:	ea4f 4a22 	mov.w	sl, r2, asr #16
   1027c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10280:	f84c 3b04 	str.w	r3, [ip], #4
   10284:	d2d9      	bcs.n	1023a <quorem+0x44>
   10286:	f855 300b 	ldr.w	r3, [r5, fp]
   1028a:	b92b      	cbnz	r3, 10298 <quorem+0xa2>
   1028c:	9b01      	ldr	r3, [sp, #4]
   1028e:	3b04      	subs	r3, #4
   10290:	429d      	cmp	r5, r3
   10292:	461a      	mov	r2, r3
   10294:	d330      	bcc.n	102f8 <quorem+0x102>
   10296:	613c      	str	r4, [r7, #16]
   10298:	4638      	mov	r0, r7
   1029a:	f000 fa6f 	bl	1077c <__mcmp>
   1029e:	2800      	cmp	r0, #0
   102a0:	db26      	blt.n	102f0 <quorem+0xfa>
   102a2:	3601      	adds	r6, #1
   102a4:	4628      	mov	r0, r5
   102a6:	f04f 0c00 	mov.w	ip, #0
   102aa:	f858 1b04 	ldr.w	r1, [r8], #4
   102ae:	f8d0 e000 	ldr.w	lr, [r0]
   102b2:	b28b      	uxth	r3, r1
   102b4:	45c1      	cmp	r9, r8
   102b6:	fa1f f28e 	uxth.w	r2, lr
   102ba:	ebac 0303 	sub.w	r3, ip, r3
   102be:	4413      	add	r3, r2
   102c0:	ea4f 4211 	mov.w	r2, r1, lsr #16
   102c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   102c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   102cc:	b29b      	uxth	r3, r3
   102ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
   102d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   102d6:	f840 3b04 	str.w	r3, [r0], #4
   102da:	d2e6      	bcs.n	102aa <quorem+0xb4>
   102dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   102e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   102e4:	b922      	cbnz	r2, 102f0 <quorem+0xfa>
   102e6:	3b04      	subs	r3, #4
   102e8:	429d      	cmp	r5, r3
   102ea:	461a      	mov	r2, r3
   102ec:	d30a      	bcc.n	10304 <quorem+0x10e>
   102ee:	613c      	str	r4, [r7, #16]
   102f0:	4630      	mov	r0, r6
   102f2:	b003      	add	sp, #12
   102f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102f8:	6812      	ldr	r2, [r2, #0]
   102fa:	3b04      	subs	r3, #4
   102fc:	2a00      	cmp	r2, #0
   102fe:	d1ca      	bne.n	10296 <quorem+0xa0>
   10300:	3c01      	subs	r4, #1
   10302:	e7c5      	b.n	10290 <quorem+0x9a>
   10304:	6812      	ldr	r2, [r2, #0]
   10306:	3b04      	subs	r3, #4
   10308:	2a00      	cmp	r2, #0
   1030a:	d1f0      	bne.n	102ee <quorem+0xf8>
   1030c:	3c01      	subs	r4, #1
   1030e:	e7eb      	b.n	102e8 <quorem+0xf2>
   10310:	2000      	movs	r0, #0
   10312:	e7ee      	b.n	102f2 <quorem+0xfc>

00010314 <__sfmoreglue>:
   10314:	b570      	push	{r4, r5, r6, lr}
   10316:	1e4a      	subs	r2, r1, #1
   10318:	2568      	movs	r5, #104	; 0x68
   1031a:	460e      	mov	r6, r1
   1031c:	4355      	muls	r5, r2
   1031e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   10322:	f7fb fbe7 	bl	baf4 <_malloc_r>
   10326:	4604      	mov	r4, r0
   10328:	b140      	cbz	r0, 1033c <__sfmoreglue+0x28>
   1032a:	2100      	movs	r1, #0
   1032c:	f105 0268 	add.w	r2, r5, #104	; 0x68
   10330:	e9c0 1600 	strd	r1, r6, [r0]
   10334:	300c      	adds	r0, #12
   10336:	60a0      	str	r0, [r4, #8]
   10338:	f7ff fdaf 	bl	fe9a <memset>
   1033c:	4620      	mov	r0, r4
   1033e:	bd70      	pop	{r4, r5, r6, pc}

00010340 <_fwalk_reent>:
   10340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10344:	4606      	mov	r6, r0
   10346:	4688      	mov	r8, r1
   10348:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1034c:	2700      	movs	r7, #0
   1034e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   10352:	f1b9 0901 	subs.w	r9, r9, #1
   10356:	d505      	bpl.n	10364 <_fwalk_reent+0x24>
   10358:	6824      	ldr	r4, [r4, #0]
   1035a:	2c00      	cmp	r4, #0
   1035c:	d1f7      	bne.n	1034e <_fwalk_reent+0xe>
   1035e:	4638      	mov	r0, r7
   10360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10364:	89ab      	ldrh	r3, [r5, #12]
   10366:	2b01      	cmp	r3, #1
   10368:	d907      	bls.n	1037a <_fwalk_reent+0x3a>
   1036a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1036e:	3301      	adds	r3, #1
   10370:	d003      	beq.n	1037a <_fwalk_reent+0x3a>
   10372:	4629      	mov	r1, r5
   10374:	4630      	mov	r0, r6
   10376:	47c0      	blx	r8
   10378:	4307      	orrs	r7, r0
   1037a:	3568      	adds	r5, #104	; 0x68
   1037c:	e7e9      	b.n	10352 <_fwalk_reent+0x12>

0001037e <__swhatbuf_r>:
   1037e:	b570      	push	{r4, r5, r6, lr}
   10380:	460e      	mov	r6, r1
   10382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10386:	b096      	sub	sp, #88	; 0x58
   10388:	4614      	mov	r4, r2
   1038a:	2900      	cmp	r1, #0
   1038c:	461d      	mov	r5, r3
   1038e:	da07      	bge.n	103a0 <__swhatbuf_r+0x22>
   10390:	2300      	movs	r3, #0
   10392:	602b      	str	r3, [r5, #0]
   10394:	89b3      	ldrh	r3, [r6, #12]
   10396:	061a      	lsls	r2, r3, #24
   10398:	d410      	bmi.n	103bc <__swhatbuf_r+0x3e>
   1039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1039e:	e00e      	b.n	103be <__swhatbuf_r+0x40>
   103a0:	466a      	mov	r2, sp
   103a2:	f7fc fc6d 	bl	cc80 <_fstat_r>
   103a6:	2800      	cmp	r0, #0
   103a8:	dbf2      	blt.n	10390 <__swhatbuf_r+0x12>
   103aa:	9a01      	ldr	r2, [sp, #4]
   103ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   103b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   103b4:	425a      	negs	r2, r3
   103b6:	415a      	adcs	r2, r3
   103b8:	602a      	str	r2, [r5, #0]
   103ba:	e7ee      	b.n	1039a <__swhatbuf_r+0x1c>
   103bc:	2340      	movs	r3, #64	; 0x40
   103be:	2000      	movs	r0, #0
   103c0:	6023      	str	r3, [r4, #0]
   103c2:	b016      	add	sp, #88	; 0x58
   103c4:	bd70      	pop	{r4, r5, r6, pc}

000103c6 <_Balloc>:
   103c6:	b570      	push	{r4, r5, r6, lr}
   103c8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   103ca:	4604      	mov	r4, r0
   103cc:	460d      	mov	r5, r1
   103ce:	b93e      	cbnz	r6, 103e0 <_Balloc+0x1a>
   103d0:	2010      	movs	r0, #16
   103d2:	f7fb fb31 	bl	ba38 <malloc>
   103d6:	6260      	str	r0, [r4, #36]	; 0x24
   103d8:	6006      	str	r6, [r0, #0]
   103da:	60c6      	str	r6, [r0, #12]
   103dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   103e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   103e2:	68f3      	ldr	r3, [r6, #12]
   103e4:	b183      	cbz	r3, 10408 <_Balloc+0x42>
   103e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   103e8:	68db      	ldr	r3, [r3, #12]
   103ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   103ee:	b9b8      	cbnz	r0, 10420 <_Balloc+0x5a>
   103f0:	2101      	movs	r1, #1
   103f2:	4620      	mov	r0, r4
   103f4:	fa01 f605 	lsl.w	r6, r1, r5
   103f8:	1d72      	adds	r2, r6, #5
   103fa:	0092      	lsls	r2, r2, #2
   103fc:	f000 faa5 	bl	1094a <_calloc_r>
   10400:	b160      	cbz	r0, 1041c <_Balloc+0x56>
   10402:	e9c0 5601 	strd	r5, r6, [r0, #4]
   10406:	e00e      	b.n	10426 <_Balloc+0x60>
   10408:	2221      	movs	r2, #33	; 0x21
   1040a:	2104      	movs	r1, #4
   1040c:	4620      	mov	r0, r4
   1040e:	f000 fa9c 	bl	1094a <_calloc_r>
   10412:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10414:	60f0      	str	r0, [r6, #12]
   10416:	68db      	ldr	r3, [r3, #12]
   10418:	2b00      	cmp	r3, #0
   1041a:	d1e4      	bne.n	103e6 <_Balloc+0x20>
   1041c:	2000      	movs	r0, #0
   1041e:	bd70      	pop	{r4, r5, r6, pc}
   10420:	6802      	ldr	r2, [r0, #0]
   10422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   10426:	2300      	movs	r3, #0
   10428:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1042c:	e7f7      	b.n	1041e <_Balloc+0x58>

0001042e <_Bfree>:
   1042e:	b570      	push	{r4, r5, r6, lr}
   10430:	6a46      	ldr	r6, [r0, #36]	; 0x24
   10432:	4605      	mov	r5, r0
   10434:	460c      	mov	r4, r1
   10436:	b93e      	cbnz	r6, 10448 <_Bfree+0x1a>
   10438:	2010      	movs	r0, #16
   1043a:	f7fb fafd 	bl	ba38 <malloc>
   1043e:	6268      	str	r0, [r5, #36]	; 0x24
   10440:	6006      	str	r6, [r0, #0]
   10442:	60c6      	str	r6, [r0, #12]
   10444:	e9c0 6601 	strd	r6, r6, [r0, #4]
   10448:	b13c      	cbz	r4, 1045a <_Bfree+0x2c>
   1044a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1044c:	6862      	ldr	r2, [r4, #4]
   1044e:	68db      	ldr	r3, [r3, #12]
   10450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   10454:	6021      	str	r1, [r4, #0]
   10456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1045a:	bd70      	pop	{r4, r5, r6, pc}

0001045c <__multadd>:
   1045c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10460:	4607      	mov	r7, r0
   10462:	4698      	mov	r8, r3
   10464:	460c      	mov	r4, r1
   10466:	690e      	ldr	r6, [r1, #16]
   10468:	f101 0014 	add.w	r0, r1, #20
   1046c:	2300      	movs	r3, #0
   1046e:	6805      	ldr	r5, [r0, #0]
   10470:	3301      	adds	r3, #1
   10472:	b2a9      	uxth	r1, r5
   10474:	429e      	cmp	r6, r3
   10476:	ea4f 4515 	mov.w	r5, r5, lsr #16
   1047a:	fb02 8101 	mla	r1, r2, r1, r8
   1047e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   10482:	b289      	uxth	r1, r1
   10484:	fb02 c505 	mla	r5, r2, r5, ip
   10488:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   1048c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   10490:	f840 1b04 	str.w	r1, [r0], #4
   10494:	dceb      	bgt.n	1046e <__multadd+0x12>
   10496:	f1b8 0f00 	cmp.w	r8, #0
   1049a:	d01b      	beq.n	104d4 <__multadd+0x78>
   1049c:	68a3      	ldr	r3, [r4, #8]
   1049e:	42b3      	cmp	r3, r6
   104a0:	dc12      	bgt.n	104c8 <__multadd+0x6c>
   104a2:	6861      	ldr	r1, [r4, #4]
   104a4:	4638      	mov	r0, r7
   104a6:	3101      	adds	r1, #1
   104a8:	f7ff ff8d 	bl	103c6 <_Balloc>
   104ac:	6922      	ldr	r2, [r4, #16]
   104ae:	4605      	mov	r5, r0
   104b0:	f104 010c 	add.w	r1, r4, #12
   104b4:	3202      	adds	r2, #2
   104b6:	300c      	adds	r0, #12
   104b8:	0092      	lsls	r2, r2, #2
   104ba:	f7ff fce1 	bl	fe80 <memcpy>
   104be:	4621      	mov	r1, r4
   104c0:	462c      	mov	r4, r5
   104c2:	4638      	mov	r0, r7
   104c4:	f7ff ffb3 	bl	1042e <_Bfree>
   104c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   104cc:	3601      	adds	r6, #1
   104ce:	f8c3 8014 	str.w	r8, [r3, #20]
   104d2:	6126      	str	r6, [r4, #16]
   104d4:	4620      	mov	r0, r4
   104d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000104da <__hi0bits>:
   104da:	0c02      	lsrs	r2, r0, #16
   104dc:	4603      	mov	r3, r0
   104de:	0412      	lsls	r2, r2, #16
   104e0:	b9ca      	cbnz	r2, 10516 <__hi0bits+0x3c>
   104e2:	0403      	lsls	r3, r0, #16
   104e4:	2010      	movs	r0, #16
   104e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   104ea:	bf04      	itt	eq
   104ec:	021b      	lsleq	r3, r3, #8
   104ee:	3008      	addeq	r0, #8
   104f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   104f4:	bf04      	itt	eq
   104f6:	011b      	lsleq	r3, r3, #4
   104f8:	3004      	addeq	r0, #4
   104fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   104fe:	bf04      	itt	eq
   10500:	009b      	lsleq	r3, r3, #2
   10502:	3002      	addeq	r0, #2
   10504:	2b00      	cmp	r3, #0
   10506:	db05      	blt.n	10514 <__hi0bits+0x3a>
   10508:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1050c:	f100 0001 	add.w	r0, r0, #1
   10510:	bf08      	it	eq
   10512:	2020      	moveq	r0, #32
   10514:	4770      	bx	lr
   10516:	2000      	movs	r0, #0
   10518:	e7e5      	b.n	104e6 <__hi0bits+0xc>

0001051a <__lo0bits>:
   1051a:	6803      	ldr	r3, [r0, #0]
   1051c:	4602      	mov	r2, r0
   1051e:	f013 0007 	ands.w	r0, r3, #7
   10522:	d00b      	beq.n	1053c <__lo0bits+0x22>
   10524:	07d9      	lsls	r1, r3, #31
   10526:	d422      	bmi.n	1056e <__lo0bits+0x54>
   10528:	0798      	lsls	r0, r3, #30
   1052a:	bf47      	ittee	mi
   1052c:	085b      	lsrmi	r3, r3, #1
   1052e:	2001      	movmi	r0, #1
   10530:	089b      	lsrpl	r3, r3, #2
   10532:	2002      	movpl	r0, #2
   10534:	bf4c      	ite	mi
   10536:	6013      	strmi	r3, [r2, #0]
   10538:	6013      	strpl	r3, [r2, #0]
   1053a:	4770      	bx	lr
   1053c:	b299      	uxth	r1, r3
   1053e:	b909      	cbnz	r1, 10544 <__lo0bits+0x2a>
   10540:	0c1b      	lsrs	r3, r3, #16
   10542:	2010      	movs	r0, #16
   10544:	f013 0fff 	tst.w	r3, #255	; 0xff
   10548:	bf04      	itt	eq
   1054a:	0a1b      	lsreq	r3, r3, #8
   1054c:	3008      	addeq	r0, #8
   1054e:	0719      	lsls	r1, r3, #28
   10550:	bf04      	itt	eq
   10552:	091b      	lsreq	r3, r3, #4
   10554:	3004      	addeq	r0, #4
   10556:	0799      	lsls	r1, r3, #30
   10558:	bf04      	itt	eq
   1055a:	089b      	lsreq	r3, r3, #2
   1055c:	3002      	addeq	r0, #2
   1055e:	07d9      	lsls	r1, r3, #31
   10560:	d403      	bmi.n	1056a <__lo0bits+0x50>
   10562:	085b      	lsrs	r3, r3, #1
   10564:	f100 0001 	add.w	r0, r0, #1
   10568:	d003      	beq.n	10572 <__lo0bits+0x58>
   1056a:	6013      	str	r3, [r2, #0]
   1056c:	4770      	bx	lr
   1056e:	2000      	movs	r0, #0
   10570:	4770      	bx	lr
   10572:	2020      	movs	r0, #32
   10574:	4770      	bx	lr

00010576 <__i2b>:
   10576:	b510      	push	{r4, lr}
   10578:	460c      	mov	r4, r1
   1057a:	2101      	movs	r1, #1
   1057c:	f7ff ff23 	bl	103c6 <_Balloc>
   10580:	2201      	movs	r2, #1
   10582:	6144      	str	r4, [r0, #20]
   10584:	6102      	str	r2, [r0, #16]
   10586:	bd10      	pop	{r4, pc}

00010588 <__multiply>:
   10588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1058c:	4615      	mov	r5, r2
   1058e:	690a      	ldr	r2, [r1, #16]
   10590:	460c      	mov	r4, r1
   10592:	b085      	sub	sp, #20
   10594:	692b      	ldr	r3, [r5, #16]
   10596:	429a      	cmp	r2, r3
   10598:	bfbe      	ittt	lt
   1059a:	460b      	movlt	r3, r1
   1059c:	462c      	movlt	r4, r5
   1059e:	461d      	movlt	r5, r3
   105a0:	6927      	ldr	r7, [r4, #16]
   105a2:	68a3      	ldr	r3, [r4, #8]
   105a4:	f8d5 9010 	ldr.w	r9, [r5, #16]
   105a8:	6861      	ldr	r1, [r4, #4]
   105aa:	eb07 0609 	add.w	r6, r7, r9
   105ae:	42b3      	cmp	r3, r6
   105b0:	bfb8      	it	lt
   105b2:	3101      	addlt	r1, #1
   105b4:	f7ff ff07 	bl	103c6 <_Balloc>
   105b8:	f100 0114 	add.w	r1, r0, #20
   105bc:	2200      	movs	r2, #0
   105be:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   105c2:	460b      	mov	r3, r1
   105c4:	4543      	cmp	r3, r8
   105c6:	d31d      	bcc.n	10604 <__multiply+0x7c>
   105c8:	f104 0314 	add.w	r3, r4, #20
   105cc:	f105 0214 	add.w	r2, r5, #20
   105d0:	f104 0515 	add.w	r5, r4, #21
   105d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   105d8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   105dc:	9302      	str	r3, [sp, #8]
   105de:	1b3b      	subs	r3, r7, r4
   105e0:	3b15      	subs	r3, #21
   105e2:	f023 0303 	bic.w	r3, r3, #3
   105e6:	3304      	adds	r3, #4
   105e8:	42af      	cmp	r7, r5
   105ea:	bf38      	it	cc
   105ec:	2304      	movcc	r3, #4
   105ee:	9301      	str	r3, [sp, #4]
   105f0:	9b02      	ldr	r3, [sp, #8]
   105f2:	9203      	str	r2, [sp, #12]
   105f4:	4293      	cmp	r3, r2
   105f6:	d808      	bhi.n	1060a <__multiply+0x82>
   105f8:	2e00      	cmp	r6, #0
   105fa:	dc5a      	bgt.n	106b2 <__multiply+0x12a>
   105fc:	6106      	str	r6, [r0, #16]
   105fe:	b005      	add	sp, #20
   10600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10604:	f843 2b04 	str.w	r2, [r3], #4
   10608:	e7dc      	b.n	105c4 <__multiply+0x3c>
   1060a:	f8b2 a000 	ldrh.w	sl, [r2]
   1060e:	f1ba 0f00 	cmp.w	sl, #0
   10612:	d024      	beq.n	1065e <__multiply+0xd6>
   10614:	f104 0e14 	add.w	lr, r4, #20
   10618:	4689      	mov	r9, r1
   1061a:	f04f 0c00 	mov.w	ip, #0
   1061e:	f85e 5b04 	ldr.w	r5, [lr], #4
   10622:	f8d9 b000 	ldr.w	fp, [r9]
   10626:	b2ab      	uxth	r3, r5
   10628:	4577      	cmp	r7, lr
   1062a:	fa1f fb8b 	uxth.w	fp, fp
   1062e:	fb0a b303 	mla	r3, sl, r3, fp
   10632:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   10636:	f8d9 5000 	ldr.w	r5, [r9]
   1063a:	4463      	add	r3, ip
   1063c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   10640:	fb0a c50b 	mla	r5, sl, fp, ip
   10644:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   10648:	b29b      	uxth	r3, r3
   1064a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1064e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   10652:	f849 3b04 	str.w	r3, [r9], #4
   10656:	d8e2      	bhi.n	1061e <__multiply+0x96>
   10658:	9b01      	ldr	r3, [sp, #4]
   1065a:	f841 c003 	str.w	ip, [r1, r3]
   1065e:	9b03      	ldr	r3, [sp, #12]
   10660:	3204      	adds	r2, #4
   10662:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   10666:	f1b9 0f00 	cmp.w	r9, #0
   1066a:	d020      	beq.n	106ae <__multiply+0x126>
   1066c:	680b      	ldr	r3, [r1, #0]
   1066e:	f104 0c14 	add.w	ip, r4, #20
   10672:	468e      	mov	lr, r1
   10674:	f04f 0a00 	mov.w	sl, #0
   10678:	f8bc 5000 	ldrh.w	r5, [ip]
   1067c:	b29b      	uxth	r3, r3
   1067e:	f8be b002 	ldrh.w	fp, [lr, #2]
   10682:	fb09 b505 	mla	r5, r9, r5, fp
   10686:	44aa      	add	sl, r5
   10688:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   1068c:	f84e 3b04 	str.w	r3, [lr], #4
   10690:	f85c 3b04 	ldr.w	r3, [ip], #4
   10694:	f8be 5000 	ldrh.w	r5, [lr]
   10698:	0c1b      	lsrs	r3, r3, #16
   1069a:	4567      	cmp	r7, ip
   1069c:	fb09 5303 	mla	r3, r9, r3, r5
   106a0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   106a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   106a8:	d8e6      	bhi.n	10678 <__multiply+0xf0>
   106aa:	9d01      	ldr	r5, [sp, #4]
   106ac:	514b      	str	r3, [r1, r5]
   106ae:	3104      	adds	r1, #4
   106b0:	e79e      	b.n	105f0 <__multiply+0x68>
   106b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   106b6:	2b00      	cmp	r3, #0
   106b8:	d1a0      	bne.n	105fc <__multiply+0x74>
   106ba:	3e01      	subs	r6, #1
   106bc:	e79c      	b.n	105f8 <__multiply+0x70>

000106be <__lshift>:
   106be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   106c2:	460c      	mov	r4, r1
   106c4:	4607      	mov	r7, r0
   106c6:	4691      	mov	r9, r2
   106c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   106cc:	6923      	ldr	r3, [r4, #16]
   106ce:	6849      	ldr	r1, [r1, #4]
   106d0:	eb03 1862 	add.w	r8, r3, r2, asr #5
   106d4:	68a3      	ldr	r3, [r4, #8]
   106d6:	f108 0601 	add.w	r6, r8, #1
   106da:	42b3      	cmp	r3, r6
   106dc:	db3f      	blt.n	1075e <__lshift+0xa0>
   106de:	4638      	mov	r0, r7
   106e0:	f7ff fe71 	bl	103c6 <_Balloc>
   106e4:	2300      	movs	r3, #0
   106e6:	4605      	mov	r5, r0
   106e8:	f100 0114 	add.w	r1, r0, #20
   106ec:	f100 0210 	add.w	r2, r0, #16
   106f0:	4618      	mov	r0, r3
   106f2:	4553      	cmp	r3, sl
   106f4:	db36      	blt.n	10764 <__lshift+0xa6>
   106f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   106fa:	f104 0314 	add.w	r3, r4, #20
   106fe:	6920      	ldr	r0, [r4, #16]
   10700:	f019 091f 	ands.w	r9, r9, #31
   10704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   10708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1070c:	d02e      	beq.n	1076c <__lshift+0xae>
   1070e:	f1c9 0e20 	rsb	lr, r9, #32
   10712:	468a      	mov	sl, r1
   10714:	2200      	movs	r2, #0
   10716:	6818      	ldr	r0, [r3, #0]
   10718:	fa00 f009 	lsl.w	r0, r0, r9
   1071c:	4302      	orrs	r2, r0
   1071e:	f84a 2b04 	str.w	r2, [sl], #4
   10722:	f853 2b04 	ldr.w	r2, [r3], #4
   10726:	459c      	cmp	ip, r3
   10728:	fa22 f20e 	lsr.w	r2, r2, lr
   1072c:	d8f3      	bhi.n	10716 <__lshift+0x58>
   1072e:	ebac 0304 	sub.w	r3, ip, r4
   10732:	f104 0015 	add.w	r0, r4, #21
   10736:	3b15      	subs	r3, #21
   10738:	f023 0303 	bic.w	r3, r3, #3
   1073c:	3304      	adds	r3, #4
   1073e:	4560      	cmp	r0, ip
   10740:	bf88      	it	hi
   10742:	2304      	movhi	r3, #4
   10744:	50ca      	str	r2, [r1, r3]
   10746:	b10a      	cbz	r2, 1074c <__lshift+0x8e>
   10748:	f108 0602 	add.w	r6, r8, #2
   1074c:	3e01      	subs	r6, #1
   1074e:	4638      	mov	r0, r7
   10750:	4621      	mov	r1, r4
   10752:	612e      	str	r6, [r5, #16]
   10754:	f7ff fe6b 	bl	1042e <_Bfree>
   10758:	4628      	mov	r0, r5
   1075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1075e:	3101      	adds	r1, #1
   10760:	005b      	lsls	r3, r3, #1
   10762:	e7ba      	b.n	106da <__lshift+0x1c>
   10764:	3301      	adds	r3, #1
   10766:	f842 0f04 	str.w	r0, [r2, #4]!
   1076a:	e7c2      	b.n	106f2 <__lshift+0x34>
   1076c:	3904      	subs	r1, #4
   1076e:	f853 2b04 	ldr.w	r2, [r3], #4
   10772:	459c      	cmp	ip, r3
   10774:	f841 2f04 	str.w	r2, [r1, #4]!
   10778:	d8f9      	bhi.n	1076e <__lshift+0xb0>
   1077a:	e7e7      	b.n	1074c <__lshift+0x8e>

0001077c <__mcmp>:
   1077c:	4603      	mov	r3, r0
   1077e:	690a      	ldr	r2, [r1, #16]
   10780:	6900      	ldr	r0, [r0, #16]
   10782:	1a80      	subs	r0, r0, r2
   10784:	b530      	push	{r4, r5, lr}
   10786:	d10d      	bne.n	107a4 <__mcmp+0x28>
   10788:	3314      	adds	r3, #20
   1078a:	3114      	adds	r1, #20
   1078c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   10790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   10798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   1079c:	4295      	cmp	r5, r2
   1079e:	d002      	beq.n	107a6 <__mcmp+0x2a>
   107a0:	d304      	bcc.n	107ac <__mcmp+0x30>
   107a2:	2001      	movs	r0, #1
   107a4:	bd30      	pop	{r4, r5, pc}
   107a6:	42a3      	cmp	r3, r4
   107a8:	d3f4      	bcc.n	10794 <__mcmp+0x18>
   107aa:	e7fb      	b.n	107a4 <__mcmp+0x28>
   107ac:	f04f 30ff 	mov.w	r0, #4294967295
   107b0:	e7f8      	b.n	107a4 <__mcmp+0x28>

000107b2 <__mdiff>:
   107b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107b6:	460c      	mov	r4, r1
   107b8:	4606      	mov	r6, r0
   107ba:	4611      	mov	r1, r2
   107bc:	4692      	mov	sl, r2
   107be:	4620      	mov	r0, r4
   107c0:	f7ff ffdc 	bl	1077c <__mcmp>
   107c4:	1e05      	subs	r5, r0, #0
   107c6:	d108      	bne.n	107da <__mdiff+0x28>
   107c8:	4629      	mov	r1, r5
   107ca:	4630      	mov	r0, r6
   107cc:	f7ff fdfb 	bl	103c6 <_Balloc>
   107d0:	2301      	movs	r3, #1
   107d2:	e9c0 3504 	strd	r3, r5, [r0, #16]
   107d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107da:	bfa3      	ittte	ge
   107dc:	4653      	movge	r3, sl
   107de:	46a2      	movge	sl, r4
   107e0:	2500      	movge	r5, #0
   107e2:	2501      	movlt	r5, #1
   107e4:	bfa8      	it	ge
   107e6:	461c      	movge	r4, r3
   107e8:	f8da 1004 	ldr.w	r1, [sl, #4]
   107ec:	4630      	mov	r0, r6
   107ee:	f7ff fdea 	bl	103c6 <_Balloc>
   107f2:	f104 0914 	add.w	r9, r4, #20
   107f6:	f8da 7010 	ldr.w	r7, [sl, #16]
   107fa:	f100 0814 	add.w	r8, r0, #20
   107fe:	6926      	ldr	r6, [r4, #16]
   10800:	f10a 0210 	add.w	r2, sl, #16
   10804:	60c5      	str	r5, [r0, #12]
   10806:	f10a 0514 	add.w	r5, sl, #20
   1080a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   1080e:	46c2      	mov	sl, r8
   10810:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   10814:	f04f 0c00 	mov.w	ip, #0
   10818:	f852 bf04 	ldr.w	fp, [r2, #4]!
   1081c:	f859 3b04 	ldr.w	r3, [r9], #4
   10820:	fa1f f18b 	uxth.w	r1, fp
   10824:	454e      	cmp	r6, r9
   10826:	4461      	add	r1, ip
   10828:	fa1f fc83 	uxth.w	ip, r3
   1082c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   10830:	eba1 010c 	sub.w	r1, r1, ip
   10834:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   10838:	eb03 4321 	add.w	r3, r3, r1, asr #16
   1083c:	b289      	uxth	r1, r1
   1083e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   10842:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   10846:	f84a 3b04 	str.w	r3, [sl], #4
   1084a:	d8e5      	bhi.n	10818 <__mdiff+0x66>
   1084c:	1b33      	subs	r3, r6, r4
   1084e:	3415      	adds	r4, #21
   10850:	3b15      	subs	r3, #21
   10852:	f023 0303 	bic.w	r3, r3, #3
   10856:	3304      	adds	r3, #4
   10858:	42a6      	cmp	r6, r4
   1085a:	bf38      	it	cc
   1085c:	2304      	movcc	r3, #4
   1085e:	441d      	add	r5, r3
   10860:	4443      	add	r3, r8
   10862:	462c      	mov	r4, r5
   10864:	461e      	mov	r6, r3
   10866:	4574      	cmp	r4, lr
   10868:	d30e      	bcc.n	10888 <__mdiff+0xd6>
   1086a:	f10e 0203 	add.w	r2, lr, #3
   1086e:	1b52      	subs	r2, r2, r5
   10870:	3d03      	subs	r5, #3
   10872:	f022 0203 	bic.w	r2, r2, #3
   10876:	45ae      	cmp	lr, r5
   10878:	bf38      	it	cc
   1087a:	2200      	movcc	r2, #0
   1087c:	441a      	add	r2, r3
   1087e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   10882:	b18b      	cbz	r3, 108a8 <__mdiff+0xf6>
   10884:	6107      	str	r7, [r0, #16]
   10886:	e7a6      	b.n	107d6 <__mdiff+0x24>
   10888:	f854 8b04 	ldr.w	r8, [r4], #4
   1088c:	fa1f f288 	uxth.w	r2, r8
   10890:	4462      	add	r2, ip
   10892:	1411      	asrs	r1, r2, #16
   10894:	b292      	uxth	r2, r2
   10896:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   1089a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1089e:	ea4f 4c21 	mov.w	ip, r1, asr #16
   108a2:	f846 2b04 	str.w	r2, [r6], #4
   108a6:	e7de      	b.n	10866 <__mdiff+0xb4>
   108a8:	3f01      	subs	r7, #1
   108aa:	e7e8      	b.n	1087e <__mdiff+0xcc>

000108ac <__d2b>:
   108ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   108b0:	461c      	mov	r4, r3
   108b2:	2101      	movs	r1, #1
   108b4:	4690      	mov	r8, r2
   108b6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   108ba:	f7ff fd84 	bl	103c6 <_Balloc>
   108be:	f3c4 0313 	ubfx	r3, r4, #0, #20
   108c2:	f3c4 540a 	ubfx	r4, r4, #20, #11
   108c6:	4607      	mov	r7, r0
   108c8:	bb2c      	cbnz	r4, 10916 <__d2b+0x6a>
   108ca:	9301      	str	r3, [sp, #4]
   108cc:	f1b8 0300 	subs.w	r3, r8, #0
   108d0:	d026      	beq.n	10920 <__d2b+0x74>
   108d2:	4668      	mov	r0, sp
   108d4:	9300      	str	r3, [sp, #0]
   108d6:	f7ff fe20 	bl	1051a <__lo0bits>
   108da:	9900      	ldr	r1, [sp, #0]
   108dc:	b1f0      	cbz	r0, 1091c <__d2b+0x70>
   108de:	9a01      	ldr	r2, [sp, #4]
   108e0:	f1c0 0320 	rsb	r3, r0, #32
   108e4:	fa02 f303 	lsl.w	r3, r2, r3
   108e8:	40c2      	lsrs	r2, r0
   108ea:	430b      	orrs	r3, r1
   108ec:	9201      	str	r2, [sp, #4]
   108ee:	617b      	str	r3, [r7, #20]
   108f0:	9b01      	ldr	r3, [sp, #4]
   108f2:	2b00      	cmp	r3, #0
   108f4:	61bb      	str	r3, [r7, #24]
   108f6:	bf14      	ite	ne
   108f8:	2102      	movne	r1, #2
   108fa:	2101      	moveq	r1, #1
   108fc:	6139      	str	r1, [r7, #16]
   108fe:	b1c4      	cbz	r4, 10932 <__d2b+0x86>
   10900:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   10904:	4404      	add	r4, r0
   10906:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1090a:	6034      	str	r4, [r6, #0]
   1090c:	6028      	str	r0, [r5, #0]
   1090e:	4638      	mov	r0, r7
   10910:	b002      	add	sp, #8
   10912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1091a:	e7d6      	b.n	108ca <__d2b+0x1e>
   1091c:	6179      	str	r1, [r7, #20]
   1091e:	e7e7      	b.n	108f0 <__d2b+0x44>
   10920:	a801      	add	r0, sp, #4
   10922:	f7ff fdfa 	bl	1051a <__lo0bits>
   10926:	9b01      	ldr	r3, [sp, #4]
   10928:	2101      	movs	r1, #1
   1092a:	3020      	adds	r0, #32
   1092c:	617b      	str	r3, [r7, #20]
   1092e:	6139      	str	r1, [r7, #16]
   10930:	e7e5      	b.n	108fe <__d2b+0x52>
   10932:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   10936:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1093a:	6030      	str	r0, [r6, #0]
   1093c:	6918      	ldr	r0, [r3, #16]
   1093e:	f7ff fdcc 	bl	104da <__hi0bits>
   10942:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   10946:	6029      	str	r1, [r5, #0]
   10948:	e7e1      	b.n	1090e <__d2b+0x62>

0001094a <_calloc_r>:
   1094a:	b538      	push	{r3, r4, r5, lr}
   1094c:	fb02 f501 	mul.w	r5, r2, r1
   10950:	4629      	mov	r1, r5
   10952:	f7fb f8cf 	bl	baf4 <_malloc_r>
   10956:	4604      	mov	r4, r0
   10958:	b118      	cbz	r0, 10962 <_calloc_r+0x18>
   1095a:	462a      	mov	r2, r5
   1095c:	2100      	movs	r1, #0
   1095e:	f7ff fa9c 	bl	fe9a <memset>
   10962:	4620      	mov	r0, r4
   10964:	bd38      	pop	{r3, r4, r5, pc}

00010966 <__sread>:
   10966:	b510      	push	{r4, lr}
   10968:	460c      	mov	r4, r1
   1096a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1096e:	f7fc f9bb 	bl	cce8 <_read_r>
   10972:	2800      	cmp	r0, #0
   10974:	bfab      	itete	ge
   10976:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   10978:	89a3      	ldrhlt	r3, [r4, #12]
   1097a:	181b      	addge	r3, r3, r0
   1097c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   10980:	bfac      	ite	ge
   10982:	6563      	strge	r3, [r4, #84]	; 0x54
   10984:	81a3      	strhlt	r3, [r4, #12]
   10986:	bd10      	pop	{r4, pc}

00010988 <__swrite>:
   10988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1098c:	461f      	mov	r7, r3
   1098e:	898b      	ldrh	r3, [r1, #12]
   10990:	4605      	mov	r5, r0
   10992:	460c      	mov	r4, r1
   10994:	05db      	lsls	r3, r3, #23
   10996:	4616      	mov	r6, r2
   10998:	d505      	bpl.n	109a6 <__swrite+0x1e>
   1099a:	2302      	movs	r3, #2
   1099c:	2200      	movs	r2, #0
   1099e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   109a2:	f7fc f98f 	bl	ccc4 <_lseek_r>
   109a6:	89a3      	ldrh	r3, [r4, #12]
   109a8:	4632      	mov	r2, r6
   109aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   109ae:	4628      	mov	r0, r5
   109b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   109b4:	81a3      	strh	r3, [r4, #12]
   109b6:	463b      	mov	r3, r7
   109b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   109bc:	f7fc b93e 	b.w	cc3c <_write_r>

000109c0 <__sseek>:
   109c0:	b510      	push	{r4, lr}
   109c2:	460c      	mov	r4, r1
   109c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   109c8:	f7fc f97c 	bl	ccc4 <_lseek_r>
   109cc:	1c43      	adds	r3, r0, #1
   109ce:	89a3      	ldrh	r3, [r4, #12]
   109d0:	bf15      	itete	ne
   109d2:	6560      	strne	r0, [r4, #84]	; 0x54
   109d4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   109d8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   109dc:	81a3      	strheq	r3, [r4, #12]
   109de:	bf18      	it	ne
   109e0:	81a3      	strhne	r3, [r4, #12]
   109e2:	bd10      	pop	{r4, pc}

000109e4 <__sclose>:
   109e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   109e8:	f7fc b93a 	b.w	cc60 <_close_r>

000109ec <__ascii_mbtowc>:
   109ec:	b082      	sub	sp, #8
   109ee:	b901      	cbnz	r1, 109f2 <__ascii_mbtowc+0x6>
   109f0:	a901      	add	r1, sp, #4
   109f2:	b142      	cbz	r2, 10a06 <__ascii_mbtowc+0x1a>
   109f4:	b14b      	cbz	r3, 10a0a <__ascii_mbtowc+0x1e>
   109f6:	7813      	ldrb	r3, [r2, #0]
   109f8:	600b      	str	r3, [r1, #0]
   109fa:	7812      	ldrb	r2, [r2, #0]
   109fc:	1e10      	subs	r0, r2, #0
   109fe:	bf18      	it	ne
   10a00:	2001      	movne	r0, #1
   10a02:	b002      	add	sp, #8
   10a04:	4770      	bx	lr
   10a06:	4610      	mov	r0, r2
   10a08:	e7fb      	b.n	10a02 <__ascii_mbtowc+0x16>
   10a0a:	f06f 0001 	mvn.w	r0, #1
   10a0e:	e7f8      	b.n	10a02 <__ascii_mbtowc+0x16>

00010a10 <__ascii_wctomb>:
   10a10:	4603      	mov	r3, r0
   10a12:	4608      	mov	r0, r1
   10a14:	b141      	cbz	r1, 10a28 <__ascii_wctomb+0x18>
   10a16:	2aff      	cmp	r2, #255	; 0xff
   10a18:	d904      	bls.n	10a24 <__ascii_wctomb+0x14>
   10a1a:	228a      	movs	r2, #138	; 0x8a
   10a1c:	f04f 30ff 	mov.w	r0, #4294967295
   10a20:	601a      	str	r2, [r3, #0]
   10a22:	4770      	bx	lr
   10a24:	2001      	movs	r0, #1
   10a26:	700a      	strb	r2, [r1, #0]
   10a28:	4770      	bx	lr
	...

00010a2c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10a2c:	f7f4 bdf0 	b.w	5610 <SystemInit>
